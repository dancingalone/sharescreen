!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ABS	utrie.c	31;"	d	file:
ABS	utrie.c	32;"	d	file:
ACE_PREFIX	uidna.cpp	/^static const UChar ACE_PREFIX[] ={ 0x0078,0x006E,0x002d,0x002d } ;$/;"	v	file:
ACE_PREFIX_LENGTH	uidna.cpp	32;"	d	file:
ADD_ODD_BIT_FROM_LEVEL	ubidiimp.h	148;"	d
AL	ubidiimp.h	/^    AL= U_RIGHT_TO_LEFT_ARABIC,$/;"	e	enum:__anon82
ALEFTYPE	ushape.c	54;"	d	file:
ALL	unisetspan.h	/^        ALL             = 0x3f,$/;"	e	enum:UnicodeSetStringSpan::__anon19
ALL_CP_CONTAINED	unisetspan.h	/^        ALL_CP_CONTAINED=0xff$/;"	e	enum:UnicodeSetStringSpan::__anon20
AMPERSAND	ucnv_u7.c	832;"	d	file:
AN	ubidiimp.h	/^    AN= U_ARABIC_NUMBER,$/;"	e	enum:__anon82
ANY	uniset_props.cpp	/^static const char ANY[]   = "ANY";   \/\/ [\\u0000-\\U0010FFFF]$/;"	v	file:
APOSTROPHE	util.cpp	/^static const UChar APOSTROPHE = 0x0027; \/\/ '\\''$/;"	v	file:
APRESENT	ushape.c	57;"	d	file:
ARB	ucnvisci.c	/^    ARB = 0x71,$/;"	e	enum:__anon14	file:
ARRAY_SIZE	usc_impl.c	20;"	d	file:
ASCII	ucnv2022.c	/^        ASCII = 0,$/;"	e	enum:__anon65	file:
ASCII	uniset_props.cpp	/^static const char ASCII[] = "ASCII"; \/\/ [\\u0000-\\u007F]$/;"	v	file:
ASCII1	ucnv2022.c	/^        ASCII1=0,$/;"	e	enum:__anon67	file:
ASCII_END	ucnvisci.c	50;"	d	file:
ASM	ucnvisci.c	/^    ASM = 0x46,$/;"	e	enum:__anon14	file:
ASSIGNED	uniset_props.cpp	/^static const char ASSIGNED[] = "Assigned"; \/\/ [:^Cn:]$/;"	v	file:
ATR	ucnvisci.c	36;"	d	file:
AT_SIGN_CHAR	locutil.cpp	24;"	d	file:
AT_SIGN_CHAR	servlk.cpp	24;"	d	file:
AT_SIGN_CHAR	servlkf.cpp	24;"	d	file:
AT_SIGN_CHAR	servls.cpp	24;"	d	file:
AT_SIGN_CHAR	servrbf.cpp	24;"	d	file:
AT_SIGN_CHAR	servslkf.cpp	24;"	d	file:
AbsoluteValueSubstitution	unicode/urename.h	1752;"	d
AlgorithmicRange	unames.c	/^} AlgorithmicRange;$/;"	t	typeref:struct:__anon93	file:
AlternateSubstitutionSubtable	unicode/urename.h	1753;"	d
AnchorTable	unicode/urename.h	1754;"	d
AndConstraint	unicode/urename.h	1755;"	d
AnnualTimeZoneRule	unicode/urename.h	1756;"	d
AnyTransliterator	unicode/urename.h	1757;"	d
Append	bytestream.cpp	/^void CheckedArrayByteSink::Append(const char* bytes, int32_t n) {$/;"	f	class:CheckedArrayByteSink	signature:(const char* bytes, int32_t n)
Append	unicode/bytestream.h	/^  virtual void Append(const char* bytes, int32_t n) = 0;$/;"	p	class:ByteSink	access:public	signature:(const char* bytes, int32_t n)
Append	unicode/bytestream.h	/^  virtual void Append(const char* bytes, int32_t n);$/;"	p	class:CheckedArrayByteSink	access:public	signature:(const char* bytes, int32_t n)
Append	unicode/bytestream.h	/^  virtual void Append(const char* data, int32_t n) { dest_->append(data, n); }$/;"	f	class:StringByteSink	access:public	signature:(const char* data, int32_t n)
ArabicOpenTypeLayoutEngine	unicode/urename.h	1758;"	d
ArabicShaping	unicode/urename.h	1759;"	d
ArgExtractor	unicode/urename.h	1760;"	d
B	ubidiimp.h	/^    B=  U_BLOCK_SEPARATOR,$/;"	e	enum:__anon82
BACK	unisetspan.h	/^        BACK            = 0x10,$/;"	e	enum:UnicodeSetStringSpan::__anon19
BACKSLASH	ucnv_u7.c	90;"	d	file:
BACKSLASH	uniset.cpp	35;"	d	file:
BACKSLASH	uniset_props.cpp	63;"	d	file:
BACKSLASH	util.cpp	/^static const UChar BACKSLASH  = 0x005C; \/*\\*\/$/;"	v	file:
BACK_UTF16_CONTAINED	unisetspan.h	/^        BACK_UTF16_CONTAINED    = BACK | UTF16 |     CONTAINED,$/;"	e	enum:UnicodeSetStringSpan::__anon19
BACK_UTF16_NOT_CONTAINED	unisetspan.h	/^        BACK_UTF16_NOT_CONTAINED= BACK | UTF16 | NOT_CONTAINED,$/;"	e	enum:UnicodeSetStringSpan::__anon19
BACK_UTF8_CONTAINED	unisetspan.h	/^        BACK_UTF8_CONTAINED     = BACK | UTF8  |     CONTAINED,$/;"	e	enum:UnicodeSetStringSpan::__anon19
BACK_UTF8_NOT_CONTAINED	unisetspan.h	/^        BACK_UTF8_NOT_CONTAINED = BACK | UTF8  | NOT_CONTAINED$/;"	e	enum:UnicodeSetStringSpan::__anon19
BASE	punycode.c	59;"	d	file:
BENGALI	ucnvisci.c	/^    BENGALI,$/;"	e	enum:__anon13	file:
BIDI_ABS	ubidi.c	1570;"	d	file:
BIDI_MIN	ubidi.c	1569;"	d	file:
BMPSet	bmpset.cpp	/^BMPSet::BMPSet(const BMPSet &otherBMPSet, const int32_t *newParentList, int32_t newParentListLength) :$/;"	f	class:BMPSet	signature:(const BMPSet &otherBMPSet, const int32_t *newParentList, int32_t newParentListLength)
BMPSet	bmpset.cpp	/^BMPSet::BMPSet(const int32_t *parentList, int32_t parentListLength) :$/;"	f	class:BMPSet	signature:(const int32_t *parentList, int32_t parentListLength)
BMPSet	bmpset.h	/^    BMPSet(const BMPSet &otherBMPSet, const int32_t *newParentList, int32_t newParentListLength);$/;"	p	class:BMPSet	access:public	signature:(const BMPSet &otherBMPSet, const int32_t *newParentList, int32_t newParentListLength)
BMPSet	bmpset.h	/^    BMPSet(const int32_t *parentList, int32_t parentListLength);$/;"	p	class:BMPSet	access:public	signature:(const int32_t *parentList, int32_t parentListLength)
BMPSet	bmpset.h	/^class BMPSet : public UMemory {$/;"	c	inherits:UMemory
BMPSet	unicode/uniset.h	/^class BMPSet;$/;"	x
BMPSet	unicode/urename.h	1761;"	d
BMPSet::BMPSet	bmpset.cpp	/^BMPSet::BMPSet(const BMPSet &otherBMPSet, const int32_t *newParentList, int32_t newParentListLength) :$/;"	f	class:BMPSet	signature:(const BMPSet &otherBMPSet, const int32_t *newParentList, int32_t newParentListLength)
BMPSet::BMPSet	bmpset.cpp	/^BMPSet::BMPSet(const int32_t *parentList, int32_t parentListLength) :$/;"	f	class:BMPSet	signature:(const int32_t *parentList, int32_t parentListLength)
BMPSet::BMPSet	bmpset.h	/^    BMPSet(const BMPSet &otherBMPSet, const int32_t *newParentList, int32_t newParentListLength);$/;"	p	class:BMPSet	access:public	signature:(const BMPSet &otherBMPSet, const int32_t *newParentList, int32_t newParentListLength)
BMPSet::BMPSet	bmpset.h	/^    BMPSet(const int32_t *parentList, int32_t parentListLength);$/;"	p	class:BMPSet	access:public	signature:(const int32_t *parentList, int32_t parentListLength)
BMPSet::asciiBytes	bmpset.h	/^    UBool asciiBytes[0xc0];$/;"	m	class:BMPSet	access:private
BMPSet::bmpBlockBits	bmpset.h	/^    uint32_t bmpBlockBits[64];$/;"	m	class:BMPSet	access:private
BMPSet::contains	bmpset.cpp	/^BMPSet::contains(UChar32 c) const {$/;"	f	class:BMPSet	signature:(UChar32 c) const
BMPSet::contains	bmpset.h	/^    virtual UBool contains(UChar32 c) const;$/;"	p	class:BMPSet	access:public	signature:(UChar32 c) const
BMPSet::containsSlow	bmpset.h	/^    inline UBool containsSlow(UChar32 c, int32_t lo, int32_t hi) const;$/;"	p	class:BMPSet	access:private	signature:(UChar32 c, int32_t lo, int32_t hi) const
BMPSet::containsSlow	bmpset.h	/^inline UBool BMPSet::containsSlow(UChar32 c, int32_t lo, int32_t hi) const {$/;"	f	class:BMPSet	signature:(UChar32 c, int32_t lo, int32_t hi) const
BMPSet::findCodePoint	bmpset.cpp	/^int32_t BMPSet::findCodePoint(UChar32 c, int32_t lo, int32_t hi) const {$/;"	f	class:BMPSet	signature:(UChar32 c, int32_t lo, int32_t hi) const
BMPSet::findCodePoint	bmpset.h	/^    int32_t findCodePoint(UChar32 c, int32_t lo, int32_t hi) const;$/;"	p	class:BMPSet	access:private	signature:(UChar32 c, int32_t lo, int32_t hi) const
BMPSet::initBits	bmpset.cpp	/^void BMPSet::initBits() {$/;"	f	class:BMPSet	signature:()
BMPSet::initBits	bmpset.h	/^    void initBits();$/;"	p	class:BMPSet	access:private	signature:()
BMPSet::list	bmpset.h	/^    const int32_t *list;$/;"	m	class:BMPSet	access:private
BMPSet::list4kStarts	bmpset.h	/^    int32_t list4kStarts[18];$/;"	m	class:BMPSet	access:private
BMPSet::listLength	bmpset.h	/^    int32_t listLength;$/;"	m	class:BMPSet	access:private
BMPSet::overrideIllegal	bmpset.cpp	/^void BMPSet::overrideIllegal() {$/;"	f	class:BMPSet	signature:()
BMPSet::overrideIllegal	bmpset.h	/^    void overrideIllegal();$/;"	p	class:BMPSet	access:private	signature:()
BMPSet::span	bmpset.cpp	/^BMPSet::span(const UChar *s, const UChar *limit, USetSpanCondition spanCondition) const {$/;"	f	class:BMPSet	signature:(const UChar *s, const UChar *limit, USetSpanCondition spanCondition) const
BMPSet::span	bmpset.h	/^    const UChar *span(const UChar *s, const UChar *limit, USetSpanCondition spanCondition) const;$/;"	p	class:BMPSet	access:public	signature:(const UChar *s, const UChar *limit, USetSpanCondition spanCondition) const
BMPSet::spanBack	bmpset.cpp	/^BMPSet::spanBack(const UChar *s, const UChar *limit, USetSpanCondition spanCondition) const {$/;"	f	class:BMPSet	signature:(const UChar *s, const UChar *limit, USetSpanCondition spanCondition) const
BMPSet::spanBack	bmpset.h	/^    const UChar *spanBack(const UChar *s, const UChar *limit, USetSpanCondition spanCondition) const;$/;"	p	class:BMPSet	access:public	signature:(const UChar *s, const UChar *limit, USetSpanCondition spanCondition) const
BMPSet::spanBackUTF8	bmpset.cpp	/^BMPSet::spanBackUTF8(const uint8_t *s, int32_t length, USetSpanCondition spanCondition) const {$/;"	f	class:BMPSet	signature:(const uint8_t *s, int32_t length, USetSpanCondition spanCondition) const
BMPSet::spanBackUTF8	bmpset.h	/^    int32_t spanBackUTF8(const uint8_t *s, int32_t length, USetSpanCondition spanCondition) const;$/;"	p	class:BMPSet	access:public	signature:(const uint8_t *s, int32_t length, USetSpanCondition spanCondition) const
BMPSet::spanUTF8	bmpset.cpp	/^BMPSet::spanUTF8(const uint8_t *s, int32_t length, USetSpanCondition spanCondition) const {$/;"	f	class:BMPSet	signature:(const uint8_t *s, int32_t length, USetSpanCondition spanCondition) const
BMPSet::spanUTF8	bmpset.h	/^    const uint8_t *spanUTF8(const uint8_t *s, int32_t length, USetSpanCondition spanCondition) const;$/;"	p	class:BMPSet	access:public	signature:(const uint8_t *s, int32_t length, USetSpanCondition spanCondition) const
BMPSet::table7FF	bmpset.h	/^    uint32_t table7FF[64];$/;"	m	class:BMPSet	access:private
BMPSet::~BMPSet	bmpset.cpp	/^BMPSet::~BMPSet() {$/;"	f	class:BMPSet	signature:()
BMPSet::~BMPSet	bmpset.h	/^    virtual ~BMPSet();$/;"	p	class:BMPSet	access:public	signature:()
BN	ubidiimp.h	/^    BN= U_BOUNDARY_NEUTRAL,$/;"	e	enum:__anon82
BNG	ucnvisci.c	/^    BNG = 0x43,$/;"	e	enum:__anon14	file:
BNG_MASK	ucnvisci.c	/^    BNG_MASK =0x08,$/;"	e	enum:__anon15	file:
BOCU1_ASCII_PREV	ucnvbocu.c	51;"	d	file:
BOCU1_COUNT	ucnvbocu.c	61;"	d	file:
BOCU1_LEAD_2	ucnvbocu.c	77;"	d	file:
BOCU1_LEAD_3	ucnvbocu.c	78;"	d	file:
BOCU1_LEAD_4	ucnvbocu.c	79;"	d	file:
BOCU1_LENGTH_FROM_LEAD	ucnvbocu.c	107;"	d	file:
BOCU1_LENGTH_FROM_PACKED	ucnvbocu.c	113;"	d	file:
BOCU1_MAX_LEAD	ucnvbocu.c	56;"	d	file:
BOCU1_MAX_TRAIL	ucnvbocu.c	57;"	d	file:
BOCU1_MIDDLE	ucnvbocu.c	55;"	d	file:
BOCU1_MIN	ucnvbocu.c	54;"	d	file:
BOCU1_PREV	ucnvbocu.c	239;"	d	file:
BOCU1_REACH_NEG_1	ucnvbocu.c	83;"	d	file:
BOCU1_REACH_NEG_2	ucnvbocu.c	87;"	d	file:
BOCU1_REACH_NEG_3	ucnvbocu.c	93;"	d	file:
BOCU1_REACH_POS_1	ucnvbocu.c	82;"	d	file:
BOCU1_REACH_POS_2	ucnvbocu.c	86;"	d	file:
BOCU1_REACH_POS_3	ucnvbocu.c	90;"	d	file:
BOCU1_RESET	ucnvbocu.c	58;"	d	file:
BOCU1_SIMPLE_PREV	ucnvbocu.c	211;"	d	file:
BOCU1_SINGLE	ucnvbocu.c	74;"	d	file:
BOCU1_START_NEG_2	ucnvbocu.c	101;"	d	file:
BOCU1_START_NEG_3	ucnvbocu.c	102;"	d	file:
BOCU1_START_NEG_4	ucnvbocu.c	103;"	d	file:
BOCU1_START_POS_2	ucnvbocu.c	96;"	d	file:
BOCU1_START_POS_3	ucnvbocu.c	97;"	d	file:
BOCU1_START_POS_4	ucnvbocu.c	98;"	d	file:
BOCU1_TRAIL_BYTE_OFFSET	ucnvbocu.c	65;"	d	file:
BOCU1_TRAIL_CONTROLS_COUNT	ucnvbocu.c	64;"	d	file:
BOCU1_TRAIL_COUNT	ucnvbocu.c	68;"	d	file:
BOCU1_TRAIL_TO_BYTE	ucnvbocu.c	144;"	d	file:
BRKENG_H	brkeng.h	9;"	d
BRKITER_H	unicode/brkiter.h	21;"	d
BackwardUTrie2StringIterator	unicode/urename.h	1762;"	d
BackwardUTrie2StringIterator	utrie2.h	/^    BackwardUTrie2StringIterator(const UTrie2 *t, const UChar *s, const UChar *p) :$/;"	f	class:BackwardUTrie2StringIterator	access:public	signature:(const UTrie2 *t, const UChar *s, const UChar *p)
BackwardUTrie2StringIterator	utrie2.h	/^class BackwardUTrie2StringIterator : public UTrie2StringIterator {$/;"	c	inherits:UTrie2StringIterator
BackwardUTrie2StringIterator::BackwardUTrie2StringIterator	utrie2.h	/^    BackwardUTrie2StringIterator(const UTrie2 *t, const UChar *s, const UChar *p) :$/;"	f	class:BackwardUTrie2StringIterator	access:public	signature:(const UTrie2 *t, const UChar *s, const UChar *p)
BackwardUTrie2StringIterator::previous16	utrie2.cpp	/^uint16_t BackwardUTrie2StringIterator::previous16() {$/;"	f	class:BackwardUTrie2StringIterator	signature:()
BackwardUTrie2StringIterator::previous16	utrie2.h	/^    uint16_t previous16();$/;"	p	class:BackwardUTrie2StringIterator	access:public	signature:()
BackwardUTrie2StringIterator::start	utrie2.h	/^    const UChar *start;$/;"	m	class:BackwardUTrie2StringIterator	access:public
BadCharacterTable	unicode/urename.h	1763;"	d
BasicCalendarFactory	unicode/urename.h	1764;"	d
BasicTimeZone	unicode/urename.h	1765;"	d
BidiMemoryForAllocation	ubidiimp.h	/^} BidiMemoryForAllocation;$/;"	t	typeref:union:__anon85
BinaryProperty	uprops.cpp	/^struct BinaryProperty {$/;"	s	file:
BinaryProperty	uprops.cpp	/^struct BinaryProperty;$/;"	x	file:
BinaryProperty::column	uprops.cpp	/^    int32_t column;  \/\/ SRC_PROPSVEC column, or "source" if mask==0$/;"	m	struct:BinaryProperty	file:	access:public
BinaryProperty::contains	uprops.cpp	/^    BinaryPropertyContains *contains;$/;"	m	struct:BinaryProperty	file:	access:public
BinaryProperty::mask	uprops.cpp	/^    uint32_t mask;$/;"	m	struct:BinaryProperty	file:	access:public
BinaryPropertyContains	uprops.cpp	/^typedef UBool BinaryPropertyContains(const BinaryProperty &prop, UChar32 c, UProperty which);$/;"	t	file:
BinarySearchLookupTable	unicode/urename.h	1766;"	d
BitPatternConversion	putil.c	/^} BitPatternConversion;$/;"	t	typeref:union:__anon40	file:
BoyerMooreSearch	unicode/urename.h	1767;"	d
BreakIterator	brkiter.cpp	/^BreakIterator::BreakIterator()$/;"	f	class:BreakIterator	signature:()
BreakIterator	unicode/brkiter.h	/^class BreakIterator;$/;"	x
BreakIterator	unicode/brkiter.h	/^class U_COMMON_API BreakIterator : public UObject {$/;"	c	inherits:UObject
BreakIterator	unicode/rbbi.h	/^    friend class BreakIterator;$/;"	x
BreakIterator	unicode/rbbi.h	/^class  BreakIterator;$/;"	x
BreakIterator	unicode/unistr.h	/^class BreakIterator;        \/\/ unicode\/brkiter.h$/;"	x
BreakIterator	unicode/urename.h	1768;"	d
BreakIterator::BreakIterator	brkiter.cpp	/^BreakIterator::BreakIterator()$/;"	f	class:BreakIterator	signature:()
BreakIterator::DONE	unicode/brkiter.h	/^        DONE = (int32_t)-1$/;"	e	enum:BreakIterator::__anon111
BreakIterator::adoptText	unicode/brkiter.h	/^    virtual void  adoptText(CharacterIterator* it) = 0;$/;"	p	class:BreakIterator	access:public	signature:(CharacterIterator* it)
BreakIterator::buildInstance	brkiter.cpp	/^BreakIterator::buildInstance(const Locale& loc, const char *type, int32_t kind, UErrorCode &status)$/;"	f	class:BreakIterator	signature:(const Locale& loc, const char *type, int32_t kind, UErrorCode &status)
BreakIterator::clone	unicode/brkiter.h	/^    virtual BreakIterator* clone(void) const = 0;$/;"	p	class:BreakIterator	access:public	signature:(void) const
BreakIterator::createBufferClone	unicode/brkiter.h	/^    virtual BreakIterator *  createBufferClone(void *stackBuffer,$/;"	p	class:BreakIterator	access:public	signature:(void *stackBuffer, int32_t &BufferSize, UErrorCode &status)
BreakIterator::createCharacterInstance	brkiter.cpp	/^BreakIterator::createCharacterInstance(const Locale& key, UErrorCode& status)$/;"	f	class:BreakIterator	signature:(const Locale& key, UErrorCode& status)
BreakIterator::createCharacterInstance	unicode/brkiter.h	/^    createCharacterInstance(const Locale& where, UErrorCode& status);$/;"	p	class:BreakIterator	access:public	signature:(const Locale& where, UErrorCode& status)
BreakIterator::createInstance	brkiter.cpp	/^BreakIterator::createInstance(const Locale& loc, int32_t kind, UErrorCode& status)$/;"	f	class:BreakIterator	signature:(const Locale& loc, int32_t kind, UErrorCode& status)
BreakIterator::createLineInstance	brkiter.cpp	/^BreakIterator::createLineInstance(const Locale& key, UErrorCode& status)$/;"	f	class:BreakIterator	signature:(const Locale& key, UErrorCode& status)
BreakIterator::createLineInstance	unicode/brkiter.h	/^    createLineInstance(const Locale& where, UErrorCode& status);$/;"	p	class:BreakIterator	access:public	signature:(const Locale& where, UErrorCode& status)
BreakIterator::createSentenceInstance	brkiter.cpp	/^BreakIterator::createSentenceInstance(const Locale& key, UErrorCode& status)$/;"	f	class:BreakIterator	signature:(const Locale& key, UErrorCode& status)
BreakIterator::createSentenceInstance	unicode/brkiter.h	/^    createSentenceInstance(const Locale& where, UErrorCode& status);$/;"	p	class:BreakIterator	access:public	signature:(const Locale& where, UErrorCode& status)
BreakIterator::createTitleInstance	brkiter.cpp	/^BreakIterator::createTitleInstance(const Locale& key, UErrorCode& status)$/;"	f	class:BreakIterator	signature:(const Locale& key, UErrorCode& status)
BreakIterator::createTitleInstance	unicode/brkiter.h	/^    createTitleInstance(const Locale& where, UErrorCode& status);$/;"	p	class:BreakIterator	access:public	signature:(const Locale& where, UErrorCode& status)
BreakIterator::createWordInstance	brkiter.cpp	/^BreakIterator::createWordInstance(const Locale& key, UErrorCode& status)$/;"	f	class:BreakIterator	signature:(const Locale& key, UErrorCode& status)
BreakIterator::createWordInstance	unicode/brkiter.h	/^    createWordInstance(const Locale& where, UErrorCode& status);$/;"	p	class:BreakIterator	access:public	signature:(const Locale& where, UErrorCode& status)
BreakIterator::current	unicode/brkiter.h	/^    virtual int32_t current(void) const = 0;$/;"	p	class:BreakIterator	access:public	signature:(void) const
BreakIterator::first	unicode/brkiter.h	/^    virtual int32_t first(void) = 0;$/;"	p	class:BreakIterator	access:public	signature:(void)
BreakIterator::following	unicode/brkiter.h	/^    virtual int32_t following(int32_t offset) = 0;$/;"	p	class:BreakIterator	access:public	signature:(int32_t offset)
BreakIterator::getAvailableLocales	brkiter.cpp	/^BreakIterator::getAvailableLocales(int32_t& count)$/;"	f	class:BreakIterator	signature:(int32_t& count)
BreakIterator::getAvailableLocales	brkiter.cpp	/^BreakIterator::getAvailableLocales(void)$/;"	f	class:BreakIterator	signature:(void)
BreakIterator::getAvailableLocales	unicode/brkiter.h	/^    static const Locale* U_EXPORT2 getAvailableLocales(int32_t& count);$/;"	p	class:BreakIterator	access:public	signature:(int32_t& count)
BreakIterator::getDisplayName	locdispnames.cpp	/^BreakIterator::getDisplayName(const Locale& objectLocale,$/;"	f	class:BreakIterator	signature:(const Locale& objectLocale, UnicodeString& name)
BreakIterator::getDisplayName	locdispnames.cpp	/^BreakIterator::getDisplayName(const Locale& objectLocale,$/;"	f	class:BreakIterator	signature:(const Locale& objectLocale, const Locale& displayLocale, UnicodeString& name)
BreakIterator::getDisplayName	unicode/brkiter.h	/^    static UnicodeString& U_EXPORT2 getDisplayName(const Locale& objectLocale,$/;"	p	class:BreakIterator	access:public	signature:(const Locale& objectLocale, UnicodeString& name)
BreakIterator::getDisplayName	unicode/brkiter.h	/^    static UnicodeString& U_EXPORT2 getDisplayName(const Locale& objectLocale,$/;"	p	class:BreakIterator	access:public	signature:(const Locale& objectLocale, const Locale& displayLocale, UnicodeString& name)
BreakIterator::getDynamicClassID	unicode/brkiter.h	/^    virtual UClassID getDynamicClassID(void) const = 0;$/;"	p	class:BreakIterator	access:public	signature:(void) const
BreakIterator::getLocale	brkiter.cpp	/^BreakIterator::getLocale(ULocDataLocaleType type, UErrorCode& status) const {$/;"	f	class:BreakIterator	signature:(ULocDataLocaleType type, UErrorCode& status) const
BreakIterator::getLocaleID	brkiter.cpp	/^BreakIterator::getLocaleID(ULocDataLocaleType type, UErrorCode& status) const {$/;"	f	class:BreakIterator	signature:(ULocDataLocaleType type, UErrorCode& status) const
BreakIterator::getText	unicode/brkiter.h	/^    virtual CharacterIterator& getText(void) const = 0;$/;"	p	class:BreakIterator	access:public	signature:(void) const
BreakIterator::getUText	unicode/brkiter.h	/^     virtual UText *getUText(UText *fillIn, UErrorCode &status) const = 0;$/;"	p	class:BreakIterator	access:public	signature:(UText *fillIn, UErrorCode &status) const
BreakIterator::isBoundary	unicode/brkiter.h	/^    virtual UBool isBoundary(int32_t offset) = 0;$/;"	p	class:BreakIterator	access:public	signature:(int32_t offset)
BreakIterator::isBufferClone	unicode/brkiter.h	/^    inline UBool isBufferClone(void);$/;"	p	class:BreakIterator	access:public	signature:(void)
BreakIterator::last	unicode/brkiter.h	/^    virtual int32_t last(void) = 0;$/;"	p	class:BreakIterator	access:public	signature:(void)
BreakIterator::makeInstance	brkiter.cpp	/^BreakIterator::makeInstance(const Locale& loc, int32_t kind, UErrorCode& status)$/;"	f	class:BreakIterator	signature:(const Locale& loc, int32_t kind, UErrorCode& status)
BreakIterator::next	unicode/brkiter.h	/^    virtual int32_t next(int32_t n) = 0;$/;"	p	class:BreakIterator	access:public	signature:(int32_t n)
BreakIterator::next	unicode/brkiter.h	/^    virtual int32_t next(void) = 0;$/;"	p	class:BreakIterator	access:public	signature:(void)
BreakIterator::operator !=	unicode/brkiter.h	/^    UBool operator!=(const BreakIterator& rhs) const { return !operator==(rhs); }$/;"	f	class:BreakIterator	access:public	signature:(const BreakIterator& rhs) const
BreakIterator::operator ==	unicode/brkiter.h	/^    virtual UBool operator==(const BreakIterator&) const = 0;$/;"	p	class:BreakIterator	access:public	signature:(const BreakIterator&) const
BreakIterator::preceding	unicode/brkiter.h	/^    virtual int32_t preceding(int32_t offset) = 0;$/;"	p	class:BreakIterator	access:public	signature:(int32_t offset)
BreakIterator::previous	unicode/brkiter.h	/^    virtual int32_t previous(void) = 0;$/;"	p	class:BreakIterator	access:public	signature:(void)
BreakIterator::registerInstance	brkiter.cpp	/^BreakIterator::registerInstance(BreakIterator* toAdopt, const Locale& locale, UBreakIteratorType kind, UErrorCode& status)$/;"	f	class:BreakIterator	signature:(BreakIterator* toAdopt, const Locale& locale, UBreakIteratorType kind, UErrorCode& status)
BreakIterator::setText	unicode/brkiter.h	/^    virtual void  setText(UText *text, UErrorCode &status) = 0;$/;"	p	class:BreakIterator	access:public	signature:(UText *text, UErrorCode &status)
BreakIterator::setText	unicode/brkiter.h	/^    virtual void  setText(const UnicodeString &text) = 0;$/;"	p	class:BreakIterator	access:public	signature:(const UnicodeString &text)
BreakIterator::unregister	brkiter.cpp	/^BreakIterator::unregister(URegistryKey key, UErrorCode& status)$/;"	f	class:BreakIterator	signature:(URegistryKey key, UErrorCode& status)
BreakIterator::~BreakIterator	brkiter.cpp	/^BreakIterator::~BreakIterator()$/;"	f	class:BreakIterator	signature:()
BreakIterator::~BreakIterator	unicode/brkiter.h	/^    virtual ~BreakIterator();$/;"	p	class:BreakIterator	access:public	signature:()
BreakTransliterator	unicode/urename.h	1769;"	d
BuddhistCalendar	unicode/urename.h	1770;"	d
BuildCompactTrieHorizontalNode	triedict.cpp	/^    BuildCompactTrieHorizontalNode(UBool parentEndsWord, UStack &nodes, UErrorCode &status)$/;"	f	class:BuildCompactTrieHorizontalNode	access:public	signature:(UBool parentEndsWord, UStack &nodes, UErrorCode &status)
BuildCompactTrieHorizontalNode	triedict.cpp	/^class BuildCompactTrieHorizontalNode: public BuildCompactTrieNode {$/;"	c	file:	inherits:BuildCompactTrieNode
BuildCompactTrieHorizontalNode	unicode/urename.h	1771;"	d
BuildCompactTrieHorizontalNode::BuildCompactTrieHorizontalNode	triedict.cpp	/^    BuildCompactTrieHorizontalNode(UBool parentEndsWord, UStack &nodes, UErrorCode &status)$/;"	f	class:BuildCompactTrieHorizontalNode	access:public	signature:(UBool parentEndsWord, UStack &nodes, UErrorCode &status)
BuildCompactTrieHorizontalNode::addNode	triedict.cpp	/^    void addNode(UChar ch, BuildCompactTrieNode *link, UErrorCode &status) {$/;"	f	class:BuildCompactTrieHorizontalNode	access:public	signature:(UChar ch, BuildCompactTrieNode *link, UErrorCode &status)
BuildCompactTrieHorizontalNode::fLinks	triedict.cpp	/^    UStack          fLinks;$/;"	m	class:BuildCompactTrieHorizontalNode	file:	access:public
BuildCompactTrieHorizontalNode::size	triedict.cpp	/^    virtual uint32_t size() {$/;"	f	class:BuildCompactTrieHorizontalNode	access:public	signature:()
BuildCompactTrieHorizontalNode::write	triedict.cpp	/^    virtual void write(uint8_t *bytes, uint32_t &offset, const UVector32 &translate) {$/;"	f	class:BuildCompactTrieHorizontalNode	access:public	signature:(uint8_t *bytes, uint32_t &offset, const UVector32 &translate)
BuildCompactTrieHorizontalNode::~BuildCompactTrieHorizontalNode	triedict.cpp	/^    virtual ~BuildCompactTrieHorizontalNode() {$/;"	f	class:BuildCompactTrieHorizontalNode	access:public	signature:()
BuildCompactTrieNode	triedict.cpp	/^    BuildCompactTrieNode(UBool parentEndsWord, UBool vertical, UStack &nodes, UErrorCode &status) {$/;"	f	class:BuildCompactTrieNode	access:public	signature:(UBool parentEndsWord, UBool vertical, UStack &nodes, UErrorCode &status)
BuildCompactTrieNode	triedict.cpp	/^class BuildCompactTrieNode: public UMemory {$/;"	c	file:	inherits:UMemory
BuildCompactTrieNode	unicode/urename.h	1772;"	d
BuildCompactTrieNode::BuildCompactTrieNode	triedict.cpp	/^    BuildCompactTrieNode(UBool parentEndsWord, UBool vertical, UStack &nodes, UErrorCode &status) {$/;"	f	class:BuildCompactTrieNode	access:public	signature:(UBool parentEndsWord, UBool vertical, UStack &nodes, UErrorCode &status)
BuildCompactTrieNode::fChars	triedict.cpp	/^    UnicodeString   fChars;$/;"	m	class:BuildCompactTrieNode	file:	access:public
BuildCompactTrieNode::fHasDuplicate	triedict.cpp	/^    UBool           fHasDuplicate;$/;"	m	class:BuildCompactTrieNode	file:	access:public
BuildCompactTrieNode::fNodeID	triedict.cpp	/^    int32_t         fNodeID;$/;"	m	class:BuildCompactTrieNode	file:	access:public
BuildCompactTrieNode::fParentEndsWord	triedict.cpp	/^    UBool           fParentEndsWord;$/;"	m	class:BuildCompactTrieNode	file:	access:public
BuildCompactTrieNode::fVertical	triedict.cpp	/^    UBool           fVertical;$/;"	m	class:BuildCompactTrieNode	file:	access:public
BuildCompactTrieNode::size	triedict.cpp	/^    virtual uint32_t size() {$/;"	f	class:BuildCompactTrieNode	access:public	signature:()
BuildCompactTrieNode::write	triedict.cpp	/^    virtual void write(uint8_t *bytes, uint32_t &offset, const UVector32 &\/*translate*\/) {$/;"	f	class:BuildCompactTrieNode	access:public	signature:(uint8_t *bytes, uint32_t &offset, const UVector32 & )
BuildCompactTrieNode::~BuildCompactTrieNode	triedict.cpp	/^    virtual ~BuildCompactTrieNode() {$/;"	f	class:BuildCompactTrieNode	access:public	signature:()
BuildCompactTrieVerticalNode	triedict.cpp	/^    BuildCompactTrieVerticalNode(UBool parentEndsWord, UStack &nodes, UErrorCode &status)$/;"	f	class:BuildCompactTrieVerticalNode	access:public	signature:(UBool parentEndsWord, UStack &nodes, UErrorCode &status)
BuildCompactTrieVerticalNode	triedict.cpp	/^class BuildCompactTrieVerticalNode: public BuildCompactTrieNode {$/;"	c	file:	inherits:BuildCompactTrieNode
BuildCompactTrieVerticalNode	unicode/urename.h	1773;"	d
BuildCompactTrieVerticalNode::BuildCompactTrieVerticalNode	triedict.cpp	/^    BuildCompactTrieVerticalNode(UBool parentEndsWord, UStack &nodes, UErrorCode &status)$/;"	f	class:BuildCompactTrieVerticalNode	access:public	signature:(UBool parentEndsWord, UStack &nodes, UErrorCode &status)
BuildCompactTrieVerticalNode::addChar	triedict.cpp	/^    void addChar(UChar ch) {$/;"	f	class:BuildCompactTrieVerticalNode	access:public	signature:(UChar ch)
BuildCompactTrieVerticalNode::fEqual	triedict.cpp	/^    BuildCompactTrieNode    *fEqual;$/;"	m	class:BuildCompactTrieVerticalNode	file:	access:public
BuildCompactTrieVerticalNode::setLink	triedict.cpp	/^    void setLink(BuildCompactTrieNode *node) {$/;"	f	class:BuildCompactTrieVerticalNode	access:public	signature:(BuildCompactTrieNode *node)
BuildCompactTrieVerticalNode::size	triedict.cpp	/^    virtual uint32_t size() {$/;"	f	class:BuildCompactTrieVerticalNode	access:public	signature:()
BuildCompactTrieVerticalNode::write	triedict.cpp	/^    virtual void write(uint8_t *bytes, uint32_t &offset, const UVector32 &translate) {$/;"	f	class:BuildCompactTrieVerticalNode	access:public	signature:(uint8_t *bytes, uint32_t &offset, const UVector32 &translate)
BuildCompactTrieVerticalNode::~BuildCompactTrieVerticalNode	triedict.cpp	/^    virtual ~BuildCompactTrieVerticalNode() {$/;"	f	class:BuildCompactTrieVerticalNode	access:public	signature:()
Builder	propname.h	/^class Builder;$/;"	x
BuilderScriptSet	unicode/urename.h	1774;"	d
ByteSink	unicode/bytestream.h	/^  ByteSink() { }$/;"	f	class:ByteSink	access:public	signature:()
ByteSink	unicode/bytestream.h	/^  ByteSink(const ByteSink &); \/\/ copy constructor not implemented$/;"	p	class:ByteSink	access:private	signature:(const ByteSink &)
ByteSink	unicode/bytestream.h	/^class U_COMMON_API ByteSink : public UMemory {$/;"	c	inherits:UMemory
ByteSink	unicode/urename.h	1775;"	d
ByteSink::Append	unicode/bytestream.h	/^  virtual void Append(const char* bytes, int32_t n) = 0;$/;"	p	class:ByteSink	access:public	signature:(const char* bytes, int32_t n)
ByteSink::ByteSink	unicode/bytestream.h	/^  ByteSink() { }$/;"	f	class:ByteSink	access:public	signature:()
ByteSink::ByteSink	unicode/bytestream.h	/^  ByteSink(const ByteSink &); \/\/ copy constructor not implemented$/;"	p	class:ByteSink	access:private	signature:(const ByteSink &)
ByteSink::Flush	bytestream.cpp	/^void ByteSink::Flush() {}$/;"	f	class:ByteSink	signature:()
ByteSink::Flush	unicode/bytestream.h	/^  virtual void Flush();$/;"	p	class:ByteSink	access:public	signature:()
ByteSink::GetAppendBuffer	bytestream.cpp	/^char* ByteSink::GetAppendBuffer(int32_t min_capacity,$/;"	f	class:ByteSink	signature:(int32_t min_capacity, int32_t , char* scratch, int32_t scratch_capacity, int32_t* result_capacity)
ByteSink::GetAppendBuffer	unicode/bytestream.h	/^  virtual char* GetAppendBuffer(int32_t min_capacity,$/;"	p	class:ByteSink	access:public	signature:(int32_t min_capacity, int32_t desired_capacity_hint, char* scratch, int32_t scratch_capacity, int32_t* result_capacity)
ByteSink::operator =	unicode/bytestream.h	/^  ByteSink &operator=(const ByteSink &); \/\/ assignment operator not implemented$/;"	p	class:ByteSink	access:private	signature:(const ByteSink &)
ByteSink::~ByteSink	unicode/bytestream.h	/^  virtual ~ByteSink() { }$/;"	f	class:ByteSink	access:public	signature:()
CANITER_H	unicode/caniter.h	9;"	d
CANITER_SKIP_ZEROES	unicode/caniter.h	28;"	d
CANONICALIZE_MAP	uloc.c	/^static const CanonicalizationMap CANONICALIZE_MAP[] = {$/;"	v	file:
CANON_HAS_COMPOSITIONS	normalizer2impl.h	500;"	d
CANON_HAS_SET	normalizer2impl.h	501;"	d
CANON_NOT_SEGMENT_STARTER	normalizer2impl.h	499;"	d
CANON_VALUE_MASK	normalizer2impl.h	502;"	d
CAPITAL_A	uidna.cpp	45;"	d	file:
CAPITAL_Z	uidna.cpp	46;"	d	file:
CAT_MASK	uprops.h	62;"	d
CEBuffer	unicode/urename.h	1776;"	d
CECalendar	unicode/urename.h	1777;"	d
CEList	unicode/urename.h	1778;"	d
CEToStringsMap	unicode/urename.h	1779;"	d
CFactory	unicode/urename.h	1780;"	d
CGJ	uprops.h	/^    CGJ     =0x034f,$/;"	e	enum:__anon90
CHARITER_H	unicode/chariter.h	11;"	d
CHARSTRING_H	charstr.h	13;"	d
CHAR_TO_UCHAR	uinvchar.c	149;"	d	file:
CHAR_TO_UCHAR	uinvchar.c	152;"	d	file:
CHECK_LOCALTIME_LINK	putil.c	654;"	d	file:
CHECK_SOURCE_LIMIT	ucnv_lmb.c	1103;"	d	file:
CHECK_TRAILING_VARIANT_SIZE	loclikely.cpp	822;"	d	file:
CHUNK_SIZE	ucnv.c	41;"	d	file:
CIBufSize	utext.cpp	2984;"	d	file:
CLOSE_BRACE	uniset.cpp	40;"	d	file:
CLOSE_BRACE	uniset_props.cpp	68;"	d	file:
CMEMORY_H	cmemory.h	25;"	d
CNS_11643	ucnv2022.c	/^        CNS_11643=3,$/;"	e	enum:__anon65	file:
CNS_11643_0	ucnv2022.c	/^        CNS_11643_0=0x20,$/;"	e	enum:__anon65	file:
CNS_11643_1	ucnv2022.c	/^        CNS_11643_1,$/;"	e	enum:__anon65	file:
CNS_11643_1992_Plane_1_STR	ucnv2022.c	/^static const char CNS_11643_1992_Plane_1_STR[] = "\\x1B\\x24\\x29\\x47";$/;"	v	file:
CNS_11643_1992_Plane_2_STR	ucnv2022.c	/^static const char CNS_11643_1992_Plane_2_STR[] = "\\x1B\\x24\\x2A\\x48";$/;"	v	file:
CNS_11643_1992_Plane_3_STR	ucnv2022.c	/^static const char CNS_11643_1992_Plane_3_STR[] = "\\x1B\\x24\\x2B\\x49";$/;"	v	file:
CNS_11643_1992_Plane_4_STR	ucnv2022.c	/^static const char CNS_11643_1992_Plane_4_STR[] = "\\x1B\\x24\\x2B\\x4A";$/;"	v	file:
CNS_11643_1992_Plane_5_STR	ucnv2022.c	/^static const char CNS_11643_1992_Plane_5_STR[] = "\\x1B\\x24\\x2B\\x4B";$/;"	v	file:
CNS_11643_1992_Plane_6_STR	ucnv2022.c	/^static const char CNS_11643_1992_Plane_6_STR[] = "\\x1B\\x24\\x2B\\x4C";$/;"	v	file:
CNS_11643_1992_Plane_7_STR	ucnv2022.c	/^static const char CNS_11643_1992_Plane_7_STR[] = "\\x1B\\x24\\x2B\\x4D";$/;"	v	file:
CNS_11643_2	ucnv2022.c	/^        CNS_11643_2,$/;"	e	enum:__anon65	file:
CNS_11643_3	ucnv2022.c	/^        CNS_11643_3,$/;"	e	enum:__anon65	file:
CNS_11643_4	ucnv2022.c	/^        CNS_11643_4,$/;"	e	enum:__anon65	file:
CNS_11643_5	ucnv2022.c	/^        CNS_11643_5,$/;"	e	enum:__anon65	file:
CNS_11643_6	ucnv2022.c	/^        CNS_11643_6,$/;"	e	enum:__anon65	file:
CNS_11643_7	ucnv2022.c	/^        CNS_11643_7$/;"	e	enum:__anon65	file:
COLON	uniset.cpp	34;"	d	file:
COLON	uniset_props.cpp	62;"	d	file:
COMBINE	ushape.c	60;"	d	file:
COMMA	ucnv_u7.c	833;"	d	file:
COMMON_DATA_NAME	ucmndata.h	32;"	d
COMPACT_TRIE_MAGIC_1	triedict.cpp	406;"	d	file:
COMPLEMENT	uniset.cpp	33;"	d	file:
COMPLEMENT	uniset_props.cpp	61;"	d	file:
COMP_1_LAST_TUPLE	normalizer2impl.h	/^        COMP_1_LAST_TUPLE=0x8000,$/;"	e	enum:Normalizer2Impl::__anon50
COMP_1_TRAIL_LIMIT	normalizer2impl.h	/^        COMP_1_TRAIL_LIMIT=0x3400,$/;"	e	enum:Normalizer2Impl::__anon50
COMP_1_TRAIL_MASK	normalizer2impl.h	/^        COMP_1_TRAIL_MASK=0x7ffe,$/;"	e	enum:Normalizer2Impl::__anon50
COMP_1_TRAIL_SHIFT	normalizer2impl.h	/^        COMP_1_TRAIL_SHIFT=9,  \/\/ 10-1 for the "triple" bit$/;"	e	enum:Normalizer2Impl::__anon50
COMP_1_TRIPLE	normalizer2impl.h	/^        COMP_1_TRIPLE=1,$/;"	e	enum:Normalizer2Impl::__anon50
COMP_2_TRAIL_MASK	normalizer2impl.h	/^        COMP_2_TRAIL_MASK=0xffc0$/;"	e	enum:Normalizer2Impl::__anon50
COMP_2_TRAIL_SHIFT	normalizer2impl.h	/^        COMP_2_TRAIL_SHIFT=6,$/;"	e	enum:Normalizer2Impl::__anon50
CONCAT_ESCAPE_MACRO	ucnvhz.c	38;"	d	file:
CONTAINED	unisetspan.h	/^        CONTAINED       = 2,$/;"	e	enum:UnicodeSetStringSpan::__anon19
CONTEXT_RTL	ubidiimp.h	112;"	d
CONVERSION_U_SUCCESS	ucnv_cnv.h	/^UBool CONVERSION_U_SUCCESS (UErrorCode err);$/;"	p	signature:(UErrorCode err)
CONVERTER_FILE_EXTENSION	ucnv_bld.h	237;"	d
CONVERT_HOURS_TO_SECONDS	putil.c	720;"	d	file:
COUNTRIES	uloc.c	/^static const char * const COUNTRIES[] = {$/;"	v	file:
COUNTRIES_3	uloc.c	/^static const char * const COUNTRIES_3[] = {$/;"	v	file:
CPPUTILS_H	cpputils.h	15;"	d
CR	ubidiimp.h	126;"	d
CR	ucnv2022.c	81;"	d	file:
CR	uprops.h	/^    CR      =0x000d,$/;"	e	enum:__anon90
CS	ubidiimp.h	/^    CS= U_COMMON_NUMBER_SEPARATOR,$/;"	e	enum:__anon82
CSHADDA	ushape.c	59;"	d	file:
CSM	ucnv2022.c	157;"	d	file:
CSTRING_H	cstring.h	26;"	d
CURRENT_ZONE_REGKEY	wintz.c	/^static const char CURRENT_ZONE_REGKEY[] = "SYSTEM\\\\CurrentControlSet\\\\Control\\\\TimeZoneInformation\\\\";$/;"	v	file:
CacheEntry	serv.cpp	/^    CacheEntry(const UnicodeString& _actualDescriptor, UObject* _service) $/;"	f	class:CacheEntry	access:public	signature:(const UnicodeString& _actualDescriptor, UObject* _service)
CacheEntry	serv.cpp	/^class CacheEntry : public UMemory {$/;"	c	file:	inherits:UMemory
CacheEntry::CacheEntry	serv.cpp	/^    CacheEntry(const UnicodeString& _actualDescriptor, UObject* _service) $/;"	f	class:CacheEntry	access:public	signature:(const UnicodeString& _actualDescriptor, UObject* _service)
CacheEntry::actualDescriptor	serv.cpp	/^    UnicodeString actualDescriptor;$/;"	m	class:CacheEntry	file:	access:public
CacheEntry::isShared	serv.cpp	/^    UBool isShared() const {$/;"	f	class:CacheEntry	access:public	signature:() const
CacheEntry::ref	serv.cpp	/^    CacheEntry* ref() {$/;"	f	class:CacheEntry	access:public	signature:()
CacheEntry::refcount	serv.cpp	/^    int32_t refcount;$/;"	m	class:CacheEntry	file:	access:private
CacheEntry::service	serv.cpp	/^    UObject* service;$/;"	m	class:CacheEntry	file:	access:public
CacheEntry::unref	serv.cpp	/^    CacheEntry* unref() {$/;"	f	class:CacheEntry	access:public	signature:()
CacheEntry::~CacheEntry	serv.cpp	/^    ~CacheEntry() {$/;"	f	class:CacheEntry	access:public	signature:()
Calendar	unicode/urename.h	1781;"	d
CalendarAstronomer	unicode/urename.h	1782;"	d
CalendarCache	unicode/urename.h	1783;"	d
CalendarData	unicode/urename.h	1784;"	d
CalendarService	unicode/urename.h	1785;"	d
CanonIterData	normalizer2impl.cpp	/^    CanonIterData(UErrorCode &errorCode);$/;"	p	struct:CanonIterData	file:	access:public	signature:(UErrorCode &errorCode)
CanonIterData	normalizer2impl.cpp	/^CanonIterData::CanonIterData(UErrorCode &errorCode) :$/;"	f	class:CanonIterData	signature:(UErrorCode &errorCode)
CanonIterData	normalizer2impl.cpp	/^struct CanonIterData : public UMemory {$/;"	s	file:	inherits:UMemory
CanonIterData	normalizer2impl.h	/^class CanonIterData;$/;"	x
CanonIterData	unicode/urename.h	1786;"	d
CanonIterData::CanonIterData	normalizer2impl.cpp	/^    CanonIterData(UErrorCode &errorCode);$/;"	p	struct:CanonIterData	file:	access:public	signature:(UErrorCode &errorCode)
CanonIterData::CanonIterData	normalizer2impl.cpp	/^CanonIterData::CanonIterData(UErrorCode &errorCode) :$/;"	f	class:CanonIterData	signature:(UErrorCode &errorCode)
CanonIterData::addToStartSet	normalizer2impl.cpp	/^    void addToStartSet(UChar32 origin, UChar32 decompLead, UErrorCode &errorCode);$/;"	p	struct:CanonIterData	file:	access:public	signature:(UChar32 origin, UChar32 decompLead, UErrorCode &errorCode)
CanonIterData::addToStartSet	normalizer2impl.cpp	/^void CanonIterData::addToStartSet(UChar32 origin, UChar32 decompLead, UErrorCode &errorCode) {$/;"	f	class:CanonIterData	signature:(UChar32 origin, UChar32 decompLead, UErrorCode &errorCode)
CanonIterData::canonStartSets	normalizer2impl.cpp	/^    UVector canonStartSets;  \/\/ contains UnicodeSet *$/;"	m	struct:CanonIterData	file:	access:public
CanonIterData::trie	normalizer2impl.cpp	/^    UTrie2 *trie;$/;"	m	struct:CanonIterData	file:	access:public
CanonIterData::~CanonIterData	normalizer2impl.cpp	/^    ~CanonIterData();$/;"	p	struct:CanonIterData	file:	access:public	signature:()
CanonIterData::~CanonIterData	normalizer2impl.cpp	/^CanonIterData::~CanonIterData() {$/;"	f	class:CanonIterData	signature:()
CanonIterDataSingleton	normalizer2impl.cpp	/^    CanonIterDataSingleton(SimpleSingleton &s, Normalizer2Impl &ni, UErrorCode &ec) :$/;"	f	class:CanonIterDataSingleton	access:public	signature:(SimpleSingleton &s, Normalizer2Impl &ni, UErrorCode &ec)
CanonIterDataSingleton	normalizer2impl.cpp	/^class CanonIterDataSingleton {$/;"	c	file:
CanonIterDataSingleton	unicode/urename.h	1787;"	d
CanonIterDataSingleton::CanonIterDataSingleton	normalizer2impl.cpp	/^    CanonIterDataSingleton(SimpleSingleton &s, Normalizer2Impl &ni, UErrorCode &ec) :$/;"	f	class:CanonIterDataSingleton	access:public	signature:(SimpleSingleton &s, Normalizer2Impl &ni, UErrorCode &ec)
CanonIterDataSingleton::createInstance	normalizer2impl.cpp	/^    static void *createInstance(const void *context, UErrorCode &errorCode);$/;"	p	class:CanonIterDataSingleton	file:	access:public	signature:(const void *context, UErrorCode &errorCode)
CanonIterDataSingleton::createInstance	normalizer2impl.cpp	/^void *CanonIterDataSingleton::createInstance(const void *context, UErrorCode &errorCode) {$/;"	f	class:CanonIterDataSingleton	signature:(const void *context, UErrorCode &errorCode)
CanonIterDataSingleton::errorCode	normalizer2impl.cpp	/^    UErrorCode &errorCode;$/;"	m	class:CanonIterDataSingleton	file:	access:private
CanonIterDataSingleton::getInstance	normalizer2impl.cpp	/^    CanonIterData *getInstance(UErrorCode &errorCode) {$/;"	f	class:CanonIterDataSingleton	access:public	signature:(UErrorCode &errorCode)
CanonIterDataSingleton::impl	normalizer2impl.cpp	/^    Normalizer2Impl &impl;$/;"	m	class:CanonIterDataSingleton	file:	access:private
CanonIterDataSingleton::newData	normalizer2impl.cpp	/^    CanonIterData *newData;$/;"	m	class:CanonIterDataSingleton	file:	access:private
CanonIterDataSingleton::rangeHandler	normalizer2impl.cpp	/^    UBool rangeHandler(UChar32 start, UChar32 end, uint32_t value) {$/;"	f	class:CanonIterDataSingleton	access:public	signature:(UChar32 start, UChar32 end, uint32_t value)
CanonIterDataSingleton::singleton	normalizer2impl.cpp	/^    SimpleSingleton &singleton;$/;"	m	class:CanonIterDataSingleton	file:	access:private
CanonMarkFilter	unicode/urename.h	1788;"	d
CanonShaping	unicode/urename.h	1789;"	d
CanonicalIterator	caniter.cpp	/^CanonicalIterator::CanonicalIterator(const UnicodeString &sourceStr, UErrorCode &status) :$/;"	f	class:CanonicalIterator	signature:(const UnicodeString &sourceStr, UErrorCode &status)
CanonicalIterator	unicode/caniter.h	/^    CanonicalIterator();$/;"	p	class:CanonicalIterator	access:private	signature:()
CanonicalIterator	unicode/caniter.h	/^    CanonicalIterator(const CanonicalIterator& other);$/;"	p	class:CanonicalIterator	access:private	signature:(const CanonicalIterator& other)
CanonicalIterator	unicode/caniter.h	/^    CanonicalIterator(const UnicodeString &source, UErrorCode &status);$/;"	p	class:CanonicalIterator	access:public	signature:(const UnicodeString &source, UErrorCode &status)
CanonicalIterator	unicode/caniter.h	/^class U_COMMON_API CanonicalIterator : public UObject {$/;"	c	inherits:UObject
CanonicalIterator	unicode/urename.h	1790;"	d
CanonicalIterator::CanonicalIterator	caniter.cpp	/^CanonicalIterator::CanonicalIterator(const UnicodeString &sourceStr, UErrorCode &status) :$/;"	f	class:CanonicalIterator	signature:(const UnicodeString &sourceStr, UErrorCode &status)
CanonicalIterator::CanonicalIterator	unicode/caniter.h	/^    CanonicalIterator();$/;"	p	class:CanonicalIterator	access:private	signature:()
CanonicalIterator::CanonicalIterator	unicode/caniter.h	/^    CanonicalIterator(const CanonicalIterator& other);$/;"	p	class:CanonicalIterator	access:private	signature:(const CanonicalIterator& other)
CanonicalIterator::CanonicalIterator	unicode/caniter.h	/^    CanonicalIterator(const UnicodeString &source, UErrorCode &status);$/;"	p	class:CanonicalIterator	access:public	signature:(const UnicodeString &source, UErrorCode &status)
CanonicalIterator::buffer	unicode/caniter.h	/^    UnicodeString buffer;$/;"	m	class:CanonicalIterator	access:private
CanonicalIterator::cleanPieces	caniter.cpp	/^void CanonicalIterator::cleanPieces() {$/;"	f	class:CanonicalIterator	signature:()
CanonicalIterator::cleanPieces	unicode/caniter.h	/^    void cleanPieces();$/;"	p	class:CanonicalIterator	access:private	signature:()
CanonicalIterator::current	unicode/caniter.h	/^    int32_t *current;$/;"	m	class:CanonicalIterator	access:private
CanonicalIterator::current_length	unicode/caniter.h	/^    int32_t current_length;$/;"	m	class:CanonicalIterator	access:private
CanonicalIterator::done	unicode/caniter.h	/^    UBool done;$/;"	m	class:CanonicalIterator	access:private
CanonicalIterator::extract	caniter.cpp	/^Hashtable *CanonicalIterator::extract(Hashtable *fillinResult, UChar32 comp, const UChar *segment, int32_t segLen, int32_t segmentPos, UErrorCode &status) {$/;"	f	class:CanonicalIterator	signature:(Hashtable *fillinResult, UChar32 comp, const UChar *segment, int32_t segLen, int32_t segmentPos, UErrorCode &status)
CanonicalIterator::extract	unicode/caniter.h	/^    Hashtable *extract(Hashtable *fillinResult, UChar32 comp, const UChar *segment, int32_t segLen, int32_t segmentPos, UErrorCode &status);$/;"	p	class:CanonicalIterator	access:private	signature:(Hashtable *fillinResult, UChar32 comp, const UChar *segment, int32_t segLen, int32_t segmentPos, UErrorCode &status)
CanonicalIterator::getDynamicClassID	unicode/caniter.h	/^    virtual UClassID getDynamicClassID() const;$/;"	p	class:CanonicalIterator	access:public	signature:() const
CanonicalIterator::getEquivalents	caniter.cpp	/^UnicodeString* CanonicalIterator::getEquivalents(const UnicodeString &segment, int32_t &result_len, UErrorCode &status) {$/;"	f	class:CanonicalIterator	signature:(const UnicodeString &segment, int32_t &result_len, UErrorCode &status)
CanonicalIterator::getEquivalents	unicode/caniter.h	/^    UnicodeString *getEquivalents(const UnicodeString &segment, int32_t &result_len, UErrorCode &status); \/\/private String[] getEquivalents(String segment)$/;"	p	class:CanonicalIterator	access:private	signature:(const UnicodeString &segment, int32_t &result_len, UErrorCode &status)
CanonicalIterator::getEquivalents2	caniter.cpp	/^Hashtable *CanonicalIterator::getEquivalents2(Hashtable *fillinResult, const UChar *segment, int32_t segLen, UErrorCode &status) {$/;"	f	class:CanonicalIterator	signature:(Hashtable *fillinResult, const UChar *segment, int32_t segLen, UErrorCode &status)
CanonicalIterator::getEquivalents2	unicode/caniter.h	/^    Hashtable *getEquivalents2(Hashtable *fillinResult, const UChar *segment, int32_t segLen, UErrorCode &status);$/;"	p	class:CanonicalIterator	access:private	signature:(Hashtable *fillinResult, const UChar *segment, int32_t segLen, UErrorCode &status)
CanonicalIterator::getSource	caniter.cpp	/^UnicodeString CanonicalIterator::getSource() {$/;"	f	class:CanonicalIterator	signature:()
CanonicalIterator::getSource	unicode/caniter.h	/^    UnicodeString getSource();$/;"	p	class:CanonicalIterator	access:public	signature:()
CanonicalIterator::getStaticClassID	unicode/caniter.h	/^    static UClassID U_EXPORT2 getStaticClassID();$/;"	p	class:CanonicalIterator	access:public	signature:()
CanonicalIterator::next	caniter.cpp	/^UnicodeString CanonicalIterator::next() {$/;"	f	class:CanonicalIterator	signature:()
CanonicalIterator::next	unicode/caniter.h	/^    UnicodeString next();$/;"	p	class:CanonicalIterator	access:public	signature:()
CanonicalIterator::nfcImpl	unicode/caniter.h	/^    const Normalizer2Impl &nfcImpl;$/;"	m	class:CanonicalIterator	access:private
CanonicalIterator::nfd	unicode/caniter.h	/^    const Normalizer2 &nfd;$/;"	m	class:CanonicalIterator	access:private
CanonicalIterator::operator =	unicode/caniter.h	/^    CanonicalIterator& operator=(const CanonicalIterator& other);$/;"	p	class:CanonicalIterator	access:private	signature:(const CanonicalIterator& other)
CanonicalIterator::permute	caniter.cpp	/^void U_EXPORT2 CanonicalIterator::permute(UnicodeString &source, UBool skipZeros, Hashtable *result, UErrorCode &status) {$/;"	f	class:CanonicalIterator	signature:(UnicodeString &source, UBool skipZeros, Hashtable *result, UErrorCode &status)
CanonicalIterator::permute	unicode/caniter.h	/^    static void U_EXPORT2 permute(UnicodeString &source, UBool skipZeros, Hashtable *result, UErrorCode &status);$/;"	p	class:CanonicalIterator	access:public	signature:(UnicodeString &source, UBool skipZeros, Hashtable *result, UErrorCode &status)
CanonicalIterator::pieces	unicode/caniter.h	/^    UnicodeString **pieces;$/;"	m	class:CanonicalIterator	access:private
CanonicalIterator::pieces_length	unicode/caniter.h	/^    int32_t pieces_length;$/;"	m	class:CanonicalIterator	access:private
CanonicalIterator::pieces_lengths	unicode/caniter.h	/^    int32_t *pieces_lengths;$/;"	m	class:CanonicalIterator	access:private
CanonicalIterator::reset	caniter.cpp	/^void CanonicalIterator::reset() {$/;"	f	class:CanonicalIterator	signature:()
CanonicalIterator::reset	unicode/caniter.h	/^    void reset();$/;"	p	class:CanonicalIterator	access:public	signature:()
CanonicalIterator::setSource	caniter.cpp	/^void CanonicalIterator::setSource(const UnicodeString &newSource, UErrorCode &status) {$/;"	f	class:CanonicalIterator	signature:(const UnicodeString &newSource, UErrorCode &status)
CanonicalIterator::setSource	unicode/caniter.h	/^    void setSource(const UnicodeString &newSource, UErrorCode &status);$/;"	p	class:CanonicalIterator	access:public	signature:(const UnicodeString &newSource, UErrorCode &status)
CanonicalIterator::source	unicode/caniter.h	/^    UnicodeString source;$/;"	m	class:CanonicalIterator	access:private
CanonicalIterator::~CanonicalIterator	caniter.cpp	/^CanonicalIterator::~CanonicalIterator() {$/;"	f	class:CanonicalIterator	signature:()
CanonicalIterator::~CanonicalIterator	unicode/caniter.h	/^    virtual ~CanonicalIterator();$/;"	p	class:CanonicalIterator	access:public	signature:()
CanonicalizationMap	uloc.c	/^typedef struct CanonicalizationMap {$/;"	s	file:
CanonicalizationMap	uloc.c	/^} CanonicalizationMap;$/;"	t	typeref:struct:CanonicalizationMap	file:
CanonicalizationMap::canonicalID	uloc.c	/^    const char *canonicalID; \/* canonicalized output ID *\/$/;"	m	struct:CanonicalizationMap	file:	access:public
CanonicalizationMap::id	uloc.c	/^    const char *id;          \/* input ID *\/$/;"	m	struct:CanonicalizationMap	file:	access:public
CanonicalizationMap::keyword	uloc.c	/^    const char *keyword;     \/* keyword, or NULL if none *\/$/;"	m	struct:CanonicalizationMap	file:	access:public
CanonicalizationMap::value	uloc.c	/^    const char *value;       \/* keyword value, or NULL if kw==NULL *\/$/;"	m	struct:CanonicalizationMap	file:	access:public
CaseMapTransliterator	unicode/urename.h	1791;"	d
ChainingContextualSubstitutionFormat1Subtable	unicode/urename.h	1792;"	d
ChainingContextualSubstitutionFormat2Subtable	unicode/urename.h	1793;"	d
ChainingContextualSubstitutionFormat3Subtable	unicode/urename.h	1794;"	d
ChainingContextualSubstitutionSubtable	unicode/urename.h	1795;"	d
CharString	charstr.h	/^    CharString() : len(0) { buffer[0]=0; }$/;"	f	class:CharString	access:public	signature:()
CharString	charstr.h	/^    CharString(const CharString &other); \/\/ forbid copying of this class$/;"	p	class:CharString	access:private	signature:(const CharString &other)
CharString	charstr.h	/^    CharString(const CharString &s, UErrorCode &errorCode) : len(0) {$/;"	f	class:CharString	access:public	signature:(const CharString &s, UErrorCode &errorCode)
CharString	charstr.h	/^    CharString(const StringPiece &s, UErrorCode &errorCode) : len(0) {$/;"	f	class:CharString	access:public	signature:(const StringPiece &s, UErrorCode &errorCode)
CharString	charstr.h	/^    CharString(const char *s, int32_t sLength, UErrorCode &errorCode) : len(0) {$/;"	f	class:CharString	access:public	signature:(const char *s, int32_t sLength, UErrorCode &errorCode)
CharString	charstr.h	/^class U_COMMON_API CharString : public UMemory {$/;"	c	inherits:UMemory
CharString	unicode/urename.h	1796;"	d
CharString::CharString	charstr.h	/^    CharString() : len(0) { buffer[0]=0; }$/;"	f	class:CharString	access:public	signature:()
CharString::CharString	charstr.h	/^    CharString(const CharString &other); \/\/ forbid copying of this class$/;"	p	class:CharString	access:private	signature:(const CharString &other)
CharString::CharString	charstr.h	/^    CharString(const CharString &s, UErrorCode &errorCode) : len(0) {$/;"	f	class:CharString	access:public	signature:(const CharString &s, UErrorCode &errorCode)
CharString::CharString	charstr.h	/^    CharString(const StringPiece &s, UErrorCode &errorCode) : len(0) {$/;"	f	class:CharString	access:public	signature:(const StringPiece &s, UErrorCode &errorCode)
CharString::CharString	charstr.h	/^    CharString(const char *s, int32_t sLength, UErrorCode &errorCode) : len(0) {$/;"	f	class:CharString	access:public	signature:(const char *s, int32_t sLength, UErrorCode &errorCode)
CharString::append	charstr.cpp	/^CharString &CharString::append(char c, UErrorCode &errorCode) {$/;"	f	class:CharString	signature:(char c, UErrorCode &errorCode)
CharString::append	charstr.cpp	/^CharString &CharString::append(const char *s, int32_t sLength, UErrorCode &errorCode) {$/;"	f	class:CharString	signature:(const char *s, int32_t sLength, UErrorCode &errorCode)
CharString::append	charstr.h	/^    CharString &append(char c, UErrorCode &errorCode);$/;"	p	class:CharString	access:public	signature:(char c, UErrorCode &errorCode)
CharString::append	charstr.h	/^    CharString &append(const CharString &s, UErrorCode &errorCode) {$/;"	f	class:CharString	access:public	signature:(const CharString &s, UErrorCode &errorCode)
CharString::append	charstr.h	/^    CharString &append(const StringPiece &s, UErrorCode &errorCode) {$/;"	f	class:CharString	access:public	signature:(const StringPiece &s, UErrorCode &errorCode)
CharString::append	charstr.h	/^    CharString &append(const char *s, int32_t sLength, UErrorCode &status);$/;"	p	class:CharString	access:public	signature:(const char *s, int32_t sLength, UErrorCode &status)
CharString::appendInvariantChars	charstr.cpp	/^CharString &CharString::appendInvariantChars(const UnicodeString &s, UErrorCode &errorCode) {$/;"	f	class:CharString	signature:(const UnicodeString &s, UErrorCode &errorCode)
CharString::appendInvariantChars	charstr.h	/^    CharString &appendInvariantChars(const UnicodeString &s, UErrorCode &errorCode);$/;"	p	class:CharString	access:public	signature:(const UnicodeString &s, UErrorCode &errorCode)
CharString::buffer	charstr.h	/^    MaybeStackArray<char, 40> buffer;$/;"	m	class:CharString	access:private
CharString::clear	charstr.h	/^    CharString &clear() { len=0; buffer[0]=0; return *this; }$/;"	f	class:CharString	access:public	signature:()
CharString::copyFrom	charstr.cpp	/^CharString &CharString::copyFrom(const CharString &s, UErrorCode &errorCode) {$/;"	f	class:CharString	signature:(const CharString &s, UErrorCode &errorCode)
CharString::copyFrom	charstr.h	/^    CharString &copyFrom(const CharString &other, UErrorCode &errorCode);$/;"	p	class:CharString	access:public	signature:(const CharString &other, UErrorCode &errorCode)
CharString::data	charstr.h	/^    char *data() { return buffer.getAlias(); }$/;"	f	class:CharString	access:public	signature:()
CharString::data	charstr.h	/^    const char *data() const { return buffer.getAlias(); }$/;"	f	class:CharString	access:public	signature:() const
CharString::ensureCapacity	charstr.cpp	/^UBool CharString::ensureCapacity(int32_t capacity,$/;"	f	class:CharString	signature:(int32_t capacity, int32_t desiredCapacityHint, UErrorCode &errorCode)
CharString::ensureCapacity	charstr.h	/^    UBool ensureCapacity(int32_t capacity, int32_t desiredCapacityHint, UErrorCode &errorCode);$/;"	p	class:CharString	access:private	signature:(int32_t capacity, int32_t desiredCapacityHint, UErrorCode &errorCode)
CharString::getAppendBuffer	charstr.cpp	/^char *CharString::getAppendBuffer(int32_t minCapacity,$/;"	f	class:CharString	signature:(int32_t minCapacity, int32_t desiredCapacityHint, int32_t &resultCapacity, UErrorCode &errorCode)
CharString::getAppendBuffer	charstr.h	/^    char *getAppendBuffer(int32_t minCapacity,$/;"	p	class:CharString	access:public	signature:(int32_t minCapacity, int32_t desiredCapacityHint, int32_t &resultCapacity, UErrorCode &errorCode)
CharString::isEmpty	charstr.h	/^    UBool isEmpty() { return len==0; }$/;"	f	class:CharString	access:public	signature:()
CharString::len	charstr.h	/^    int32_t len;$/;"	m	class:CharString	access:private
CharString::length	charstr.h	/^    int32_t length() const { return len; }$/;"	f	class:CharString	access:public	signature:() const
CharString::operator =	charstr.h	/^    CharString &operator=(const CharString &other); \/\/ forbid copying of this class$/;"	p	class:CharString	access:private	signature:(const CharString &other)
CharString::operator []	charstr.h	/^    char operator[] (int32_t index) const { return buffer[index]; }$/;"	f	class:CharString	access:public	signature:(int32_t index) const
CharString::toStringPiece	charstr.h	/^    StringPiece toStringPiece() const { return StringPiece(buffer.getAlias(), len); }$/;"	f	class:CharString	access:public	signature:() const
CharString::truncate	charstr.cpp	/^CharString &CharString::truncate(int32_t newLength) {$/;"	f	class:CharString	signature:(int32_t newLength)
CharString::truncate	charstr.h	/^    CharString &truncate(int32_t newLength);$/;"	p	class:CharString	access:public	signature:(int32_t newLength)
CharString::~CharString	charstr.h	/^    ~CharString() {}$/;"	f	class:CharString	access:public	signature:()
CharSubstitutionFilter	unicode/urename.h	1797;"	d
CharacterIterator	chariter.cpp	/^CharacterIterator::CharacterIterator()$/;"	f	class:CharacterIterator	signature:()
CharacterIterator	chariter.cpp	/^CharacterIterator::CharacterIterator(const CharacterIterator &that) :$/;"	f	class:CharacterIterator	signature:(const CharacterIterator &that)
CharacterIterator	chariter.cpp	/^CharacterIterator::CharacterIterator(int32_t length)$/;"	f	class:CharacterIterator	signature:(int32_t length)
CharacterIterator	chariter.cpp	/^CharacterIterator::CharacterIterator(int32_t length, int32_t position)$/;"	f	class:CharacterIterator	signature:(int32_t length, int32_t position)
CharacterIterator	chariter.cpp	/^CharacterIterator::CharacterIterator(int32_t length, int32_t textBegin, int32_t textEnd, int32_t position)$/;"	f	class:CharacterIterator	signature:(int32_t length, int32_t textBegin, int32_t textEnd, int32_t position)
CharacterIterator	unicode/chariter.h	/^    CharacterIterator();$/;"	p	class:CharacterIterator	access:protected	signature:()
CharacterIterator	unicode/chariter.h	/^    CharacterIterator(const CharacterIterator &that);$/;"	p	class:CharacterIterator	access:protected	signature:(const CharacterIterator &that)
CharacterIterator	unicode/chariter.h	/^    CharacterIterator(int32_t length);$/;"	p	class:CharacterIterator	access:protected	signature:(int32_t length)
CharacterIterator	unicode/chariter.h	/^    CharacterIterator(int32_t length, int32_t position);$/;"	p	class:CharacterIterator	access:protected	signature:(int32_t length, int32_t position)
CharacterIterator	unicode/chariter.h	/^    CharacterIterator(int32_t length, int32_t textBegin, int32_t textEnd, int32_t position);$/;"	p	class:CharacterIterator	access:protected	signature:(int32_t length, int32_t textBegin, int32_t textEnd, int32_t position)
CharacterIterator	unicode/chariter.h	/^class U_COMMON_API CharacterIterator : public ForwardCharacterIterator {$/;"	c	inherits:ForwardCharacterIterator
CharacterIterator	unicode/uiter.h	/^    class CharacterIterator;$/;"	x
CharacterIterator	unicode/urename.h	1798;"	d
CharacterIterator::CharacterIterator	chariter.cpp	/^CharacterIterator::CharacterIterator()$/;"	f	class:CharacterIterator	signature:()
CharacterIterator::CharacterIterator	chariter.cpp	/^CharacterIterator::CharacterIterator(const CharacterIterator &that) :$/;"	f	class:CharacterIterator	signature:(const CharacterIterator &that)
CharacterIterator::CharacterIterator	chariter.cpp	/^CharacterIterator::CharacterIterator(int32_t length)$/;"	f	class:CharacterIterator	signature:(int32_t length)
CharacterIterator::CharacterIterator	chariter.cpp	/^CharacterIterator::CharacterIterator(int32_t length, int32_t position)$/;"	f	class:CharacterIterator	signature:(int32_t length, int32_t position)
CharacterIterator::CharacterIterator	chariter.cpp	/^CharacterIterator::CharacterIterator(int32_t length, int32_t textBegin, int32_t textEnd, int32_t position)$/;"	f	class:CharacterIterator	signature:(int32_t length, int32_t textBegin, int32_t textEnd, int32_t position)
CharacterIterator::CharacterIterator	unicode/chariter.h	/^    CharacterIterator();$/;"	p	class:CharacterIterator	access:protected	signature:()
CharacterIterator::CharacterIterator	unicode/chariter.h	/^    CharacterIterator(const CharacterIterator &that);$/;"	p	class:CharacterIterator	access:protected	signature:(const CharacterIterator &that)
CharacterIterator::CharacterIterator	unicode/chariter.h	/^    CharacterIterator(int32_t length);$/;"	p	class:CharacterIterator	access:protected	signature:(int32_t length)
CharacterIterator::CharacterIterator	unicode/chariter.h	/^    CharacterIterator(int32_t length, int32_t position);$/;"	p	class:CharacterIterator	access:protected	signature:(int32_t length, int32_t position)
CharacterIterator::CharacterIterator	unicode/chariter.h	/^    CharacterIterator(int32_t length, int32_t textBegin, int32_t textEnd, int32_t position);$/;"	p	class:CharacterIterator	access:protected	signature:(int32_t length, int32_t textBegin, int32_t textEnd, int32_t position)
CharacterIterator::EOrigin	unicode/chariter.h	/^    enum EOrigin { kStart, kCurrent, kEnd };$/;"	g	class:CharacterIterator	access:public
CharacterIterator::begin	unicode/chariter.h	/^    int32_t  begin;$/;"	m	class:CharacterIterator	access:protected
CharacterIterator::clone	unicode/chariter.h	/^    virtual CharacterIterator* clone(void) const = 0;$/;"	p	class:CharacterIterator	access:public	signature:(void) const
CharacterIterator::current	unicode/chariter.h	/^    virtual UChar         current(void) const = 0;$/;"	p	class:CharacterIterator	access:public	signature:(void) const
CharacterIterator::current32	unicode/chariter.h	/^    virtual UChar32       current32(void) const = 0;$/;"	p	class:CharacterIterator	access:public	signature:(void) const
CharacterIterator::end	unicode/chariter.h	/^    int32_t  end;$/;"	m	class:CharacterIterator	access:protected
CharacterIterator::endIndex	unicode/chariter.h	/^    inline int32_t       endIndex(void) const;$/;"	p	class:CharacterIterator	access:public	signature:(void) const
CharacterIterator::endIndex	unicode/chariter.h	/^CharacterIterator::endIndex(void) const {$/;"	f	class:CharacterIterator	signature:(void) const
CharacterIterator::first	unicode/chariter.h	/^    virtual UChar         first(void) = 0;$/;"	p	class:CharacterIterator	access:public	signature:(void)
CharacterIterator::first32	unicode/chariter.h	/^    virtual UChar32       first32(void) = 0;$/;"	p	class:CharacterIterator	access:public	signature:(void)
CharacterIterator::first32PostInc	chariter.cpp	/^CharacterIterator::first32PostInc(void) {$/;"	f	class:CharacterIterator	signature:(void)
CharacterIterator::first32PostInc	unicode/chariter.h	/^    virtual UChar32       first32PostInc(void);$/;"	p	class:CharacterIterator	access:public	signature:(void)
CharacterIterator::firstPostInc	chariter.cpp	/^CharacterIterator::firstPostInc(void) {$/;"	f	class:CharacterIterator	signature:(void)
CharacterIterator::firstPostInc	unicode/chariter.h	/^    virtual UChar         firstPostInc(void);$/;"	p	class:CharacterIterator	access:public	signature:(void)
CharacterIterator::getIndex	unicode/chariter.h	/^    inline int32_t       getIndex(void) const;$/;"	p	class:CharacterIterator	access:public	signature:(void) const
CharacterIterator::getIndex	unicode/chariter.h	/^CharacterIterator::getIndex(void) const {$/;"	f	class:CharacterIterator	signature:(void) const
CharacterIterator::getLength	unicode/chariter.h	/^    inline int32_t           getLength() const;$/;"	p	class:CharacterIterator	access:public	signature:() const
CharacterIterator::getLength	unicode/chariter.h	/^CharacterIterator::getLength(void) const {$/;"	f	class:CharacterIterator	signature:(void) const
CharacterIterator::getText	unicode/chariter.h	/^    virtual void            getText(UnicodeString&  result) = 0;$/;"	p	class:CharacterIterator	access:public	signature:(UnicodeString& result)
CharacterIterator::hasPrevious	unicode/chariter.h	/^    virtual UBool        hasPrevious() = 0;$/;"	p	class:CharacterIterator	access:public	signature:()
CharacterIterator::kCurrent	unicode/chariter.h	/^    enum EOrigin { kStart, kCurrent, kEnd };$/;"	e	enum:CharacterIterator::EOrigin
CharacterIterator::kEnd	unicode/chariter.h	/^    enum EOrigin { kStart, kCurrent, kEnd };$/;"	e	enum:CharacterIterator::EOrigin
CharacterIterator::kStart	unicode/chariter.h	/^    enum EOrigin { kStart, kCurrent, kEnd };$/;"	e	enum:CharacterIterator::EOrigin
CharacterIterator::last	unicode/chariter.h	/^    virtual UChar         last(void) = 0;$/;"	p	class:CharacterIterator	access:public	signature:(void)
CharacterIterator::last32	unicode/chariter.h	/^    virtual UChar32       last32(void) = 0;$/;"	p	class:CharacterIterator	access:public	signature:(void)
CharacterIterator::move	unicode/chariter.h	/^    virtual int32_t      move(int32_t delta, EOrigin origin) = 0;$/;"	p	class:CharacterIterator	access:public	signature:(int32_t delta, EOrigin origin)
CharacterIterator::move32	unicode/chariter.h	/^    virtual int32_t      move32(int32_t delta, EOrigin origin) = 0;$/;"	p	class:CharacterIterator	access:public	signature:(int32_t delta, EOrigin origin)
CharacterIterator::next	unicode/chariter.h	/^    virtual UChar         next(void) = 0;$/;"	p	class:CharacterIterator	access:public	signature:(void)
CharacterIterator::next32	unicode/chariter.h	/^    virtual UChar32       next32(void) = 0;$/;"	p	class:CharacterIterator	access:public	signature:(void)
CharacterIterator::operator =	chariter.cpp	/^CharacterIterator::operator=(const CharacterIterator &that) {$/;"	f	class:CharacterIterator	signature:(const CharacterIterator &that)
CharacterIterator::operator =	unicode/chariter.h	/^    CharacterIterator &operator=(const CharacterIterator &that);$/;"	p	class:CharacterIterator	access:protected	signature:(const CharacterIterator &that)
CharacterIterator::pos	unicode/chariter.h	/^    int32_t  pos;$/;"	m	class:CharacterIterator	access:protected
CharacterIterator::previous	unicode/chariter.h	/^    virtual UChar         previous(void) = 0;$/;"	p	class:CharacterIterator	access:public	signature:(void)
CharacterIterator::previous32	unicode/chariter.h	/^    virtual UChar32       previous32(void) = 0;$/;"	p	class:CharacterIterator	access:public	signature:(void)
CharacterIterator::setIndex	unicode/chariter.h	/^    virtual UChar         setIndex(int32_t position) = 0;$/;"	p	class:CharacterIterator	access:public	signature:(int32_t position)
CharacterIterator::setIndex32	unicode/chariter.h	/^    virtual UChar32       setIndex32(int32_t position) = 0;$/;"	p	class:CharacterIterator	access:public	signature:(int32_t position)
CharacterIterator::setToEnd	unicode/chariter.h	/^    inline int32_t    setToEnd();$/;"	p	class:CharacterIterator	access:public	signature:()
CharacterIterator::setToEnd	unicode/chariter.h	/^CharacterIterator::setToEnd() {$/;"	f	class:CharacterIterator	signature:()
CharacterIterator::setToStart	unicode/chariter.h	/^    inline int32_t    setToStart();$/;"	p	class:CharacterIterator	access:public	signature:()
CharacterIterator::setToStart	unicode/chariter.h	/^CharacterIterator::setToStart() {$/;"	f	class:CharacterIterator	signature:()
CharacterIterator::startIndex	unicode/chariter.h	/^    inline int32_t       startIndex(void) const;$/;"	p	class:CharacterIterator	access:public	signature:(void) const
CharacterIterator::startIndex	unicode/chariter.h	/^CharacterIterator::startIndex(void) const {$/;"	f	class:CharacterIterator	signature:(void) const
CharacterIterator::textLength	unicode/chariter.h	/^    int32_t textLength;$/;"	m	class:CharacterIterator	access:protected
CharacterNode	unicode/urename.h	1799;"	d
CharsetDetector	unicode/urename.h	1800;"	d
CharsetMatch	unicode/urename.h	1801;"	d
CharsetRecog_2022	unicode/urename.h	1802;"	d
CharsetRecog_2022CN	unicode/urename.h	1803;"	d
CharsetRecog_2022JP	unicode/urename.h	1804;"	d
CharsetRecog_2022KR	unicode/urename.h	1805;"	d
CharsetRecog_8859_1	unicode/urename.h	1806;"	d
CharsetRecog_8859_1_da	unicode/urename.h	1807;"	d
CharsetRecog_8859_1_de	unicode/urename.h	1808;"	d
CharsetRecog_8859_1_en	unicode/urename.h	1809;"	d
CharsetRecog_8859_1_es	unicode/urename.h	1810;"	d
CharsetRecog_8859_1_fr	unicode/urename.h	1811;"	d
CharsetRecog_8859_1_it	unicode/urename.h	1812;"	d
CharsetRecog_8859_1_nl	unicode/urename.h	1813;"	d
CharsetRecog_8859_1_no	unicode/urename.h	1814;"	d
CharsetRecog_8859_1_pt	unicode/urename.h	1815;"	d
CharsetRecog_8859_1_sv	unicode/urename.h	1816;"	d
CharsetRecog_8859_2	unicode/urename.h	1817;"	d
CharsetRecog_8859_2_cs	unicode/urename.h	1818;"	d
CharsetRecog_8859_2_hu	unicode/urename.h	1819;"	d
CharsetRecog_8859_2_pl	unicode/urename.h	1820;"	d
CharsetRecog_8859_2_ro	unicode/urename.h	1821;"	d
CharsetRecog_8859_5	unicode/urename.h	1822;"	d
CharsetRecog_8859_5_ru	unicode/urename.h	1823;"	d
CharsetRecog_8859_6	unicode/urename.h	1824;"	d
CharsetRecog_8859_6_ar	unicode/urename.h	1825;"	d
CharsetRecog_8859_7	unicode/urename.h	1826;"	d
CharsetRecog_8859_7_el	unicode/urename.h	1827;"	d
CharsetRecog_8859_8	unicode/urename.h	1828;"	d
CharsetRecog_8859_8_I_he	unicode/urename.h	1829;"	d
CharsetRecog_8859_8_he	unicode/urename.h	1830;"	d
CharsetRecog_8859_9	unicode/urename.h	1831;"	d
CharsetRecog_8859_9_tr	unicode/urename.h	1832;"	d
CharsetRecog_IBM420_ar	unicode/urename.h	1833;"	d
CharsetRecog_IBM420_ar_ltr	unicode/urename.h	1834;"	d
CharsetRecog_IBM420_ar_rtl	unicode/urename.h	1835;"	d
CharsetRecog_IBM424_he	unicode/urename.h	1836;"	d
CharsetRecog_IBM424_he_ltr	unicode/urename.h	1837;"	d
CharsetRecog_IBM424_he_rtl	unicode/urename.h	1838;"	d
CharsetRecog_KOI8_R	unicode/urename.h	1839;"	d
CharsetRecog_UTF8	unicode/urename.h	1840;"	d
CharsetRecog_UTF_16_BE	unicode/urename.h	1841;"	d
CharsetRecog_UTF_16_LE	unicode/urename.h	1842;"	d
CharsetRecog_UTF_32	unicode/urename.h	1843;"	d
CharsetRecog_UTF_32_BE	unicode/urename.h	1844;"	d
CharsetRecog_UTF_32_LE	unicode/urename.h	1845;"	d
CharsetRecog_Unicode	unicode/urename.h	1846;"	d
CharsetRecog_big5	unicode/urename.h	1847;"	d
CharsetRecog_euc	unicode/urename.h	1848;"	d
CharsetRecog_euc_jp	unicode/urename.h	1849;"	d
CharsetRecog_euc_kr	unicode/urename.h	1850;"	d
CharsetRecog_gb_18030	unicode/urename.h	1851;"	d
CharsetRecog_mbcs	unicode/urename.h	1852;"	d
CharsetRecog_sbcs	unicode/urename.h	1853;"	d
CharsetRecog_sjis	unicode/urename.h	1854;"	d
CharsetRecog_windows_1251	unicode/urename.h	1855;"	d
CharsetRecog_windows_1256	unicode/urename.h	1856;"	d
CharsetRecognizer	unicode/urename.h	1857;"	d
CheckedArrayByteSink	bytestream.cpp	/^CheckedArrayByteSink::CheckedArrayByteSink(char* outbuf, int32_t capacity)$/;"	f	class:CheckedArrayByteSink	signature:(char* outbuf, int32_t capacity)
CheckedArrayByteSink	unicode/bytestream.h	/^  CheckedArrayByteSink(); \/\/\/< default constructor not implemented $/;"	p	class:CheckedArrayByteSink	access:private	signature:()
CheckedArrayByteSink	unicode/bytestream.h	/^  CheckedArrayByteSink(char* outbuf, int32_t capacity);$/;"	p	class:CheckedArrayByteSink	access:public	signature:(char* outbuf, int32_t capacity)
CheckedArrayByteSink	unicode/bytestream.h	/^  CheckedArrayByteSink(const CheckedArrayByteSink &); \/\/\/< copy constructor not implemented$/;"	p	class:CheckedArrayByteSink	access:private	signature:(const CheckedArrayByteSink &)
CheckedArrayByteSink	unicode/bytestream.h	/^class U_COMMON_API CheckedArrayByteSink : public ByteSink {$/;"	c	inherits:ByteSink
CheckedArrayByteSink	unicode/urename.h	1858;"	d
CheckedArrayByteSink::Append	bytestream.cpp	/^void CheckedArrayByteSink::Append(const char* bytes, int32_t n) {$/;"	f	class:CheckedArrayByteSink	signature:(const char* bytes, int32_t n)
CheckedArrayByteSink::Append	unicode/bytestream.h	/^  virtual void Append(const char* bytes, int32_t n);$/;"	p	class:CheckedArrayByteSink	access:public	signature:(const char* bytes, int32_t n)
CheckedArrayByteSink::CheckedArrayByteSink	bytestream.cpp	/^CheckedArrayByteSink::CheckedArrayByteSink(char* outbuf, int32_t capacity)$/;"	f	class:CheckedArrayByteSink	signature:(char* outbuf, int32_t capacity)
CheckedArrayByteSink::CheckedArrayByteSink	unicode/bytestream.h	/^  CheckedArrayByteSink(); \/\/\/< default constructor not implemented $/;"	p	class:CheckedArrayByteSink	access:private	signature:()
CheckedArrayByteSink::CheckedArrayByteSink	unicode/bytestream.h	/^  CheckedArrayByteSink(char* outbuf, int32_t capacity);$/;"	p	class:CheckedArrayByteSink	access:public	signature:(char* outbuf, int32_t capacity)
CheckedArrayByteSink::CheckedArrayByteSink	unicode/bytestream.h	/^  CheckedArrayByteSink(const CheckedArrayByteSink &); \/\/\/< copy constructor not implemented$/;"	p	class:CheckedArrayByteSink	access:private	signature:(const CheckedArrayByteSink &)
CheckedArrayByteSink::GetAppendBuffer	bytestream.cpp	/^char* CheckedArrayByteSink::GetAppendBuffer(int32_t min_capacity,$/;"	f	class:CheckedArrayByteSink	signature:(int32_t min_capacity, int32_t , char* scratch, int32_t scratch_capacity, int32_t* result_capacity)
CheckedArrayByteSink::GetAppendBuffer	unicode/bytestream.h	/^  virtual char* GetAppendBuffer(int32_t min_capacity,$/;"	p	class:CheckedArrayByteSink	access:public	signature:(int32_t min_capacity, int32_t desired_capacity_hint, char* scratch, int32_t scratch_capacity, int32_t* result_capacity)
CheckedArrayByteSink::NumberOfBytesAppended	unicode/bytestream.h	/^  int32_t NumberOfBytesAppended() const { return appended_; }$/;"	f	class:CheckedArrayByteSink	access:public	signature:() const
CheckedArrayByteSink::NumberOfBytesWritten	unicode/bytestream.h	/^  int32_t NumberOfBytesWritten() const { return size_; }$/;"	f	class:CheckedArrayByteSink	access:public	signature:() const
CheckedArrayByteSink::Overflowed	unicode/bytestream.h	/^  UBool Overflowed() const { return overflowed_; }$/;"	f	class:CheckedArrayByteSink	access:public	signature:() const
CheckedArrayByteSink::Reset	bytestream.cpp	/^CheckedArrayByteSink& CheckedArrayByteSink::Reset() {$/;"	f	class:CheckedArrayByteSink	signature:()
CheckedArrayByteSink::Reset	unicode/bytestream.h	/^  virtual CheckedArrayByteSink& Reset();$/;"	p	class:CheckedArrayByteSink	access:public	signature:()
CheckedArrayByteSink::appended_	unicode/bytestream.h	/^  int32_t appended_;$/;"	m	class:CheckedArrayByteSink	access:private
CheckedArrayByteSink::capacity_	unicode/bytestream.h	/^  const int32_t capacity_;$/;"	m	class:CheckedArrayByteSink	access:private
CheckedArrayByteSink::operator =	unicode/bytestream.h	/^  CheckedArrayByteSink &operator=(const CheckedArrayByteSink &); \/\/\/< assignment operator not implemented$/;"	p	class:CheckedArrayByteSink	access:private	signature:(const CheckedArrayByteSink &)
CheckedArrayByteSink::outbuf_	unicode/bytestream.h	/^  char* outbuf_;$/;"	m	class:CheckedArrayByteSink	access:private
CheckedArrayByteSink::overflowed_	unicode/bytestream.h	/^  UBool overflowed_;$/;"	m	class:CheckedArrayByteSink	access:private
CheckedArrayByteSink::size_	unicode/bytestream.h	/^  int32_t size_;$/;"	m	class:CheckedArrayByteSink	access:private
ChineseCalendar	unicode/urename.h	1859;"	d
ChoiceFormat	unicode/urename.h	1860;"	d
ClassDefFormat1Table	unicode/urename.h	1861;"	d
ClassDefFormat2Table	unicode/urename.h	1862;"	d
ClassDefinitionTable	unicode/urename.h	1863;"	d
ClockMath	unicode/urename.h	1864;"	d
CmnDFuncs	ucmndata.c	/^static const commonDataFuncs CmnDFuncs = {offsetTOCLookupFn,  offsetTOCEntryCount};$/;"	v	file:
CmpEquivLevel	unormcmp.cpp	/^struct CmpEquivLevel {$/;"	s	file:
CmpEquivLevel	unormcmp.cpp	/^typedef struct CmpEquivLevel CmpEquivLevel;$/;"	t	typeref:struct:CmpEquivLevel	file:
CmpEquivLevel	ustrcase.c	/^struct CmpEquivLevel {$/;"	s	file:
CmpEquivLevel	ustrcase.c	/^typedef struct CmpEquivLevel CmpEquivLevel;$/;"	t	typeref:struct:CmpEquivLevel	file:
CmpEquivLevel::limit	unormcmp.cpp	/^    const UChar *start, *s, *limit;$/;"	m	struct:CmpEquivLevel	file:	access:public
CmpEquivLevel::limit	ustrcase.c	/^    const UChar *start, *s, *limit;$/;"	m	struct:CmpEquivLevel	file:	access:public
CmpEquivLevel::s	unormcmp.cpp	/^    const UChar *start, *s, *limit;$/;"	m	struct:CmpEquivLevel	file:	access:public
CmpEquivLevel::s	ustrcase.c	/^    const UChar *start, *s, *limit;$/;"	m	struct:CmpEquivLevel	file:	access:public
CmpEquivLevel::start	unormcmp.cpp	/^    const UChar *start, *s, *limit;$/;"	m	struct:CmpEquivLevel	file:	access:public
CmpEquivLevel::start	ustrcase.c	/^    const UChar *start, *s, *limit;$/;"	m	struct:CmpEquivLevel	file:	access:public
Cnv2022Type	ucnv2022.c	/^}Cnv2022Type;$/;"	t	typeref:enum:__anon67	file:
CollData	unicode/urename.h	1865;"	d
CollDataCache	unicode/urename.h	1866;"	d
CollDataCacheEntry	unicode/urename.h	1867;"	d
CollationElementIterator	unicode/urename.h	1868;"	d
CollationKey	unicode/urename.h	1869;"	d
CollationLocaleListEnumeration	unicode/urename.h	1870;"	d
Collator	unicode/urename.h	1871;"	d
CollatorFactory	unicode/urename.h	1872;"	d
CompactTrieDictionary	brkeng.h	/^class CompactTrieDictionary;$/;"	x
CompactTrieDictionary	triedict.cpp	/^CompactTrieDictionary::CompactTrieDictionary( const MutableTrieDictionary &dict,$/;"	f	class:CompactTrieDictionary	signature:( const MutableTrieDictionary &dict, UErrorCode &status )
CompactTrieDictionary	triedict.cpp	/^CompactTrieDictionary::CompactTrieDictionary( const void *data,$/;"	f	class:CompactTrieDictionary	signature:( const void *data, UErrorCode &status )
CompactTrieDictionary	triedict.cpp	/^CompactTrieDictionary::CompactTrieDictionary(UDataMemory *dataObj,$/;"	f	class:CompactTrieDictionary	signature:(UDataMemory *dataObj, UErrorCode &status )
CompactTrieDictionary	triedict.h	/^  CompactTrieDictionary( const MutableTrieDictionary &dict, UErrorCode &status );$/;"	p	class:CompactTrieDictionary	access:public	signature:( const MutableTrieDictionary &dict, UErrorCode &status )
CompactTrieDictionary	triedict.h	/^  CompactTrieDictionary(UDataMemory *dataObj, UErrorCode &status);$/;"	p	class:CompactTrieDictionary	access:public	signature:(UDataMemory *dataObj, UErrorCode &status)
CompactTrieDictionary	triedict.h	/^  CompactTrieDictionary(const void *dataObj, UErrorCode &status);$/;"	p	class:CompactTrieDictionary	access:public	signature:(const void *dataObj, UErrorCode &status)
CompactTrieDictionary	triedict.h	/^  friend class CompactTrieDictionary;   \/\/ For fast conversion$/;"	x
CompactTrieDictionary	triedict.h	/^class U_COMMON_API CompactTrieDictionary : public TrieWordDictionary {$/;"	c	inherits:TrieWordDictionary
CompactTrieDictionary	unicode/urename.h	1873;"	d
CompactTrieDictionary::CompactTrieDictionary	triedict.cpp	/^CompactTrieDictionary::CompactTrieDictionary( const MutableTrieDictionary &dict,$/;"	f	class:CompactTrieDictionary	signature:( const MutableTrieDictionary &dict, UErrorCode &status )
CompactTrieDictionary::CompactTrieDictionary	triedict.cpp	/^CompactTrieDictionary::CompactTrieDictionary( const void *data,$/;"	f	class:CompactTrieDictionary	signature:( const void *data, UErrorCode &status )
CompactTrieDictionary::CompactTrieDictionary	triedict.cpp	/^CompactTrieDictionary::CompactTrieDictionary(UDataMemory *dataObj,$/;"	f	class:CompactTrieDictionary	signature:(UDataMemory *dataObj, UErrorCode &status )
CompactTrieDictionary::CompactTrieDictionary	triedict.h	/^  CompactTrieDictionary( const MutableTrieDictionary &dict, UErrorCode &status );$/;"	p	class:CompactTrieDictionary	access:public	signature:( const MutableTrieDictionary &dict, UErrorCode &status )
CompactTrieDictionary::CompactTrieDictionary	triedict.h	/^  CompactTrieDictionary(UDataMemory *dataObj, UErrorCode &status);$/;"	p	class:CompactTrieDictionary	access:public	signature:(UDataMemory *dataObj, UErrorCode &status)
CompactTrieDictionary::CompactTrieDictionary	triedict.h	/^  CompactTrieDictionary(const void *dataObj, UErrorCode &status);$/;"	p	class:CompactTrieDictionary	access:public	signature:(const void *dataObj, UErrorCode &status)
CompactTrieDictionary::cloneMutable	triedict.cpp	/^CompactTrieDictionary::cloneMutable( UErrorCode &status ) const {$/;"	f	class:CompactTrieDictionary	signature:( UErrorCode &status ) const
CompactTrieDictionary::cloneMutable	triedict.h	/^  virtual MutableTrieDictionary *cloneMutable( UErrorCode &status ) const;$/;"	p	class:CompactTrieDictionary	access:public	signature:( UErrorCode &status ) const
CompactTrieDictionary::compactMutableTrieDictionary	triedict.cpp	/^CompactTrieDictionary::compactMutableTrieDictionary( const MutableTrieDictionary &dict,$/;"	f	class:CompactTrieDictionary	signature:( const MutableTrieDictionary &dict, UErrorCode &status )
CompactTrieDictionary::compactMutableTrieDictionary	triedict.h	/^  static CompactTrieHeader *compactMutableTrieDictionary( const MutableTrieDictionary &dict,$/;"	p	class:CompactTrieDictionary	access:private	signature:( const MutableTrieDictionary &dict, UErrorCode &status )
CompactTrieDictionary::data	triedict.cpp	/^CompactTrieDictionary::data() const {$/;"	f	class:CompactTrieDictionary	signature:() const
CompactTrieDictionary::data	triedict.h	/^  virtual const void *data() const;$/;"	p	class:CompactTrieDictionary	access:public	signature:() const
CompactTrieDictionary::dataSize	triedict.cpp	/^CompactTrieDictionary::dataSize() const {$/;"	f	class:CompactTrieDictionary	signature:() const
CompactTrieDictionary::dataSize	triedict.h	/^  virtual uint32_t dataSize() const;$/;"	p	class:CompactTrieDictionary	access:public	signature:() const
CompactTrieDictionary::fData	triedict.h	/^  const CompactTrieHeader   *fData;$/;"	m	class:CompactTrieDictionary	access:private
CompactTrieDictionary::fOwnData	triedict.h	/^  UBool                     fOwnData;$/;"	m	class:CompactTrieDictionary	access:private
CompactTrieDictionary::fUData	triedict.h	/^    UDataMemory              *fUData;$/;"	m	class:CompactTrieDictionary	access:private
CompactTrieDictionary::matches	triedict.cpp	/^CompactTrieDictionary::matches( UText *text,$/;"	f	class:CompactTrieDictionary	signature:( UText *text, int32_t maxLength, int32_t *lengths, int &count, int limit ) const
CompactTrieDictionary::matches	triedict.h	/^  virtual int32_t matches( UText *text,$/;"	p	class:CompactTrieDictionary	access:public	signature:( UText *text, int32_t rangeEnd, int32_t *lengths, int &count, int limit ) const
CompactTrieDictionary::openWords	triedict.cpp	/^CompactTrieDictionary::openWords( UErrorCode &status ) const {$/;"	f	class:CompactTrieDictionary	signature:( UErrorCode &status ) const
CompactTrieDictionary::openWords	triedict.h	/^  virtual StringEnumeration *openWords( UErrorCode &status ) const;$/;"	p	class:CompactTrieDictionary	access:public	signature:( UErrorCode &status ) const
CompactTrieDictionary::~CompactTrieDictionary	triedict.cpp	/^CompactTrieDictionary::~CompactTrieDictionary() {$/;"	f	class:CompactTrieDictionary	signature:()
CompactTrieDictionary::~CompactTrieDictionary	triedict.h	/^  virtual ~CompactTrieDictionary();$/;"	p	class:CompactTrieDictionary	access:public	signature:()
CompactTrieEnumeration	triedict.cpp	/^    CompactTrieEnumeration(const CompactTrieHeader *header, UErrorCode &status) $/;"	f	class:CompactTrieEnumeration	access:public	signature:(const CompactTrieHeader *header, UErrorCode &status)
CompactTrieEnumeration	triedict.cpp	/^class CompactTrieEnumeration : public StringEnumeration {$/;"	c	file:	inherits:StringEnumeration
CompactTrieEnumeration	unicode/urename.h	1874;"	d
CompactTrieEnumeration::CompactTrieEnumeration	triedict.cpp	/^    CompactTrieEnumeration(const CompactTrieHeader *header, UErrorCode &status) $/;"	f	class:CompactTrieEnumeration	access:public	signature:(const CompactTrieHeader *header, UErrorCode &status)
CompactTrieEnumeration::clone	triedict.cpp	/^    virtual StringEnumeration *clone() const {$/;"	f	class:CompactTrieEnumeration	access:public	signature:() const
CompactTrieEnumeration::count	triedict.cpp	/^    virtual int32_t count(UErrorCode &status) const {$/;"	f	class:CompactTrieEnumeration	access:public	signature:(UErrorCode &status) const
CompactTrieEnumeration::fHeader	triedict.cpp	/^    const CompactTrieHeader *fHeader;       \/\/ Trie data$/;"	m	class:CompactTrieEnumeration	file:	access:private
CompactTrieEnumeration::fIndexStack	triedict.cpp	/^    UVector32               fIndexStack;    \/\/ Stack of where in node we are$/;"	m	class:CompactTrieEnumeration	file:	access:private
CompactTrieEnumeration::fNodeStack	triedict.cpp	/^    UVector32               fNodeStack;     \/\/ Stack of nodes to process$/;"	m	class:CompactTrieEnumeration	file:	access:private
CompactTrieEnumeration::getDynamicClassID	triedict.cpp	/^    virtual UClassID getDynamicClassID(void) const;$/;"	p	class:CompactTrieEnumeration	file:	access:public	signature:(void) const
CompactTrieEnumeration::getStaticClassID	triedict.cpp	/^    static UClassID U_EXPORT2 getStaticClassID(void);$/;"	p	class:CompactTrieEnumeration	file:	access:public	signature:(void)
CompactTrieEnumeration::reset	triedict.cpp	/^    virtual void reset(UErrorCode &status) {$/;"	f	class:CompactTrieEnumeration	access:public	signature:(UErrorCode &status)
CompactTrieEnumeration::snext	triedict.cpp	/^    virtual const UnicodeString * snext(UErrorCode &status);$/;"	p	class:CompactTrieEnumeration	file:	access:public	signature:(UErrorCode &status)
CompactTrieEnumeration::snext	triedict.cpp	/^CompactTrieEnumeration::snext(UErrorCode &status) {$/;"	f	class:CompactTrieEnumeration	signature:(UErrorCode &status)
CompactTrieEnumeration::~CompactTrieEnumeration	triedict.cpp	/^    virtual ~CompactTrieEnumeration() {$/;"	f	class:CompactTrieEnumeration	access:public	signature:()
CompactTrieHeader	triedict.cpp	/^struct CompactTrieHeader {$/;"	s	file:
CompactTrieHeader	triedict.h	/^struct CompactTrieHeader;$/;"	x
CompactTrieHeader::magic	triedict.cpp	/^    uint32_t        magic;          \/\/ Magic number (including version)$/;"	m	struct:CompactTrieHeader	file:	access:public
CompactTrieHeader::nodeCount	triedict.cpp	/^    uint16_t        nodeCount;      \/\/ Number of entries in offsets[]$/;"	m	struct:CompactTrieHeader	file:	access:public
CompactTrieHeader::offsets	triedict.cpp	/^    uint32_t        offsets[1];      \/\/ Offsets to nodes from start of data$/;"	m	struct:CompactTrieHeader	file:	access:public
CompactTrieHeader::root	triedict.cpp	/^    uint16_t        root;           \/\/ Node number of the root node$/;"	m	struct:CompactTrieHeader	file:	access:public
CompactTrieHeader::size	triedict.cpp	/^    uint32_t        size;           \/\/ Size of the data in bytes$/;"	m	struct:CompactTrieHeader	file:	access:public
CompactTrieHorizontalEntry	triedict.cpp	/^struct CompactTrieHorizontalEntry {$/;"	s	file:
CompactTrieHorizontalEntry::ch	triedict.cpp	/^    uint16_t        ch;             \/\/ UChar$/;"	m	struct:CompactTrieHorizontalEntry	file:	access:public
CompactTrieHorizontalEntry::equal	triedict.cpp	/^    uint16_t        equal;          \/\/ Equal link node index$/;"	m	struct:CompactTrieHorizontalEntry	file:	access:public
CompactTrieHorizontalNode	triedict.cpp	/^struct CompactTrieHorizontalNode {$/;"	s	file:
CompactTrieHorizontalNode::entries	triedict.cpp	/^    CompactTrieHorizontalEntry      entries[1];$/;"	m	struct:CompactTrieHorizontalNode	file:	access:public
CompactTrieHorizontalNode::flagscount	triedict.cpp	/^    uint16_t        flagscount;     \/\/ Count of sub-entries, plus flags$/;"	m	struct:CompactTrieHorizontalNode	file:	access:public
CompactTrieNode	triedict.cpp	/^struct CompactTrieNode {$/;"	s	file:
CompactTrieNode::flagscount	triedict.cpp	/^    uint16_t        flagscount;     \/\/ Count of sub-entries, plus flags$/;"	m	struct:CompactTrieNode	file:	access:public
CompactTrieNodeFlags	triedict.cpp	/^enum CompactTrieNodeFlags {$/;"	g	file:
CompactTrieVerticalNode	triedict.cpp	/^struct CompactTrieVerticalNode {$/;"	s	file:
CompactTrieVerticalNode::chars	triedict.cpp	/^    uint16_t        chars[1];       \/\/ Code units$/;"	m	struct:CompactTrieVerticalNode	file:	access:public
CompactTrieVerticalNode::equal	triedict.cpp	/^    uint16_t        equal;          \/\/ Equal link node index$/;"	m	struct:CompactTrieVerticalNode	file:	access:public
CompactTrieVerticalNode::flagscount	triedict.cpp	/^    uint16_t        flagscount;     \/\/ Count of sub-entries, plus flags$/;"	m	struct:CompactTrieVerticalNode	file:	access:public
CompareContext	propname.cpp	/^struct CompareContext {$/;"	s	file:
CompareContext::chars	propname.cpp	/^    const char *chars;$/;"	m	struct:CompareContext	file:	access:public
CompareContext::propCompare	propname.cpp	/^    PropNameCompareFn *propCompare;$/;"	m	struct:CompareContext	file:	access:public
ComposeNormalizer2	normalizer2.cpp	/^    ComposeNormalizer2(const Normalizer2Impl &ni, UBool fcc) :$/;"	f	class:ComposeNormalizer2	access:public	signature:(const Normalizer2Impl &ni, UBool fcc)
ComposeNormalizer2	normalizer2.cpp	/^class ComposeNormalizer2 : public Normalizer2WithImpl {$/;"	c	file:	inherits:Normalizer2WithImpl
ComposeNormalizer2	unicode/urename.h	1875;"	d
ComposeNormalizer2::ComposeNormalizer2	normalizer2.cpp	/^    ComposeNormalizer2(const Normalizer2Impl &ni, UBool fcc) :$/;"	f	class:ComposeNormalizer2	access:public	signature:(const Normalizer2Impl &ni, UBool fcc)
ComposeNormalizer2::getQuickCheck	normalizer2.cpp	/^    virtual UNormalizationCheckResult getQuickCheck(UChar32 c) const {$/;"	f	class:ComposeNormalizer2	file:	access:private	signature:(UChar32 c) const
ComposeNormalizer2::hasBoundaryAfter	normalizer2.cpp	/^    virtual UBool hasBoundaryAfter(UChar32 c) const {$/;"	f	class:ComposeNormalizer2	file:	access:private	signature:(UChar32 c) const
ComposeNormalizer2::hasBoundaryBefore	normalizer2.cpp	/^    virtual UBool hasBoundaryBefore(UChar32 c) const {$/;"	f	class:ComposeNormalizer2	file:	access:private	signature:(UChar32 c) const
ComposeNormalizer2::isInert	normalizer2.cpp	/^    virtual UBool isInert(UChar32 c) const {$/;"	f	class:ComposeNormalizer2	file:	access:private	signature:(UChar32 c) const
ComposeNormalizer2::isNormalized	normalizer2.cpp	/^    isNormalized(const UnicodeString &s, UErrorCode &errorCode) const {$/;"	f	class:ComposeNormalizer2	file:	access:private	signature:(const UnicodeString &s, UErrorCode &errorCode) const
ComposeNormalizer2::normalize	normalizer2.cpp	/^    normalize(const UChar *src, const UChar *limit,$/;"	f	class:ComposeNormalizer2	file:	access:private	signature:(const UChar *src, const UChar *limit, ReorderingBuffer &buffer, UErrorCode &errorCode) const
ComposeNormalizer2::normalizeAndAppend	normalizer2.cpp	/^    normalizeAndAppend(const UChar *src, const UChar *limit, UBool doNormalize,$/;"	f	class:ComposeNormalizer2	file:	access:private	signature:(const UChar *src, const UChar *limit, UBool doNormalize, ReorderingBuffer &buffer, UErrorCode &errorCode) const
ComposeNormalizer2::onlyContiguous	normalizer2.cpp	/^    const UBool onlyContiguous;$/;"	m	class:ComposeNormalizer2	file:	access:private
ComposeNormalizer2::quickCheck	normalizer2.cpp	/^    quickCheck(const UnicodeString &s, UErrorCode &errorCode) const {$/;"	f	class:ComposeNormalizer2	file:	access:private	signature:(const UnicodeString &s, UErrorCode &errorCode) const
ComposeNormalizer2::spanQuickCheckYes	normalizer2.cpp	/^    spanQuickCheckYes(const UChar *src, const UChar *limit, UErrorCode &) const {$/;"	f	class:ComposeNormalizer2	file:	access:private	signature:(const UChar *src, const UChar *limit, UErrorCode &) const
CompoundTransliterator	unicode/urename.h	1876;"	d
ConfusabledataBuilder	unicode/urename.h	1877;"	d
ContextualGlyphSubstitutionProcessor	unicode/urename.h	1878;"	d
ContextualSubstitutionBase	unicode/urename.h	1879;"	d
ContextualSubstitutionFormat1Subtable	unicode/urename.h	1880;"	d
ContextualSubstitutionFormat2Subtable	unicode/urename.h	1881;"	d
ContextualSubstitutionFormat3Subtable	unicode/urename.h	1882;"	d
ContextualSubstitutionSubtable	unicode/urename.h	1883;"	d
CopticCalendar	unicode/urename.h	1884;"	d
CoverageFormat1Table	unicode/urename.h	1885;"	d
CoverageFormat2Table	unicode/urename.h	1886;"	d
CoverageTable	unicode/urename.h	1887;"	d
CurrencyAmount	unicode/urename.h	1888;"	d
CurrencyFormat	unicode/urename.h	1889;"	d
CurrencyPluralInfo	unicode/urename.h	1890;"	d
CurrencyUnit	unicode/urename.h	1891;"	d
CursiveAttachmentSubtable	unicode/urename.h	1892;"	d
DAMP	punycode.c	63;"	d	file:
DANDA	ucnvisci.c	38;"	d	file:
DATA_NAME	ucnv_io.c	/^static const char DATA_NAME[] = "cnvalias";$/;"	v	file:
DATA_NAME	unames.c	/^static const char DATA_NAME[] = "unames";$/;"	v	file:
DATA_TYPE	putil.c	148;"	d	file:
DATA_TYPE	ucnv_bld.c	/^static const char DATA_TYPE[] = "cnv";$/;"	v	file:
DATA_TYPE	ucnv_io.c	/^static const char DATA_TYPE[] = "icu";$/;"	v	file:
DATA_TYPE	umapfile.c	359;"	d	file:
DATA_TYPE	unames.c	/^static const char DATA_TYPE[] = "icu";$/;"	v	file:
DBBI_H	unicode/dbbi.h	12;"	d
DBCS	ucnv2022.c	/^        DBCS,$/;"	e	enum:__anon67	file:
DBCS_RESULT_FROM_MOST_BMP	ucnvmbcs.h	312;"	d
DBCS_RESULT_FROM_UTF8	ucnvmbcs.h	315;"	d
DBG	icuplug.c	30;"	d	file:
DB_ESCAPE	ucnvhz.c	33;"	d	file:
DEC	usc_impl.c	28;"	d	file:
DEC1	usc_impl.c	29;"	d	file:
DECLARE_LMBCS_DATA	ucnv_lmb.c	587;"	d	file:
DECPOWERS	unicode/urename.h	51;"	d
DECSTICKYTAB	unicode/urename.h	52;"	d
DEF	ucnvisci.c	/^    DEF = 0x40,$/;"	e	enum:__anon14	file:
DEFAULT_CAPACITY	uvector.cpp	17;"	d	file:
DEFAULT_CAPACITY	uvectr32.cpp	17;"	d	file:
DEFAULT_CAPACITY	uvectr64.cpp	14;"	d	file:
DEFAULT_INCLUSION_CAPACITY	uniset_props.cpp	179;"	d	file:
DEFAULT_PRIME_INDEX	uhash.c	86;"	d	file:
DEFAULT_TAG	uresbund.c	2231;"	d	file:
DEFINE_LMBCS_OPEN	ucnv_lmb.c	621;"	d	file:
DEL	uprops.h	/^    DEL     =0x007f,$/;"	e	enum:__anon90
DELIMITER	punycode.c	69;"	d	file:
DELTA	ucnvisci.c	/^    DELTA=0x80$/;"	e	enum:__anon13	file:
DEPRECATEDLANGS	uloc_tag.c	/^static const char* DEPRECATEDLANGS[] = {$/;"	v	file:
DEPRECATED_COUNTRIES	uloc.c	/^static const char* const DEPRECATED_COUNTRIES[] ={$/;"	v	file:
DEPRECATED_LANGUAGES	uloc.c	/^static const char* const DEPRECATED_LANGUAGES[]={$/;"	v	file:
DESHAPE_MODE	ushape.c	77;"	d	file:
DEV	ucnvisci.c	/^    DEV = 0x42,$/;"	e	enum:__anon14	file:
DEVANAGARI	ucnvisci.c	/^    DEVANAGARI =0,$/;"	e	enum:__anon13	file:
DEV_ABBR_SIGN	ucnvisci.c	53;"	d	file:
DEV_ANUDATTA	ucnvisci.c	54;"	d	file:
DEV_MASK	ucnvisci.c	/^    DEV_MASK =0x80,$/;"	e	enum:__anon15	file:
DICTBE_H	dictbe.h	9;"	d
DIFF_IS_DOUBLE	ucnvbocu.c	382;"	d	file:
DIFF_IS_SINGLE	ucnvbocu.c	376;"	d	file:
DIGITS	util.cpp	/^static const UChar DIGITS[] = {$/;"	v	file:
DIRPROP_FLAG	ubidiimp.h	65;"	d
DIRPROP_FLAG_E	ubidi.c	113;"	d	file:
DIRPROP_FLAG_LR	ubidi.c	112;"	d	file:
DIRPROP_FLAG_MULTI_RUNS	ubidiimp.h	68;"	d
DIRPROP_FLAG_NC	ubidiimp.h	117;"	d
DIRPROP_FLAG_O	ubidi.c	114;"	d	file:
DNCache	serv.cpp	/^    DNCache(const Locale& _locale) $/;"	f	class:DNCache	access:public	signature:(const Locale& _locale)
DNCache	serv.cpp	/^class DNCache : public UMemory {$/;"	c	file:	inherits:UMemory
DNCache	serv.h	/^class DNCache;$/;"	x
DNCache::DNCache	serv.cpp	/^    DNCache(const Locale& _locale) $/;"	f	class:DNCache	access:public	signature:(const Locale& _locale)
DNCache::cache	serv.cpp	/^    Hashtable cache;$/;"	m	class:DNCache	file:	access:public
DNCache::locale	serv.cpp	/^    const Locale locale;$/;"	m	class:DNCache	file:	access:public
DONE	ruleiter.h	/^    enum { DONE = -1 };$/;"	e	enum:RuleCharacterIterator::__anon131
DONE	unicode/brkiter.h	/^        DONE = (int32_t)-1$/;"	e	enum:BreakIterator::__anon111
DONE	unicode/chariter.h	/^    enum { DONE = 0xffff };$/;"	e	enum:ForwardCharacterIterator::__anon97
DONE	unicode/normlzr.h	/^      DONE=0xffff$/;"	e	enum:Normalizer::__anon127
DOUBLE_DANDA	ucnvisci.c	39;"	d	file:
DO_FIND_NAME	unames.c	99;"	d	file:
DTRedundantEnumeration	unicode/urename.h	1893;"	d
DTSkeletonEnumeration	unicode/urename.h	1894;"	d
DataCacheElement	udata.cpp	/^typedef struct DataCacheElement {$/;"	s	file:
DataCacheElement	udata.cpp	/^} DataCacheElement;$/;"	t	typeref:struct:DataCacheElement	file:
DataCacheElement::item	udata.cpp	/^    UDataMemory   *item;$/;"	m	struct:DataCacheElement	file:	access:public
DataCacheElement::name	udata.cpp	/^    char          *name;$/;"	m	struct:DataCacheElement	file:	access:public
DataCacheElement_deleter	udata.cpp	/^static void U_CALLCONV DataCacheElement_deleter(void *pDCEl) {$/;"	f	file:	signature:(void *pDCEl)
DataHeader	ucmndata.h	/^} DataHeader;$/;"	t	typeref:struct:__anon143
DateFormat	unicode/urename.h	1895;"	d
DateFormatSymbols	unicode/urename.h	1896;"	d
DateInterval	dtintrv.cpp	/^DateInterval::DateInterval(UDate from, UDate to)$/;"	f	class:DateInterval	signature:(UDate from, UDate to)
DateInterval	dtintrv.cpp	/^DateInterval::DateInterval(const DateInterval& other)$/;"	f	class:DateInterval	signature:(const DateInterval& other)
DateInterval	unicode/dtintrv.h	/^    DateInterval();$/;"	p	class:DateInterval	access:private	signature:()
DateInterval	unicode/dtintrv.h	/^    DateInterval(UDate fromDate, UDate toDate);$/;"	p	class:DateInterval	access:public	signature:(UDate fromDate, UDate toDate)
DateInterval	unicode/dtintrv.h	/^    DateInterval(const DateInterval& other);$/;"	p	class:DateInterval	access:public	signature:(const DateInterval& other)
DateInterval	unicode/dtintrv.h	/^class U_COMMON_API DateInterval : public UObject {$/;"	c	inherits:UObject
DateInterval	unicode/urename.h	1897;"	d
DateInterval::DateInterval	dtintrv.cpp	/^DateInterval::DateInterval(UDate from, UDate to)$/;"	f	class:DateInterval	signature:(UDate from, UDate to)
DateInterval::DateInterval	dtintrv.cpp	/^DateInterval::DateInterval(const DateInterval& other)$/;"	f	class:DateInterval	signature:(const DateInterval& other)
DateInterval::DateInterval	unicode/dtintrv.h	/^    DateInterval();$/;"	p	class:DateInterval	access:private	signature:()
DateInterval::DateInterval	unicode/dtintrv.h	/^    DateInterval(UDate fromDate, UDate toDate);$/;"	p	class:DateInterval	access:public	signature:(UDate fromDate, UDate toDate)
DateInterval::DateInterval	unicode/dtintrv.h	/^    DateInterval(const DateInterval& other);$/;"	p	class:DateInterval	access:public	signature:(const DateInterval& other)
DateInterval::clone	dtintrv.cpp	/^DateInterval::clone() const {$/;"	f	class:DateInterval	signature:() const
DateInterval::clone	unicode/dtintrv.h	/^     virtual DateInterval* clone() const;$/;"	p	class:DateInterval	access:public	signature:() const
DateInterval::fromDate	unicode/dtintrv.h	/^    UDate fromDate;$/;"	m	class:DateInterval	access:private
DateInterval::getDynamicClassID	unicode/dtintrv.h	/^    virtual UClassID getDynamicClassID(void) const;$/;"	p	class:DateInterval	access:public	signature:(void) const
DateInterval::getFromDate	unicode/dtintrv.h	/^    UDate getFromDate() const;$/;"	p	class:DateInterval	access:public	signature:() const
DateInterval::getFromDate	unicode/dtintrv.h	/^DateInterval::getFromDate() const { $/;"	f	class:DateInterval	signature:() const
DateInterval::getStaticClassID	unicode/dtintrv.h	/^    static UClassID U_EXPORT2 getStaticClassID(void);$/;"	p	class:DateInterval	access:public	signature:(void)
DateInterval::getToDate	unicode/dtintrv.h	/^    UDate getToDate() const;$/;"	p	class:DateInterval	access:public	signature:() const
DateInterval::getToDate	unicode/dtintrv.h	/^DateInterval::getToDate() const { $/;"	f	class:DateInterval	signature:() const
DateInterval::operator !=	unicode/dtintrv.h	/^    UBool operator!=(const DateInterval& other) const;$/;"	p	class:DateInterval	access:public	signature:(const DateInterval& other) const
DateInterval::operator !=	unicode/dtintrv.h	/^DateInterval::operator!=(const DateInterval& other) const { $/;"	f	class:DateInterval	signature:(const DateInterval& other) const
DateInterval::operator =	dtintrv.cpp	/^DateInterval::operator=(const DateInterval& other) {$/;"	f	class:DateInterval	signature:(const DateInterval& other)
DateInterval::operator =	unicode/dtintrv.h	/^    DateInterval& operator=(const DateInterval&);$/;"	p	class:DateInterval	access:public	signature:(const DateInterval&)
DateInterval::operator ==	dtintrv.cpp	/^DateInterval::operator==(const DateInterval& other) const { $/;"	f	class:DateInterval	signature:(const DateInterval& other) const
DateInterval::operator ==	unicode/dtintrv.h	/^    virtual UBool operator==(const DateInterval& other) const;$/;"	p	class:DateInterval	access:public	signature:(const DateInterval& other) const
DateInterval::toDate	unicode/dtintrv.h	/^    UDate toDate;$/;"	m	class:DateInterval	access:private
DateInterval::~DateInterval	dtintrv.cpp	/^DateInterval::~DateInterval(){}$/;"	f	class:DateInterval	signature:()
DateInterval::~DateInterval	unicode/dtintrv.h	/^    virtual ~DateInterval();$/;"	p	class:DateInterval	access:public	signature:()
DateIntervalFormat	unicode/urename.h	1898;"	d
DateIntervalInfo	unicode/urename.h	1899;"	d
DateTimeMatcher	unicode/urename.h	1900;"	d
DateTimePatternGenerator	unicode/urename.h	1901;"	d
DateTimeRule	unicode/urename.h	1902;"	d
DecimalFormat	unicode/urename.h	1903;"	d
DecimalFormatSymbols	unicode/urename.h	1904;"	d
DecomposeNormalizer2	normalizer2.cpp	/^    DecomposeNormalizer2(const Normalizer2Impl &ni) : Normalizer2WithImpl(ni) {}$/;"	f	class:DecomposeNormalizer2	access:public	signature:(const Normalizer2Impl &ni)
DecomposeNormalizer2	normalizer2.cpp	/^class DecomposeNormalizer2 : public Normalizer2WithImpl {$/;"	c	file:	inherits:Normalizer2WithImpl
DecomposeNormalizer2	unicode/urename.h	1905;"	d
DecomposeNormalizer2::DecomposeNormalizer2	normalizer2.cpp	/^    DecomposeNormalizer2(const Normalizer2Impl &ni) : Normalizer2WithImpl(ni) {}$/;"	f	class:DecomposeNormalizer2	access:public	signature:(const Normalizer2Impl &ni)
DecomposeNormalizer2::getQuickCheck	normalizer2.cpp	/^    virtual UNormalizationCheckResult getQuickCheck(UChar32 c) const {$/;"	f	class:DecomposeNormalizer2	file:	access:private	signature:(UChar32 c) const
DecomposeNormalizer2::hasBoundaryAfter	normalizer2.cpp	/^    virtual UBool hasBoundaryAfter(UChar32 c) const { return impl.hasDecompBoundary(c, FALSE); }$/;"	f	class:DecomposeNormalizer2	file:	access:private	signature:(UChar32 c) const
DecomposeNormalizer2::hasBoundaryBefore	normalizer2.cpp	/^    virtual UBool hasBoundaryBefore(UChar32 c) const { return impl.hasDecompBoundary(c, TRUE); }$/;"	f	class:DecomposeNormalizer2	file:	access:private	signature:(UChar32 c) const
DecomposeNormalizer2::isInert	normalizer2.cpp	/^    virtual UBool isInert(UChar32 c) const { return impl.isDecompInert(c); }$/;"	f	class:DecomposeNormalizer2	file:	access:private	signature:(UChar32 c) const
DecomposeNormalizer2::normalize	normalizer2.cpp	/^    normalize(const UChar *src, const UChar *limit,$/;"	f	class:DecomposeNormalizer2	file:	access:private	signature:(const UChar *src, const UChar *limit, ReorderingBuffer &buffer, UErrorCode &errorCode) const
DecomposeNormalizer2::normalizeAndAppend	normalizer2.cpp	/^    normalizeAndAppend(const UChar *src, const UChar *limit, UBool doNormalize,$/;"	f	class:DecomposeNormalizer2	file:	access:private	signature:(const UChar *src, const UChar *limit, UBool doNormalize, ReorderingBuffer &buffer, UErrorCode &errorCode) const
DecomposeNormalizer2::spanQuickCheckYes	normalizer2.cpp	/^    spanQuickCheckYes(const UChar *src, const UChar *limit, UErrorCode &errorCode) const {$/;"	f	class:DecomposeNormalizer2	file:	access:private	signature:(const UChar *src, const UChar *limit, UErrorCode &errorCode) const
DefaultCalendarFactory	unicode/urename.h	1906;"	d
DefaultCharMapper	unicode/urename.h	1907;"	d
DefaultTZInfo	putil.c	/^typedef struct DefaultTZInfo {$/;"	s	file:
DefaultTZInfo	putil.c	/^} DefaultTZInfo;$/;"	t	typeref:struct:DefaultTZInfo	file:
DefaultTZInfo::defaultTZBuffer	putil.c	/^    char* defaultTZBuffer;$/;"	m	struct:DefaultTZInfo	file:	access:public
DefaultTZInfo::defaultTZFilePtr	putil.c	/^    FILE* defaultTZFilePtr;$/;"	m	struct:DefaultTZInfo	file:	access:public
DefaultTZInfo::defaultTZFileSize	putil.c	/^    int64_t defaultTZFileSize;$/;"	m	struct:DefaultTZInfo	file:	access:public
DefaultTZInfo::defaultTZPosition	putil.c	/^    int32_t defaultTZPosition;$/;"	m	struct:DefaultTZInfo	file:	access:public
DefaultTZInfo::defaultTZstatus	putil.c	/^    UBool defaultTZstatus;$/;"	m	struct:DefaultTZInfo	file:	access:public
DeviceTable	unicode/urename.h	1908;"	d
DictionaryBasedBreakIterator	unicode/dbbi.h	/^typedef RuleBasedBreakIterator DictionaryBasedBreakIterator;$/;"	t
DictionaryBreakEngine	dictbe.cpp	/^DictionaryBreakEngine::DictionaryBreakEngine(uint32_t breakTypes) {$/;"	f	class:DictionaryBreakEngine	signature:(uint32_t breakTypes)
DictionaryBreakEngine	dictbe.h	/^  DictionaryBreakEngine( uint32_t breakTypes );$/;"	p	class:DictionaryBreakEngine	access:public	signature:( uint32_t breakTypes )
DictionaryBreakEngine	dictbe.h	/^  DictionaryBreakEngine();$/;"	p	class:DictionaryBreakEngine	access:private	signature:()
DictionaryBreakEngine	dictbe.h	/^class DictionaryBreakEngine : public LanguageBreakEngine {$/;"	c	inherits:LanguageBreakEngine
DictionaryBreakEngine	unicode/urename.h	1909;"	d
DictionaryBreakEngine::DictionaryBreakEngine	dictbe.cpp	/^DictionaryBreakEngine::DictionaryBreakEngine(uint32_t breakTypes) {$/;"	f	class:DictionaryBreakEngine	signature:(uint32_t breakTypes)
DictionaryBreakEngine::DictionaryBreakEngine	dictbe.h	/^  DictionaryBreakEngine( uint32_t breakTypes );$/;"	p	class:DictionaryBreakEngine	access:public	signature:( uint32_t breakTypes )
DictionaryBreakEngine::DictionaryBreakEngine	dictbe.h	/^  DictionaryBreakEngine();$/;"	p	class:DictionaryBreakEngine	access:private	signature:()
DictionaryBreakEngine::divideUpDictionaryRange	dictbe.h	/^  virtual int32_t divideUpDictionaryRange( UText *text,$/;"	p	class:DictionaryBreakEngine	access:protected	signature:( UText *text, int32_t rangeStart, int32_t rangeEnd, UStack &foundBreaks ) const
DictionaryBreakEngine::fSet	dictbe.h	/^  UnicodeSet    fSet;$/;"	m	class:DictionaryBreakEngine	access:private
DictionaryBreakEngine::fTypes	dictbe.h	/^  uint32_t      fTypes;$/;"	m	class:DictionaryBreakEngine	access:private
DictionaryBreakEngine::findBreaks	dictbe.cpp	/^DictionaryBreakEngine::findBreaks( UText *text,$/;"	f	class:DictionaryBreakEngine	signature:( UText *text, int32_t startPos, int32_t endPos, UBool reverse, int32_t breakType, UStack &foundBreaks ) const
DictionaryBreakEngine::findBreaks	dictbe.h	/^  virtual int32_t findBreaks( UText *text,$/;"	p	class:DictionaryBreakEngine	access:public	signature:( UText *text, int32_t startPos, int32_t endPos, UBool reverse, int32_t breakType, UStack &foundBreaks ) const
DictionaryBreakEngine::handles	dictbe.cpp	/^DictionaryBreakEngine::handles(UChar32 c, int32_t breakType) const {$/;"	f	class:DictionaryBreakEngine	signature:(UChar32 c, int32_t breakType) const
DictionaryBreakEngine::handles	dictbe.h	/^  virtual UBool handles( UChar32 c, int32_t breakType ) const;$/;"	p	class:DictionaryBreakEngine	access:public	signature:( UChar32 c, int32_t breakType ) const
DictionaryBreakEngine::setCharacters	dictbe.cpp	/^DictionaryBreakEngine::setCharacters( const UnicodeSet &set ) {$/;"	f	class:DictionaryBreakEngine	signature:( const UnicodeSet &set )
DictionaryBreakEngine::setCharacters	dictbe.h	/^  virtual void setCharacters( const UnicodeSet &set );$/;"	p	class:DictionaryBreakEngine	access:protected	signature:( const UnicodeSet &set )
DictionaryBreakEngine::~DictionaryBreakEngine	dictbe.cpp	/^DictionaryBreakEngine::~DictionaryBreakEngine() {$/;"	f	class:DictionaryBreakEngine	signature:()
DictionaryBreakEngine::~DictionaryBreakEngine	dictbe.h	/^  virtual ~DictionaryBreakEngine();$/;"	p	class:DictionaryBreakEngine	access:public	signature:()
DigitList	unicode/urename.h	1910;"	d
DirProp	ubidiimp.h	/^typedef uint8_t DirProp;$/;"	t
DirProp_AN	ubidi.c	/^enum { DirProp_L=0, DirProp_R=1, DirProp_EN=2, DirProp_AN=3, DirProp_ON=4, DirProp_S=5, DirProp_B=6 }; \/* reduced dirProp *\/$/;"	e	enum:__anon17	file:
DirProp_B	ubidi.c	/^enum { DirProp_L=0, DirProp_R=1, DirProp_EN=2, DirProp_AN=3, DirProp_ON=4, DirProp_S=5, DirProp_B=6 }; \/* reduced dirProp *\/$/;"	e	enum:__anon17	file:
DirProp_EN	ubidi.c	/^enum { DirProp_L=0, DirProp_R=1, DirProp_EN=2, DirProp_AN=3, DirProp_ON=4, DirProp_S=5, DirProp_B=6 }; \/* reduced dirProp *\/$/;"	e	enum:__anon17	file:
DirProp_L	ubidi.c	/^enum { DirProp_L=0, DirProp_R=1, DirProp_EN=2, DirProp_AN=3, DirProp_ON=4, DirProp_S=5, DirProp_B=6 }; \/* reduced dirProp *\/$/;"	e	enum:__anon17	file:
DirProp_ON	ubidi.c	/^enum { DirProp_L=0, DirProp_R=1, DirProp_EN=2, DirProp_AN=3, DirProp_ON=4, DirProp_S=5, DirProp_B=6 }; \/* reduced dirProp *\/$/;"	e	enum:__anon17	file:
DirProp_R	ubidi.c	/^enum { DirProp_L=0, DirProp_R=1, DirProp_EN=2, DirProp_AN=3, DirProp_ON=4, DirProp_S=5, DirProp_B=6 }; \/* reduced dirProp *\/$/;"	e	enum:__anon17	file:
DirProp_S	ubidi.c	/^enum { DirProp_L=0, DirProp_R=1, DirProp_EN=2, DirProp_AN=3, DirProp_ON=4, DirProp_S=5, DirProp_B=6 }; \/* reduced dirProp *\/$/;"	e	enum:__anon17	file:
DistanceInfo	unicode/urename.h	1911;"	d
DllMain	ucln_imp.h	/^BOOL WINAPI DllMain(HINSTANCE hinstDLL, DWORD fdwReason, LPVOID lpvReserved)$/;"	f	signature:(HINSTANCE hinstDLL, DWORD fdwReason, LPVOID lpvReserved)
EBCDIC_LF	ucnvmbcs.c	1099;"	d	file:
EBCDIC_NL	ucnvmbcs.c	1100;"	d	file:
EBCDIC_RT_LF	ucnvmbcs.c	1103;"	d	file:
EBCDIC_RT_NL	ucnvmbcs.c	1104;"	d	file:
ECleanupCommonType	ucln_cmn.h	/^typedef enum ECleanupCommonType {$/;"	g
ECleanupCommonType	ucln_cmn.h	/^} ECleanupCommonType;$/;"	t	typeref:enum:ECleanupCommonType
ECleanupLibraryType	ucln.h	/^typedef enum ECleanupLibraryType {$/;"	g
ECleanupLibraryType	ucln.h	/^} ECleanupLibraryType;$/;"	t	typeref:enum:ECleanupLibraryType
EDontAdopt	rbbidata.h	/^    enum EDontAdopt {$/;"	g	class:RBBIDataWrapper	access:public
EDontAdopt	unicode/rbbi.h	/^    enum EDontAdopt {$/;"	g	class:RuleBasedBreakIterator	access:protected
EInvariant	unicode/unistr.h	/^  enum EInvariant {$/;"	g	class:UnicodeString	access:public
ELocalePos	locid.cpp	/^typedef enum ELocalePos {$/;"	g	file:
ELocalePos	locid.cpp	/^} ELocalePos;$/;"	t	typeref:enum:ELocalePos	file:
ELocaleType	unicode/locid.h	/^    enum ELocaleType {$/;"	g	class:Locale	access:private
EMPTY	uloc_tag.c	/^static const char* EMPTY = "";$/;"	v	file:
EN	ubidiimp.h	/^    EN= U_EUROPEAN_NUMBER,$/;"	e	enum:__anon82
EN_AN_MASK	uts46.cpp	/^const uint32_t EN_AN_MASK=U_MASK(U_EUROPEAN_NUMBER)|U_MASK(U_ARABIC_NUMBER);$/;"	v
EOrigin	unicode/chariter.h	/^    enum EOrigin { kStart, kCurrent, kEnd };$/;"	g	class:CharacterIterator	access:public
EPOCH_BIAS	putil.c	267;"	d	file:
EQUALS	uniset.cpp	44;"	d	file:
EQUALS	uniset_props.cpp	72;"	d	file:
ES	ubidiimp.h	/^    ES= U_EUROPEAN_NUMBER_SEPARATOR,$/;"	e	enum:__anon82
ESC_2022	ucnv2022.c	221;"	d	file:
ESC_LEN	ucnvhz.c	35;"	d	file:
ES_CS_ET_ON_BN_NSM_MASK	uts46.cpp	/^const uint32_t ES_CS_ET_ON_BN_NSM_MASK=$/;"	v
ET	ubidiimp.h	/^    ET= U_EUROPEAN_NUMBER_TERMINATOR,$/;"	e	enum:__anon82
EXT	ucnvisci.c	37;"	d	file:
EXTL	uloc_tag.c	1632;"	d	file:
EXTS	uloc_tag.c	1636;"	d	file:
EXTV	uloc_tag.c	1637;"	d	file:
EXT_RANGE_BEGIN	ucnvisci.c	55;"	d	file:
EXT_RANGE_END	ucnvisci.c	56;"	d	file:
EnumToOffset	propname.h	/^class EnumToOffset {$/;"	c
EnumToOffset	unicode/urename.h	1912;"	d
EnumToOffset::_offsetArray	propname.h	/^    Offset _offsetArray; \/*  [array of enumLimit-enumStart] *\/$/;"	m	class:EnumToOffset	access:private
EnumToOffset::enumLimit	propname.h	/^    EnumValue enumLimit;$/;"	m	class:EnumToOffset	access:private
EnumToOffset::enumStart	propname.h	/^    EnumValue enumStart;$/;"	m	class:EnumToOffset	access:private
EnumToOffset::getOffset	propname.h	/^    Offset getOffset(EnumValue enumProbe) const {$/;"	f	class:EnumToOffset	access:public	signature:(EnumValue enumProbe) const
EnumToOffset::getOffsetArray	propname.h	/^    Offset* getOffsetArray() {$/;"	f	class:EnumToOffset	access:private	signature:()
EnumToOffset::getOffsetArray	propname.h	/^    const Offset* getOffsetArray() const {$/;"	f	class:EnumToOffset	access:private	signature:() const
EnumToOffset::getSize	propname.h	/^    int32_t getSize() {$/;"	f	class:EnumToOffset	access:private	signature:()
EnumToOffset::getSize	propname.h	/^    static int32_t getSize(int32_t n) {$/;"	f	class:EnumToOffset	access:private	signature:(int32_t n)
EnumToOffset::swap	propname.cpp	/^EnumToOffset::swap(const UDataSwapper *ds,$/;"	f	class:EnumToOffset	signature:(const UDataSwapper *ds, const uint8_t *inBytes, int32_t length, uint8_t *outBytes, uint8_t *temp, int32_t pos, UErrorCode *pErrorCode)
EnumToOffset::swap	propname.h	/^    swap(const UDataSwapper *ds,$/;"	p	class:EnumToOffset	access:public	signature:(const UDataSwapper *ds, const uint8_t *inBytes, int32_t length, uint8_t *outBytes, uint8_t *temp, int32_t pos, UErrorCode *pErrorCode)
EnumValue	propname.h	/^typedef int32_t EnumValue;$/;"	t
Enumerator	ucnvsel.cpp	/^struct Enumerator {$/;"	s	file:
Enumerator::cur	ucnvsel.cpp	/^  int16_t cur;$/;"	m	struct:Enumerator	file:	access:public
Enumerator::index	ucnvsel.cpp	/^  int16_t* index;$/;"	m	struct:Enumerator	file:	access:public
Enumerator::length	ucnvsel.cpp	/^  int16_t length;$/;"	m	struct:Enumerator	file:	access:public
Enumerator::sel	ucnvsel.cpp	/^  const UConverterSelector* sel;$/;"	m	struct:Enumerator	file:	access:public
ErrorCode	unicode/errorcode.h	/^    ErrorCode() : errorCode(U_ZERO_ERROR) {}$/;"	f	class:ErrorCode	access:public	signature:()
ErrorCode	unicode/errorcode.h	/^class U_COMMON_API ErrorCode: public UMemory {$/;"	c	inherits:UMemory
ErrorCode	unicode/urename.h	1913;"	d
ErrorCode::ErrorCode	unicode/errorcode.h	/^    ErrorCode() : errorCode(U_ZERO_ERROR) {}$/;"	f	class:ErrorCode	access:public	signature:()
ErrorCode::assertSuccess	errorcode.cpp	/^void ErrorCode::assertSuccess() const {$/;"	f	class:ErrorCode	signature:() const
ErrorCode::assertSuccess	unicode/errorcode.h	/^    void assertSuccess() const;$/;"	p	class:ErrorCode	access:public	signature:() const
ErrorCode::errorCode	unicode/errorcode.h	/^    UErrorCode errorCode;$/;"	m	class:ErrorCode	access:protected
ErrorCode::errorName	errorcode.cpp	/^const char* ErrorCode::errorName() const {$/;"	f	class:ErrorCode	signature:() const
ErrorCode::errorName	unicode/errorcode.h	/^    const char* errorName() const;$/;"	p	class:ErrorCode	access:public	signature:() const
ErrorCode::get	unicode/errorcode.h	/^    UErrorCode get() const { return errorCode; }$/;"	f	class:ErrorCode	access:public	signature:() const
ErrorCode::handleFailure	unicode/errorcode.h	/^    virtual void handleFailure() const {}$/;"	f	class:ErrorCode	access:protected	signature:() const
ErrorCode::isFailure	unicode/errorcode.h	/^    UBool isFailure() const { return U_FAILURE(errorCode); }$/;"	f	class:ErrorCode	access:public	signature:() const
ErrorCode::isSuccess	unicode/errorcode.h	/^    UBool isSuccess() const { return U_SUCCESS(errorCode); }$/;"	f	class:ErrorCode	access:public	signature:() const
ErrorCode::operator UErrorCode &	unicode/errorcode.h	/^    operator UErrorCode & () { return errorCode; }$/;"	f	class:ErrorCode	access:public	signature:()
ErrorCode::operator UErrorCode *	unicode/errorcode.h	/^    operator UErrorCode * () { return &errorCode; }$/;"	f	class:ErrorCode	access:public	signature:()
ErrorCode::reset	errorcode.cpp	/^UErrorCode ErrorCode::reset() {$/;"	f	class:ErrorCode	signature:()
ErrorCode::reset	unicode/errorcode.h	/^    UErrorCode reset();$/;"	p	class:ErrorCode	access:public	signature:()
ErrorCode::set	unicode/errorcode.h	/^    void set(UErrorCode value) { errorCode=value; }$/;"	f	class:ErrorCode	access:public	signature:(UErrorCode value)
ErrorCode::~ErrorCode	unicode/errorcode.h	/^    virtual ~ErrorCode() {}$/;"	f	class:ErrorCode	access:public	signature:()
EscapeTransliterator	unicode/urename.h	1914;"	d
EthiopicCalendar	unicode/urename.h	1915;"	d
EventListener	servnotf.h	/^class U_COMMON_API EventListener : public UObject {$/;"	c	inherits:UObject
EventListener	unicode/urename.h	1916;"	d
EventListener::getDynamicClassID	servnotf.h	/^    virtual UClassID getDynamicClassID() const;$/;"	p	class:EventListener	access:public	signature:() const
EventListener::getStaticClassID	servnotf.h	/^    static UClassID U_EXPORT2 getStaticClassID();$/;"	p	class:EventListener	access:public	signature:()
EventListener::~EventListener	servnotf.cpp	/^EventListener::~EventListener() {}$/;"	f	class:EventListener	signature:()
EventListener::~EventListener	servnotf.h	/^    virtual ~EventListener();$/;"	p	class:EventListener	access:public	signature:()
ExtendedUText	utext.cpp	/^struct ExtendedUText {$/;"	s	file:
ExtendedUText::extension	utext.cpp	/^    UAlignedMemory extension;$/;"	m	struct:ExtendedUText	file:	access:public
ExtendedUText::ut	utext.cpp	/^    UText          ut;$/;"	m	struct:ExtendedUText	file:	access:public
ExtensionListEntry	uloc_tag.c	/^typedef struct ExtensionListEntry {$/;"	s	file:
ExtensionListEntry	uloc_tag.c	/^} ExtensionListEntry;$/;"	t	typeref:struct:ExtensionListEntry	file:
ExtensionListEntry::key	uloc_tag.c	/^    const char                  *key;$/;"	m	struct:ExtensionListEntry	file:	access:public
ExtensionListEntry::next	uloc_tag.c	/^    struct ExtensionListEntry   *next;$/;"	m	struct:ExtensionListEntry	typeref:struct:ExtensionListEntry::ExtensionListEntry	file:	access:public
ExtensionListEntry::value	uloc_tag.c	/^    const char                  *value;$/;"	m	struct:ExtensionListEntry	file:	access:public
ExtensionSubtable	unicode/urename.h	1917;"	d
FAIL	uniset_props.cpp	1030;"	d	file:
FALSE	unicode/umachine.h	227;"	d
FCDNormalizer2	normalizer2.cpp	/^    FCDNormalizer2(const Normalizer2Impl &ni) : Normalizer2WithImpl(ni) {}$/;"	f	class:FCDNormalizer2	access:public	signature:(const Normalizer2Impl &ni)
FCDNormalizer2	normalizer2.cpp	/^class FCDNormalizer2 : public Normalizer2WithImpl {$/;"	c	file:	inherits:Normalizer2WithImpl
FCDNormalizer2	unicode/urename.h	1918;"	d
FCDNormalizer2::FCDNormalizer2	normalizer2.cpp	/^    FCDNormalizer2(const Normalizer2Impl &ni) : Normalizer2WithImpl(ni) {}$/;"	f	class:FCDNormalizer2	access:public	signature:(const Normalizer2Impl &ni)
FCDNormalizer2::hasBoundaryAfter	normalizer2.cpp	/^    virtual UBool hasBoundaryAfter(UChar32 c) const { return impl.hasFCDBoundaryAfter(c); }$/;"	f	class:FCDNormalizer2	file:	access:private	signature:(UChar32 c) const
FCDNormalizer2::hasBoundaryBefore	normalizer2.cpp	/^    virtual UBool hasBoundaryBefore(UChar32 c) const { return impl.hasFCDBoundaryBefore(c); }$/;"	f	class:FCDNormalizer2	file:	access:private	signature:(UChar32 c) const
FCDNormalizer2::isInert	normalizer2.cpp	/^    virtual UBool isInert(UChar32 c) const { return impl.isFCDInert(c); }$/;"	f	class:FCDNormalizer2	file:	access:private	signature:(UChar32 c) const
FCDNormalizer2::normalize	normalizer2.cpp	/^    normalize(const UChar *src, const UChar *limit,$/;"	f	class:FCDNormalizer2	file:	access:private	signature:(const UChar *src, const UChar *limit, ReorderingBuffer &buffer, UErrorCode &errorCode) const
FCDNormalizer2::normalizeAndAppend	normalizer2.cpp	/^    normalizeAndAppend(const UChar *src, const UChar *limit, UBool doNormalize,$/;"	f	class:FCDNormalizer2	file:	access:private	signature:(const UChar *src, const UChar *limit, UBool doNormalize, ReorderingBuffer &buffer, UErrorCode &errorCode) const
FCDNormalizer2::spanQuickCheckYes	normalizer2.cpp	/^    spanQuickCheckYes(const UChar *src, const UChar *limit, UErrorCode &errorCode) const {$/;"	f	class:FCDNormalizer2	file:	access:private	signature:(const UChar *src, const UChar *limit, UErrorCode &errorCode) const
FCDTrieSingleton	normalizer2impl.cpp	/^    FCDTrieSingleton(SimpleSingleton &s, Normalizer2Impl &ni, UErrorCode &ec) :$/;"	f	class:FCDTrieSingleton	access:public	signature:(SimpleSingleton &s, Normalizer2Impl &ni, UErrorCode &ec)
FCDTrieSingleton	normalizer2impl.cpp	/^class FCDTrieSingleton : public UTrie2Singleton {$/;"	c	file:	inherits:UTrie2Singleton
FCDTrieSingleton	unicode/urename.h	1919;"	d
FCDTrieSingleton::FCDTrieSingleton	normalizer2impl.cpp	/^    FCDTrieSingleton(SimpleSingleton &s, Normalizer2Impl &ni, UErrorCode &ec) :$/;"	f	class:FCDTrieSingleton	access:public	signature:(SimpleSingleton &s, Normalizer2Impl &ni, UErrorCode &ec)
FCDTrieSingleton::createInstance	normalizer2impl.cpp	/^    static void *createInstance(const void *context, UErrorCode &errorCode);$/;"	p	class:FCDTrieSingleton	file:	access:public	signature:(const void *context, UErrorCode &errorCode)
FCDTrieSingleton::createInstance	normalizer2impl.cpp	/^void *FCDTrieSingleton::createInstance(const void *context, UErrorCode &errorCode) {$/;"	f	class:FCDTrieSingleton	signature:(const void *context, UErrorCode &errorCode)
FCDTrieSingleton::errorCode	normalizer2impl.cpp	/^    UErrorCode &errorCode;$/;"	m	class:FCDTrieSingleton	file:	access:public
FCDTrieSingleton::getInstance	normalizer2impl.cpp	/^    UTrie2 *getInstance(UErrorCode &errorCode) {$/;"	f	class:FCDTrieSingleton	access:public	signature:(UErrorCode &errorCode)
FCDTrieSingleton::impl	normalizer2impl.cpp	/^    Normalizer2Impl &impl;$/;"	m	class:FCDTrieSingleton	file:	access:public
FCDTrieSingleton::newFCDTrie	normalizer2impl.cpp	/^    UTrie2 *newFCDTrie;$/;"	m	class:FCDTrieSingleton	file:	access:public
FCDTrieSingleton::rangeHandler	normalizer2impl.cpp	/^    UBool rangeHandler(UChar32 start, UChar32 end, uint32_t value) {$/;"	f	class:FCDTrieSingleton	access:public	signature:(UChar32 start, UChar32 end, uint32_t value)
FF	uprops.h	/^    FF      =0x000c,$/;"	e	enum:__anon90
FIGURESP	uprops.h	/^    FIGURESP=0x2007,$/;"	e	enum:__anon90
FIRSTALLOC	ubidi.c	1166;"	d	file:
FIRSTALLOC	ubidi.c	1197;"	d	file:
FIX_LANGUAGE_ID_TAG	locmap.c	869;"	d	file:
FIX_LOCALE_ID_TAG_SEPARATOR	locmap.c	860;"	d	file:
FLAG	uprops.h	246;"	d
FOLD_CASE	ustr_imp.h	/^    FOLD_CASE$/;"	e	enum:__anon73
FROM_BASE64_IMAP	ucnv_u7.c	843;"	d	file:
FROM_U_USE_FALLBACK	ucnv_cnv.h	270;"	d
FULL_STOP	uidna.cpp	44;"	d	file:
FWD	unisetspan.h	/^        FWD             = 0x20,$/;"	e	enum:UnicodeSetStringSpan::__anon19
FWD_UTF16_CONTAINED	unisetspan.h	/^        FWD_UTF16_CONTAINED     = FWD  | UTF16 |     CONTAINED,$/;"	e	enum:UnicodeSetStringSpan::__anon19
FWD_UTF16_NOT_CONTAINED	unisetspan.h	/^        FWD_UTF16_NOT_CONTAINED = FWD  | UTF16 | NOT_CONTAINED,$/;"	e	enum:UnicodeSetStringSpan::__anon19
FWD_UTF8_CONTAINED	unisetspan.h	/^        FWD_UTF8_CONTAINED      = FWD  | UTF8  |     CONTAINED,$/;"	e	enum:UnicodeSetStringSpan::__anon19
FWD_UTF8_NOT_CONTAINED	unisetspan.h	/^        FWD_UTF8_NOT_CONTAINED  = FWD  | UTF8  | NOT_CONTAINED,$/;"	e	enum:UnicodeSetStringSpan::__anon19
FeatureListTable	unicode/urename.h	1920;"	d
FieldPosition	unicode/urename.h	1921;"	d
FieldPositionHandler	unicode/urename.h	1922;"	d
FieldPositionIterator	unicode/urename.h	1923;"	d
FieldPositionIteratorHandler	unicode/urename.h	1924;"	d
FieldPositionOnlyHandler	unicode/urename.h	1925;"	d
FileTimeConversion	putil.c	/^} FileTimeConversion;   \/* This is like a ULARGE_INTEGER *\/$/;"	t	typeref:union:__anon41	file:
Filter	unicode/uniset.h	/^    typedef UBool (*Filter)(UChar32 codePoint, void* context);$/;"	t	class:UnicodeSet	access:private
FilteredNormalizer2	unicode/normalizer2.h	/^    FilteredNormalizer2(const Normalizer2 &n2, const UnicodeSet &filterSet) :$/;"	f	class:FilteredNormalizer2	access:public	signature:(const Normalizer2 &n2, const UnicodeSet &filterSet)
FilteredNormalizer2	unicode/normalizer2.h	/^class U_COMMON_API FilteredNormalizer2 : public Normalizer2 {$/;"	c	inherits:Normalizer2
FilteredNormalizer2	unicode/urename.h	1926;"	d
FilteredNormalizer2::FilteredNormalizer2	unicode/normalizer2.h	/^    FilteredNormalizer2(const Normalizer2 &n2, const UnicodeSet &filterSet) :$/;"	f	class:FilteredNormalizer2	access:public	signature:(const Normalizer2 &n2, const UnicodeSet &filterSet)
FilteredNormalizer2::append	filterednormalizer2.cpp	/^FilteredNormalizer2::append(UnicodeString &first,$/;"	f	class:FilteredNormalizer2	signature:(UnicodeString &first, const UnicodeString &second, UErrorCode &errorCode) const
FilteredNormalizer2::append	unicode/normalizer2.h	/^    append(UnicodeString &first,$/;"	p	class:FilteredNormalizer2	access:public	signature:(UnicodeString &first, const UnicodeString &second, UErrorCode &errorCode) const
FilteredNormalizer2::getDecomposition	filterednormalizer2.cpp	/^FilteredNormalizer2::getDecomposition(UChar32 c, UnicodeString &decomposition) const {$/;"	f	class:FilteredNormalizer2	signature:(UChar32 c, UnicodeString &decomposition) const
FilteredNormalizer2::getDecomposition	unicode/normalizer2.h	/^    getDecomposition(UChar32 c, UnicodeString &decomposition) const;$/;"	p	class:FilteredNormalizer2	access:public	signature:(UChar32 c, UnicodeString &decomposition) const
FilteredNormalizer2::hasBoundaryAfter	filterednormalizer2.cpp	/^FilteredNormalizer2::hasBoundaryAfter(UChar32 c) const {$/;"	f	class:FilteredNormalizer2	signature:(UChar32 c) const
FilteredNormalizer2::hasBoundaryAfter	unicode/normalizer2.h	/^    virtual UBool hasBoundaryAfter(UChar32 c) const;$/;"	p	class:FilteredNormalizer2	access:public	signature:(UChar32 c) const
FilteredNormalizer2::hasBoundaryBefore	filterednormalizer2.cpp	/^FilteredNormalizer2::hasBoundaryBefore(UChar32 c) const {$/;"	f	class:FilteredNormalizer2	signature:(UChar32 c) const
FilteredNormalizer2::hasBoundaryBefore	unicode/normalizer2.h	/^    virtual UBool hasBoundaryBefore(UChar32 c) const;$/;"	p	class:FilteredNormalizer2	access:public	signature:(UChar32 c) const
FilteredNormalizer2::isInert	filterednormalizer2.cpp	/^FilteredNormalizer2::isInert(UChar32 c) const {$/;"	f	class:FilteredNormalizer2	signature:(UChar32 c) const
FilteredNormalizer2::isInert	unicode/normalizer2.h	/^    virtual UBool isInert(UChar32 c) const;$/;"	p	class:FilteredNormalizer2	access:public	signature:(UChar32 c) const
FilteredNormalizer2::isNormalized	filterednormalizer2.cpp	/^FilteredNormalizer2::isNormalized(const UnicodeString &s, UErrorCode &errorCode) const {$/;"	f	class:FilteredNormalizer2	signature:(const UnicodeString &s, UErrorCode &errorCode) const
FilteredNormalizer2::isNormalized	unicode/normalizer2.h	/^    isNormalized(const UnicodeString &s, UErrorCode &errorCode) const;$/;"	p	class:FilteredNormalizer2	access:public	signature:(const UnicodeString &s, UErrorCode &errorCode) const
FilteredNormalizer2::norm2	unicode/normalizer2.h	/^    const Normalizer2 &norm2;$/;"	m	class:FilteredNormalizer2	access:private
FilteredNormalizer2::normalize	filterednormalizer2.cpp	/^FilteredNormalizer2::normalize(const UnicodeString &src,$/;"	f	class:FilteredNormalizer2	signature:(const UnicodeString &src, UnicodeString &dest, UErrorCode &errorCode) const
FilteredNormalizer2::normalize	filterednormalizer2.cpp	/^FilteredNormalizer2::normalize(const UnicodeString &src,$/;"	f	class:FilteredNormalizer2	signature:(const UnicodeString &src, UnicodeString &dest, USetSpanCondition spanCondition, UErrorCode &errorCode) const
FilteredNormalizer2::normalize	unicode/normalizer2.h	/^    normalize(const UnicodeString &src,$/;"	p	class:FilteredNormalizer2	access:private	signature:(const UnicodeString &src, UnicodeString &dest, USetSpanCondition spanCondition, UErrorCode &errorCode) const
FilteredNormalizer2::normalize	unicode/normalizer2.h	/^    normalize(const UnicodeString &src,$/;"	p	class:FilteredNormalizer2	access:public	signature:(const UnicodeString &src, UnicodeString &dest, UErrorCode &errorCode) const
FilteredNormalizer2::normalizeSecondAndAppend	filterednormalizer2.cpp	/^FilteredNormalizer2::normalizeSecondAndAppend(UnicodeString &first,$/;"	f	class:FilteredNormalizer2	signature:(UnicodeString &first, const UnicodeString &second, UBool doNormalize, UErrorCode &errorCode) const
FilteredNormalizer2::normalizeSecondAndAppend	filterednormalizer2.cpp	/^FilteredNormalizer2::normalizeSecondAndAppend(UnicodeString &first,$/;"	f	class:FilteredNormalizer2	signature:(UnicodeString &first, const UnicodeString &second, UErrorCode &errorCode) const
FilteredNormalizer2::normalizeSecondAndAppend	unicode/normalizer2.h	/^    normalizeSecondAndAppend(UnicodeString &first,$/;"	p	class:FilteredNormalizer2	access:private	signature:(UnicodeString &first, const UnicodeString &second, UBool doNormalize, UErrorCode &errorCode) const
FilteredNormalizer2::normalizeSecondAndAppend	unicode/normalizer2.h	/^    normalizeSecondAndAppend(UnicodeString &first,$/;"	p	class:FilteredNormalizer2	access:public	signature:(UnicodeString &first, const UnicodeString &second, UErrorCode &errorCode) const
FilteredNormalizer2::quickCheck	filterednormalizer2.cpp	/^FilteredNormalizer2::quickCheck(const UnicodeString &s, UErrorCode &errorCode) const {$/;"	f	class:FilteredNormalizer2	signature:(const UnicodeString &s, UErrorCode &errorCode) const
FilteredNormalizer2::quickCheck	unicode/normalizer2.h	/^    quickCheck(const UnicodeString &s, UErrorCode &errorCode) const;$/;"	p	class:FilteredNormalizer2	access:public	signature:(const UnicodeString &s, UErrorCode &errorCode) const
FilteredNormalizer2::set	unicode/normalizer2.h	/^    const UnicodeSet &set;$/;"	m	class:FilteredNormalizer2	access:private
FilteredNormalizer2::spanQuickCheckYes	filterednormalizer2.cpp	/^FilteredNormalizer2::spanQuickCheckYes(const UnicodeString &s, UErrorCode &errorCode) const {$/;"	f	class:FilteredNormalizer2	signature:(const UnicodeString &s, UErrorCode &errorCode) const
FilteredNormalizer2::spanQuickCheckYes	unicode/normalizer2.h	/^    spanQuickCheckYes(const UnicodeString &s, UErrorCode &errorCode) const;$/;"	p	class:FilteredNormalizer2	access:public	signature:(const UnicodeString &s, UErrorCode &errorCode) const
FindLMBCSLocale	ucnv_lmb.c	/^FindLMBCSLocale(const char *LocaleID)$/;"	f	file:	signature:(const char *LocaleID)
FindLMBCSUniRange	ucnv_lmb.c	/^FindLMBCSUniRange(UChar uniChar)$/;"	f	file:	signature:(UChar uniChar)
FindName	unames.c	/^} FindName;$/;"	t	typeref:struct:__anon95	file:
Flags	ubidiimp.h	/^typedef uint32_t Flags;$/;"	t
Flush	bytestream.cpp	/^void ByteSink::Flush() {}$/;"	f	class:ByteSink	signature:()
Flush	unicode/bytestream.h	/^  virtual void Flush();$/;"	p	class:ByteSink	access:public	signature:()
FontRuns	unicode/urename.h	1927;"	d
Format	unicode/urename.h	1928;"	d
Format1AnchorTable	unicode/urename.h	1929;"	d
Format2AnchorTable	unicode/urename.h	1930;"	d
Format3AnchorTable	unicode/urename.h	1931;"	d
FormatNameEnumeration	unicode/urename.h	1932;"	d
FormatParser	unicode/urename.h	1933;"	d
Formattable	unicode/urename.h	1934;"	d
ForwardCharacterIterator	chariter.cpp	/^ForwardCharacterIterator::ForwardCharacterIterator()$/;"	f	class:ForwardCharacterIterator	signature:()
ForwardCharacterIterator	chariter.cpp	/^ForwardCharacterIterator::ForwardCharacterIterator(const ForwardCharacterIterator &other)$/;"	f	class:ForwardCharacterIterator	signature:(const ForwardCharacterIterator &other)
ForwardCharacterIterator	unicode/chariter.h	/^    ForwardCharacterIterator();$/;"	p	class:ForwardCharacterIterator	access:protected	signature:()
ForwardCharacterIterator	unicode/chariter.h	/^    ForwardCharacterIterator(const ForwardCharacterIterator &other);$/;"	p	class:ForwardCharacterIterator	access:protected	signature:(const ForwardCharacterIterator &other)
ForwardCharacterIterator	unicode/chariter.h	/^class U_COMMON_API ForwardCharacterIterator : public UObject {$/;"	c	inherits:UObject
ForwardCharacterIterator	unicode/urename.h	1935;"	d
ForwardCharacterIterator::DONE	unicode/chariter.h	/^    enum { DONE = 0xffff };$/;"	e	enum:ForwardCharacterIterator::__anon97
ForwardCharacterIterator::ForwardCharacterIterator	chariter.cpp	/^ForwardCharacterIterator::ForwardCharacterIterator()$/;"	f	class:ForwardCharacterIterator	signature:()
ForwardCharacterIterator::ForwardCharacterIterator	chariter.cpp	/^ForwardCharacterIterator::ForwardCharacterIterator(const ForwardCharacterIterator &other)$/;"	f	class:ForwardCharacterIterator	signature:(const ForwardCharacterIterator &other)
ForwardCharacterIterator::ForwardCharacterIterator	unicode/chariter.h	/^    ForwardCharacterIterator();$/;"	p	class:ForwardCharacterIterator	access:protected	signature:()
ForwardCharacterIterator::ForwardCharacterIterator	unicode/chariter.h	/^    ForwardCharacterIterator(const ForwardCharacterIterator &other);$/;"	p	class:ForwardCharacterIterator	access:protected	signature:(const ForwardCharacterIterator &other)
ForwardCharacterIterator::getDynamicClassID	unicode/chariter.h	/^    virtual UClassID getDynamicClassID(void) const = 0;$/;"	p	class:ForwardCharacterIterator	access:public	signature:(void) const
ForwardCharacterIterator::hasNext	unicode/chariter.h	/^    virtual UBool        hasNext() = 0;$/;"	p	class:ForwardCharacterIterator	access:public	signature:()
ForwardCharacterIterator::hashCode	unicode/chariter.h	/^    virtual int32_t hashCode(void) const = 0;$/;"	p	class:ForwardCharacterIterator	access:public	signature:(void) const
ForwardCharacterIterator::next32PostInc	unicode/chariter.h	/^    virtual UChar32       next32PostInc(void) = 0;$/;"	p	class:ForwardCharacterIterator	access:public	signature:(void)
ForwardCharacterIterator::nextPostInc	unicode/chariter.h	/^    virtual UChar         nextPostInc(void) = 0;$/;"	p	class:ForwardCharacterIterator	access:public	signature:(void)
ForwardCharacterIterator::operator !=	unicode/chariter.h	/^    inline UBool operator!=(const ForwardCharacterIterator& that) const;$/;"	p	class:ForwardCharacterIterator	access:public	signature:(const ForwardCharacterIterator& that) const
ForwardCharacterIterator::operator !=	unicode/chariter.h	/^ForwardCharacterIterator::operator!=(const ForwardCharacterIterator& that) const {$/;"	f	class:ForwardCharacterIterator	signature:(const ForwardCharacterIterator& that) const
ForwardCharacterIterator::operator =	unicode/chariter.h	/^    ForwardCharacterIterator &operator=(const ForwardCharacterIterator&) { return *this; }$/;"	f	class:ForwardCharacterIterator	access:protected	signature:(const ForwardCharacterIterator&)
ForwardCharacterIterator::operator ==	unicode/chariter.h	/^    virtual UBool operator==(const ForwardCharacterIterator& that) const = 0;$/;"	p	class:ForwardCharacterIterator	access:public	signature:(const ForwardCharacterIterator& that) const
ForwardCharacterIterator::~ForwardCharacterIterator	chariter.cpp	/^ForwardCharacterIterator::~ForwardCharacterIterator() {}$/;"	f	class:ForwardCharacterIterator	signature:()
ForwardCharacterIterator::~ForwardCharacterIterator	unicode/chariter.h	/^    virtual ~ForwardCharacterIterator();$/;"	p	class:ForwardCharacterIterator	access:public	signature:()
ForwardUTrie2StringIterator	unicode/urename.h	1936;"	d
ForwardUTrie2StringIterator	utrie2.h	/^    ForwardUTrie2StringIterator(const UTrie2 *t, const UChar *p, const UChar *l) :$/;"	f	class:ForwardUTrie2StringIterator	access:public	signature:(const UTrie2 *t, const UChar *p, const UChar *l)
ForwardUTrie2StringIterator	utrie2.h	/^class ForwardUTrie2StringIterator : public UTrie2StringIterator {$/;"	c	inherits:UTrie2StringIterator
ForwardUTrie2StringIterator::ForwardUTrie2StringIterator	utrie2.h	/^    ForwardUTrie2StringIterator(const UTrie2 *t, const UChar *p, const UChar *l) :$/;"	f	class:ForwardUTrie2StringIterator	access:public	signature:(const UTrie2 *t, const UChar *p, const UChar *l)
ForwardUTrie2StringIterator::limit	utrie2.h	/^    const UChar *limit;$/;"	m	class:ForwardUTrie2StringIterator	access:public
ForwardUTrie2StringIterator::next16	utrie2.cpp	/^uint16_t ForwardUTrie2StringIterator::next16() {$/;"	f	class:ForwardUTrie2StringIterator	signature:()
ForwardUTrie2StringIterator::next16	utrie2.h	/^    uint16_t next16();$/;"	p	class:ForwardUTrie2StringIterator	access:public	signature:()
FractionalPartSubstitution	unicode/urename.h	1937;"	d
FreeArray	unicode/uobject.h	/^    static void   FreeArray(void * array );$/;"	p	class:UMemory	access:public	signature:(void * array )
FunctionReplacer	unicode/urename.h	1938;"	d
GB2312	ucnv2022.c	/^        GB2312  =6,$/;"	e	enum:__anon65	file:
GB2312_1	ucnv2022.c	/^        GB2312_1=1,$/;"	e	enum:__anon65	file:
GB_2312_80_STR	ucnv2022.c	/^static const char GB_2312_80_STR[] = "\\x1B\\x24\\x29\\x41";$/;"	v	file:
GDEFMarkFilter	unicode/urename.h	1939;"	d
GET_ACTION	ubidi.c	910;"	d	file:
GET_ACTIONPROPS	ubidi.c	815;"	d	file:
GET_ASCII_TYPE	ucnv_io.c	372;"	d	file:
GET_BIDI_PROPS	uprops.cpp	42;"	d	file:
GET_CASE_PROPS	ucase.c	1203;"	d	file:
GET_CATEGORY	uprops.h	61;"	d
GET_CHAR_TYPE	ucnv_io.c	389;"	d	file:
GET_CHAR_TYPE	ucnv_io.c	391;"	d	file:
GET_EBCDIC_TYPE	ucnv_io.c	386;"	d	file:
GET_EXCEPTIONS	ucase.c	83;"	d	file:
GET_GROUPS	unames.c	92;"	d	file:
GET_GROUP_OFFSET	unames.c	68;"	d	file:
GET_INDEX	ubidiimp.h	151;"	d
GET_LR_FROM_LEVEL	ubidiimp.h	104;"	d
GET_MAPPING	ucnvisci.c	1136;"	d	file:
GET_NORMALIZED_STRING	ucnv_io.c	198;"	d	file:
GET_NUMERIC_TYPE_VALUE	uprops.h	64;"	d
GET_ODD_BIT	ubidiimp.h	152;"	d
GET_PARALEVEL	ubidiimp.h	119;"	d
GET_PROPS	uchar.c	42;"	d	file:
GET_SLOT_VALUE	ucase.c	119;"	d	file:
GET_STATE	ubidi.c	909;"	d	file:
GET_STATEPROPS	ubidi.c	814;"	d	file:
GET_STRING	ucnv_io.c	197;"	d	file:
GJR	ucnvisci.c	/^    GJR = 0x4A,$/;"	e	enum:__anon14	file:
GJR_MASK	ucnvisci.c	/^    GJR_MASK =0x20,$/;"	e	enum:__anon15	file:
GR94_END	ucnv2022.c	/^    GR94_END=0xfe,$/;"	e	enum:__anon64	file:
GR94_START	ucnv2022.c	/^    GR94_START=0xa1,$/;"	e	enum:__anon64	file:
GR96_END	ucnv2022.c	/^    GR96_END=0xff$/;"	e	enum:__anon64	file:
GR96_START	ucnv2022.c	/^    GR96_START=0xa0,$/;"	e	enum:__anon64	file:
GRANDFATHERED	uloc_tag.c	/^static const char* GRANDFATHERED[] = {$/;"	v	file:
GROUP_LENGTH	unames.c	/^    GROUP_LENGTH$/;"	e	enum:__anon92	file:
GROUP_MASK	unames.c	38;"	d	file:
GROUP_MSB	unames.c	/^    GROUP_MSB,$/;"	e	enum:__anon92	file:
GROUP_OFFSET_HIGH	unames.c	/^    GROUP_OFFSET_HIGH,$/;"	e	enum:__anon92	file:
GROUP_OFFSET_LOW	unames.c	/^    GROUP_OFFSET_LOW,$/;"	e	enum:__anon92	file:
GROUP_SHIFT	unames.c	36;"	d	file:
GROW_EXTRA	uniset.cpp	56;"	d	file:
GUJARATI	ucnvisci.c	/^    GUJARATI,$/;"	e	enum:__anon13	file:
GURMUKHI	ucnvisci.c	/^    GURMUKHI,$/;"	e	enum:__anon13	file:
GXLayoutEngine	unicode/urename.h	1940;"	d
GetAppendBuffer	bytestream.cpp	/^char* ByteSink::GetAppendBuffer(int32_t min_capacity,$/;"	f	class:ByteSink	signature:(int32_t min_capacity, int32_t , char* scratch, int32_t scratch_capacity, int32_t* result_capacity)
GetAppendBuffer	bytestream.cpp	/^char* CheckedArrayByteSink::GetAppendBuffer(int32_t min_capacity,$/;"	f	class:CheckedArrayByteSink	signature:(int32_t min_capacity, int32_t , char* scratch, int32_t scratch_capacity, int32_t* result_capacity)
GetAppendBuffer	unicode/bytestream.h	/^  virtual char* GetAppendBuffer(int32_t min_capacity,$/;"	p	class:ByteSink	access:public	signature:(int32_t min_capacity, int32_t desired_capacity_hint, char* scratch, int32_t scratch_capacity, int32_t* result_capacity)
GetAppendBuffer	unicode/bytestream.h	/^  virtual char* GetAppendBuffer(int32_t min_capacity,$/;"	p	class:CheckedArrayByteSink	access:public	signature:(int32_t min_capacity, int32_t desired_capacity_hint, char* scratch, int32_t scratch_capacity, int32_t* result_capacity)
GetUniFromLMBCSUni	ucnv_lmb.c	/^GetUniFromLMBCSUni(char const ** ppLMBCSin)  \/* Called with LMBCS-style Unicode byte stream *\/$/;"	f	file:	signature:(char const ** ppLMBCSin)
GlyphDefinitionTableHeader	unicode/urename.h	1941;"	d
GlyphIterator	unicode/urename.h	1942;"	d
GlyphLookupTableHeader	unicode/urename.h	1943;"	d
GlyphPositionAdjustments	unicode/urename.h	1944;"	d
GlyphPositioningLookupProcessor	unicode/urename.h	1945;"	d
GlyphPositioningTableHeader	unicode/urename.h	1946;"	d
GlyphSubstitutionLookupProcessor	unicode/urename.h	1947;"	d
GlyphSubstitutionTableHeader	unicode/urename.h	1948;"	d
GoodSuffixTable	unicode/urename.h	1949;"	d
Grego	unicode/urename.h	1950;"	d
GregorianCalendar	unicode/urename.h	1951;"	d
GrowArray	unicode/uobject.h	/^    static void * GrowArray(void * array, int newSize );$/;"	p	class:UMemory	access:public	signature:(void * array, int newSize )
GrpType	ucnv_lmb.c	/^   const ulmbcs_byte_t  GrpType;$/;"	m	struct:_UniLMBCSGrpMap	file:	access:public
HAIRSP	uprops.h	/^    HAIRSP  =0x200a,$/;"	e	enum:__anon90
HALANT	ucnvisci.c	32;"	d	file:
HALF_BASE	ucnv_u32.c	29;"	d	file:
HALF_BASE	ucnv_u8.c	50;"	d	file:
HALF_MASK	ucnv_u32.c	30;"	d	file:
HALF_MASK	ucnv_u8.c	51;"	d	file:
HALF_SHIFT	ucnv_u32.c	28;"	d	file:
HALF_SHIFT	ucnv_u8.c	49;"	d	file:
HAMZA06_CHAR	ushape.c	63;"	d	file:
HAMZAFE_CHAR	ushape.c	62;"	d	file:
HANGUL_BASE	normalizer2impl.h	/^        HANGUL_BASE=0xac00,$/;"	e	enum:Hangul::__anon45
HANGUL_COUNT	normalizer2impl.h	/^        HANGUL_COUNT=JAMO_L_COUNT*JAMO_V_COUNT*JAMO_T_COUNT,$/;"	e	enum:Hangul::__anon45
HANGUL_LIMIT	normalizer2impl.h	/^        HANGUL_LIMIT=HANGUL_BASE+HANGUL_COUNT$/;"	e	enum:Hangul::__anon45
HASH_DELETED	uhash.c	112;"	d	file:
HASH_DELETE_KEY_VALUE	uhash.c	119;"	d	file:
HASH_EMPTY	uhash.c	113;"	d	file:
HASH_H	hash.h	12;"	d
HAS_SLOT	ucase.c	107;"	d	file:
HAVE_INTTYPES_H	icucfg.h	41;"	d
HAVE_LIBM	icucfg.h	53;"	d
HAVE_LIBPTHREAD	icucfg.h	56;"	d
HAVE_WCHAR_H	icucfg.h	35;"	d
HECTONANOSECOND_PER_MILLISECOND	putil.c	268;"	d	file:
HINT_KEY_INTEGER	uvector.cpp	25;"	d	file:
HINT_KEY_POINTER	uhash.c	132;"	d	file:
HINT_KEY_POINTER	uvector.cpp	24;"	d	file:
HINT_VALUE_POINTER	uhash.c	133;"	d	file:
HWKANA	ucnv2022.c	/^        HWKANA$/;"	e	enum:__anon67	file:
HWKANA_7BIT	ucnv2022.c	/^        HWKANA_7BIT=8,    \/* Halfwidth Katakana 7 bit *\/$/;"	e	enum:__anon65	file:
HWKANA_END	ucnv2022.c	/^    HWKANA_END=0xff9f$/;"	e	enum:__anon63	file:
HWKANA_START	ucnv2022.c	/^    HWKANA_START=0xff61,$/;"	e	enum:__anon63	file:
HYPHEN	uidna.cpp	43;"	d	file:
HYPHEN	uniset.cpp	32;"	d	file:
HYPHEN	uniset_props.cpp	60;"	d	file:
HYPHEN_RIGHT_BRACE	uniset_props.cpp	/^static const UChar HYPHEN_RIGHT_BRACE[] = {HYPHEN,SET_CLOSE,0}; \/*-]*\/$/;"	v	file:
H_TAB	ucnv2022.c	83;"	d	file:
HanOpenTypeLayoutEngine	unicode/urename.h	1952;"	d
Hangul	normalizer2impl.h	/^    Hangul();  \/\/ no instantiation$/;"	p	class:Hangul	access:private	signature:()
Hangul	normalizer2impl.h	/^class Hangul {$/;"	c
Hangul::HANGUL_BASE	normalizer2impl.h	/^        HANGUL_BASE=0xac00,$/;"	e	enum:Hangul::__anon45
Hangul::HANGUL_COUNT	normalizer2impl.h	/^        HANGUL_COUNT=JAMO_L_COUNT*JAMO_V_COUNT*JAMO_T_COUNT,$/;"	e	enum:Hangul::__anon45
Hangul::HANGUL_LIMIT	normalizer2impl.h	/^        HANGUL_LIMIT=HANGUL_BASE+HANGUL_COUNT$/;"	e	enum:Hangul::__anon45
Hangul::Hangul	normalizer2impl.h	/^    Hangul();  \/\/ no instantiation$/;"	p	class:Hangul	access:private	signature:()
Hangul::JAMO_L_BASE	normalizer2impl.h	/^        JAMO_L_BASE=0x1100,     \/* "lead" jamo *\/$/;"	e	enum:Hangul::__anon45
Hangul::JAMO_L_COUNT	normalizer2impl.h	/^        JAMO_L_COUNT=19,$/;"	e	enum:Hangul::__anon45
Hangul::JAMO_T_BASE	normalizer2impl.h	/^        JAMO_T_BASE=0x11a7,     \/* "trail" jamo *\/$/;"	e	enum:Hangul::__anon45
Hangul::JAMO_T_COUNT	normalizer2impl.h	/^        JAMO_T_COUNT=28,$/;"	e	enum:Hangul::__anon45
Hangul::JAMO_VT_COUNT	normalizer2impl.h	/^        JAMO_VT_COUNT=JAMO_V_COUNT*JAMO_T_COUNT,$/;"	e	enum:Hangul::__anon45
Hangul::JAMO_V_BASE	normalizer2impl.h	/^        JAMO_V_BASE=0x1161,     \/* "vowel" jamo *\/$/;"	e	enum:Hangul::__anon45
Hangul::JAMO_V_COUNT	normalizer2impl.h	/^        JAMO_V_COUNT=21,$/;"	e	enum:Hangul::__anon45
Hangul::decompose	normalizer2impl.h	/^    static inline int32_t decompose(UChar32 c, UChar buffer[3]) {$/;"	f	class:Hangul	access:public	signature:(UChar32 c, UChar buffer[3])
Hangul::isHangul	normalizer2impl.h	/^    static inline UBool isHangul(UChar32 c) {$/;"	f	class:Hangul	access:public	signature:(UChar32 c)
Hangul::isHangulWithoutJamoT	normalizer2impl.h	/^    isHangulWithoutJamoT(UChar c) {$/;"	f	class:Hangul	access:public	signature:(UChar c)
Hangul::isJamoL	normalizer2impl.h	/^    static inline UBool isJamoL(UChar32 c) {$/;"	f	class:Hangul	access:public	signature:(UChar32 c)
Hangul::isJamoV	normalizer2impl.h	/^    static inline UBool isJamoV(UChar32 c) {$/;"	f	class:Hangul	access:public	signature:(UChar32 c)
HangulOpenTypeLayoutEngine	unicode/urename.h	1953;"	d
Hashtable	hash.h	/^    Hashtable();$/;"	p	class:Hashtable	access:public	signature:()
Hashtable	hash.h	/^    Hashtable(UBool ignoreKeyCase, UErrorCode& status);$/;"	p	class:Hashtable	access:public	signature:(UBool ignoreKeyCase, UErrorCode& status)
Hashtable	hash.h	/^    Hashtable(UErrorCode& status);$/;"	p	class:Hashtable	access:public	signature:(UErrorCode& status)
Hashtable	hash.h	/^    Hashtable(UKeyComparator *keyComp, UValueComparator *valueComp, UErrorCode& status);$/;"	p	class:Hashtable	access:public	signature:(UKeyComparator *keyComp, UValueComparator *valueComp, UErrorCode& status)
Hashtable	hash.h	/^    Hashtable(const Hashtable &other); \/\/ forbid copying of this class$/;"	p	class:Hashtable	access:private	signature:(const Hashtable &other)
Hashtable	hash.h	/^class U_COMMON_API Hashtable : public UMemory {$/;"	c	inherits:UMemory
Hashtable	hash.h	/^inline Hashtable::Hashtable()$/;"	f	class:Hashtable	signature:()
Hashtable	hash.h	/^inline Hashtable::Hashtable(UBool ignoreKeyCase, UErrorCode& status)$/;"	f	class:Hashtable	signature:(UBool ignoreKeyCase, UErrorCode& status)
Hashtable	hash.h	/^inline Hashtable::Hashtable(UErrorCode& status)$/;"	f	class:Hashtable	signature:(UErrorCode& status)
Hashtable	hash.h	/^inline Hashtable::Hashtable(UKeyComparator *keyComp, UValueComparator *valueComp, $/;"	f	class:Hashtable	signature:(UKeyComparator *keyComp, UValueComparator *valueComp, UErrorCode& status)
Hashtable	unicode/caniter.h	/^class Hashtable;$/;"	x
Hashtable::Hashtable	hash.h	/^    Hashtable();$/;"	p	class:Hashtable	access:public	signature:()
Hashtable::Hashtable	hash.h	/^    Hashtable(UBool ignoreKeyCase, UErrorCode& status);$/;"	p	class:Hashtable	access:public	signature:(UBool ignoreKeyCase, UErrorCode& status)
Hashtable::Hashtable	hash.h	/^    Hashtable(UErrorCode& status);$/;"	p	class:Hashtable	access:public	signature:(UErrorCode& status)
Hashtable::Hashtable	hash.h	/^    Hashtable(UKeyComparator *keyComp, UValueComparator *valueComp, UErrorCode& status);$/;"	p	class:Hashtable	access:public	signature:(UKeyComparator *keyComp, UValueComparator *valueComp, UErrorCode& status)
Hashtable::Hashtable	hash.h	/^    Hashtable(const Hashtable &other); \/\/ forbid copying of this class$/;"	p	class:Hashtable	access:private	signature:(const Hashtable &other)
Hashtable::Hashtable	hash.h	/^inline Hashtable::Hashtable()$/;"	f	class:Hashtable	signature:()
Hashtable::Hashtable	hash.h	/^inline Hashtable::Hashtable(UBool ignoreKeyCase, UErrorCode& status)$/;"	f	class:Hashtable	signature:(UBool ignoreKeyCase, UErrorCode& status)
Hashtable::Hashtable	hash.h	/^inline Hashtable::Hashtable(UErrorCode& status)$/;"	f	class:Hashtable	signature:(UErrorCode& status)
Hashtable::Hashtable	hash.h	/^inline Hashtable::Hashtable(UKeyComparator *keyComp, UValueComparator *valueComp, $/;"	f	class:Hashtable	signature:(UKeyComparator *keyComp, UValueComparator *valueComp, UErrorCode& status)
Hashtable::count	hash.h	/^    int32_t count() const;$/;"	p	class:Hashtable	access:public	signature:() const
Hashtable::count	hash.h	/^inline int32_t Hashtable::count() const {$/;"	f	class:Hashtable	signature:() const
Hashtable::equals	hash.h	/^    UBool equals(const Hashtable& that) const;$/;"	p	class:Hashtable	access:public	signature:(const Hashtable& that) const
Hashtable::equals	hash.h	/^inline UBool Hashtable::equals(const Hashtable& that)const{$/;"	f	class:Hashtable	signature:(const Hashtable& that) const
Hashtable::find	hash.h	/^    const UHashElement* find(const UnicodeString& key) const;$/;"	p	class:Hashtable	access:public	signature:(const UnicodeString& key) const
Hashtable::find	hash.h	/^inline const UHashElement* Hashtable::find(const UnicodeString& key) const {$/;"	f	class:Hashtable	signature:(const UnicodeString& key) const
Hashtable::get	hash.h	/^    void* get(const UnicodeString& key) const;$/;"	p	class:Hashtable	access:public	signature:(const UnicodeString& key) const
Hashtable::get	hash.h	/^inline void* Hashtable::get(const UnicodeString& key) const {$/;"	f	class:Hashtable	signature:(const UnicodeString& key) const
Hashtable::geti	hash.h	/^    int32_t geti(const UnicodeString& key) const;$/;"	p	class:Hashtable	access:public	signature:(const UnicodeString& key) const
Hashtable::geti	hash.h	/^inline int32_t Hashtable::geti(const UnicodeString& key) const {$/;"	f	class:Hashtable	signature:(const UnicodeString& key) const
Hashtable::hash	hash.h	/^    UHashtable* hash;$/;"	m	class:Hashtable	access:private
Hashtable::hashObj	hash.h	/^    UHashtable hashObj;$/;"	m	class:Hashtable	access:private
Hashtable::init	hash.h	/^    inline void init(UHashFunction *keyHash, UKeyComparator *keyComp, UValueComparator *valueComp, UErrorCode& status);$/;"	p	class:Hashtable	access:private	signature:(UHashFunction *keyHash, UKeyComparator *keyComp, UValueComparator *valueComp, UErrorCode& status)
Hashtable::init	hash.h	/^inline void Hashtable::init(UHashFunction *keyHash, UKeyComparator *keyComp, $/;"	f	class:Hashtable	signature:(UHashFunction *keyHash, UKeyComparator *keyComp, UValueComparator *valueComp, UErrorCode& status)
Hashtable::nextElement	hash.h	/^    const UHashElement* nextElement(int32_t& pos) const;$/;"	p	class:Hashtable	access:public	signature:(int32_t& pos) const
Hashtable::nextElement	hash.h	/^inline const UHashElement* Hashtable::nextElement(int32_t& pos) const {$/;"	f	class:Hashtable	signature:(int32_t& pos) const
Hashtable::operator =	hash.h	/^    Hashtable &operator=(const Hashtable &other); \/\/ forbid copying of this class$/;"	p	class:Hashtable	access:private	signature:(const Hashtable &other)
Hashtable::put	hash.h	/^    void* put(const UnicodeString& key, void* value, UErrorCode& status);$/;"	p	class:Hashtable	access:public	signature:(const UnicodeString& key, void* value, UErrorCode& status)
Hashtable::put	hash.h	/^inline void* Hashtable::put(const UnicodeString& key, void* value, UErrorCode& status) {$/;"	f	class:Hashtable	signature:(const UnicodeString& key, void* value, UErrorCode& status)
Hashtable::puti	hash.h	/^    int32_t puti(const UnicodeString& key, int32_t value, UErrorCode& status);$/;"	p	class:Hashtable	access:public	signature:(const UnicodeString& key, int32_t value, UErrorCode& status)
Hashtable::puti	hash.h	/^inline int32_t Hashtable::puti(const UnicodeString& key, int32_t value, UErrorCode& status) {$/;"	f	class:Hashtable	signature:(const UnicodeString& key, int32_t value, UErrorCode& status)
Hashtable::remove	hash.h	/^    void* remove(const UnicodeString& key);$/;"	p	class:Hashtable	access:public	signature:(const UnicodeString& key)
Hashtable::remove	hash.h	/^inline void* Hashtable::remove(const UnicodeString& key) {$/;"	f	class:Hashtable	signature:(const UnicodeString& key)
Hashtable::removeAll	hash.h	/^    void removeAll(void);$/;"	p	class:Hashtable	access:public	signature:(void)
Hashtable::removeAll	hash.h	/^inline void Hashtable::removeAll(void) {$/;"	f	class:Hashtable	signature:(void)
Hashtable::removei	hash.h	/^    int32_t removei(const UnicodeString& key);$/;"	p	class:Hashtable	access:public	signature:(const UnicodeString& key)
Hashtable::removei	hash.h	/^inline int32_t Hashtable::removei(const UnicodeString& key) {$/;"	f	class:Hashtable	signature:(const UnicodeString& key)
Hashtable::setKeyComparator	hash.h	/^    UKeyComparator* setKeyComparator(UKeyComparator*keyComp);$/;"	p	class:Hashtable	access:public	signature:(UKeyComparator*keyComp)
Hashtable::setKeyComparator	hash.h	/^inline UKeyComparator* Hashtable::setKeyComparator(UKeyComparator*keyComp){$/;"	f	class:Hashtable	signature:(UKeyComparator*keyComp)
Hashtable::setValueComparator	hash.h	/^    UValueComparator* setValueComparator(UValueComparator* valueComp);$/;"	p	class:Hashtable	access:public	signature:(UValueComparator* valueComp)
Hashtable::setValueComparator	hash.h	/^inline UValueComparator* Hashtable::setValueComparator(UValueComparator* valueComp){$/;"	f	class:Hashtable	signature:(UValueComparator* valueComp)
Hashtable::setValueDeleter	hash.h	/^    UObjectDeleter *setValueDeleter(UObjectDeleter *fn);$/;"	p	class:Hashtable	access:public	signature:(UObjectDeleter *fn)
Hashtable::setValueDeleter	hash.h	/^inline UObjectDeleter *Hashtable::setValueDeleter(UObjectDeleter *fn) {$/;"	f	class:Hashtable	signature:(UObjectDeleter *fn)
Hashtable::~Hashtable	hash.h	/^    ~Hashtable();$/;"	p	class:Hashtable	access:public	signature:()
Hashtable::~Hashtable	hash.h	/^inline Hashtable::~Hashtable() {$/;"	f	class:Hashtable	signature:()
HebrewCalendar	unicode/urename.h	1954;"	d
I32_FLAG	utext.cpp	30;"	d	file:
ICUBreakIteratorFactory	brkiter.cpp	/^class ICUBreakIteratorFactory : public ICUResourceBundleFactory {$/;"	c	file:	inherits:ICUResourceBundleFactory
ICUBreakIteratorFactory	unicode/urename.h	1955;"	d
ICUBreakIteratorFactory::handleCreate	brkiter.cpp	/^    virtual UObject* handleCreate(const Locale& loc, int32_t kind, const ICUService* \/*service*\/, UErrorCode& status) const {$/;"	f	class:ICUBreakIteratorFactory	access:protected	signature:(const Locale& loc, int32_t kind, const ICUService* , UErrorCode& status) const
ICUBreakIteratorService	brkiter.cpp	/^    ICUBreakIteratorService()$/;"	f	class:ICUBreakIteratorService	access:public	signature:()
ICUBreakIteratorService	brkiter.cpp	/^class ICUBreakIteratorService : public ICULocaleService {$/;"	c	file:	inherits:ICULocaleService
ICUBreakIteratorService	unicode/urename.h	1956;"	d
ICUBreakIteratorService::ICUBreakIteratorService	brkiter.cpp	/^    ICUBreakIteratorService()$/;"	f	class:ICUBreakIteratorService	access:public	signature:()
ICUBreakIteratorService::cloneInstance	brkiter.cpp	/^    virtual UObject* cloneInstance(UObject* instance) const {$/;"	f	class:ICUBreakIteratorService	access:public	signature:(UObject* instance) const
ICUBreakIteratorService::handleDefault	brkiter.cpp	/^    virtual UObject* handleDefault(const ICUServiceKey& key, UnicodeString* \/*actualID*\/, UErrorCode& status) const {$/;"	f	class:ICUBreakIteratorService	access:public	signature:(const ICUServiceKey& key, UnicodeString* , UErrorCode& status) const
ICUBreakIteratorService::isDefault	brkiter.cpp	/^    virtual UBool isDefault() const {$/;"	f	class:ICUBreakIteratorService	access:public	signature:() const
ICUCollatorFactory	unicode/urename.h	1957;"	d
ICUCollatorService	unicode/urename.h	1958;"	d
ICUDataTable	unicode/urename.h	1959;"	d
ICULSERV_H	servloc.h	10;"	d
ICULanguageBreakFactory	brkeng.cpp	/^ICULanguageBreakFactory::ICULanguageBreakFactory(UErrorCode &\/*status*\/) {$/;"	f	class:ICULanguageBreakFactory	signature:(UErrorCode & )
ICULanguageBreakFactory	brkeng.h	/^  ICULanguageBreakFactory(UErrorCode &status);$/;"	p	class:ICULanguageBreakFactory	access:public	signature:(UErrorCode &status)
ICULanguageBreakFactory	brkeng.h	/^class ICULanguageBreakFactory : public LanguageBreakFactory {$/;"	c	inherits:LanguageBreakFactory
ICULanguageBreakFactory	unicode/urename.h	1960;"	d
ICULanguageBreakFactory::ICULanguageBreakFactory	brkeng.cpp	/^ICULanguageBreakFactory::ICULanguageBreakFactory(UErrorCode &\/*status*\/) {$/;"	f	class:ICULanguageBreakFactory	signature:(UErrorCode & )
ICULanguageBreakFactory::ICULanguageBreakFactory	brkeng.h	/^  ICULanguageBreakFactory(UErrorCode &status);$/;"	p	class:ICULanguageBreakFactory	access:public	signature:(UErrorCode &status)
ICULanguageBreakFactory::fEngines	brkeng.h	/^  UStack    *fEngines;$/;"	m	class:ICULanguageBreakFactory	access:private
ICULanguageBreakFactory::getEngineFor	brkeng.cpp	/^ICULanguageBreakFactory::getEngineFor(UChar32 c, int32_t breakType) {$/;"	f	class:ICULanguageBreakFactory	signature:(UChar32 c, int32_t breakType)
ICULanguageBreakFactory::getEngineFor	brkeng.h	/^  virtual const LanguageBreakEngine *getEngineFor(UChar32 c, int32_t breakType);$/;"	p	class:ICULanguageBreakFactory	access:public	signature:(UChar32 c, int32_t breakType)
ICULanguageBreakFactory::loadDictionaryFor	brkeng.cpp	/^ICULanguageBreakFactory::loadDictionaryFor(UScriptCode script, int32_t \/*breakType*\/) {$/;"	f	class:ICULanguageBreakFactory	signature:(UScriptCode script, int32_t )
ICULanguageBreakFactory::loadDictionaryFor	brkeng.h	/^  virtual const CompactTrieDictionary *loadDictionaryFor(UScriptCode script, int32_t breakType);$/;"	p	class:ICULanguageBreakFactory	access:protected	signature:(UScriptCode script, int32_t breakType)
ICULanguageBreakFactory::loadEngineFor	brkeng.cpp	/^ICULanguageBreakFactory::loadEngineFor(UChar32 c, int32_t breakType) {$/;"	f	class:ICULanguageBreakFactory	signature:(UChar32 c, int32_t breakType)
ICULanguageBreakFactory::loadEngineFor	brkeng.h	/^  virtual const LanguageBreakEngine *loadEngineFor(UChar32 c, int32_t breakType);$/;"	p	class:ICULanguageBreakFactory	access:protected	signature:(UChar32 c, int32_t breakType)
ICULanguageBreakFactory::~ICULanguageBreakFactory	brkeng.cpp	/^ICULanguageBreakFactory::~ICULanguageBreakFactory() {$/;"	f	class:ICULanguageBreakFactory	signature:()
ICULanguageBreakFactory::~ICULanguageBreakFactory	brkeng.h	/^  virtual ~ICULanguageBreakFactory();$/;"	p	class:ICULanguageBreakFactory	access:public	signature:()
ICULocaleService	servloc.h	/^class ICULocaleService;$/;"	x
ICULocaleService	servls.cpp	/^ICULocaleService::ICULocaleService()$/;"	f	class:ICULocaleService	signature:()
ICULocaleService	servls.cpp	/^ICULocaleService::ICULocaleService(const UnicodeString& dname)$/;"	f	class:ICULocaleService	signature:(const UnicodeString& dname)
ICULocaleService	unicode/urename.h	1961;"	d
ICULocaleService::ICULocaleService	servls.cpp	/^ICULocaleService::ICULocaleService()$/;"	f	class:ICULocaleService	signature:()
ICULocaleService::ICULocaleService	servls.cpp	/^ICULocaleService::ICULocaleService(const UnicodeString& dname)$/;"	f	class:ICULocaleService	signature:(const UnicodeString& dname)
ICULocaleService::createKey	servls.cpp	/^ICULocaleService::createKey(const UnicodeString* id, UErrorCode& status) const$/;"	f	class:ICULocaleService	signature:(const UnicodeString* id, UErrorCode& status) const
ICULocaleService::createKey	servls.cpp	/^ICULocaleService::createKey(const UnicodeString* id, int32_t kind, UErrorCode& status) const$/;"	f	class:ICULocaleService	signature:(const UnicodeString* id, int32_t kind, UErrorCode& status) const
ICULocaleService::get	servls.cpp	/^ICULocaleService::get(const Locale& locale, Locale* actualReturn, UErrorCode& status) const$/;"	f	class:ICULocaleService	signature:(const Locale& locale, Locale* actualReturn, UErrorCode& status) const
ICULocaleService::get	servls.cpp	/^ICULocaleService::get(const Locale& locale, UErrorCode& status) const$/;"	f	class:ICULocaleService	signature:(const Locale& locale, UErrorCode& status) const
ICULocaleService::get	servls.cpp	/^ICULocaleService::get(const Locale& locale, int32_t kind, Locale* actualReturn, UErrorCode& status) const$/;"	f	class:ICULocaleService	signature:(const Locale& locale, int32_t kind, Locale* actualReturn, UErrorCode& status) const
ICULocaleService::get	servls.cpp	/^ICULocaleService::get(const Locale& locale, int32_t kind, UErrorCode& status) const$/;"	f	class:ICULocaleService	signature:(const Locale& locale, int32_t kind, UErrorCode& status) const
ICULocaleService::getAvailableLocales	servls.cpp	/^ICULocaleService::getAvailableLocales(void) const$/;"	f	class:ICULocaleService	signature:(void) const
ICULocaleService::registerInstance	servls.cpp	/^ICULocaleService::registerInstance(UObject* objToAdopt, const Locale& locale, UErrorCode& status)$/;"	f	class:ICULocaleService	signature:(UObject* objToAdopt, const Locale& locale, UErrorCode& status)
ICULocaleService::registerInstance	servls.cpp	/^ICULocaleService::registerInstance(UObject* objToAdopt, const Locale& locale, int32_t kind, UErrorCode& status)$/;"	f	class:ICULocaleService	signature:(UObject* objToAdopt, const Locale& locale, int32_t kind, UErrorCode& status)
ICULocaleService::registerInstance	servls.cpp	/^ICULocaleService::registerInstance(UObject* objToAdopt, const Locale& locale, int32_t kind, int32_t coverage, UErrorCode& status)$/;"	f	class:ICULocaleService	signature:(UObject* objToAdopt, const Locale& locale, int32_t kind, int32_t coverage, UErrorCode& status)
ICULocaleService::registerInstance	servls.cpp	/^ICULocaleService::registerInstance(UObject* objToAdopt, const UnicodeString& locale, $/;"	f	class:ICULocaleService	signature:(UObject* objToAdopt, const UnicodeString& locale, UBool visible, UErrorCode& status)
ICULocaleService::validateFallbackLocale	servls.cpp	/^ICULocaleService::validateFallbackLocale() const$/;"	f	class:ICULocaleService	signature:() const
ICULocaleService::~ICULocaleService	servls.cpp	/^ICULocaleService::~ICULocaleService()$/;"	f	class:ICULocaleService	signature:()
ICUMutex	umutex.c	/^struct ICUMutex {$/;"	s	file:
ICUMutex	umutex.c	/^typedef struct ICUMutex ICUMutex;$/;"	t	typeref:struct:ICUMutex	file:
ICUMutex::heapAllocated	umutex.c	/^    UBool        heapAllocated;     \/* Set if this ICUMutex is heap allocated, and    *\/$/;"	m	struct:ICUMutex	file:	access:public
ICUMutex::next	umutex.c	/^    ICUMutex    *next;              \/* All ICUMutexes are chained into a list so that  *\/$/;"	m	struct:ICUMutex	file:	access:public
ICUMutex::owner	umutex.c	/^    UMTX        *owner;             \/* Points back to the UMTX corrsponding to this   *\/$/;"	m	struct:ICUMutex	file:	access:public
ICUMutex::platformMutex	umutex.c	/^    MUTEX_TYPE   platformMutex;     \/* The underlying OS mutex being wrapped.          *\/$/;"	m	struct:ICUMutex	file:	access:public
ICUMutex::recursionCount	umutex.c	/^    int32_t      recursionCount;    \/* For debugging, detect recursive mutex locks.    *\/$/;"	m	struct:ICUMutex	file:	access:public
ICUMutex::userMutex	umutex.c	/^    UMTX         userMutex;         \/* For use with u_setMutexFunctions operations,    *\/$/;"	m	struct:ICUMutex	file:	access:public
ICUNOTIF_H	servnotf.h	8;"	d
ICUNotifier	servnotf.cpp	/^ICUNotifier::ICUNotifier(void) $/;"	f	class:ICUNotifier	signature:(void)
ICUNotifier	servnotf.h	/^class ICUNotifier;$/;"	x
ICUNotifier	unicode/urename.h	1962;"	d
ICUNotifier::ICUNotifier	servnotf.cpp	/^ICUNotifier::ICUNotifier(void) $/;"	f	class:ICUNotifier	signature:(void)
ICUNotifier::addListener	servnotf.cpp	/^ICUNotifier::addListener(const EventListener* l, UErrorCode& status) $/;"	f	class:ICUNotifier	signature:(const EventListener* l, UErrorCode& status)
ICUNotifier::notifyChanged	servnotf.cpp	/^ICUNotifier::notifyChanged(void) $/;"	f	class:ICUNotifier	signature:(void)
ICUNotifier::removeListener	servnotf.cpp	/^ICUNotifier::removeListener(const EventListener *l, UErrorCode& status) $/;"	f	class:ICUNotifier	signature:(const EventListener *l, UErrorCode& status)
ICUNotifier::~ICUNotifier	servnotf.cpp	/^ICUNotifier::~ICUNotifier(void) {$/;"	f	class:ICUNotifier	signature:(void)
ICUNumberFormatFactory	unicode/urename.h	1963;"	d
ICUNumberFormatService	unicode/urename.h	1964;"	d
ICUPLUGIMP_H	icuplugimp.h	20;"	d
ICUPLUG_H	unicode/icuplug.h	106;"	d
ICUResourceBundleFactory	servrbf.cpp	/^ICUResourceBundleFactory::ICUResourceBundleFactory()$/;"	f	class:ICUResourceBundleFactory	signature:()
ICUResourceBundleFactory	servrbf.cpp	/^ICUResourceBundleFactory::ICUResourceBundleFactory(const UnicodeString& bundleName)$/;"	f	class:ICUResourceBundleFactory	signature:(const UnicodeString& bundleName)
ICUResourceBundleFactory	unicode/urename.h	1965;"	d
ICUResourceBundleFactory::ICUResourceBundleFactory	servrbf.cpp	/^ICUResourceBundleFactory::ICUResourceBundleFactory()$/;"	f	class:ICUResourceBundleFactory	signature:()
ICUResourceBundleFactory::ICUResourceBundleFactory	servrbf.cpp	/^ICUResourceBundleFactory::ICUResourceBundleFactory(const UnicodeString& bundleName)$/;"	f	class:ICUResourceBundleFactory	signature:(const UnicodeString& bundleName)
ICUResourceBundleFactory::debug	servrbf.cpp	/^ICUResourceBundleFactory::debug(UnicodeString& result) const$/;"	f	class:ICUResourceBundleFactory	signature:(UnicodeString& result) const
ICUResourceBundleFactory::debugClass	servrbf.cpp	/^ICUResourceBundleFactory::debugClass(UnicodeString& result) const$/;"	f	class:ICUResourceBundleFactory	signature:(UnicodeString& result) const
ICUResourceBundleFactory::getSupportedIDs	servrbf.cpp	/^ICUResourceBundleFactory::getSupportedIDs(UErrorCode& status) const$/;"	f	class:ICUResourceBundleFactory	signature:(UErrorCode& status) const
ICUResourceBundleFactory::handleCreate	servrbf.cpp	/^ICUResourceBundleFactory::handleCreate(const Locale& loc, int32_t \/* kind *\/, const ICUService* \/* service *\/, UErrorCode& status) const$/;"	f	class:ICUResourceBundleFactory	signature:(const Locale& loc, int32_t , const ICUService* , UErrorCode& status) const
ICUResourceBundleFactory::~ICUResourceBundleFactory	servrbf.cpp	/^ICUResourceBundleFactory::~ICUResourceBundleFactory() {}$/;"	f	class:ICUResourceBundleFactory	signature:()
ICUSERV_H	serv.h	9;"	d
ICUService	serv.cpp	/^ICUService::ICUService()$/;"	f	class:ICUService	signature:()
ICUService	serv.cpp	/^ICUService::ICUService(const UnicodeString& newName) $/;"	f	class:ICUService	signature:(const UnicodeString& newName)
ICUService	serv.h	/^class ICUService;$/;"	x
ICUService	unicode/urename.h	1966;"	d
ICUService::ICUService	serv.cpp	/^ICUService::ICUService()$/;"	f	class:ICUService	signature:()
ICUService::ICUService	serv.cpp	/^ICUService::ICUService(const UnicodeString& newName) $/;"	f	class:ICUService	signature:(const UnicodeString& newName)
ICUService::acceptsListener	serv.cpp	/^ICUService::acceptsListener(const EventListener& l) const $/;"	f	class:ICUService	signature:(const EventListener& l) const
ICUService::clearCaches	serv.cpp	/^ICUService::clearCaches() $/;"	f	class:ICUService	signature:()
ICUService::clearServiceCache	serv.cpp	/^ICUService::clearServiceCache() $/;"	f	class:ICUService	signature:()
ICUService::countFactories	serv.cpp	/^ICUService::countFactories() const $/;"	f	class:ICUService	signature:() const
ICUService::createKey	serv.cpp	/^ICUService::createKey(const UnicodeString* id, UErrorCode& status) const $/;"	f	class:ICUService	signature:(const UnicodeString* id, UErrorCode& status) const
ICUService::createSimpleFactory	serv.cpp	/^ICUService::createSimpleFactory(UObject* objToAdopt, const UnicodeString& id, UBool visible, UErrorCode& status)$/;"	f	class:ICUService	signature:(UObject* objToAdopt, const UnicodeString& id, UBool visible, UErrorCode& status)
ICUService::get	serv.cpp	/^ICUService::get(const UnicodeString& descriptor, UErrorCode& status) const $/;"	f	class:ICUService	signature:(const UnicodeString& descriptor, UErrorCode& status) const
ICUService::get	serv.cpp	/^ICUService::get(const UnicodeString& descriptor, UnicodeString* actualReturn, UErrorCode& status) const $/;"	f	class:ICUService	signature:(const UnicodeString& descriptor, UnicodeString* actualReturn, UErrorCode& status) const
ICUService::getDisplayName	serv.cpp	/^ICUService::getDisplayName(const UnicodeString& id, UnicodeString& result) const $/;"	f	class:ICUService	signature:(const UnicodeString& id, UnicodeString& result) const
ICUService::getDisplayName	serv.cpp	/^ICUService::getDisplayName(const UnicodeString& id, UnicodeString& result, const Locale& locale) const $/;"	f	class:ICUService	signature:(const UnicodeString& id, UnicodeString& result, const Locale& locale) const
ICUService::getDisplayNames	serv.cpp	/^ICUService::getDisplayNames(UVector& result, $/;"	f	class:ICUService	signature:(UVector& result, const Locale& locale, const UnicodeString* matchID, UErrorCode& status) const
ICUService::getDisplayNames	serv.cpp	/^ICUService::getDisplayNames(UVector& result, UErrorCode& status) const $/;"	f	class:ICUService	signature:(UVector& result, UErrorCode& status) const
ICUService::getDisplayNames	serv.cpp	/^ICUService::getDisplayNames(UVector& result, const Locale& locale, UErrorCode& status) const $/;"	f	class:ICUService	signature:(UVector& result, const Locale& locale, UErrorCode& status) const
ICUService::getKey	serv.cpp	/^ICUService::getKey(ICUServiceKey& key, UErrorCode& status) const $/;"	f	class:ICUService	signature:(ICUServiceKey& key, UErrorCode& status) const
ICUService::getKey	serv.cpp	/^ICUService::getKey(ICUServiceKey& key, UnicodeString* actualReturn, UErrorCode& status) const $/;"	f	class:ICUService	signature:(ICUServiceKey& key, UnicodeString* actualReturn, UErrorCode& status) const
ICUService::getKey	serv.cpp	/^ICUService::getKey(ICUServiceKey& key, UnicodeString* actualReturn, const ICUServiceFactory* factory, UErrorCode& status) const $/;"	f	class:ICUService	signature:(ICUServiceKey& key, UnicodeString* actualReturn, const ICUServiceFactory* factory, UErrorCode& status) const
ICUService::getName	serv.cpp	/^ICUService::getName(UnicodeString& result) const $/;"	f	class:ICUService	signature:(UnicodeString& result) const
ICUService::getTimestamp	serv.cpp	/^ICUService::getTimestamp() const$/;"	f	class:ICUService	signature:() const
ICUService::getVisibleIDMap	serv.cpp	/^ICUService::getVisibleIDMap(UErrorCode& status) const {$/;"	f	class:ICUService	signature:(UErrorCode& status) const
ICUService::getVisibleIDs	serv.cpp	/^ICUService::getVisibleIDs(UVector& result, UErrorCode& status) const {$/;"	f	class:ICUService	signature:(UVector& result, UErrorCode& status) const
ICUService::getVisibleIDs	serv.cpp	/^ICUService::getVisibleIDs(UVector& result, const UnicodeString* matchID, UErrorCode& status) const $/;"	f	class:ICUService	signature:(UVector& result, const UnicodeString* matchID, UErrorCode& status) const
ICUService::handleDefault	serv.cpp	/^ICUService::handleDefault(const ICUServiceKey& \/* key *\/, UnicodeString* \/* actualIDReturn *\/, UErrorCode& \/* status *\/) const $/;"	f	class:ICUService	signature:(const ICUServiceKey& , UnicodeString* , UErrorCode& ) const
ICUService::isDefault	serv.cpp	/^ICUService::isDefault() const $/;"	f	class:ICUService	signature:() const
ICUService::notifyListener	serv.cpp	/^ICUService::notifyListener(EventListener& l) const $/;"	f	class:ICUService	signature:(EventListener& l) const
ICUService::reInitializeFactories	serv.cpp	/^ICUService::reInitializeFactories() $/;"	f	class:ICUService	signature:()
ICUService::registerFactory	serv.cpp	/^ICUService::registerFactory(ICUServiceFactory* factoryToAdopt, UErrorCode& status) $/;"	f	class:ICUService	signature:(ICUServiceFactory* factoryToAdopt, UErrorCode& status)
ICUService::registerInstance	serv.cpp	/^ICUService::registerInstance(UObject* objToAdopt, const UnicodeString& id, UBool visible, UErrorCode& status) $/;"	f	class:ICUService	signature:(UObject* objToAdopt, const UnicodeString& id, UBool visible, UErrorCode& status)
ICUService::registerInstance	serv.cpp	/^ICUService::registerInstance(UObject* objToAdopt, const UnicodeString& id, UErrorCode& status) $/;"	f	class:ICUService	signature:(UObject* objToAdopt, const UnicodeString& id, UErrorCode& status)
ICUService::reset	serv.cpp	/^ICUService::reset() $/;"	f	class:ICUService	signature:()
ICUService::unregister	serv.cpp	/^ICUService::unregister(URegistryKey rkey, UErrorCode& status) $/;"	f	class:ICUService	signature:(URegistryKey rkey, UErrorCode& status)
ICUService::~ICUService	serv.cpp	/^ICUService::~ICUService()$/;"	f	class:ICUService	signature:()
ICUServiceFactory	serv.h	/^class ICUServiceFactory;$/;"	x
ICUServiceFactory	unicode/urename.h	1967;"	d
ICUServiceKey	serv.cpp	/^ICUServiceKey::ICUServiceKey(const UnicodeString& id) $/;"	f	class:ICUServiceKey	signature:(const UnicodeString& id)
ICUServiceKey	serv.h	/^  ICUServiceKey(const UnicodeString& id);$/;"	p	class:ICUServiceKey	access:public	signature:(const UnicodeString& id)
ICUServiceKey	serv.h	/^class ICUServiceKey;$/;"	x
ICUServiceKey	serv.h	/^class U_COMMON_API ICUServiceKey : public UObject {$/;"	c	inherits:UObject
ICUServiceKey	unicode/urename.h	1968;"	d
ICUServiceKey::ICUServiceKey	serv.cpp	/^ICUServiceKey::ICUServiceKey(const UnicodeString& id) $/;"	f	class:ICUServiceKey	signature:(const UnicodeString& id)
ICUServiceKey::ICUServiceKey	serv.h	/^  ICUServiceKey(const UnicodeString& id);$/;"	p	class:ICUServiceKey	access:public	signature:(const UnicodeString& id)
ICUServiceKey::PREFIX_DELIMITER	serv.cpp	/^const UChar ICUServiceKey::PREFIX_DELIMITER = 0x002F;   \/* '\/' *\/$/;"	m	class:ICUServiceKey	file:
ICUServiceKey::PREFIX_DELIMITER	serv.h	/^  static const UChar PREFIX_DELIMITER;$/;"	m	class:ICUServiceKey	access:protected
ICUServiceKey::_id	serv.h	/^  const UnicodeString _id;$/;"	m	class:ICUServiceKey	access:private
ICUServiceKey::canonicalID	serv.cpp	/^ICUServiceKey::canonicalID(UnicodeString& result) const $/;"	f	class:ICUServiceKey	signature:(UnicodeString& result) const
ICUServiceKey::canonicalID	serv.h	/^  virtual UnicodeString& canonicalID(UnicodeString& result) const;$/;"	p	class:ICUServiceKey	access:public	signature:(UnicodeString& result) const
ICUServiceKey::currentDescriptor	serv.cpp	/^ICUServiceKey::currentDescriptor(UnicodeString& result) const $/;"	f	class:ICUServiceKey	signature:(UnicodeString& result) const
ICUServiceKey::currentDescriptor	serv.h	/^  virtual UnicodeString& currentDescriptor(UnicodeString& result) const;$/;"	p	class:ICUServiceKey	access:public	signature:(UnicodeString& result) const
ICUServiceKey::currentID	serv.cpp	/^ICUServiceKey::currentID(UnicodeString& result) const $/;"	f	class:ICUServiceKey	signature:(UnicodeString& result) const
ICUServiceKey::currentID	serv.h	/^  virtual UnicodeString& currentID(UnicodeString& result) const;$/;"	p	class:ICUServiceKey	access:public	signature:(UnicodeString& result) const
ICUServiceKey::debug	serv.cpp	/^ICUServiceKey::debug(UnicodeString& result) const $/;"	f	class:ICUServiceKey	signature:(UnicodeString& result) const
ICUServiceKey::debugClass	serv.cpp	/^ICUServiceKey::debugClass(UnicodeString& result) const $/;"	f	class:ICUServiceKey	signature:(UnicodeString& result) const
ICUServiceKey::fallback	serv.cpp	/^ICUServiceKey::fallback() $/;"	f	class:ICUServiceKey	signature:()
ICUServiceKey::fallback	serv.h	/^  virtual UBool fallback();$/;"	p	class:ICUServiceKey	access:public	signature:()
ICUServiceKey::getDynamicClassID	serv.h	/^  virtual UClassID getDynamicClassID() const;$/;"	p	class:ICUServiceKey	access:public	signature:() const
ICUServiceKey::getID	serv.cpp	/^ICUServiceKey::getID() const $/;"	f	class:ICUServiceKey	signature:() const
ICUServiceKey::getID	serv.h	/^  virtual const UnicodeString& getID() const;$/;"	p	class:ICUServiceKey	access:public	signature:() const
ICUServiceKey::getStaticClassID	serv.h	/^  static UClassID U_EXPORT2 getStaticClassID();$/;"	p	class:ICUServiceKey	access:public	signature:()
ICUServiceKey::isFallbackOf	serv.cpp	/^ICUServiceKey::isFallbackOf(const UnicodeString& id) const $/;"	f	class:ICUServiceKey	signature:(const UnicodeString& id) const
ICUServiceKey::isFallbackOf	serv.h	/^  virtual UBool isFallbackOf(const UnicodeString& id) const;$/;"	p	class:ICUServiceKey	access:public	signature:(const UnicodeString& id) const
ICUServiceKey::parsePrefix	serv.cpp	/^ICUServiceKey::parsePrefix(UnicodeString& result) $/;"	f	class:ICUServiceKey	signature:(UnicodeString& result)
ICUServiceKey::parsePrefix	serv.h	/^  static UnicodeString& parsePrefix(UnicodeString& result);$/;"	p	class:ICUServiceKey	access:public	signature:(UnicodeString& result)
ICUServiceKey::parseSuffix	serv.cpp	/^ICUServiceKey::parseSuffix(UnicodeString& result) $/;"	f	class:ICUServiceKey	signature:(UnicodeString& result)
ICUServiceKey::parseSuffix	serv.h	/^  static UnicodeString& parseSuffix(UnicodeString& result);$/;"	p	class:ICUServiceKey	access:public	signature:(UnicodeString& result)
ICUServiceKey::prefix	serv.cpp	/^ICUServiceKey::prefix(UnicodeString& result) const $/;"	f	class:ICUServiceKey	signature:(UnicodeString& result) const
ICUServiceKey::prefix	serv.h	/^  virtual UnicodeString& prefix(UnicodeString& result) const;$/;"	p	class:ICUServiceKey	access:public	signature:(UnicodeString& result) const
ICUServiceKey::~ICUServiceKey	serv.cpp	/^ICUServiceKey::~ICUServiceKey() $/;"	f	class:ICUServiceKey	signature:()
ICUServiceKey::~ICUServiceKey	serv.h	/^  virtual ~ICUServiceKey();$/;"	p	class:ICUServiceKey	access:public	signature:()
ICUServiceTest	serv.h	/^class ICUServiceTest;$/;"	x
ICU_COMPANY	msvcres.h	21;"	d
ICU_DATA_DIR_PREFIX_ENV_VAR	putil.c	1180;"	d	file:
ICU_NO_USER_DATA_OVERRIDE	putil.c	106;"	d	file:
ICU_PRODUCT	msvcres.h	23;"	d
ICU_PRODUCT_PREFIX	msvcres.h	22;"	d
ICU_USE_THREADS	umutex.h	27;"	d
ICU_USE_THREADS	umutex.h	38;"	d
ICU_USE_THREADS	unicode/platform.h	155;"	d
ICU_USE_THREADS	unicode/ppalmos.h	157;"	d
ICU_USE_THREADS	unicode/pwin32.h	185;"	d
ICU_UTIL_H	util.h	12;"	d
ICU_Utility	unicode/urename.h	1969;"	d
ICU_Utility	util.h	/^    ICU_Utility();$/;"	p	class:ICU_Utility	access:private	signature:()
ICU_Utility	util.h	/^class U_COMMON_API ICU_Utility \/* not : public UObject because all methods are static *\/ {$/;"	c
ICU_Utility::ICU_Utility	util.h	/^    ICU_Utility();$/;"	p	class:ICU_Utility	access:private	signature:()
ICU_Utility::appendNumber	util.cpp	/^UnicodeString& ICU_Utility::appendNumber(UnicodeString& result, int32_t n,$/;"	f	class:ICU_Utility	signature:(UnicodeString& result, int32_t n, int32_t radix, int32_t minDigits)
ICU_Utility::appendNumber	util.h	/^    static UnicodeString& appendNumber(UnicodeString& result, int32_t n,$/;"	p	class:ICU_Utility	access:public	signature:(UnicodeString& result, int32_t n, int32_t radix = 10, int32_t minDigits = 1)
ICU_Utility::appendToRule	util.cpp	/^void ICU_Utility::appendToRule(UnicodeString& rule,$/;"	f	class:ICU_Utility	signature:(UnicodeString& rule, UChar32 c, UBool isLiteral, UBool escapeUnprintable, UnicodeString& quoteBuf)
ICU_Utility::appendToRule	util.cpp	/^void ICU_Utility::appendToRule(UnicodeString& rule,$/;"	f	class:ICU_Utility	signature:(UnicodeString& rule, const UnicodeMatcher* matcher, UBool escapeUnprintable, UnicodeString& quoteBuf)
ICU_Utility::appendToRule	util.cpp	/^void ICU_Utility::appendToRule(UnicodeString& rule,$/;"	f	class:ICU_Utility	signature:(UnicodeString& rule, const UnicodeString& text, UBool isLiteral, UBool escapeUnprintable, UnicodeString& quoteBuf)
ICU_Utility::appendToRule	util.h	/^    static void appendToRule(UnicodeString& rule,$/;"	p	class:ICU_Utility	access:public	signature:(UnicodeString& rule, UChar32 c, UBool isLiteral, UBool escapeUnprintable, UnicodeString& quoteBuf)
ICU_Utility::appendToRule	util.h	/^    static void appendToRule(UnicodeString& rule,$/;"	p	class:ICU_Utility	access:public	signature:(UnicodeString& rule, const UnicodeMatcher* matcher, UBool escapeUnprintable, UnicodeString& quoteBuf)
ICU_Utility::appendToRule	util.h	/^    static void appendToRule(UnicodeString& rule,$/;"	p	class:ICU_Utility	access:public	signature:(UnicodeString& rule, const UnicodeString& text, UBool isLiteral, UBool escapeUnprintable, UnicodeString& quoteBuf)
ICU_Utility::escapeUnprintable	util.cpp	/^UBool ICU_Utility::escapeUnprintable(UnicodeString& result, UChar32 c) {$/;"	f	class:ICU_Utility	signature:(UnicodeString& result, UChar32 c)
ICU_Utility::escapeUnprintable	util.h	/^    static UBool escapeUnprintable(UnicodeString& result, UChar32 c);$/;"	p	class:ICU_Utility	access:public	signature:(UnicodeString& result, UChar32 c)
ICU_Utility::isUnprintable	util.cpp	/^UBool ICU_Utility::isUnprintable(UChar32 c) {$/;"	f	class:ICU_Utility	signature:(UChar32 c)
ICU_Utility::isUnprintable	util.h	/^    static UBool isUnprintable(UChar32 c);$/;"	p	class:ICU_Utility	access:public	signature:(UChar32 c)
ICU_Utility::parseChar	util.cpp	/^UBool ICU_Utility::parseChar(const UnicodeString& id, int32_t& pos, UChar ch) {$/;"	f	class:ICU_Utility	signature:(const UnicodeString& id, int32_t& pos, UChar ch)
ICU_Utility::parseChar	util.h	/^    static UBool parseChar(const UnicodeString& id, int32_t& pos, UChar ch);$/;"	p	class:ICU_Utility	access:public	signature:(const UnicodeString& id, int32_t& pos, UChar ch)
ICU_Utility::parseInteger	util.h	/^    static int32_t parseInteger(const UnicodeString& rule, int32_t& pos, int32_t limit);$/;"	p	class:ICU_Utility	access:public	signature:(const UnicodeString& rule, int32_t& pos, int32_t limit)
ICU_Utility::parseInteger	util_props.cpp	/^int32_t ICU_Utility::parseInteger(const UnicodeString& rule, int32_t& pos, int32_t limit) {$/;"	f	class:ICU_Utility	signature:(const UnicodeString& rule, int32_t& pos, int32_t limit)
ICU_Utility::parseNumber	util.h	/^    static int32_t parseNumber(const UnicodeString& text,$/;"	p	class:ICU_Utility	access:public	signature:(const UnicodeString& text, int32_t& pos, int8_t radix)
ICU_Utility::parseNumber	util_props.cpp	/^int32_t ICU_Utility::parseNumber(const UnicodeString& text,$/;"	f	class:ICU_Utility	signature:(const UnicodeString& text, int32_t& pos, int8_t radix)
ICU_Utility::parsePattern	util.cpp	/^int32_t ICU_Utility::parsePattern(const UnicodeString& pat,$/;"	f	class:ICU_Utility	signature:(const UnicodeString& pat, const Replaceable& text, int32_t index, int32_t limit)
ICU_Utility::parsePattern	util.h	/^    static int32_t parsePattern(const UnicodeString& pat,$/;"	p	class:ICU_Utility	access:public	signature:(const UnicodeString& pat, const Replaceable& text, int32_t index, int32_t limit)
ICU_Utility::parsePattern	util.h	/^    static int32_t parsePattern(const UnicodeString& rule, int32_t pos, int32_t limit,$/;"	p	class:ICU_Utility	access:public	signature:(const UnicodeString& rule, int32_t pos, int32_t limit, const UnicodeString& pattern, int32_t* parsedInts)
ICU_Utility::parsePattern	util_props.cpp	/^int32_t ICU_Utility::parsePattern(const UnicodeString& rule, int32_t pos, int32_t limit,$/;"	f	class:ICU_Utility	signature:(const UnicodeString& rule, int32_t pos, int32_t limit, const UnicodeString& pattern, int32_t* parsedInts)
ICU_Utility::parseUnicodeIdentifier	util.h	/^    static UnicodeString parseUnicodeIdentifier(const UnicodeString& str, int32_t& pos);$/;"	p	class:ICU_Utility	access:public	signature:(const UnicodeString& str, int32_t& pos)
ICU_Utility::parseUnicodeIdentifier	util_props.cpp	/^UnicodeString ICU_Utility::parseUnicodeIdentifier(const UnicodeString& str, int32_t& pos) {$/;"	f	class:ICU_Utility	signature:(const UnicodeString& str, int32_t& pos)
ICU_Utility::skipWhitespace	util.cpp	/^int32_t ICU_Utility::skipWhitespace(const UnicodeString& str, int32_t& pos,$/;"	f	class:ICU_Utility	signature:(const UnicodeString& str, int32_t& pos, UBool advance)
ICU_Utility::skipWhitespace	util.h	/^    static int32_t skipWhitespace(const UnicodeString& str, int32_t& pos,$/;"	p	class:ICU_Utility	access:public	signature:(const UnicodeString& str, int32_t& pos, UBool advance = FALSE)
ICU_WEBSITE	msvcres.h	20;"	d
IDNA	unicode/idna.h	/^class U_COMMON_API IDNA : public UObject {$/;"	c	inherits:UObject
IDNA	unicode/urename.h	1970;"	d
IDNA::createUTS46Instance	unicode/idna.h	/^    createUTS46Instance(uint32_t options, UErrorCode &errorCode);$/;"	p	class:IDNA	access:public	signature:(uint32_t options, UErrorCode &errorCode)
IDNA::createUTS46Instance	uts46.cpp	/^IDNA::createUTS46Instance(uint32_t options, UErrorCode &errorCode) {$/;"	f	class:IDNA	signature:(uint32_t options, UErrorCode &errorCode)
IDNA::getDynamicClassID	unicode/idna.h	/^    virtual UClassID getDynamicClassID() const;$/;"	p	class:IDNA	access:private	signature:() const
IDNA::labelToASCII	unicode/idna.h	/^    labelToASCII(const UnicodeString &label, UnicodeString &dest,$/;"	p	class:IDNA	access:public	signature:(const UnicodeString &label, UnicodeString &dest, IDNAInfo &info, UErrorCode &errorCode) const
IDNA::labelToASCII_UTF8	unicode/idna.h	/^    labelToASCII_UTF8(const StringPiece &label, ByteSink &dest,$/;"	p	class:IDNA	access:public	signature:(const StringPiece &label, ByteSink &dest, IDNAInfo &info, UErrorCode &errorCode) const
IDNA::labelToASCII_UTF8	uts46.cpp	/^IDNA::labelToASCII_UTF8(const StringPiece &label, ByteSink &dest,$/;"	f	class:IDNA	signature:(const StringPiece &label, ByteSink &dest, IDNAInfo &info, UErrorCode &errorCode) const
IDNA::labelToUnicode	unicode/idna.h	/^    labelToUnicode(const UnicodeString &label, UnicodeString &dest,$/;"	p	class:IDNA	access:public	signature:(const UnicodeString &label, UnicodeString &dest, IDNAInfo &info, UErrorCode &errorCode) const
IDNA::labelToUnicodeUTF8	unicode/idna.h	/^    labelToUnicodeUTF8(const StringPiece &label, ByteSink &dest,$/;"	p	class:IDNA	access:public	signature:(const StringPiece &label, ByteSink &dest, IDNAInfo &info, UErrorCode &errorCode) const
IDNA::labelToUnicodeUTF8	uts46.cpp	/^IDNA::labelToUnicodeUTF8(const StringPiece &label, ByteSink &dest,$/;"	f	class:IDNA	signature:(const StringPiece &label, ByteSink &dest, IDNAInfo &info, UErrorCode &errorCode) const
IDNA::nameToASCII	unicode/idna.h	/^    nameToASCII(const UnicodeString &name, UnicodeString &dest,$/;"	p	class:IDNA	access:public	signature:(const UnicodeString &name, UnicodeString &dest, IDNAInfo &info, UErrorCode &errorCode) const
IDNA::nameToASCII_UTF8	unicode/idna.h	/^    nameToASCII_UTF8(const StringPiece &name, ByteSink &dest,$/;"	p	class:IDNA	access:public	signature:(const StringPiece &name, ByteSink &dest, IDNAInfo &info, UErrorCode &errorCode) const
IDNA::nameToASCII_UTF8	uts46.cpp	/^IDNA::nameToASCII_UTF8(const StringPiece &name, ByteSink &dest,$/;"	f	class:IDNA	signature:(const StringPiece &name, ByteSink &dest, IDNAInfo &info, UErrorCode &errorCode) const
IDNA::nameToUnicode	unicode/idna.h	/^    nameToUnicode(const UnicodeString &name, UnicodeString &dest,$/;"	p	class:IDNA	access:public	signature:(const UnicodeString &name, UnicodeString &dest, IDNAInfo &info, UErrorCode &errorCode) const
IDNA::nameToUnicodeUTF8	unicode/idna.h	/^    nameToUnicodeUTF8(const StringPiece &name, ByteSink &dest,$/;"	p	class:IDNA	access:public	signature:(const StringPiece &name, ByteSink &dest, IDNAInfo &info, UErrorCode &errorCode) const
IDNA::nameToUnicodeUTF8	uts46.cpp	/^IDNA::nameToUnicodeUTF8(const StringPiece &name, ByteSink &dest,$/;"	f	class:IDNA	signature:(const StringPiece &name, ByteSink &dest, IDNAInfo &info, UErrorCode &errorCode) const
IDNAInfo	unicode/idna.h	/^    IDNAInfo() : errors(0), labelErrors(0), isTransDiff(FALSE), isBiDi(FALSE), isOkBiDi(TRUE) {}$/;"	f	class:IDNAInfo	access:public	signature:()
IDNAInfo	unicode/idna.h	/^    IDNAInfo(const IDNAInfo &other);  \/\/ no copying$/;"	p	class:IDNAInfo	access:private	signature:(const IDNAInfo &other)
IDNAInfo	unicode/idna.h	/^class U_COMMON_API IDNAInfo : public UMemory {$/;"	c	inherits:UMemory
IDNAInfo	unicode/idna.h	/^class U_COMMON_API IDNAInfo;$/;"	v	typeref:class:U_COMMON_API
IDNAInfo::IDNAInfo	unicode/idna.h	/^    IDNAInfo() : errors(0), labelErrors(0), isTransDiff(FALSE), isBiDi(FALSE), isOkBiDi(TRUE) {}$/;"	f	class:IDNAInfo	access:public	signature:()
IDNAInfo::IDNAInfo	unicode/idna.h	/^    IDNAInfo(const IDNAInfo &other);  \/\/ no copying$/;"	p	class:IDNAInfo	access:private	signature:(const IDNAInfo &other)
IDNAInfo::UTS46	unicode/idna.h	/^    friend class UTS46;$/;"	x
IDNAInfo::errors	unicode/idna.h	/^    uint32_t errors, labelErrors;$/;"	m	class:IDNAInfo	access:private
IDNAInfo::getErrors	unicode/idna.h	/^    uint32_t getErrors() const { return errors; }$/;"	f	class:IDNAInfo	access:public	signature:() const
IDNAInfo::hasErrors	unicode/idna.h	/^    UBool hasErrors() const { return errors!=0; }$/;"	f	class:IDNAInfo	access:public	signature:() const
IDNAInfo::isBiDi	unicode/idna.h	/^    UBool isBiDi;$/;"	m	class:IDNAInfo	access:private
IDNAInfo::isOkBiDi	unicode/idna.h	/^    UBool isOkBiDi;$/;"	m	class:IDNAInfo	access:private
IDNAInfo::isTransDiff	unicode/idna.h	/^    UBool isTransDiff;$/;"	m	class:IDNAInfo	access:private
IDNAInfo::isTransitionalDifferent	unicode/idna.h	/^    UBool isTransitionalDifferent() const { return isTransDiff; }$/;"	f	class:IDNAInfo	access:public	signature:() const
IDNAInfo::labelErrors	unicode/idna.h	/^    uint32_t errors, labelErrors;$/;"	m	class:IDNAInfo	access:private
IDNAInfo::operator =	unicode/idna.h	/^    IDNAInfo &operator=(const IDNAInfo &other);  \/\/ no copying$/;"	p	class:IDNAInfo	access:private	signature:(const IDNAInfo &other)
IDNAInfo::reset	unicode/idna.h	/^    void reset() {$/;"	f	class:IDNAInfo	access:private	signature:()
IEEE_754	unicode/putil.h	36;"	d
IGNORE	ucnv_io.c	/^    IGNORE,$/;"	e	enum:__anon129	file:
ILCID_POSIX_ELEMENT_ARRAY	locmap.c	88;"	d	file:
ILCID_POSIX_MAP	locmap.c	108;"	d	file:
ILCID_POSIX_SUBTABLE	locmap.c	/^ILCID_POSIX_SUBTABLE(ar) {$/;"	f
ILCID_POSIX_SUBTABLE	locmap.c	/^ILCID_POSIX_SUBTABLE(az) {$/;"	f
ILCID_POSIX_SUBTABLE	locmap.c	/^ILCID_POSIX_SUBTABLE(ber) {$/;"	f
ILCID_POSIX_SUBTABLE	locmap.c	/^ILCID_POSIX_SUBTABLE(bn) {$/;"	f
ILCID_POSIX_SUBTABLE	locmap.c	/^ILCID_POSIX_SUBTABLE(bo) {$/;"	f
ILCID_POSIX_SUBTABLE	locmap.c	/^ILCID_POSIX_SUBTABLE(de) {$/;"	f
ILCID_POSIX_SUBTABLE	locmap.c	/^ILCID_POSIX_SUBTABLE(en) {$/;"	f
ILCID_POSIX_SUBTABLE	locmap.c	/^ILCID_POSIX_SUBTABLE(en_US_POSIX) {$/;"	f
ILCID_POSIX_SUBTABLE	locmap.c	/^ILCID_POSIX_SUBTABLE(es) {$/;"	f
ILCID_POSIX_SUBTABLE	locmap.c	/^ILCID_POSIX_SUBTABLE(fa) {$/;"	f
ILCID_POSIX_SUBTABLE	locmap.c	/^ILCID_POSIX_SUBTABLE(fa_AF) {$/;"	f
ILCID_POSIX_SUBTABLE	locmap.c	/^ILCID_POSIX_SUBTABLE(fr) {$/;"	f
ILCID_POSIX_SUBTABLE	locmap.c	/^ILCID_POSIX_SUBTABLE(ha) {$/;"	f
ILCID_POSIX_SUBTABLE	locmap.c	/^ILCID_POSIX_SUBTABLE(hr) {$/;"	f
ILCID_POSIX_SUBTABLE	locmap.c	/^ILCID_POSIX_SUBTABLE(it) {$/;"	f
ILCID_POSIX_SUBTABLE	locmap.c	/^ILCID_POSIX_SUBTABLE(iu) {$/;"	f
ILCID_POSIX_SUBTABLE	locmap.c	/^ILCID_POSIX_SUBTABLE(ko) {$/;"	f
ILCID_POSIX_SUBTABLE	locmap.c	/^ILCID_POSIX_SUBTABLE(ks) {         \/* We could add PK and CN too *\/$/;"	f
ILCID_POSIX_SUBTABLE	locmap.c	/^ILCID_POSIX_SUBTABLE(mn) {$/;"	f
ILCID_POSIX_SUBTABLE	locmap.c	/^ILCID_POSIX_SUBTABLE(ms) {$/;"	f
ILCID_POSIX_SUBTABLE	locmap.c	/^ILCID_POSIX_SUBTABLE(ne) {$/;"	f
ILCID_POSIX_SUBTABLE	locmap.c	/^ILCID_POSIX_SUBTABLE(nl) {$/;"	f
ILCID_POSIX_SUBTABLE	locmap.c	/^ILCID_POSIX_SUBTABLE(no) {$/;"	f
ILCID_POSIX_SUBTABLE	locmap.c	/^ILCID_POSIX_SUBTABLE(or_IN) {$/;"	f
ILCID_POSIX_SUBTABLE	locmap.c	/^ILCID_POSIX_SUBTABLE(pa) {$/;"	f
ILCID_POSIX_SUBTABLE	locmap.c	/^ILCID_POSIX_SUBTABLE(pt) {$/;"	f
ILCID_POSIX_SUBTABLE	locmap.c	/^ILCID_POSIX_SUBTABLE(qu) {$/;"	f
ILCID_POSIX_SUBTABLE	locmap.c	/^ILCID_POSIX_SUBTABLE(root) {$/;"	f
ILCID_POSIX_SUBTABLE	locmap.c	/^ILCID_POSIX_SUBTABLE(sd) {$/;"	f
ILCID_POSIX_SUBTABLE	locmap.c	/^ILCID_POSIX_SUBTABLE(se) {$/;"	f
ILCID_POSIX_SUBTABLE	locmap.c	/^ILCID_POSIX_SUBTABLE(sv) {$/;"	f
ILCID_POSIX_SUBTABLE	locmap.c	/^ILCID_POSIX_SUBTABLE(tg) {$/;"	f
ILCID_POSIX_SUBTABLE	locmap.c	/^ILCID_POSIX_SUBTABLE(ti) {$/;"	f
ILCID_POSIX_SUBTABLE	locmap.c	/^ILCID_POSIX_SUBTABLE(tzm) {$/;"	f
ILCID_POSIX_SUBTABLE	locmap.c	/^ILCID_POSIX_SUBTABLE(ur) {$/;"	f
ILCID_POSIX_SUBTABLE	locmap.c	/^ILCID_POSIX_SUBTABLE(uz) {$/;"	f
ILCID_POSIX_SUBTABLE	locmap.c	/^ILCID_POSIX_SUBTABLE(wen) {$/;"	f
ILCID_POSIX_SUBTABLE	locmap.c	/^ILCID_POSIX_SUBTABLE(zh) {$/;"	f
ILCID_POSIX_SUBTABLE	locmap.c	98;"	d	file:
ILcidPosixElement	locmap.c	/^typedef struct ILcidPosixElement$/;"	s	file:
ILcidPosixElement	locmap.c	/^} ILcidPosixElement;$/;"	t	typeref:struct:ILcidPosixElement	file:
ILcidPosixElement::hostID	locmap.c	/^    const uint32_t hostID;$/;"	m	struct:ILcidPosixElement	file:	access:public
ILcidPosixElement::posixID	locmap.c	/^    const char * const posixID;$/;"	m	struct:ILcidPosixElement	file:	access:public
ILcidPosixMap	locmap.c	/^typedef struct ILcidPosixMap$/;"	s	file:
ILcidPosixMap	locmap.c	/^} ILcidPosixMap;$/;"	t	typeref:struct:ILcidPosixMap	file:
ILcidPosixMap::numRegions	locmap.c	/^    const uint32_t numRegions;$/;"	m	struct:ILcidPosixMap	file:	access:public
ILcidPosixMap::regionMaps	locmap.c	/^    const struct ILcidPosixElement* const regionMaps;$/;"	m	struct:ILcidPosixMap	file:	access:public
IMPTABLEVELS_COLUMNS	ubidi.c	907;"	d	file:
IMPTABLEVELS_RES	ubidi.c	908;"	d	file:
IMPTABPROPS_COLUMNS	ubidi.c	812;"	d	file:
IMPTABPROPS_RES	ubidi.c	813;"	d	file:
INC	usc_impl.c	26;"	d	file:
INC1	usc_impl.c	27;"	d	file:
INCLUSIONS	uniset_props.cpp	/^static UnicodeSet *INCLUSIONS[UPROPS_SRC_COUNT] = { NULL }; \/\/ cached getInclusions()$/;"	v	file:
INDEX_LOCALE_NAME	uresbund.c	2229;"	d	file:
INDEX_ODD_BIT	ubidiimp.h	145;"	d
INDEX_TAG	uresbund.c	2230;"	d	file:
INDIC_BLOCK_BEGIN	ucnvisci.c	45;"	d	file:
INDIC_BLOCK_END	ucnvisci.c	46;"	d	file:
INDIC_RANGE	ucnvisci.c	47;"	d	file:
INHSWAP	uprops.h	/^    INHSWAP =0x206a,$/;"	e	enum:__anon90
INITIAL_BIAS	punycode.c	64;"	d	file:
INITIAL_CAPACITY	unorm_it.c	/^    INITIAL_CAPACITY=100$/;"	e	enum:__anon5	file:
INITIAL_N	punycode.c	65;"	d	file:
INT16_MAX	unicode/umachine.h	161;"	d
INT16_MIN	unicode/umachine.h	148;"	d
INT32_MAX	unicode/umachine.h	165;"	d
INT32_MIN	unicode/umachine.h	152;"	d
INT64_C	unicode/pwin32.h	107;"	d
INT64_C	unicode/umachine.h	190;"	d
INT8_MAX	unicode/umachine.h	157;"	d
INT8_MIN	unicode/umachine.h	144;"	d
INTERSECTION	uniset.cpp	36;"	d	file:
INTERSECTION	uniset_props.cpp	64;"	d	file:
INVALID_2022	ucnv2022.c	/^        INVALID_2022 = -1, \/*Doesn't correspond to a valid iso 2022 escape sequence*\/$/;"	e	enum:__anon69	file:
INVALID_CHAR	ucnvisci.c	35;"	d	file:
INVALID_STATE	ucnv2022.c	/^        INVALID_STATE=-1,$/;"	e	enum:__anon65	file:
IRRELEVANT	ushape.c	52;"	d	file:
ISALPHA	uloc_tag.c	54;"	d	file:
ISCIILang	ucnvisci.c	/^}ISCIILang;$/;"	t	typeref:enum:__anon14	file:
ISCII_CNV_PREFIX	ucnvisci.c	119;"	d	file:
ISCII_DANDA	ucnvisci.c	42;"	d	file:
ISCII_HALANT	ucnvisci.c	41;"	d	file:
ISCII_INV	ucnvisci.c	43;"	d	file:
ISCII_NUKTA	ucnvisci.c	40;"	d	file:
ISCII_VOWEL_SIGN_E	ucnvisci.c	44;"	d	file:
ISNUMERIC	uloc_tag.c	55;"	d	file:
ISO2022State	ucnv2022.c	/^typedef struct ISO2022State {$/;"	s	file:
ISO2022State	ucnv2022.c	/^} ISO2022State;$/;"	t	typeref:struct:ISO2022State	file:
ISO2022State::cs	ucnv2022.c	/^    int8_t cs[4];       \/* charset number for SI (G0)\/SO (G1)\/SS2 (G2)\/SS3 (G3) *\/$/;"	m	struct:ISO2022State	file:	access:public
ISO2022State::g	ucnv2022.c	/^    int8_t g;           \/* 0..3 for G0..G3 (SI\/SO\/SS2\/SS3) *\/$/;"	m	struct:ISO2022State	file:	access:public
ISO2022State::prevG	ucnv2022.c	/^    int8_t prevG;       \/* g before single shift (SS2 or SS3) *\/$/;"	m	struct:ISO2022State	file:	access:public
ISO8859_1	ucnv2022.c	/^        ISO8859_1 = 1 ,$/;"	e	enum:__anon65	file:
ISO8859_7	ucnv2022.c	/^        ISO8859_7 = 2 ,$/;"	e	enum:__anon65	file:
ISO_2022	ucnv2022.c	/^    ISO_2022=0,$/;"	e	enum:__anon70	file:
ISO_2022_CN	ucnv2022.c	/^    ISO_2022_CN=3$/;"	e	enum:__anon70	file:
ISO_2022_JP	ucnv2022.c	/^    ISO_2022_JP=1,$/;"	e	enum:__anon70	file:
ISO_2022_KR	ucnv2022.c	/^    ISO_2022_KR=2,$/;"	e	enum:__anon70	file:
ISO_IR_165	ucnv2022.c	/^        ISO_IR_165=2,$/;"	e	enum:__anon65	file:
ISO_IR_165_STR	ucnv2022.c	/^static const char ISO_IR_165_STR[] = "\\x1B\\x24\\x29\\x45";$/;"	v	file:
IS_2022_CONTROL	ucnv2022.c	113;"	d	file:
IS_ASCII_ROUNDTRIP	ucnvmbcs.h	291;"	d
IS_BASIC	punycode.c	80;"	d	file:
IS_BASIC_UPPERCASE	punycode.c	81;"	d	file:
IS_BIDI_CONTROL_CHAR	ubidiimp.h	172;"	d
IS_COMBINING	ubidiwrt.c	49;"	d	file:
IS_DEFAULT_LEVEL	ubidiimp.h	106;"	d
IS_EMPTY_OR_DELETED	uhash.c	115;"	d	file:
IS_EVEN	uiter.cpp	26;"	d	file:
IS_EVEN_RUN	ubidiimp.h	154;"	d
IS_JP_DBCS	ucnv2022.c	155;"	d	file:
IS_MAP	umapfile.c	37;"	d	file:
IS_MAP	umapfile.c	41;"	d	file:
IS_MAP	umapfile.c	73;"	d	file:
IS_ODD_RUN	ubidiimp.h	153;"	d
IS_POINTER_EVEN	uiter.cpp	27;"	d	file:
IS_PRIVATE_USE	ucnv_cnv.h	269;"	d
IS_STRING	unicode/usetiter.h	/^    enum { IS_STRING = -1 };$/;"	e	enum:UnicodeSetIterator::__anon126
IS_THAT_ASCII_CONTROL_SPACE	uchar.c	206;"	d	file:
IS_THAT_CONTROL_SPACE	uchar.c	202;"	d	file:
IS_UTF16	ucnv_u16.c	1320;"	d	file:
IS_UTF16BE	ucnv_u16.c	1318;"	d	file:
IS_UTF16LE	ucnv_u16.c	1319;"	d	file:
IS_VALID_PARA	ubidiimp.h	302;"	d
IS_VALID_PARA_OR_LINE	ubidiimp.h	303;"	d
IX_COUNT	normalizer2impl.h	/^        IX_COUNT$/;"	e	enum:Normalizer2Impl::__anon48
IX_EXTRA_DATA_OFFSET	normalizer2impl.h	/^        IX_EXTRA_DATA_OFFSET,$/;"	e	enum:Normalizer2Impl::__anon48
IX_LIMIT_NO_NO	normalizer2impl.h	/^        IX_LIMIT_NO_NO,$/;"	e	enum:Normalizer2Impl::__anon48
IX_MIN_COMP_NO_MAYBE_CP	normalizer2impl.h	/^        IX_MIN_COMP_NO_MAYBE_CP,$/;"	e	enum:Normalizer2Impl::__anon48
IX_MIN_DECOMP_NO_CP	normalizer2impl.h	/^        IX_MIN_DECOMP_NO_CP,$/;"	e	enum:Normalizer2Impl::__anon48
IX_MIN_MAYBE_YES	normalizer2impl.h	/^        IX_MIN_MAYBE_YES,$/;"	e	enum:Normalizer2Impl::__anon48
IX_MIN_NO_NO	normalizer2impl.h	/^        IX_MIN_NO_NO,$/;"	e	enum:Normalizer2Impl::__anon48
IX_MIN_YES_NO	normalizer2impl.h	/^        IX_MIN_YES_NO,$/;"	e	enum:Normalizer2Impl::__anon48
IX_NORM_TRIE_OFFSET	normalizer2impl.h	/^        IX_NORM_TRIE_OFFSET,$/;"	e	enum:Normalizer2Impl::__anon48
IX_RESERVED14	normalizer2impl.h	/^        IX_RESERVED14,$/;"	e	enum:Normalizer2Impl::__anon48
IX_RESERVED15	normalizer2impl.h	/^        IX_RESERVED15,$/;"	e	enum:Normalizer2Impl::__anon48
IX_RESERVED2_OFFSET	normalizer2impl.h	/^        IX_RESERVED2_OFFSET,$/;"	e	enum:Normalizer2Impl::__anon48
IX_RESERVED3_OFFSET	normalizer2impl.h	/^        IX_RESERVED3_OFFSET,$/;"	e	enum:Normalizer2Impl::__anon48
IX_RESERVED4_OFFSET	normalizer2impl.h	/^        IX_RESERVED4_OFFSET,$/;"	e	enum:Normalizer2Impl::__anon48
IX_RESERVED5_OFFSET	normalizer2impl.h	/^        IX_RESERVED5_OFFSET,$/;"	e	enum:Normalizer2Impl::__anon48
IX_RESERVED6_OFFSET	normalizer2impl.h	/^        IX_RESERVED6_OFFSET,$/;"	e	enum:Normalizer2Impl::__anon48
IX_TOTAL_SIZE	normalizer2impl.h	/^        IX_TOTAL_SIZE,$/;"	e	enum:Normalizer2Impl::__anon48
I_DEFAULT_LENGTH	uloc.c	1607;"	d	file:
ImpAct	ubidi.c	/^typedef uint8_t ImpAct[];$/;"	t	file:
ImpTab	ubidi.c	/^typedef uint8_t ImpTab[][IMPTABLEVELS_COLUMNS];$/;"	t	file:
ImpTabPair	ubidi.c	/^typedef struct ImpTabPair {$/;"	s	file:
ImpTabPair	ubidi.c	/^} ImpTabPair;$/;"	t	typeref:struct:ImpTabPair	file:
ImpTabPair::pImpAct	ubidi.c	/^    const void * pImpAct[2];$/;"	m	struct:ImpTabPair	file:	access:public
ImpTabPair::pImpTab	ubidi.c	/^    const void * pImpTab[2];$/;"	m	struct:ImpTabPair	file:	access:public
IndianCalendar	unicode/urename.h	1971;"	d
IndicClassTable	unicode/urename.h	1972;"	d
IndicOpenTypeLayoutEngine	unicode/urename.h	1973;"	d
IndicRearrangementProcessor	unicode/urename.h	1974;"	d
IndicReordering	unicode/urename.h	1975;"	d
InitialTimeZoneRule	unicode/urename.h	1976;"	d
InputText	unicode/urename.h	1977;"	d
InsertPoints	ubidiimp.h	/^typedef struct InsertPoints {$/;"	s
InsertPoints	ubidiimp.h	/^} InsertPoints;$/;"	t	typeref:struct:InsertPoints
InsertPoints::capacity	ubidiimp.h	/^    int32_t capacity;       \/* number of points allocated *\/$/;"	m	struct:InsertPoints	access:public
InsertPoints::confirmed	ubidiimp.h	/^    int32_t confirmed;      \/* number of points confirmed *\/$/;"	m	struct:InsertPoints	access:public
InsertPoints::errorCode	ubidiimp.h	/^    UErrorCode errorCode;   \/* for eventual memory shortage *\/$/;"	m	struct:InsertPoints	access:public
InsertPoints::points	ubidiimp.h	/^    Point *points;          \/* pointer to array of points *\/$/;"	m	struct:InsertPoints	access:public
InsertPoints::size	ubidiimp.h	/^    int32_t size;           \/* number of points used *\/$/;"	m	struct:InsertPoints	access:public
InstantiatorFn	mutex.h	/^typedef void *InstantiatorFn(const void *context, UErrorCode &errorCode);$/;"	t
IntProperty	uprops.cpp	/^struct IntProperty {$/;"	s	file:
IntProperty	uprops.cpp	/^struct IntProperty;$/;"	x	file:
IntProperty::column	uprops.cpp	/^    int32_t column;  \/\/ SRC_PROPSVEC column, or "source" if mask==0$/;"	m	struct:IntProperty	file:	access:public
IntProperty::getMaxValue	uprops.cpp	/^    IntPropertyGetMaxValue *getMaxValue;$/;"	m	struct:IntProperty	file:	access:public
IntProperty::getValue	uprops.cpp	/^    IntPropertyGetValue *getValue;$/;"	m	struct:IntProperty	file:	access:public
IntProperty::mask	uprops.cpp	/^    uint32_t mask;$/;"	m	struct:IntProperty	file:	access:public
IntProperty::shift	uprops.cpp	/^    int32_t shift;  \/\/ =maxValue if getMaxValueFromShift() is used$/;"	m	struct:IntProperty	file:	access:public
IntPropertyContext	uniset_props.cpp	/^} IntPropertyContext;$/;"	t	typeref:struct:__anon39	file:
IntPropertyGetMaxValue	uprops.cpp	/^typedef int32_t IntPropertyGetMaxValue(const IntProperty &prop, UProperty which);$/;"	t	file:
IntPropertyGetValue	uprops.cpp	/^typedef int32_t IntPropertyGetValue(const IntProperty &prop, UChar32 c, UProperty which);$/;"	t	file:
IntegralPartSubstitution	unicode/urename.h	1978;"	d
IrrelevantPos	ushape.c	/^static const uint8_t IrrelevantPos[] = {$/;"	v	file:
IslamicCalendar	unicode/urename.h	1979;"	d
IteratedChar	unicode/urename.h	1980;"	d
JAMO_L	normalizer2impl.h	/^        JAMO_L=1,$/;"	e	enum:Normalizer2Impl::__anon47
JAMO_L_BASE	normalizer2impl.h	/^        JAMO_L_BASE=0x1100,     \/* "lead" jamo *\/$/;"	e	enum:Hangul::__anon45
JAMO_L_COUNT	normalizer2impl.h	/^        JAMO_L_COUNT=19,$/;"	e	enum:Hangul::__anon45
JAMO_T_BASE	normalizer2impl.h	/^        JAMO_T_BASE=0x11a7,     \/* "trail" jamo *\/$/;"	e	enum:Hangul::__anon45
JAMO_T_COUNT	normalizer2impl.h	/^        JAMO_T_COUNT=28,$/;"	e	enum:Hangul::__anon45
JAMO_VT	normalizer2impl.h	/^        JAMO_VT=0xff00,$/;"	e	enum:Normalizer2Impl::__anon47
JAMO_VT_COUNT	normalizer2impl.h	/^        JAMO_VT_COUNT=JAMO_V_COUNT*JAMO_T_COUNT,$/;"	e	enum:Hangul::__anon45
JAMO_V_BASE	normalizer2impl.h	/^        JAMO_V_BASE=0x1161,     \/* "vowel" jamo *\/$/;"	e	enum:Hangul::__anon45
JAMO_V_COUNT	normalizer2impl.h	/^        JAMO_V_COUNT=21,$/;"	e	enum:Hangul::__anon45
JEF_SI_CHAR	ucnvmbcs.c	412;"	d	file:
JEF_SO_CHAR	ucnvmbcs.c	411;"	d	file:
JIPS_SI_CHAR_1	ucnvmbcs.c	416;"	d	file:
JIPS_SI_CHAR_2	ucnvmbcs.c	417;"	d	file:
JIPS_SO_CHAR_1	ucnvmbcs.c	414;"	d	file:
JIPS_SO_CHAR_2	ucnvmbcs.c	415;"	d	file:
JISX201	ucnv2022.c	/^        JISX201  = 3,$/;"	e	enum:__anon65	file:
JISX208	ucnv2022.c	/^        JISX208 = 4,$/;"	e	enum:__anon65	file:
JISX212	ucnv2022.c	/^        JISX212 = 5,$/;"	e	enum:__anon65	file:
JapaneseCalendar	unicode/urename.h	1981;"	d
KANNADA	ucnvisci.c	/^    KANNADA,$/;"	e	enum:__anon13	file:
KEIS_SI_CHAR_1	ucnvmbcs.c	408;"	d	file:
KEIS_SI_CHAR_2	ucnvmbcs.c	409;"	d	file:
KEIS_SO_CHAR_1	ucnvmbcs.c	406;"	d	file:
KEIS_SO_CHAR_2	ucnvmbcs.c	407;"	d	file:
KEYMAP	uloc_tag.c	551;"	d	file:
KEYTYPEDATA	uloc_tag.c	550;"	d	file:
KIND_ANY	servloc.h	/^        KIND_ANY = -1$/;"	e	enum:LocaleKey::__anon8
KND	ucnvisci.c	/^    KND = 0x48,$/;"	e	enum:__anon14	file:
KND_MASK	ucnvisci.c	/^    KND_MASK =0x04,$/;"	e	enum:__anon15	file:
KSC5601	ucnv2022.c	/^        KSC5601 =7,$/;"	e	enum:__anon65	file:
KSM	ucnvisci.c	/^    KSM = 0x75,$/;"	e	enum:__anon14	file:
KernTable	unicode/urename.h	1982;"	d
KeywordEnumeration	locid.cpp	/^    KeywordEnumeration(const char *keys, int32_t keywordLen, int32_t currentIndex, UErrorCode &status)$/;"	f	class:KeywordEnumeration	access:public	signature:(const char *keys, int32_t keywordLen, int32_t currentIndex, UErrorCode &status)
KeywordEnumeration	locid.cpp	/^class KeywordEnumeration : public StringEnumeration {$/;"	c	file:	inherits:StringEnumeration
KeywordEnumeration	unicode/urename.h	1983;"	d
KeywordEnumeration::KeywordEnumeration	locid.cpp	/^    KeywordEnumeration(const char *keys, int32_t keywordLen, int32_t currentIndex, UErrorCode &status)$/;"	f	class:KeywordEnumeration	access:public	signature:(const char *keys, int32_t keywordLen, int32_t currentIndex, UErrorCode &status)
KeywordEnumeration::clone	locid.cpp	/^    virtual StringEnumeration * clone() const$/;"	f	class:KeywordEnumeration	access:public	signature:() const
KeywordEnumeration::count	locid.cpp	/^    virtual int32_t count(UErrorCode &\/*status*\/) const {$/;"	f	class:KeywordEnumeration	access:public	signature:(UErrorCode & ) const
KeywordEnumeration::currUSKey	locid.cpp	/^    UnicodeString currUSKey;$/;"	m	class:KeywordEnumeration	file:	access:private
KeywordEnumeration::current	locid.cpp	/^    char *current;$/;"	m	class:KeywordEnumeration	file:	access:private
KeywordEnumeration::fgClassID	locid.cpp	/^    static const char fgClassID;\/* Warning this is used beyond the typical RTTI usage. *\/$/;"	m	class:KeywordEnumeration	file:	access:private
KeywordEnumeration::fgClassID	locid.cpp	/^const char KeywordEnumeration::fgClassID = '\\0';$/;"	m	class:KeywordEnumeration	file:
KeywordEnumeration::getDynamicClassID	locid.cpp	/^    virtual UClassID getDynamicClassID(void) const { return getStaticClassID(); }$/;"	f	class:KeywordEnumeration	access:public	signature:(void) const
KeywordEnumeration::getStaticClassID	locid.cpp	/^    static UClassID U_EXPORT2 getStaticClassID(void) { return (UClassID)&fgClassID; }$/;"	f	class:KeywordEnumeration	access:public	signature:(void)
KeywordEnumeration::keywords	locid.cpp	/^    char *keywords;$/;"	m	class:KeywordEnumeration	file:	access:private
KeywordEnumeration::length	locid.cpp	/^    int32_t length;$/;"	m	class:KeywordEnumeration	file:	access:private
KeywordEnumeration::next	locid.cpp	/^    virtual const char* next(int32_t* resultLength, UErrorCode& status) {$/;"	f	class:KeywordEnumeration	access:public	signature:(int32_t* resultLength, UErrorCode& status)
KeywordEnumeration::reset	locid.cpp	/^    virtual void reset(UErrorCode& \/*status*\/) {$/;"	f	class:KeywordEnumeration	access:public	signature:(UErrorCode& )
KeywordEnumeration::snext	locid.cpp	/^    virtual const UnicodeString* snext(UErrorCode& status) {$/;"	f	class:KeywordEnumeration	access:public	signature:(UErrorCode& status)
KeywordEnumeration::~KeywordEnumeration	locid.cpp	/^    virtual ~KeywordEnumeration() {$/;"	f	class:KeywordEnumeration	access:public	signature:()
KeywordStruct	uloc.c	/^} KeywordStruct;$/;"	t	typeref:struct:__anon71	file:
KhmerClassTable	unicode/urename.h	1984;"	d
KhmerOpenTypeLayoutEngine	unicode/urename.h	1985;"	d
KhmerReordering	unicode/urename.h	1986;"	d
L	ubidiimp.h	/^    L=  U_LEFT_TO_RIGHT,$/;"	e	enum:__anon82
LAMALEF_SPACE_SUB	ushape.c	66;"	d	file:
LAMTYPE	ushape.c	53;"	d	file:
LAM_CHAR	ushape.c	70;"	d	file:
LANG	uloc_tag.c	1631;"	d	file:
LANGUAGES	uloc.c	/^static const char * const LANGUAGES[] = {$/;"	v	file:
LANGUAGES_3	uloc.c	/^static const char * const LANGUAGES_3[] = {$/;"	v	file:
LANGUAGE_LCID	locmap.h	29;"	d
LANG_UND	uloc_tag.c	/^static const char* LANG_UND = "und";$/;"	v	file:
LANG_UND_LEN	uloc_tag.c	64;"	d	file:
LATIN1	ucnv2022.c	/^        LATIN1,$/;"	e	enum:__anon67	file:
LATIN1_UNROLL_FROM_UNICODE	ucnvlat1.c	25;"	d	file:
LDMLEXT	uloc_tag.c	47;"	d	file:
LECharMapper	unicode/urename.h	1987;"	d
LEFontInstance	unicode/urename.h	1988;"	d
LEGlyphFilter	unicode/urename.h	1989;"	d
LEGlyphStorage	unicode/urename.h	1990;"	d
LEInsertionCallback	unicode/urename.h	1991;"	d
LEInsertionList	unicode/urename.h	1992;"	d
LENGTHOF	locid.cpp	42;"	d	file:
LENGTHOF	uchar.c	34;"	d	file:
LENGTHOF	ucnv2022.c	44;"	d	file:
LENGTHOF	ucnv_lmb.c	44;"	d	file:
LENGTHOF	udata.cpp	73;"	d	file:
LENGTHOF	unames.c	31;"	d	file:
LENGTHOF	uniset_props.cpp	50;"	d	file:
LENGTHOF	unorm.cpp	40;"	d	file:
LENGTHOF	unormcmp.cpp	35;"	d	file:
LENGTHOF	uprops.cpp	38;"	d	file:
LENGTHOF	uresdata.c	34;"	d	file:
LENGTHOF	utrie2_builder.c	36;"	d	file:
LENGTHOF	uts46.cpp	27;"	d	file:
LF	ubidiimp.h	127;"	d
LF	ucnv2022.c	82;"	d	file:
LF	ucnvisci.c	49;"	d	file:
LF	uprops.h	/^    LF      =0x000a,$/;"	e	enum:__anon90
LIB_PREFIX	umapfile.c	58;"	d	file:
LIB_SUFFIX	umapfile.c	59;"	d	file:
LIMIT_INC	usc_impl.c	25;"	d	file:
LINEAR	ucnvmbcs.c	370;"	d	file:
LINEAR_18030	ucnvmbcs.c	366;"	d	file:
LINEAR_18030_BASE	ucnvmbcs.c	368;"	d	file:
LINES_PER_GROUP	unames.c	37;"	d	file:
LINKL	ushape.c	56;"	d	file:
LINKR	ushape.c	55;"	d	file:
LMBCSClone	ucnv_lmb.c	/^typedef struct LMBCSClone {$/;"	s	file:
LMBCSClone	ucnv_lmb.c	/^} LMBCSClone;$/;"	t	typeref:struct:LMBCSClone	file:
LMBCSClone::cnv	ucnv_lmb.c	/^    UConverter cnv;$/;"	m	struct:LMBCSClone	file:	access:public
LMBCSClone::lmbcs	ucnv_lmb.c	/^    UConverterDataLMBCS lmbcs;$/;"	m	struct:LMBCSClone	file:	access:public
LMBCSConversionWorker	ucnv_lmb.c	/^LMBCSConversionWorker ($/;"	f	file:	signature:( UConverterDataLMBCS * extraInfo, ulmbcs_byte_t group, ulmbcs_byte_t * pStartLMBCS, UChar * pUniChar, ulmbcs_byte_t * lastConverterIndex, UBool * groups_tried )
LMBCSConvertUni	ucnv_lmb.c	/^LMBCSConvertUni(ulmbcs_byte_t * pLMBCS, UChar uniChar)  $/;"	f	file:	signature:(ulmbcs_byte_t * pLMBCS, UChar uniChar)
LNnn	unicode/urename.h	53;"	d
LOCALE_EXT_SEP	uloc_tag.c	50;"	d	file:
LOCALE_KEYWORD_SEP	uloc_tag.c	51;"	d	file:
LOCALE_KEY_TYPE_SEP	uloc_tag.c	52;"	d	file:
LOCALE_SEP	uloc_tag.c	49;"	d	file:
LOCALSVC_H	localsvc.h	9;"	d
LOCAL_CFLAGS	Android.mk	/^    LOCAL_CFLAGS := $(local_cflags)$/;"	m
LOCAL_CFLAGS	Android.mk	/^LOCAL_CFLAGS := $(local_cflags) -DPIC -fPIC$/;"	m
LOCAL_C_INCLUDES	Android.mk	/^    LOCAL_C_INCLUDES := $(c_includes)$/;"	m
LOCAL_C_INCLUDES	Android.mk	/^LOCAL_C_INCLUDES := $(c_includes) \\$/;"	m
LOCAL_MODULE	Android.mk	/^    LOCAL_MODULE := libicuuc$/;"	m
LOCAL_MODULE	Android.mk	/^LOCAL_MODULE := libicuuc$/;"	m
LOCAL_MODULE_TAGS	Android.mk	/^    LOCAL_MODULE_TAGS := optional$/;"	m
LOCAL_MODULE_TAGS	Android.mk	/^LOCAL_MODULE_TAGS := optional$/;"	m
LOCAL_PATH	Android.mk	/^LOCAL_PATH:= $(call my-dir)$/;"	m
LOCAL_RTTI_FLAG	Android.mk	/^LOCAL_RTTI_FLAG := -frtti$/;"	m
LOCAL_SRC_FILES	Android.mk	/^    LOCAL_SRC_FILES := $(src_files)$/;"	m
LOCAL_SRC_FILES	Android.mk	/^LOCAL_SRC_FILES := $(src_files)$/;"	m
LOCBASED_H	locbased.h	12;"	d
LOCID_H	unicode/locid.h	30;"	d
LOCMAP_H	locmap.h	25;"	d
LOCUTIL_H	locutil.h	10;"	d
LONG_SPAN	unisetspan.h	/^        LONG_SPAN=0xfe,$/;"	e	enum:UnicodeSetStringSpan::__anon20
LOWER_CASE_DELTA	uidna.cpp	42;"	d	file:
LOWER_P	uniset.cpp	42;"	d	file:
LOWER_P	uniset_props.cpp	70;"	d	file:
LOWER_U	uniset.cpp	38;"	d	file:
LOWER_U	uniset_props.cpp	66;"	d	file:
LOWER_U	util.cpp	/^static const UChar LOWER_U    = 0x0075; \/*u*\/$/;"	v	file:
LRE	ubidiimp.h	/^    LRE=U_LEFT_TO_RIGHT_EMBEDDING,$/;"	e	enum:__anon82
LRE_CHAR	ubidiimp.h	/^    LRE_CHAR=0x202a,$/;"	e	enum:__anon84
LRM_AFTER	ubidiimp.h	/^    LRM_AFTER=2,$/;"	e	enum:__anon83
LRM_BEFORE	ubidiimp.h	/^    LRM_BEFORE=1,$/;"	e	enum:__anon83
LRM_CHAR	ubidiimp.h	/^    LRM_CHAR,$/;"	e	enum:__anon84
LRO	ubidiimp.h	/^    LRO=U_LEFT_TO_RIGHT_OVERRIDE,$/;"	e	enum:__anon82
LRO_CHAR	ubidiimp.h	/^    LRO_CHAR,$/;"	e	enum:__anon84
LXUtilities	unicode/urename.h	1993;"	d
L_EN_ES_CS_ET_ON_BN_NSM_MASK	uts46.cpp	/^const uint32_t L_EN_ES_CS_ET_ON_BN_NSM_MASK=L_EN_MASK|ES_CS_ET_ON_BN_NSM_MASK;$/;"	v
L_EN_MASK	uts46.cpp	/^const uint32_t L_EN_MASK=L_MASK|U_MASK(U_EUROPEAN_NUMBER);$/;"	v
L_MASK	uts46.cpp	/^const uint32_t L_MASK=U_MASK(U_LEFT_TO_RIGHT);$/;"	v
L_R_AL_MASK	uts46.cpp	/^const uint32_t L_R_AL_MASK=L_MASK|R_AL_MASK;$/;"	v
LanguageBreakEngine	brkeng.cpp	/^LanguageBreakEngine::LanguageBreakEngine() {$/;"	f	class:LanguageBreakEngine	signature:()
LanguageBreakEngine	brkeng.h	/^  LanguageBreakEngine();$/;"	p	class:LanguageBreakEngine	access:public	signature:()
LanguageBreakEngine	brkeng.h	/^class LanguageBreakEngine : public UMemory {$/;"	c	inherits:UMemory
LanguageBreakEngine	unicode/rbbi.h	/^class  LanguageBreakEngine;$/;"	x
LanguageBreakEngine	unicode/urename.h	1994;"	d
LanguageBreakEngine::LanguageBreakEngine	brkeng.cpp	/^LanguageBreakEngine::LanguageBreakEngine() {$/;"	f	class:LanguageBreakEngine	signature:()
LanguageBreakEngine::LanguageBreakEngine	brkeng.h	/^  LanguageBreakEngine();$/;"	p	class:LanguageBreakEngine	access:public	signature:()
LanguageBreakEngine::findBreaks	brkeng.h	/^  virtual int32_t findBreaks( UText *text,$/;"	p	class:LanguageBreakEngine	access:public	signature:( UText *text, int32_t startPos, int32_t endPos, UBool reverse, int32_t breakType, UStack &foundBreaks ) const
LanguageBreakEngine::handles	brkeng.h	/^  virtual UBool handles(UChar32 c, int32_t breakType) const = 0;$/;"	p	class:LanguageBreakEngine	access:public	signature:(UChar32 c, int32_t breakType) const
LanguageBreakEngine::~LanguageBreakEngine	brkeng.cpp	/^LanguageBreakEngine::~LanguageBreakEngine() {$/;"	f	class:LanguageBreakEngine	signature:()
LanguageBreakEngine::~LanguageBreakEngine	brkeng.h	/^  virtual ~LanguageBreakEngine();$/;"	p	class:LanguageBreakEngine	access:public	signature:()
LanguageBreakFactory	brkeng.cpp	/^LanguageBreakFactory::LanguageBreakFactory() {$/;"	f	class:LanguageBreakFactory	signature:()
LanguageBreakFactory	brkeng.h	/^  LanguageBreakFactory();$/;"	p	class:LanguageBreakFactory	access:public	signature:()
LanguageBreakFactory	brkeng.h	/^class LanguageBreakFactory : public UMemory {$/;"	c	inherits:UMemory
LanguageBreakFactory	unicode/urename.h	1995;"	d
LanguageBreakFactory::LanguageBreakFactory	brkeng.cpp	/^LanguageBreakFactory::LanguageBreakFactory() {$/;"	f	class:LanguageBreakFactory	signature:()
LanguageBreakFactory::LanguageBreakFactory	brkeng.h	/^  LanguageBreakFactory();$/;"	p	class:LanguageBreakFactory	access:public	signature:()
LanguageBreakFactory::getEngineFor	brkeng.h	/^  virtual const LanguageBreakEngine *getEngineFor(UChar32 c, int32_t breakType) = 0;$/;"	p	class:LanguageBreakFactory	access:public	signature:(UChar32 c, int32_t breakType)
LanguageBreakFactory::~LanguageBreakFactory	brkeng.cpp	/^LanguageBreakFactory::~LanguageBreakFactory() {$/;"	f	class:LanguageBreakFactory	signature:()
LanguageBreakFactory::~LanguageBreakFactory	brkeng.h	/^  virtual ~LanguageBreakFactory();$/;"	p	class:LanguageBreakFactory	access:public	signature:()
LayoutEngine	unicode/urename.h	1996;"	d
LevState	ubidi.c	/^} LevState;$/;"	t	typeref:struct:__anon18	file:
LigatureSubstitutionProcessor	unicode/urename.h	1997;"	d
LigatureSubstitutionSubtable	unicode/urename.h	1998;"	d
LocDataParser	unicode/urename.h	1999;"	d
LocalArray	unicode/localpointer.h	/^    explicit LocalArray(T *p=NULL) : LocalPointerBase<T>(p) {}$/;"	f	class:LocalArray	access:public	signature:(T *p=NULL)
LocalArray	unicode/localpointer.h	/^class LocalArray : public LocalPointerBase<T> {$/;"	c	inherits:LocalPointerBase
LocalArray::LocalArray	unicode/localpointer.h	/^    explicit LocalArray(T *p=NULL) : LocalPointerBase<T>(p) {}$/;"	f	class:LocalArray	access:public	signature:(T *p=NULL)
LocalArray::adoptInstead	unicode/localpointer.h	/^    void adoptInstead(T *p) {$/;"	f	class:LocalArray	access:public	signature:(T *p)
LocalArray::operator []	unicode/localpointer.h	/^    T &operator[](ptrdiff_t i) const { return LocalPointerBase<T>::ptr[i]; }$/;"	f	class:LocalArray	access:public	signature:(ptrdiff_t i) const
LocalArray::~LocalArray	unicode/localpointer.h	/^    ~LocalArray() {$/;"	f	class:LocalArray	access:public	signature:()
LocalMemory	cmemory.h	/^    explicit LocalMemory(T *p=NULL) : LocalPointerBase<T>(p) {}$/;"	f	class:LocalMemory	access:public	signature:(T *p=NULL)
LocalMemory	cmemory.h	/^class LocalMemory : public LocalPointerBase<T> {$/;"	c	inherits:LocalPointerBase
LocalMemory::LocalMemory	cmemory.h	/^    explicit LocalMemory(T *p=NULL) : LocalPointerBase<T>(p) {}$/;"	f	class:LocalMemory	access:public	signature:(T *p=NULL)
LocalMemory::adoptInstead	cmemory.h	/^    void adoptInstead(T *p) {$/;"	f	class:LocalMemory	access:public	signature:(T *p)
LocalMemory::allocateInsteadAndCopy	cmemory.h	/^    inline T *allocateInsteadAndCopy(int32_t newCapacity=1, int32_t length=0);$/;"	p	class:LocalMemory	access:public	signature:(int32_t newCapacity=1, int32_t length=0)
LocalMemory::allocateInsteadAndCopy	cmemory.h	/^inline T *LocalMemory<T>::allocateInsteadAndCopy(int32_t newCapacity, int32_t length) {$/;"	f	class:LocalMemory	signature:(int32_t newCapacity, int32_t length)
LocalMemory::allocateInsteadAndReset	cmemory.h	/^    inline T *allocateInsteadAndReset(int32_t newCapacity=1);$/;"	p	class:LocalMemory	access:public	signature:(int32_t newCapacity=1)
LocalMemory::allocateInsteadAndReset	cmemory.h	/^inline T *LocalMemory<T>::allocateInsteadAndReset(int32_t newCapacity) {$/;"	f	class:LocalMemory	signature:(int32_t newCapacity)
LocalMemory::operator []	cmemory.h	/^    T &operator[](ptrdiff_t i) const { return LocalPointerBase<T>::ptr[i]; }$/;"	f	class:LocalMemory	access:public	signature:(ptrdiff_t i) const
LocalMemory::~LocalMemory	cmemory.h	/^    ~LocalMemory() {$/;"	f	class:LocalMemory	access:public	signature:()
LocalPointer	unicode/localpointer.h	/^    explicit LocalPointer(T *p=NULL) : LocalPointerBase<T>(p) {}$/;"	f	class:LocalPointer	access:public	signature:(T *p=NULL)
LocalPointer	unicode/localpointer.h	/^class LocalPointer : public LocalPointerBase<T> {$/;"	c	inherits:LocalPointerBase
LocalPointer::LocalPointer	unicode/localpointer.h	/^    explicit LocalPointer(T *p=NULL) : LocalPointerBase<T>(p) {}$/;"	f	class:LocalPointer	access:public	signature:(T *p=NULL)
LocalPointer::adoptInstead	unicode/localpointer.h	/^    void adoptInstead(T *p) {$/;"	f	class:LocalPointer	access:public	signature:(T *p)
LocalPointer::~LocalPointer	unicode/localpointer.h	/^    ~LocalPointer() {$/;"	f	class:LocalPointer	access:public	signature:()
LocalPointerBase	unicode/localpointer.h	/^    LocalPointerBase(const LocalPointerBase &other);$/;"	p	class:LocalPointerBase	access:private	signature:(const LocalPointerBase &other)
LocalPointerBase	unicode/localpointer.h	/^    explicit LocalPointerBase(T *p=NULL) : ptr(p) {}$/;"	f	class:LocalPointerBase	access:public	signature:(T *p=NULL)
LocalPointerBase	unicode/localpointer.h	/^class LocalPointerBase {$/;"	c
LocalPointerBase::LocalPointerBase	unicode/localpointer.h	/^    LocalPointerBase(const LocalPointerBase &other);$/;"	p	class:LocalPointerBase	access:private	signature:(const LocalPointerBase &other)
LocalPointerBase::LocalPointerBase	unicode/localpointer.h	/^    explicit LocalPointerBase(T *p=NULL) : ptr(p) {}$/;"	f	class:LocalPointerBase	access:public	signature:(T *p=NULL)
LocalPointerBase::adoptInstead	unicode/localpointer.h	/^    void adoptInstead(T *p) {$/;"	f	class:LocalPointerBase	access:public	signature:(T *p)
LocalPointerBase::getAlias	unicode/localpointer.h	/^    T *getAlias() const { return ptr; }$/;"	f	class:LocalPointerBase	access:public	signature:() const
LocalPointerBase::isNull	unicode/localpointer.h	/^    UBool isNull() const { return ptr==NULL; }$/;"	f	class:LocalPointerBase	access:public	signature:() const
LocalPointerBase::isValid	unicode/localpointer.h	/^    UBool isValid() const { return ptr!=NULL; }$/;"	f	class:LocalPointerBase	access:public	signature:() const
LocalPointerBase::operator !=	unicode/localpointer.h	/^    bool operator!=(const LocalPointerBase &other);$/;"	p	class:LocalPointerBase	access:private	signature:(const LocalPointerBase &other)
LocalPointerBase::operator !=	unicode/localpointer.h	/^    bool operator!=(const T *other) const { return ptr!=other; }$/;"	f	class:LocalPointerBase	access:public	signature:(const T *other) const
LocalPointerBase::operator *	unicode/localpointer.h	/^    T &operator*() const { return *ptr; }$/;"	f	class:LocalPointerBase	access:public	signature:() const
LocalPointerBase::operator ->	unicode/localpointer.h	/^    T *operator->() const { return ptr; }$/;"	f	class:LocalPointerBase	access:public	signature:() const
LocalPointerBase::operator =	unicode/localpointer.h	/^    void operator=(const LocalPointerBase &other);$/;"	p	class:LocalPointerBase	access:private	signature:(const LocalPointerBase &other)
LocalPointerBase::operator ==	unicode/localpointer.h	/^    bool operator==(const LocalPointerBase &other);$/;"	p	class:LocalPointerBase	access:private	signature:(const LocalPointerBase &other)
LocalPointerBase::operator ==	unicode/localpointer.h	/^    bool operator==(const T *other) const { return ptr==other; }$/;"	f	class:LocalPointerBase	access:public	signature:(const T *other) const
LocalPointerBase::operator new	unicode/localpointer.h	/^    static void * U_EXPORT2 operator new(size_t size);$/;"	p	class:LocalPointerBase	access:private	signature:(size_t size)
LocalPointerBase::operator new	unicode/localpointer.h	/^    static void * U_EXPORT2 operator new(size_t, void *ptr);$/;"	p	class:LocalPointerBase	access:private	signature:(size_t, void *ptr)
LocalPointerBase::operator new[]	unicode/localpointer.h	/^    static void * U_EXPORT2 operator new[](size_t size);$/;"	p	class:LocalPointerBase	access:private	signature:(size_t size)
LocalPointerBase::orphan	unicode/localpointer.h	/^    T *orphan() {$/;"	f	class:LocalPointerBase	access:public	signature:()
LocalPointerBase::ptr	unicode/localpointer.h	/^    T *ptr;$/;"	m	class:LocalPointerBase	access:protected
LocalPointerBase::~LocalPointerBase	unicode/localpointer.h	/^    ~LocalPointerBase() { \/* delete ptr; *\/ }$/;"	f	class:LocalPointerBase	access:public	signature:()
Locale	locid.cpp	/^Locale::Locale( const   char * newLanguage,$/;"	f	class:Locale	signature:( const char * newLanguage, const char * newCountry, const char * newVariant, const char * newKeywords)
Locale	locid.cpp	/^Locale::Locale()$/;"	f	class:Locale	signature:()
Locale	locid.cpp	/^Locale::Locale(Locale::ELocaleType)$/;"	f	class:Locale	signature:(Locale::ELocaleType)
Locale	locid.cpp	/^Locale::Locale(const Locale &other)$/;"	f	class:Locale	signature:(const Locale &other)
Locale	unicode/locid.h	/^    Locale( const   char * language,$/;"	p	class:Locale	access:public	signature:( const char * language, const char * country = 0, const char * variant = 0, const char * keywordsAndValues = 0)
Locale	unicode/locid.h	/^    Locale();$/;"	p	class:Locale	access:public	signature:()
Locale	unicode/locid.h	/^    Locale(ELocaleType);$/;"	p	class:Locale	access:private	signature:(ELocaleType)
Locale	unicode/locid.h	/^    Locale(const    Locale& other);$/;"	p	class:Locale	access:public	signature:(const Locale& other)
Locale	unicode/locid.h	/^class U_COMMON_API Locale : public UObject {$/;"	c	inherits:UObject
Locale	unicode/unistr.h	/^class Locale;               \/\/ unicode\/locid.h$/;"	x
Locale	unicode/urename.h	2000;"	d
Locale::ELocaleType	unicode/locid.h	/^    enum ELocaleType {$/;"	g	class:Locale	access:private
Locale::Locale	locid.cpp	/^Locale::Locale( const   char * newLanguage,$/;"	f	class:Locale	signature:( const char * newLanguage, const char * newCountry, const char * newVariant, const char * newKeywords)
Locale::Locale	locid.cpp	/^Locale::Locale()$/;"	f	class:Locale	signature:()
Locale::Locale	locid.cpp	/^Locale::Locale(Locale::ELocaleType)$/;"	f	class:Locale	signature:(Locale::ELocaleType)
Locale::Locale	locid.cpp	/^Locale::Locale(const Locale &other)$/;"	f	class:Locale	signature:(const Locale &other)
Locale::Locale	unicode/locid.h	/^    Locale( const   char * language,$/;"	p	class:Locale	access:public	signature:( const char * language, const char * country = 0, const char * variant = 0, const char * keywordsAndValues = 0)
Locale::Locale	unicode/locid.h	/^    Locale();$/;"	p	class:Locale	access:public	signature:()
Locale::Locale	unicode/locid.h	/^    Locale(ELocaleType);$/;"	p	class:Locale	access:private	signature:(ELocaleType)
Locale::Locale	unicode/locid.h	/^    Locale(const    Locale& other);$/;"	p	class:Locale	access:public	signature:(const Locale& other)
Locale::baseName	unicode/locid.h	/^    char* baseName;$/;"	m	class:Locale	access:private
Locale::baseNameBuffer	unicode/locid.h	/^    char baseNameBuffer[ULOC_FULLNAME_CAPACITY];$/;"	m	class:Locale	access:private
Locale::clone	locid.cpp	/^Locale::clone() const {$/;"	f	class:Locale	signature:() const
Locale::clone	unicode/locid.h	/^    Locale *clone() const;$/;"	p	class:Locale	access:public	signature:() const
Locale::country	unicode/locid.h	/^    char country[ULOC_COUNTRY_CAPACITY];$/;"	m	class:Locale	access:private
Locale::createCanonical	locid.cpp	/^Locale::createCanonical(const char* name) {$/;"	f	class:Locale	signature:(const char* name)
Locale::createCanonical	unicode/locid.h	/^    static Locale U_EXPORT2 createCanonical(const char* name);$/;"	p	class:Locale	access:public	signature:(const char* name)
Locale::createFromName	locid.cpp	/^Locale::createFromName (const char *name)$/;"	f	class:Locale	signature:(const char *name)
Locale::createFromName	unicode/locid.h	/^    static Locale U_EXPORT2 createFromName(const char *name);$/;"	p	class:Locale	access:public	signature:(const char *name)
Locale::createKeywords	locid.cpp	/^Locale::createKeywords(UErrorCode &status) const$/;"	f	class:Locale	signature:(UErrorCode &status) const
Locale::createKeywords	unicode/locid.h	/^    StringEnumeration * createKeywords(UErrorCode &status) const;$/;"	p	class:Locale	access:public	signature:(UErrorCode &status) const
Locale::eBOGUS	unicode/locid.h	/^        eBOGUS$/;"	e	enum:Locale::ELocaleType
Locale::fIsBogus	unicode/locid.h	/^    UBool fIsBogus;$/;"	m	class:Locale	access:private
Locale::fullName	unicode/locid.h	/^    char* fullName;$/;"	m	class:Locale	access:private
Locale::fullNameBuffer	unicode/locid.h	/^    char fullNameBuffer[ULOC_FULLNAME_CAPACITY];$/;"	m	class:Locale	access:private
Locale::getAvailableLocales	locavailable.cpp	/^Locale::getAvailableLocales(int32_t& count)$/;"	f	class:Locale	signature:(int32_t& count)
Locale::getAvailableLocales	unicode/locid.h	/^    static const Locale* U_EXPORT2 getAvailableLocales(int32_t& count);$/;"	p	class:Locale	access:public	signature:(int32_t& count)
Locale::getBaseName	locid.cpp	/^Locale::getBaseName() const$/;"	f	class:Locale	signature:() const
Locale::getBaseName	unicode/locid.h	/^    const char * getBaseName() const;$/;"	p	class:Locale	access:public	signature:() const
Locale::getCanada	locid.cpp	/^Locale::getCanada(void)$/;"	f	class:Locale	signature:(void)
Locale::getCanada	unicode/locid.h	/^    static const Locale &U_EXPORT2 getCanada(void);$/;"	p	class:Locale	access:public	signature:(void)
Locale::getCanadaFrench	locid.cpp	/^Locale::getCanadaFrench(void)$/;"	f	class:Locale	signature:(void)
Locale::getCanadaFrench	unicode/locid.h	/^    static const Locale &U_EXPORT2 getCanadaFrench(void);$/;"	p	class:Locale	access:public	signature:(void)
Locale::getChina	locid.cpp	/^Locale::getChina(void)$/;"	f	class:Locale	signature:(void)
Locale::getChina	unicode/locid.h	/^    static const Locale &U_EXPORT2 getChina(void);$/;"	p	class:Locale	access:public	signature:(void)
Locale::getChinese	locid.cpp	/^Locale::getChinese(void)$/;"	f	class:Locale	signature:(void)
Locale::getChinese	unicode/locid.h	/^    static const Locale &U_EXPORT2 getChinese(void);$/;"	p	class:Locale	access:public	signature:(void)
Locale::getCountry	unicode/locid.h	/^    inline const char *  getCountry( ) const;$/;"	p	class:Locale	access:public	signature:( ) const
Locale::getCountry	unicode/locid.h	/^Locale::getCountry() const$/;"	f	class:Locale	signature:() const
Locale::getDefault	locid.cpp	/^Locale::getDefault()$/;"	f	class:Locale	signature:()
Locale::getDefault	unicode/locid.h	/^    static const Locale& U_EXPORT2 getDefault(void);$/;"	p	class:Locale	access:public	signature:(void)
Locale::getDisplayCountry	locdispnames.cpp	/^Locale::getDisplayCountry(UnicodeString& dispCntry) const$/;"	f	class:Locale	signature:(UnicodeString& dispCntry) const
Locale::getDisplayCountry	locdispnames.cpp	/^Locale::getDisplayCountry(const Locale &displayLocale,$/;"	f	class:Locale	signature:(const Locale &displayLocale, UnicodeString &result) const
Locale::getDisplayCountry	unicode/locid.h	/^    UnicodeString&  getDisplayCountry(          UnicodeString& dispCountry) const;$/;"	p	class:Locale	access:public	signature:( UnicodeString& dispCountry) const
Locale::getDisplayCountry	unicode/locid.h	/^    UnicodeString&  getDisplayCountry(  const   Locale&         displayLocale,$/;"	p	class:Locale	access:public	signature:( const Locale& displayLocale, UnicodeString& dispCountry) const
Locale::getDisplayLanguage	locdispnames.cpp	/^Locale::getDisplayLanguage(UnicodeString& dispLang) const$/;"	f	class:Locale	signature:(UnicodeString& dispLang) const
Locale::getDisplayLanguage	locdispnames.cpp	/^Locale::getDisplayLanguage(const Locale &displayLocale,$/;"	f	class:Locale	signature:(const Locale &displayLocale, UnicodeString &result) const
Locale::getDisplayLanguage	unicode/locid.h	/^    UnicodeString&  getDisplayLanguage( const   Locale&         displayLocale,$/;"	p	class:Locale	access:public	signature:( const Locale& displayLocale, UnicodeString& dispLang) const
Locale::getDisplayLanguage	unicode/locid.h	/^    UnicodeString&  getDisplayLanguage(UnicodeString&   dispLang) const;$/;"	p	class:Locale	access:public	signature:(UnicodeString& dispLang) const
Locale::getDisplayName	locdispnames.cpp	/^Locale::getDisplayName( UnicodeString& name ) const$/;"	f	class:Locale	signature:( UnicodeString& name ) const
Locale::getDisplayName	locdispnames.cpp	/^Locale::getDisplayName(const Locale &displayLocale,$/;"	f	class:Locale	signature:(const Locale &displayLocale, UnicodeString &result) const
Locale::getDisplayName	unicode/locid.h	/^    UnicodeString&  getDisplayName(         UnicodeString&  name) const;$/;"	p	class:Locale	access:public	signature:( UnicodeString& name) const
Locale::getDisplayName	unicode/locid.h	/^    UnicodeString&  getDisplayName( const   Locale&         displayLocale,$/;"	p	class:Locale	access:public	signature:( const Locale& displayLocale, UnicodeString& name) const
Locale::getDisplayScript	locdispnames.cpp	/^Locale::getDisplayScript(UnicodeString& dispScript) const$/;"	f	class:Locale	signature:(UnicodeString& dispScript) const
Locale::getDisplayScript	locdispnames.cpp	/^Locale::getDisplayScript(const Locale &displayLocale,$/;"	f	class:Locale	signature:(const Locale &displayLocale, UnicodeString &result) const
Locale::getDisplayScript	unicode/locid.h	/^    UnicodeString&  getDisplayScript(          UnicodeString& dispScript) const;$/;"	p	class:Locale	access:public	signature:( UnicodeString& dispScript) const
Locale::getDisplayScript	unicode/locid.h	/^    UnicodeString&  getDisplayScript(  const   Locale&         displayLocale,$/;"	p	class:Locale	access:public	signature:( const Locale& displayLocale, UnicodeString& dispScript) const
Locale::getDisplayVariant	locdispnames.cpp	/^Locale::getDisplayVariant(UnicodeString& dispVar) const$/;"	f	class:Locale	signature:(UnicodeString& dispVar) const
Locale::getDisplayVariant	locdispnames.cpp	/^Locale::getDisplayVariant(const Locale &displayLocale,$/;"	f	class:Locale	signature:(const Locale &displayLocale, UnicodeString &result) const
Locale::getDisplayVariant	unicode/locid.h	/^    UnicodeString&  getDisplayVariant(      UnicodeString& dispVar) const;$/;"	p	class:Locale	access:public	signature:( UnicodeString& dispVar) const
Locale::getDisplayVariant	unicode/locid.h	/^    UnicodeString&  getDisplayVariant(  const   Locale&         displayLocale,$/;"	p	class:Locale	access:public	signature:( const Locale& displayLocale, UnicodeString& dispVar) const
Locale::getDynamicClassID	unicode/locid.h	/^    virtual UClassID getDynamicClassID() const;$/;"	p	class:Locale	access:public	signature:() const
Locale::getEnglish	locid.cpp	/^Locale::getEnglish(void)$/;"	f	class:Locale	signature:(void)
Locale::getEnglish	unicode/locid.h	/^    static const Locale &U_EXPORT2 getEnglish(void);$/;"	p	class:Locale	access:public	signature:(void)
Locale::getFrance	locid.cpp	/^Locale::getFrance(void)$/;"	f	class:Locale	signature:(void)
Locale::getFrance	unicode/locid.h	/^    static const Locale &U_EXPORT2 getFrance(void);$/;"	p	class:Locale	access:public	signature:(void)
Locale::getFrench	locid.cpp	/^Locale::getFrench(void)$/;"	f	class:Locale	signature:(void)
Locale::getFrench	unicode/locid.h	/^    static const Locale &U_EXPORT2 getFrench(void);$/;"	p	class:Locale	access:public	signature:(void)
Locale::getGerman	locid.cpp	/^Locale::getGerman(void)$/;"	f	class:Locale	signature:(void)
Locale::getGerman	unicode/locid.h	/^    static const Locale &U_EXPORT2 getGerman(void);$/;"	p	class:Locale	access:public	signature:(void)
Locale::getGermany	locid.cpp	/^Locale::getGermany(void)$/;"	f	class:Locale	signature:(void)
Locale::getGermany	unicode/locid.h	/^    static const Locale &U_EXPORT2 getGermany(void);$/;"	p	class:Locale	access:public	signature:(void)
Locale::getISO3Country	locid.cpp	/^Locale::getISO3Country() const$/;"	f	class:Locale	signature:() const
Locale::getISO3Country	unicode/locid.h	/^    const char * getISO3Country() const;$/;"	p	class:Locale	access:public	signature:() const
Locale::getISO3Language	locid.cpp	/^Locale::getISO3Language() const$/;"	f	class:Locale	signature:() const
Locale::getISO3Language	unicode/locid.h	/^    const char * getISO3Language() const;$/;"	p	class:Locale	access:public	signature:() const
Locale::getISOCountries	locid.cpp	/^const char* const* U_EXPORT2 Locale::getISOCountries()$/;"	f	class:Locale	signature:()
Locale::getISOCountries	unicode/locid.h	/^    static const char* const* U_EXPORT2 getISOCountries();$/;"	p	class:Locale	access:public	signature:()
Locale::getISOLanguages	locid.cpp	/^const char* const* U_EXPORT2 Locale::getISOLanguages()$/;"	f	class:Locale	signature:()
Locale::getISOLanguages	unicode/locid.h	/^    static const char* const* U_EXPORT2 getISOLanguages();$/;"	p	class:Locale	access:public	signature:()
Locale::getItalian	locid.cpp	/^Locale::getItalian(void)$/;"	f	class:Locale	signature:(void)
Locale::getItalian	unicode/locid.h	/^    static const Locale &U_EXPORT2 getItalian(void);$/;"	p	class:Locale	access:public	signature:(void)
Locale::getItaly	locid.cpp	/^Locale::getItaly(void)$/;"	f	class:Locale	signature:(void)
Locale::getItaly	unicode/locid.h	/^    static const Locale &U_EXPORT2 getItaly(void);$/;"	p	class:Locale	access:public	signature:(void)
Locale::getJapan	locid.cpp	/^Locale::getJapan(void)$/;"	f	class:Locale	signature:(void)
Locale::getJapan	unicode/locid.h	/^    static const Locale &U_EXPORT2 getJapan(void);$/;"	p	class:Locale	access:public	signature:(void)
Locale::getJapanese	locid.cpp	/^Locale::getJapanese(void)$/;"	f	class:Locale	signature:(void)
Locale::getJapanese	unicode/locid.h	/^    static const Locale &U_EXPORT2 getJapanese(void);$/;"	p	class:Locale	access:public	signature:(void)
Locale::getKeywordValue	locid.cpp	/^Locale::getKeywordValue(const char* keywordName, char *buffer, int32_t bufLen, UErrorCode &status) const$/;"	f	class:Locale	signature:(const char* keywordName, char *buffer, int32_t bufLen, UErrorCode &status) const
Locale::getKeywordValue	unicode/locid.h	/^    int32_t getKeywordValue(const char* keywordName, char *buffer, int32_t bufferCapacity, UErrorCode &status) const;$/;"	p	class:Locale	access:public	signature:(const char* keywordName, char *buffer, int32_t bufferCapacity, UErrorCode &status) const
Locale::getKorea	locid.cpp	/^Locale::getKorea(void)$/;"	f	class:Locale	signature:(void)
Locale::getKorea	unicode/locid.h	/^    static const Locale &U_EXPORT2 getKorea(void);$/;"	p	class:Locale	access:public	signature:(void)
Locale::getKorean	locid.cpp	/^Locale::getKorean(void)$/;"	f	class:Locale	signature:(void)
Locale::getKorean	unicode/locid.h	/^    static const Locale &U_EXPORT2 getKorean(void);$/;"	p	class:Locale	access:public	signature:(void)
Locale::getLCID	locid.cpp	/^Locale::getLCID() const$/;"	f	class:Locale	signature:() const
Locale::getLCID	unicode/locid.h	/^    uint32_t        getLCID(void) const;$/;"	p	class:Locale	access:public	signature:(void) const
Locale::getLanguage	unicode/locid.h	/^    inline const char *  getLanguage( ) const;$/;"	p	class:Locale	access:public	signature:( ) const
Locale::getLanguage	unicode/locid.h	/^Locale::getLanguage() const$/;"	f	class:Locale	signature:() const
Locale::getLocale	locid.cpp	/^Locale::getLocale(int locid)$/;"	f	class:Locale	signature:(int locid)
Locale::getLocale	unicode/locid.h	/^    static const Locale &getLocale(int locid);$/;"	p	class:Locale	access:private	signature:(int locid)
Locale::getLocaleCache	locid.cpp	/^Locale::getLocaleCache(void)$/;"	f	class:Locale	signature:(void)
Locale::getLocaleCache	unicode/locid.h	/^    static Locale *getLocaleCache(void);$/;"	p	class:Locale	access:private	signature:(void)
Locale::getName	unicode/locid.h	/^    inline const char * getName() const;$/;"	p	class:Locale	access:public	signature:() const
Locale::getName	unicode/locid.h	/^Locale::getName() const$/;"	f	class:Locale	signature:() const
Locale::getPRC	locid.cpp	/^Locale::getPRC(void)$/;"	f	class:Locale	signature:(void)
Locale::getPRC	unicode/locid.h	/^    static const Locale &U_EXPORT2 getPRC(void);$/;"	p	class:Locale	access:public	signature:(void)
Locale::getRoot	locid.cpp	/^Locale::getRoot(void)$/;"	f	class:Locale	signature:(void)
Locale::getRoot	unicode/locid.h	/^    static const Locale &U_EXPORT2 getRoot(void);$/;"	p	class:Locale	access:public	signature:(void)
Locale::getScript	unicode/locid.h	/^    inline const char *  getScript( ) const;$/;"	p	class:Locale	access:public	signature:( ) const
Locale::getScript	unicode/locid.h	/^Locale::getScript() const$/;"	f	class:Locale	signature:() const
Locale::getSimplifiedChinese	locid.cpp	/^Locale::getSimplifiedChinese(void)$/;"	f	class:Locale	signature:(void)
Locale::getSimplifiedChinese	unicode/locid.h	/^    static const Locale &U_EXPORT2 getSimplifiedChinese(void);$/;"	p	class:Locale	access:public	signature:(void)
Locale::getStaticClassID	unicode/locid.h	/^    static UClassID U_EXPORT2 getStaticClassID();$/;"	p	class:Locale	access:public	signature:()
Locale::getTaiwan	locid.cpp	/^Locale::getTaiwan(void)$/;"	f	class:Locale	signature:(void)
Locale::getTaiwan	unicode/locid.h	/^    static const Locale &U_EXPORT2 getTaiwan(void);$/;"	p	class:Locale	access:public	signature:(void)
Locale::getTraditionalChinese	locid.cpp	/^Locale::getTraditionalChinese(void)$/;"	f	class:Locale	signature:(void)
Locale::getTraditionalChinese	unicode/locid.h	/^    static const Locale &U_EXPORT2 getTraditionalChinese(void);$/;"	p	class:Locale	access:public	signature:(void)
Locale::getUK	locid.cpp	/^Locale::getUK(void)$/;"	f	class:Locale	signature:(void)
Locale::getUK	unicode/locid.h	/^    static const Locale &U_EXPORT2 getUK(void);$/;"	p	class:Locale	access:public	signature:(void)
Locale::getUS	locid.cpp	/^Locale::getUS(void)$/;"	f	class:Locale	signature:(void)
Locale::getUS	unicode/locid.h	/^    static const Locale &U_EXPORT2 getUS(void);$/;"	p	class:Locale	access:public	signature:(void)
Locale::getVariant	unicode/locid.h	/^    inline const char *  getVariant( ) const;$/;"	p	class:Locale	access:public	signature:( ) const
Locale::getVariant	unicode/locid.h	/^Locale::getVariant() const$/;"	f	class:Locale	signature:() const
Locale::hashCode	locid.cpp	/^Locale::hashCode() const$/;"	f	class:Locale	signature:() const
Locale::hashCode	unicode/locid.h	/^    int32_t         hashCode(void) const;$/;"	p	class:Locale	access:public	signature:(void) const
Locale::init	locid.cpp	/^Locale& Locale::init(const char* localeID, UBool canonicalize)$/;"	f	class:Locale	signature:(const char* localeID, UBool canonicalize)
Locale::init	unicode/locid.h	/^    Locale& init(const char* cLocaleID, UBool canonicalize);$/;"	p	class:Locale	access:private	signature:(const char* cLocaleID, UBool canonicalize)
Locale::isBogus	unicode/locid.h	/^    UBool isBogus(void) const;$/;"	p	class:Locale	access:public	signature:(void) const
Locale::isBogus	unicode/locid.h	/^Locale::isBogus(void) const {$/;"	f	class:Locale	signature:(void) const
Locale::language	unicode/locid.h	/^    char language[ULOC_LANG_CAPACITY];$/;"	m	class:Locale	access:private
Locale::locale_set_default_internal	unicode/locid.h	/^    friend void locale_set_default_internal(const char *);$/;"	p	class:Locale	access:friend	signature:(const char *)
Locale::operator !=	unicode/locid.h	/^    UBool   operator!=(const    Locale&     other) const;$/;"	p	class:Locale	access:public	signature:(const Locale& other) const
Locale::operator !=	unicode/locid.h	/^Locale::operator!=(const    Locale&     other) const$/;"	f	class:Locale	signature:(const Locale& other) const
Locale::operator =	locid.cpp	/^Locale &Locale::operator=(const Locale &other)$/;"	f	class:Locale	signature:(const Locale &other)
Locale::operator =	unicode/locid.h	/^    Locale& operator=(const Locale& other);$/;"	p	class:Locale	access:public	signature:(const Locale& other)
Locale::operator ==	locid.cpp	/^Locale::operator==( const   Locale& other) const$/;"	f	class:Locale	signature:( const Locale& other) const
Locale::operator ==	unicode/locid.h	/^    UBool   operator==(const    Locale&     other) const;$/;"	p	class:Locale	access:public	signature:(const Locale& other) const
Locale::script	unicode/locid.h	/^    char script[ULOC_SCRIPT_CAPACITY];$/;"	m	class:Locale	access:private
Locale::setDefault	locid.cpp	/^Locale::setDefault( const   Locale&     newLocale,$/;"	f	class:Locale	signature:( const Locale& newLocale, UErrorCode& status)
Locale::setDefault	unicode/locid.h	/^    static void U_EXPORT2 setDefault(const Locale& newLocale,$/;"	p	class:Locale	access:public	signature:(const Locale& newLocale, UErrorCode& success)
Locale::setFromPOSIXID	locid.cpp	/^void Locale::setFromPOSIXID(const char *posixID)$/;"	f	class:Locale	signature:(const char *posixID)
Locale::setFromPOSIXID	unicode/locid.h	/^    void setFromPOSIXID(const char *posixID);$/;"	p	class:Locale	access:protected	signature:(const char *posixID)
Locale::setKeywordValue	locid.cpp	/^Locale::setKeywordValue(const char* keywordName, const char* keywordValue, UErrorCode &status)$/;"	f	class:Locale	signature:(const char* keywordName, const char* keywordValue, UErrorCode &status)
Locale::setKeywordValue	unicode/locid.h	/^    void setKeywordValue(const char* keywordName, const char* keywordValue, UErrorCode &status);$/;"	p	class:Locale	access:public	signature:(const char* keywordName, const char* keywordValue, UErrorCode &status)
Locale::setToBogus	locid.cpp	/^Locale::setToBogus() {$/;"	f	class:Locale	signature:()
Locale::setToBogus	unicode/locid.h	/^    void setToBogus();$/;"	p	class:Locale	access:public	signature:()
Locale::variantBegin	unicode/locid.h	/^    int32_t variantBegin;$/;"	m	class:Locale	access:private
Locale::~Locale	locid.cpp	/^Locale::~Locale()$/;"	f	class:Locale	signature:()
Locale::~Locale	unicode/locid.h	/^    virtual ~Locale() ;$/;"	p	class:Locale	access:public	signature:()
LocaleBased	locbased.h	/^    inline LocaleBased(char* validAlias, char* actualAlias);$/;"	p	class:LocaleBased	access:public	signature:(char* validAlias, char* actualAlias)
LocaleBased	locbased.h	/^    inline LocaleBased(const char* validAlias, const char* actualAlias);$/;"	p	class:LocaleBased	access:public	signature:(const char* validAlias, const char* actualAlias)
LocaleBased	locbased.h	/^class U_COMMON_API LocaleBased : public UMemory {$/;"	c	inherits:UMemory
LocaleBased	locbased.h	/^inline LocaleBased::LocaleBased(char* validAlias, char* actualAlias) :$/;"	f	class:LocaleBased	signature:(char* validAlias, char* actualAlias)
LocaleBased	locbased.h	/^inline LocaleBased::LocaleBased(const char* validAlias,$/;"	f	class:LocaleBased	signature:(const char* validAlias, const char* actualAlias)
LocaleBased	unicode/urename.h	2001;"	d
LocaleBased::LocaleBased	locbased.h	/^    inline LocaleBased(char* validAlias, char* actualAlias);$/;"	p	class:LocaleBased	access:public	signature:(char* validAlias, char* actualAlias)
LocaleBased::LocaleBased	locbased.h	/^    inline LocaleBased(const char* validAlias, const char* actualAlias);$/;"	p	class:LocaleBased	access:public	signature:(const char* validAlias, const char* actualAlias)
LocaleBased::LocaleBased	locbased.h	/^inline LocaleBased::LocaleBased(char* validAlias, char* actualAlias) :$/;"	f	class:LocaleBased	signature:(char* validAlias, char* actualAlias)
LocaleBased::LocaleBased	locbased.h	/^inline LocaleBased::LocaleBased(const char* validAlias,$/;"	f	class:LocaleBased	signature:(const char* validAlias, const char* actualAlias)
LocaleBased::actual	locbased.h	/^    char* actual;$/;"	m	class:LocaleBased	access:private
LocaleBased::getLocale	locbased.cpp	/^Locale LocaleBased::getLocale(ULocDataLocaleType type, UErrorCode& status) const {$/;"	f	class:LocaleBased	signature:(ULocDataLocaleType type, UErrorCode& status) const
LocaleBased::getLocale	locbased.h	/^    Locale getLocale(ULocDataLocaleType type, UErrorCode& status) const;$/;"	p	class:LocaleBased	access:public	signature:(ULocDataLocaleType type, UErrorCode& status) const
LocaleBased::getLocaleID	locbased.cpp	/^const char* LocaleBased::getLocaleID(ULocDataLocaleType type, UErrorCode& status) const {$/;"	f	class:LocaleBased	signature:(ULocDataLocaleType type, UErrorCode& status) const
LocaleBased::getLocaleID	locbased.h	/^    const char* getLocaleID(ULocDataLocaleType type, UErrorCode& status) const;$/;"	p	class:LocaleBased	access:public	signature:(ULocDataLocaleType type, UErrorCode& status) const
LocaleBased::setLocaleIDs	locbased.cpp	/^void LocaleBased::setLocaleIDs(const char* validID, const char* actualID) {$/;"	f	class:LocaleBased	signature:(const char* validID, const char* actualID)
LocaleBased::setLocaleIDs	locbased.h	/^    void setLocaleIDs(const char* valid, const char* actual);$/;"	p	class:LocaleBased	access:public	signature:(const char* valid, const char* actual)
LocaleBased::valid	locbased.h	/^    char* valid;$/;"	m	class:LocaleBased	access:private
LocaleDisplayNames	unicode/urename.h	2002;"	d
LocaleDisplayNamesImpl	unicode/urename.h	2003;"	d
LocaleID	ucnv_lmb.c	/^   const char    *LocaleID;$/;"	m	struct:_LocaleLMBCSGrpMap	file:	access:public
LocaleKey	servlk.cpp	/^LocaleKey::LocaleKey(const UnicodeString& primaryID,$/;"	f	class:LocaleKey	signature:(const UnicodeString& primaryID, const UnicodeString& canonicalPrimaryID, const UnicodeString* canonicalFallbackID, int32_t kind)
LocaleKey	servloc.h	/^    LocaleKey(const UnicodeString& primaryID, $/;"	p	class:LocaleKey	access:protected	signature:(const UnicodeString& primaryID, const UnicodeString& canonicalPrimaryID, const UnicodeString* canonicalFallbackID, int32_t kind)
LocaleKey	servloc.h	/^class LocaleKey;$/;"	x
LocaleKey	servloc.h	/^class U_COMMON_API LocaleKey : public ICUServiceKey {$/;"	c	inherits:ICUServiceKey
LocaleKey	unicode/urename.h	2004;"	d
LocaleKey::KIND_ANY	servloc.h	/^        KIND_ANY = -1$/;"	e	enum:LocaleKey::__anon8
LocaleKey::LocaleKey	servlk.cpp	/^LocaleKey::LocaleKey(const UnicodeString& primaryID,$/;"	f	class:LocaleKey	signature:(const UnicodeString& primaryID, const UnicodeString& canonicalPrimaryID, const UnicodeString* canonicalFallbackID, int32_t kind)
LocaleKey::LocaleKey	servloc.h	/^    LocaleKey(const UnicodeString& primaryID, $/;"	p	class:LocaleKey	access:protected	signature:(const UnicodeString& primaryID, const UnicodeString& canonicalPrimaryID, const UnicodeString* canonicalFallbackID, int32_t kind)
LocaleKey::_currentID	servloc.h	/^    UnicodeString _currentID;$/;"	m	class:LocaleKey	access:private
LocaleKey::_fallbackID	servloc.h	/^    UnicodeString _fallbackID;$/;"	m	class:LocaleKey	access:private
LocaleKey::_kind	servloc.h	/^    int32_t _kind;$/;"	m	class:LocaleKey	access:private
LocaleKey::_primaryID	servloc.h	/^    UnicodeString _primaryID;$/;"	m	class:LocaleKey	access:private
LocaleKey::canonicalID	servlk.cpp	/^LocaleKey::canonicalID(UnicodeString& result) const {$/;"	f	class:LocaleKey	signature:(UnicodeString& result) const
LocaleKey::canonicalID	servloc.h	/^    virtual UnicodeString& canonicalID(UnicodeString& result) const;$/;"	p	class:LocaleKey	access:public	signature:(UnicodeString& result) const
LocaleKey::canonicalLocale	servlk.cpp	/^LocaleKey::canonicalLocale(Locale& result) const {$/;"	f	class:LocaleKey	signature:(Locale& result) const
LocaleKey::canonicalLocale	servloc.h	/^    virtual Locale& canonicalLocale(Locale& result) const;$/;"	p	class:LocaleKey	access:public	signature:(Locale& result) const
LocaleKey::createWithCanonicalFallback	servlk.cpp	/^LocaleKey::createWithCanonicalFallback(const UnicodeString* primaryID,$/;"	f	class:LocaleKey	signature:(const UnicodeString* primaryID, const UnicodeString* canonicalFallbackID, UErrorCode& status)
LocaleKey::createWithCanonicalFallback	servlk.cpp	/^LocaleKey::createWithCanonicalFallback(const UnicodeString* primaryID,$/;"	f	class:LocaleKey	signature:(const UnicodeString* primaryID, const UnicodeString* canonicalFallbackID, int32_t kind, UErrorCode& status)
LocaleKey::createWithCanonicalFallback	servloc.h	/^    static LocaleKey* createWithCanonicalFallback(const UnicodeString* primaryID, $/;"	p	class:LocaleKey	access:public	signature:(const UnicodeString* primaryID, const UnicodeString* canonicalFallbackID, UErrorCode& status)
LocaleKey::createWithCanonicalFallback	servloc.h	/^    static LocaleKey* createWithCanonicalFallback(const UnicodeString* primaryID, $/;"	p	class:LocaleKey	access:public	signature:(const UnicodeString* primaryID, const UnicodeString* canonicalFallbackID, int32_t kind, UErrorCode& status)
LocaleKey::currentDescriptor	servlk.cpp	/^LocaleKey::currentDescriptor(UnicodeString& result) const {$/;"	f	class:LocaleKey	signature:(UnicodeString& result) const
LocaleKey::currentDescriptor	servloc.h	/^    virtual UnicodeString& currentDescriptor(UnicodeString& result) const;$/;"	p	class:LocaleKey	access:public	signature:(UnicodeString& result) const
LocaleKey::currentID	servlk.cpp	/^LocaleKey::currentID(UnicodeString& result) const {$/;"	f	class:LocaleKey	signature:(UnicodeString& result) const
LocaleKey::currentID	servloc.h	/^    virtual UnicodeString& currentID(UnicodeString& result) const;$/;"	p	class:LocaleKey	access:public	signature:(UnicodeString& result) const
LocaleKey::currentLocale	servlk.cpp	/^LocaleKey::currentLocale(Locale& result) const {$/;"	f	class:LocaleKey	signature:(Locale& result) const
LocaleKey::currentLocale	servloc.h	/^    virtual Locale& currentLocale(Locale& result) const;$/;"	p	class:LocaleKey	access:public	signature:(Locale& result) const
LocaleKey::debug	servlk.cpp	/^LocaleKey::debug(UnicodeString& result) const$/;"	f	class:LocaleKey	signature:(UnicodeString& result) const
LocaleKey::debugClass	servlk.cpp	/^LocaleKey::debugClass(UnicodeString& result) const$/;"	f	class:LocaleKey	signature:(UnicodeString& result) const
LocaleKey::fallback	servlk.cpp	/^LocaleKey::fallback() {$/;"	f	class:LocaleKey	signature:()
LocaleKey::fallback	servloc.h	/^    virtual UBool fallback();$/;"	p	class:LocaleKey	access:public	signature:()
LocaleKey::getDynamicClassID	servloc.h	/^    virtual UClassID getDynamicClassID() const;$/;"	p	class:LocaleKey	access:public	signature:() const
LocaleKey::getStaticClassID	servloc.h	/^    static UClassID U_EXPORT2 getStaticClassID();$/;"	p	class:LocaleKey	access:public	signature:()
LocaleKey::isFallbackOf	servlk.cpp	/^LocaleKey::isFallbackOf(const UnicodeString& id) const {$/;"	f	class:LocaleKey	signature:(const UnicodeString& id) const
LocaleKey::isFallbackOf	servloc.h	/^    virtual UBool isFallbackOf(const UnicodeString& id) const;$/;"	p	class:LocaleKey	access:public	signature:(const UnicodeString& id) const
LocaleKey::kind	servlk.cpp	/^LocaleKey::kind() const {$/;"	f	class:LocaleKey	signature:() const
LocaleKey::kind	servloc.h	/^    virtual int32_t kind() const;$/;"	p	class:LocaleKey	access:public	signature:() const
LocaleKey::prefix	servlk.cpp	/^LocaleKey::prefix(UnicodeString& result) const {$/;"	f	class:LocaleKey	signature:(UnicodeString& result) const
LocaleKey::prefix	servloc.h	/^    virtual UnicodeString& prefix(UnicodeString& result) const;$/;"	p	class:LocaleKey	access:public	signature:(UnicodeString& result) const
LocaleKey::~LocaleKey	servlk.cpp	/^LocaleKey::~LocaleKey() {}$/;"	f	class:LocaleKey	signature:()
LocaleKey::~LocaleKey	servloc.h	/^    virtual ~LocaleKey();$/;"	p	class:LocaleKey	access:public	signature:()
LocaleKeyFactory	servlkf.cpp	/^LocaleKeyFactory::LocaleKeyFactory(int32_t coverage)$/;"	f	class:LocaleKeyFactory	signature:(int32_t coverage)
LocaleKeyFactory	servlkf.cpp	/^LocaleKeyFactory::LocaleKeyFactory(int32_t coverage, const UnicodeString& name)$/;"	f	class:LocaleKeyFactory	signature:(int32_t coverage, const UnicodeString& name)
LocaleKeyFactory	servloc.h	/^class LocaleKeyFactory;$/;"	x
LocaleKeyFactory	unicode/urename.h	2005;"	d
LocaleKeyFactory::LocaleKeyFactory	servlkf.cpp	/^LocaleKeyFactory::LocaleKeyFactory(int32_t coverage)$/;"	f	class:LocaleKeyFactory	signature:(int32_t coverage)
LocaleKeyFactory::LocaleKeyFactory	servlkf.cpp	/^LocaleKeyFactory::LocaleKeyFactory(int32_t coverage, const UnicodeString& name)$/;"	f	class:LocaleKeyFactory	signature:(int32_t coverage, const UnicodeString& name)
LocaleKeyFactory::create	servlkf.cpp	/^LocaleKeyFactory::create(const ICUServiceKey& key, const ICUService* service, UErrorCode& status) const {$/;"	f	class:LocaleKeyFactory	signature:(const ICUServiceKey& key, const ICUService* service, UErrorCode& status) const
LocaleKeyFactory::debug	servlkf.cpp	/^LocaleKeyFactory::debug(UnicodeString& result) const$/;"	f	class:LocaleKeyFactory	signature:(UnicodeString& result) const
LocaleKeyFactory::debugClass	servlkf.cpp	/^LocaleKeyFactory::debugClass(UnicodeString& result) const$/;"	f	class:LocaleKeyFactory	signature:(UnicodeString& result) const
LocaleKeyFactory::getDisplayName	servlkf.cpp	/^LocaleKeyFactory::getDisplayName(const UnicodeString& id, const Locale& locale, UnicodeString& result) const {$/;"	f	class:LocaleKeyFactory	signature:(const UnicodeString& id, const Locale& locale, UnicodeString& result) const
LocaleKeyFactory::getSupportedIDs	servlkf.cpp	/^LocaleKeyFactory::getSupportedIDs(UErrorCode& \/* status *\/) const {$/;"	f	class:LocaleKeyFactory	signature:(UErrorCode& ) const
LocaleKeyFactory::handleCreate	servlkf.cpp	/^LocaleKeyFactory::handleCreate(const Locale& \/* loc *\/, $/;"	f	class:LocaleKeyFactory	signature:(const Locale& , int32_t , const ICUService* , UErrorCode& ) const
LocaleKeyFactory::handlesKey	servlkf.cpp	/^LocaleKeyFactory::handlesKey(const ICUServiceKey& key, UErrorCode& status) const {$/;"	f	class:LocaleKeyFactory	signature:(const ICUServiceKey& key, UErrorCode& status) const
LocaleKeyFactory::updateVisibleIDs	servlkf.cpp	/^LocaleKeyFactory::updateVisibleIDs(Hashtable& result, UErrorCode& status) const {$/;"	f	class:LocaleKeyFactory	signature:(Hashtable& result, UErrorCode& status) const
LocaleKeyFactory::~LocaleKeyFactory	servlkf.cpp	/^LocaleKeyFactory::~LocaleKeyFactory() {$/;"	f	class:LocaleKeyFactory	signature:()
LocaleLMBCSGrpMap	ucnv_lmb.c	/^} LocaleLMBCSGrpMap[] =$/;"	v	typeref:struct:_LocaleLMBCSGrpMap	file:
LocaleRuns	unicode/urename.h	2006;"	d
LocaleUtility	locutil.h	/^class U_COMMON_API LocaleUtility {$/;"	c
LocaleUtility	unicode/urename.h	2007;"	d
LocaleUtility::canonicalLocaleString	locutil.cpp	/^LocaleUtility::canonicalLocaleString(const UnicodeString* id, UnicodeString& result)$/;"	f	class:LocaleUtility	signature:(const UnicodeString* id, UnicodeString& result)
LocaleUtility::canonicalLocaleString	locutil.h	/^  static UnicodeString& canonicalLocaleString(const UnicodeString* id, UnicodeString& result);$/;"	p	class:LocaleUtility	access:public	signature:(const UnicodeString* id, UnicodeString& result)
LocaleUtility::getAvailableLocaleNames	locutil.cpp	/^LocaleUtility::getAvailableLocaleNames(const UnicodeString& bundleID)$/;"	f	class:LocaleUtility	signature:(const UnicodeString& bundleID)
LocaleUtility::getAvailableLocaleNames	locutil.h	/^  static const Hashtable* getAvailableLocaleNames(const UnicodeString& bundleID);$/;"	p	class:LocaleUtility	access:public	signature:(const UnicodeString& bundleID)
LocaleUtility::initLocaleFromName	locutil.cpp	/^LocaleUtility::initLocaleFromName(const UnicodeString& id, Locale& result)$/;"	f	class:LocaleUtility	signature:(const UnicodeString& id, Locale& result)
LocaleUtility::initLocaleFromName	locutil.h	/^  static Locale& initLocaleFromName(const UnicodeString& id, Locale& result);$/;"	p	class:LocaleUtility	access:public	signature:(const UnicodeString& id, Locale& result)
LocaleUtility::initNameFromLocale	locutil.cpp	/^LocaleUtility::initNameFromLocale(const Locale& locale, UnicodeString& result)$/;"	f	class:LocaleUtility	signature:(const Locale& locale, UnicodeString& result)
LocaleUtility::initNameFromLocale	locutil.h	/^  static UnicodeString& initNameFromLocale(const Locale& locale, UnicodeString& result);$/;"	p	class:LocaleUtility	access:public	signature:(const Locale& locale, UnicodeString& result)
LocaleUtility::isFallbackOf	locutil.cpp	/^LocaleUtility::isFallbackOf(const UnicodeString& root, const UnicodeString& child)$/;"	f	class:LocaleUtility	signature:(const UnicodeString& root, const UnicodeString& child)
LocaleUtility::isFallbackOf	locutil.h	/^  static UBool isFallbackOf(const UnicodeString& root, const UnicodeString& child);$/;"	p	class:LocaleUtility	access:public	signature:(const UnicodeString& root, const UnicodeString& child)
LocaleUtility_cache	locutil.cpp	/^static U_NAMESPACE_QUALIFIER Hashtable * LocaleUtility_cache = NULL;$/;"	v	file:
LocalizationInfo	unicode/urename.h	2008;"	d
Lookup	ucmndata.h	/^    LookupFn      Lookup;$/;"	m	struct:__anon146	access:public
LookupDataStruct	ucnvisci.c	/^typedef struct LookupDataStruct {$/;"	s	file:
LookupDataStruct	ucnvisci.c	/^} LookupDataStruct;$/;"	t	typeref:struct:LookupDataStruct	file:
LookupDataStruct::isciiLang	ucnvisci.c	/^    ISCIILang isciiLang;$/;"	m	struct:LookupDataStruct	file:	access:public
LookupDataStruct::maskEnum	ucnvisci.c	/^    MaskEnum maskEnum;$/;"	m	struct:LookupDataStruct	file:	access:public
LookupDataStruct::uniLang	ucnvisci.c	/^    UniLang uniLang;$/;"	m	struct:LookupDataStruct	file:	access:public
LookupFn	ucmndata.h	/^(* LookupFn)(const UDataMemory *pData,$/;"	t
LookupListTable	unicode/urename.h	2009;"	d
LookupProcessor	unicode/urename.h	2010;"	d
LookupSubtable	unicode/urename.h	2011;"	d
LookupTable	unicode/urename.h	2012;"	d
LowercaseTransliterator	unicode/urename.h	2013;"	d
MAC_LC_INIT_NUMBER	putil.c	1269;"	d	file:
MAC_LC_MAGIC_NUMBER	putil.c	1268;"	d	file:
MAGIC1	uresimp.h	27;"	d
MAGIC2	uresimp.h	28;"	d
MAKE_INDEX_ODD_PAIR	ubidiimp.h	147;"	d
MALAYALAM	ucnvisci.c	/^    MALAYALAM,$/;"	e	enum:__anon13	file:
MAPPING_HAS_CCC_LCCC_WORD	normalizer2impl.h	/^        MAPPING_HAS_CCC_LCCC_WORD=0x80,$/;"	e	enum:Normalizer2Impl::__anon49
MAPPING_LENGTH_MASK	normalizer2impl.h	/^        MAPPING_LENGTH_MASK=0x1f$/;"	e	enum:Normalizer2Impl::__anon49
MAPPING_NO_COMP_BOUNDARY_AFTER	normalizer2impl.h	/^        MAPPING_NO_COMP_BOUNDARY_AFTER=0x20,$/;"	e	enum:Normalizer2Impl::__anon49
MAPPING_PLUS_COMPOSITION_LIST	normalizer2impl.h	/^        MAPPING_PLUS_COMPOSITION_LIST=0x40,$/;"	e	enum:Normalizer2Impl::__anon49
MAP_390DLL	umapfile.h	37;"	d
MAP_FAILED	umapfile.c	49;"	d	file:
MAP_IMPLEMENTATION	umapfile.h	40;"	d
MAP_IMPLEMENTATION	umapfile.h	42;"	d
MAP_IMPLEMENTATION	umapfile.h	46;"	d
MAP_IMPLEMENTATION	umapfile.h	48;"	d
MAP_IMPLEMENTATION	umapfile.h	51;"	d
MAP_NONE	umapfile.h	33;"	d
MAP_POSIX	umapfile.h	35;"	d
MAP_STDIO	umapfile.h	36;"	d
MAP_WIN32	umapfile.h	34;"	d
MASK_BN_EXPLICIT	ubidiimp.h	81;"	d
MASK_B_S	ubidiimp.h	84;"	d
MASK_EMBEDDING	ubidiimp.h	101;"	d
MASK_ET_NSM_BN	ubidiimp.h	91;"	d
MASK_EXPLICIT	ubidiimp.h	80;"	d
MASK_LRX	ubidiimp.h	76;"	d
MASK_LTR	ubidiimp.h	71;"	d
MASK_N	ubidiimp.h	88;"	d
MASK_OVERRIDE	ubidiimp.h	78;"	d
MASK_POSSIBLE_N	ubidiimp.h	94;"	d
MASK_RLX	ubidiimp.h	77;"	d
MASK_RTL	ubidiimp.h	72;"	d
MASK_R_AL	ubidiimp.h	73;"	d
MASK_WS	ubidiimp.h	87;"	d
MAXEXTLANG	uloc_tag.c	31;"	d	file:
MAXIMUM_UCS2	ucnv_u32.c	26;"	d	file:
MAXIMUM_UCS2	ucnv_u8.c	46;"	d	file:
MAXIMUM_UCS4	ucnv_u8.c	48;"	d	file:
MAXIMUM_UTF	ucnv_u32.c	27;"	d	file:
MAXIMUM_UTF	ucnv_u8.c	47;"	d	file:
MAX_BCP47_SUBTAG_LEN	uloc_tag.c	554;"	d	file:
MAX_CP_COUNT	punycode.c	176;"	d	file:
MAX_DELTA	normalizer2impl.h	/^        MAX_DELTA=0x40$/;"	e	enum:Normalizer2Impl::__anon47
MAX_DOMAIN_NAME_LENGTH	uidna.cpp	38;"	d	file:
MAX_IDN_BUFFER_SIZE	uidna.cpp	40;"	d	file:
MAX_JA_VERSION	ucnv2022.c	/^enum { MAX_JA_VERSION=4 };$/;"	e	enum:__anon66	file:
MAX_KEY_LEN	ucat.c	21;"	d	file:
MAX_LABEL_BUFFER_SIZE	uidna.cpp	36;"	d	file:
MAX_LABEL_LENGTH	uidna.cpp	34;"	d	file:
MAX_LDML_KEY_LEN	uloc_tag.c	555;"	d	file:
MAX_LDML_TYPE_LEN	uloc_tag.c	556;"	d	file:
MAX_OFFSET	propname.h	105;"	d
MAX_PATH_SIZE	putil.c	823;"	d	file:
MAX_READ_SIZE	putil.c	824;"	d	file:
MAX_STACK_BUFFER_SIZE	usprep.cpp	662;"	d	file:
MAX_STATES_2022	ucnv2022.c	318;"	d	file:
MAX_STRLEN	ustr_cnv.c	109;"	d	file:
MAX_U_NOTATION_LEN	ruleiter.cpp	18;"	d	file:
MAX_VALUE	unicode/uniset.h	/^        MAX_VALUE = 0x10ffff$/;"	e	enum:UnicodeSet::__anon99
MBCS	ucnv2022.c	/^        MBCS,$/;"	e	enum:__anon67	file:
MBCS_ENTRY_FINAL	ucnvmbcs.h	269;"	d
MBCS_ENTRY_FINAL_ACTION	ucnvmbcs.h	287;"	d
MBCS_ENTRY_FINAL_IS_VALID_DIRECT_16	ucnvmbcs.h	286;"	d
MBCS_ENTRY_FINAL_SET_ACTION	ucnvmbcs.h	271;"	d
MBCS_ENTRY_FINAL_SET_ACTION_VALUE	ucnvmbcs.h	273;"	d
MBCS_ENTRY_FINAL_SET_VALUE	ucnvmbcs.h	272;"	d
MBCS_ENTRY_FINAL_STATE	ucnvmbcs.h	285;"	d
MBCS_ENTRY_FINAL_VALUE	ucnvmbcs.h	288;"	d
MBCS_ENTRY_FINAL_VALUE_16	ucnvmbcs.h	289;"	d
MBCS_ENTRY_IS_FINAL	ucnvmbcs.h	280;"	d
MBCS_ENTRY_IS_TRANSITION	ucnvmbcs.h	279;"	d
MBCS_ENTRY_SET_FINAL	ucnvmbcs.h	270;"	d
MBCS_ENTRY_SET_STATE	ucnvmbcs.h	275;"	d
MBCS_ENTRY_STATE	ucnvmbcs.h	277;"	d
MBCS_ENTRY_TRANSITION	ucnvmbcs.h	265;"	d
MBCS_ENTRY_TRANSITION_ADD_OFFSET	ucnvmbcs.h	267;"	d
MBCS_ENTRY_TRANSITION_OFFSET	ucnvmbcs.h	283;"	d
MBCS_ENTRY_TRANSITION_SET_OFFSET	ucnvmbcs.h	266;"	d
MBCS_ENTRY_TRANSITION_STATE	ucnvmbcs.h	282;"	d
MBCS_FAST_LIMIT	ucnvmbcs.h	/^    MBCS_FAST_LIMIT=MBCS_FAST_MAX+1     \/* =0xd800 *\/$/;"	e	enum:__anon78
MBCS_FAST_MAX	ucnvmbcs.h	/^    MBCS_FAST_MAX=0xd7ff,               \/* maximum code point with UTF-8-friendly MBCS runtime code, see makeconv MBCS_UTF8_MAX *\/$/;"	e	enum:__anon78
MBCS_FROM_UCHAR32_ISO2022	ucnv2022.c	/^MBCS_FROM_UCHAR32_ISO2022(UConverterSharedData* sharedData,$/;"	f	file:	signature:(UConverterSharedData* sharedData, UChar32 c, uint32_t* value, UBool useFallback, int outputType)
MBCS_FROM_U_IS_ROUNDTRIP	ucnvmbcs.h	304;"	d
MBCS_HEADER_V4_LENGTH	ucnvmbcs.h	/^    MBCS_HEADER_V4_LENGTH=8,$/;"	e	enum:__anon80
MBCS_HEADER_V5_MIN_LENGTH	ucnvmbcs.h	/^    MBCS_HEADER_V5_MIN_LENGTH=9$/;"	e	enum:__anon80
MBCS_MAX_STATE_COUNT	ucnvmbcs.h	/^    MBCS_MAX_STATE_COUNT=128$/;"	e	enum:__anon74
MBCS_OPT_INCOMPATIBLE_MASK	ucnvmbcs.h	/^    MBCS_OPT_INCOMPATIBLE_MASK=0xffc0,$/;"	e	enum:__anon79
MBCS_OPT_LENGTH_MASK	ucnvmbcs.h	/^    MBCS_OPT_LENGTH_MASK=0x3f,$/;"	e	enum:__anon79
MBCS_OPT_NO_FROM_U	ucnvmbcs.h	/^    MBCS_OPT_NO_FROM_U=0x40,$/;"	e	enum:__anon79
MBCS_OPT_UNKNOWN_INCOMPATIBLE_MASK	ucnvmbcs.h	/^    MBCS_OPT_UNKNOWN_INCOMPATIBLE_MASK=0xff80$/;"	e	enum:__anon79
MBCS_OUTPUT_1	ucnvmbcs.h	/^    MBCS_OUTPUT_1,          \/* 0 *\/$/;"	e	enum:__anon76
MBCS_OUTPUT_2	ucnvmbcs.h	/^    MBCS_OUTPUT_2,          \/* 1 *\/$/;"	e	enum:__anon76
MBCS_OUTPUT_2_HZ	ucnvmbcs.h	/^    MBCS_OUTPUT_2_HZ,       \/* d *\/$/;"	e	enum:__anon76
MBCS_OUTPUT_2_SISO	ucnvmbcs.h	/^    MBCS_OUTPUT_2_SISO=12,  \/* c *\/$/;"	e	enum:__anon76
MBCS_OUTPUT_3	ucnvmbcs.h	/^    MBCS_OUTPUT_3,          \/* 2 *\/$/;"	e	enum:__anon76
MBCS_OUTPUT_3_EUC	ucnvmbcs.h	/^    MBCS_OUTPUT_3_EUC=8,    \/* 8 *\/$/;"	e	enum:__anon76
MBCS_OUTPUT_4	ucnvmbcs.h	/^    MBCS_OUTPUT_4,          \/* 3 *\/$/;"	e	enum:__anon76
MBCS_OUTPUT_4_EUC	ucnvmbcs.h	/^    MBCS_OUTPUT_4_EUC,      \/* 9 *\/$/;"	e	enum:__anon76
MBCS_OUTPUT_COUNT	ucnvmbcs.h	/^    MBCS_OUTPUT_COUNT,$/;"	e	enum:__anon76
MBCS_OUTPUT_DBCS_ONLY	ucnvmbcs.h	/^    MBCS_OUTPUT_DBCS_ONLY=0xdb  \/* runtime-only type for DBCS-only handling of SISO tables *\/$/;"	e	enum:__anon76
MBCS_OUTPUT_EXT_ONLY	ucnvmbcs.h	/^    MBCS_OUTPUT_EXT_ONLY,   \/* e *\/$/;"	e	enum:__anon76
MBCS_POINTER_3_FROM_STAGE_2	ucnvmbcs.h	309;"	d
MBCS_SINGLE_FROM_UCHAR32	ucnv2022.c	/^MBCS_SINGLE_FROM_UCHAR32(UConverterSharedData* sharedData,$/;"	f	file:	signature:(UConverterSharedData* sharedData, UChar32 c, uint32_t* retval, UBool useFallback)
MBCS_SINGLE_RESULT_FROM_U	ucnvmbcs.h	294;"	d
MBCS_STAGE_2_FROM_U	ucnvmbcs.h	303;"	d
MBCS_STATE_CHANGE_ONLY	ucnvmbcs.h	/^    MBCS_STATE_CHANGE_ONLY$/;"	e	enum:__anon75
MBCS_STATE_FALLBACK_DIRECT_16	ucnvmbcs.h	/^    MBCS_STATE_FALLBACK_DIRECT_16,$/;"	e	enum:__anon75
MBCS_STATE_FALLBACK_DIRECT_20	ucnvmbcs.h	/^    MBCS_STATE_FALLBACK_DIRECT_20,$/;"	e	enum:__anon75
MBCS_STATE_ILLEGAL	ucnvmbcs.h	/^    MBCS_STATE_ILLEGAL,$/;"	e	enum:__anon75
MBCS_STATE_UNASSIGNED	ucnvmbcs.h	/^    MBCS_STATE_UNASSIGNED,$/;"	e	enum:__anon75
MBCS_STATE_VALID_16	ucnvmbcs.h	/^    MBCS_STATE_VALID_16,$/;"	e	enum:__anon75
MBCS_STATE_VALID_16_PAIR	ucnvmbcs.h	/^    MBCS_STATE_VALID_16_PAIR,$/;"	e	enum:__anon75
MBCS_STATE_VALID_DIRECT_16	ucnvmbcs.h	/^    MBCS_STATE_VALID_DIRECT_16,$/;"	e	enum:__anon75
MBCS_STATE_VALID_DIRECT_20	ucnvmbcs.h	/^    MBCS_STATE_VALID_DIRECT_20,$/;"	e	enum:__anon75
MBCS_UNROLL_SINGLE_FROM_BMP	ucnvmbcs.c	61;"	d	file:
MBCS_UNROLL_SINGLE_TO_BMP	ucnvmbcs.c	60;"	d	file:
MBCS_VALUE_2_FROM_STAGE_2	ucnvmbcs.h	306;"	d
MBCS_VALUE_4_FROM_STAGE_2	ucnvmbcs.h	307;"	d
MB_CUR_MAX	ustr_wcs.c	31;"	d	file:
MINLEN	uloc_tag.c	44;"	d	file:
MINLETTER	ucnv_io.c	/^    MINLETTER \/* any values from here on are lowercase letter mappings *\/$/;"	e	enum:__anon129	file:
MINUS	ucnv_u7.c	89;"	d	file:
MIN_CCC_LCCC_CP	normalizer2impl.h	/^        MIN_CCC_LCCC_CP=0x300$/;"	e	enum:Normalizer2Impl::__anon46
MIN_NORMAL_MAYBE_YES	normalizer2impl.h	/^        MIN_NORMAL_MAYBE_YES=0xfe00,$/;"	e	enum:Normalizer2Impl::__anon47
MIN_QSORT	uarrsort.c	/^    MIN_QSORT=9, \/* from Knuth *\/$/;"	e	enum:__anon24	file:
MIN_VALUE	unicode/uniset.h	/^        MIN_VALUE = 0,$/;"	e	enum:UnicodeSet::__anon99
MIN_VALUE	utrie2.cpp	490;"	d	file:
MIN_YES_YES_WITH_CC	normalizer2impl.h	/^        MIN_YES_YES_WITH_CC=0xff01,$/;"	e	enum:Normalizer2Impl::__anon47
MLM	ucnvisci.c	/^    MLM = 0x49,$/;"	e	enum:__anon14	file:
MLM_MASK	ucnvisci.c	/^    MLM_MASK =0x02,$/;"	e	enum:__anon15	file:
MOD	usc_impl.c	24;"	d	file:
MPreFixups	unicode/urename.h	2014;"	d
MUTEX_H	mutex.h	21;"	d
MUTEX_TYPE	umutex.c	109;"	d	file:
MUTEX_TYPE	umutex.c	120;"	d	file:
MUTEX_TYPE	umutex.c	130;"	d	file:
MUTEX_TYPE	umutex.c	147;"	d	file:
MappedData	ucmndata.h	/^} MappedData;$/;"	t	typeref:struct:__anon142
MarkArray	unicode/urename.h	2015;"	d
MarkToBasePositioningSubtable	unicode/urename.h	2016;"	d
MarkToLigaturePositioningSubtable	unicode/urename.h	2017;"	d
MarkToMarkPositioningSubtable	unicode/urename.h	2018;"	d
MaskEnum	ucnvisci.c	/^}MaskEnum;$/;"	t	typeref:enum:__anon15	file:
MaybeStackArray	charstr.h	/^template class U_COMMON_API MaybeStackArray<char, 40>;$/;"	v	typeref:class:U_COMMON_API
MaybeStackArray	cmemory.h	/^    MaybeStackArray() : ptr(stackArray), capacity(stackCapacity), needToRelease(FALSE) {}$/;"	f	class:MaybeStackArray	access:public	signature:()
MaybeStackArray	cmemory.h	/^    MaybeStackArray(const MaybeStackArray & \/*other*\/) {};$/;"	f	class:MaybeStackArray	access:private	signature:(const MaybeStackArray & )
MaybeStackArray	cmemory.h	/^class MaybeStackArray {$/;"	c
MaybeStackArray::MaybeStackArray	cmemory.h	/^    MaybeStackArray() : ptr(stackArray), capacity(stackCapacity), needToRelease(FALSE) {}$/;"	f	class:MaybeStackArray	access:public	signature:()
MaybeStackArray::MaybeStackArray	cmemory.h	/^    MaybeStackArray(const MaybeStackArray & \/*other*\/) {};$/;"	f	class:MaybeStackArray	access:private	signature:(const MaybeStackArray & )
MaybeStackArray::aliasInstead	cmemory.h	/^    void aliasInstead(T *otherArray, int32_t otherCapacity) {$/;"	f	class:MaybeStackArray	access:public	signature:(T *otherArray, int32_t otherCapacity)
MaybeStackArray::capacity	cmemory.h	/^    int32_t capacity;$/;"	m	class:MaybeStackArray	access:private
MaybeStackArray::getAlias	cmemory.h	/^    T *getAlias() const { return ptr; }$/;"	f	class:MaybeStackArray	access:public	signature:() const
MaybeStackArray::getArrayLimit	cmemory.h	/^    T *getArrayLimit() const { return getAlias()+capacity; }$/;"	f	class:MaybeStackArray	access:public	signature:() const
MaybeStackArray::getCapacity	cmemory.h	/^    int32_t getCapacity() const { return capacity; }$/;"	f	class:MaybeStackArray	access:public	signature:() const
MaybeStackArray::needToRelease	cmemory.h	/^    UBool needToRelease;$/;"	m	class:MaybeStackArray	access:private
MaybeStackArray::operator !=	cmemory.h	/^    bool operator!=(const MaybeStackArray & \/*other*\/) {return TRUE;};$/;"	f	class:MaybeStackArray	access:private	signature:(const MaybeStackArray & )
MaybeStackArray::operator =	cmemory.h	/^    void operator=(const MaybeStackArray & \/*other*\/) {};$/;"	f	class:MaybeStackArray	access:private	signature:(const MaybeStackArray & )
MaybeStackArray::operator ==	cmemory.h	/^    bool operator==(const MaybeStackArray & \/*other*\/) {return FALSE;};$/;"	f	class:MaybeStackArray	access:private	signature:(const MaybeStackArray & )
MaybeStackArray::operator T *	cmemory.h	/^    operator T *() const { return ptr; }$/;"	f	class:MaybeStackArray	access:public	signature:() const
MaybeStackArray::operator []	cmemory.h	/^    T &operator[](ptrdiff_t i) { return ptr[i]; }$/;"	f	class:MaybeStackArray	access:public	signature:(ptrdiff_t i)
MaybeStackArray::orphanOrClone	cmemory.h	/^    inline T *orphanOrClone(int32_t length, int32_t &resultCapacity);$/;"	p	class:MaybeStackArray	access:public	signature:(int32_t length, int32_t &resultCapacity)
MaybeStackArray::orphanOrClone	cmemory.h	/^inline T *MaybeStackArray<T, stackCapacity>::orphanOrClone(int32_t length, int32_t &resultCapacity) {$/;"	f	class:MaybeStackArray	signature:(int32_t length, int32_t &resultCapacity)
MaybeStackArray::ptr	cmemory.h	/^    T *ptr;$/;"	m	class:MaybeStackArray	access:private
MaybeStackArray::releaseArray	cmemory.h	/^    void releaseArray() {$/;"	f	class:MaybeStackArray	access:private	signature:()
MaybeStackArray::resize	cmemory.h	/^    inline T *resize(int32_t newCapacity, int32_t length=0);$/;"	p	class:MaybeStackArray	access:public	signature:(int32_t newCapacity, int32_t length=0)
MaybeStackArray::resize	cmemory.h	/^inline T *MaybeStackArray<T, stackCapacity>::resize(int32_t newCapacity, int32_t length) {$/;"	f	class:MaybeStackArray	signature:(int32_t newCapacity, int32_t length)
MaybeStackArray::stackArray	cmemory.h	/^    T stackArray[stackCapacity];$/;"	m	class:MaybeStackArray	access:private
MaybeStackArray::~MaybeStackArray	cmemory.h	/^    ~MaybeStackArray() { releaseArray(); }$/;"	f	class:MaybeStackArray	access:public	signature:()
MaybeStackHeaderAndArray	cmemory.h	/^    MaybeStackHeaderAndArray() : ptr(&stackHeader), capacity(stackCapacity), needToRelease(FALSE) {}$/;"	f	class:MaybeStackHeaderAndArray	access:public	signature:()
MaybeStackHeaderAndArray	cmemory.h	/^    MaybeStackHeaderAndArray(const MaybeStackHeaderAndArray & \/*other*\/) {};$/;"	f	class:MaybeStackHeaderAndArray	access:private	signature:(const MaybeStackHeaderAndArray & )
MaybeStackHeaderAndArray	cmemory.h	/^class MaybeStackHeaderAndArray {$/;"	c
MaybeStackHeaderAndArray::MaybeStackHeaderAndArray	cmemory.h	/^    MaybeStackHeaderAndArray() : ptr(&stackHeader), capacity(stackCapacity), needToRelease(FALSE) {}$/;"	f	class:MaybeStackHeaderAndArray	access:public	signature:()
MaybeStackHeaderAndArray::MaybeStackHeaderAndArray	cmemory.h	/^    MaybeStackHeaderAndArray(const MaybeStackHeaderAndArray & \/*other*\/) {};$/;"	f	class:MaybeStackHeaderAndArray	access:private	signature:(const MaybeStackHeaderAndArray & )
MaybeStackHeaderAndArray::aliasInstead	cmemory.h	/^    void aliasInstead(H *otherMemory, int32_t otherCapacity) {$/;"	f	class:MaybeStackHeaderAndArray	access:public	signature:(H *otherMemory, int32_t otherCapacity)
MaybeStackHeaderAndArray::capacity	cmemory.h	/^    int32_t capacity;$/;"	m	class:MaybeStackHeaderAndArray	access:private
MaybeStackHeaderAndArray::getAlias	cmemory.h	/^    H *getAlias() const { return ptr; }$/;"	f	class:MaybeStackHeaderAndArray	access:public	signature:() const
MaybeStackHeaderAndArray::getArrayLimit	cmemory.h	/^    T *getArrayLimit() const { return getArrayStart()+capacity; }$/;"	f	class:MaybeStackHeaderAndArray	access:public	signature:() const
MaybeStackHeaderAndArray::getArrayStart	cmemory.h	/^    T *getArrayStart() const { return reinterpret_cast<T *>(getAlias()+1); }$/;"	f	class:MaybeStackHeaderAndArray	access:public	signature:() const
MaybeStackHeaderAndArray::getCapacity	cmemory.h	/^    int32_t getCapacity() const { return capacity; }$/;"	f	class:MaybeStackHeaderAndArray	access:public	signature:() const
MaybeStackHeaderAndArray::needToRelease	cmemory.h	/^    UBool needToRelease;$/;"	m	class:MaybeStackHeaderAndArray	access:private
MaybeStackHeaderAndArray::operator !=	cmemory.h	/^    bool operator!=(const MaybeStackHeaderAndArray & \/*other*\/) {return TRUE;};$/;"	f	class:MaybeStackHeaderAndArray	access:private	signature:(const MaybeStackHeaderAndArray & )
MaybeStackHeaderAndArray::operator =	cmemory.h	/^    void operator=(const MaybeStackHeaderAndArray & \/*other*\/) {};$/;"	f	class:MaybeStackHeaderAndArray	access:private	signature:(const MaybeStackHeaderAndArray & )
MaybeStackHeaderAndArray::operator ==	cmemory.h	/^    bool operator==(const MaybeStackHeaderAndArray & \/*other*\/) {return FALSE;};$/;"	f	class:MaybeStackHeaderAndArray	access:private	signature:(const MaybeStackHeaderAndArray & )
MaybeStackHeaderAndArray::operator H *	cmemory.h	/^    operator H *() const { return ptr; }$/;"	f	class:MaybeStackHeaderAndArray	access:public	signature:() const
MaybeStackHeaderAndArray::operator []	cmemory.h	/^    T &operator[](ptrdiff_t i) { return getArrayStart()[i]; }$/;"	f	class:MaybeStackHeaderAndArray	access:public	signature:(ptrdiff_t i)
MaybeStackHeaderAndArray::orphanOrClone	cmemory.h	/^    inline H *orphanOrClone(int32_t length, int32_t &resultCapacity);$/;"	p	class:MaybeStackHeaderAndArray	access:public	signature:(int32_t length, int32_t &resultCapacity)
MaybeStackHeaderAndArray::orphanOrClone	cmemory.h	/^inline H *MaybeStackHeaderAndArray<H, T, stackCapacity>::orphanOrClone(int32_t length,$/;"	f	class:MaybeStackHeaderAndArray	signature:(int32_t length, int32_t &resultCapacity)
MaybeStackHeaderAndArray::ptr	cmemory.h	/^    H *ptr;$/;"	m	class:MaybeStackHeaderAndArray	access:private
MaybeStackHeaderAndArray::releaseMemory	cmemory.h	/^    void releaseMemory() {$/;"	f	class:MaybeStackHeaderAndArray	access:private	signature:()
MaybeStackHeaderAndArray::resize	cmemory.h	/^    inline H *resize(int32_t newCapacity, int32_t length=0);$/;"	p	class:MaybeStackHeaderAndArray	access:public	signature:(int32_t newCapacity, int32_t length=0)
MaybeStackHeaderAndArray::resize	cmemory.h	/^inline H *MaybeStackHeaderAndArray<H, T, stackCapacity>::resize(int32_t newCapacity,$/;"	f	class:MaybeStackHeaderAndArray	signature:(int32_t newCapacity, int32_t length)
MaybeStackHeaderAndArray::stackArray	cmemory.h	/^    T stackArray[stackCapacity];$/;"	m	class:MaybeStackHeaderAndArray	access:private
MaybeStackHeaderAndArray::stackHeader	cmemory.h	/^    H stackHeader;$/;"	m	class:MaybeStackHeaderAndArray	access:private
MaybeStackHeaderAndArray::~MaybeStackHeaderAndArray	cmemory.h	/^    ~MaybeStackHeaderAndArray() { releaseMemory(); }$/;"	f	class:MaybeStackHeaderAndArray	access:public	signature:()
Measure	unicode/urename.h	2019;"	d
MeasureFormat	unicode/urename.h	2020;"	d
MeasureUnit	unicode/urename.h	2021;"	d
MemoryMap	umapfile.c	/^    typedef HANDLE MemoryMap;$/;"	t	file:
MemoryMap	umapfile.c	/^    typedef size_t MemoryMap;$/;"	t	file:
MemoryMap	umapfile.c	/^    typedef void *MemoryMap;$/;"	t	file:
MessageFormat	unicode/urename.h	2022;"	d
MessageFormatAdapter	unicode/urename.h	2023;"	d
ModulusSubstitution	unicode/urename.h	2024;"	d
MoonRiseSetCoordFunc	unicode/urename.h	2025;"	d
MoonTimeAngleFunc	unicode/urename.h	2026;"	d
MorphSubtableHeader	unicode/urename.h	2027;"	d
MorphTableHeader	unicode/urename.h	2028;"	d
MultipleSubstitutionSubtable	unicode/urename.h	2029;"	d
MultiplierSubstitution	unicode/urename.h	2030;"	d
MutableTrieDictionary	triedict.cpp	/^MutableTrieDictionary::MutableTrieDictionary( UChar median, UErrorCode &status ) {$/;"	f	class:MutableTrieDictionary	signature:( UChar median, UErrorCode &status )
MutableTrieDictionary	triedict.cpp	/^MutableTrieDictionary::MutableTrieDictionary( UErrorCode &status ) {$/;"	f	class:MutableTrieDictionary	signature:( UErrorCode &status )
MutableTrieDictionary	triedict.h	/^  MutableTrieDictionary( UChar median, UErrorCode &status );$/;"	p	class:MutableTrieDictionary	access:public	signature:( UChar median, UErrorCode &status )
MutableTrieDictionary	triedict.h	/^  MutableTrieDictionary( UErrorCode &status );$/;"	p	class:MutableTrieDictionary	access:private	signature:( UErrorCode &status )
MutableTrieDictionary	triedict.h	/^class U_COMMON_API MutableTrieDictionary : public TrieWordDictionary {$/;"	c	inherits:TrieWordDictionary
MutableTrieDictionary	unicode/urename.h	2031;"	d
MutableTrieDictionary::CompactTrieDictionary	triedict.h	/^  friend class CompactTrieDictionary;   \/\/ For fast conversion$/;"	x
MutableTrieDictionary::MutableTrieDictionary	triedict.cpp	/^MutableTrieDictionary::MutableTrieDictionary( UChar median, UErrorCode &status ) {$/;"	f	class:MutableTrieDictionary	signature:( UChar median, UErrorCode &status )
MutableTrieDictionary::MutableTrieDictionary	triedict.cpp	/^MutableTrieDictionary::MutableTrieDictionary( UErrorCode &status ) {$/;"	f	class:MutableTrieDictionary	signature:( UErrorCode &status )
MutableTrieDictionary::MutableTrieDictionary	triedict.h	/^  MutableTrieDictionary( UChar median, UErrorCode &status );$/;"	p	class:MutableTrieDictionary	access:public	signature:( UChar median, UErrorCode &status )
MutableTrieDictionary::MutableTrieDictionary	triedict.h	/^  MutableTrieDictionary( UErrorCode &status );$/;"	p	class:MutableTrieDictionary	access:private	signature:( UErrorCode &status )
MutableTrieDictionary::addWord	triedict.cpp	/^MutableTrieDictionary::addWord( const UChar *word,$/;"	f	class:MutableTrieDictionary	signature:( const UChar *word, int32_t length, UErrorCode &status )
MutableTrieDictionary::addWord	triedict.h	/^  virtual void addWord( const UChar *word,$/;"	p	class:MutableTrieDictionary	access:public	signature:( const UChar *word, int32_t length, UErrorCode &status)
MutableTrieDictionary::fIter	triedict.h	/^  UText    *fIter;$/;"	m	class:MutableTrieDictionary	access:private
MutableTrieDictionary::fTrie	triedict.h	/^  TernaryNode               *fTrie;$/;"	m	class:MutableTrieDictionary	access:private
MutableTrieDictionary::matches	triedict.cpp	/^MutableTrieDictionary::matches( UText *text,$/;"	f	class:MutableTrieDictionary	signature:( UText *text, int32_t maxLength, int32_t *lengths, int &count, int limit ) const
MutableTrieDictionary::matches	triedict.h	/^  virtual int32_t matches( UText *text,$/;"	p	class:MutableTrieDictionary	access:public	signature:( UText *text, int32_t maxLength, int32_t *lengths, int &count, int limit ) const
MutableTrieDictionary::openWords	triedict.cpp	/^MutableTrieDictionary::openWords( UErrorCode &status ) const {$/;"	f	class:MutableTrieDictionary	signature:( UErrorCode &status ) const
MutableTrieDictionary::openWords	triedict.h	/^  virtual StringEnumeration *openWords( UErrorCode &status ) const;$/;"	p	class:MutableTrieDictionary	access:public	signature:( UErrorCode &status ) const
MutableTrieDictionary::search	triedict.cpp	/^MutableTrieDictionary::search( UText *text,$/;"	f	class:MutableTrieDictionary	signature:( UText *text, int32_t maxLength, int32_t *lengths, int &count, int limit, TernaryNode *&parent, UBool &pMatched ) const
MutableTrieDictionary::search	triedict.h	/^  virtual int32_t search( UText *text,$/;"	p	class:MutableTrieDictionary	access:protected	signature:( UText *text, int32_t maxLength, int32_t *lengths, int &count, int limit, TernaryNode *&parent, UBool &pMatched ) const
MutableTrieDictionary::~MutableTrieDictionary	triedict.cpp	/^MutableTrieDictionary::~MutableTrieDictionary() {$/;"	f	class:MutableTrieDictionary	signature:()
MutableTrieDictionary::~MutableTrieDictionary	triedict.h	/^  virtual ~MutableTrieDictionary();$/;"	p	class:MutableTrieDictionary	access:public	signature:()
MutableTrieEnumeration	triedict.cpp	/^    MutableTrieEnumeration(TernaryNode *root, UErrorCode &status) $/;"	f	class:MutableTrieEnumeration	access:public	signature:(TernaryNode *root, UErrorCode &status)
MutableTrieEnumeration	triedict.cpp	/^class MutableTrieEnumeration : public StringEnumeration {$/;"	c	file:	inherits:StringEnumeration
MutableTrieEnumeration	unicode/urename.h	2032;"	d
MutableTrieEnumeration::MutableTrieEnumeration	triedict.cpp	/^    MutableTrieEnumeration(TernaryNode *root, UErrorCode &status) $/;"	f	class:MutableTrieEnumeration	access:public	signature:(TernaryNode *root, UErrorCode &status)
MutableTrieEnumeration::StackBranch	triedict.cpp	/^    enum StackBranch {$/;"	g	class:MutableTrieEnumeration	file:	access:private
MutableTrieEnumeration::clone	triedict.cpp	/^    virtual StringEnumeration *clone() const {$/;"	f	class:MutableTrieEnumeration	access:public	signature:() const
MutableTrieEnumeration::count	triedict.cpp	/^    virtual int32_t count(UErrorCode &status) const {$/;"	f	class:MutableTrieEnumeration	access:public	signature:(UErrorCode &status) const
MutableTrieEnumeration::fBranchStack	triedict.cpp	/^    UVector32   fBranchStack;   \/\/ Stack of which branch we are working on$/;"	m	class:MutableTrieEnumeration	file:	access:private
MutableTrieEnumeration::fNodeStack	triedict.cpp	/^    UStack      fNodeStack;     \/\/ Stack of nodes to process$/;"	m	class:MutableTrieEnumeration	file:	access:private
MutableTrieEnumeration::fRoot	triedict.cpp	/^    TernaryNode *fRoot;         \/\/ Root node$/;"	m	class:MutableTrieEnumeration	file:	access:private
MutableTrieEnumeration::getDynamicClassID	triedict.cpp	/^    virtual UClassID getDynamicClassID(void) const;$/;"	p	class:MutableTrieEnumeration	file:	access:public	signature:(void) const
MutableTrieEnumeration::getStaticClassID	triedict.cpp	/^    static UClassID U_EXPORT2 getStaticClassID(void);$/;"	p	class:MutableTrieEnumeration	file:	access:public	signature:(void)
MutableTrieEnumeration::kDone	triedict.cpp	/^        kDone$/;"	e	enum:MutableTrieEnumeration::StackBranch	file:
MutableTrieEnumeration::kEqual	triedict.cpp	/^        kEqual,$/;"	e	enum:MutableTrieEnumeration::StackBranch	file:
MutableTrieEnumeration::kGreaterThan	triedict.cpp	/^        kGreaterThan,$/;"	e	enum:MutableTrieEnumeration::StackBranch	file:
MutableTrieEnumeration::kLessThan	triedict.cpp	/^        kLessThan,$/;"	e	enum:MutableTrieEnumeration::StackBranch	file:
MutableTrieEnumeration::reset	triedict.cpp	/^    virtual void reset(UErrorCode &status) {$/;"	f	class:MutableTrieEnumeration	access:public	signature:(UErrorCode &status)
MutableTrieEnumeration::snext	triedict.cpp	/^    virtual const UnicodeString *snext(UErrorCode &status) {$/;"	f	class:MutableTrieEnumeration	access:public	signature:(UErrorCode &status)
MutableTrieEnumeration::~MutableTrieEnumeration	triedict.cpp	/^    virtual ~MutableTrieEnumeration() {$/;"	f	class:MutableTrieEnumeration	access:public	signature:()
MutableTrieNodeFlags	triedict.cpp	/^enum MutableTrieNodeFlags {$/;"	g	file:
Mutex	mutex.h	/^  Mutex(const Mutex &other); \/\/ forbid copying of this class$/;"	p	class:Mutex	access:private	signature:(const Mutex &other)
Mutex	mutex.h	/^  inline Mutex(UMTX *mutex = NULL);$/;"	p	class:Mutex	access:public	signature:(UMTX *mutex = NULL)
Mutex	mutex.h	/^class U_COMMON_API Mutex : public UMemory {$/;"	c	inherits:UMemory
Mutex	mutex.h	/^inline Mutex::Mutex(UMTX *mutex)$/;"	f	class:Mutex	signature:(UMTX *mutex)
Mutex::Mutex	mutex.h	/^  Mutex(const Mutex &other); \/\/ forbid copying of this class$/;"	p	class:Mutex	access:private	signature:(const Mutex &other)
Mutex::Mutex	mutex.h	/^  inline Mutex(UMTX *mutex = NULL);$/;"	p	class:Mutex	access:public	signature:(UMTX *mutex = NULL)
Mutex::Mutex	mutex.h	/^inline Mutex::Mutex(UMTX *mutex)$/;"	f	class:Mutex	signature:(UMTX *mutex)
Mutex::fMutex	mutex.h	/^  UMTX   *fMutex;$/;"	m	class:Mutex	access:private
Mutex::operator =	mutex.h	/^  Mutex &operator=(const Mutex &other); \/\/ forbid copying of this class$/;"	p	class:Mutex	access:private	signature:(const Mutex &other)
Mutex::~Mutex	mutex.h	/^  inline ~Mutex();$/;"	p	class:Mutex	access:public	signature:()
Mutex::~Mutex	mutex.h	/^inline Mutex::~Mutex()$/;"	f	class:Mutex	signature:()
NAME_PROP	uniset_props.cpp	87;"	d	file:
NAME_PROP_LENGTH	uniset_props.cpp	88;"	d	file:
NBSP	uprops.h	/^    NBSP    =0x00a0,$/;"	e	enum:__anon90
NEGDIVMOD	ucnvbocu.c	200;"	d	file:
NEW_TAIL_CHAR	ushape.c	68;"	d	file:
NEXT_GROUP	unames.c	70;"	d	file:
NFFactory	unicode/urename.h	2033;"	d
NFKDBuffer	unicode/urename.h	2034;"	d
NFRule	unicode/urename.h	2035;"	d
NFRuleSet	unicode/urename.h	2036;"	d
NFSubstitution	unicode/urename.h	2037;"	d
NGramParser	unicode/urename.h	2038;"	d
NL	uprops.h	/^    NL      =0x0085,$/;"	e	enum:__anon90
NNBSP	uprops.h	/^    NNBSP   =0x202f,$/;"	e	enum:__anon90
NOIME	putil.c	86;"	d	file:
NOIME	ucln_imp.h	129;"	d
NOIME	umapfile.c	30;"	d	file:
NOIME	umutex.c	69;"	d	file:
NOIME	wintz.c	28;"	d	file:
NOMCX	putil.c	87;"	d	file:
NOMCX	ucln_imp.h	130;"	d
NOMCX	umapfile.c	31;"	d	file:
NOMCX	umutex.c	70;"	d	file:
NOMCX	wintz.c	29;"	d	file:
NOMDIG	uprops.h	/^    NOMDIG  =0x206f,$/;"	e	enum:__anon90
NONZERO	ucnv_io.c	/^    NONZERO,$/;"	e	enum:__anon129	file:
NORMLZR_H	unicode/normlzr.h	10;"	d
NOSERVICE	putil.c	85;"	d	file:
NOSERVICE	ucln_imp.h	128;"	d
NOSERVICE	umapfile.c	29;"	d	file:
NOSERVICE	umutex.c	68;"	d	file:
NOSERVICE	wintz.c	27;"	d	file:
NOT_CONTAINED	unisetspan.h	/^        NOT_CONTAINED   = 1,$/;"	e	enum:UnicodeSetStringSpan::__anon19
NOUSER	putil.c	84;"	d	file:
NOUSER	ucln_imp.h	127;"	d
NOUSER	umapfile.c	28;"	d	file:
NOUSER	umutex.c	67;"	d	file:
NOUSER	wintz.c	26;"	d	file:
NO_CHAR_MARKER	ucnvisci.c	51;"	d	file:
NO_CONTEXT_RTL	ubidiimp.h	113;"	d
NSM	ubidiimp.h	/^    NSM=U_DIR_NON_SPACING_MARK,$/;"	e	enum:__anon82
NUKTA	ucnvisci.c	31;"	d	file:
NULL	unicode/utypes.h	290;"	d
NULL	unicode/utypes.h	292;"	d
NameAndIndex	propname.cpp	/^struct NameAndIndex {$/;"	s	file:
NameAndIndex::index	propname.cpp	/^    Offset name, index;$/;"	m	struct:NameAndIndex	file:	access:public
NameAndIndex::name	propname.cpp	/^    Offset name, index;$/;"	m	struct:NameAndIndex	file:	access:public
NameToEnum	propname.h	/^class NameToEnum {$/;"	c
NameToEnum	unicode/urename.h	2039;"	d
NameToEnum::_enumArray	propname.h	/^    EnumValue _enumArray; \/*  [array of count] EnumValues *\/$/;"	m	class:NameToEnum	access:private
NameToEnum::count	propname.h	/^    int32_t count;       \/*  number of entries *\/$/;"	m	class:NameToEnum	access:private
NameToEnum::getEnum	propname.h	/^    EnumValue getEnum(const char* alias, const PropertyAliases& data) const {$/;"	f	class:NameToEnum	access:public	signature:(const char* alias, const PropertyAliases& data) const
NameToEnum::getEnumArray	propname.h	/^    EnumValue* getEnumArray() {$/;"	f	class:NameToEnum	access:private	signature:()
NameToEnum::getEnumArray	propname.h	/^    const EnumValue* getEnumArray() const {$/;"	f	class:NameToEnum	access:private	signature:() const
NameToEnum::getNameArray	propname.h	/^    Offset* getNameArray() {$/;"	f	class:NameToEnum	access:private	signature:()
NameToEnum::getNameArray	propname.h	/^    const Offset* getNameArray() const {$/;"	f	class:NameToEnum	access:private	signature:() const
NameToEnum::getSize	propname.h	/^    int32_t getSize() {$/;"	f	class:NameToEnum	access:private	signature:()
NameToEnum::getSize	propname.h	/^    static int32_t getSize(int32_t n) {$/;"	f	class:NameToEnum	access:private	signature:(int32_t n)
NameToEnum::swap	propname.cpp	/^NameToEnum::swap(const UDataSwapper *ds,$/;"	f	class:NameToEnum	signature:(const UDataSwapper *ds, const uint8_t *inBytes, int32_t length, uint8_t *outBytes, uint8_t *temp, int32_t pos, UErrorCode *pErrorCode)
NameToEnum::swap	propname.h	/^    swap(const UDataSwapper *ds,$/;"	p	class:NameToEnum	access:public	signature:(const UDataSwapper *ds, const uint8_t *inBytes, int32_t length, uint8_t *outBytes, uint8_t *temp, int32_t pos, UErrorCode *pErrorCode)
NameUnicodeTransliterator	unicode/urename.h	2040;"	d
NewArray	unicode/uobject.h	/^    static void * NewArray(int size, int count);$/;"	p	class:UMemory	access:public	signature:(int size, int count)
NewTrieAndStatus	utrie2_builder.c	/^typedef struct NewTrieAndStatus {$/;"	s	file:
NewTrieAndStatus	utrie2_builder.c	/^} NewTrieAndStatus;$/;"	t	typeref:struct:NewTrieAndStatus	file:
NewTrieAndStatus::errorCode	utrie2_builder.c	/^    UErrorCode errorCode;$/;"	m	struct:NewTrieAndStatus	file:	access:public
NewTrieAndStatus::exclusiveLimit	utrie2_builder.c	/^    UBool exclusiveLimit;  \/* rather than inclusive range end *\/$/;"	m	struct:NewTrieAndStatus	file:	access:public
NewTrieAndStatus::trie	utrie2_builder.c	/^    UTrie2 *trie;$/;"	m	struct:NewTrieAndStatus	file:	access:public
NodeType	rbbinode.h	/^        enum NodeType {$/;"	g	class:RBBINode	access:public
NonContextualGlyphSubstitutionProcessor	unicode/urename.h	2041;"	d
NonContiguousEnumToOffset	propname.h	/^class NonContiguousEnumToOffset {$/;"	c
NonContiguousEnumToOffset	unicode/urename.h	2042;"	d
NonContiguousEnumToOffset::_enumArray	propname.h	/^    EnumValue _enumArray; \/*  [array of count] *\/$/;"	m	class:NonContiguousEnumToOffset	access:private
NonContiguousEnumToOffset::count	propname.h	/^    int32_t count;$/;"	m	class:NonContiguousEnumToOffset	access:private
NonContiguousEnumToOffset::getEnumArray	propname.h	/^    EnumValue* getEnumArray() {$/;"	f	class:NonContiguousEnumToOffset	access:private	signature:()
NonContiguousEnumToOffset::getEnumArray	propname.h	/^    const EnumValue* getEnumArray() const {$/;"	f	class:NonContiguousEnumToOffset	access:private	signature:() const
NonContiguousEnumToOffset::getOffset	propname.h	/^    Offset getOffset(EnumValue enumProbe) const {$/;"	f	class:NonContiguousEnumToOffset	access:public	signature:(EnumValue enumProbe) const
NonContiguousEnumToOffset::getOffsetArray	propname.h	/^    Offset* getOffsetArray() {$/;"	f	class:NonContiguousEnumToOffset	access:private	signature:()
NonContiguousEnumToOffset::getOffsetArray	propname.h	/^    const Offset* getOffsetArray() const {$/;"	f	class:NonContiguousEnumToOffset	access:private	signature:() const
NonContiguousEnumToOffset::getSize	propname.h	/^    int32_t getSize() {$/;"	f	class:NonContiguousEnumToOffset	access:private	signature:()
NonContiguousEnumToOffset::getSize	propname.h	/^    static int32_t getSize(int32_t n) {$/;"	f	class:NonContiguousEnumToOffset	access:private	signature:(int32_t n)
NonContiguousEnumToOffset::swap	propname.cpp	/^NonContiguousEnumToOffset::swap(const UDataSwapper *ds,$/;"	f	class:NonContiguousEnumToOffset	signature:(const UDataSwapper *ds, const uint8_t *inBytes, int32_t length, uint8_t *outBytes, uint8_t *temp, int32_t pos, UErrorCode *pErrorCode)
NonContiguousEnumToOffset::swap	propname.h	/^    swap(const UDataSwapper *ds,$/;"	p	class:NonContiguousEnumToOffset	access:public	signature:(const UDataSwapper *ds, const uint8_t *inBytes, int32_t length, uint8_t *outBytes, uint8_t *temp, int32_t pos, UErrorCode *pErrorCode)
NoopNormalizer2	normalizer2.cpp	/^class NoopNormalizer2 : public Normalizer2 {$/;"	c	file:	inherits:Normalizer2
NoopNormalizer2	unicode/urename.h	2043;"	d
NoopNormalizer2::append	normalizer2.cpp	/^    append(UnicodeString &first,$/;"	f	class:NoopNormalizer2	file:	access:private	signature:(UnicodeString &first, const UnicodeString &second, UErrorCode &errorCode) const
NoopNormalizer2::getDecomposition	normalizer2.cpp	/^    getDecomposition(UChar32, UnicodeString &) const {$/;"	f	class:NoopNormalizer2	file:	access:private	signature:(UChar32, UnicodeString &) const
NoopNormalizer2::hasBoundaryAfter	normalizer2.cpp	/^    virtual UBool hasBoundaryAfter(UChar32) const { return TRUE; }$/;"	f	class:NoopNormalizer2	file:	access:private	signature:(UChar32) const
NoopNormalizer2::hasBoundaryBefore	normalizer2.cpp	/^    virtual UBool hasBoundaryBefore(UChar32) const { return TRUE; }$/;"	f	class:NoopNormalizer2	file:	access:private	signature:(UChar32) const
NoopNormalizer2::isInert	normalizer2.cpp	/^    virtual UBool isInert(UChar32) const { return TRUE; }$/;"	f	class:NoopNormalizer2	file:	access:private	signature:(UChar32) const
NoopNormalizer2::isNormalized	normalizer2.cpp	/^    isNormalized(const UnicodeString &, UErrorCode &) const {$/;"	f	class:NoopNormalizer2	file:	access:private	signature:(const UnicodeString &, UErrorCode &) const
NoopNormalizer2::normalize	normalizer2.cpp	/^    normalize(const UnicodeString &src,$/;"	f	class:NoopNormalizer2	file:	access:private	signature:(const UnicodeString &src, UnicodeString &dest, UErrorCode &errorCode) const
NoopNormalizer2::normalizeSecondAndAppend	normalizer2.cpp	/^    normalizeSecondAndAppend(UnicodeString &first,$/;"	f	class:NoopNormalizer2	file:	access:private	signature:(UnicodeString &first, const UnicodeString &second, UErrorCode &errorCode) const
NoopNormalizer2::quickCheck	normalizer2.cpp	/^    quickCheck(const UnicodeString &, UErrorCode &) const {$/;"	f	class:NoopNormalizer2	file:	access:private	signature:(const UnicodeString &, UErrorCode &) const
NoopNormalizer2::spanQuickCheckYes	normalizer2.cpp	/^    spanQuickCheckYes(const UnicodeString &s, UErrorCode &) const {$/;"	f	class:NoopNormalizer2	file:	access:private	signature:(const UnicodeString &s, UErrorCode &) const
Norm2AllModes	normalizer2.cpp	/^    Norm2AllModes() : comp(impl, FALSE), decomp(impl), fcd(impl), fcc(impl, TRUE) {}$/;"	f	struct:Norm2AllModes	access:public	signature:()
Norm2AllModes	normalizer2.cpp	/^struct Norm2AllModes : public UMemory {$/;"	s	file:	inherits:UMemory
Norm2AllModes	unicode/urename.h	2044;"	d
Norm2AllModes::Norm2AllModes	normalizer2.cpp	/^    Norm2AllModes() : comp(impl, FALSE), decomp(impl), fcd(impl), fcc(impl, TRUE) {}$/;"	f	struct:Norm2AllModes	access:public	signature:()
Norm2AllModes::comp	normalizer2.cpp	/^    ComposeNormalizer2 comp;$/;"	m	struct:Norm2AllModes	file:	access:public
Norm2AllModes::createInstance	normalizer2.cpp	/^    static Norm2AllModes *createInstance(const char *packageName,$/;"	p	struct:Norm2AllModes	file:	access:public	signature:(const char *packageName, const char *name, UErrorCode &errorCode)
Norm2AllModes::createInstance	normalizer2.cpp	/^Norm2AllModes::createInstance(const char *packageName,$/;"	f	class:Norm2AllModes	signature:(const char *packageName, const char *name, UErrorCode &errorCode)
Norm2AllModes::decomp	normalizer2.cpp	/^    DecomposeNormalizer2 decomp;$/;"	m	struct:Norm2AllModes	file:	access:public
Norm2AllModes::fcc	normalizer2.cpp	/^    ComposeNormalizer2 fcc;$/;"	m	struct:Norm2AllModes	file:	access:public
Norm2AllModes::fcd	normalizer2.cpp	/^    FCDNormalizer2 fcd;$/;"	m	struct:Norm2AllModes	file:	access:public
Norm2AllModes::impl	normalizer2.cpp	/^    Normalizer2Impl impl;$/;"	m	struct:Norm2AllModes	file:	access:public
Norm2AllModesSingleton	normalizer2.cpp	/^    Norm2AllModesSingleton(TriStateSingleton &s, const char *n) :$/;"	f	class:Norm2AllModesSingleton	access:public	signature:(TriStateSingleton &s, const char *n)
Norm2AllModesSingleton	normalizer2.cpp	/^class Norm2AllModesSingleton : public TriStateSingletonWrapper<Norm2AllModes> {$/;"	c	file:	inherits:TriStateSingletonWrapper
Norm2AllModesSingleton::Norm2AllModesSingleton	normalizer2.cpp	/^    Norm2AllModesSingleton(TriStateSingleton &s, const char *n) :$/;"	f	class:Norm2AllModesSingleton	access:public	signature:(TriStateSingleton &s, const char *n)
Norm2AllModesSingleton::createInstance	normalizer2.cpp	/^    static void *createInstance(const void *context, UErrorCode &errorCode) {$/;"	f	class:Norm2AllModesSingleton	file:	access:private	signature:(const void *context, UErrorCode &errorCode)
Norm2AllModesSingleton::getInstance	normalizer2.cpp	/^    Norm2AllModes *getInstance(UErrorCode &errorCode) {$/;"	f	class:Norm2AllModesSingleton	access:public	signature:(UErrorCode &errorCode)
Norm2AllModesSingleton::name	normalizer2.cpp	/^    const char *name;$/;"	m	class:Norm2AllModesSingleton	file:	access:private
Norm2Singleton	normalizer2.cpp	/^    Norm2Singleton(SimpleSingleton &s) : SimpleSingletonWrapper<Normalizer2>(s) {}$/;"	f	class:Norm2Singleton	access:public	signature:(SimpleSingleton &s)
Norm2Singleton	normalizer2.cpp	/^class Norm2Singleton : public SimpleSingletonWrapper<Normalizer2> {$/;"	c	file:	inherits:SimpleSingletonWrapper
Norm2Singleton::Norm2Singleton	normalizer2.cpp	/^    Norm2Singleton(SimpleSingleton &s) : SimpleSingletonWrapper<Normalizer2>(s) {}$/;"	f	class:Norm2Singleton	access:public	signature:(SimpleSingleton &s)
Norm2Singleton::createInstance	normalizer2.cpp	/^    static void *createInstance(const void *, UErrorCode &errorCode) {$/;"	f	class:Norm2Singleton	file:	access:private	signature:(const void *, UErrorCode &errorCode)
Norm2Singleton::getInstance	normalizer2.cpp	/^    Normalizer2 *getInstance(UErrorCode &errorCode) {$/;"	f	class:Norm2Singleton	access:public	signature:(UErrorCode &errorCode)
NormalizationTransliterator	unicode/urename.h	2045;"	d
Normalizer	normlzr.cpp	/^Normalizer::Normalizer(const CharacterIterator& iter, UNormalizationMode mode) :$/;"	f	class:Normalizer	signature:(const CharacterIterator& iter, UNormalizationMode mode)
Normalizer	normlzr.cpp	/^Normalizer::Normalizer(const Normalizer &copy) :$/;"	f	class:Normalizer	signature:(const Normalizer &copy)
Normalizer	normlzr.cpp	/^Normalizer::Normalizer(const UChar *str, int32_t length, UNormalizationMode mode) :$/;"	f	class:Normalizer	signature:(const UChar *str, int32_t length, UNormalizationMode mode)
Normalizer	normlzr.cpp	/^Normalizer::Normalizer(const UnicodeString& str, UNormalizationMode mode) :$/;"	f	class:Normalizer	signature:(const UnicodeString& str, UNormalizationMode mode)
Normalizer	unicode/normlzr.h	/^  Normalizer(); \/\/ default constructor not implemented$/;"	p	class:Normalizer	access:private	signature:()
Normalizer	unicode/normlzr.h	/^  Normalizer(const CharacterIterator& iter, UNormalizationMode mode);$/;"	p	class:Normalizer	access:public	signature:(const CharacterIterator& iter, UNormalizationMode mode)
Normalizer	unicode/normlzr.h	/^  Normalizer(const Normalizer& copy);$/;"	p	class:Normalizer	access:public	signature:(const Normalizer& copy)
Normalizer	unicode/normlzr.h	/^  Normalizer(const UChar* str, int32_t length, UNormalizationMode mode);$/;"	p	class:Normalizer	access:public	signature:(const UChar* str, int32_t length, UNormalizationMode mode)
Normalizer	unicode/normlzr.h	/^  Normalizer(const UnicodeString& str, UNormalizationMode mode);$/;"	p	class:Normalizer	access:public	signature:(const UnicodeString& str, UNormalizationMode mode)
Normalizer	unicode/normlzr.h	/^class U_COMMON_API Normalizer : public UObject {$/;"	c	inherits:UObject
Normalizer	unicode/urename.h	2046;"	d
Normalizer2	unicode/caniter.h	/^class Normalizer2;$/;"	x
Normalizer2	unicode/normalizer2.h	/^class U_COMMON_API Normalizer2 : public UObject {$/;"	c	inherits:UObject
Normalizer2	unicode/urename.h	2047;"	d
Normalizer2::append	unicode/normalizer2.h	/^    append(UnicodeString &first,$/;"	p	class:Normalizer2	access:public	signature:(UnicodeString &first, const UnicodeString &second, UErrorCode &errorCode) const
Normalizer2::getDecomposition	unicode/normalizer2.h	/^    getDecomposition(UChar32 c, UnicodeString &decomposition) const = 0;$/;"	p	class:Normalizer2	access:public	signature:(UChar32 c, UnicodeString &decomposition) const
Normalizer2::getDynamicClassID	unicode/normalizer2.h	/^    virtual UClassID getDynamicClassID() const;$/;"	p	class:Normalizer2	access:private	signature:() const
Normalizer2::getInstance	normalizer2.cpp	/^Normalizer2::getInstance(const char *packageName,$/;"	f	class:Normalizer2	signature:(const char *packageName, const char *name, UNormalization2Mode mode, UErrorCode &errorCode)
Normalizer2::getInstance	unicode/normalizer2.h	/^    getInstance(const char *packageName,$/;"	p	class:Normalizer2	access:public	signature:(const char *packageName, const char *name, UNormalization2Mode mode, UErrorCode &errorCode)
Normalizer2::hasBoundaryAfter	unicode/normalizer2.h	/^    virtual UBool hasBoundaryAfter(UChar32 c) const = 0;$/;"	p	class:Normalizer2	access:public	signature:(UChar32 c) const
Normalizer2::hasBoundaryBefore	unicode/normalizer2.h	/^    virtual UBool hasBoundaryBefore(UChar32 c) const = 0;$/;"	p	class:Normalizer2	access:public	signature:(UChar32 c) const
Normalizer2::isInert	unicode/normalizer2.h	/^    virtual UBool isInert(UChar32 c) const = 0;$/;"	p	class:Normalizer2	access:public	signature:(UChar32 c) const
Normalizer2::isNormalized	unicode/normalizer2.h	/^    isNormalized(const UnicodeString &s, UErrorCode &errorCode) const = 0;$/;"	p	class:Normalizer2	access:public	signature:(const UnicodeString &s, UErrorCode &errorCode) const
Normalizer2::normalize	unicode/normalizer2.h	/^    normalize(const UnicodeString &src, UErrorCode &errorCode) const {$/;"	f	class:Normalizer2	access:public	signature:(const UnicodeString &src, UErrorCode &errorCode) const
Normalizer2::normalize	unicode/normalizer2.h	/^    normalize(const UnicodeString &src,$/;"	p	class:Normalizer2	access:public	signature:(const UnicodeString &src, UnicodeString &dest, UErrorCode &errorCode) const
Normalizer2::normalizeSecondAndAppend	unicode/normalizer2.h	/^    normalizeSecondAndAppend(UnicodeString &first,$/;"	p	class:Normalizer2	access:public	signature:(UnicodeString &first, const UnicodeString &second, UErrorCode &errorCode) const
Normalizer2::quickCheck	unicode/normalizer2.h	/^    quickCheck(const UnicodeString &s, UErrorCode &errorCode) const = 0;$/;"	p	class:Normalizer2	access:public	signature:(const UnicodeString &s, UErrorCode &errorCode) const
Normalizer2::spanQuickCheckYes	unicode/normalizer2.h	/^    spanQuickCheckYes(const UnicodeString &s, UErrorCode &errorCode) const = 0;$/;"	p	class:Normalizer2	access:public	signature:(const UnicodeString &s, UErrorCode &errorCode) const
Normalizer2Factory	normalizer2impl.h	/^    Normalizer2Factory();  \/\/ No instantiation.$/;"	p	class:Normalizer2Factory	access:private	signature:()
Normalizer2Factory	normalizer2impl.h	/^class U_COMMON_API Normalizer2Factory {$/;"	c
Normalizer2Factory	unicode/urename.h	2048;"	d
Normalizer2Factory::Normalizer2Factory	normalizer2impl.h	/^    Normalizer2Factory();  \/\/ No instantiation.$/;"	p	class:Normalizer2Factory	access:private	signature:()
Normalizer2Factory::getFCCInstance	normalizer2.cpp	/^const Normalizer2 *Normalizer2Factory::getFCCInstance(UErrorCode &errorCode) {$/;"	f	class:Normalizer2Factory	signature:(UErrorCode &errorCode)
Normalizer2Factory::getFCCInstance	normalizer2impl.h	/^    static const Normalizer2 *getFCCInstance(UErrorCode &errorCode);$/;"	p	class:Normalizer2Factory	access:public	signature:(UErrorCode &errorCode)
Normalizer2Factory::getFCDInstance	normalizer2.cpp	/^const Normalizer2 *Normalizer2Factory::getFCDInstance(UErrorCode &errorCode) {$/;"	f	class:Normalizer2Factory	signature:(UErrorCode &errorCode)
Normalizer2Factory::getFCDInstance	normalizer2impl.h	/^    static const Normalizer2 *getFCDInstance(UErrorCode &errorCode);$/;"	p	class:Normalizer2Factory	access:public	signature:(UErrorCode &errorCode)
Normalizer2Factory::getFCDTrie	normalizer2.cpp	/^Normalizer2Factory::getFCDTrie(UErrorCode &errorCode) {$/;"	f	class:Normalizer2Factory	signature:(UErrorCode &errorCode)
Normalizer2Factory::getFCDTrie	normalizer2impl.h	/^    static const UTrie2 *getFCDTrie(UErrorCode &errorCode);$/;"	p	class:Normalizer2Factory	access:public	signature:(UErrorCode &errorCode)
Normalizer2Factory::getImpl	normalizer2.cpp	/^Normalizer2Factory::getImpl(const Normalizer2 *norm2) {$/;"	f	class:Normalizer2Factory	signature:(const Normalizer2 *norm2)
Normalizer2Factory::getImpl	normalizer2impl.h	/^    static const Normalizer2Impl *getImpl(const Normalizer2 *norm2);$/;"	p	class:Normalizer2Factory	access:public	signature:(const Normalizer2 *norm2)
Normalizer2Factory::getInstance	normalizer2.cpp	/^Normalizer2Factory::getInstance(UNormalizationMode mode, UErrorCode &errorCode) {$/;"	f	class:Normalizer2Factory	signature:(UNormalizationMode mode, UErrorCode &errorCode)
Normalizer2Factory::getInstance	normalizer2impl.h	/^    static const Normalizer2 *getInstance(UNormalizationMode mode, UErrorCode &errorCode);$/;"	p	class:Normalizer2Factory	access:public	signature:(UNormalizationMode mode, UErrorCode &errorCode)
Normalizer2Factory::getNFCImpl	normalizer2.cpp	/^Normalizer2Factory::getNFCImpl(UErrorCode &errorCode) {$/;"	f	class:Normalizer2Factory	signature:(UErrorCode &errorCode)
Normalizer2Factory::getNFCImpl	normalizer2impl.h	/^    static const Normalizer2Impl *getNFCImpl(UErrorCode &errorCode);$/;"	p	class:Normalizer2Factory	access:public	signature:(UErrorCode &errorCode)
Normalizer2Factory::getNFCInstance	normalizer2.cpp	/^const Normalizer2 *Normalizer2Factory::getNFCInstance(UErrorCode &errorCode) {$/;"	f	class:Normalizer2Factory	signature:(UErrorCode &errorCode)
Normalizer2Factory::getNFCInstance	normalizer2impl.h	/^    static const Normalizer2 *getNFCInstance(UErrorCode &errorCode);$/;"	p	class:Normalizer2Factory	access:public	signature:(UErrorCode &errorCode)
Normalizer2Factory::getNFDInstance	normalizer2.cpp	/^const Normalizer2 *Normalizer2Factory::getNFDInstance(UErrorCode &errorCode) {$/;"	f	class:Normalizer2Factory	signature:(UErrorCode &errorCode)
Normalizer2Factory::getNFDInstance	normalizer2impl.h	/^    static const Normalizer2 *getNFDInstance(UErrorCode &errorCode);$/;"	p	class:Normalizer2Factory	access:public	signature:(UErrorCode &errorCode)
Normalizer2Factory::getNFKCImpl	normalizer2.cpp	/^Normalizer2Factory::getNFKCImpl(UErrorCode &errorCode) {$/;"	f	class:Normalizer2Factory	signature:(UErrorCode &errorCode)
Normalizer2Factory::getNFKCImpl	normalizer2impl.h	/^    static const Normalizer2Impl *getNFKCImpl(UErrorCode &errorCode);$/;"	p	class:Normalizer2Factory	access:public	signature:(UErrorCode &errorCode)
Normalizer2Factory::getNFKCInstance	normalizer2.cpp	/^const Normalizer2 *Normalizer2Factory::getNFKCInstance(UErrorCode &errorCode) {$/;"	f	class:Normalizer2Factory	signature:(UErrorCode &errorCode)
Normalizer2Factory::getNFKCInstance	normalizer2impl.h	/^    static const Normalizer2 *getNFKCInstance(UErrorCode &errorCode);$/;"	p	class:Normalizer2Factory	access:public	signature:(UErrorCode &errorCode)
Normalizer2Factory::getNFKC_CFImpl	normalizer2.cpp	/^Normalizer2Factory::getNFKC_CFImpl(UErrorCode &errorCode) {$/;"	f	class:Normalizer2Factory	signature:(UErrorCode &errorCode)
Normalizer2Factory::getNFKC_CFImpl	normalizer2impl.h	/^    static const Normalizer2Impl *getNFKC_CFImpl(UErrorCode &errorCode);$/;"	p	class:Normalizer2Factory	access:public	signature:(UErrorCode &errorCode)
Normalizer2Factory::getNFKC_CFInstance	normalizer2.cpp	/^const Normalizer2 *Normalizer2Factory::getNFKC_CFInstance(UErrorCode &errorCode) {$/;"	f	class:Normalizer2Factory	signature:(UErrorCode &errorCode)
Normalizer2Factory::getNFKC_CFInstance	normalizer2impl.h	/^    static const Normalizer2 *getNFKC_CFInstance(UErrorCode &errorCode);$/;"	p	class:Normalizer2Factory	access:public	signature:(UErrorCode &errorCode)
Normalizer2Factory::getNFKDInstance	normalizer2.cpp	/^const Normalizer2 *Normalizer2Factory::getNFKDInstance(UErrorCode &errorCode) {$/;"	f	class:Normalizer2Factory	signature:(UErrorCode &errorCode)
Normalizer2Factory::getNFKDInstance	normalizer2impl.h	/^    static const Normalizer2 *getNFKDInstance(UErrorCode &errorCode);$/;"	p	class:Normalizer2Factory	access:public	signature:(UErrorCode &errorCode)
Normalizer2Factory::getNoopInstance	normalizer2.cpp	/^const Normalizer2 *Normalizer2Factory::getNoopInstance(UErrorCode &errorCode) {$/;"	f	class:Normalizer2Factory	signature:(UErrorCode &errorCode)
Normalizer2Factory::getNoopInstance	normalizer2impl.h	/^    static const Normalizer2 *getNoopInstance(UErrorCode &errorCode);$/;"	p	class:Normalizer2Factory	access:public	signature:(UErrorCode &errorCode)
Normalizer2Impl	normalizer2impl.h	/^    Normalizer2Impl() : memory(NULL), normTrie(NULL) {$/;"	f	class:Normalizer2Impl	access:public	signature:()
Normalizer2Impl	normalizer2impl.h	/^class Normalizer2Impl;$/;"	x
Normalizer2Impl	normalizer2impl.h	/^class U_COMMON_API Normalizer2Impl : public UMemory {$/;"	c	inherits:UMemory
Normalizer2Impl	unicode/caniter.h	/^class Normalizer2Impl;$/;"	x
Normalizer2Impl	unicode/urename.h	2049;"	d
Normalizer2Impl::COMP_1_LAST_TUPLE	normalizer2impl.h	/^        COMP_1_LAST_TUPLE=0x8000,$/;"	e	enum:Normalizer2Impl::__anon50
Normalizer2Impl::COMP_1_TRAIL_LIMIT	normalizer2impl.h	/^        COMP_1_TRAIL_LIMIT=0x3400,$/;"	e	enum:Normalizer2Impl::__anon50
Normalizer2Impl::COMP_1_TRAIL_MASK	normalizer2impl.h	/^        COMP_1_TRAIL_MASK=0x7ffe,$/;"	e	enum:Normalizer2Impl::__anon50
Normalizer2Impl::COMP_1_TRAIL_SHIFT	normalizer2impl.h	/^        COMP_1_TRAIL_SHIFT=9,  \/\/ 10-1 for the "triple" bit$/;"	e	enum:Normalizer2Impl::__anon50
Normalizer2Impl::COMP_1_TRIPLE	normalizer2impl.h	/^        COMP_1_TRIPLE=1,$/;"	e	enum:Normalizer2Impl::__anon50
Normalizer2Impl::COMP_2_TRAIL_MASK	normalizer2impl.h	/^        COMP_2_TRAIL_MASK=0xffc0$/;"	e	enum:Normalizer2Impl::__anon50
Normalizer2Impl::COMP_2_TRAIL_SHIFT	normalizer2impl.h	/^        COMP_2_TRAIL_SHIFT=6,$/;"	e	enum:Normalizer2Impl::__anon50
Normalizer2Impl::IX_COUNT	normalizer2impl.h	/^        IX_COUNT$/;"	e	enum:Normalizer2Impl::__anon48
Normalizer2Impl::IX_EXTRA_DATA_OFFSET	normalizer2impl.h	/^        IX_EXTRA_DATA_OFFSET,$/;"	e	enum:Normalizer2Impl::__anon48
Normalizer2Impl::IX_LIMIT_NO_NO	normalizer2impl.h	/^        IX_LIMIT_NO_NO,$/;"	e	enum:Normalizer2Impl::__anon48
Normalizer2Impl::IX_MIN_COMP_NO_MAYBE_CP	normalizer2impl.h	/^        IX_MIN_COMP_NO_MAYBE_CP,$/;"	e	enum:Normalizer2Impl::__anon48
Normalizer2Impl::IX_MIN_DECOMP_NO_CP	normalizer2impl.h	/^        IX_MIN_DECOMP_NO_CP,$/;"	e	enum:Normalizer2Impl::__anon48
Normalizer2Impl::IX_MIN_MAYBE_YES	normalizer2impl.h	/^        IX_MIN_MAYBE_YES,$/;"	e	enum:Normalizer2Impl::__anon48
Normalizer2Impl::IX_MIN_NO_NO	normalizer2impl.h	/^        IX_MIN_NO_NO,$/;"	e	enum:Normalizer2Impl::__anon48
Normalizer2Impl::IX_MIN_YES_NO	normalizer2impl.h	/^        IX_MIN_YES_NO,$/;"	e	enum:Normalizer2Impl::__anon48
Normalizer2Impl::IX_NORM_TRIE_OFFSET	normalizer2impl.h	/^        IX_NORM_TRIE_OFFSET,$/;"	e	enum:Normalizer2Impl::__anon48
Normalizer2Impl::IX_RESERVED14	normalizer2impl.h	/^        IX_RESERVED14,$/;"	e	enum:Normalizer2Impl::__anon48
Normalizer2Impl::IX_RESERVED15	normalizer2impl.h	/^        IX_RESERVED15,$/;"	e	enum:Normalizer2Impl::__anon48
Normalizer2Impl::IX_RESERVED2_OFFSET	normalizer2impl.h	/^        IX_RESERVED2_OFFSET,$/;"	e	enum:Normalizer2Impl::__anon48
Normalizer2Impl::IX_RESERVED3_OFFSET	normalizer2impl.h	/^        IX_RESERVED3_OFFSET,$/;"	e	enum:Normalizer2Impl::__anon48
Normalizer2Impl::IX_RESERVED4_OFFSET	normalizer2impl.h	/^        IX_RESERVED4_OFFSET,$/;"	e	enum:Normalizer2Impl::__anon48
Normalizer2Impl::IX_RESERVED5_OFFSET	normalizer2impl.h	/^        IX_RESERVED5_OFFSET,$/;"	e	enum:Normalizer2Impl::__anon48
Normalizer2Impl::IX_RESERVED6_OFFSET	normalizer2impl.h	/^        IX_RESERVED6_OFFSET,$/;"	e	enum:Normalizer2Impl::__anon48
Normalizer2Impl::IX_TOTAL_SIZE	normalizer2impl.h	/^        IX_TOTAL_SIZE,$/;"	e	enum:Normalizer2Impl::__anon48
Normalizer2Impl::JAMO_L	normalizer2impl.h	/^        JAMO_L=1,$/;"	e	enum:Normalizer2Impl::__anon47
Normalizer2Impl::JAMO_VT	normalizer2impl.h	/^        JAMO_VT=0xff00,$/;"	e	enum:Normalizer2Impl::__anon47
Normalizer2Impl::MAPPING_HAS_CCC_LCCC_WORD	normalizer2impl.h	/^        MAPPING_HAS_CCC_LCCC_WORD=0x80,$/;"	e	enum:Normalizer2Impl::__anon49
Normalizer2Impl::MAPPING_LENGTH_MASK	normalizer2impl.h	/^        MAPPING_LENGTH_MASK=0x1f$/;"	e	enum:Normalizer2Impl::__anon49
Normalizer2Impl::MAPPING_NO_COMP_BOUNDARY_AFTER	normalizer2impl.h	/^        MAPPING_NO_COMP_BOUNDARY_AFTER=0x20,$/;"	e	enum:Normalizer2Impl::__anon49
Normalizer2Impl::MAPPING_PLUS_COMPOSITION_LIST	normalizer2impl.h	/^        MAPPING_PLUS_COMPOSITION_LIST=0x40,$/;"	e	enum:Normalizer2Impl::__anon49
Normalizer2Impl::MAX_DELTA	normalizer2impl.h	/^        MAX_DELTA=0x40$/;"	e	enum:Normalizer2Impl::__anon47
Normalizer2Impl::MIN_CCC_LCCC_CP	normalizer2impl.h	/^        MIN_CCC_LCCC_CP=0x300$/;"	e	enum:Normalizer2Impl::__anon46
Normalizer2Impl::MIN_NORMAL_MAYBE_YES	normalizer2impl.h	/^        MIN_NORMAL_MAYBE_YES=0xfe00,$/;"	e	enum:Normalizer2Impl::__anon47
Normalizer2Impl::MIN_YES_YES_WITH_CC	normalizer2impl.h	/^        MIN_YES_YES_WITH_CC=0xff01,$/;"	e	enum:Normalizer2Impl::__anon47
Normalizer2Impl::Normalizer2Impl	normalizer2impl.h	/^    Normalizer2Impl() : memory(NULL), normTrie(NULL) {$/;"	f	class:Normalizer2Impl	access:public	signature:()
Normalizer2Impl::addCanonIterPropertyStarts	normalizer2impl.cpp	/^Normalizer2Impl::addCanonIterPropertyStarts(const USetAdder *sa, UErrorCode &errorCode) const {$/;"	f	class:Normalizer2Impl	signature:(const USetAdder *sa, UErrorCode &errorCode) const
Normalizer2Impl::addCanonIterPropertyStarts	normalizer2impl.h	/^    void addCanonIterPropertyStarts(const USetAdder *sa, UErrorCode &errorCode) const;$/;"	p	class:Normalizer2Impl	access:public	signature:(const USetAdder *sa, UErrorCode &errorCode) const
Normalizer2Impl::addComposites	normalizer2impl.cpp	/^void Normalizer2Impl::addComposites(const uint16_t *list, UnicodeSet &set) const {$/;"	f	class:Normalizer2Impl	signature:(const uint16_t *list, UnicodeSet &set) const
Normalizer2Impl::addComposites	normalizer2impl.h	/^    void addComposites(const uint16_t *list, UnicodeSet &set) const;$/;"	p	class:Normalizer2Impl	access:private	signature:(const uint16_t *list, UnicodeSet &set) const
Normalizer2Impl::addPropertyStarts	normalizer2impl.cpp	/^Normalizer2Impl::addPropertyStarts(const USetAdder *sa, UErrorCode & \/*errorCode*\/) const {$/;"	f	class:Normalizer2Impl	signature:(const USetAdder *sa, UErrorCode & ) const
Normalizer2Impl::addPropertyStarts	normalizer2impl.h	/^    void addPropertyStarts(const USetAdder *sa, UErrorCode &errorCode) const;$/;"	p	class:Normalizer2Impl	access:public	signature:(const USetAdder *sa, UErrorCode &errorCode) const
Normalizer2Impl::canonIterDataSingleton	normalizer2impl.h	/^    SimpleSingleton canonIterDataSingleton;$/;"	m	class:Normalizer2Impl	access:private
Normalizer2Impl::combine	normalizer2impl.cpp	/^int32_t Normalizer2Impl::combine(const uint16_t *list, UChar32 trail) {$/;"	f	class:Normalizer2Impl	signature:(const uint16_t *list, UChar32 trail)
Normalizer2Impl::combine	normalizer2impl.h	/^    static int32_t combine(const uint16_t *list, UChar32 trail);$/;"	p	class:Normalizer2Impl	access:private	signature:(const uint16_t *list, UChar32 trail)
Normalizer2Impl::compose	normalizer2impl.cpp	/^Normalizer2Impl::compose(const UChar *src, const UChar *limit,$/;"	f	class:Normalizer2Impl	signature:(const UChar *src, const UChar *limit, UBool onlyContiguous, UBool doCompose, ReorderingBuffer &buffer, UErrorCode &errorCode) const
Normalizer2Impl::compose	normalizer2impl.h	/^    UBool compose(const UChar *src, const UChar *limit,$/;"	p	class:Normalizer2Impl	access:public	signature:(const UChar *src, const UChar *limit, UBool onlyContiguous, UBool doCompose, ReorderingBuffer &buffer, UErrorCode &errorCode) const
Normalizer2Impl::composeAndAppend	normalizer2impl.cpp	/^void Normalizer2Impl::composeAndAppend(const UChar *src, const UChar *limit,$/;"	f	class:Normalizer2Impl	signature:(const UChar *src, const UChar *limit, UBool doCompose, UBool onlyContiguous, ReorderingBuffer &buffer, UErrorCode &errorCode) const
Normalizer2Impl::composeAndAppend	normalizer2impl.h	/^    void composeAndAppend(const UChar *src, const UChar *limit,$/;"	p	class:Normalizer2Impl	access:public	signature:(const UChar *src, const UChar *limit, UBool doCompose, UBool onlyContiguous, ReorderingBuffer &buffer, UErrorCode &errorCode) const
Normalizer2Impl::composeQuickCheck	normalizer2impl.cpp	/^Normalizer2Impl::composeQuickCheck(const UChar *src, const UChar *limit,$/;"	f	class:Normalizer2Impl	signature:(const UChar *src, const UChar *limit, UBool onlyContiguous, UNormalizationCheckResult *pQCResult) const
Normalizer2Impl::composeQuickCheck	normalizer2impl.h	/^    const UChar *composeQuickCheck(const UChar *src, const UChar *limit,$/;"	p	class:Normalizer2Impl	access:public	signature:(const UChar *src, const UChar *limit, UBool onlyContiguous, UNormalizationCheckResult *pQCResult) const
Normalizer2Impl::copyLowPrefixFromNulTerminated	normalizer2impl.cpp	/^Normalizer2Impl::copyLowPrefixFromNulTerminated(const UChar *src,$/;"	f	class:Normalizer2Impl	signature:(const UChar *src, UChar32 minNeedDataCP, ReorderingBuffer *buffer, UErrorCode &errorCode) const
Normalizer2Impl::copyLowPrefixFromNulTerminated	normalizer2impl.h	/^    const UChar *copyLowPrefixFromNulTerminated(const UChar *src,$/;"	p	class:Normalizer2Impl	access:private	signature:(const UChar *src, UChar32 minNeedDataCP, ReorderingBuffer *buffer, UErrorCode &errorCode) const
Normalizer2Impl::dataVersion	normalizer2impl.h	/^    UVersionInfo dataVersion;$/;"	m	class:Normalizer2Impl	access:private
Normalizer2Impl::decompose	normalizer2impl.cpp	/^Normalizer2Impl::decompose(const UChar *src, const UChar *limit,$/;"	f	class:Normalizer2Impl	signature:(const UChar *src, const UChar *limit, ReorderingBuffer *buffer, UErrorCode &errorCode) const
Normalizer2Impl::decompose	normalizer2impl.cpp	/^UBool Normalizer2Impl::decompose(UChar32 c, uint16_t norm16,$/;"	f	class:Normalizer2Impl	signature:(UChar32 c, uint16_t norm16, ReorderingBuffer &buffer, UErrorCode &errorCode) const
Normalizer2Impl::decompose	normalizer2impl.h	/^    UBool decompose(UChar32 c, uint16_t norm16,$/;"	p	class:Normalizer2Impl	access:private	signature:(UChar32 c, uint16_t norm16, ReorderingBuffer &buffer, UErrorCode &errorCode) const
Normalizer2Impl::decompose	normalizer2impl.h	/^    const UChar *decompose(const UChar *src, const UChar *limit,$/;"	p	class:Normalizer2Impl	access:public	signature:(const UChar *src, const UChar *limit, ReorderingBuffer *buffer, UErrorCode &errorCode) const
Normalizer2Impl::decomposeAndAppend	normalizer2impl.cpp	/^void Normalizer2Impl::decomposeAndAppend(const UChar *src, const UChar *limit,$/;"	f	class:Normalizer2Impl	signature:(const UChar *src, const UChar *limit, UBool doDecompose, ReorderingBuffer &buffer, UErrorCode &errorCode) const
Normalizer2Impl::decomposeAndAppend	normalizer2impl.h	/^    void decomposeAndAppend(const UChar *src, const UChar *limit,$/;"	p	class:Normalizer2Impl	access:public	signature:(const UChar *src, const UChar *limit, UBool doDecompose, ReorderingBuffer &buffer, UErrorCode &errorCode) const
Normalizer2Impl::decomposeShort	normalizer2impl.cpp	/^UBool Normalizer2Impl::decomposeShort(const UChar *src, const UChar *limit,$/;"	f	class:Normalizer2Impl	signature:(const UChar *src, const UChar *limit, ReorderingBuffer &buffer, UErrorCode &errorCode) const
Normalizer2Impl::decomposeShort	normalizer2impl.h	/^    UBool decomposeShort(const UChar *src, const UChar *limit,$/;"	p	class:Normalizer2Impl	access:private	signature:(const UChar *src, const UChar *limit, ReorderingBuffer &buffer, UErrorCode &errorCode) const
Normalizer2Impl::ensureCanonIterData	normalizer2impl.cpp	/^UBool Normalizer2Impl::ensureCanonIterData(UErrorCode &errorCode) const {$/;"	f	class:Normalizer2Impl	signature:(UErrorCode &errorCode) const
Normalizer2Impl::ensureCanonIterData	normalizer2impl.h	/^    UBool ensureCanonIterData(UErrorCode &errorCode) const;$/;"	p	class:Normalizer2Impl	access:public	signature:(UErrorCode &errorCode) const
Normalizer2Impl::extraData	normalizer2impl.h	/^    const uint16_t *extraData;  \/\/ mappings and\/or compositions for yesYes, yesNo & noNo characters$/;"	m	class:Normalizer2Impl	access:private
Normalizer2Impl::fcdTrie	normalizer2impl.h	/^    const UTrie2 *fcdTrie() const { return (const UTrie2 *)fcdTrieSingleton.fInstance; }$/;"	f	class:Normalizer2Impl	access:private	signature:() const
Normalizer2Impl::fcdTrieSingleton	normalizer2impl.h	/^    SimpleSingleton fcdTrieSingleton;$/;"	m	class:Normalizer2Impl	access:private
Normalizer2Impl::findNextCompBoundary	normalizer2impl.cpp	/^const UChar *Normalizer2Impl::findNextCompBoundary(const UChar *p, const UChar *limit) const {$/;"	f	class:Normalizer2Impl	signature:(const UChar *p, const UChar *limit) const
Normalizer2Impl::findNextCompBoundary	normalizer2impl.h	/^    const UChar *findNextCompBoundary(const UChar *p, const UChar *limit) const;$/;"	p	class:Normalizer2Impl	access:private	signature:(const UChar *p, const UChar *limit) const
Normalizer2Impl::findNextFCDBoundary	normalizer2impl.cpp	/^const UChar *Normalizer2Impl::findNextFCDBoundary(const UChar *p, const UChar *limit) const {$/;"	f	class:Normalizer2Impl	signature:(const UChar *p, const UChar *limit) const
Normalizer2Impl::findNextFCDBoundary	normalizer2impl.h	/^    const UChar *findNextFCDBoundary(const UChar *p, const UChar *limit) const;$/;"	p	class:Normalizer2Impl	access:private	signature:(const UChar *p, const UChar *limit) const
Normalizer2Impl::findPreviousCompBoundary	normalizer2impl.cpp	/^const UChar *Normalizer2Impl::findPreviousCompBoundary(const UChar *start, const UChar *p) const {$/;"	f	class:Normalizer2Impl	signature:(const UChar *start, const UChar *p) const
Normalizer2Impl::findPreviousCompBoundary	normalizer2impl.h	/^    const UChar *findPreviousCompBoundary(const UChar *start, const UChar *p) const;$/;"	p	class:Normalizer2Impl	access:private	signature:(const UChar *start, const UChar *p) const
Normalizer2Impl::findPreviousFCDBoundary	normalizer2impl.cpp	/^const UChar *Normalizer2Impl::findPreviousFCDBoundary(const UChar *start, const UChar *p) const {$/;"	f	class:Normalizer2Impl	signature:(const UChar *start, const UChar *p) const
Normalizer2Impl::findPreviousFCDBoundary	normalizer2impl.h	/^    const UChar *findPreviousFCDBoundary(const UChar *start, const UChar *p) const;$/;"	p	class:Normalizer2Impl	access:private	signature:(const UChar *start, const UChar *p) const
Normalizer2Impl::getCC	normalizer2impl.h	/^    uint8_t getCC(uint16_t norm16) const {$/;"	f	class:Normalizer2Impl	access:public	signature:(uint16_t norm16) const
Normalizer2Impl::getCCFromNoNo	normalizer2impl.h	/^    uint8_t getCCFromNoNo(uint16_t norm16) const {$/;"	f	class:Normalizer2Impl	access:private	signature:(uint16_t norm16) const
Normalizer2Impl::getCCFromYesOrMaybe	normalizer2impl.h	/^    static uint8_t getCCFromYesOrMaybe(uint16_t norm16) {$/;"	f	class:Normalizer2Impl	access:public	signature:(uint16_t norm16)
Normalizer2Impl::getCanonStartSet	normalizer2impl.cpp	/^UBool Normalizer2Impl::getCanonStartSet(UChar32 c, UnicodeSet &set) const {$/;"	f	class:Normalizer2Impl	signature:(UChar32 c, UnicodeSet &set) const
Normalizer2Impl::getCanonStartSet	normalizer2impl.cpp	/^const UnicodeSet &Normalizer2Impl::getCanonStartSet(int32_t n) const {$/;"	f	class:Normalizer2Impl	signature:(int32_t n) const
Normalizer2Impl::getCanonStartSet	normalizer2impl.h	/^    UBool getCanonStartSet(UChar32 c, UnicodeSet &set) const;$/;"	p	class:Normalizer2Impl	access:public	signature:(UChar32 c, UnicodeSet &set) const
Normalizer2Impl::getCanonStartSet	normalizer2impl.h	/^    const UnicodeSet &getCanonStartSet(int32_t n) const;$/;"	p	class:Normalizer2Impl	access:private	signature:(int32_t n) const
Normalizer2Impl::getCanonValue	normalizer2impl.cpp	/^int32_t Normalizer2Impl::getCanonValue(UChar32 c) const {$/;"	f	class:Normalizer2Impl	signature:(UChar32 c) const
Normalizer2Impl::getCanonValue	normalizer2impl.h	/^    int32_t getCanonValue(UChar32 c) const;$/;"	p	class:Normalizer2Impl	access:private	signature:(UChar32 c) const
Normalizer2Impl::getCompQuickCheck	normalizer2impl.h	/^    UNormalizationCheckResult getCompQuickCheck(uint16_t norm16) const {$/;"	f	class:Normalizer2Impl	access:public	signature:(uint16_t norm16) const
Normalizer2Impl::getCompositionsList	normalizer2impl.h	/^    const uint16_t *getCompositionsList(uint16_t norm16) const {$/;"	f	class:Normalizer2Impl	access:private	signature:(uint16_t norm16) const
Normalizer2Impl::getCompositionsListForComposite	normalizer2impl.h	/^    const uint16_t *getCompositionsListForComposite(uint16_t norm16) const {$/;"	f	class:Normalizer2Impl	access:private	signature:(uint16_t norm16) const
Normalizer2Impl::getCompositionsListForDecompYes	normalizer2impl.h	/^    const uint16_t *getCompositionsListForDecompYes(uint16_t norm16) const {$/;"	f	class:Normalizer2Impl	access:private	signature:(uint16_t norm16) const
Normalizer2Impl::getDecomposition	normalizer2impl.cpp	/^Normalizer2Impl::getDecomposition(UChar32 c, UChar buffer[4], int32_t &length) const {$/;"	f	class:Normalizer2Impl	signature:(UChar32 c, UChar buffer[4], int32_t &length) const
Normalizer2Impl::getDecomposition	normalizer2impl.h	/^    const UChar *getDecomposition(UChar32 c, UChar buffer[4], int32_t &length) const;$/;"	p	class:Normalizer2Impl	access:public	signature:(UChar32 c, UChar buffer[4], int32_t &length) const
Normalizer2Impl::getFCD16	normalizer2impl.h	/^    uint16_t getFCD16(UChar32 c) const { return UTRIE2_GET16(fcdTrie(), c); }$/;"	f	class:Normalizer2Impl	access:public	signature:(UChar32 c) const
Normalizer2Impl::getFCD16FromSingleLead	normalizer2impl.h	/^    uint16_t getFCD16FromSingleLead(UChar c) const {$/;"	f	class:Normalizer2Impl	access:public	signature:(UChar c) const
Normalizer2Impl::getFCD16FromSupplementary	normalizer2impl.h	/^    uint16_t getFCD16FromSupplementary(UChar32 c) const {$/;"	f	class:Normalizer2Impl	access:public	signature:(UChar32 c) const
Normalizer2Impl::getFCD16FromSurrogatePair	normalizer2impl.h	/^    uint16_t getFCD16FromSurrogatePair(UChar c, UChar c2) const {$/;"	f	class:Normalizer2Impl	access:public	signature:(UChar c, UChar c2) const
Normalizer2Impl::getFCDTrie	normalizer2impl.cpp	/^const UTrie2 *Normalizer2Impl::getFCDTrie(UErrorCode &errorCode) const {$/;"	f	class:Normalizer2Impl	signature:(UErrorCode &errorCode) const
Normalizer2Impl::getFCDTrie	normalizer2impl.h	/^    const UTrie2 *getFCDTrie(UErrorCode &errorCode) const ;$/;"	p	class:Normalizer2Impl	access:public	signature:(UErrorCode &errorCode) const
Normalizer2Impl::getMapping	normalizer2impl.h	/^    const uint16_t *getMapping(uint16_t norm16) const { return extraData+norm16; }$/;"	f	class:Normalizer2Impl	access:private	signature:(uint16_t norm16) const
Normalizer2Impl::getNorm16	normalizer2impl.h	/^    uint16_t getNorm16(UChar32 c) const { return UTRIE2_GET16(normTrie, c); }$/;"	f	class:Normalizer2Impl	access:public	signature:(UChar32 c) const
Normalizer2Impl::getNormTrie	normalizer2impl.h	/^    const UTrie2 *getNormTrie() const { return normTrie; }$/;"	f	class:Normalizer2Impl	access:public	signature:() const
Normalizer2Impl::getTrailCCFromCompYesAndZeroCC	normalizer2impl.cpp	/^uint8_t Normalizer2Impl::getTrailCCFromCompYesAndZeroCC(const UChar *cpStart, const UChar *cpLimit) const {$/;"	f	class:Normalizer2Impl	signature:(const UChar *cpStart, const UChar *cpLimit) const
Normalizer2Impl::getTrailCCFromCompYesAndZeroCC	normalizer2impl.h	/^    uint8_t getTrailCCFromCompYesAndZeroCC(const UChar *cpStart, const UChar *cpLimit) const;$/;"	p	class:Normalizer2Impl	access:private	signature:(const UChar *cpStart, const UChar *cpLimit) const
Normalizer2Impl::hasCompBoundaryAfter	normalizer2impl.cpp	/^UBool Normalizer2Impl::hasCompBoundaryAfter(UChar32 c, UBool onlyContiguous, UBool testInert) const {$/;"	f	class:Normalizer2Impl	signature:(UChar32 c, UBool onlyContiguous, UBool testInert) const
Normalizer2Impl::hasCompBoundaryAfter	normalizer2impl.h	/^    UBool hasCompBoundaryAfter(UChar32 c, UBool onlyContiguous, UBool testInert) const;$/;"	p	class:Normalizer2Impl	access:public	signature:(UChar32 c, UBool onlyContiguous, UBool testInert) const
Normalizer2Impl::hasCompBoundaryBefore	normalizer2impl.cpp	/^UBool Normalizer2Impl::hasCompBoundaryBefore(UChar32 c, uint16_t norm16) const {$/;"	f	class:Normalizer2Impl	signature:(UChar32 c, uint16_t norm16) const
Normalizer2Impl::hasCompBoundaryBefore	normalizer2impl.h	/^    UBool hasCompBoundaryBefore(UChar32 c) const {$/;"	f	class:Normalizer2Impl	access:public	signature:(UChar32 c) const
Normalizer2Impl::hasCompBoundaryBefore	normalizer2impl.h	/^    UBool hasCompBoundaryBefore(UChar32 c, uint16_t norm16) const;$/;"	p	class:Normalizer2Impl	access:private	signature:(UChar32 c, uint16_t norm16) const
Normalizer2Impl::hasDecompBoundary	normalizer2impl.cpp	/^UBool Normalizer2Impl::hasDecompBoundary(UChar32 c, UBool before) const {$/;"	f	class:Normalizer2Impl	signature:(UChar32 c, UBool before) const
Normalizer2Impl::hasDecompBoundary	normalizer2impl.h	/^    UBool hasDecompBoundary(UChar32 c, UBool before) const;$/;"	p	class:Normalizer2Impl	access:public	signature:(UChar32 c, UBool before) const
Normalizer2Impl::hasFCDBoundaryAfter	normalizer2impl.h	/^    UBool hasFCDBoundaryAfter(UChar32 c) const {$/;"	f	class:Normalizer2Impl	access:public	signature:(UChar32 c) const
Normalizer2Impl::hasFCDBoundaryBefore	normalizer2impl.h	/^    UBool hasFCDBoundaryBefore(UChar32 c) const { return c<MIN_CCC_LCCC_CP || getFCD16(c)<=0xff; }$/;"	f	class:Normalizer2Impl	access:public	signature:(UChar32 c) const
Normalizer2Impl::isAcceptable	normalizer2impl.cpp	/^Normalizer2Impl::isAcceptable(void *context,$/;"	f	class:Normalizer2Impl	signature:(void *context, const char * , const char * , const UDataInfo *pInfo)
Normalizer2Impl::isAcceptable	normalizer2impl.h	/^    isAcceptable(void *context, const char *type, const char *name, const UDataInfo *pInfo);$/;"	p	class:Normalizer2Impl	access:private	signature:(void *context, const char *type, const char *name, const UDataInfo *pInfo)
Normalizer2Impl::isCanonSegmentStarter	normalizer2impl.cpp	/^UBool Normalizer2Impl::isCanonSegmentStarter(UChar32 c) const {$/;"	f	class:Normalizer2Impl	signature:(UChar32 c) const
Normalizer2Impl::isCanonSegmentStarter	normalizer2impl.h	/^    UBool isCanonSegmentStarter(UChar32 c) const;$/;"	p	class:Normalizer2Impl	access:public	signature:(UChar32 c) const
Normalizer2Impl::isCompNo	normalizer2impl.h	/^    UBool isCompNo(uint16_t norm16) const { return minNoNo<=norm16 && norm16<minMaybeYes; }$/;"	f	class:Normalizer2Impl	access:public	signature:(uint16_t norm16) const
Normalizer2Impl::isCompYesAndZeroCC	normalizer2impl.h	/^    UBool isCompYesAndZeroCC(uint16_t norm16) const { return norm16<minNoNo; }$/;"	f	class:Normalizer2Impl	access:private	signature:(uint16_t norm16) const
Normalizer2Impl::isDecompInert	normalizer2impl.h	/^    UBool isDecompInert(UChar32 c) const { return isDecompYesAndZeroCC(getNorm16(c)); }$/;"	f	class:Normalizer2Impl	access:public	signature:(UChar32 c) const
Normalizer2Impl::isDecompNoAlgorithmic	normalizer2impl.h	/^    UBool isDecompNoAlgorithmic(uint16_t norm16) const { return norm16>=limitNoNo; }$/;"	f	class:Normalizer2Impl	access:private	signature:(uint16_t norm16) const
Normalizer2Impl::isDecompYes	normalizer2impl.h	/^    UBool isDecompYes(uint16_t norm16) const { return norm16<minYesNo || minMaybeYes<=norm16; }$/;"	f	class:Normalizer2Impl	access:public	signature:(uint16_t norm16) const
Normalizer2Impl::isDecompYesAndZeroCC	normalizer2impl.h	/^    UBool isDecompYesAndZeroCC(uint16_t norm16) const {$/;"	f	class:Normalizer2Impl	access:private	signature:(uint16_t norm16) const
Normalizer2Impl::isFCDInert	normalizer2impl.h	/^    UBool isFCDInert(UChar32 c) const { return getFCD16(c)<=1; }$/;"	f	class:Normalizer2Impl	access:public	signature:(UChar32 c) const
Normalizer2Impl::isHangul	normalizer2impl.h	/^    UBool isHangul(uint16_t norm16) const { return norm16==minYesNo; }$/;"	f	class:Normalizer2Impl	access:private	signature:(uint16_t norm16) const
Normalizer2Impl::isInert	normalizer2impl.h	/^    static UBool isInert(uint16_t norm16) { return norm16==0; }$/;"	f	class:Normalizer2Impl	access:private	signature:(uint16_t norm16)
Normalizer2Impl::isJamoVT	normalizer2impl.h	/^    static UBool isJamoVT(uint16_t norm16) { return norm16==JAMO_VT; }$/;"	f	class:Normalizer2Impl	access:private	signature:(uint16_t norm16)
Normalizer2Impl::isMaybe	normalizer2impl.h	/^    UBool isMaybe(uint16_t norm16) const { return minMaybeYes<=norm16 && norm16<=JAMO_VT; }$/;"	f	class:Normalizer2Impl	access:private	signature:(uint16_t norm16) const
Normalizer2Impl::isMaybeOrNonZeroCC	normalizer2impl.h	/^    UBool isMaybeOrNonZeroCC(uint16_t norm16) const { return norm16>=minMaybeYes; }$/;"	f	class:Normalizer2Impl	access:private	signature:(uint16_t norm16) const
Normalizer2Impl::isMostDecompYesAndZeroCC	normalizer2impl.h	/^    UBool isMostDecompYesAndZeroCC(uint16_t norm16) const {$/;"	f	class:Normalizer2Impl	access:private	signature:(uint16_t norm16) const
Normalizer2Impl::limitNoNo	normalizer2impl.h	/^    uint16_t limitNoNo;$/;"	m	class:Normalizer2Impl	access:private
Normalizer2Impl::load	normalizer2impl.cpp	/^Normalizer2Impl::load(const char *packageName, const char *name, UErrorCode &errorCode) {$/;"	f	class:Normalizer2Impl	signature:(const char *packageName, const char *name, UErrorCode &errorCode)
Normalizer2Impl::load	normalizer2impl.h	/^    void load(const char *packageName, const char *name, UErrorCode &errorCode);$/;"	p	class:Normalizer2Impl	access:public	signature:(const char *packageName, const char *name, UErrorCode &errorCode)
Normalizer2Impl::makeCanonIterDataFromNorm16	normalizer2impl.cpp	/^void Normalizer2Impl::makeCanonIterDataFromNorm16(UChar32 start, UChar32 end, uint16_t norm16,$/;"	f	class:Normalizer2Impl	signature:(UChar32 start, UChar32 end, uint16_t norm16, CanonIterData &newData, UErrorCode &errorCode) const
Normalizer2Impl::makeCanonIterDataFromNorm16	normalizer2impl.h	/^    void makeCanonIterDataFromNorm16(UChar32 start, UChar32 end, uint16_t norm16,$/;"	p	class:Normalizer2Impl	access:public	signature:(UChar32 start, UChar32 end, uint16_t norm16, CanonIterData &newData, UErrorCode &errorCode) const
Normalizer2Impl::makeFCD	normalizer2impl.cpp	/^Normalizer2Impl::makeFCD(const UChar *src, const UChar *limit,$/;"	f	class:Normalizer2Impl	signature:(const UChar *src, const UChar *limit, ReorderingBuffer *buffer, UErrorCode &errorCode) const
Normalizer2Impl::makeFCD	normalizer2impl.h	/^    const UChar *makeFCD(const UChar *src, const UChar *limit,$/;"	p	class:Normalizer2Impl	access:public	signature:(const UChar *src, const UChar *limit, ReorderingBuffer *buffer, UErrorCode &errorCode) const
Normalizer2Impl::makeFCDAndAppend	normalizer2impl.cpp	/^void Normalizer2Impl::makeFCDAndAppend(const UChar *src, const UChar *limit,$/;"	f	class:Normalizer2Impl	signature:(const UChar *src, const UChar *limit, UBool doMakeFCD, ReorderingBuffer &buffer, UErrorCode &errorCode) const
Normalizer2Impl::makeFCDAndAppend	normalizer2impl.h	/^    void makeFCDAndAppend(const UChar *src, const UChar *limit,$/;"	p	class:Normalizer2Impl	access:public	signature:(const UChar *src, const UChar *limit, UBool doMakeFCD, ReorderingBuffer &buffer, UErrorCode &errorCode) const
Normalizer2Impl::mapAlgorithmic	normalizer2impl.h	/^    UChar32 mapAlgorithmic(UChar32 c, uint16_t norm16) const {$/;"	f	class:Normalizer2Impl	access:private	signature:(UChar32 c, uint16_t norm16) const
Normalizer2Impl::maybeYesCompositions	normalizer2impl.h	/^    const uint16_t *maybeYesCompositions;$/;"	m	class:Normalizer2Impl	access:private
Normalizer2Impl::memory	normalizer2impl.h	/^    UDataMemory *memory;$/;"	m	class:Normalizer2Impl	access:private
Normalizer2Impl::minCompNoMaybeCP	normalizer2impl.h	/^    UChar32 minCompNoMaybeCP;$/;"	m	class:Normalizer2Impl	access:private
Normalizer2Impl::minDecompNoCP	normalizer2impl.h	/^    UChar32 minDecompNoCP;$/;"	m	class:Normalizer2Impl	access:private
Normalizer2Impl::minMaybeYes	normalizer2impl.h	/^    uint16_t minMaybeYes;$/;"	m	class:Normalizer2Impl	access:private
Normalizer2Impl::minNoNo	normalizer2impl.h	/^    uint16_t minNoNo;$/;"	m	class:Normalizer2Impl	access:private
Normalizer2Impl::minYesNo	normalizer2impl.h	/^    uint16_t minYesNo;$/;"	m	class:Normalizer2Impl	access:private
Normalizer2Impl::normTrie	normalizer2impl.h	/^    UTrie2 *normTrie;$/;"	m	class:Normalizer2Impl	access:private
Normalizer2Impl::recompose	normalizer2impl.cpp	/^void Normalizer2Impl::recompose(ReorderingBuffer &buffer, int32_t recomposeStartIndex,$/;"	f	class:Normalizer2Impl	signature:(ReorderingBuffer &buffer, int32_t recomposeStartIndex, UBool onlyContiguous) const
Normalizer2Impl::recompose	normalizer2impl.h	/^    void recompose(ReorderingBuffer &buffer, int32_t recomposeStartIndex,$/;"	p	class:Normalizer2Impl	access:private	signature:(ReorderingBuffer &buffer, int32_t recomposeStartIndex, UBool onlyContiguous) const
Normalizer2Impl::setFCD16FromNorm16	normalizer2impl.cpp	/^void Normalizer2Impl::setFCD16FromNorm16(UChar32 start, UChar32 end, uint16_t norm16,$/;"	f	class:Normalizer2Impl	signature:(UChar32 start, UChar32 end, uint16_t norm16, UTrie2 *newFCDTrie, UErrorCode &errorCode) const
Normalizer2Impl::setFCD16FromNorm16	normalizer2impl.h	/^    void setFCD16FromNorm16(UChar32 start, UChar32 end, uint16_t norm16,$/;"	p	class:Normalizer2Impl	access:public	signature:(UChar32 start, UChar32 end, uint16_t norm16, UTrie2 *newFCDTrie, UErrorCode &errorCode) const
Normalizer2Impl::~Normalizer2Impl	normalizer2impl.cpp	/^Normalizer2Impl::~Normalizer2Impl() {$/;"	f	class:Normalizer2Impl	signature:()
Normalizer2Impl::~Normalizer2Impl	normalizer2impl.h	/^    ~Normalizer2Impl();$/;"	p	class:Normalizer2Impl	access:public	signature:()
Normalizer2WithImpl	normalizer2.cpp	/^    Normalizer2WithImpl(const Normalizer2Impl &ni) : impl(ni) {}$/;"	f	class:Normalizer2WithImpl	access:public	signature:(const Normalizer2Impl &ni)
Normalizer2WithImpl	normalizer2.cpp	/^class Normalizer2WithImpl : public Normalizer2 {$/;"	c	file:	inherits:Normalizer2
Normalizer2WithImpl	unicode/urename.h	2050;"	d
Normalizer2WithImpl::Normalizer2WithImpl	normalizer2.cpp	/^    Normalizer2WithImpl(const Normalizer2Impl &ni) : impl(ni) {}$/;"	f	class:Normalizer2WithImpl	access:public	signature:(const Normalizer2Impl &ni)
Normalizer2WithImpl::append	normalizer2.cpp	/^    append(UnicodeString &first,$/;"	f	class:Normalizer2WithImpl	access:public	signature:(UnicodeString &first, const UnicodeString &second, UErrorCode &errorCode) const
Normalizer2WithImpl::getDecomposition	normalizer2.cpp	/^    getDecomposition(UChar32 c, UnicodeString &decomposition) const {$/;"	f	class:Normalizer2WithImpl	access:public	signature:(UChar32 c, UnicodeString &decomposition) const
Normalizer2WithImpl::getQuickCheck	normalizer2.cpp	/^    virtual UNormalizationCheckResult getQuickCheck(UChar32) const {$/;"	f	class:Normalizer2WithImpl	access:public	signature:(UChar32) const
Normalizer2WithImpl::impl	normalizer2.cpp	/^    const Normalizer2Impl &impl;$/;"	m	class:Normalizer2WithImpl	file:	access:public
Normalizer2WithImpl::isNormalized	normalizer2.cpp	/^    isNormalized(const UnicodeString &s, UErrorCode &errorCode) const {$/;"	f	class:Normalizer2WithImpl	access:public	signature:(const UnicodeString &s, UErrorCode &errorCode) const
Normalizer2WithImpl::normalize	normalizer2.cpp	/^    normalize(const UChar *src, const UChar *limit,$/;"	p	class:Normalizer2WithImpl	file:	access:public	signature:(const UChar *src, const UChar *limit, ReorderingBuffer &buffer, UErrorCode &errorCode) const
Normalizer2WithImpl::normalize	normalizer2.cpp	/^    normalize(const UnicodeString &src,$/;"	f	class:Normalizer2WithImpl	access:public	signature:(const UnicodeString &src, UnicodeString &dest, UErrorCode &errorCode) const
Normalizer2WithImpl::normalizeAndAppend	normalizer2.cpp	/^    normalizeAndAppend(const UChar *src, const UChar *limit, UBool doNormalize,$/;"	p	class:Normalizer2WithImpl	file:	access:public	signature:(const UChar *src, const UChar *limit, UBool doNormalize, ReorderingBuffer &buffer, UErrorCode &errorCode) const
Normalizer2WithImpl::normalizeSecondAndAppend	normalizer2.cpp	/^    normalizeSecondAndAppend(UnicodeString &first,$/;"	f	class:Normalizer2WithImpl	access:public	signature:(UnicodeString &first, const UnicodeString &second, UBool doNormalize, UErrorCode &errorCode) const
Normalizer2WithImpl::normalizeSecondAndAppend	normalizer2.cpp	/^    normalizeSecondAndAppend(UnicodeString &first,$/;"	f	class:Normalizer2WithImpl	access:public	signature:(UnicodeString &first, const UnicodeString &second, UErrorCode &errorCode) const
Normalizer2WithImpl::quickCheck	normalizer2.cpp	/^    quickCheck(const UnicodeString &s, UErrorCode &errorCode) const {$/;"	f	class:Normalizer2WithImpl	access:public	signature:(const UnicodeString &s, UErrorCode &errorCode) const
Normalizer2WithImpl::spanQuickCheckYes	normalizer2.cpp	/^    spanQuickCheckYes(const UChar *src, const UChar *limit, UErrorCode &errorCode) const = 0;$/;"	p	class:Normalizer2WithImpl	file:	access:public	signature:(const UChar *src, const UChar *limit, UErrorCode &errorCode) const
Normalizer2WithImpl::spanQuickCheckYes	normalizer2.cpp	/^    spanQuickCheckYes(const UnicodeString &s, UErrorCode &errorCode) const {$/;"	f	class:Normalizer2WithImpl	access:public	signature:(const UnicodeString &s, UErrorCode &errorCode) const
Normalizer::DONE	unicode/normlzr.h	/^      DONE=0xffff$/;"	e	enum:Normalizer::__anon127
Normalizer::Normalizer	normlzr.cpp	/^Normalizer::Normalizer(const CharacterIterator& iter, UNormalizationMode mode) :$/;"	f	class:Normalizer	signature:(const CharacterIterator& iter, UNormalizationMode mode)
Normalizer::Normalizer	normlzr.cpp	/^Normalizer::Normalizer(const Normalizer &copy) :$/;"	f	class:Normalizer	signature:(const Normalizer &copy)
Normalizer::Normalizer	normlzr.cpp	/^Normalizer::Normalizer(const UChar *str, int32_t length, UNormalizationMode mode) :$/;"	f	class:Normalizer	signature:(const UChar *str, int32_t length, UNormalizationMode mode)
Normalizer::Normalizer	normlzr.cpp	/^Normalizer::Normalizer(const UnicodeString& str, UNormalizationMode mode) :$/;"	f	class:Normalizer	signature:(const UnicodeString& str, UNormalizationMode mode)
Normalizer::Normalizer	unicode/normlzr.h	/^  Normalizer(); \/\/ default constructor not implemented$/;"	p	class:Normalizer	access:private	signature:()
Normalizer::Normalizer	unicode/normlzr.h	/^  Normalizer(const CharacterIterator& iter, UNormalizationMode mode);$/;"	p	class:Normalizer	access:public	signature:(const CharacterIterator& iter, UNormalizationMode mode)
Normalizer::Normalizer	unicode/normlzr.h	/^  Normalizer(const Normalizer& copy);$/;"	p	class:Normalizer	access:public	signature:(const Normalizer& copy)
Normalizer::Normalizer	unicode/normlzr.h	/^  Normalizer(const UChar* str, int32_t length, UNormalizationMode mode);$/;"	p	class:Normalizer	access:public	signature:(const UChar* str, int32_t length, UNormalizationMode mode)
Normalizer::Normalizer	unicode/normlzr.h	/^  Normalizer(const UnicodeString& str, UNormalizationMode mode);$/;"	p	class:Normalizer	access:public	signature:(const UnicodeString& str, UNormalizationMode mode)
Normalizer::buffer	unicode/normlzr.h	/^  UnicodeString       buffer;$/;"	m	class:Normalizer	access:private
Normalizer::bufferPos	unicode/normlzr.h	/^  int32_t         bufferPos;$/;"	m	class:Normalizer	access:private
Normalizer::clearBuffer	normlzr.cpp	/^void Normalizer::clearBuffer() {$/;"	f	class:Normalizer	signature:()
Normalizer::clearBuffer	unicode/normlzr.h	/^  void    clearBuffer(void);$/;"	p	class:Normalizer	access:private	signature:(void)
Normalizer::clone	normlzr.cpp	/^Normalizer::clone() const$/;"	f	class:Normalizer	signature:() const
Normalizer::clone	unicode/normlzr.h	/^  Normalizer*        clone(void) const;$/;"	p	class:Normalizer	access:public	signature:(void) const
Normalizer::compare	unicode/normlzr.h	/^  compare(const UnicodeString &s1, const UnicodeString &s2,$/;"	p	class:Normalizer	access:public	signature:(const UnicodeString &s1, const UnicodeString &s2, uint32_t options, UErrorCode &errorCode)
Normalizer::compare	unicode/normlzr.h	/^Normalizer::compare(const UnicodeString &s1, const UnicodeString &s2,$/;"	f	class:Normalizer	signature:(const UnicodeString &s1, const UnicodeString &s2, uint32_t options, UErrorCode &errorCode)
Normalizer::compose	normlzr.cpp	/^Normalizer::compose(const UnicodeString& source, $/;"	f	class:Normalizer	signature:(const UnicodeString& source, UBool compat, int32_t options, UnicodeString& result, UErrorCode &status)
Normalizer::compose	unicode/normlzr.h	/^  static void U_EXPORT2 compose(const UnicodeString& source,$/;"	p	class:Normalizer	access:public	signature:(const UnicodeString& source, UBool compat, int32_t options, UnicodeString& result, UErrorCode &status)
Normalizer::concatenate	normlzr.cpp	/^Normalizer::concatenate(UnicodeString &left, UnicodeString &right,$/;"	f	class:Normalizer	signature:(UnicodeString &left, UnicodeString &right, UnicodeString &result, UNormalizationMode mode, int32_t options, UErrorCode &errorCode)
Normalizer::concatenate	unicode/normlzr.h	/^  U_EXPORT2 concatenate(UnicodeString &left, UnicodeString &right,$/;"	p	class:Normalizer	access:public	signature:(UnicodeString &left, UnicodeString &right, UnicodeString &result, UNormalizationMode mode, int32_t options, UErrorCode &errorCode)
Normalizer::current	normlzr.cpp	/^UChar32 Normalizer::current() {$/;"	f	class:Normalizer	signature:()
Normalizer::current	unicode/normlzr.h	/^  UChar32              current(void);$/;"	p	class:Normalizer	access:public	signature:(void)
Normalizer::currentIndex	unicode/normlzr.h	/^  int32_t         currentIndex, nextIndex;$/;"	m	class:Normalizer	access:private
Normalizer::decompose	normlzr.cpp	/^Normalizer::decompose(const UnicodeString& source, $/;"	f	class:Normalizer	signature:(const UnicodeString& source, UBool compat, int32_t options, UnicodeString& result, UErrorCode &status)
Normalizer::decompose	unicode/normlzr.h	/^  static void U_EXPORT2 decompose(const UnicodeString& source,$/;"	p	class:Normalizer	access:public	signature:(const UnicodeString& source, UBool compat, int32_t options, UnicodeString& result, UErrorCode &status)
Normalizer::endIndex	normlzr.cpp	/^int32_t Normalizer::endIndex() const {$/;"	f	class:Normalizer	signature:() const
Normalizer::endIndex	unicode/normlzr.h	/^  int32_t            endIndex(void) const;$/;"	p	class:Normalizer	access:public	signature:(void) const
Normalizer::fFilteredNorm2	unicode/normlzr.h	/^  FilteredNormalizer2*fFilteredNorm2;  \/\/ owned if not NULL$/;"	m	class:Normalizer	access:private
Normalizer::fNorm2	unicode/normlzr.h	/^  const Normalizer2  *fNorm2;  \/\/ not owned; may be equal to fFilteredNorm2$/;"	m	class:Normalizer	access:private
Normalizer::fOptions	unicode/normlzr.h	/^  int32_t             fOptions;$/;"	m	class:Normalizer	access:private
Normalizer::fUMode	unicode/normlzr.h	/^  UNormalizationMode  fUMode;$/;"	m	class:Normalizer	access:private
Normalizer::first	normlzr.cpp	/^UChar32 Normalizer::first() {$/;"	f	class:Normalizer	signature:()
Normalizer::first	unicode/normlzr.h	/^  UChar32              first(void);$/;"	p	class:Normalizer	access:public	signature:(void)
Normalizer::getDynamicClassID	unicode/normlzr.h	/^  virtual UClassID getDynamicClassID() const;$/;"	p	class:Normalizer	access:public	signature:() const
Normalizer::getIndex	normlzr.cpp	/^int32_t Normalizer::getIndex() const {$/;"	f	class:Normalizer	signature:() const
Normalizer::getIndex	unicode/normlzr.h	/^  int32_t            getIndex(void) const;$/;"	p	class:Normalizer	access:public	signature:(void) const
Normalizer::getOption	normlzr.cpp	/^Normalizer::getOption(int32_t option) const$/;"	f	class:Normalizer	signature:(int32_t option) const
Normalizer::getOption	unicode/normlzr.h	/^  UBool getOption(int32_t option) const;$/;"	p	class:Normalizer	access:public	signature:(int32_t option) const
Normalizer::getStaticClassID	unicode/normlzr.h	/^  static UClassID U_EXPORT2 getStaticClassID();$/;"	p	class:Normalizer	access:public	signature:()
Normalizer::getText	normlzr.cpp	/^Normalizer::getText(UnicodeString&  result) $/;"	f	class:Normalizer	signature:(UnicodeString& result)
Normalizer::getText	unicode/normlzr.h	/^  void            getText(UnicodeString&  result);$/;"	p	class:Normalizer	access:public	signature:(UnicodeString& result)
Normalizer::getUMode	normlzr.cpp	/^Normalizer::getUMode() const$/;"	f	class:Normalizer	signature:() const
Normalizer::getUMode	unicode/normlzr.h	/^  UNormalizationMode getUMode(void) const;$/;"	p	class:Normalizer	access:public	signature:(void) const
Normalizer::hashCode	normlzr.cpp	/^int32_t Normalizer::hashCode() const$/;"	f	class:Normalizer	signature:() const
Normalizer::hashCode	unicode/normlzr.h	/^  int32_t                hashCode(void) const;$/;"	p	class:Normalizer	access:public	signature:(void) const
Normalizer::init	normlzr.cpp	/^Normalizer::init() {$/;"	f	class:Normalizer	signature:()
Normalizer::init	unicode/normlzr.h	/^  void    init();$/;"	p	class:Normalizer	access:private	signature:()
Normalizer::isNormalized	normlzr.cpp	/^Normalizer::isNormalized(const UnicodeString& source,$/;"	f	class:Normalizer	signature:(const UnicodeString& source, UNormalizationMode mode, int32_t options, UErrorCode &status)
Normalizer::isNormalized	unicode/normlzr.h	/^  isNormalized(const UnicodeString &src, UNormalizationMode mode, UErrorCode &errorCode);$/;"	p	class:Normalizer	access:public	signature:(const UnicodeString &src, UNormalizationMode mode, UErrorCode &errorCode)
Normalizer::isNormalized	unicode/normlzr.h	/^  isNormalized(const UnicodeString &src, UNormalizationMode mode, int32_t options, UErrorCode &errorCode);$/;"	p	class:Normalizer	access:public	signature:(const UnicodeString &src, UNormalizationMode mode, int32_t options, UErrorCode &errorCode)
Normalizer::isNormalized	unicode/normlzr.h	/^Normalizer::isNormalized(const UnicodeString& source,$/;"	f	class:Normalizer	signature:(const UnicodeString& source, UNormalizationMode mode, UErrorCode &status)
Normalizer::last	normlzr.cpp	/^UChar32 Normalizer::last() {$/;"	f	class:Normalizer	signature:()
Normalizer::last	unicode/normlzr.h	/^  UChar32              last(void);$/;"	p	class:Normalizer	access:public	signature:(void)
Normalizer::next	normlzr.cpp	/^UChar32 Normalizer::next() {$/;"	f	class:Normalizer	signature:()
Normalizer::next	unicode/normlzr.h	/^  UChar32              next(void);$/;"	p	class:Normalizer	access:public	signature:(void)
Normalizer::nextIndex	unicode/normlzr.h	/^  int32_t         currentIndex, nextIndex;$/;"	m	class:Normalizer	access:private
Normalizer::nextNormalize	normlzr.cpp	/^Normalizer::nextNormalize() {$/;"	f	class:Normalizer	signature:()
Normalizer::nextNormalize	unicode/normlzr.h	/^  UBool nextNormalize();$/;"	p	class:Normalizer	access:private	signature:()
Normalizer::normalize	normlzr.cpp	/^Normalizer::normalize(const UnicodeString& source, $/;"	f	class:Normalizer	signature:(const UnicodeString& source, UNormalizationMode mode, int32_t options, UnicodeString& result, UErrorCode &status)
Normalizer::normalize	unicode/normlzr.h	/^  static void U_EXPORT2 normalize(const UnicodeString& source,$/;"	p	class:Normalizer	access:public	signature:(const UnicodeString& source, UNormalizationMode mode, int32_t options, UnicodeString& result, UErrorCode &status)
Normalizer::operator !=	unicode/normlzr.h	/^  inline UBool        operator!=(const Normalizer& that) const;$/;"	p	class:Normalizer	access:public	signature:(const Normalizer& that) const
Normalizer::operator !=	unicode/normlzr.h	/^Normalizer::operator!= (const Normalizer& other) const$/;"	f	class:Normalizer	signature:(const Normalizer& other) const
Normalizer::operator =	unicode/normlzr.h	/^  Normalizer &operator=(const Normalizer &that); \/\/ assignment operator not implemented$/;"	p	class:Normalizer	access:private	signature:(const Normalizer &that)
Normalizer::operator ==	normlzr.cpp	/^UBool Normalizer::operator==(const Normalizer& that) const$/;"	f	class:Normalizer	signature:(const Normalizer& that) const
Normalizer::operator ==	unicode/normlzr.h	/^  UBool        operator==(const Normalizer& that) const;$/;"	p	class:Normalizer	access:public	signature:(const Normalizer& that) const
Normalizer::previous	normlzr.cpp	/^UChar32 Normalizer::previous() {$/;"	f	class:Normalizer	signature:()
Normalizer::previous	unicode/normlzr.h	/^  UChar32              previous(void);$/;"	p	class:Normalizer	access:public	signature:(void)
Normalizer::previousNormalize	normlzr.cpp	/^Normalizer::previousNormalize() {$/;"	f	class:Normalizer	signature:()
Normalizer::previousNormalize	unicode/normlzr.h	/^  UBool previousNormalize();$/;"	p	class:Normalizer	access:private	signature:()
Normalizer::quickCheck	normlzr.cpp	/^Normalizer::quickCheck(const UnicodeString& source,$/;"	f	class:Normalizer	signature:(const UnicodeString& source, UNormalizationMode mode, int32_t options, UErrorCode &status)
Normalizer::quickCheck	unicode/normlzr.h	/^  quickCheck(const UnicodeString &source, UNormalizationMode mode, UErrorCode &status);$/;"	p	class:Normalizer	access:public	signature:(const UnicodeString &source, UNormalizationMode mode, UErrorCode &status)
Normalizer::quickCheck	unicode/normlzr.h	/^  quickCheck(const UnicodeString &source, UNormalizationMode mode, int32_t options, UErrorCode &status);$/;"	p	class:Normalizer	access:public	signature:(const UnicodeString &source, UNormalizationMode mode, int32_t options, UErrorCode &status)
Normalizer::quickCheck	unicode/normlzr.h	/^Normalizer::quickCheck(const UnicodeString& source,$/;"	f	class:Normalizer	signature:(const UnicodeString& source, UNormalizationMode mode, UErrorCode &status)
Normalizer::reset	normlzr.cpp	/^void Normalizer::reset() {$/;"	f	class:Normalizer	signature:()
Normalizer::reset	unicode/normlzr.h	/^  void                reset(void);$/;"	p	class:Normalizer	access:public	signature:(void)
Normalizer::setIndexOnly	normlzr.cpp	/^Normalizer::setIndexOnly(int32_t index) {$/;"	f	class:Normalizer	signature:(int32_t index)
Normalizer::setIndexOnly	unicode/normlzr.h	/^  void                 setIndexOnly(int32_t index);$/;"	p	class:Normalizer	access:public	signature:(int32_t index)
Normalizer::setMode	normlzr.cpp	/^Normalizer::setMode(UNormalizationMode newMode) $/;"	f	class:Normalizer	signature:(UNormalizationMode newMode)
Normalizer::setMode	unicode/normlzr.h	/^  void setMode(UNormalizationMode newMode);$/;"	p	class:Normalizer	access:public	signature:(UNormalizationMode newMode)
Normalizer::setOption	normlzr.cpp	/^Normalizer::setOption(int32_t option, $/;"	f	class:Normalizer	signature:(int32_t option, UBool value)
Normalizer::setOption	unicode/normlzr.h	/^  void setOption(int32_t option,$/;"	p	class:Normalizer	access:public	signature:(int32_t option, UBool value)
Normalizer::setText	normlzr.cpp	/^Normalizer::setText(const CharacterIterator& newText, $/;"	f	class:Normalizer	signature:(const CharacterIterator& newText, UErrorCode &status)
Normalizer::setText	normlzr.cpp	/^Normalizer::setText(const UChar* newText,$/;"	f	class:Normalizer	signature:(const UChar* newText, int32_t length, UErrorCode &status)
Normalizer::setText	normlzr.cpp	/^Normalizer::setText(const UnicodeString& newText, $/;"	f	class:Normalizer	signature:(const UnicodeString& newText, UErrorCode &status)
Normalizer::setText	unicode/normlzr.h	/^  void setText(const CharacterIterator& newText,$/;"	p	class:Normalizer	access:public	signature:(const CharacterIterator& newText, UErrorCode &status)
Normalizer::setText	unicode/normlzr.h	/^  void setText(const UChar* newText,$/;"	p	class:Normalizer	access:public	signature:(const UChar* newText, int32_t length, UErrorCode &status)
Normalizer::setText	unicode/normlzr.h	/^  void setText(const UnicodeString& newText,$/;"	p	class:Normalizer	access:public	signature:(const UnicodeString& newText, UErrorCode &status)
Normalizer::startIndex	normlzr.cpp	/^int32_t Normalizer::startIndex() const {$/;"	f	class:Normalizer	signature:() const
Normalizer::startIndex	unicode/normlzr.h	/^  int32_t            startIndex(void) const;$/;"	p	class:Normalizer	access:public	signature:(void) const
Normalizer::text	unicode/normlzr.h	/^  CharacterIterator  *text;$/;"	m	class:Normalizer	access:private
Normalizer::~Normalizer	normlzr.cpp	/^Normalizer::~Normalizer()$/;"	f	class:Normalizer	signature:()
Normalizer::~Normalizer	unicode/normlzr.h	/^  virtual ~Normalizer();$/;"	p	class:Normalizer	access:public	signature:()
NullSubstitution	unicode/urename.h	2051;"	d
NullTransliterator	unicode/urename.h	2052;"	d
NumEntries	ucmndata.h	/^    NumEntriesFn  NumEntries; $/;"	m	struct:__anon146	access:public
NumEntriesFn	ucmndata.h	/^(* NumEntriesFn)(const UDataMemory *pData);$/;"	t
NumberFormat	unicode/urename.h	2053;"	d
NumberFormatFactory	unicode/urename.h	2054;"	d
NumberOfBytesAppended	unicode/bytestream.h	/^  int32_t NumberOfBytesAppended() const { return appended_; }$/;"	f	class:CheckedArrayByteSink	access:public	signature:() const
NumberOfBytesWritten	unicode/bytestream.h	/^  int32_t NumberOfBytesWritten() const { return size_; }$/;"	f	class:CheckedArrayByteSink	access:public	signature:() const
NumberingSystem	unicode/urename.h	2055;"	d
NumeratorSubstitution	unicode/urename.h	2056;"	d
OFFSET_ZONE_MAPPINGS	putil.c	/^static const struct OffsetZoneMapping OFFSET_ZONE_MAPPINGS[] = {$/;"	v	typeref:struct:OffsetZoneMapping	file:
OLD_TAIL_CHAR	ushape.c	69;"	d	file:
ON	ubidiimp.h	/^    ON= U_OTHER_NEUTRAL,$/;"	e	enum:__anon82
OPEN_BRACE	uniset.cpp	39;"	d	file:
OPEN_BRACE	uniset_props.cpp	67;"	d	file:
OPTION_SET	uloc.c	1604;"	d	file:
ORI	ucnvisci.c	/^    ORI = 0x47,$/;"	e	enum:__anon14	file:
ORIYA	ucnvisci.c	/^    ORIYA,$/;"	e	enum:__anon13	file:
ORI_MASK	ucnvisci.c	/^    ORI_MASK =0x10,$/;"	e	enum:__anon15	file:
Offset	propname.h	/^typedef int16_t Offset; \/*  must be signed *\/$/;"	t
OffsetList	unisetspan.cpp	/^    OffsetList() : list(staticList), capacity(0), length(0), start(0) {}$/;"	f	class:OffsetList	access:public	signature:()
OffsetList	unisetspan.cpp	/^class OffsetList {  \/\/ Only ever stack-allocated, does not need to inherit UMemory.$/;"	c	file:
OffsetList::OffsetList	unisetspan.cpp	/^    OffsetList() : list(staticList), capacity(0), length(0), start(0) {}$/;"	f	class:OffsetList	access:public	signature:()
OffsetList::addOffset	unisetspan.cpp	/^    void addOffset(int32_t offset) {$/;"	f	class:OffsetList	access:public	signature:(int32_t offset)
OffsetList::capacity	unisetspan.cpp	/^    int32_t capacity;$/;"	m	class:OffsetList	file:	access:private
OffsetList::clear	unisetspan.cpp	/^    void clear() {$/;"	f	class:OffsetList	access:public	signature:()
OffsetList::containsOffset	unisetspan.cpp	/^    UBool containsOffset(int32_t offset) const {$/;"	f	class:OffsetList	access:public	signature:(int32_t offset) const
OffsetList::isEmpty	unisetspan.cpp	/^    UBool isEmpty() const {$/;"	f	class:OffsetList	access:public	signature:() const
OffsetList::length	unisetspan.cpp	/^    int32_t length;$/;"	m	class:OffsetList	file:	access:private
OffsetList::list	unisetspan.cpp	/^    UBool *list;$/;"	m	class:OffsetList	file:	access:private
OffsetList::popMinimum	unisetspan.cpp	/^    int32_t popMinimum() {$/;"	f	class:OffsetList	access:public	signature:()
OffsetList::setMaxLength	unisetspan.cpp	/^    void setMaxLength(int32_t maxLength) {$/;"	f	class:OffsetList	access:public	signature:(int32_t maxLength)
OffsetList::shift	unisetspan.cpp	/^    void shift(int32_t delta) {$/;"	f	class:OffsetList	access:public	signature:(int32_t delta)
OffsetList::start	unisetspan.cpp	/^    int32_t start;$/;"	m	class:OffsetList	file:	access:private
OffsetList::staticList	unisetspan.cpp	/^    UBool staticList[16];$/;"	m	class:OffsetList	file:	access:private
OffsetList::~OffsetList	unisetspan.cpp	/^    ~OffsetList() {$/;"	f	class:OffsetList	access:public	signature:()
OffsetZoneMapping	putil.c	/^typedef struct OffsetZoneMapping {$/;"	s	file:
OffsetZoneMapping	putil.c	/^} OffsetZoneMapping;$/;"	t	typeref:struct:OffsetZoneMapping	file:
OffsetZoneMapping::daylightType	putil.c	/^    int32_t daylightType; \/* 1=daylight in June, 2=daylight in December*\/$/;"	m	struct:OffsetZoneMapping	file:	access:public
OffsetZoneMapping::dstID	putil.c	/^    const char *dstID;$/;"	m	struct:OffsetZoneMapping	file:	access:public
OffsetZoneMapping::offsetSeconds	putil.c	/^    int32_t offsetSeconds;$/;"	m	struct:OffsetZoneMapping	file:	access:public
OffsetZoneMapping::olsonID	putil.c	/^    const char *olsonID;$/;"	m	struct:OffsetZoneMapping	file:	access:public
OffsetZoneMapping::stdID	putil.c	/^    const char *stdID;$/;"	m	struct:OffsetZoneMapping	file:	access:public
OlsonTimeZone	unicode/urename.h	2057;"	d
OpPrecedence	rbbinode.h	/^        enum OpPrecedence {      $/;"	g	class:RBBINode	access:public
OpenTypeLayoutEngine	unicode/urename.h	2058;"	d
OpenTypeUtilities	unicode/urename.h	2059;"	d
OptGroup	ucnv_lmb.c	/^    uint8_t    OptGroup;                  \/* default Opt. grp. for this LMBCS session *\/$/;"	m	struct:__anon25	file:	access:public
OptGroup	ucnv_lmb.c	/^   const ulmbcs_byte_t OptGroup;$/;"	m	struct:_LocaleLMBCSGrpMap	file:	access:public
OptGroupByteToCPName	ucnv_lmb.c	/^static const char * const OptGroupByteToCPName[ULMBCS_GRP_LAST + 1] = {$/;"	v	file:
OptGrpConverter	ucnv_lmb.c	/^    UConverterSharedData *OptGrpConverter[ULMBCS_GRP_LAST+1];    \/* Converter per Opt. grp. *\/$/;"	m	struct:__anon25	file:	access:public
OrConstraint	unicode/urename.h	2060;"	d
Overflowed	unicode/bytestream.h	/^  UBool Overflowed() const { return overflowed_; }$/;"	f	class:CheckedArrayByteSink	access:public	signature:() const
PACK_SINGLE_DIFF	ucnvbocu.c	379;"	d	file:
PAD	uenum.c	/^static const int32_t PAD = 8;$/;"	v	file:
PAREN_STACK_DEPTH	usc_impl.c	22;"	d	file:
PARSEERR_H	unicode/parseerr.h	12;"	d
PARSEPOS_H	unicode/parsepos.h	17;"	d
PARSE_ESCAPES	ruleiter.h	/^    enum { PARSE_ESCAPES   = 2 };$/;"	e	enum:RuleCharacterIterator::__anon133
PARSE_VARIABLES	ruleiter.h	/^    enum { PARSE_VARIABLES = 1 };$/;"	e	enum:RuleCharacterIterator::__anon132
PCEBuffer	unicode/urename.h	2061;"	d
PDF	ubidiimp.h	/^    PDF=U_POP_DIRECTIONAL_FORMAT,$/;"	e	enum:__anon82
PDF_CHAR	ubidiimp.h	/^    PDF_CHAR,$/;"	e	enum:__anon84
PERIOD_CHAR	locutil.cpp	25;"	d	file:
PERIOD_CHAR	servlk.cpp	25;"	d	file:
PERIOD_CHAR	servlkf.cpp	25;"	d	file:
PERIOD_CHAR	servls.cpp	25;"	d	file:
PERIOD_CHAR	servrbf.cpp	25;"	d	file:
PERIOD_CHAR	servslkf.cpp	25;"	d	file:
PERL_CLOSE	uniset_props.cpp	/^static const UChar PERL_CLOSE[]  = { CLOSE_BRACE,0 };    \/\/ "}"$/;"	v	file:
PES	ucnvisci.c	/^    PES = 0x72,$/;"	e	enum:__anon14	file:
PLATFORM_MUTEX_DESTROY	umutex.c	113;"	d	file:
PLATFORM_MUTEX_DESTROY	umutex.c	124;"	d	file:
PLATFORM_MUTEX_DESTROY	umutex.c	134;"	d	file:
PLATFORM_MUTEX_DESTROY	umutex.c	151;"	d	file:
PLATFORM_MUTEX_INIT	umutex.c	110;"	d	file:
PLATFORM_MUTEX_INIT	umutex.c	121;"	d	file:
PLATFORM_MUTEX_INIT	umutex.c	131;"	d	file:
PLATFORM_MUTEX_INIT	umutex.c	148;"	d	file:
PLATFORM_MUTEX_INITIALIZER	umutex.c	114;"	d	file:
PLATFORM_MUTEX_INITIALIZER	umutex.c	135;"	d	file:
PLATFORM_MUTEX_LOCK	umutex.c	111;"	d	file:
PLATFORM_MUTEX_LOCK	umutex.c	122;"	d	file:
PLATFORM_MUTEX_LOCK	umutex.c	132;"	d	file:
PLATFORM_MUTEX_LOCK	umutex.c	149;"	d	file:
PLATFORM_MUTEX_UNLOCK	umutex.c	112;"	d	file:
PLATFORM_MUTEX_UNLOCK	umutex.c	123;"	d	file:
PLATFORM_MUTEX_UNLOCK	umutex.c	133;"	d	file:
PLATFORM_MUTEX_UNLOCK	umutex.c	150;"	d	file:
PLUS	ucnv_u7.c	88;"	d	file:
PNAME	propname.cpp	/^static const PropertyAliases* PNAME = NULL;$/;"	v	file:
PNAME_DATA_NAME	propname.h	67;"	d
PNAME_DATA_TYPE	propname.h	68;"	d
PNAME_FORMAT_VERSION	propname.h	78;"	d
PNAME_SIG_0	propname.h	73;"	d
PNAME_SIG_1	propname.h	74;"	d
PNAME_SIG_2	propname.h	75;"	d
PNAME_SIG_3	propname.h	76;"	d
PNJ	ucnvisci.c	/^    PNJ = 0x4B,$/;"	e	enum:__anon14	file:
PNJ_ADHAK	ucnvisci.c	62;"	d	file:
PNJ_BINDI	ucnvisci.c	59;"	d	file:
PNJ_BINDI_TIPPI_SET	ucnvisci.c	/^static USet* PNJ_BINDI_TIPPI_SET= NULL;$/;"	v	file:
PNJ_CONSONANT_SET	ucnvisci.c	/^static USet* PNJ_CONSONANT_SET= NULL;$/;"	v	file:
PNJ_DELTA	ucnvisci.c	58;"	d	file:
PNJ_HA	ucnvisci.c	63;"	d	file:
PNJ_MASK	ucnvisci.c	/^    PNJ_MASK =0x40,$/;"	e	enum:__anon15	file:
PNJ_RRA	ucnvisci.c	64;"	d	file:
PNJ_SIGN_VIRAMA	ucnvisci.c	61;"	d	file:
PNJ_TIPPI	ucnvisci.c	60;"	d	file:
POSIX	umutex.c	47;"	d	file:
POSIX	umutex.c	50;"	d	file:
POSIX	umutex.c	53;"	d	file:
POSIX	umutex.c	56;"	d	file:
POSIX_CLOSE	uniset_props.cpp	/^static const UChar POSIX_CLOSE[] = { COLON,SET_CLOSE,0 };  \/\/ ":]"$/;"	v	file:
POSIX_KEY	uloc_tag.c	/^static const char* POSIX_KEY = "va";$/;"	v	file:
POSIX_VALUE	uloc_tag.c	/^static const char* POSIX_VALUE = "posix";$/;"	v	file:
POSSIBLE_WORD_LIST_MAX	dictbe.cpp	105;"	d	file:
PREFIX_DELIMITER	serv.cpp	/^const UChar ICUServiceKey::PREFIX_DELIMITER = 0x002F;   \/* '\/' *\/$/;"	m	class:ICUServiceKey	file:
PREFIX_DELIMITER	serv.h	/^  static const UChar PREFIX_DELIMITER;$/;"	m	class:ICUServiceKey	access:protected
PREV_GROUP	unames.c	71;"	d	file:
PRIMES	uhash.c	/^static const int32_t PRIMES[] = {$/;"	v	file:
PRIMES_LENGTH	uhash.c	85;"	d	file:
PRIV	uloc_tag.c	1638;"	d	file:
PRIVATEUSE	uloc_tag.c	46;"	d	file:
PRIVATEUSE_KEY	uloc_tag.c	/^static const char* PRIVATEUSE_KEY = "x";$/;"	v	file:
PROFILE_NAMES	usprep.cpp	/^static const char *PROFILE_NAMES[] = {$/;"	v	file:
PROPNAME_H	propname.h	12;"	d
PROPS_HAS_EXCEPTION	ucase.c	85;"	d	file:
PST	ucnvisci.c	/^    PST = 0x76$/;"	e	enum:__anon14	file:
PUTILIMP_H	putilimp.h	17;"	d
PUTIL_H	unicode/putil.h	25;"	d
PairPositioningFormat1Subtable	unicode/urename.h	2062;"	d
PairPositioningFormat2Subtable	unicode/urename.h	2063;"	d
PairPositioningSubtable	unicode/urename.h	2064;"	d
Para	ubidiimp.h	/^typedef int32_t Para;$/;"	t
ParagraphLayout	unicode/urename.h	2065;"	d
ParenStackEntry	usc_impl.c	/^struct ParenStackEntry$/;"	s	file:
ParenStackEntry::pairIndex	usc_impl.c	/^    int32_t pairIndex;$/;"	m	struct:ParenStackEntry	file:	access:public
ParenStackEntry::scriptCode	usc_impl.c	/^    UScriptCode scriptCode;$/;"	m	struct:ParenStackEntry	file:	access:public
ParseData	unicode/urename.h	2066;"	d
ParsePosition	ruleiter.h	/^class ParsePosition;$/;"	x
ParsePosition	unicode/parsepos.h	/^    ParsePosition()$/;"	f	class:ParsePosition	access:public	signature:()
ParsePosition	unicode/parsepos.h	/^    ParsePosition(const ParsePosition& copy)$/;"	f	class:ParsePosition	access:public	signature:(const ParsePosition& copy)
ParsePosition	unicode/parsepos.h	/^    ParsePosition(int32_t newIndex)$/;"	f	class:ParsePosition	access:public	signature:(int32_t newIndex)
ParsePosition	unicode/parsepos.h	/^class U_COMMON_API ParsePosition : public UObject {$/;"	c	inherits:UObject
ParsePosition	unicode/symtable.h	/^class ParsePosition;$/;"	x
ParsePosition	unicode/uniset.h	/^class ParsePosition;$/;"	x
ParsePosition	unicode/urename.h	2067;"	d
ParsePosition::ParsePosition	unicode/parsepos.h	/^    ParsePosition()$/;"	f	class:ParsePosition	access:public	signature:()
ParsePosition::ParsePosition	unicode/parsepos.h	/^    ParsePosition(const ParsePosition& copy)$/;"	f	class:ParsePosition	access:public	signature:(const ParsePosition& copy)
ParsePosition::ParsePosition	unicode/parsepos.h	/^    ParsePosition(int32_t newIndex)$/;"	f	class:ParsePosition	access:public	signature:(int32_t newIndex)
ParsePosition::clone	parsepos.cpp	/^ParsePosition::clone() const {$/;"	f	class:ParsePosition	signature:() const
ParsePosition::clone	unicode/parsepos.h	/^    ParsePosition *clone() const;$/;"	p	class:ParsePosition	access:public	signature:() const
ParsePosition::errorIndex	unicode/parsepos.h	/^    int32_t errorIndex;$/;"	m	class:ParsePosition	access:private
ParsePosition::getDynamicClassID	unicode/parsepos.h	/^    virtual UClassID getDynamicClassID() const;$/;"	p	class:ParsePosition	access:public	signature:() const
ParsePosition::getErrorIndex	unicode/parsepos.h	/^    int32_t getErrorIndex(void) const;$/;"	p	class:ParsePosition	access:public	signature:(void) const
ParsePosition::getErrorIndex	unicode/parsepos.h	/^ParsePosition::getErrorIndex() const$/;"	f	class:ParsePosition	signature:() const
ParsePosition::getIndex	unicode/parsepos.h	/^    int32_t getIndex(void) const;$/;"	p	class:ParsePosition	access:public	signature:(void) const
ParsePosition::getIndex	unicode/parsepos.h	/^ParsePosition::getIndex() const$/;"	f	class:ParsePosition	signature:() const
ParsePosition::getStaticClassID	unicode/parsepos.h	/^    static UClassID U_EXPORT2 getStaticClassID();$/;"	p	class:ParsePosition	access:public	signature:()
ParsePosition::index	unicode/parsepos.h	/^    int32_t index;$/;"	m	class:ParsePosition	access:private
ParsePosition::operator !=	unicode/parsepos.h	/^    UBool              operator!=(const ParsePosition& that) const;$/;"	p	class:ParsePosition	access:public	signature:(const ParsePosition& that) const
ParsePosition::operator !=	unicode/parsepos.h	/^ParsePosition::operator!=(const ParsePosition& copy) const$/;"	f	class:ParsePosition	signature:(const ParsePosition& copy) const
ParsePosition::operator =	unicode/parsepos.h	/^    ParsePosition&      operator=(const ParsePosition& copy);$/;"	p	class:ParsePosition	access:public	signature:(const ParsePosition& copy)
ParsePosition::operator =	unicode/parsepos.h	/^ParsePosition::operator=(const ParsePosition& copy)$/;"	f	class:ParsePosition	signature:(const ParsePosition& copy)
ParsePosition::operator ==	unicode/parsepos.h	/^    UBool              operator==(const ParsePosition& that) const;$/;"	p	class:ParsePosition	access:public	signature:(const ParsePosition& that) const
ParsePosition::operator ==	unicode/parsepos.h	/^ParsePosition::operator==(const ParsePosition& copy) const$/;"	f	class:ParsePosition	signature:(const ParsePosition& copy) const
ParsePosition::setErrorIndex	unicode/parsepos.h	/^    void setErrorIndex(int32_t ei);$/;"	p	class:ParsePosition	access:public	signature:(int32_t ei)
ParsePosition::setErrorIndex	unicode/parsepos.h	/^ParsePosition::setErrorIndex(int32_t ei)$/;"	f	class:ParsePosition	signature:(int32_t ei)
ParsePosition::setIndex	unicode/parsepos.h	/^    void setIndex(int32_t index);$/;"	p	class:ParsePosition	access:public	signature:(int32_t index)
ParsePosition::setIndex	unicode/parsepos.h	/^ParsePosition::setIndex(int32_t offset)$/;"	f	class:ParsePosition	signature:(int32_t offset)
ParsePosition::~ParsePosition	parsepos.cpp	/^ParsePosition::~ParsePosition() {}$/;"	f	class:ParsePosition	signature:()
ParsePosition::~ParsePosition	unicode/parsepos.h	/^    virtual ~ParsePosition();$/;"	p	class:ParsePosition	access:public	signature:()
PatternMap	unicode/urename.h	2068;"	d
PatternMapIterator	unicode/urename.h	2069;"	d
PersianCalendar	unicode/urename.h	2070;"	d
PluralFormat	unicode/urename.h	2071;"	d
PluralKeywordEnumeration	unicode/urename.h	2072;"	d
PluralRules	unicode/urename.h	2073;"	d
Point	ubidiimp.h	/^typedef struct Point {$/;"	s
Point	ubidiimp.h	/^} Point;$/;"	t	typeref:struct:Point
Point::flag	ubidiimp.h	/^    int32_t flag;           \/* flag for LRM\/RLM, before\/after *\/$/;"	m	struct:Point	access:public
Point::pos	ubidiimp.h	/^    int32_t pos;            \/* position in text *\/$/;"	m	struct:Point	access:public
PointerTOC	ucmndata.c	/^}  PointerTOC;$/;"	t	typeref:struct:__anon28	file:
PointerTOCEntry	ucmndata.c	/^} PointerTOCEntry;$/;"	t	typeref:struct:__anon27	file:
Pos	ruleiter.h	/^    struct Pos : public UMemory {$/;"	s	class:RuleCharacterIterator	inherits:UMemory	access:public
PossibleWord	dictbe.cpp	/^  PossibleWord();$/;"	p	class:PossibleWord	file:	access:public	signature:()
PossibleWord	dictbe.cpp	/^PossibleWord::PossibleWord() {$/;"	f	class:PossibleWord	signature:()
PossibleWord	dictbe.cpp	/^class PossibleWord {$/;"	c	file:
PossibleWord::PossibleWord	dictbe.cpp	/^  PossibleWord();$/;"	p	class:PossibleWord	file:	access:public	signature:()
PossibleWord::PossibleWord	dictbe.cpp	/^PossibleWord::PossibleWord() {$/;"	f	class:PossibleWord	signature:()
PossibleWord::acceptMarked	dictbe.cpp	/^  int32_t   acceptMarked( UText *text );$/;"	p	class:PossibleWord	file:	access:public	signature:( UText *text )
PossibleWord::acceptMarked	dictbe.cpp	/^PossibleWord::acceptMarked( UText *text ) {$/;"	f	class:PossibleWord	signature:( UText *text )
PossibleWord::backUp	dictbe.cpp	/^  UBool     backUp( UText *text );$/;"	p	class:PossibleWord	file:	access:public	signature:( UText *text )
PossibleWord::backUp	dictbe.cpp	/^PossibleWord::backUp( UText *text ) {$/;"	f	class:PossibleWord	signature:( UText *text )
PossibleWord::candidates	dictbe.cpp	/^  int       candidates( UText *text, const TrieWordDictionary *dict, int32_t rangeEnd );$/;"	p	class:PossibleWord	file:	access:public	signature:( UText *text, const TrieWordDictionary *dict, int32_t rangeEnd )
PossibleWord::candidates	dictbe.cpp	/^PossibleWord::candidates( UText *text, const TrieWordDictionary *dict, int32_t rangeEnd ) {$/;"	f	class:PossibleWord	signature:( UText *text, const TrieWordDictionary *dict, int32_t rangeEnd )
PossibleWord::count	dictbe.cpp	/^  int       count;      \/\/ Count of candidates$/;"	m	class:PossibleWord	file:	access:private
PossibleWord::current	dictbe.cpp	/^  int       current;    \/\/ The candidate we're currently looking at$/;"	m	class:PossibleWord	file:	access:private
PossibleWord::lengths	dictbe.cpp	/^  int32_t   lengths[POSSIBLE_WORD_LIST_MAX];$/;"	m	class:PossibleWord	file:	access:private
PossibleWord::longestPrefix	dictbe.cpp	/^  int32_t   longestPrefix();$/;"	p	class:PossibleWord	file:	access:public	signature:()
PossibleWord::longestPrefix	dictbe.cpp	/^PossibleWord::longestPrefix() {$/;"	f	class:PossibleWord	signature:()
PossibleWord::mark	dictbe.cpp	/^  int       mark;       \/\/ The preferred candidate's offset$/;"	m	class:PossibleWord	file:	access:private
PossibleWord::markCurrent	dictbe.cpp	/^  void      markCurrent();$/;"	p	class:PossibleWord	file:	access:public	signature:()
PossibleWord::markCurrent	dictbe.cpp	/^PossibleWord::markCurrent() {$/;"	f	class:PossibleWord	signature:()
PossibleWord::offset	dictbe.cpp	/^  int32_t   offset;     \/\/ Offset in the text of these candidates$/;"	m	class:PossibleWord	file:	access:private
PossibleWord::prefix	dictbe.cpp	/^  int32_t   prefix;     \/\/ The longest match with a dictionary word$/;"	m	class:PossibleWord	file:	access:private
PossibleWord::~PossibleWord	dictbe.cpp	/^  ~PossibleWord();$/;"	p	class:PossibleWord	file:	access:public	signature:()
PossibleWord::~PossibleWord	dictbe.cpp	/^PossibleWord::~PossibleWord() {$/;"	f	class:PossibleWord	signature:()
PropNameCompareFn	propname.cpp	/^typedef int32_t U_CALLCONV PropNameCompareFn(const char *name1, const char *name2);$/;"	t	file:
PropertyAliases	propname.h	/^class PropertyAliases {$/;"	c
PropertyAliases	unicode/urename.h	2074;"	d
PropertyAliases::chooseNameInGroup	propname.cpp	/^PropertyAliases::chooseNameInGroup(Offset offset,$/;"	f	class:PropertyAliases	signature:(Offset offset, UPropertyNameChoice choice) const
PropertyAliases::chooseNameInGroup	propname.h	/^    const char* chooseNameInGroup(Offset offset,$/;"	p	class:PropertyAliases	access:private	signature:(Offset offset, UPropertyNameChoice choice) const
PropertyAliases::enumToName_offset	propname.h	/^    Offset enumToName_offset;$/;"	m	class:PropertyAliases	access:private
PropertyAliases::enumToValue_offset	propname.h	/^    Offset enumToValue_offset;$/;"	m	class:PropertyAliases	access:private
PropertyAliases::getPointer	propname.h	/^    inline const int8_t* getPointer(Offset o) const {$/;"	f	class:PropertyAliases	access:public	signature:(Offset o) const
PropertyAliases::getPointerNull	propname.h	/^    inline const int8_t* getPointerNull(Offset o) const {$/;"	f	class:PropertyAliases	access:public	signature:(Offset o) const
PropertyAliases::getPropertyEnum	propname.cpp	/^PropertyAliases::getPropertyEnum(const char* alias) const {$/;"	f	class:PropertyAliases	signature:(const char* alias) const
PropertyAliases::getPropertyEnum	propname.h	/^    inline EnumValue getPropertyEnum(const char* alias) const;$/;"	p	class:PropertyAliases	access:public	signature:(const char* alias) const
PropertyAliases::getPropertyName	propname.cpp	/^PropertyAliases::getPropertyName(EnumValue prop,$/;"	f	class:PropertyAliases	signature:(EnumValue prop, UPropertyNameChoice choice) const
PropertyAliases::getPropertyName	propname.h	/^    inline const char* getPropertyName(EnumValue prop,$/;"	p	class:PropertyAliases	access:public	signature:(EnumValue prop, UPropertyNameChoice choice) const
PropertyAliases::getPropertyValueEnum	propname.cpp	/^PropertyAliases::getPropertyValueEnum(EnumValue prop,$/;"	f	class:PropertyAliases	signature:(EnumValue prop, const char* alias) const
PropertyAliases::getPropertyValueEnum	propname.h	/^    inline EnumValue getPropertyValueEnum(EnumValue prop,$/;"	p	class:PropertyAliases	access:public	signature:(EnumValue prop, const char* alias) const
PropertyAliases::getPropertyValueName	propname.cpp	/^PropertyAliases::getPropertyValueName(EnumValue prop,$/;"	f	class:PropertyAliases	signature:(EnumValue prop, EnumValue value, UPropertyNameChoice choice) const
PropertyAliases::getPropertyValueName	propname.h	/^    inline const char* getPropertyValueName(EnumValue prop, EnumValue value,$/;"	p	class:PropertyAliases	access:public	signature:(EnumValue prop, EnumValue value, UPropertyNameChoice choice) const
PropertyAliases::getValueMap	propname.cpp	/^PropertyAliases::getValueMap(EnumValue prop) const {$/;"	f	class:PropertyAliases	signature:(EnumValue prop) const
PropertyAliases::getValueMap	propname.h	/^    const ValueMap* getValueMap(EnumValue prop) const;$/;"	p	class:PropertyAliases	access:private	signature:(EnumValue prop) const
PropertyAliases::nameGroupPool_count	propname.h	/^    int16_t nameGroupPool_count; \/*  number of entries (not groups) *\/$/;"	m	class:PropertyAliases	access:private
PropertyAliases::nameGroupPool_offset	propname.h	/^    Offset nameGroupPool_offset; \/*  offset to start of array *\/$/;"	m	class:PropertyAliases	access:private
PropertyAliases::nameToEnum_offset	propname.h	/^    Offset nameToEnum_offset;$/;"	m	class:PropertyAliases	access:private
PropertyAliases::stringPool_count	propname.h	/^    int16_t stringPool_count; \/*  number of strings (not size in bytes) *\/$/;"	m	class:PropertyAliases	access:private
PropertyAliases::stringPool_offset	propname.h	/^    Offset stringPool_offset; \/*  offset to start of pool *\/$/;"	m	class:PropertyAliases	access:private
PropertyAliases::swap	propname.cpp	/^PropertyAliases::swap(const UDataSwapper *ds,$/;"	f	class:PropertyAliases	signature:(const UDataSwapper *ds, const uint8_t *inBytes, int32_t length, uint8_t *outBytes, UErrorCode *pErrorCode)
PropertyAliases::swap	propname.h	/^    swap(const UDataSwapper *ds,$/;"	p	class:PropertyAliases	access:public	signature:(const UDataSwapper *ds, const uint8_t *inBytes, int32_t length, uint8_t *outBytes, UErrorCode *pErrorCode)
PropertyAliases::total_size	propname.h	/^    int16_t total_size; \/*  size in bytes excluding the udata header *\/$/;"	m	class:PropertyAliases	access:private
PropertyAliases::valueMap_count	propname.h	/^    int16_t valueMap_count; \/*  number of entries *\/$/;"	m	class:PropertyAliases	access:private
PropertyAliases::valueMap_offset	propname.h	/^    Offset valueMap_offset; \/*  offset to start of array *\/$/;"	m	class:PropertyAliases	access:private
PtnElem	unicode/urename.h	2075;"	d
PtnSkeleton	unicode/urename.h	2076;"	d
Quantifier	unicode/urename.h	2077;"	d
R	ubidiimp.h	/^    R=  U_RIGHT_TO_LEFT,$/;"	e	enum:__anon82
RBBIDataHeader	rbbidata.h	/^struct RBBIDataHeader {$/;"	s
RBBIDataHeader	unicode/rbbi.h	/^struct RBBIDataHeader;$/;"	x
RBBIDataHeader::fCatCount	rbbidata.h	/^    uint32_t         fCatCount;        \/*  Number of character categories.                         *\/$/;"	m	struct:RBBIDataHeader	access:public
RBBIDataHeader::fFTable	rbbidata.h	/^    uint32_t         fFTable;         \/*  forward state transition table. *\/$/;"	m	struct:RBBIDataHeader	access:public
RBBIDataHeader::fFTableLen	rbbidata.h	/^    uint32_t         fFTableLen;$/;"	m	struct:RBBIDataHeader	access:public
RBBIDataHeader::fFormatVersion	rbbidata.h	/^    uint8_t          fFormatVersion[4]; \/* Data Format.  Same as the value in struct UDataInfo      *\/$/;"	m	struct:RBBIDataHeader	access:public
RBBIDataHeader::fLength	rbbidata.h	/^    uint32_t         fLength;          \/*  Total length in bytes of this RBBI Data,                *\/$/;"	m	struct:RBBIDataHeader	access:public
RBBIDataHeader::fMagic	rbbidata.h	/^    uint32_t         fMagic;           \/*  == 0xbla0                                               *\/$/;"	m	struct:RBBIDataHeader	access:public
RBBIDataHeader::fRTable	rbbidata.h	/^    uint32_t         fRTable;         \/*  Offset to the reverse state transition table. *\/$/;"	m	struct:RBBIDataHeader	access:public
RBBIDataHeader::fRTableLen	rbbidata.h	/^    uint32_t         fRTableLen;$/;"	m	struct:RBBIDataHeader	access:public
RBBIDataHeader::fReserved	rbbidata.h	/^    uint32_t         fReserved[6];    \/*  Reserved for expansion *\/$/;"	m	struct:RBBIDataHeader	access:public
RBBIDataHeader::fRuleSource	rbbidata.h	/^    uint32_t         fRuleSource;     \/*  Offset to the source for for the break *\/$/;"	m	struct:RBBIDataHeader	access:public
RBBIDataHeader::fRuleSourceLen	rbbidata.h	/^    uint32_t         fRuleSourceLen;  \/*    rules.  Stored UChar *. *\/$/;"	m	struct:RBBIDataHeader	access:public
RBBIDataHeader::fSFTable	rbbidata.h	/^    uint32_t         fSFTable;        \/*  safe point forward transition table *\/$/;"	m	struct:RBBIDataHeader	access:public
RBBIDataHeader::fSFTableLen	rbbidata.h	/^    uint32_t         fSFTableLen;$/;"	m	struct:RBBIDataHeader	access:public
RBBIDataHeader::fSRTable	rbbidata.h	/^    uint32_t         fSRTable;        \/*  safe point reverse transition table *\/$/;"	m	struct:RBBIDataHeader	access:public
RBBIDataHeader::fSRTableLen	rbbidata.h	/^    uint32_t         fSRTableLen;$/;"	m	struct:RBBIDataHeader	access:public
RBBIDataHeader::fStatusTable	rbbidata.h	/^    uint32_t         fStatusTable;    \/* Offset to the table of rule status values *\/$/;"	m	struct:RBBIDataHeader	access:public
RBBIDataHeader::fStatusTableLen	rbbidata.h	/^    uint32_t         fStatusTableLen;$/;"	m	struct:RBBIDataHeader	access:public
RBBIDataHeader::fTrie	rbbidata.h	/^    uint32_t         fTrie;           \/*  Offset to Trie data for character categories *\/$/;"	m	struct:RBBIDataHeader	access:public
RBBIDataHeader::fTrieLen	rbbidata.h	/^    uint32_t         fTrieLen;$/;"	m	struct:RBBIDataHeader	access:public
RBBIDataWrapper	rbbidata.cpp	/^RBBIDataWrapper::RBBIDataWrapper(UDataMemory* udm, UErrorCode &status) {$/;"	f	class:RBBIDataWrapper	signature:(UDataMemory* udm, UErrorCode &status)
RBBIDataWrapper	rbbidata.cpp	/^RBBIDataWrapper::RBBIDataWrapper(const RBBIDataHeader *data, UErrorCode &status) {$/;"	f	class:RBBIDataWrapper	signature:(const RBBIDataHeader *data, UErrorCode &status)
RBBIDataWrapper	rbbidata.cpp	/^RBBIDataWrapper::RBBIDataWrapper(const RBBIDataHeader *data, enum EDontAdopt, UErrorCode &status) {$/;"	f	class:RBBIDataWrapper	signature:(const RBBIDataHeader *data, enum EDontAdopt, UErrorCode &status)
RBBIDataWrapper	rbbidata.h	/^    RBBIDataWrapper(UDataMemory* udm, UErrorCode &status);$/;"	p	class:RBBIDataWrapper	access:public	signature:(UDataMemory* udm, UErrorCode &status)
RBBIDataWrapper	rbbidata.h	/^    RBBIDataWrapper(const RBBIDataHeader *data, UErrorCode &status);$/;"	p	class:RBBIDataWrapper	access:public	signature:(const RBBIDataHeader *data, UErrorCode &status)
RBBIDataWrapper	rbbidata.h	/^    RBBIDataWrapper(const RBBIDataHeader *data, enum EDontAdopt dontAdopt, UErrorCode &status);$/;"	p	class:RBBIDataWrapper	access:public	signature:(const RBBIDataHeader *data, enum EDontAdopt dontAdopt, UErrorCode &status)
RBBIDataWrapper	rbbidata.h	/^    RBBIDataWrapper(const RBBIDataWrapper &other); \/*  forbid copying of this class *\/$/;"	p	class:RBBIDataWrapper	access:private	signature:(const RBBIDataWrapper &other)
RBBIDataWrapper	rbbidata.h	/^class RBBIDataWrapper : public UMemory {$/;"	c	inherits:UMemory
RBBIDataWrapper	unicode/rbbi.h	/^class  RBBIDataWrapper;$/;"	x
RBBIDataWrapper	unicode/urename.h	2078;"	d
RBBIDataWrapper::EDontAdopt	rbbidata.h	/^    enum EDontAdopt {$/;"	g	class:RBBIDataWrapper	access:public
RBBIDataWrapper::RBBIDataWrapper	rbbidata.cpp	/^RBBIDataWrapper::RBBIDataWrapper(UDataMemory* udm, UErrorCode &status) {$/;"	f	class:RBBIDataWrapper	signature:(UDataMemory* udm, UErrorCode &status)
RBBIDataWrapper::RBBIDataWrapper	rbbidata.cpp	/^RBBIDataWrapper::RBBIDataWrapper(const RBBIDataHeader *data, UErrorCode &status) {$/;"	f	class:RBBIDataWrapper	signature:(const RBBIDataHeader *data, UErrorCode &status)
RBBIDataWrapper::RBBIDataWrapper	rbbidata.cpp	/^RBBIDataWrapper::RBBIDataWrapper(const RBBIDataHeader *data, enum EDontAdopt, UErrorCode &status) {$/;"	f	class:RBBIDataWrapper	signature:(const RBBIDataHeader *data, enum EDontAdopt, UErrorCode &status)
RBBIDataWrapper::RBBIDataWrapper	rbbidata.h	/^    RBBIDataWrapper(UDataMemory* udm, UErrorCode &status);$/;"	p	class:RBBIDataWrapper	access:public	signature:(UDataMemory* udm, UErrorCode &status)
RBBIDataWrapper::RBBIDataWrapper	rbbidata.h	/^    RBBIDataWrapper(const RBBIDataHeader *data, UErrorCode &status);$/;"	p	class:RBBIDataWrapper	access:public	signature:(const RBBIDataHeader *data, UErrorCode &status)
RBBIDataWrapper::RBBIDataWrapper	rbbidata.h	/^    RBBIDataWrapper(const RBBIDataHeader *data, enum EDontAdopt dontAdopt, UErrorCode &status);$/;"	p	class:RBBIDataWrapper	access:public	signature:(const RBBIDataHeader *data, enum EDontAdopt dontAdopt, UErrorCode &status)
RBBIDataWrapper::RBBIDataWrapper	rbbidata.h	/^    RBBIDataWrapper(const RBBIDataWrapper &other); \/*  forbid copying of this class *\/$/;"	p	class:RBBIDataWrapper	access:private	signature:(const RBBIDataWrapper &other)
RBBIDataWrapper::addReference	rbbidata.cpp	/^RBBIDataWrapper *RBBIDataWrapper::addReference() {$/;"	f	class:RBBIDataWrapper	signature:()
RBBIDataWrapper::addReference	rbbidata.h	/^    RBBIDataWrapper      *addReference();$/;"	p	class:RBBIDataWrapper	access:public	signature:()
RBBIDataWrapper::fDontFreeData	rbbidata.h	/^    UBool               fDontFreeData;$/;"	m	class:RBBIDataWrapper	access:private
RBBIDataWrapper::fForwardTable	rbbidata.h	/^    const RBBIStateTable     *fForwardTable;$/;"	m	class:RBBIDataWrapper	access:public
RBBIDataWrapper::fHeader	rbbidata.h	/^    const RBBIDataHeader     *fHeader;$/;"	m	class:RBBIDataWrapper	access:public
RBBIDataWrapper::fRefCount	rbbidata.h	/^    int32_t             fRefCount;$/;"	m	class:RBBIDataWrapper	access:private
RBBIDataWrapper::fReverseTable	rbbidata.h	/^    const RBBIStateTable     *fReverseTable;$/;"	m	class:RBBIDataWrapper	access:public
RBBIDataWrapper::fRuleSource	rbbidata.h	/^    const UChar              *fRuleSource;$/;"	m	class:RBBIDataWrapper	access:public
RBBIDataWrapper::fRuleStatusTable	rbbidata.h	/^    const int32_t            *fRuleStatusTable; $/;"	m	class:RBBIDataWrapper	access:public
RBBIDataWrapper::fRuleString	rbbidata.h	/^    UnicodeString       fRuleString;$/;"	m	class:RBBIDataWrapper	access:private
RBBIDataWrapper::fSafeFwdTable	rbbidata.h	/^    const RBBIStateTable     *fSafeFwdTable;$/;"	m	class:RBBIDataWrapper	access:public
RBBIDataWrapper::fSafeRevTable	rbbidata.h	/^    const RBBIStateTable     *fSafeRevTable;$/;"	m	class:RBBIDataWrapper	access:public
RBBIDataWrapper::fStatusMaxIdx	rbbidata.h	/^    int32_t             fStatusMaxIdx;$/;"	m	class:RBBIDataWrapper	access:public
RBBIDataWrapper::fTrie	rbbidata.h	/^    UTrie               fTrie;$/;"	m	class:RBBIDataWrapper	access:public
RBBIDataWrapper::fUDataMem	rbbidata.h	/^    UDataMemory        *fUDataMem;$/;"	m	class:RBBIDataWrapper	access:private
RBBIDataWrapper::getRuleSourceString	rbbidata.cpp	/^const UnicodeString &RBBIDataWrapper::getRuleSourceString() const {$/;"	f	class:RBBIDataWrapper	signature:() const
RBBIDataWrapper::getRuleSourceString	rbbidata.h	/^    const UnicodeString  &getRuleSourceString() const;$/;"	p	class:RBBIDataWrapper	access:public	signature:() const
RBBIDataWrapper::hashCode	rbbidata.cpp	/^int32_t  RBBIDataWrapper::hashCode() {$/;"	f	class:RBBIDataWrapper	signature:()
RBBIDataWrapper::hashCode	rbbidata.h	/^    int32_t               hashCode();$/;"	p	class:RBBIDataWrapper	access:public	signature:()
RBBIDataWrapper::init	rbbidata.cpp	/^void RBBIDataWrapper::init(const RBBIDataHeader *data, UErrorCode &status) {$/;"	f	class:RBBIDataWrapper	signature:(const RBBIDataHeader *data, UErrorCode &status)
RBBIDataWrapper::init	rbbidata.h	/^    void                  init(const RBBIDataHeader *data, UErrorCode &status);$/;"	p	class:RBBIDataWrapper	access:public	signature:(const RBBIDataHeader *data, UErrorCode &status)
RBBIDataWrapper::kDontAdopt	rbbidata.h	/^        kDontAdopt$/;"	e	enum:RBBIDataWrapper::EDontAdopt
RBBIDataWrapper::operator =	rbbidata.h	/^    RBBIDataWrapper &operator=(const RBBIDataWrapper &other); \/*  forbid copying of this class *\/$/;"	p	class:RBBIDataWrapper	access:private	signature:(const RBBIDataWrapper &other)
RBBIDataWrapper::operator ==	rbbidata.cpp	/^UBool RBBIDataWrapper::operator ==(const RBBIDataWrapper &other) const {$/;"	f	class:RBBIDataWrapper	signature:(const RBBIDataWrapper &other) const
RBBIDataWrapper::operator ==	rbbidata.h	/^    UBool                 operator ==(const RBBIDataWrapper &other) const;$/;"	p	class:RBBIDataWrapper	access:public	signature:(const RBBIDataWrapper &other) const
RBBIDataWrapper::printData	rbbidata.cpp	/^void  RBBIDataWrapper::printData() {$/;"	f	class:RBBIDataWrapper	signature:()
RBBIDataWrapper::printData	rbbidata.h	/^    void                  printData();$/;"	p	class:RBBIDataWrapper	access:public	signature:()
RBBIDataWrapper::printTable	rbbidata.cpp	/^void  RBBIDataWrapper::printTable(const char *heading, const RBBIStateTable *table) {$/;"	f	class:RBBIDataWrapper	signature:(const char *heading, const RBBIStateTable *table)
RBBIDataWrapper::printTable	rbbidata.h	/^    void                  printTable(const char *heading, const RBBIStateTable *table);$/;"	p	class:RBBIDataWrapper	access:public	signature:(const char *heading, const RBBIStateTable *table)
RBBIDataWrapper::removeReference	rbbidata.cpp	/^void RBBIDataWrapper::removeReference() {$/;"	f	class:RBBIDataWrapper	signature:()
RBBIDataWrapper::removeReference	rbbidata.h	/^    void                  removeReference();$/;"	p	class:RBBIDataWrapper	access:public	signature:()
RBBIDataWrapper::~RBBIDataWrapper	rbbidata.cpp	/^RBBIDataWrapper::~RBBIDataWrapper() {$/;"	f	class:RBBIDataWrapper	signature:()
RBBIDataWrapper::~RBBIDataWrapper	rbbidata.h	/^    ~RBBIDataWrapper();$/;"	p	class:RBBIDataWrapper	access:public	signature:()
RBBIDebugPrintf	rbbirb.h	200;"	d
RBBIDebugPrintf	rbbirb.h	203;"	d
RBBIDebugPuts	rbbirb.h	201;"	d
RBBIDebugPuts	rbbirb.h	204;"	d
RBBINODE_H	rbbinode.h	8;"	d
RBBINode	rbbinode.cpp	/^RBBINode::RBBINode(NodeType t) : UMemory() {$/;"	f	class:RBBINode	signature:(NodeType t)
RBBINode	rbbinode.cpp	/^RBBINode::RBBINode(const RBBINode &other) : UMemory(other) {$/;"	f	class:RBBINode	signature:(const RBBINode &other)
RBBINode	rbbinode.h	/^        RBBINode(NodeType t);$/;"	p	class:RBBINode	access:public	signature:(NodeType t)
RBBINode	rbbinode.h	/^        RBBINode(const RBBINode &other);$/;"	p	class:RBBINode	access:public	signature:(const RBBINode &other)
RBBINode	rbbinode.h	/^class RBBINode : public UMemory {$/;"	c	inherits:UMemory
RBBINode	rbbirb.h	/^class               RBBINode;$/;"	x
RBBINode	unicode/urename.h	2079;"	d
RBBINode::NodeType	rbbinode.h	/^        enum NodeType {$/;"	g	class:RBBINode	access:public
RBBINode::OpPrecedence	rbbinode.h	/^        enum OpPrecedence {      $/;"	g	class:RBBINode	access:public
RBBINode::RBBINode	rbbinode.cpp	/^RBBINode::RBBINode(NodeType t) : UMemory() {$/;"	f	class:RBBINode	signature:(NodeType t)
RBBINode::RBBINode	rbbinode.cpp	/^RBBINode::RBBINode(const RBBINode &other) : UMemory(other) {$/;"	f	class:RBBINode	signature:(const RBBINode &other)
RBBINode::RBBINode	rbbinode.h	/^        RBBINode(NodeType t);$/;"	p	class:RBBINode	access:public	signature:(NodeType t)
RBBINode::RBBINode	rbbinode.h	/^        RBBINode(const RBBINode &other);$/;"	p	class:RBBINode	access:public	signature:(const RBBINode &other)
RBBINode::cloneTree	rbbinode.cpp	/^RBBINode *RBBINode::cloneTree() {$/;"	f	class:RBBINode	signature:()
RBBINode::cloneTree	rbbinode.h	/^        RBBINode    *cloneTree();$/;"	p	class:RBBINode	access:public	signature:()
RBBINode::endMark	rbbinode.h	/^            endMark,$/;"	e	enum:RBBINode::NodeType
RBBINode::fFirstPos	rbbinode.h	/^        int           fFirstPos;            \/\/ Position in the rule source string of the$/;"	m	class:RBBINode	access:public
RBBINode::fFirstPosSet	rbbinode.h	/^        UVector       *fFirstPosSet;$/;"	m	class:RBBINode	access:public
RBBINode::fFollowPos	rbbinode.h	/^        UVector       *fFollowPos;$/;"	m	class:RBBINode	access:public
RBBINode::fInputSet	rbbinode.h	/^        UnicodeSet    *fInputSet;           \/\/ For uset nodes only.$/;"	m	class:RBBINode	access:public
RBBINode::fLastPos	rbbinode.h	/^        int           fLastPos;             \/\/  Last position in the rule source string$/;"	m	class:RBBINode	access:public
RBBINode::fLastPosSet	rbbinode.h	/^        UVector       *fLastPosSet;         \/\/ TODO: rename fFirstPos & fLastPos to avoid confusion.$/;"	m	class:RBBINode	access:public
RBBINode::fLeftChild	rbbinode.h	/^        RBBINode      *fLeftChild;$/;"	m	class:RBBINode	access:public
RBBINode::fLookAheadEnd	rbbinode.h	/^        UBool         fLookAheadEnd;        \/\/ For endMark nodes, set TRUE if$/;"	m	class:RBBINode	access:public
RBBINode::fNullable	rbbinode.h	/^        UBool         fNullable;            \/\/ See Aho.$/;"	m	class:RBBINode	access:public
RBBINode::fParent	rbbinode.h	/^        RBBINode      *fParent;$/;"	m	class:RBBINode	access:public
RBBINode::fPrecedence	rbbinode.h	/^        OpPrecedence  fPrecedence;          \/\/ For binary ops only.$/;"	m	class:RBBINode	access:public
RBBINode::fRightChild	rbbinode.h	/^        RBBINode      *fRightChild;$/;"	m	class:RBBINode	access:public
RBBINode::fSerialNum	rbbinode.h	/^        int           fSerialNum;           \/\/  Debugging aids.$/;"	m	class:RBBINode	access:private
RBBINode::fText	rbbinode.h	/^        UnicodeString fText;                \/\/ Text corresponding to this node.$/;"	m	class:RBBINode	access:public
RBBINode::fType	rbbinode.h	/^        NodeType      fType;$/;"	m	class:RBBINode	access:public
RBBINode::fVal	rbbinode.h	/^        int32_t       fVal;                 \/\/ For leafChar nodes, the value.$/;"	m	class:RBBINode	access:public
RBBINode::findNodes	rbbinode.cpp	/^void   RBBINode::findNodes(UVector *dest, RBBINode::NodeType kind, UErrorCode &status) {$/;"	f	class:RBBINode	signature:(UVector *dest, RBBINode::NodeType kind, UErrorCode &status)
RBBINode::findNodes	rbbinode.h	/^        void         findNodes(UVector *dest, RBBINode::NodeType kind, UErrorCode &status);$/;"	p	class:RBBINode	access:public	signature:(UVector *dest, RBBINode::NodeType kind, UErrorCode &status)
RBBINode::flattenSets	rbbinode.cpp	/^void RBBINode::flattenSets() {$/;"	f	class:RBBINode	signature:()
RBBINode::flattenSets	rbbinode.h	/^        void         flattenSets();$/;"	p	class:RBBINode	access:public	signature:()
RBBINode::flattenVariables	rbbinode.cpp	/^RBBINode *RBBINode::flattenVariables() {$/;"	f	class:RBBINode	signature:()
RBBINode::flattenVariables	rbbinode.h	/^        RBBINode    *flattenVariables();$/;"	p	class:RBBINode	access:public	signature:()
RBBINode::leafChar	rbbinode.h	/^            leafChar,$/;"	e	enum:RBBINode::NodeType
RBBINode::lookAhead	rbbinode.h	/^            lookAhead,$/;"	e	enum:RBBINode::NodeType
RBBINode::opBreak	rbbinode.h	/^            opBreak,$/;"	e	enum:RBBINode::NodeType
RBBINode::opCat	rbbinode.h	/^            opCat,$/;"	e	enum:RBBINode::NodeType
RBBINode::opLParen	rbbinode.h	/^            opLParen$/;"	e	enum:RBBINode::NodeType
RBBINode::opOr	rbbinode.h	/^            opOr,$/;"	e	enum:RBBINode::NodeType
RBBINode::opPlus	rbbinode.h	/^            opPlus,$/;"	e	enum:RBBINode::NodeType
RBBINode::opQuestion	rbbinode.h	/^            opQuestion,$/;"	e	enum:RBBINode::NodeType
RBBINode::opReverse	rbbinode.h	/^            opReverse,$/;"	e	enum:RBBINode::NodeType
RBBINode::opStar	rbbinode.h	/^            opStar,$/;"	e	enum:RBBINode::NodeType
RBBINode::opStart	rbbinode.h	/^            opStart,$/;"	e	enum:RBBINode::NodeType
RBBINode::operator =	rbbinode.h	/^        RBBINode &operator = (const RBBINode &other); \/\/ No defs.$/;"	p	class:RBBINode	access:private	signature:(const RBBINode &other)
RBBINode::operator ==	rbbinode.h	/^        UBool operator == (const RBBINode &other);    \/\/ Private, so these functions won't accidently be used.$/;"	p	class:RBBINode	access:private	signature:(const RBBINode &other)
RBBINode::precLParen	rbbinode.h	/^            precLParen,$/;"	e	enum:RBBINode::OpPrecedence
RBBINode::precOpCat	rbbinode.h	/^            precOpCat$/;"	e	enum:RBBINode::OpPrecedence
RBBINode::precOpOr	rbbinode.h	/^            precOpOr,$/;"	e	enum:RBBINode::OpPrecedence
RBBINode::precStart	rbbinode.h	/^            precStart,$/;"	e	enum:RBBINode::OpPrecedence
RBBINode::precZero	rbbinode.h	/^            precZero,$/;"	e	enum:RBBINode::OpPrecedence
RBBINode::printNode	rbbinode.cpp	/^void RBBINode::printNode() {$/;"	f	class:RBBINode	signature:()
RBBINode::printNode	rbbinode.h	/^        void        printNode();$/;"	p	class:RBBINode	access:public	signature:()
RBBINode::printTree	rbbinode.cpp	/^void RBBINode::printTree(UBool printHeading) {$/;"	f	class:RBBINode	signature:(UBool printHeading)
RBBINode::printTree	rbbinode.h	/^        void        printTree(UBool withHeading);$/;"	p	class:RBBINode	access:public	signature:(UBool withHeading)
RBBINode::setRef	rbbinode.h	/^            setRef,$/;"	e	enum:RBBINode::NodeType
RBBINode::tag	rbbinode.h	/^            tag,$/;"	e	enum:RBBINode::NodeType
RBBINode::uset	rbbinode.h	/^            uset,$/;"	e	enum:RBBINode::NodeType
RBBINode::varRef	rbbinode.h	/^            varRef,$/;"	e	enum:RBBINode::NodeType
RBBINode::~RBBINode	rbbinode.cpp	/^RBBINode::~RBBINode() {$/;"	f	class:RBBINode	signature:()
RBBINode::~RBBINode	rbbinode.h	/^        ~RBBINode();$/;"	p	class:RBBINode	access:public	signature:()
RBBIRB_H	rbbirb.h	13;"	d
RBBIRPT_H	rbbirpt.h	14;"	d
RBBIRuleBuilder	rbbirb.cpp	/^RBBIRuleBuilder::RBBIRuleBuilder(const UnicodeString   &rules,$/;"	f	class:RBBIRuleBuilder	signature:(const UnicodeString &rules, UParseError *parseErr, UErrorCode &status)
RBBIRuleBuilder	rbbirb.h	/^    RBBIRuleBuilder(const RBBIRuleBuilder &other); \/\/ forbid copying of this class$/;"	p	class:RBBIRuleBuilder	access:private	signature:(const RBBIRuleBuilder &other)
RBBIRuleBuilder	rbbirb.h	/^    RBBIRuleBuilder(const UnicodeString  &rules,$/;"	p	class:RBBIRuleBuilder	access:public	signature:(const UnicodeString &rules, UParseError *parseErr, UErrorCode &status )
RBBIRuleBuilder	rbbirb.h	/^class RBBIRuleBuilder : public UMemory {$/;"	c	inherits:UMemory
RBBIRuleBuilder	rbbiscan.h	/^class   RBBIRuleBuilder;$/;"	x
RBBIRuleBuilder	rbbitblb.h	/^class RBBIRuleBuilder;$/;"	x
RBBIRuleBuilder	unicode/rbbi.h	/^    friend class RBBIRuleBuilder;$/;"	x
RBBIRuleBuilder	unicode/urename.h	2080;"	d
RBBIRuleBuilder::RBBIRuleBuilder	rbbirb.cpp	/^RBBIRuleBuilder::RBBIRuleBuilder(const UnicodeString   &rules,$/;"	f	class:RBBIRuleBuilder	signature:(const UnicodeString &rules, UParseError *parseErr, UErrorCode &status)
RBBIRuleBuilder::RBBIRuleBuilder	rbbirb.h	/^    RBBIRuleBuilder(const RBBIRuleBuilder &other); \/\/ forbid copying of this class$/;"	p	class:RBBIRuleBuilder	access:private	signature:(const RBBIRuleBuilder &other)
RBBIRuleBuilder::RBBIRuleBuilder	rbbirb.h	/^    RBBIRuleBuilder(const UnicodeString  &rules,$/;"	p	class:RBBIRuleBuilder	access:public	signature:(const UnicodeString &rules, UParseError *parseErr, UErrorCode &status )
RBBIRuleBuilder::createRuleBasedBreakIterator	rbbirb.cpp	/^RBBIRuleBuilder::createRuleBasedBreakIterator( const UnicodeString    &rules,$/;"	f	class:RBBIRuleBuilder	signature:( const UnicodeString &rules, UParseError *parseError, UErrorCode &status)
RBBIRuleBuilder::createRuleBasedBreakIterator	rbbirb.h	/^    static BreakIterator * createRuleBasedBreakIterator( const UnicodeString    &rules,$/;"	p	class:RBBIRuleBuilder	access:public	signature:( const UnicodeString &rules, UParseError *parseError, UErrorCode &status)
RBBIRuleBuilder::fChainRules	rbbirb.h	/^    UBool                         fChainRules;       \/\/ True for chained Unicode TR style rules.$/;"	m	class:RBBIRuleBuilder	access:public
RBBIRuleBuilder::fDebugEnv	rbbirb.h	/^    char                          *fDebugEnv;        \/\/ controls debug trace output$/;"	m	class:RBBIRuleBuilder	access:public
RBBIRuleBuilder::fDefaultTree	rbbirb.h	/^    RBBINode                      **fDefaultTree;    \/\/ For rules not qualified with a !$/;"	m	class:RBBIRuleBuilder	access:public
RBBIRuleBuilder::fForwardTables	rbbirb.h	/^    RBBITableBuilder              *fForwardTables;   \/\/ State transition tables$/;"	m	class:RBBIRuleBuilder	access:public
RBBIRuleBuilder::fForwardTree	rbbirb.h	/^    RBBINode                      *fForwardTree;     \/\/ The parse trees, generated by the scanner,$/;"	m	class:RBBIRuleBuilder	access:public
RBBIRuleBuilder::fLBCMNoChain	rbbirb.h	/^    UBool                         fLBCMNoChain;      \/\/ True:  suppress chaining of rules on$/;"	m	class:RBBIRuleBuilder	access:public
RBBIRuleBuilder::fLookAheadHardBreak	rbbirb.h	/^    UBool                         fLookAheadHardBreak;  \/\/ True:  Look ahead matches cause an$/;"	m	class:RBBIRuleBuilder	access:public
RBBIRuleBuilder::fParseError	rbbirb.h	/^    UParseError                   *fParseError;      \/\/   here avoids passing it everywhere.$/;"	m	class:RBBIRuleBuilder	access:public
RBBIRuleBuilder::fReverseTables	rbbirb.h	/^    RBBITableBuilder              *fReverseTables;$/;"	m	class:RBBIRuleBuilder	access:public
RBBIRuleBuilder::fReverseTree	rbbirb.h	/^    RBBINode                      *fReverseTree;     \/\/   then manipulated by subsequent steps.$/;"	m	class:RBBIRuleBuilder	access:public
RBBIRuleBuilder::fRuleStatusVals	rbbirb.h	/^    UVector                       *fRuleStatusVals;  \/\/ The values that can be returned$/;"	m	class:RBBIRuleBuilder	access:public
RBBIRuleBuilder::fRules	rbbirb.h	/^    const UnicodeString           &fRules;           \/\/ The rule string that we are compiling$/;"	m	class:RBBIRuleBuilder	access:public
RBBIRuleBuilder::fSafeFwdTables	rbbirb.h	/^    RBBITableBuilder              *fSafeFwdTables;$/;"	m	class:RBBIRuleBuilder	access:public
RBBIRuleBuilder::fSafeFwdTree	rbbirb.h	/^    RBBINode                      *fSafeFwdTree;$/;"	m	class:RBBIRuleBuilder	access:public
RBBIRuleBuilder::fSafeRevTables	rbbirb.h	/^    RBBITableBuilder              *fSafeRevTables;$/;"	m	class:RBBIRuleBuilder	access:public
RBBIRuleBuilder::fSafeRevTree	rbbirb.h	/^    RBBINode                      *fSafeRevTree;$/;"	m	class:RBBIRuleBuilder	access:public
RBBIRuleBuilder::fScanner	rbbirb.h	/^    RBBIRuleScanner               *fScanner;         \/\/ The scanner.$/;"	m	class:RBBIRuleBuilder	access:public
RBBIRuleBuilder::fSetBuilder	rbbirb.h	/^    RBBISetBuilder                *fSetBuilder;      \/\/ Set and Character Category builder.$/;"	m	class:RBBIRuleBuilder	access:public
RBBIRuleBuilder::fStatus	rbbirb.h	/^    UErrorCode                    *fStatus;          \/\/ Error reporting.  Keeping status$/;"	m	class:RBBIRuleBuilder	access:public
RBBIRuleBuilder::fUSetNodes	rbbirb.h	/^    UVector                       *fUSetNodes;       \/\/ Vector of all uset nodes.$/;"	m	class:RBBIRuleBuilder	access:public
RBBIRuleBuilder::flattenData	rbbirb.cpp	/^RBBIDataHeader *RBBIRuleBuilder::flattenData() {$/;"	f	class:RBBIRuleBuilder	signature:()
RBBIRuleBuilder::flattenData	rbbirb.h	/^    RBBIDataHeader                *flattenData();    \/\/ Create the flattened (runtime format)$/;"	p	class:RBBIRuleBuilder	access:public	signature:()
RBBIRuleBuilder::operator =	rbbirb.h	/^    RBBIRuleBuilder &operator=(const RBBIRuleBuilder &other); \/\/ forbid copying of this class$/;"	p	class:RBBIRuleBuilder	access:private	signature:(const RBBIRuleBuilder &other)
RBBIRuleBuilder::~RBBIRuleBuilder	rbbirb.cpp	/^RBBIRuleBuilder::~RBBIRuleBuilder() {$/;"	f	class:RBBIRuleBuilder	signature:()
RBBIRuleBuilder::~RBBIRuleBuilder	rbbirb.h	/^    virtual    ~RBBIRuleBuilder();$/;"	p	class:RBBIRuleBuilder	access:public	signature:()
RBBIRuleChar	rbbiscan.h	/^    struct RBBIRuleChar {$/;"	s	class:RBBIRuleScanner	access:public
RBBIRuleScanner	rbbirb.h	/^class               RBBIRuleScanner;$/;"	x
RBBIRuleScanner	rbbiscan.cpp	/^RBBIRuleScanner::RBBIRuleScanner(RBBIRuleBuilder *rb)$/;"	f	class:RBBIRuleScanner	signature:(RBBIRuleBuilder *rb)
RBBIRuleScanner	rbbiscan.h	/^    RBBIRuleScanner(RBBIRuleBuilder  *rb);$/;"	p	class:RBBIRuleScanner	access:public	signature:(RBBIRuleBuilder *rb)
RBBIRuleScanner	rbbiscan.h	/^    RBBIRuleScanner(const RBBIRuleScanner &other); \/\/ forbid copying of this class$/;"	p	class:RBBIRuleScanner	access:private	signature:(const RBBIRuleScanner &other)
RBBIRuleScanner	rbbiscan.h	/^class RBBIRuleScanner : public UMemory {$/;"	c	inherits:UMemory
RBBIRuleScanner	rbbitblb.h	/^class RBBIRuleScanner;$/;"	x
RBBIRuleScanner	unicode/urename.h	2081;"	d
RBBIRuleScanner::RBBIRuleChar	rbbiscan.h	/^    struct RBBIRuleChar {$/;"	s	class:RBBIRuleScanner	access:public
RBBIRuleScanner::RBBIRuleChar::fChar	rbbiscan.h	/^        UChar32             fChar;$/;"	m	struct:RBBIRuleScanner::RBBIRuleChar	access:public
RBBIRuleScanner::RBBIRuleChar::fEscaped	rbbiscan.h	/^        UBool               fEscaped;$/;"	m	struct:RBBIRuleScanner::RBBIRuleChar	access:public
RBBIRuleScanner::RBBIRuleScanner	rbbiscan.cpp	/^RBBIRuleScanner::RBBIRuleScanner(RBBIRuleBuilder *rb)$/;"	f	class:RBBIRuleScanner	signature:(RBBIRuleBuilder *rb)
RBBIRuleScanner::RBBIRuleScanner	rbbiscan.h	/^    RBBIRuleScanner(RBBIRuleBuilder  *rb);$/;"	p	class:RBBIRuleScanner	access:public	signature:(RBBIRuleBuilder *rb)
RBBIRuleScanner::RBBIRuleScanner	rbbiscan.h	/^    RBBIRuleScanner(const RBBIRuleScanner &other); \/\/ forbid copying of this class$/;"	p	class:RBBIRuleScanner	access:private	signature:(const RBBIRuleScanner &other)
RBBIRuleScanner::doParseActions	rbbiscan.cpp	/^UBool RBBIRuleScanner::doParseActions(int32_t action)$/;"	f	class:RBBIRuleScanner	signature:(int32_t action)
RBBIRuleScanner::doParseActions	rbbiscan.h	/^    UBool       doParseActions(int32_t a);$/;"	p	class:RBBIRuleScanner	access:private	signature:(int32_t a)
RBBIRuleScanner::error	rbbiscan.cpp	/^void RBBIRuleScanner::error(UErrorCode e) {$/;"	f	class:RBBIRuleScanner	signature:(UErrorCode e)
RBBIRuleScanner::error	rbbiscan.h	/^    void        error(UErrorCode e);                   \/\/ error reporting convenience function.$/;"	p	class:RBBIRuleScanner	access:private	signature:(UErrorCode e)
RBBIRuleScanner::fC	rbbiscan.h	/^    RBBIRuleChar                  fC;                \/\/ Current char for parse state machine$/;"	m	class:RBBIRuleScanner	access:private
RBBIRuleScanner::fCharNum	rbbiscan.h	/^    int32_t                       fCharNum;          \/\/ Char position within the line.$/;"	m	class:RBBIRuleScanner	access:private
RBBIRuleScanner::fLastChar	rbbiscan.h	/^    UChar32                       fLastChar;         \/\/ Previous char, needed to count CR-LF$/;"	m	class:RBBIRuleScanner	access:private
RBBIRuleScanner::fLineNum	rbbiscan.h	/^    int32_t                       fLineNum;          \/\/ Line number in input file.$/;"	m	class:RBBIRuleScanner	access:private
RBBIRuleScanner::fLookAheadRule	rbbiscan.h	/^    UBool                          fLookAheadRule;   \/\/ True if the rule includes a '\/'$/;"	m	class:RBBIRuleScanner	access:private
RBBIRuleScanner::fNextIndex	rbbiscan.h	/^    int32_t                       fNextIndex;        \/\/ Index of the next character, which$/;"	m	class:RBBIRuleScanner	access:private
RBBIRuleScanner::fNodeStack	rbbiscan.h	/^    RBBINode                      *fNodeStack[kStackSize]; \/\/ Node stack, holds nodes created$/;"	m	class:RBBIRuleScanner	access:private
RBBIRuleScanner::fNodeStackPtr	rbbiscan.h	/^    int32_t                        fNodeStackPtr;$/;"	m	class:RBBIRuleScanner	access:private
RBBIRuleScanner::fOptionStart	rbbiscan.h	/^    int32_t                        fOptionStart;     \/\/ Input index of start of a !!option$/;"	m	class:RBBIRuleScanner	access:private
RBBIRuleScanner::fQuoteMode	rbbiscan.h	/^    UBool                         fQuoteMode;        \/\/ Scan is in a 'quoted region'$/;"	m	class:RBBIRuleScanner	access:private
RBBIRuleScanner::fRB	rbbiscan.h	/^    RBBIRuleBuilder               *fRB;              \/\/ The rule builder that we are part of.$/;"	m	class:RBBIRuleScanner	access:private
RBBIRuleScanner::fReverseRule	rbbiscan.h	/^    UBool                          fReverseRule;     \/\/ True if the rule currently being scanned$/;"	m	class:RBBIRuleScanner	access:private
RBBIRuleScanner::fRuleNum	rbbiscan.h	/^    int32_t                        fRuleNum;         \/\/ Counts each rule as it is scanned.$/;"	m	class:RBBIRuleScanner	access:private
RBBIRuleScanner::fRuleSets	rbbiscan.h	/^    UnicodeSet                     fRuleSets[10];    \/\/ Unicode Sets that are needed during$/;"	m	class:RBBIRuleScanner	access:private
RBBIRuleScanner::fScanIndex	rbbiscan.h	/^    int32_t                       fScanIndex;        \/\/ Index of current character being processed$/;"	m	class:RBBIRuleScanner	access:private
RBBIRuleScanner::fSetTable	rbbiscan.h	/^    UHashtable                    *fSetTable;        \/\/ UnicocodeSet hash table, holds indexes to$/;"	m	class:RBBIRuleScanner	access:private
RBBIRuleScanner::fStack	rbbiscan.h	/^    uint16_t                      fStack[kStackSize];  \/\/ State stack, holds state pushes$/;"	m	class:RBBIRuleScanner	access:private
RBBIRuleScanner::fStackPtr	rbbiscan.h	/^    int32_t                       fStackPtr;           \/\/  and pops as specified in the state$/;"	m	class:RBBIRuleScanner	access:private
RBBIRuleScanner::fStateTable	rbbiscan.h	/^    RBBIRuleTableEl               **fStateTable;     \/\/ State Transition Table for RBBI Rule$/;"	m	class:RBBIRuleScanner	access:private
RBBIRuleScanner::fSymbolTable	rbbiscan.h	/^    RBBISymbolTable               *fSymbolTable;     \/\/ symbol table, holds definitions of$/;"	m	class:RBBIRuleScanner	access:private
RBBIRuleScanner::fVarName	rbbiscan.h	/^    UnicodeString                 fVarName;          \/\/ $variableName, valid when we've just$/;"	m	class:RBBIRuleScanner	access:private
RBBIRuleScanner::findSetFor	rbbiscan.cpp	/^void RBBIRuleScanner::findSetFor(const UnicodeString &s, RBBINode *node, UnicodeSet *setToAdopt) {$/;"	f	class:RBBIRuleScanner	signature:(const UnicodeString &s, RBBINode *node, UnicodeSet *setToAdopt)
RBBIRuleScanner::findSetFor	rbbiscan.h	/^    void        findSetFor(const UnicodeString &s, RBBINode *node, UnicodeSet *setToAdopt = NULL);$/;"	p	class:RBBIRuleScanner	access:private	signature:(const UnicodeString &s, RBBINode *node, UnicodeSet *setToAdopt = NULL)
RBBIRuleScanner::fixOpStack	rbbiscan.cpp	/^void RBBIRuleScanner::fixOpStack(RBBINode::OpPrecedence p) {$/;"	f	class:RBBIRuleScanner	signature:(RBBINode::OpPrecedence p)
RBBIRuleScanner::fixOpStack	rbbiscan.h	/^    void        fixOpStack(RBBINode::OpPrecedence p);$/;"	p	class:RBBIRuleScanner	access:private	signature:(RBBINode::OpPrecedence p)
RBBIRuleScanner::gRuleSet_name_char	rbbiscan.h	/^    UnicodeSet *gRuleSet_name_char;$/;"	m	class:RBBIRuleScanner	access:private
RBBIRuleScanner::gRuleSet_name_start_char	rbbiscan.h	/^    UnicodeSet *gRuleSet_name_start_char;$/;"	m	class:RBBIRuleScanner	access:private
RBBIRuleScanner::gRuleSet_rule_char	rbbiscan.h	/^    UnicodeSet *gRuleSet_rule_char;$/;"	m	class:RBBIRuleScanner	access:private
RBBIRuleScanner::gRuleSet_white_space	rbbiscan.h	/^    UnicodeSet *gRuleSet_white_space;$/;"	m	class:RBBIRuleScanner	access:private
RBBIRuleScanner::kStackSize	rbbiscan.h	/^        kStackSize = 100            \/\/ The size of the state stack for$/;"	e	enum:RBBIRuleScanner::__anon44
RBBIRuleScanner::nextChar	rbbiscan.cpp	/^void RBBIRuleScanner::nextChar(RBBIRuleChar &c) {$/;"	f	class:RBBIRuleScanner	signature:(RBBIRuleChar &c)
RBBIRuleScanner::nextChar	rbbiscan.h	/^    void        nextChar(RBBIRuleChar &c);          \/\/ Get the next char from the input stream.$/;"	p	class:RBBIRuleScanner	access:public	signature:(RBBIRuleChar &c)
RBBIRuleScanner::nextCharLL	rbbiscan.cpp	/^UChar32  RBBIRuleScanner::nextCharLL() {$/;"	f	class:RBBIRuleScanner	signature:()
RBBIRuleScanner::nextCharLL	rbbiscan.h	/^    UChar32     nextCharLL();$/;"	p	class:RBBIRuleScanner	access:private	signature:()
RBBIRuleScanner::operator =	rbbiscan.h	/^    RBBIRuleScanner &operator=(const RBBIRuleScanner &other); \/\/ forbid copying of this class$/;"	p	class:RBBIRuleScanner	access:private	signature:(const RBBIRuleScanner &other)
RBBIRuleScanner::parse	rbbiscan.cpp	/^void RBBIRuleScanner::parse() {$/;"	f	class:RBBIRuleScanner	signature:()
RBBIRuleScanner::parse	rbbiscan.h	/^    void        parse();                            \/\/ Parse the rules, generating two parse$/;"	p	class:RBBIRuleScanner	access:public	signature:()
RBBIRuleScanner::printNodeStack	rbbiscan.cpp	/^void RBBIRuleScanner::printNodeStack(const char *title) {$/;"	f	class:RBBIRuleScanner	signature:(const char *title)
RBBIRuleScanner::printNodeStack	rbbiscan.h	/^    void        printNodeStack(const char *title);$/;"	p	class:RBBIRuleScanner	access:private	signature:(const char *title)
RBBIRuleScanner::push	rbbiscan.h	/^    UBool       push(const RBBIRuleChar &c);        \/\/ Push (unget) one character.$/;"	p	class:RBBIRuleScanner	access:public	signature:(const RBBIRuleChar &c)
RBBIRuleScanner::pushNewNode	rbbiscan.cpp	/^RBBINode  *RBBIRuleScanner::pushNewNode(RBBINode::NodeType  t) {$/;"	f	class:RBBIRuleScanner	signature:(RBBINode::NodeType t)
RBBIRuleScanner::pushNewNode	rbbiscan.h	/^    RBBINode    *pushNewNode(RBBINode::NodeType  t);$/;"	p	class:RBBIRuleScanner	access:private	signature:(RBBINode::NodeType t)
RBBIRuleScanner::scanSet	rbbiscan.cpp	/^void RBBIRuleScanner::scanSet() {$/;"	f	class:RBBIRuleScanner	signature:()
RBBIRuleScanner::scanSet	rbbiscan.h	/^    void        scanSet();$/;"	p	class:RBBIRuleScanner	access:private	signature:()
RBBIRuleScanner::stripRules	rbbiscan.cpp	/^UnicodeString RBBIRuleScanner::stripRules(const UnicodeString &rules) {$/;"	f	class:RBBIRuleScanner	signature:(const UnicodeString &rules)
RBBIRuleScanner::stripRules	rbbiscan.h	/^    static UnicodeString stripRules(const UnicodeString &rules);$/;"	p	class:RBBIRuleScanner	access:public	signature:(const UnicodeString &rules)
RBBIRuleScanner::~RBBIRuleScanner	rbbiscan.cpp	/^RBBIRuleScanner::~RBBIRuleScanner() {$/;"	f	class:RBBIRuleScanner	signature:()
RBBIRuleScanner::~RBBIRuleScanner	rbbiscan.h	/^    virtual    ~RBBIRuleScanner();$/;"	p	class:RBBIRuleScanner	access:public	signature:()
RBBIRuleStateNames	rbbirpt.h	/^static const char * const RBBIRuleStateNames[] = {    0,$/;"	v
RBBIRuleTableEl	rbbirb.h	/^struct              RBBIRuleTableEl;$/;"	x
RBBIRuleTableEl	rbbirpt.h	/^struct RBBIRuleTableEl {$/;"	s
RBBIRuleTableEl::fAction	rbbirpt.h	/^    RBBI_RuleParseAction          fAction;$/;"	m	struct:RBBIRuleTableEl	access:public
RBBIRuleTableEl::fCharClass	rbbirpt.h	/^    uint8_t                       fCharClass;       \/\/ 0-127:    an individual ASCII character$/;"	m	struct:RBBIRuleTableEl	access:public
RBBIRuleTableEl::fNextChar	rbbirpt.h	/^    UBool                         fNextChar;$/;"	m	struct:RBBIRuleTableEl	access:public
RBBIRuleTableEl::fNextState	rbbirpt.h	/^    uint8_t                       fNextState;       \/\/ 0-250:    normal next-stat numbers$/;"	m	struct:RBBIRuleTableEl	access:public
RBBIRuleTableEl::fPushState	rbbirpt.h	/^    uint8_t                       fPushState;$/;"	m	struct:RBBIRuleTableEl	access:public
RBBIRunMode	rbbi.cpp	/^enum RBBIRunMode {$/;"	g	file:
RBBISCAN_H	rbbiscan.h	12;"	d
RBBISETB_H	rbbisetb.h	11;"	d
RBBISetBuilder	rbbirb.h	/^class               RBBISetBuilder;$/;"	x
RBBISetBuilder	rbbisetb.cpp	/^RBBISetBuilder::RBBISetBuilder(RBBIRuleBuilder *rb)$/;"	f	class:RBBISetBuilder	signature:(RBBIRuleBuilder *rb)
RBBISetBuilder	rbbisetb.h	/^    RBBISetBuilder(RBBIRuleBuilder *rb);$/;"	p	class:RBBISetBuilder	access:public	signature:(RBBIRuleBuilder *rb)
RBBISetBuilder	rbbisetb.h	/^    RBBISetBuilder(const RBBISetBuilder &other); \/\/ forbid copying of this class$/;"	p	class:RBBISetBuilder	access:private	signature:(const RBBISetBuilder &other)
RBBISetBuilder	rbbisetb.h	/^class RBBISetBuilder : public UMemory {$/;"	c	inherits:UMemory
RBBISetBuilder	unicode/urename.h	2082;"	d
RBBISetBuilder::RBBISetBuilder	rbbisetb.cpp	/^RBBISetBuilder::RBBISetBuilder(RBBIRuleBuilder *rb)$/;"	f	class:RBBISetBuilder	signature:(RBBIRuleBuilder *rb)
RBBISetBuilder::RBBISetBuilder	rbbisetb.h	/^    RBBISetBuilder(RBBIRuleBuilder *rb);$/;"	p	class:RBBISetBuilder	access:public	signature:(RBBIRuleBuilder *rb)
RBBISetBuilder::RBBISetBuilder	rbbisetb.h	/^    RBBISetBuilder(const RBBISetBuilder &other); \/\/ forbid copying of this class$/;"	p	class:RBBISetBuilder	access:private	signature:(const RBBISetBuilder &other)
RBBISetBuilder::addValToSet	rbbisetb.cpp	/^void  RBBISetBuilder::addValToSet(RBBINode *usetNode, uint32_t val) {$/;"	f	class:RBBISetBuilder	signature:(RBBINode *usetNode, uint32_t val)
RBBISetBuilder::addValToSet	rbbisetb.h	/^    void     addValToSet (RBBINode *usetNode, uint32_t val);$/;"	p	class:RBBISetBuilder	access:public	signature:(RBBINode *usetNode, uint32_t val)
RBBISetBuilder::addValToSets	rbbisetb.cpp	/^void  RBBISetBuilder::addValToSets(UVector *sets, uint32_t val) {$/;"	f	class:RBBISetBuilder	signature:(UVector *sets, uint32_t val)
RBBISetBuilder::addValToSets	rbbisetb.h	/^    void     addValToSets(UVector *sets,      uint32_t val);$/;"	p	class:RBBISetBuilder	access:public	signature:(UVector *sets, uint32_t val)
RBBISetBuilder::build	rbbisetb.cpp	/^void RBBISetBuilder::build() {$/;"	f	class:RBBISetBuilder	signature:()
RBBISetBuilder::build	rbbisetb.h	/^    void     build();$/;"	p	class:RBBISetBuilder	access:public	signature:()
RBBISetBuilder::fGroupCount	rbbisetb.h	/^    int32_t               fGroupCount;$/;"	m	class:RBBISetBuilder	access:private
RBBISetBuilder::fRB	rbbisetb.h	/^    RBBIRuleBuilder       *fRB;             \/\/ The RBBI Rule Compiler that owns us.$/;"	m	class:RBBISetBuilder	access:private
RBBISetBuilder::fRangeList	rbbisetb.h	/^    RangeDescriptor       *fRangeList;      \/\/ Head of the linked list of RangeDescriptors$/;"	m	class:RBBISetBuilder	access:private
RBBISetBuilder::fSawBOF	rbbisetb.h	/^    UBool                 fSawBOF;$/;"	m	class:RBBISetBuilder	access:private
RBBISetBuilder::fStatus	rbbisetb.h	/^    UErrorCode            *fStatus;$/;"	m	class:RBBISetBuilder	access:private
RBBISetBuilder::fTrie	rbbisetb.h	/^    UNewTrie              *fTrie;           \/\/ The mapping TRIE that is the end result of processing$/;"	m	class:RBBISetBuilder	access:private
RBBISetBuilder::fTrieSize	rbbisetb.h	/^    uint32_t              fTrieSize;        \/\/  the Unicode Sets.$/;"	m	class:RBBISetBuilder	access:private
RBBISetBuilder::getFirstChar	rbbisetb.cpp	/^UChar32  RBBISetBuilder::getFirstChar(int32_t category) const {$/;"	f	class:RBBISetBuilder	signature:(int32_t category) const
RBBISetBuilder::getFirstChar	rbbisetb.h	/^    UChar32  getFirstChar(int32_t  val) const;$/;"	p	class:RBBISetBuilder	access:public	signature:(int32_t val) const
RBBISetBuilder::getNumCharCategories	rbbisetb.cpp	/^int32_t  RBBISetBuilder::getNumCharCategories() const {$/;"	f	class:RBBISetBuilder	signature:() const
RBBISetBuilder::getNumCharCategories	rbbisetb.h	/^    int32_t  getNumCharCategories() const;   \/\/ CharCategories are the same as input symbol set to the$/;"	p	class:RBBISetBuilder	access:public	signature:() const
RBBISetBuilder::getTrieSize	rbbisetb.cpp	/^int32_t RBBISetBuilder::getTrieSize() \/*const*\/ {$/;"	f	class:RBBISetBuilder	signature:()
RBBISetBuilder::getTrieSize	rbbisetb.h	/^    int32_t  getTrieSize() \/*const*\/;        \/\/ Size in bytes of the serialized Trie.$/;"	p	class:RBBISetBuilder	access:public	signature:()
RBBISetBuilder::numberSets	rbbisetb.h	/^    void           numberSets();$/;"	p	class:RBBISetBuilder	access:private	signature:()
RBBISetBuilder::operator =	rbbisetb.h	/^    RBBISetBuilder &operator=(const RBBISetBuilder &other); \/\/ forbid copying of this class$/;"	p	class:RBBISetBuilder	access:private	signature:(const RBBISetBuilder &other)
RBBISetBuilder::printRangeGroups	rbbisetb.cpp	/^void RBBISetBuilder::printRangeGroups() {$/;"	f	class:RBBISetBuilder	signature:()
RBBISetBuilder::printRangeGroups	rbbisetb.h	/^    void     printRangeGroups();$/;"	p	class:RBBISetBuilder	access:public	signature:()
RBBISetBuilder::printRanges	rbbisetb.cpp	/^void RBBISetBuilder::printRanges() {$/;"	f	class:RBBISetBuilder	signature:()
RBBISetBuilder::printRanges	rbbisetb.h	/^    void     printRanges();$/;"	p	class:RBBISetBuilder	access:public	signature:()
RBBISetBuilder::printSets	rbbisetb.cpp	/^void RBBISetBuilder::printSets() {$/;"	f	class:RBBISetBuilder	signature:()
RBBISetBuilder::printSets	rbbisetb.h	/^    void     printSets();$/;"	p	class:RBBISetBuilder	access:public	signature:()
RBBISetBuilder::sawBOF	rbbisetb.cpp	/^UBool  RBBISetBuilder::sawBOF() const {$/;"	f	class:RBBISetBuilder	signature:() const
RBBISetBuilder::sawBOF	rbbisetb.h	/^    UBool    sawBOF() const;                 \/\/ Indicate whether any references to the {bof} pseudo$/;"	p	class:RBBISetBuilder	access:public	signature:() const
RBBISetBuilder::serializeTrie	rbbisetb.cpp	/^void RBBISetBuilder::serializeTrie(uint8_t *where) {$/;"	f	class:RBBISetBuilder	signature:(uint8_t *where)
RBBISetBuilder::serializeTrie	rbbisetb.h	/^    void     serializeTrie(uint8_t *where);  \/\/ write out the serialized Trie.$/;"	p	class:RBBISetBuilder	access:public	signature:(uint8_t *where)
RBBISetBuilder::~RBBISetBuilder	rbbisetb.cpp	/^RBBISetBuilder::~RBBISetBuilder()$/;"	f	class:RBBISetBuilder	signature:()
RBBISetBuilder::~RBBISetBuilder	rbbisetb.h	/^    ~RBBISetBuilder();$/;"	p	class:RBBISetBuilder	access:public	signature:()
RBBISetTableEl	rbbirb.h	/^struct RBBISetTableEl {$/;"	s
RBBISetTableEl::key	rbbirb.h	/^    UnicodeString *key;$/;"	m	struct:RBBISetTableEl	access:public
RBBISetTableEl::val	rbbirb.h	/^    RBBINode      *val;$/;"	m	struct:RBBISetTableEl	access:public
RBBISetTable_deleter	rbbiscan.cpp	/^static void U_CALLCONV RBBISetTable_deleter(void *p) {$/;"	f	file:	signature:(void *p)
RBBIStateDescriptor	rbbitblb.cpp	/^RBBIStateDescriptor::RBBIStateDescriptor(int lastInputSymbol, UErrorCode *fStatus) {$/;"	f	class:RBBIStateDescriptor	signature:(int lastInputSymbol, UErrorCode *fStatus)
RBBIStateDescriptor	rbbitblb.h	/^    RBBIStateDescriptor(const RBBIStateDescriptor &other); \/\/ forbid copying of this class$/;"	p	class:RBBIStateDescriptor	access:private	signature:(const RBBIStateDescriptor &other)
RBBIStateDescriptor	rbbitblb.h	/^    RBBIStateDescriptor(int maxInputSymbol,  UErrorCode *fStatus);$/;"	p	class:RBBIStateDescriptor	access:public	signature:(int maxInputSymbol, UErrorCode *fStatus)
RBBIStateDescriptor	rbbitblb.h	/^class RBBIStateDescriptor : public UMemory {$/;"	c	inherits:UMemory
RBBIStateDescriptor	unicode/urename.h	2083;"	d
RBBIStateDescriptor::RBBIStateDescriptor	rbbitblb.cpp	/^RBBIStateDescriptor::RBBIStateDescriptor(int lastInputSymbol, UErrorCode *fStatus) {$/;"	f	class:RBBIStateDescriptor	signature:(int lastInputSymbol, UErrorCode *fStatus)
RBBIStateDescriptor::RBBIStateDescriptor	rbbitblb.h	/^    RBBIStateDescriptor(const RBBIStateDescriptor &other); \/\/ forbid copying of this class$/;"	p	class:RBBIStateDescriptor	access:private	signature:(const RBBIStateDescriptor &other)
RBBIStateDescriptor::RBBIStateDescriptor	rbbitblb.h	/^    RBBIStateDescriptor(int maxInputSymbol,  UErrorCode *fStatus);$/;"	p	class:RBBIStateDescriptor	access:public	signature:(int maxInputSymbol, UErrorCode *fStatus)
RBBIStateDescriptor::fAccepting	rbbitblb.h	/^    int32_t          fAccepting;$/;"	m	class:RBBIStateDescriptor	access:public
RBBIStateDescriptor::fDtran	rbbitblb.h	/^    UVector          *fDtran;              \/\/ Transitions out of this state.$/;"	m	class:RBBIStateDescriptor	access:public
RBBIStateDescriptor::fLookAhead	rbbitblb.h	/^    int32_t          fLookAhead;$/;"	m	class:RBBIStateDescriptor	access:public
RBBIStateDescriptor::fMarked	rbbitblb.h	/^    UBool            fMarked;$/;"	m	class:RBBIStateDescriptor	access:public
RBBIStateDescriptor::fPositions	rbbitblb.h	/^    UVector          *fPositions;          \/\/ Set of parse tree positions associated$/;"	m	class:RBBIStateDescriptor	access:public
RBBIStateDescriptor::fTagVals	rbbitblb.h	/^    UVector          *fTagVals;$/;"	m	class:RBBIStateDescriptor	access:public
RBBIStateDescriptor::fTagsIdx	rbbitblb.h	/^    int32_t          fTagsIdx;$/;"	m	class:RBBIStateDescriptor	access:public
RBBIStateDescriptor::operator =	rbbitblb.h	/^    RBBIStateDescriptor &operator=(const RBBIStateDescriptor &other); \/\/ forbid copying of this class$/;"	p	class:RBBIStateDescriptor	access:private	signature:(const RBBIStateDescriptor &other)
RBBIStateDescriptor::~RBBIStateDescriptor	rbbitblb.cpp	/^RBBIStateDescriptor::~RBBIStateDescriptor() {$/;"	f	class:RBBIStateDescriptor	signature:()
RBBIStateDescriptor::~RBBIStateDescriptor	rbbitblb.h	/^    ~RBBIStateDescriptor();$/;"	p	class:RBBIStateDescriptor	access:public	signature:()
RBBIStateTable	rbbidata.h	/^struct RBBIStateTable {$/;"	s
RBBIStateTable	unicode/rbbi.h	/^struct RBBIStateTable;$/;"	x
RBBIStateTable::fFlags	rbbidata.h	/^    uint32_t         fFlags;        \/*  Option Flags for this state table                 *\/$/;"	m	struct:RBBIStateTable	access:public
RBBIStateTable::fNumStates	rbbidata.h	/^    uint32_t         fNumStates;    \/*  Number of states.                                 *\/$/;"	m	struct:RBBIStateTable	access:public
RBBIStateTable::fReserved	rbbidata.h	/^    uint32_t         fReserved;     \/*  reserved                                          *\/$/;"	m	struct:RBBIStateTable	access:public
RBBIStateTable::fRowLen	rbbidata.h	/^    uint32_t         fRowLen;       \/*  Length of a state table row, in bytes.            *\/$/;"	m	struct:RBBIStateTable	access:public
RBBIStateTable::fTableData	rbbidata.h	/^    char             fTableData[4]; \/*  First RBBIStateTableRow begins here.              *\/$/;"	m	struct:RBBIStateTable	access:public
RBBIStateTableFlags	rbbidata.h	/^} RBBIStateTableFlags;$/;"	t	typeref:enum:__anon26
RBBIStateTableRow	rbbidata.h	/^struct  RBBIStateTableRow {$/;"	s
RBBIStateTableRow::fAccepting	rbbidata.h	/^    int16_t          fAccepting;    \/*  Non-zero if this row is for an accepting state.   *\/$/;"	m	struct:RBBIStateTableRow	access:public
RBBIStateTableRow::fLookAhead	rbbidata.h	/^    int16_t          fLookAhead;    \/*  Non-zero if this row is for a state that          *\/$/;"	m	struct:RBBIStateTableRow	access:public
RBBIStateTableRow::fNextState	rbbidata.h	/^    uint16_t         fNextState[2]; \/*  Next State, indexed by char category.             *\/$/;"	m	struct:RBBIStateTableRow	access:public
RBBIStateTableRow::fReserved	rbbidata.h	/^    int16_t          fReserved;$/;"	m	struct:RBBIStateTableRow	access:public
RBBIStateTableRow::fTagIdx	rbbidata.h	/^    int16_t          fTagIdx;       \/*  Non-zero if this row covers a {tagged} position   *\/$/;"	m	struct:RBBIStateTableRow	access:public
RBBISymbolTable	rbbirb.h	/^    RBBISymbolTable(RBBIRuleScanner *, const UnicodeString &fRules, UErrorCode &status);$/;"	p	class:RBBISymbolTable	access:public	signature:(RBBIRuleScanner *, const UnicodeString &fRules, UErrorCode &status)
RBBISymbolTable	rbbirb.h	/^    RBBISymbolTable(const RBBISymbolTable &other); \/\/ forbid copying of this class$/;"	p	class:RBBISymbolTable	access:private	signature:(const RBBISymbolTable &other)
RBBISymbolTable	rbbirb.h	/^class RBBISymbolTable : public UMemory, public SymbolTable {$/;"	c	inherits:UMemory,SymbolTable
RBBISymbolTable	rbbiscan.h	/^class   RBBISymbolTable;$/;"	x
RBBISymbolTable	rbbistbl.cpp	/^RBBISymbolTable::RBBISymbolTable(RBBIRuleScanner *rs, const UnicodeString &rules, UErrorCode &status)$/;"	f	class:RBBISymbolTable	signature:(RBBIRuleScanner *rs, const UnicodeString &rules, UErrorCode &status)
RBBISymbolTable	unicode/urename.h	2084;"	d
RBBISymbolTable::RBBISymbolTable	rbbirb.h	/^    RBBISymbolTable(RBBIRuleScanner *, const UnicodeString &fRules, UErrorCode &status);$/;"	p	class:RBBISymbolTable	access:public	signature:(RBBIRuleScanner *, const UnicodeString &fRules, UErrorCode &status)
RBBISymbolTable::RBBISymbolTable	rbbirb.h	/^    RBBISymbolTable(const RBBISymbolTable &other); \/\/ forbid copying of this class$/;"	p	class:RBBISymbolTable	access:private	signature:(const RBBISymbolTable &other)
RBBISymbolTable::RBBISymbolTable	rbbistbl.cpp	/^RBBISymbolTable::RBBISymbolTable(RBBIRuleScanner *rs, const UnicodeString &rules, UErrorCode &status)$/;"	f	class:RBBISymbolTable	signature:(RBBIRuleScanner *rs, const UnicodeString &rules, UErrorCode &status)
RBBISymbolTable::addEntry	rbbirb.h	/^    virtual void      addEntry  (const UnicodeString &key, RBBINode *val, UErrorCode &err);$/;"	p	class:RBBISymbolTable	access:public	signature:(const UnicodeString &key, RBBINode *val, UErrorCode &err)
RBBISymbolTable::addEntry	rbbistbl.cpp	/^void            RBBISymbolTable::addEntry  (const UnicodeString &key, RBBINode *val, UErrorCode &err) {$/;"	f	class:RBBISymbolTable	signature:(const UnicodeString &key, RBBINode *val, UErrorCode &err)
RBBISymbolTable::fCachedSetLookup	rbbirb.h	/^    UnicodeSet              *fCachedSetLookup;$/;"	m	class:RBBISymbolTable	access:private
RBBISymbolTable::fFakeField	rbbirb.h	/^    int32_t fFakeField;$/;"	m	class:RBBISymbolTable	access:public
RBBISymbolTable::fHashTable	rbbirb.h	/^    UHashtable               *fHashTable;$/;"	m	class:RBBISymbolTable	access:private
RBBISymbolTable::fRuleScanner	rbbirb.h	/^    RBBIRuleScanner          *fRuleScanner;$/;"	m	class:RBBISymbolTable	access:private
RBBISymbolTable::fRules	rbbirb.h	/^    const UnicodeString      &fRules;$/;"	m	class:RBBISymbolTable	access:private
RBBISymbolTable::ffffString	rbbirb.h	/^    const UnicodeString      ffffString;      \/\/ = "\/uffff"$/;"	m	class:RBBISymbolTable	access:private
RBBISymbolTable::lookup	rbbirb.h	/^    virtual const UnicodeString*  lookup(const UnicodeString& s) const;$/;"	p	class:RBBISymbolTable	access:public	signature:(const UnicodeString& s) const
RBBISymbolTable::lookup	rbbistbl.cpp	/^const UnicodeString  *RBBISymbolTable::lookup(const UnicodeString& s) const$/;"	f	class:RBBISymbolTable	signature:(const UnicodeString& s) const
RBBISymbolTable::lookupMatcher	rbbirb.h	/^    virtual const UnicodeFunctor* lookupMatcher(UChar32 ch) const;$/;"	p	class:RBBISymbolTable	access:public	signature:(UChar32 ch) const
RBBISymbolTable::lookupMatcher	rbbistbl.cpp	/^const UnicodeFunctor *RBBISymbolTable::lookupMatcher(UChar32 ch) const$/;"	f	class:RBBISymbolTable	signature:(UChar32 ch) const
RBBISymbolTable::lookupNode	rbbirb.h	/^    virtual RBBINode *lookupNode(const UnicodeString &key) const;$/;"	p	class:RBBISymbolTable	access:public	signature:(const UnicodeString &key) const
RBBISymbolTable::lookupNode	rbbistbl.cpp	/^RBBINode       *RBBISymbolTable::lookupNode(const UnicodeString &key) const{$/;"	f	class:RBBISymbolTable	signature:(const UnicodeString &key) const
RBBISymbolTable::operator =	rbbirb.h	/^    RBBISymbolTable &operator=(const RBBISymbolTable &other); \/\/ forbid copying of this class$/;"	p	class:RBBISymbolTable	access:private	signature:(const RBBISymbolTable &other)
RBBISymbolTable::parseReference	rbbirb.h	/^    virtual UnicodeString parseReference(const UnicodeString& text,$/;"	p	class:RBBISymbolTable	access:public	signature:(const UnicodeString& text, ParsePosition& pos, int32_t limit) const
RBBISymbolTable::parseReference	rbbistbl.cpp	/^UnicodeString   RBBISymbolTable::parseReference(const UnicodeString& text,$/;"	f	class:RBBISymbolTable	signature:(const UnicodeString& text, ParsePosition& pos, int32_t limit) const
RBBISymbolTable::rbbiSymtablePrint	rbbirb.h	/^    virtual void      rbbiSymtablePrint() const;$/;"	p	class:RBBISymbolTable	access:public	signature:() const
RBBISymbolTable::rbbiSymtablePrint	rbbistbl.cpp	/^void RBBISymbolTable::rbbiSymtablePrint() const {$/;"	f	class:RBBISymbolTable	signature:() const
RBBISymbolTable::~RBBISymbolTable	rbbirb.h	/^    virtual ~RBBISymbolTable();$/;"	p	class:RBBISymbolTable	access:public	signature:()
RBBISymbolTable::~RBBISymbolTable	rbbistbl.cpp	/^RBBISymbolTable::~RBBISymbolTable()$/;"	f	class:RBBISymbolTable	signature:()
RBBISymbolTableEntry	rbbirb.h	/^    RBBISymbolTableEntry();$/;"	p	class:RBBISymbolTableEntry	access:public	signature:()
RBBISymbolTableEntry	rbbirb.h	/^    RBBISymbolTableEntry(const RBBISymbolTableEntry &other); \/\/ forbid copying of this class$/;"	p	class:RBBISymbolTableEntry	access:private	signature:(const RBBISymbolTableEntry &other)
RBBISymbolTableEntry	rbbirb.h	/^class RBBISymbolTableEntry : public UMemory { \/\/ The symbol table hash table contains one$/;"	c	inherits:UMemory
RBBISymbolTableEntry	rbbistbl.cpp	/^RBBISymbolTableEntry::RBBISymbolTableEntry() : UMemory(), key(), val(NULL) {}$/;"	f	class:RBBISymbolTableEntry	signature:()
RBBISymbolTableEntry	unicode/urename.h	2085;"	d
RBBISymbolTableEntry::RBBISymbolTableEntry	rbbirb.h	/^    RBBISymbolTableEntry();$/;"	p	class:RBBISymbolTableEntry	access:public	signature:()
RBBISymbolTableEntry::RBBISymbolTableEntry	rbbirb.h	/^    RBBISymbolTableEntry(const RBBISymbolTableEntry &other); \/\/ forbid copying of this class$/;"	p	class:RBBISymbolTableEntry	access:private	signature:(const RBBISymbolTableEntry &other)
RBBISymbolTableEntry::RBBISymbolTableEntry	rbbistbl.cpp	/^RBBISymbolTableEntry::RBBISymbolTableEntry() : UMemory(), key(), val(NULL) {}$/;"	f	class:RBBISymbolTableEntry	signature:()
RBBISymbolTableEntry::key	rbbirb.h	/^    UnicodeString          key;$/;"	m	class:RBBISymbolTableEntry	access:public
RBBISymbolTableEntry::operator =	rbbirb.h	/^    RBBISymbolTableEntry &operator=(const RBBISymbolTableEntry &other); \/\/ forbid copying of this class$/;"	p	class:RBBISymbolTableEntry	access:private	signature:(const RBBISymbolTableEntry &other)
RBBISymbolTableEntry::val	rbbirb.h	/^    RBBINode               *val;$/;"	m	class:RBBISymbolTableEntry	access:public
RBBISymbolTableEntry::~RBBISymbolTableEntry	rbbirb.h	/^    ~RBBISymbolTableEntry();$/;"	p	class:RBBISymbolTableEntry	access:public	signature:()
RBBISymbolTableEntry::~RBBISymbolTableEntry	rbbistbl.cpp	/^RBBISymbolTableEntry::~RBBISymbolTableEntry() {$/;"	f	class:RBBISymbolTableEntry	signature:()
RBBISymbolTableEntry_deleter	rbbistbl.cpp	/^static void U_CALLCONV RBBISymbolTableEntry_deleter(void *p) {$/;"	f	file:	signature:(void *p)
RBBITBLB_H	rbbitblb.h	13;"	d
RBBITableBuilder	rbbirb.h	/^class               RBBITableBuilder;$/;"	x
RBBITableBuilder	rbbitblb.cpp	/^RBBITableBuilder::RBBITableBuilder(RBBIRuleBuilder *rb, RBBINode **rootNode) :$/;"	f	class:RBBITableBuilder	signature:(RBBIRuleBuilder *rb, RBBINode **rootNode)
RBBITableBuilder	rbbitblb.h	/^    RBBITableBuilder(RBBIRuleBuilder *rb, RBBINode **rootNode);$/;"	p	class:RBBITableBuilder	access:public	signature:(RBBIRuleBuilder *rb, RBBINode **rootNode)
RBBITableBuilder	rbbitblb.h	/^    RBBITableBuilder(const RBBITableBuilder &other); \/\/ forbid copying of this class$/;"	p	class:RBBITableBuilder	access:private	signature:(const RBBITableBuilder &other)
RBBITableBuilder	rbbitblb.h	/^class RBBITableBuilder : public UMemory {$/;"	c	inherits:UMemory
RBBITableBuilder	unicode/urename.h	2086;"	d
RBBITableBuilder::RBBITableBuilder	rbbitblb.cpp	/^RBBITableBuilder::RBBITableBuilder(RBBIRuleBuilder *rb, RBBINode **rootNode) :$/;"	f	class:RBBITableBuilder	signature:(RBBIRuleBuilder *rb, RBBINode **rootNode)
RBBITableBuilder::RBBITableBuilder	rbbitblb.h	/^    RBBITableBuilder(RBBIRuleBuilder *rb, RBBINode **rootNode);$/;"	p	class:RBBITableBuilder	access:public	signature:(RBBIRuleBuilder *rb, RBBINode **rootNode)
RBBITableBuilder::RBBITableBuilder	rbbitblb.h	/^    RBBITableBuilder(const RBBITableBuilder &other); \/\/ forbid copying of this class$/;"	p	class:RBBITableBuilder	access:private	signature:(const RBBITableBuilder &other)
RBBITableBuilder::bofFixup	rbbitblb.cpp	/^void RBBITableBuilder::bofFixup() {$/;"	f	class:RBBITableBuilder	signature:()
RBBITableBuilder::bofFixup	rbbitblb.h	/^    void     bofFixup();$/;"	p	class:RBBITableBuilder	access:private	signature:()
RBBITableBuilder::build	rbbitblb.cpp	/^void  RBBITableBuilder::build() {$/;"	f	class:RBBITableBuilder	signature:()
RBBITableBuilder::build	rbbitblb.h	/^    void     build();$/;"	p	class:RBBITableBuilder	access:public	signature:()
RBBITableBuilder::buildStateTable	rbbitblb.cpp	/^void RBBITableBuilder::buildStateTable() {$/;"	f	class:RBBITableBuilder	signature:()
RBBITableBuilder::buildStateTable	rbbitblb.h	/^    void     buildStateTable();$/;"	p	class:RBBITableBuilder	access:private	signature:()
RBBITableBuilder::calcChainedFollowPos	rbbitblb.cpp	/^void RBBITableBuilder::calcChainedFollowPos(RBBINode *tree) {$/;"	f	class:RBBITableBuilder	signature:(RBBINode *tree)
RBBITableBuilder::calcChainedFollowPos	rbbitblb.h	/^    void     calcChainedFollowPos(RBBINode *n);$/;"	p	class:RBBITableBuilder	access:private	signature:(RBBINode *n)
RBBITableBuilder::calcFirstPos	rbbitblb.cpp	/^void RBBITableBuilder::calcFirstPos(RBBINode *n) {$/;"	f	class:RBBITableBuilder	signature:(RBBINode *n)
RBBITableBuilder::calcFirstPos	rbbitblb.h	/^    void     calcFirstPos(RBBINode *n);$/;"	p	class:RBBITableBuilder	access:private	signature:(RBBINode *n)
RBBITableBuilder::calcFollowPos	rbbitblb.cpp	/^void RBBITableBuilder::calcFollowPos(RBBINode *n) {$/;"	f	class:RBBITableBuilder	signature:(RBBINode *n)
RBBITableBuilder::calcFollowPos	rbbitblb.h	/^    void     calcFollowPos(RBBINode *n);$/;"	p	class:RBBITableBuilder	access:private	signature:(RBBINode *n)
RBBITableBuilder::calcLastPos	rbbitblb.cpp	/^void RBBITableBuilder::calcLastPos(RBBINode *n) {$/;"	f	class:RBBITableBuilder	signature:(RBBINode *n)
RBBITableBuilder::calcLastPos	rbbitblb.h	/^    void     calcLastPos(RBBINode  *n);$/;"	p	class:RBBITableBuilder	access:private	signature:(RBBINode *n)
RBBITableBuilder::calcNullable	rbbitblb.cpp	/^void RBBITableBuilder::calcNullable(RBBINode *n) {$/;"	f	class:RBBITableBuilder	signature:(RBBINode *n)
RBBITableBuilder::calcNullable	rbbitblb.h	/^    void     calcNullable(RBBINode *n);$/;"	p	class:RBBITableBuilder	access:private	signature:(RBBINode *n)
RBBITableBuilder::exportTable	rbbitblb.cpp	/^void RBBITableBuilder::exportTable(void *where) {$/;"	f	class:RBBITableBuilder	signature:(void *where)
RBBITableBuilder::exportTable	rbbitblb.h	/^    void     exportTable(void *where);  \/\/ fill in the runtime state table.$/;"	p	class:RBBITableBuilder	access:public	signature:(void *where)
RBBITableBuilder::fDStates	rbbitblb.h	/^    UVector          *fDStates;            \/\/  D states (Aho's terminology)$/;"	m	class:RBBITableBuilder	access:private
RBBITableBuilder::fRB	rbbitblb.h	/^    RBBIRuleBuilder  *fRB;$/;"	m	class:RBBITableBuilder	access:private
RBBITableBuilder::fStatus	rbbitblb.h	/^    UErrorCode       *fStatus;$/;"	m	class:RBBITableBuilder	access:private
RBBITableBuilder::fTree	rbbitblb.h	/^    RBBINode         *&fTree;              \/\/ The root node of the parse tree to build a$/;"	m	class:RBBITableBuilder	access:private
RBBITableBuilder::flagAcceptingStates	rbbitblb.cpp	/^void     RBBITableBuilder::flagAcceptingStates() {$/;"	f	class:RBBITableBuilder	signature:()
RBBITableBuilder::flagAcceptingStates	rbbitblb.h	/^    void     flagAcceptingStates();$/;"	p	class:RBBITableBuilder	access:private	signature:()
RBBITableBuilder::flagLookAheadStates	rbbitblb.cpp	/^void     RBBITableBuilder::flagLookAheadStates() {$/;"	f	class:RBBITableBuilder	signature:()
RBBITableBuilder::flagLookAheadStates	rbbitblb.h	/^    void     flagLookAheadStates();$/;"	p	class:RBBITableBuilder	access:private	signature:()
RBBITableBuilder::flagTaggedStates	rbbitblb.cpp	/^void     RBBITableBuilder::flagTaggedStates() {$/;"	f	class:RBBITableBuilder	signature:()
RBBITableBuilder::flagTaggedStates	rbbitblb.h	/^    void     flagTaggedStates();$/;"	p	class:RBBITableBuilder	access:private	signature:()
RBBITableBuilder::getTableSize	rbbitblb.cpp	/^int32_t  RBBITableBuilder::getTableSize() const {$/;"	f	class:RBBITableBuilder	signature:() const
RBBITableBuilder::getTableSize	rbbitblb.h	/^    int32_t  getTableSize() const;      \/\/ Return the runtime size in bytes of$/;"	p	class:RBBITableBuilder	access:public	signature:() const
RBBITableBuilder::mergeRuleStatusVals	rbbitblb.cpp	/^void  RBBITableBuilder::mergeRuleStatusVals() {$/;"	f	class:RBBITableBuilder	signature:()
RBBITableBuilder::mergeRuleStatusVals	rbbitblb.h	/^    void     mergeRuleStatusVals();$/;"	p	class:RBBITableBuilder	access:private	signature:()
RBBITableBuilder::operator =	rbbitblb.h	/^    RBBITableBuilder &operator=(const RBBITableBuilder &other); \/\/ forbid copying of this class$/;"	p	class:RBBITableBuilder	access:private	signature:(const RBBITableBuilder &other)
RBBITableBuilder::printPosSets	rbbitblb.cpp	/^void RBBITableBuilder::printPosSets(RBBINode *n) {$/;"	f	class:RBBITableBuilder	signature:(RBBINode *n)
RBBITableBuilder::printPosSets	rbbitblb.h	/^    void     printPosSets(RBBINode *n \/* = NULL*\/);$/;"	p	class:RBBITableBuilder	access:public	signature:(RBBINode *n )
RBBITableBuilder::printRuleStatusTable	rbbitblb.cpp	/^void RBBITableBuilder::printRuleStatusTable() {$/;"	f	class:RBBITableBuilder	signature:()
RBBITableBuilder::printRuleStatusTable	rbbitblb.h	/^    void     printRuleStatusTable();$/;"	p	class:RBBITableBuilder	access:public	signature:()
RBBITableBuilder::printSet	rbbitblb.cpp	/^void RBBITableBuilder::printSet(UVector *s) {$/;"	f	class:RBBITableBuilder	signature:(UVector *s)
RBBITableBuilder::printSet	rbbitblb.h	/^    void     printSet(UVector *s);$/;"	p	class:RBBITableBuilder	access:public	signature:(UVector *s)
RBBITableBuilder::printStates	rbbitblb.cpp	/^void RBBITableBuilder::printStates() {$/;"	f	class:RBBITableBuilder	signature:()
RBBITableBuilder::printStates	rbbitblb.h	/^    void     printStates();$/;"	p	class:RBBITableBuilder	access:public	signature:()
RBBITableBuilder::setAdd	rbbitblb.cpp	/^void RBBITableBuilder::setAdd(UVector *dest, UVector *source) {$/;"	f	class:RBBITableBuilder	signature:(UVector *dest, UVector *source)
RBBITableBuilder::setAdd	rbbitblb.h	/^    void     setAdd(UVector *dest, UVector *source);$/;"	p	class:RBBITableBuilder	access:private	signature:(UVector *dest, UVector *source)
RBBITableBuilder::setEquals	rbbitblb.cpp	/^UBool RBBITableBuilder::setEquals(UVector *a, UVector *b) {$/;"	f	class:RBBITableBuilder	signature:(UVector *a, UVector *b)
RBBITableBuilder::setEquals	rbbitblb.h	/^    UBool    setEquals(UVector *a, UVector *b);$/;"	p	class:RBBITableBuilder	access:private	signature:(UVector *a, UVector *b)
RBBITableBuilder::sortedAdd	rbbitblb.cpp	/^void RBBITableBuilder::sortedAdd(UVector **vector, int32_t val) {$/;"	f	class:RBBITableBuilder	signature:(UVector **vector, int32_t val)
RBBITableBuilder::sortedAdd	rbbitblb.h	/^    void     sortedAdd(UVector **dest, int32_t val);$/;"	p	class:RBBITableBuilder	access:private	signature:(UVector **dest, int32_t val)
RBBITableBuilder::~RBBITableBuilder	rbbitblb.cpp	/^RBBITableBuilder::~RBBITableBuilder() {$/;"	f	class:RBBITableBuilder	signature:()
RBBITableBuilder::~RBBITableBuilder	rbbitblb.h	/^    ~RBBITableBuilder();$/;"	p	class:RBBITableBuilder	access:public	signature:()
RBBI_BOF_REQUIRED	rbbidata.h	/^    RBBI_BOF_REQUIRED = 2$/;"	e	enum:__anon26
RBBI_DEBUG_printUnicodeString	rbbinode.cpp	/^U_CFUNC void RBBI_DEBUG_printUnicodeString(const UnicodeString &s, int minWidth)$/;"	f	signature:(const UnicodeString &s, int minWidth)
RBBI_DEBUG_printUnicodeString	rbbinode.h	/^RBBI_DEBUG_printUnicodeString(const UnicodeString &s, int minWidth=0);$/;"	p	signature:(const UnicodeString &s, int minWidth=0)
RBBI_END	rbbi.cpp	/^    RBBI_END        \/\/ state machine processing is after end of user text.$/;"	e	enum:RBBIRunMode	file:
RBBI_H	unicode/rbbi.h	15;"	d
RBBI_LOOKAHEAD_HARD_BREAK	rbbidata.h	/^    RBBI_LOOKAHEAD_HARD_BREAK = 1,$/;"	e	enum:__anon26
RBBI_RUN	rbbi.cpp	/^    RBBI_RUN,       \/\/ state machine processing is in the user text$/;"	e	enum:RBBIRunMode	file:
RBBI_RuleParseAction	rbbirpt.h	/^enum RBBI_RuleParseAction {$/;"	g
RBBI_START	rbbi.cpp	/^    RBBI_START,     \/\/ state machine processing is before first char of input$/;"	e	enum:RBBIRunMode	file:
RCEBuffer	unicode/urename.h	2087;"	d
REGN	uloc_tag.c	1634;"	d	file:
REMOVE_ODD_BIT	ubidiimp.h	149;"	d
REPLACEMENT_COUNTRIES	uloc.c	/^static const char* const REPLACEMENT_COUNTRIES[] = {$/;"	v	file:
REPLACEMENT_LANGUAGES	uloc.c	/^static const char* const REPLACEMENT_LANGUAGES[]={$/;"	v	file:
REP_H	unicode/rep.h	15;"	d
REP_TEXT_CHUNK_SIZE	utext.cpp	/^enum { REP_TEXT_CHUNK_SIZE=10 };$/;"	e	enum:__anon149	file:
RESBUND_H	unicode/resbund.h	47;"	d
RESIZE_POLICY_RATIO_TABLE	uhash.c	/^static const float RESIZE_POLICY_RATIO_TABLE[6] = {$/;"	v	file:
RES_ALIAS	unicode/ures.h	/^    RES_ALIAS=URES_ALIAS,$/;"	e	enum:__anon119
RES_ARRAY	unicode/ures.h	/^    RES_ARRAY=URES_ARRAY,$/;"	e	enum:__anon119
RES_BINARY	unicode/ures.h	/^    RES_BINARY=URES_BINARY,$/;"	e	enum:__anon119
RES_BOGUS	uresdata.h	62;"	d
RES_BUFSIZE	uresimp.h	66;"	d
RES_GET_INT	uresdata.h	69;"	d
RES_GET_KEY16	uresdata.c	41;"	d	file:
RES_GET_KEY32	uresdata.c	46;"	d	file:
RES_GET_OFFSET	uresdata.h	65;"	d
RES_GET_POINTER	uresdata.h	66;"	d
RES_GET_TYPE	uresdata.h	64;"	d
RES_GET_UINT	uresdata.h	70;"	d
RES_INT	unicode/ures.h	/^    RES_INT=URES_INT,$/;"	e	enum:__anon119
RES_INT_VECTOR	unicode/ures.h	/^    RES_INT_VECTOR=URES_INT_VECTOR,$/;"	e	enum:__anon119
RES_NONE	unicode/ures.h	/^    RES_NONE=URES_NONE,$/;"	e	enum:__anon119
RES_PATH_SEPARATOR	uresimp.h	67;"	d
RES_PATH_SEPARATOR_S	uresimp.h	68;"	d
RES_RESERVED	unicode/ures.h	/^    RES_RESERVED=15, $/;"	e	enum:__anon119
RES_STRING	unicode/ures.h	/^    RES_STRING=URES_STRING,$/;"	e	enum:__anon119
RES_TABLE	unicode/ures.h	/^    RES_TABLE=URES_TABLE,$/;"	e	enum:__anon119
RETURN_IF_BAD_RANGE	ubidiimp.h	325;"	d
RETURN_IF_NOT_VALID_PARA	ubidiimp.h	315;"	d
RETURN_IF_NOT_VALID_PARA_OR_LINE	ubidiimp.h	320;"	d
RETURN_IF_NULL_OR_FAILING_ERRCODE	ubidiimp.h	313;"	d
RETURN_VOID_IF_BAD_RANGE	ubidiimp.h	343;"	d
RETURN_VOID_IF_NOT_VALID_PARA	ubidiimp.h	333;"	d
RETURN_VOID_IF_NOT_VALID_PARA_OR_LINE	ubidiimp.h	338;"	d
RETURN_VOID_IF_NULL_OR_FAILING_ERRCODE	ubidiimp.h	331;"	d
RLE	ubidiimp.h	/^    RLE=U_RIGHT_TO_LEFT_EMBEDDING,$/;"	e	enum:__anon82
RLE_CHAR	ubidiimp.h	/^    RLE_CHAR,$/;"	e	enum:__anon84
RLM	uprops.h	/^    RLM     =0x200f,$/;"	e	enum:__anon90
RLM_AFTER	ubidiimp.h	/^    RLM_AFTER=8$/;"	e	enum:__anon83
RLM_BEFORE	ubidiimp.h	/^    RLM_BEFORE=4,$/;"	e	enum:__anon83
RLM_CHAR	ubidiimp.h	/^    RLM_CHAR,$/;"	e	enum:__anon84
RLO	ubidiimp.h	/^    RLO=U_RIGHT_TO_LEFT_OVERRIDE,$/;"	e	enum:__anon82
RLO_CHAR	ubidiimp.h	/^    RLO_CHAR$/;"	e	enum:__anon84
RMN	ucnvisci.c	/^    RMN = 0x41,$/;"	e	enum:__anon14	file:
R_AL_AN_EN_ES_CS_ET_ON_BN_NSM_MASK	uts46.cpp	/^const uint32_t R_AL_AN_EN_ES_CS_ET_ON_BN_NSM_MASK=R_AL_MASK|EN_AN_MASK|ES_CS_ET_ON_BN_NSM_MASK;$/;"	v
R_AL_AN_MASK	uts46.cpp	/^const uint32_t R_AL_AN_MASK=R_AL_MASK|U_MASK(U_ARABIC_NUMBER);$/;"	v
R_AL_EN_AN_MASK	uts46.cpp	/^const uint32_t R_AL_EN_AN_MASK=R_AL_MASK|EN_AN_MASK;$/;"	v
R_AL_MASK	uts46.cpp	/^const uint32_t R_AL_MASK=U_MASK(U_RIGHT_TO_LEFT)|U_MASK(U_RIGHT_TO_LEFT_ARABIC);$/;"	v
RangeDescriptor	rbbisetb.cpp	/^RangeDescriptor::RangeDescriptor(UErrorCode &status) {$/;"	f	class:RangeDescriptor	signature:(UErrorCode &status)
RangeDescriptor	rbbisetb.cpp	/^RangeDescriptor::RangeDescriptor(const RangeDescriptor &other, UErrorCode &status) {$/;"	f	class:RangeDescriptor	signature:(const RangeDescriptor &other, UErrorCode &status)
RangeDescriptor	rbbisetb.h	/^    RangeDescriptor(UErrorCode &status);$/;"	p	class:RangeDescriptor	access:public	signature:(UErrorCode &status)
RangeDescriptor	rbbisetb.h	/^    RangeDescriptor(const RangeDescriptor &other); \/\/ forbid copying of this class$/;"	p	class:RangeDescriptor	access:private	signature:(const RangeDescriptor &other)
RangeDescriptor	rbbisetb.h	/^    RangeDescriptor(const RangeDescriptor &other, UErrorCode &status);$/;"	p	class:RangeDescriptor	access:public	signature:(const RangeDescriptor &other, UErrorCode &status)
RangeDescriptor	rbbisetb.h	/^class RangeDescriptor : public UMemory {$/;"	c	inherits:UMemory
RangeDescriptor	unicode/urename.h	2088;"	d
RangeDescriptor::RangeDescriptor	rbbisetb.cpp	/^RangeDescriptor::RangeDescriptor(UErrorCode &status) {$/;"	f	class:RangeDescriptor	signature:(UErrorCode &status)
RangeDescriptor::RangeDescriptor	rbbisetb.cpp	/^RangeDescriptor::RangeDescriptor(const RangeDescriptor &other, UErrorCode &status) {$/;"	f	class:RangeDescriptor	signature:(const RangeDescriptor &other, UErrorCode &status)
RangeDescriptor::RangeDescriptor	rbbisetb.h	/^    RangeDescriptor(UErrorCode &status);$/;"	p	class:RangeDescriptor	access:public	signature:(UErrorCode &status)
RangeDescriptor::RangeDescriptor	rbbisetb.h	/^    RangeDescriptor(const RangeDescriptor &other); \/\/ forbid copying of this class$/;"	p	class:RangeDescriptor	access:private	signature:(const RangeDescriptor &other)
RangeDescriptor::RangeDescriptor	rbbisetb.h	/^    RangeDescriptor(const RangeDescriptor &other, UErrorCode &status);$/;"	p	class:RangeDescriptor	access:public	signature:(const RangeDescriptor &other, UErrorCode &status)
RangeDescriptor::fEndChar	rbbisetb.h	/^    UChar32            fEndChar;        \/\/ End of range, unicode 32 bit value.$/;"	m	class:RangeDescriptor	access:public
RangeDescriptor::fIncludesSets	rbbisetb.h	/^    UVector           *fIncludesSets;   \/\/ vector of the the original$/;"	m	class:RangeDescriptor	access:public
RangeDescriptor::fNext	rbbisetb.h	/^    RangeDescriptor   *fNext;           \/\/ Next RangeDescriptor in the linked list.$/;"	m	class:RangeDescriptor	access:public
RangeDescriptor::fNum	rbbisetb.h	/^    int32_t            fNum;            \/\/ runtime-mapped input value for this range.$/;"	m	class:RangeDescriptor	access:public
RangeDescriptor::fStartChar	rbbisetb.h	/^    UChar32            fStartChar;      \/\/ Start of range, unicode 32 bit value.$/;"	m	class:RangeDescriptor	access:public
RangeDescriptor::operator =	rbbisetb.h	/^    RangeDescriptor &operator=(const RangeDescriptor &other); \/\/ forbid copying of this class$/;"	p	class:RangeDescriptor	access:private	signature:(const RangeDescriptor &other)
RangeDescriptor::setDictionaryFlag	rbbisetb.cpp	/^void RangeDescriptor::setDictionaryFlag() {$/;"	f	class:RangeDescriptor	signature:()
RangeDescriptor::setDictionaryFlag	rbbisetb.h	/^    void setDictionaryFlag();           \/\/ Check whether this range appears as part of$/;"	p	class:RangeDescriptor	access:public	signature:()
RangeDescriptor::split	rbbisetb.cpp	/^void RangeDescriptor::split(UChar32 where, UErrorCode &status) {$/;"	f	class:RangeDescriptor	signature:(UChar32 where, UErrorCode &status)
RangeDescriptor::split	rbbisetb.h	/^    void split(UChar32 where, UErrorCode &status);   \/\/ Spit this range in two at "where", with$/;"	p	class:RangeDescriptor	access:public	signature:(UChar32 where, UErrorCode &status)
RangeDescriptor::~RangeDescriptor	rbbisetb.cpp	/^RangeDescriptor::~RangeDescriptor() {$/;"	f	class:RangeDescriptor	signature:()
RangeDescriptor::~RangeDescriptor	rbbisetb.h	/^    ~RangeDescriptor();$/;"	p	class:RangeDescriptor	access:public	signature:()
RegexCompile	unicode/urename.h	2089;"	d
RegexMatcher	unicode/urename.h	2090;"	d
RegexPattern	unicode/urename.h	2091;"	d
RegexPatternDump	unicode/uintrnal.h	27;"	d
RegexPatternDump_4_6	unicode/uintrnal.h	138;"	d
RegexStaticSets	unicode/urename.h	2092;"	d
RegularExpression	unicode/urename.h	2093;"	d
RelativeDateFormat	unicode/urename.h	2094;"	d
RemoveTransliterator	unicode/urename.h	2095;"	d
ReorderingBuffer	normalizer2impl.h	/^    ReorderingBuffer(const Normalizer2Impl &ni, UnicodeString &dest) :$/;"	f	class:ReorderingBuffer	access:public	signature:(const Normalizer2Impl &ni, UnicodeString &dest)
ReorderingBuffer	normalizer2impl.h	/^class ReorderingBuffer : public UMemory {$/;"	c	inherits:UMemory
ReorderingBuffer	unicode/urename.h	2096;"	d
ReorderingBuffer::ReorderingBuffer	normalizer2impl.h	/^    ReorderingBuffer(const Normalizer2Impl &ni, UnicodeString &dest) :$/;"	f	class:ReorderingBuffer	access:public	signature:(const Normalizer2Impl &ni, UnicodeString &dest)
ReorderingBuffer::append	normalizer2impl.cpp	/^UBool ReorderingBuffer::append(const UChar *s, int32_t length,$/;"	f	class:ReorderingBuffer	signature:(const UChar *s, int32_t length, uint8_t leadCC, uint8_t trailCC, UErrorCode &errorCode)
ReorderingBuffer::append	normalizer2impl.h	/^    UBool append(UChar32 c, uint8_t cc, UErrorCode &errorCode) {$/;"	f	class:ReorderingBuffer	access:public	signature:(UChar32 c, uint8_t cc, UErrorCode &errorCode)
ReorderingBuffer::append	normalizer2impl.h	/^    UBool append(const UChar *s, int32_t length,$/;"	p	class:ReorderingBuffer	access:public	signature:(const UChar *s, int32_t length, uint8_t leadCC, uint8_t trailCC, UErrorCode &errorCode)
ReorderingBuffer::appendBMP	normalizer2impl.h	/^    UBool appendBMP(UChar c, uint8_t cc, UErrorCode &errorCode) {$/;"	f	class:ReorderingBuffer	access:public	signature:(UChar c, uint8_t cc, UErrorCode &errorCode)
ReorderingBuffer::appendSupplementary	normalizer2impl.cpp	/^UBool ReorderingBuffer::appendSupplementary(UChar32 c, uint8_t cc, UErrorCode &errorCode) {$/;"	f	class:ReorderingBuffer	signature:(UChar32 c, uint8_t cc, UErrorCode &errorCode)
ReorderingBuffer::appendSupplementary	normalizer2impl.h	/^    UBool appendSupplementary(UChar32 c, uint8_t cc, UErrorCode &errorCode);$/;"	p	class:ReorderingBuffer	access:private	signature:(UChar32 c, uint8_t cc, UErrorCode &errorCode)
ReorderingBuffer::appendZeroCC	normalizer2impl.cpp	/^UBool ReorderingBuffer::appendZeroCC(UChar32 c, UErrorCode &errorCode) {$/;"	f	class:ReorderingBuffer	signature:(UChar32 c, UErrorCode &errorCode)
ReorderingBuffer::appendZeroCC	normalizer2impl.cpp	/^UBool ReorderingBuffer::appendZeroCC(const UChar *s, const UChar *sLimit, UErrorCode &errorCode) {$/;"	f	class:ReorderingBuffer	signature:(const UChar *s, const UChar *sLimit, UErrorCode &errorCode)
ReorderingBuffer::appendZeroCC	normalizer2impl.h	/^    UBool appendZeroCC(UChar32 c, UErrorCode &errorCode);$/;"	p	class:ReorderingBuffer	access:public	signature:(UChar32 c, UErrorCode &errorCode)
ReorderingBuffer::appendZeroCC	normalizer2impl.h	/^    UBool appendZeroCC(const UChar *s, const UChar *sLimit, UErrorCode &errorCode);$/;"	p	class:ReorderingBuffer	access:public	signature:(const UChar *s, const UChar *sLimit, UErrorCode &errorCode)
ReorderingBuffer::codePointLimit	normalizer2impl.h	/^    UChar *codePointStart, *codePointLimit;$/;"	m	class:ReorderingBuffer	access:private
ReorderingBuffer::codePointStart	normalizer2impl.h	/^    UChar *codePointStart, *codePointLimit;$/;"	m	class:ReorderingBuffer	access:private
ReorderingBuffer::equals	normalizer2impl.cpp	/^UBool ReorderingBuffer::equals(const UChar *otherStart, const UChar *otherLimit) const {$/;"	f	class:ReorderingBuffer	signature:(const UChar *otherStart, const UChar *otherLimit) const
ReorderingBuffer::equals	normalizer2impl.h	/^    UBool equals(const UChar *start, const UChar *limit) const;$/;"	p	class:ReorderingBuffer	access:public	signature:(const UChar *start, const UChar *limit) const
ReorderingBuffer::getLastCC	normalizer2impl.h	/^    uint8_t getLastCC() const { return lastCC; }$/;"	f	class:ReorderingBuffer	access:public	signature:() const
ReorderingBuffer::getLimit	normalizer2impl.h	/^    UChar *getLimit() { return limit; }$/;"	f	class:ReorderingBuffer	access:public	signature:()
ReorderingBuffer::getStart	normalizer2impl.h	/^    UChar *getStart() { return start; }$/;"	f	class:ReorderingBuffer	access:public	signature:()
ReorderingBuffer::impl	normalizer2impl.h	/^    const Normalizer2Impl &impl;$/;"	m	class:ReorderingBuffer	access:private
ReorderingBuffer::init	normalizer2impl.cpp	/^UBool ReorderingBuffer::init(int32_t destCapacity, UErrorCode &errorCode) {$/;"	f	class:ReorderingBuffer	signature:(int32_t destCapacity, UErrorCode &errorCode)
ReorderingBuffer::init	normalizer2impl.h	/^    UBool init(int32_t destCapacity, UErrorCode &errorCode);$/;"	p	class:ReorderingBuffer	access:public	signature:(int32_t destCapacity, UErrorCode &errorCode)
ReorderingBuffer::insert	normalizer2impl.cpp	/^void ReorderingBuffer::insert(UChar32 c, uint8_t cc) {$/;"	f	class:ReorderingBuffer	signature:(UChar32 c, uint8_t cc)
ReorderingBuffer::insert	normalizer2impl.h	/^    void insert(UChar32 c, uint8_t cc);$/;"	p	class:ReorderingBuffer	access:private	signature:(UChar32 c, uint8_t cc)
ReorderingBuffer::isEmpty	normalizer2impl.h	/^    UBool isEmpty() const { return start==limit; }$/;"	f	class:ReorderingBuffer	access:public	signature:() const
ReorderingBuffer::lastCC	normalizer2impl.h	/^    uint8_t lastCC;$/;"	m	class:ReorderingBuffer	access:private
ReorderingBuffer::length	normalizer2impl.h	/^    int32_t length() const { return (int32_t)(limit-start); }$/;"	f	class:ReorderingBuffer	access:public	signature:() const
ReorderingBuffer::limit	normalizer2impl.h	/^    UChar *start, *reorderStart, *limit;$/;"	m	class:ReorderingBuffer	access:private
ReorderingBuffer::previousCC	normalizer2impl.cpp	/^uint8_t ReorderingBuffer::previousCC() {$/;"	f	class:ReorderingBuffer	signature:()
ReorderingBuffer::previousCC	normalizer2impl.h	/^    uint8_t previousCC();  \/\/ Returns 0 if there is no previous character.$/;"	p	class:ReorderingBuffer	access:private	signature:()
ReorderingBuffer::remainingCapacity	normalizer2impl.h	/^    int32_t remainingCapacity;$/;"	m	class:ReorderingBuffer	access:private
ReorderingBuffer::remove	normalizer2impl.cpp	/^void ReorderingBuffer::remove() {$/;"	f	class:ReorderingBuffer	signature:()
ReorderingBuffer::remove	normalizer2impl.h	/^    void remove();$/;"	p	class:ReorderingBuffer	access:public	signature:()
ReorderingBuffer::removeSuffix	normalizer2impl.cpp	/^void ReorderingBuffer::removeSuffix(int32_t suffixLength) {$/;"	f	class:ReorderingBuffer	signature:(int32_t suffixLength)
ReorderingBuffer::removeSuffix	normalizer2impl.h	/^    void removeSuffix(int32_t suffixLength);$/;"	p	class:ReorderingBuffer	access:public	signature:(int32_t suffixLength)
ReorderingBuffer::reorderStart	normalizer2impl.h	/^    UChar *start, *reorderStart, *limit;$/;"	m	class:ReorderingBuffer	access:private
ReorderingBuffer::resize	normalizer2impl.cpp	/^UBool ReorderingBuffer::resize(int32_t appendLength, UErrorCode &errorCode) {$/;"	f	class:ReorderingBuffer	signature:(int32_t appendLength, UErrorCode &errorCode)
ReorderingBuffer::resize	normalizer2impl.h	/^    UBool resize(int32_t appendLength, UErrorCode &errorCode);$/;"	p	class:ReorderingBuffer	access:private	signature:(int32_t appendLength, UErrorCode &errorCode)
ReorderingBuffer::setIterator	normalizer2impl.h	/^    void setIterator() { codePointStart=limit; }$/;"	f	class:ReorderingBuffer	access:private	signature:()
ReorderingBuffer::setLastChar	normalizer2impl.h	/^    void setLastChar(UChar c) {$/;"	f	class:ReorderingBuffer	access:public	signature:(UChar c)
ReorderingBuffer::setReorderingLimit	normalizer2impl.h	/^    void setReorderingLimit(UChar *newLimit) {$/;"	f	class:ReorderingBuffer	access:public	signature:(UChar *newLimit)
ReorderingBuffer::skipPrevious	normalizer2impl.cpp	/^void ReorderingBuffer::skipPrevious() {$/;"	f	class:ReorderingBuffer	signature:()
ReorderingBuffer::skipPrevious	normalizer2impl.h	/^    void skipPrevious();  \/\/ Requires start<codePointStart.$/;"	p	class:ReorderingBuffer	access:private	signature:()
ReorderingBuffer::start	normalizer2impl.h	/^    UChar *start, *reorderStart, *limit;$/;"	m	class:ReorderingBuffer	access:private
ReorderingBuffer::str	normalizer2impl.h	/^    UnicodeString &str;$/;"	m	class:ReorderingBuffer	access:private
ReorderingBuffer::writeCodePoint	normalizer2impl.h	/^    static void writeCodePoint(UChar *p, UChar32 c) {$/;"	f	class:ReorderingBuffer	access:private	signature:(UChar *p, UChar32 c)
ReorderingBuffer::~ReorderingBuffer	normalizer2impl.h	/^    ~ReorderingBuffer() {$/;"	f	class:ReorderingBuffer	access:public	signature:()
ReplExtra	utext.cpp	/^struct ReplExtra {$/;"	s	file:
ReplExtra::s	utext.cpp	/^    UChar s[REP_TEXT_CHUNK_SIZE+1];$/;"	m	struct:ReplExtra	file:	access:public
Replaceable	unicode/rep.h	/^    Replaceable();$/;"	p	class:Replaceable	access:protected	signature:()
Replaceable	unicode/rep.h	/^class U_COMMON_API Replaceable : public UObject {$/;"	c	inherits:UObject
Replaceable	unicode/uiter.h	/^    class Replaceable;$/;"	x
Replaceable	unicode/unimatch.h	/^class Replaceable;$/;"	x
Replaceable	unicode/urename.h	2097;"	d
Replaceable	unistr.cpp	/^Replaceable::Replaceable() {}$/;"	f	class:Replaceable	signature:()
Replaceable::Replaceable	unicode/rep.h	/^    Replaceable();$/;"	p	class:Replaceable	access:protected	signature:()
Replaceable::Replaceable	unistr.cpp	/^Replaceable::Replaceable() {}$/;"	f	class:Replaceable	signature:()
Replaceable::char32At	unicode/rep.h	/^    inline UChar32 char32At(int32_t offset) const;$/;"	p	class:Replaceable	access:public	signature:(int32_t offset) const
Replaceable::char32At	unicode/rep.h	/^Replaceable::char32At(int32_t offset) const {$/;"	f	class:Replaceable	signature:(int32_t offset) const
Replaceable::charAt	unicode/rep.h	/^    inline UChar charAt(int32_t offset) const;$/;"	p	class:Replaceable	access:public	signature:(int32_t offset) const
Replaceable::charAt	unicode/rep.h	/^Replaceable::charAt(int32_t offset) const {$/;"	f	class:Replaceable	signature:(int32_t offset) const
Replaceable::clone	unicode/rep.h	/^    virtual Replaceable *clone() const;$/;"	p	class:Replaceable	access:public	signature:() const
Replaceable::clone	unistr.cpp	/^Replaceable::clone() const {$/;"	f	class:Replaceable	signature:() const
Replaceable::copy	unicode/rep.h	/^    virtual void copy(int32_t start, int32_t limit, int32_t dest) = 0;$/;"	p	class:Replaceable	access:public	signature:(int32_t start, int32_t limit, int32_t dest)
Replaceable::extractBetween	unicode/rep.h	/^    virtual void extractBetween(int32_t start,$/;"	p	class:Replaceable	access:public	signature:(int32_t start, int32_t limit, UnicodeString& target) const
Replaceable::getChar32At	unicode/rep.h	/^    virtual UChar32 getChar32At(int32_t offset) const = 0;$/;"	p	class:Replaceable	access:protected	signature:(int32_t offset) const
Replaceable::getCharAt	unicode/rep.h	/^    virtual UChar getCharAt(int32_t offset) const = 0;$/;"	p	class:Replaceable	access:protected	signature:(int32_t offset) const
Replaceable::getLength	unicode/rep.h	/^    virtual int32_t getLength() const = 0;$/;"	p	class:Replaceable	access:protected	signature:() const
Replaceable::handleReplaceBetween	unicode/rep.h	/^    virtual void handleReplaceBetween(int32_t start,$/;"	p	class:Replaceable	access:public	signature:(int32_t start, int32_t limit, const UnicodeString& text)
Replaceable::hasMetaData	unicode/rep.h	/^    virtual UBool hasMetaData() const;$/;"	p	class:Replaceable	access:public	signature:() const
Replaceable::hasMetaData	unistr.cpp	/^UBool Replaceable::hasMetaData() const {$/;"	f	class:Replaceable	signature:() const
Replaceable::length	unicode/rep.h	/^    inline int32_t length() const;$/;"	p	class:Replaceable	access:public	signature:() const
Replaceable::length	unicode/rep.h	/^Replaceable::length() const {$/;"	f	class:Replaceable	signature:() const
Replaceable::~Replaceable	unicode/rep.h	/^    virtual ~Replaceable();$/;"	p	class:Replaceable	access:public	signature:()
Replaceable::~Replaceable	unistr.cpp	/^Replaceable::~Replaceable() {}$/;"	f	class:Replaceable	signature:()
ReplaceableGlue	unicode/urename.h	2098;"	d
Reset	bytestream.cpp	/^CheckedArrayByteSink& CheckedArrayByteSink::Reset() {$/;"	f	class:CheckedArrayByteSink	signature:()
Reset	unicode/bytestream.h	/^  virtual CheckedArrayByteSink& Reset();$/;"	p	class:CheckedArrayByteSink	access:public	signature:()
Resource	uresdata.h	/^typedef uint32_t Resource;$/;"	t
ResourceBundle	resbund.cpp	/^ResourceBundle::ResourceBundle(UErrorCode &err)$/;"	f	class:ResourceBundle	signature:(UErrorCode &err)
ResourceBundle	resbund.cpp	/^ResourceBundle::ResourceBundle(UResourceBundle *res, UErrorCode& err)$/;"	f	class:ResourceBundle	signature:(UResourceBundle *res, UErrorCode& err)
ResourceBundle	resbund.cpp	/^ResourceBundle::ResourceBundle(const ResourceBundle &other)$/;"	f	class:ResourceBundle	signature:(const ResourceBundle &other)
ResourceBundle	resbund.cpp	/^ResourceBundle::ResourceBundle(const char* path, const Locale& locale, UErrorCode& err) $/;"	f	class:ResourceBundle	signature:(const char* path, const Locale& locale, UErrorCode& err)
ResourceBundle	resbund_cnv.cpp	/^ResourceBundle::ResourceBundle( const UnicodeString&    path,$/;"	f	class:ResourceBundle	signature:( const UnicodeString& path, UErrorCode& error)
ResourceBundle	resbund_cnv.cpp	/^ResourceBundle::ResourceBundle( const UnicodeString&    path,$/;"	f	class:ResourceBundle	signature:( const UnicodeString& path, const Locale& locale, UErrorCode& error)
ResourceBundle	unicode/resbund.h	/^    ResourceBundle(); \/\/ default constructor not implemented$/;"	p	class:ResourceBundle	access:private	signature:()
ResourceBundle	unicode/resbund.h	/^    ResourceBundle(UErrorCode &err);$/;"	p	class:ResourceBundle	access:public	signature:(UErrorCode &err)
ResourceBundle	unicode/resbund.h	/^    ResourceBundle(UResourceBundle *res,$/;"	p	class:ResourceBundle	access:public	signature:(UResourceBundle *res, UErrorCode &status)
ResourceBundle	unicode/resbund.h	/^    ResourceBundle(const ResourceBundle &original);$/;"	p	class:ResourceBundle	access:public	signature:(const ResourceBundle &original)
ResourceBundle	unicode/resbund.h	/^    ResourceBundle(const UnicodeString&    packageName,$/;"	p	class:ResourceBundle	access:public	signature:(const UnicodeString& packageName, UErrorCode& err)
ResourceBundle	unicode/resbund.h	/^    ResourceBundle(const UnicodeString&    packageName,$/;"	p	class:ResourceBundle	access:public	signature:(const UnicodeString& packageName, const Locale& locale, UErrorCode& err)
ResourceBundle	unicode/resbund.h	/^    ResourceBundle(const char* packageName,$/;"	p	class:ResourceBundle	access:public	signature:(const char* packageName, const Locale& locale, UErrorCode& err)
ResourceBundle	unicode/resbund.h	/^class U_COMMON_API ResourceBundle : public UObject {$/;"	c	inherits:UObject
ResourceBundle	unicode/urename.h	2099;"	d
ResourceBundle::ResourceBundle	resbund.cpp	/^ResourceBundle::ResourceBundle(UErrorCode &err)$/;"	f	class:ResourceBundle	signature:(UErrorCode &err)
ResourceBundle::ResourceBundle	resbund.cpp	/^ResourceBundle::ResourceBundle(UResourceBundle *res, UErrorCode& err)$/;"	f	class:ResourceBundle	signature:(UResourceBundle *res, UErrorCode& err)
ResourceBundle::ResourceBundle	resbund.cpp	/^ResourceBundle::ResourceBundle(const ResourceBundle &other)$/;"	f	class:ResourceBundle	signature:(const ResourceBundle &other)
ResourceBundle::ResourceBundle	resbund.cpp	/^ResourceBundle::ResourceBundle(const char* path, const Locale& locale, UErrorCode& err) $/;"	f	class:ResourceBundle	signature:(const char* path, const Locale& locale, UErrorCode& err)
ResourceBundle::ResourceBundle	resbund_cnv.cpp	/^ResourceBundle::ResourceBundle( const UnicodeString&    path,$/;"	f	class:ResourceBundle	signature:( const UnicodeString& path, UErrorCode& error)
ResourceBundle::ResourceBundle	resbund_cnv.cpp	/^ResourceBundle::ResourceBundle( const UnicodeString&    path,$/;"	f	class:ResourceBundle	signature:( const UnicodeString& path, const Locale& locale, UErrorCode& error)
ResourceBundle::ResourceBundle	unicode/resbund.h	/^    ResourceBundle(); \/\/ default constructor not implemented$/;"	p	class:ResourceBundle	access:private	signature:()
ResourceBundle::ResourceBundle	unicode/resbund.h	/^    ResourceBundle(UErrorCode &err);$/;"	p	class:ResourceBundle	access:public	signature:(UErrorCode &err)
ResourceBundle::ResourceBundle	unicode/resbund.h	/^    ResourceBundle(UResourceBundle *res,$/;"	p	class:ResourceBundle	access:public	signature:(UResourceBundle *res, UErrorCode &status)
ResourceBundle::ResourceBundle	unicode/resbund.h	/^    ResourceBundle(const ResourceBundle &original);$/;"	p	class:ResourceBundle	access:public	signature:(const ResourceBundle &original)
ResourceBundle::ResourceBundle	unicode/resbund.h	/^    ResourceBundle(const UnicodeString&    packageName,$/;"	p	class:ResourceBundle	access:public	signature:(const UnicodeString& packageName, UErrorCode& err)
ResourceBundle::ResourceBundle	unicode/resbund.h	/^    ResourceBundle(const UnicodeString&    packageName,$/;"	p	class:ResourceBundle	access:public	signature:(const UnicodeString& packageName, const Locale& locale, UErrorCode& err)
ResourceBundle::ResourceBundle	unicode/resbund.h	/^    ResourceBundle(const char* packageName,$/;"	p	class:ResourceBundle	access:public	signature:(const char* packageName, const Locale& locale, UErrorCode& err)
ResourceBundle::clone	resbund.cpp	/^ResourceBundle::clone() const {$/;"	f	class:ResourceBundle	signature:() const
ResourceBundle::clone	unicode/resbund.h	/^    ResourceBundle *clone() const;$/;"	p	class:ResourceBundle	access:public	signature:() const
ResourceBundle::constructForLocale	resbund_cnv.cpp	/^ResourceBundle::constructForLocale(const UnicodeString& path,$/;"	f	class:ResourceBundle	signature:(const UnicodeString& path, const Locale& locale, UErrorCode& error)
ResourceBundle::constructForLocale	unicode/resbund.h	/^    void constructForLocale(const UnicodeString& path, const Locale& locale, UErrorCode& error);$/;"	p	class:ResourceBundle	access:private	signature:(const UnicodeString& path, const Locale& locale, UErrorCode& error)
ResourceBundle::fLocale	unicode/resbund.h	/^    Locale *fLocale;$/;"	m	class:ResourceBundle	access:private
ResourceBundle::fResource	unicode/resbund.h	/^    UResourceBundle *fResource;$/;"	m	class:ResourceBundle	access:private
ResourceBundle::get	resbund.cpp	/^ResourceBundle ResourceBundle::get(const char* key, UErrorCode& status) const {$/;"	f	class:ResourceBundle	signature:(const char* key, UErrorCode& status) const
ResourceBundle::get	resbund.cpp	/^ResourceBundle ResourceBundle::get(int32_t indexR, UErrorCode& status) const {$/;"	f	class:ResourceBundle	signature:(int32_t indexR, UErrorCode& status) const
ResourceBundle::get	unicode/resbund.h	/^      get(const char* key,$/;"	p	class:ResourceBundle	access:public	signature:(const char* key, UErrorCode& status) const
ResourceBundle::get	unicode/resbund.h	/^      get(int32_t index,$/;"	p	class:ResourceBundle	access:public	signature:(int32_t index, UErrorCode& status) const
ResourceBundle::getBinary	resbund.cpp	/^const uint8_t *ResourceBundle::getBinary(int32_t& len, UErrorCode& status) const {$/;"	f	class:ResourceBundle	signature:(int32_t& len, UErrorCode& status) const
ResourceBundle::getBinary	unicode/resbund.h	/^      getBinary(int32_t& len, UErrorCode& status) const;$/;"	p	class:ResourceBundle	access:public	signature:(int32_t& len, UErrorCode& status) const
ResourceBundle::getDynamicClassID	unicode/resbund.h	/^    virtual UClassID getDynamicClassID() const;$/;"	p	class:ResourceBundle	access:public	signature:() const
ResourceBundle::getInt	resbund.cpp	/^int32_t ResourceBundle::getInt(UErrorCode& status) const {$/;"	f	class:ResourceBundle	signature:(UErrorCode& status) const
ResourceBundle::getInt	unicode/resbund.h	/^      getInt(UErrorCode& status) const;$/;"	p	class:ResourceBundle	access:public	signature:(UErrorCode& status) const
ResourceBundle::getIntVector	resbund.cpp	/^const int32_t *ResourceBundle::getIntVector(int32_t& len, UErrorCode& status) const {$/;"	f	class:ResourceBundle	signature:(int32_t& len, UErrorCode& status) const
ResourceBundle::getIntVector	unicode/resbund.h	/^      getIntVector(int32_t& len, UErrorCode& status) const;$/;"	p	class:ResourceBundle	access:public	signature:(int32_t& len, UErrorCode& status) const
ResourceBundle::getKey	resbund.cpp	/^const char *ResourceBundle::getKey(void) const {$/;"	f	class:ResourceBundle	signature:(void) const
ResourceBundle::getKey	unicode/resbund.h	/^      getKey(void) const;$/;"	p	class:ResourceBundle	access:public	signature:(void) const
ResourceBundle::getLocale	resbund.cpp	/^const Locale &ResourceBundle::getLocale(void) const$/;"	f	class:ResourceBundle	signature:(void) const
ResourceBundle::getLocale	resbund.cpp	/^const Locale ResourceBundle::getLocale(ULocDataLocaleType type, UErrorCode &status) const$/;"	f	class:ResourceBundle	signature:(ULocDataLocaleType type, UErrorCode &status) const
ResourceBundle::getLocale	unicode/resbund.h	/^      getLocale(ULocDataLocaleType type, UErrorCode &status) const;$/;"	p	class:ResourceBundle	access:public	signature:(ULocDataLocaleType type, UErrorCode &status) const
ResourceBundle::getLocale	unicode/resbund.h	/^      getLocale(void) const;$/;"	p	class:ResourceBundle	access:public	signature:(void) const
ResourceBundle::getName	resbund.cpp	/^const char *ResourceBundle::getName(void) const {$/;"	f	class:ResourceBundle	signature:(void) const
ResourceBundle::getName	unicode/resbund.h	/^      getName(void) const;$/;"	p	class:ResourceBundle	access:public	signature:(void) const
ResourceBundle::getNext	resbund.cpp	/^ResourceBundle ResourceBundle::getNext(UErrorCode& status) {$/;"	f	class:ResourceBundle	signature:(UErrorCode& status)
ResourceBundle::getNext	unicode/resbund.h	/^      getNext(UErrorCode& status);$/;"	p	class:ResourceBundle	access:public	signature:(UErrorCode& status)
ResourceBundle::getNextString	resbund.cpp	/^UnicodeString ResourceBundle::getNextString(UErrorCode& status) {$/;"	f	class:ResourceBundle	signature:(UErrorCode& status)
ResourceBundle::getNextString	resbund.cpp	/^UnicodeString ResourceBundle::getNextString(const char ** key, UErrorCode& status) {$/;"	f	class:ResourceBundle	signature:(const char ** key, UErrorCode& status)
ResourceBundle::getNextString	unicode/resbund.h	/^      getNextString(UErrorCode& status);$/;"	p	class:ResourceBundle	access:public	signature:(UErrorCode& status)
ResourceBundle::getNextString	unicode/resbund.h	/^      getNextString(const char ** key,$/;"	p	class:ResourceBundle	access:public	signature:(const char ** key, UErrorCode& status)
ResourceBundle::getSize	resbund.cpp	/^int32_t ResourceBundle::getSize(void) const {$/;"	f	class:ResourceBundle	signature:(void) const
ResourceBundle::getSize	unicode/resbund.h	/^      getSize(void) const;$/;"	p	class:ResourceBundle	access:public	signature:(void) const
ResourceBundle::getStaticClassID	unicode/resbund.h	/^    static UClassID U_EXPORT2 getStaticClassID();$/;"	p	class:ResourceBundle	access:public	signature:()
ResourceBundle::getString	resbund.cpp	/^UnicodeString ResourceBundle::getString(UErrorCode& status) const {$/;"	f	class:ResourceBundle	signature:(UErrorCode& status) const
ResourceBundle::getString	unicode/resbund.h	/^      getString(UErrorCode& status) const;$/;"	p	class:ResourceBundle	access:public	signature:(UErrorCode& status) const
ResourceBundle::getStringEx	resbund.cpp	/^UnicodeString ResourceBundle::getStringEx(const char* key, UErrorCode& status) const {$/;"	f	class:ResourceBundle	signature:(const char* key, UErrorCode& status) const
ResourceBundle::getStringEx	resbund.cpp	/^UnicodeString ResourceBundle::getStringEx(int32_t indexS, UErrorCode& status) const {$/;"	f	class:ResourceBundle	signature:(int32_t indexS, UErrorCode& status) const
ResourceBundle::getStringEx	unicode/resbund.h	/^      getStringEx(const char* key,$/;"	p	class:ResourceBundle	access:public	signature:(const char* key, UErrorCode& status) const
ResourceBundle::getStringEx	unicode/resbund.h	/^      getStringEx(int32_t index,$/;"	p	class:ResourceBundle	access:public	signature:(int32_t index, UErrorCode& status) const
ResourceBundle::getType	resbund.cpp	/^UResType ResourceBundle::getType(void) const {$/;"	f	class:ResourceBundle	signature:(void) const
ResourceBundle::getType	unicode/resbund.h	/^      getType(void) const;$/;"	p	class:ResourceBundle	access:public	signature:(void) const
ResourceBundle::getUInt	resbund.cpp	/^uint32_t ResourceBundle::getUInt(UErrorCode& status) const {$/;"	f	class:ResourceBundle	signature:(UErrorCode& status) const
ResourceBundle::getUInt	unicode/resbund.h	/^      getUInt(UErrorCode& status) const;$/;"	p	class:ResourceBundle	access:public	signature:(UErrorCode& status) const
ResourceBundle::getVersion	resbund.cpp	/^void ResourceBundle::getVersion(UVersionInfo versionInfo) const {$/;"	f	class:ResourceBundle	signature:(UVersionInfo versionInfo) const
ResourceBundle::getVersion	unicode/resbund.h	/^      getVersion(UVersionInfo versionInfo) const;$/;"	p	class:ResourceBundle	access:public	signature:(UVersionInfo versionInfo) const
ResourceBundle::getVersionNumber	resbund.cpp	/^ResourceBundle::getVersionNumber()  const$/;"	f	class:ResourceBundle	signature:() const
ResourceBundle::getVersionNumber	unicode/resbund.h	/^      getVersionNumber(void) const;$/;"	p	class:ResourceBundle	access:public	signature:(void) const
ResourceBundle::getWithFallback	resbund.cpp	/^ResourceBundle ResourceBundle::getWithFallback(const char* key, UErrorCode& status){$/;"	f	class:ResourceBundle	signature:(const char* key, UErrorCode& status)
ResourceBundle::getWithFallback	unicode/resbund.h	/^        getWithFallback(const char* key, UErrorCode& status);$/;"	p	class:ResourceBundle	access:public	signature:(const char* key, UErrorCode& status)
ResourceBundle::hasNext	resbund.cpp	/^UBool ResourceBundle::hasNext(void) const {$/;"	f	class:ResourceBundle	signature:(void) const
ResourceBundle::hasNext	unicode/resbund.h	/^      hasNext(void) const;$/;"	p	class:ResourceBundle	access:public	signature:(void) const
ResourceBundle::operator =	resbund.cpp	/^ResourceBundle& ResourceBundle::operator=(const ResourceBundle& other)$/;"	f	class:ResourceBundle	signature:(const ResourceBundle& other)
ResourceBundle::operator =	unicode/resbund.h	/^      operator=(const ResourceBundle& other);$/;"	p	class:ResourceBundle	access:public	signature:(const ResourceBundle& other)
ResourceBundle::resetIterator	resbund.cpp	/^void ResourceBundle::resetIterator(void) {$/;"	f	class:ResourceBundle	signature:(void)
ResourceBundle::resetIterator	unicode/resbund.h	/^      resetIterator(void);$/;"	p	class:ResourceBundle	access:public	signature:(void)
ResourceBundle::~ResourceBundle	resbund.cpp	/^ResourceBundle::~ResourceBundle()$/;"	f	class:ResourceBundle	signature:()
ResourceBundle::~ResourceBundle	unicode/resbund.h	/^    virtual ~ResourceBundle();$/;"	p	class:ResourceBundle	access:public	signature:()
ResourceData	uresdata.h	/^} ResourceData;$/;"	t	typeref:struct:__anon12
RiseSetCoordFunc	unicode/urename.h	2100;"	d
Row	uresdata.c	/^typedef struct Row {$/;"	s	file:
Row	uresdata.c	/^} Row;$/;"	t	typeref:struct:Row	file:
Row::keyIndex	uresdata.c	/^    int32_t keyIndex, sortIndex;$/;"	m	struct:Row	file:	access:public
Row::sortIndex	uresdata.c	/^    int32_t keyIndex, sortIndex;$/;"	m	struct:Row	file:	access:public
RuleBasedBreakIterator	rbbi.cpp	/^RuleBasedBreakIterator::RuleBasedBreakIterator( const UnicodeString  &rules,$/;"	f	class:RuleBasedBreakIterator	signature:( const UnicodeString &rules, UParseError &parseError, UErrorCode &status)
RuleBasedBreakIterator	rbbi.cpp	/^RuleBasedBreakIterator::RuleBasedBreakIterator() {$/;"	f	class:RuleBasedBreakIterator	signature:()
RuleBasedBreakIterator	rbbi.cpp	/^RuleBasedBreakIterator::RuleBasedBreakIterator(RBBIDataHeader* data, UErrorCode &status)$/;"	f	class:RuleBasedBreakIterator	signature:(RBBIDataHeader* data, UErrorCode &status)
RuleBasedBreakIterator	rbbi.cpp	/^RuleBasedBreakIterator::RuleBasedBreakIterator(UDataMemory* udm, UErrorCode &status)$/;"	f	class:RuleBasedBreakIterator	signature:(UDataMemory* udm, UErrorCode &status)
RuleBasedBreakIterator	rbbi.cpp	/^RuleBasedBreakIterator::RuleBasedBreakIterator(const RBBIDataHeader* data, enum EDontAdopt, UErrorCode &status)$/;"	f	class:RuleBasedBreakIterator	signature:(const RBBIDataHeader* data, enum EDontAdopt, UErrorCode &status)
RuleBasedBreakIterator	rbbi.cpp	/^RuleBasedBreakIterator::RuleBasedBreakIterator(const RuleBasedBreakIterator& other)$/;"	f	class:RuleBasedBreakIterator	signature:(const RuleBasedBreakIterator& other)
RuleBasedBreakIterator	unicode/rbbi.h	/^    RuleBasedBreakIterator( const UnicodeString    &rules,$/;"	p	class:RuleBasedBreakIterator	access:public	signature:( const UnicodeString &rules, UParseError &parseError, UErrorCode &status)
RuleBasedBreakIterator	unicode/rbbi.h	/^    RuleBasedBreakIterator();$/;"	p	class:RuleBasedBreakIterator	access:public	signature:()
RuleBasedBreakIterator	unicode/rbbi.h	/^    RuleBasedBreakIterator(RBBIDataHeader* data, UErrorCode &status);$/;"	p	class:RuleBasedBreakIterator	access:protected	signature:(RBBIDataHeader* data, UErrorCode &status)
RuleBasedBreakIterator	unicode/rbbi.h	/^    RuleBasedBreakIterator(UDataMemory* image, UErrorCode &status);$/;"	p	class:RuleBasedBreakIterator	access:public	signature:(UDataMemory* image, UErrorCode &status)
RuleBasedBreakIterator	unicode/rbbi.h	/^    RuleBasedBreakIterator(const RBBIDataHeader* data, enum EDontAdopt dontAdopt, UErrorCode &status);$/;"	p	class:RuleBasedBreakIterator	access:protected	signature:(const RBBIDataHeader* data, enum EDontAdopt dontAdopt, UErrorCode &status)
RuleBasedBreakIterator	unicode/rbbi.h	/^    RuleBasedBreakIterator(const RuleBasedBreakIterator& that);$/;"	p	class:RuleBasedBreakIterator	access:public	signature:(const RuleBasedBreakIterator& that)
RuleBasedBreakIterator	unicode/rbbi.h	/^class U_COMMON_API RuleBasedBreakIterator : public BreakIterator {$/;"	c	inherits:BreakIterator
RuleBasedBreakIterator	unicode/urename.h	2101;"	d
RuleBasedBreakIterator::BreakIterator	unicode/rbbi.h	/^    friend class BreakIterator;$/;"	x
RuleBasedBreakIterator::EDontAdopt	unicode/rbbi.h	/^    enum EDontAdopt {$/;"	g	class:RuleBasedBreakIterator	access:protected
RuleBasedBreakIterator::RBBIRuleBuilder	unicode/rbbi.h	/^    friend class RBBIRuleBuilder;$/;"	x
RuleBasedBreakIterator::RuleBasedBreakIterator	rbbi.cpp	/^RuleBasedBreakIterator::RuleBasedBreakIterator( const UnicodeString  &rules,$/;"	f	class:RuleBasedBreakIterator	signature:( const UnicodeString &rules, UParseError &parseError, UErrorCode &status)
RuleBasedBreakIterator::RuleBasedBreakIterator	rbbi.cpp	/^RuleBasedBreakIterator::RuleBasedBreakIterator() {$/;"	f	class:RuleBasedBreakIterator	signature:()
RuleBasedBreakIterator::RuleBasedBreakIterator	rbbi.cpp	/^RuleBasedBreakIterator::RuleBasedBreakIterator(RBBIDataHeader* data, UErrorCode &status)$/;"	f	class:RuleBasedBreakIterator	signature:(RBBIDataHeader* data, UErrorCode &status)
RuleBasedBreakIterator::RuleBasedBreakIterator	rbbi.cpp	/^RuleBasedBreakIterator::RuleBasedBreakIterator(UDataMemory* udm, UErrorCode &status)$/;"	f	class:RuleBasedBreakIterator	signature:(UDataMemory* udm, UErrorCode &status)
RuleBasedBreakIterator::RuleBasedBreakIterator	rbbi.cpp	/^RuleBasedBreakIterator::RuleBasedBreakIterator(const RBBIDataHeader* data, enum EDontAdopt, UErrorCode &status)$/;"	f	class:RuleBasedBreakIterator	signature:(const RBBIDataHeader* data, enum EDontAdopt, UErrorCode &status)
RuleBasedBreakIterator::RuleBasedBreakIterator	rbbi.cpp	/^RuleBasedBreakIterator::RuleBasedBreakIterator(const RuleBasedBreakIterator& other)$/;"	f	class:RuleBasedBreakIterator	signature:(const RuleBasedBreakIterator& other)
RuleBasedBreakIterator::RuleBasedBreakIterator	unicode/rbbi.h	/^    RuleBasedBreakIterator( const UnicodeString    &rules,$/;"	p	class:RuleBasedBreakIterator	access:public	signature:( const UnicodeString &rules, UParseError &parseError, UErrorCode &status)
RuleBasedBreakIterator::RuleBasedBreakIterator	unicode/rbbi.h	/^    RuleBasedBreakIterator();$/;"	p	class:RuleBasedBreakIterator	access:public	signature:()
RuleBasedBreakIterator::RuleBasedBreakIterator	unicode/rbbi.h	/^    RuleBasedBreakIterator(RBBIDataHeader* data, UErrorCode &status);$/;"	p	class:RuleBasedBreakIterator	access:protected	signature:(RBBIDataHeader* data, UErrorCode &status)
RuleBasedBreakIterator::RuleBasedBreakIterator	unicode/rbbi.h	/^    RuleBasedBreakIterator(UDataMemory* image, UErrorCode &status);$/;"	p	class:RuleBasedBreakIterator	access:public	signature:(UDataMemory* image, UErrorCode &status)
RuleBasedBreakIterator::RuleBasedBreakIterator	unicode/rbbi.h	/^    RuleBasedBreakIterator(const RBBIDataHeader* data, enum EDontAdopt dontAdopt, UErrorCode &status);$/;"	p	class:RuleBasedBreakIterator	access:protected	signature:(const RBBIDataHeader* data, enum EDontAdopt dontAdopt, UErrorCode &status)
RuleBasedBreakIterator::RuleBasedBreakIterator	unicode/rbbi.h	/^    RuleBasedBreakIterator(const RuleBasedBreakIterator& that);$/;"	p	class:RuleBasedBreakIterator	access:public	signature:(const RuleBasedBreakIterator& that)
RuleBasedBreakIterator::adoptText	rbbi.cpp	/^RuleBasedBreakIterator::adoptText(CharacterIterator* newText) {$/;"	f	class:RuleBasedBreakIterator	signature:(CharacterIterator* newText)
RuleBasedBreakIterator::adoptText	unicode/rbbi.h	/^    virtual void adoptText(CharacterIterator* newText);$/;"	p	class:RuleBasedBreakIterator	access:public	signature:(CharacterIterator* newText)
RuleBasedBreakIterator::checkDictionary	rbbi.cpp	/^int32_t RuleBasedBreakIterator::checkDictionary(int32_t startPos,$/;"	f	class:RuleBasedBreakIterator	signature:(int32_t startPos, int32_t endPos, UBool reverse)
RuleBasedBreakIterator::checkDictionary	unicode/rbbi.h	/^    int32_t checkDictionary(int32_t startPos, int32_t endPos, UBool reverse);$/;"	p	class:RuleBasedBreakIterator	access:protected	signature:(int32_t startPos, int32_t endPos, UBool reverse)
RuleBasedBreakIterator::clone	rbbi.cpp	/^RuleBasedBreakIterator::clone(void) const {$/;"	f	class:RuleBasedBreakIterator	signature:(void) const
RuleBasedBreakIterator::clone	unicode/rbbi.h	/^    virtual BreakIterator* clone() const;$/;"	p	class:RuleBasedBreakIterator	access:public	signature:() const
RuleBasedBreakIterator::createBufferClone	rbbi.cpp	/^BreakIterator *  RuleBasedBreakIterator::createBufferClone(void *stackBuffer,$/;"	f	class:RuleBasedBreakIterator	signature:(void *stackBuffer, int32_t &bufferSize, UErrorCode &status)
RuleBasedBreakIterator::createBufferClone	unicode/rbbi.h	/^    virtual BreakIterator *  createBufferClone(void *stackBuffer,$/;"	p	class:RuleBasedBreakIterator	access:public	signature:(void *stackBuffer, int32_t &BufferSize, UErrorCode &status)
RuleBasedBreakIterator::current	rbbi.cpp	/^int32_t RuleBasedBreakIterator::current(void) const {$/;"	f	class:RuleBasedBreakIterator	signature:(void) const
RuleBasedBreakIterator::current	unicode/rbbi.h	/^    virtual int32_t current(void) const;$/;"	p	class:RuleBasedBreakIterator	access:public	signature:(void) const
RuleBasedBreakIterator::fBreakType	unicode/rbbi.h	/^    int32_t             fBreakType;$/;"	m	class:RuleBasedBreakIterator	access:protected
RuleBasedBreakIterator::fCachedBreakPositions	unicode/rbbi.h	/^    int32_t*            fCachedBreakPositions;$/;"	m	class:RuleBasedBreakIterator	access:protected
RuleBasedBreakIterator::fCharIter	unicode/rbbi.h	/^    CharacterIterator  *fCharIter;$/;"	m	class:RuleBasedBreakIterator	access:protected
RuleBasedBreakIterator::fDCharIter	unicode/rbbi.h	/^    UCharCharacterIterator *fDCharIter;$/;"	m	class:RuleBasedBreakIterator	access:protected
RuleBasedBreakIterator::fData	unicode/rbbi.h	/^    RBBIDataWrapper    *fData;$/;"	m	class:RuleBasedBreakIterator	access:protected
RuleBasedBreakIterator::fDictionaryCharCount	unicode/rbbi.h	/^    uint32_t            fDictionaryCharCount;$/;"	m	class:RuleBasedBreakIterator	access:protected
RuleBasedBreakIterator::fLanguageBreakEngines	unicode/rbbi.h	/^    UStack              *fLanguageBreakEngines;$/;"	m	class:RuleBasedBreakIterator	access:protected
RuleBasedBreakIterator::fLastRuleStatusIndex	unicode/rbbi.h	/^    int32_t             fLastRuleStatusIndex;$/;"	m	class:RuleBasedBreakIterator	access:protected
RuleBasedBreakIterator::fLastStatusIndexValid	unicode/rbbi.h	/^    UBool               fLastStatusIndexValid;$/;"	m	class:RuleBasedBreakIterator	access:protected
RuleBasedBreakIterator::fNumCachedBreakPositions	unicode/rbbi.h	/^    int32_t             fNumCachedBreakPositions;$/;"	m	class:RuleBasedBreakIterator	access:protected
RuleBasedBreakIterator::fPositionInCache	unicode/rbbi.h	/^    int32_t             fPositionInCache;$/;"	m	class:RuleBasedBreakIterator	access:protected
RuleBasedBreakIterator::fSCharIter	unicode/rbbi.h	/^    StringCharacterIterator *fSCharIter;$/;"	m	class:RuleBasedBreakIterator	access:protected
RuleBasedBreakIterator::fText	unicode/rbbi.h	/^    UText  *fText;$/;"	m	class:RuleBasedBreakIterator	access:protected
RuleBasedBreakIterator::fUnhandledBreakEngine	unicode/rbbi.h	/^    UnhandledEngine     *fUnhandledBreakEngine;$/;"	m	class:RuleBasedBreakIterator	access:protected
RuleBasedBreakIterator::first	rbbi.cpp	/^int32_t RuleBasedBreakIterator::first(void) {$/;"	f	class:RuleBasedBreakIterator	signature:(void)
RuleBasedBreakIterator::first	unicode/rbbi.h	/^    virtual int32_t first(void);$/;"	p	class:RuleBasedBreakIterator	access:public	signature:(void)
RuleBasedBreakIterator::following	rbbi.cpp	/^int32_t RuleBasedBreakIterator::following(int32_t offset) {$/;"	f	class:RuleBasedBreakIterator	signature:(int32_t offset)
RuleBasedBreakIterator::following	unicode/rbbi.h	/^    virtual int32_t following(int32_t offset);$/;"	p	class:RuleBasedBreakIterator	access:public	signature:(int32_t offset)
RuleBasedBreakIterator::getBinaryRules	rbbi.cpp	/^const uint8_t  *RuleBasedBreakIterator::getBinaryRules(uint32_t &length) {$/;"	f	class:RuleBasedBreakIterator	signature:(uint32_t &length)
RuleBasedBreakIterator::getBinaryRules	unicode/rbbi.h	/^    virtual const uint8_t *getBinaryRules(uint32_t &length);$/;"	p	class:RuleBasedBreakIterator	access:public	signature:(uint32_t &length)
RuleBasedBreakIterator::getDynamicClassID	unicode/rbbi.h	/^    virtual UClassID getDynamicClassID(void) const;$/;"	p	class:RuleBasedBreakIterator	access:public	signature:(void) const
RuleBasedBreakIterator::getLanguageBreakEngine	rbbi.cpp	/^RuleBasedBreakIterator::getLanguageBreakEngine(UChar32 c) {$/;"	f	class:RuleBasedBreakIterator	signature:(UChar32 c)
RuleBasedBreakIterator::getLanguageBreakEngine	unicode/rbbi.h	/^    const LanguageBreakEngine *getLanguageBreakEngine(UChar32 c);$/;"	p	class:RuleBasedBreakIterator	access:private	signature:(UChar32 c)
RuleBasedBreakIterator::getRuleStatus	rbbi.cpp	/^int32_t  RuleBasedBreakIterator::getRuleStatus() const {$/;"	f	class:RuleBasedBreakIterator	signature:() const
RuleBasedBreakIterator::getRuleStatus	unicode/rbbi.h	/^    virtual int32_t getRuleStatus() const;$/;"	p	class:RuleBasedBreakIterator	access:public	signature:() const
RuleBasedBreakIterator::getRuleStatusVec	rbbi.cpp	/^int32_t RuleBasedBreakIterator::getRuleStatusVec($/;"	f	class:RuleBasedBreakIterator	signature:( int32_t *fillInVec, int32_t capacity, UErrorCode &status)
RuleBasedBreakIterator::getRuleStatusVec	unicode/rbbi.h	/^    virtual int32_t getRuleStatusVec(int32_t *fillInVec, int32_t capacity, UErrorCode &status);$/;"	p	class:RuleBasedBreakIterator	access:public	signature:(int32_t *fillInVec, int32_t capacity, UErrorCode &status)
RuleBasedBreakIterator::getRules	rbbi.cpp	/^RuleBasedBreakIterator::getRules() const {$/;"	f	class:RuleBasedBreakIterator	signature:() const
RuleBasedBreakIterator::getRules	unicode/rbbi.h	/^    virtual const UnicodeString& getRules(void) const;$/;"	p	class:RuleBasedBreakIterator	access:public	signature:(void) const
RuleBasedBreakIterator::getStaticClassID	unicode/rbbi.h	/^    static UClassID U_EXPORT2 getStaticClassID(void);$/;"	p	class:RuleBasedBreakIterator	access:public	signature:(void)
RuleBasedBreakIterator::getText	rbbi.cpp	/^RuleBasedBreakIterator::getText() const {$/;"	f	class:RuleBasedBreakIterator	signature:() const
RuleBasedBreakIterator::getText	unicode/rbbi.h	/^    virtual  CharacterIterator& getText(void) const;$/;"	p	class:RuleBasedBreakIterator	access:public	signature:(void) const
RuleBasedBreakIterator::getUText	rbbi.cpp	/^UText *RuleBasedBreakIterator::getUText(UText *fillIn, UErrorCode &status) const {$/;"	f	class:RuleBasedBreakIterator	signature:(UText *fillIn, UErrorCode &status) const
RuleBasedBreakIterator::getUText	unicode/rbbi.h	/^     virtual UText *getUText(UText *fillIn, UErrorCode &status) const;$/;"	p	class:RuleBasedBreakIterator	access:public	signature:(UText *fillIn, UErrorCode &status) const
RuleBasedBreakIterator::handleNext	rbbi.cpp	/^int32_t RuleBasedBreakIterator::handleNext(const RBBIStateTable *statetable) {$/;"	f	class:RuleBasedBreakIterator	signature:(const RBBIStateTable *statetable)
RuleBasedBreakIterator::handleNext	unicode/rbbi.h	/^    int32_t handleNext(const RBBIStateTable *statetable);$/;"	p	class:RuleBasedBreakIterator	access:private	signature:(const RBBIStateTable *statetable)
RuleBasedBreakIterator::handlePrevious	rbbi.cpp	/^int32_t RuleBasedBreakIterator::handlePrevious(const RBBIStateTable *statetable) {$/;"	f	class:RuleBasedBreakIterator	signature:(const RBBIStateTable *statetable)
RuleBasedBreakIterator::handlePrevious	unicode/rbbi.h	/^    int32_t handlePrevious(const RBBIStateTable *statetable);$/;"	p	class:RuleBasedBreakIterator	access:private	signature:(const RBBIStateTable *statetable)
RuleBasedBreakIterator::hashCode	rbbi.cpp	/^RuleBasedBreakIterator::hashCode(void) const {$/;"	f	class:RuleBasedBreakIterator	signature:(void) const
RuleBasedBreakIterator::hashCode	unicode/rbbi.h	/^    virtual int32_t hashCode(void) const;$/;"	p	class:RuleBasedBreakIterator	access:public	signature:(void) const
RuleBasedBreakIterator::init	rbbi.cpp	/^void RuleBasedBreakIterator::init() {$/;"	f	class:RuleBasedBreakIterator	signature:()
RuleBasedBreakIterator::init	unicode/rbbi.h	/^    void init();$/;"	p	class:RuleBasedBreakIterator	access:protected	signature:()
RuleBasedBreakIterator::isBoundary	rbbi.cpp	/^UBool RuleBasedBreakIterator::isBoundary(int32_t offset) {$/;"	f	class:RuleBasedBreakIterator	signature:(int32_t offset)
RuleBasedBreakIterator::isBoundary	unicode/rbbi.h	/^    virtual UBool isBoundary(int32_t offset);$/;"	p	class:RuleBasedBreakIterator	access:public	signature:(int32_t offset)
RuleBasedBreakIterator::kDontAdopt	unicode/rbbi.h	/^        kDontAdopt$/;"	e	enum:RuleBasedBreakIterator::EDontAdopt
RuleBasedBreakIterator::last	rbbi.cpp	/^int32_t RuleBasedBreakIterator::last(void) {$/;"	f	class:RuleBasedBreakIterator	signature:(void)
RuleBasedBreakIterator::last	unicode/rbbi.h	/^    virtual int32_t last(void);$/;"	p	class:RuleBasedBreakIterator	access:public	signature:(void)
RuleBasedBreakIterator::makeRuleStatusValid	rbbi.cpp	/^void RuleBasedBreakIterator::makeRuleStatusValid() {$/;"	f	class:RuleBasedBreakIterator	signature:()
RuleBasedBreakIterator::makeRuleStatusValid	unicode/rbbi.h	/^    void makeRuleStatusValid();$/;"	p	class:RuleBasedBreakIterator	access:private	signature:()
RuleBasedBreakIterator::next	rbbi.cpp	/^int32_t RuleBasedBreakIterator::next(int32_t n) {$/;"	f	class:RuleBasedBreakIterator	signature:(int32_t n)
RuleBasedBreakIterator::next	rbbi.cpp	/^int32_t RuleBasedBreakIterator::next(void) {$/;"	f	class:RuleBasedBreakIterator	signature:(void)
RuleBasedBreakIterator::next	unicode/rbbi.h	/^    virtual int32_t next(int32_t n);$/;"	p	class:RuleBasedBreakIterator	access:public	signature:(int32_t n)
RuleBasedBreakIterator::next	unicode/rbbi.h	/^    virtual int32_t next(void);$/;"	p	class:RuleBasedBreakIterator	access:public	signature:(void)
RuleBasedBreakIterator::operator !=	unicode/rbbi.h	/^    UBool operator!=(const BreakIterator& that) const;$/;"	p	class:RuleBasedBreakIterator	access:public	signature:(const BreakIterator& that) const
RuleBasedBreakIterator::operator !=	unicode/rbbi.h	/^inline UBool RuleBasedBreakIterator::operator!=(const BreakIterator& that) const {$/;"	f	class:RuleBasedBreakIterator	signature:(const BreakIterator& that) const
RuleBasedBreakIterator::operator =	rbbi.cpp	/^RuleBasedBreakIterator::operator=(const RuleBasedBreakIterator& that) {$/;"	f	class:RuleBasedBreakIterator	signature:(const RuleBasedBreakIterator& that)
RuleBasedBreakIterator::operator =	unicode/rbbi.h	/^    RuleBasedBreakIterator& operator=(const RuleBasedBreakIterator& that);$/;"	p	class:RuleBasedBreakIterator	access:public	signature:(const RuleBasedBreakIterator& that)
RuleBasedBreakIterator::operator ==	rbbi.cpp	/^RuleBasedBreakIterator::operator==(const BreakIterator& that) const {$/;"	f	class:RuleBasedBreakIterator	signature:(const BreakIterator& that) const
RuleBasedBreakIterator::operator ==	unicode/rbbi.h	/^    virtual UBool operator==(const BreakIterator& that) const;$/;"	p	class:RuleBasedBreakIterator	access:public	signature:(const BreakIterator& that) const
RuleBasedBreakIterator::preceding	rbbi.cpp	/^int32_t RuleBasedBreakIterator::preceding(int32_t offset) {$/;"	f	class:RuleBasedBreakIterator	signature:(int32_t offset)
RuleBasedBreakIterator::preceding	unicode/rbbi.h	/^    virtual int32_t preceding(int32_t offset);$/;"	p	class:RuleBasedBreakIterator	access:public	signature:(int32_t offset)
RuleBasedBreakIterator::previous	rbbi.cpp	/^int32_t RuleBasedBreakIterator::previous(void) {$/;"	f	class:RuleBasedBreakIterator	signature:(void)
RuleBasedBreakIterator::previous	unicode/rbbi.h	/^    virtual int32_t previous(void);$/;"	p	class:RuleBasedBreakIterator	access:public	signature:(void)
RuleBasedBreakIterator::reset	rbbi.cpp	/^RuleBasedBreakIterator::reset()$/;"	f	class:RuleBasedBreakIterator	signature:()
RuleBasedBreakIterator::reset	unicode/rbbi.h	/^    virtual void reset(void);$/;"	p	class:RuleBasedBreakIterator	access:protected	signature:(void)
RuleBasedBreakIterator::setBreakType	rbbi.cpp	/^void RuleBasedBreakIterator::setBreakType(int32_t type) {$/;"	f	class:RuleBasedBreakIterator	signature:(int32_t type)
RuleBasedBreakIterator::setBreakType	unicode/rbbi.h	/^    virtual void setBreakType(int32_t type);$/;"	p	class:RuleBasedBreakIterator	access:protected	signature:(int32_t type)
RuleBasedBreakIterator::setText	rbbi.cpp	/^RuleBasedBreakIterator::setText(const UnicodeString& newText) {$/;"	f	class:RuleBasedBreakIterator	signature:(const UnicodeString& newText)
RuleBasedBreakIterator::setText	rbbi.cpp	/^void RuleBasedBreakIterator::setText(UText *ut, UErrorCode &status) {$/;"	f	class:RuleBasedBreakIterator	signature:(UText *ut, UErrorCode &status)
RuleBasedBreakIterator::setText	unicode/rbbi.h	/^    virtual void  setText(UText *text, UErrorCode &status);$/;"	p	class:RuleBasedBreakIterator	access:public	signature:(UText *text, UErrorCode &status)
RuleBasedBreakIterator::setText	unicode/rbbi.h	/^    virtual void setText(const UnicodeString& newText);$/;"	p	class:RuleBasedBreakIterator	access:public	signature:(const UnicodeString& newText)
RuleBasedBreakIterator::~RuleBasedBreakIterator	rbbi.cpp	/^RuleBasedBreakIterator::~RuleBasedBreakIterator() {$/;"	f	class:RuleBasedBreakIterator	signature:()
RuleBasedBreakIterator::~RuleBasedBreakIterator	unicode/rbbi.h	/^    virtual ~RuleBasedBreakIterator();$/;"	p	class:RuleBasedBreakIterator	access:public	signature:()
RuleBasedBreakIteratorTables	unicode/rbbi.h	/^class  RuleBasedBreakIteratorTables;$/;"	x
RuleBasedCollator	unicode/urename.h	2102;"	d
RuleBasedNumberFormat	unicode/urename.h	2103;"	d
RuleBasedTimeZone	unicode/urename.h	2104;"	d
RuleBasedTransliterator	unicode/urename.h	2105;"	d
RuleChain	unicode/urename.h	2106;"	d
RuleCharacterIterator	ruleiter.cpp	/^RuleCharacterIterator::RuleCharacterIterator(const UnicodeString& theText, const SymbolTable* theSym,$/;"	f	class:RuleCharacterIterator	signature:(const UnicodeString& theText, const SymbolTable* theSym, ParsePosition& thePos)
RuleCharacterIterator	ruleiter.h	/^        friend class RuleCharacterIterator;$/;"	x
RuleCharacterIterator	ruleiter.h	/^    RuleCharacterIterator(const UnicodeString& text, const SymbolTable* sym,$/;"	p	class:RuleCharacterIterator	access:public	signature:(const UnicodeString& text, const SymbolTable* sym, ParsePosition& pos)
RuleCharacterIterator	ruleiter.h	/^class RuleCharacterIterator : public UMemory {$/;"	c	inherits:UMemory
RuleCharacterIterator	unicode/uniset.h	/^class RuleCharacterIterator;$/;"	x
RuleCharacterIterator	unicode/urename.h	2107;"	d
RuleCharacterIterator::DONE	ruleiter.h	/^    enum { DONE = -1 };$/;"	e	enum:RuleCharacterIterator::__anon131
RuleCharacterIterator::PARSE_ESCAPES	ruleiter.h	/^    enum { PARSE_ESCAPES   = 2 };$/;"	e	enum:RuleCharacterIterator::__anon133
RuleCharacterIterator::PARSE_VARIABLES	ruleiter.h	/^    enum { PARSE_VARIABLES = 1 };$/;"	e	enum:RuleCharacterIterator::__anon132
RuleCharacterIterator::Pos	ruleiter.h	/^    struct Pos : public UMemory {$/;"	s	class:RuleCharacterIterator	inherits:UMemory	access:public
RuleCharacterIterator::Pos::RuleCharacterIterator	ruleiter.h	/^        friend class RuleCharacterIterator;$/;"	x
RuleCharacterIterator::Pos::buf	ruleiter.h	/^        const UnicodeString* buf;$/;"	m	struct:RuleCharacterIterator::Pos	access:private
RuleCharacterIterator::Pos::bufPos	ruleiter.h	/^        int32_t bufPos;$/;"	m	struct:RuleCharacterIterator::Pos	access:private
RuleCharacterIterator::Pos::pos	ruleiter.h	/^        int32_t pos;$/;"	m	struct:RuleCharacterIterator::Pos	access:private
RuleCharacterIterator::RuleCharacterIterator	ruleiter.cpp	/^RuleCharacterIterator::RuleCharacterIterator(const UnicodeString& theText, const SymbolTable* theSym,$/;"	f	class:RuleCharacterIterator	signature:(const UnicodeString& theText, const SymbolTable* theSym, ParsePosition& thePos)
RuleCharacterIterator::RuleCharacterIterator	ruleiter.h	/^    RuleCharacterIterator(const UnicodeString& text, const SymbolTable* sym,$/;"	p	class:RuleCharacterIterator	access:public	signature:(const UnicodeString& text, const SymbolTable* sym, ParsePosition& pos)
RuleCharacterIterator::SKIP_WHITESPACE	ruleiter.h	/^    enum { SKIP_WHITESPACE = 4 };$/;"	e	enum:RuleCharacterIterator::__anon134
RuleCharacterIterator::_advance	ruleiter.cpp	/^void RuleCharacterIterator::_advance(int32_t count) {$/;"	f	class:RuleCharacterIterator	signature:(int32_t count)
RuleCharacterIterator::_advance	ruleiter.h	/^    void _advance(int32_t count);$/;"	p	class:RuleCharacterIterator	access:private	signature:(int32_t count)
RuleCharacterIterator::_current	ruleiter.cpp	/^UChar32 RuleCharacterIterator::_current() const {$/;"	f	class:RuleCharacterIterator	signature:() const
RuleCharacterIterator::_current	ruleiter.h	/^    UChar32 _current() const;$/;"	p	class:RuleCharacterIterator	access:private	signature:() const
RuleCharacterIterator::atEnd	ruleiter.cpp	/^UBool RuleCharacterIterator::atEnd() const {$/;"	f	class:RuleCharacterIterator	signature:() const
RuleCharacterIterator::atEnd	ruleiter.h	/^    UBool atEnd() const;$/;"	p	class:RuleCharacterIterator	access:public	signature:() const
RuleCharacterIterator::buf	ruleiter.h	/^    const UnicodeString* buf;$/;"	m	class:RuleCharacterIterator	access:private
RuleCharacterIterator::bufPos	ruleiter.h	/^    int32_t bufPos;$/;"	m	class:RuleCharacterIterator	access:private
RuleCharacterIterator::getPos	ruleiter.cpp	/^void RuleCharacterIterator::getPos(RuleCharacterIterator::Pos& p) const {$/;"	f	class:RuleCharacterIterator	signature:(RuleCharacterIterator::Pos& p) const
RuleCharacterIterator::getPos	ruleiter.h	/^    void getPos(Pos& p) const;$/;"	p	class:RuleCharacterIterator	access:public	signature:(Pos& p) const
RuleCharacterIterator::inVariable	ruleiter.h	/^    inline UBool inVariable() const;$/;"	p	class:RuleCharacterIterator	access:public	signature:() const
RuleCharacterIterator::inVariable	ruleiter.h	/^inline UBool RuleCharacterIterator::inVariable() const {$/;"	f	class:RuleCharacterIterator	signature:() const
RuleCharacterIterator::jumpahead	ruleiter.cpp	/^void RuleCharacterIterator::jumpahead(int32_t count) {$/;"	f	class:RuleCharacterIterator	signature:(int32_t count)
RuleCharacterIterator::jumpahead	ruleiter.h	/^    void jumpahead(int32_t count);$/;"	p	class:RuleCharacterIterator	access:public	signature:(int32_t count)
RuleCharacterIterator::lookahead	ruleiter.cpp	/^UnicodeString& RuleCharacterIterator::lookahead(UnicodeString& result, int32_t maxLookAhead) const {$/;"	f	class:RuleCharacterIterator	signature:(UnicodeString& result, int32_t maxLookAhead) const
RuleCharacterIterator::lookahead	ruleiter.h	/^    UnicodeString& lookahead(UnicodeString& result, int32_t maxLookAhead = -1) const;$/;"	p	class:RuleCharacterIterator	access:public	signature:(UnicodeString& result, int32_t maxLookAhead = -1) const
RuleCharacterIterator::next	ruleiter.cpp	/^UChar32 RuleCharacterIterator::next(int32_t options, UBool& isEscaped, UErrorCode& ec) {$/;"	f	class:RuleCharacterIterator	signature:(int32_t options, UBool& isEscaped, UErrorCode& ec)
RuleCharacterIterator::next	ruleiter.h	/^    UChar32 next(int32_t options, UBool& isEscaped, UErrorCode& ec);$/;"	p	class:RuleCharacterIterator	access:public	signature:(int32_t options, UBool& isEscaped, UErrorCode& ec)
RuleCharacterIterator::pos	ruleiter.h	/^    ParsePosition& pos;$/;"	m	class:RuleCharacterIterator	access:private
RuleCharacterIterator::setPos	ruleiter.cpp	/^void RuleCharacterIterator::setPos(const RuleCharacterIterator::Pos& p) {$/;"	f	class:RuleCharacterIterator	signature:(const RuleCharacterIterator::Pos& p)
RuleCharacterIterator::setPos	ruleiter.h	/^    void setPos(const Pos& p);$/;"	p	class:RuleCharacterIterator	access:public	signature:(const Pos& p)
RuleCharacterIterator::skipIgnored	ruleiter.cpp	/^void RuleCharacterIterator::skipIgnored(int32_t options) {$/;"	f	class:RuleCharacterIterator	signature:(int32_t options)
RuleCharacterIterator::skipIgnored	ruleiter.h	/^    void skipIgnored(int32_t options);$/;"	p	class:RuleCharacterIterator	access:public	signature:(int32_t options)
RuleCharacterIterator::sym	ruleiter.h	/^    const SymbolTable* sym;$/;"	m	class:RuleCharacterIterator	access:private
RuleCharacterIterator::text	ruleiter.h	/^    const UnicodeString& text;$/;"	m	class:RuleCharacterIterator	access:private
RuleHalf	unicode/urename.h	2108;"	d
RuleParser	unicode/urename.h	2109;"	d
Run	ubidiimp.h	/^typedef struct Run {$/;"	s
Run	ubidiimp.h	/^} Run;$/;"	t	typeref:struct:Run
Run::insertRemove	ubidiimp.h	/^            insertRemove;   \/* if >0, flags for inserting LRM\/RLM before\/after run,$/;"	m	struct:Run	access:public
Run::logicalStart	ubidiimp.h	/^    int32_t logicalStart,   \/* first character of the run; b31 indicates even\/odd level *\/$/;"	m	struct:Run	access:public
Run::visualLimit	ubidiimp.h	/^            visualLimit,    \/* last visual position of the run +1 *\/$/;"	m	struct:Run	access:public
RunArray	unicode/urename.h	2110;"	d
S	ubidiimp.h	/^    S=  U_SEGMENT_SEPARATOR,$/;"	e	enum:__anon82
SBCS	ucnv2022.c	/^        SBCS,$/;"	e	enum:__anon67	file:
SBCS_FAST_LIMIT	ucnvmbcs.h	/^    SBCS_FAST_LIMIT=SBCS_FAST_MAX+1,    \/* =0x1000 *\/$/;"	e	enum:__anon78
SBCS_FAST_MAX	ucnvmbcs.h	/^    SBCS_FAST_MAX=0x0fff,               \/* maximum code point with UTF-8-friendly SBCS runtime code, see makeconv SBCS_UTF8_MAX *\/$/;"	e	enum:__anon78
SBCS_RESULT_FROM_LOW_BMP	ucnvmbcs.h	297;"	d
SBCS_RESULT_FROM_UTF8	ucnvmbcs.h	300;"	d
SB_ESCAPE	ucnvhz.c	32;"	d	file:
SC0	ucnvscsu.c	/^    SC0=0x10, \/* Select window 0 *\/$/;"	e	enum:__anon152	file:
SC7	ucnvscsu.c	/^    SC7=0x17, \/* Select window 7 *\/$/;"	e	enum:__anon152	file:
SCHAR_IS_INVARIANT	uinvchar.c	146;"	d	file:
SCHRITER_H	unicode/schriter.h	19;"	d
SCRT	uloc_tag.c	1633;"	d	file:
SCSUData	ucnvscsu.c	/^typedef struct SCSUData {$/;"	s	file:
SCSUData	ucnvscsu.c	/^} SCSUData;$/;"	t	typeref:struct:SCSUData	file:
SCSUData::fromUDynamicOffsets	ucnvscsu.c	/^    uint32_t fromUDynamicOffsets[8];$/;"	m	struct:SCSUData	file:	access:public
SCSUData::fromUDynamicWindow	ucnvscsu.c	/^    int8_t fromUDynamicWindow;$/;"	m	struct:SCSUData	file:	access:public
SCSUData::fromUIsSingleByteMode	ucnvscsu.c	/^    UBool fromUIsSingleByteMode;$/;"	m	struct:SCSUData	file:	access:public
SCSUData::locale	ucnvscsu.c	/^    uint8_t locale;$/;"	m	struct:SCSUData	file:	access:public
SCSUData::nextWindowUseIndex	ucnvscsu.c	/^    int8_t nextWindowUseIndex;$/;"	m	struct:SCSUData	file:	access:public
SCSUData::toUByteOne	ucnvscsu.c	/^    uint8_t toUByteOne;$/;"	m	struct:SCSUData	file:	access:public
SCSUData::toUDynamicOffsets	ucnvscsu.c	/^    uint32_t toUDynamicOffsets[8];$/;"	m	struct:SCSUData	file:	access:public
SCSUData::toUDynamicWindow	ucnvscsu.c	/^    int8_t toUQuoteWindow, toUDynamicWindow;$/;"	m	struct:SCSUData	file:	access:public
SCSUData::toUIsSingleByteMode	ucnvscsu.c	/^    UBool toUIsSingleByteMode;$/;"	m	struct:SCSUData	file:	access:public
SCSUData::toUPadding	ucnvscsu.c	/^    uint8_t toUPadding[3];$/;"	m	struct:SCSUData	file:	access:public
SCSUData::toUQuoteWindow	ucnvscsu.c	/^    int8_t toUQuoteWindow, toUDynamicWindow;$/;"	m	struct:SCSUData	file:	access:public
SCSUData::toUState	ucnvscsu.c	/^    uint8_t toUState;$/;"	m	struct:SCSUData	file:	access:public
SCSUData::windowUse	ucnvscsu.c	/^    int8_t windowUse[8];$/;"	m	struct:SCSUData	file:	access:public
SCU	ucnvscsu.c	/^    SCU=0x0F, \/* Change to Unicode mode *\/$/;"	e	enum:__anon152	file:
SD0	ucnvscsu.c	/^    SD0=0x18, \/* Define and select window 0 *\/$/;"	e	enum:__anon152	file:
SD7	ucnvscsu.c	/^    SD7=0x1F, \/* Define and select window 7 *\/$/;"	e	enum:__anon152	file:
SDX	ucnvscsu.c	/^    SDX=0x0B, \/* Define a window as extended *\/$/;"	e	enum:__anon152	file:
SEARCH_TZFILE	putil.c	668;"	d	file:
SEARCH_TZFILE_RESULT	putil.c	/^static char SEARCH_TZFILE_RESULT[MAX_PATH_SIZE] = "";$/;"	v	file:
SEP	uloc_tag.c	45;"	d	file:
SEPARATOR	ucat.c	/^static const char SEPARATOR = '%';$/;"	v	file:
SEP_CHAR	locid.cpp	270;"	d	file:
SERVICE_REFCOUNT	serv.cpp	15;"	d	file:
SET_ADD	unames.c	1209;"	d	file:
SET_CLOSE	uniset.cpp	31;"	d	file:
SET_CLOSE	uniset_props.cpp	59;"	d	file:
SET_CONTAINS	unames.c	1210;"	d	file:
SET_OPEN	uniset.cpp	30;"	d	file:
SET_OPEN	uniset_props.cpp	58;"	d	file:
SHADDA	ushape.c	58;"	d	file:
SHADDA_CHAR	ushape.c	72;"	d	file:
SHADDA_TATWEEL_CHAR	ushape.c	74;"	d	file:
SHAPE_MODE	ushape.c	76;"	d	file:
SHAPE_TAIL_NEW_UNICODE	unicode/ushape.h	468;"	d
SHAPE_TAIL_TYPE_MASK	unicode/ushape.h	474;"	d
SHARED_DATA_HASHTABLE	ucnv_bld.c	/^static UHashtable *SHARED_DATA_HASHTABLE = NULL;$/;"	v	file:
SHARED_DATA_HASHTABLE	usprep.cpp	/^static UHashtable *SHARED_DATA_HASHTABLE = NULL;$/;"	v	file:
SHIFT_IN_STR	ucnv2022.c	/^static const char SHIFT_IN_STR[]  = "\\x0F";$/;"	v	file:
SHIFT_OUT_STR	ucnv2022.c	/^static const char SHIFT_OUT_STR[] = "\\x0E";$/;"	v	file:
SI	ucnvmbcs.c	/^    SI,$/;"	e	enum:SISO_Option	file:
SIGN	putil.c	156;"	d	file:
SIG_MAX_LEN	ucnv.c	2750;"	d	file:
SISO_Option	ucnvmbcs.c	/^enum SISO_Option {$/;"	g	file:
SISO_Option	ucnvmbcs.c	/^typedef enum SISO_Option SISO_Option;$/;"	t	typeref:enum:SISO_Option	file:
SIZEOF_WCHAR_T	icucfg.h	38;"	d
SKEW	punycode.c	62;"	d	file:
SKIP1	putil.c	903;"	d	file:
SKIP2	putil.c	904;"	d	file:
SKIP_WHITESPACE	ruleiter.h	/^    enum { SKIP_WHITESPACE = 4 };$/;"	e	enum:RuleCharacterIterator::__anon134
SLASH	ucnv_u7.c	834;"	d	file:
SLOT_OFFSET	ucase.c	108;"	d	file:
SND	ucnvisci.c	/^    SND = 0x74,$/;"	e	enum:__anon14	file:
SO	ucnvmbcs.c	/^    SO$/;"	e	enum:SISO_Option	file:
SPACE	ucnv2022.c	85;"	d	file:
SPACE	util.cpp	/^static const UChar SPACE      = 0x0020; \/\/ ' '$/;"	v	file:
SPACE_CHAR	ushape.c	71;"	d	file:
SPRPIMPL_H	sprpimpl.h	18;"	d
SPUString	unicode/urename.h	2111;"	d
SPUStringPool	unicode/urename.h	2112;"	d
SQ0	ucnvscsu.c	/^    SQ0=0x01, \/* Quote from window pair 0 *\/$/;"	e	enum:__anon152	file:
SQ7	ucnvscsu.c	/^    SQ7=0x08, \/* Quote from window pair 7 *\/$/;"	e	enum:__anon152	file:
SQU	ucnvscsu.c	/^    SQU=0x0E, \/* Quote a single Unicode character *\/$/;"	e	enum:__anon152	file:
SS2_STATE	ucnv2022.c	/^        SS2_STATE=0x10,$/;"	e	enum:__anon65	file:
SS3_STATE	ucnv2022.c	/^        SS3_STATE,$/;"	e	enum:__anon65	file:
STACK_IS_EMPTY	usc_impl.c	30;"	d	file:
STACK_IS_NOT_EMPTY	usc_impl.c	31;"	d	file:
STACK_ITEM_SIZE	uarrsort.c	/^    STACK_ITEM_SIZE=200$/;"	e	enum:__anon24	file:
STACK_ROW_CAPACITY	ucnv_io.c	/^    STACK_ROW_CAPACITY=500$/;"	e	enum:__anon130	file:
STACK_ROW_CAPACITY	uresdata.c	/^    STACK_ROW_CAPACITY=200$/;"	e	enum:__anon52	file:
STANDARD_NAME_REGKEY	wintz.c	/^static const char STANDARD_NAME_REGKEY[] = "StandardName";$/;"	v	file:
STANDARD_TIME_REGKEY	wintz.c	/^static const char STANDARD_TIME_REGKEY[] = " Standard Time";$/;"	v	file:
START_EXTRA	uniset.cpp	53;"	d	file:
START_EXTRA	uniset_props.cpp	54;"	d	file:
START_STATE	rbbi.cpp	47;"	d	file:
STATIC_SIMPLE_SINGLETON	mutex.h	113;"	d
STATIC_TRI_STATE_SINGLETON	mutex.h	170;"	d
STDC_HEADERS	icucfg.h	5;"	d
STD_REGKEY	wintz.c	/^static const char STD_REGKEY[] = "Std";$/;"	v	file:
STOP_STATE	rbbi.cpp	50;"	d	file:
STRENUM_H	unicode/strenum.h	11;"	d
STRING_HASH	uhash.c	844;"	d	file:
SURROGATE_HIGH_END	ucnv_u8.c	53;"	d	file:
SURROGATE_HIGH_START	ucnv_u32.c	31;"	d	file:
SURROGATE_HIGH_START	ucnv_u8.c	52;"	d	file:
SURROGATE_LOW_BASE	ucnv_u32.c	35;"	d	file:
SURROGATE_LOW_BASE	ucnv_u8.c	58;"	d	file:
SURROGATE_LOW_END	ucnv_u8.c	55;"	d	file:
SURROGATE_LOW_START	ucnv_u32.c	32;"	d	file:
SURROGATE_LOW_START	ucnv_u8.c	54;"	d	file:
SYMBOL_REF	unicode/symtable.h	/^    enum { SYMBOL_REF = 0x0024 \/*$*\/ };$/;"	e	enum:SymbolTable::__anon125
SYMTABLE_H	unicode/symtable.h	11;"	d
SYNC_COMPARE_AND_SWAP	umutex.c	115;"	d	file:
SYNC_COMPARE_AND_SWAP	umutex.c	125;"	d	file:
SYNC_COMPARE_AND_SWAP	umutex.c	137;"	d	file:
SYNC_COMPARE_AND_SWAP	umutex.c	140;"	d	file:
SYNC_COMPARE_AND_SWAP	umutex.c	152;"	d	file:
SYNC_FIXUP	usc_impl.c	33;"	d	file:
SafeZoneStringFormatPtr	unicode/urename.h	2113;"	d
SameValueSubstitution	unicode/urename.h	2114;"	d
ScriptListTable	unicode/urename.h	2115;"	d
ScriptRunIterator	unicode/urename.h	2116;"	d
ScriptSet	unicode/urename.h	2117;"	d
ScriptTable	unicode/urename.h	2118;"	d
SearchIterator	unicode/urename.h	2119;"	d
SegmentArrayProcessor	unicode/urename.h	2120;"	d
SegmentSingleProcessor	unicode/urename.h	2121;"	d
SelectFormat	unicode/urename.h	2122;"	d
ServiceEnumeration	servls.cpp	/^    ServiceEnumeration(const ICULocaleService* service, UErrorCode &status)$/;"	f	class:ServiceEnumeration	file:	access:private	signature:(const ICULocaleService* service, UErrorCode &status)
ServiceEnumeration	servls.cpp	/^    ServiceEnumeration(const ServiceEnumeration &other, UErrorCode &status)$/;"	f	class:ServiceEnumeration	file:	access:private	signature:(const ServiceEnumeration &other, UErrorCode &status)
ServiceEnumeration	servls.cpp	/^class ServiceEnumeration : public StringEnumeration {$/;"	c	file:	inherits:StringEnumeration
ServiceEnumeration	unicode/urename.h	2123;"	d
ServiceEnumeration::ServiceEnumeration	servls.cpp	/^    ServiceEnumeration(const ICULocaleService* service, UErrorCode &status)$/;"	f	class:ServiceEnumeration	file:	access:private	signature:(const ICULocaleService* service, UErrorCode &status)
ServiceEnumeration::ServiceEnumeration	servls.cpp	/^    ServiceEnumeration(const ServiceEnumeration &other, UErrorCode &status)$/;"	f	class:ServiceEnumeration	file:	access:private	signature:(const ServiceEnumeration &other, UErrorCode &status)
ServiceEnumeration::_ids	servls.cpp	/^    UVector _ids;$/;"	m	class:ServiceEnumeration	file:	access:private
ServiceEnumeration::_pos	servls.cpp	/^    int32_t _pos;$/;"	m	class:ServiceEnumeration	file:	access:private
ServiceEnumeration::_service	servls.cpp	/^    const ICULocaleService* _service;$/;"	m	class:ServiceEnumeration	file:	access:private
ServiceEnumeration::_timestamp	servls.cpp	/^    int32_t _timestamp;$/;"	m	class:ServiceEnumeration	file:	access:private
ServiceEnumeration::clone	servls.cpp	/^    virtual StringEnumeration *clone() const {$/;"	f	class:ServiceEnumeration	access:public	signature:() const
ServiceEnumeration::count	servls.cpp	/^    virtual int32_t count(UErrorCode& status) const {$/;"	f	class:ServiceEnumeration	access:public	signature:(UErrorCode& status) const
ServiceEnumeration::create	servls.cpp	/^    static ServiceEnumeration* create(const ICULocaleService* service) {$/;"	f	class:ServiceEnumeration	access:public	signature:(const ICULocaleService* service)
ServiceEnumeration::getDynamicClassID	servls.cpp	/^    virtual UClassID getDynamicClassID(void) const;$/;"	p	class:ServiceEnumeration	file:	access:public	signature:(void) const
ServiceEnumeration::getStaticClassID	servls.cpp	/^    static UClassID U_EXPORT2 getStaticClassID(void);$/;"	p	class:ServiceEnumeration	file:	access:public	signature:(void)
ServiceEnumeration::reset	servls.cpp	/^    virtual void reset(UErrorCode& status) {$/;"	f	class:ServiceEnumeration	access:public	signature:(UErrorCode& status)
ServiceEnumeration::snext	servls.cpp	/^    virtual const UnicodeString* snext(UErrorCode& status) {$/;"	f	class:ServiceEnumeration	access:public	signature:(UErrorCode& status)
ServiceEnumeration::upToDate	servls.cpp	/^    UBool upToDate(UErrorCode& status) const {$/;"	f	class:ServiceEnumeration	access:public	signature:(UErrorCode& status) const
ServiceEnumeration::~ServiceEnumeration	servls.cpp	/^    virtual ~ServiceEnumeration() {}$/;"	f	class:ServiceEnumeration	access:public	signature:()
ServiceListener	serv.h	/^class ServiceListener;$/;"	x
ServiceListener	servloc.h	/^class ServiceListener;$/;"	x
ServiceListener	unicode/urename.h	2124;"	d
SimpleArrayProcessor	unicode/urename.h	2125;"	d
SimpleDateFormat	unicode/urename.h	2126;"	d
SimpleFactory	serv.cpp	/^SimpleFactory::SimpleFactory(UObject* instanceToAdopt, const UnicodeString& id, UBool visible) $/;"	f	class:SimpleFactory	signature:(UObject* instanceToAdopt, const UnicodeString& id, UBool visible)
SimpleFactory	serv.h	/^class SimpleFactory;$/;"	x
SimpleFactory	unicode/urename.h	2127;"	d
SimpleFactory::SimpleFactory	serv.cpp	/^SimpleFactory::SimpleFactory(UObject* instanceToAdopt, const UnicodeString& id, UBool visible) $/;"	f	class:SimpleFactory	signature:(UObject* instanceToAdopt, const UnicodeString& id, UBool visible)
SimpleFactory::create	serv.cpp	/^SimpleFactory::create(const ICUServiceKey& key, const ICUService* service, UErrorCode& status) const $/;"	f	class:SimpleFactory	signature:(const ICUServiceKey& key, const ICUService* service, UErrorCode& status) const
SimpleFactory::debug	serv.cpp	/^SimpleFactory::debug(UnicodeString& toAppendTo) const $/;"	f	class:SimpleFactory	signature:(UnicodeString& toAppendTo) const
SimpleFactory::debugClass	serv.cpp	/^SimpleFactory::debugClass(UnicodeString& toAppendTo) const $/;"	f	class:SimpleFactory	signature:(UnicodeString& toAppendTo) const
SimpleFactory::getDisplayName	serv.cpp	/^SimpleFactory::getDisplayName(const UnicodeString& id, const Locale& \/* locale *\/, UnicodeString& result) const $/;"	f	class:SimpleFactory	signature:(const UnicodeString& id, const Locale& , UnicodeString& result) const
SimpleFactory::updateVisibleIDs	serv.cpp	/^SimpleFactory::updateVisibleIDs(Hashtable& result, UErrorCode& status) const $/;"	f	class:SimpleFactory	signature:(Hashtable& result, UErrorCode& status) const
SimpleFactory::~SimpleFactory	serv.cpp	/^SimpleFactory::~SimpleFactory() $/;"	f	class:SimpleFactory	signature:()
SimpleLocaleKeyFactory	servloc.h	/^class SimpleLocaleKeyFactory;$/;"	x
SimpleLocaleKeyFactory	servslkf.cpp	/^SimpleLocaleKeyFactory::SimpleLocaleKeyFactory(UObject* objToAdopt,$/;"	f	class:SimpleLocaleKeyFactory	signature:(UObject* objToAdopt, const Locale& locale, int32_t kind, int32_t coverage)
SimpleLocaleKeyFactory	servslkf.cpp	/^SimpleLocaleKeyFactory::SimpleLocaleKeyFactory(UObject* objToAdopt,$/;"	f	class:SimpleLocaleKeyFactory	signature:(UObject* objToAdopt, const UnicodeString& locale, int32_t kind, int32_t coverage)
SimpleLocaleKeyFactory	unicode/urename.h	2128;"	d
SimpleLocaleKeyFactory::SimpleLocaleKeyFactory	servslkf.cpp	/^SimpleLocaleKeyFactory::SimpleLocaleKeyFactory(UObject* objToAdopt,$/;"	f	class:SimpleLocaleKeyFactory	signature:(UObject* objToAdopt, const Locale& locale, int32_t kind, int32_t coverage)
SimpleLocaleKeyFactory::SimpleLocaleKeyFactory	servslkf.cpp	/^SimpleLocaleKeyFactory::SimpleLocaleKeyFactory(UObject* objToAdopt,$/;"	f	class:SimpleLocaleKeyFactory	signature:(UObject* objToAdopt, const UnicodeString& locale, int32_t kind, int32_t coverage)
SimpleLocaleKeyFactory::create	servslkf.cpp	/^SimpleLocaleKeyFactory::create(const ICUServiceKey& key, const ICUService* service, UErrorCode& status) const$/;"	f	class:SimpleLocaleKeyFactory	signature:(const ICUServiceKey& key, const ICUService* service, UErrorCode& status) const
SimpleLocaleKeyFactory::debug	servslkf.cpp	/^SimpleLocaleKeyFactory::debug(UnicodeString& result) const$/;"	f	class:SimpleLocaleKeyFactory	signature:(UnicodeString& result) const
SimpleLocaleKeyFactory::debugClass	servslkf.cpp	/^SimpleLocaleKeyFactory::debugClass(UnicodeString& result) const$/;"	f	class:SimpleLocaleKeyFactory	signature:(UnicodeString& result) const
SimpleLocaleKeyFactory::updateVisibleIDs	servslkf.cpp	/^SimpleLocaleKeyFactory::updateVisibleIDs(Hashtable& result, UErrorCode& status) const$/;"	f	class:SimpleLocaleKeyFactory	signature:(Hashtable& result, UErrorCode& status) const
SimpleLocaleKeyFactory::~SimpleLocaleKeyFactory	servslkf.cpp	/^SimpleLocaleKeyFactory::~SimpleLocaleKeyFactory()$/;"	f	class:SimpleLocaleKeyFactory	signature:()
SimpleNumberFormatFactory	unicode/urename.h	2129;"	d
SimpleSingleton	mutex.h	/^struct SimpleSingleton {$/;"	s
SimpleSingleton	unicode/urename.h	2130;"	d
SimpleSingleton::fInstance	mutex.h	/^    void *fInstance;$/;"	m	struct:SimpleSingleton	access:public
SimpleSingleton::getInstance	mutex.cpp	/^void *SimpleSingleton::getInstance(InstantiatorFn *instantiator, const void *context,$/;"	f	class:SimpleSingleton	signature:(InstantiatorFn *instantiator, const void *context, void *&duplicate, UErrorCode &errorCode)
SimpleSingleton::getInstance	mutex.h	/^    void *getInstance(InstantiatorFn *instantiator, const void *context,$/;"	p	struct:SimpleSingleton	access:public	signature:(InstantiatorFn *instantiator, const void *context, void *&duplicate, UErrorCode &errorCode)
SimpleSingleton::reset	mutex.h	/^    void reset() { fInstance=NULL; }$/;"	f	struct:SimpleSingleton	access:public	signature:()
SimpleSingletonWrapper	mutex.h	/^    SimpleSingletonWrapper(SimpleSingleton &s) : singleton(s) {}$/;"	f	class:SimpleSingletonWrapper	access:public	signature:(SimpleSingleton &s)
SimpleSingletonWrapper	mutex.h	/^class SimpleSingletonWrapper {$/;"	c
SimpleSingletonWrapper::SimpleSingletonWrapper	mutex.h	/^    SimpleSingletonWrapper(SimpleSingleton &s) : singleton(s) {}$/;"	f	class:SimpleSingletonWrapper	access:public	signature:(SimpleSingleton &s)
SimpleSingletonWrapper::deleteInstance	mutex.h	/^    void deleteInstance() {$/;"	f	class:SimpleSingletonWrapper	access:public	signature:()
SimpleSingletonWrapper::getInstance	mutex.h	/^    T *getInstance(InstantiatorFn *instantiator, const void *context,$/;"	f	class:SimpleSingletonWrapper	access:public	signature:(InstantiatorFn *instantiator, const void *context, UErrorCode &errorCode)
SimpleSingletonWrapper::singleton	mutex.h	/^    SimpleSingleton &singleton;$/;"	m	class:SimpleSingletonWrapper	access:private
SimpleTimeZone	unicode/urename.h	2131;"	d
SinglePositioningFormat1Subtable	unicode/urename.h	2132;"	d
SinglePositioningFormat2Subtable	unicode/urename.h	2133;"	d
SinglePositioningSubtable	unicode/urename.h	2134;"	d
SingleSubstitutionFormat1Subtable	unicode/urename.h	2135;"	d
SingleSubstitutionFormat2Subtable	unicode/urename.h	2136;"	d
SingleSubstitutionSubtable	unicode/urename.h	2137;"	d
SingleTableProcessor	unicode/urename.h	2138;"	d
SpoofData	unicode/urename.h	2139;"	d
SpoofImpl	unicode/urename.h	2140;"	d
Srs	ucnvscsu.c	/^    Srs=0x0C, \/* reserved *\/$/;"	e	enum:__anon152	file:
StackBranch	triedict.cpp	/^    enum StackBranch {$/;"	g	class:MutableTrieEnumeration	file:	access:private
StackBufferOrFields	unicode/unistr.h	/^  friend union StackBufferOrFields; \/\/ make US_STACKBUF_SIZE visible inside fUnion$/;"	x
StackBufferOrFields	unicode/unistr.h	/^  union StackBufferOrFields {$/;"	u	class:UnicodeString	access:private
StackBufferOrFields	unicode/unistr.h	/^  union StackBufferOrFields;        \/\/ forward declaration necessary before friend declaration$/;"	x
StateEnum	ucnv2022.c	/^} StateEnum;$/;"	t	typeref:enum:__anon65	file:
StateTableProcessor	unicode/urename.h	2141;"	d
StringByteSink	unicode/bytestream.h	/^  StringByteSink(); \/\/\/< default constructor not implemented $/;"	p	class:StringByteSink	access:private	signature:()
StringByteSink	unicode/bytestream.h	/^  StringByteSink(StringClass* dest) : dest_(dest) { }$/;"	f	class:StringByteSink	access:public	signature:(StringClass* dest)
StringByteSink	unicode/bytestream.h	/^  StringByteSink(const StringByteSink &); \/\/\/< copy constructor not implemented$/;"	p	class:StringByteSink	access:private	signature:(const StringByteSink &)
StringByteSink	unicode/bytestream.h	/^class StringByteSink : public ByteSink {$/;"	c	inherits:ByteSink
StringByteSink::Append	unicode/bytestream.h	/^  virtual void Append(const char* data, int32_t n) { dest_->append(data, n); }$/;"	f	class:StringByteSink	access:public	signature:(const char* data, int32_t n)
StringByteSink::StringByteSink	unicode/bytestream.h	/^  StringByteSink(); \/\/\/< default constructor not implemented $/;"	p	class:StringByteSink	access:private	signature:()
StringByteSink::StringByteSink	unicode/bytestream.h	/^  StringByteSink(StringClass* dest) : dest_(dest) { }$/;"	f	class:StringByteSink	access:public	signature:(StringClass* dest)
StringByteSink::StringByteSink	unicode/bytestream.h	/^  StringByteSink(const StringByteSink &); \/\/\/< copy constructor not implemented$/;"	p	class:StringByteSink	access:private	signature:(const StringByteSink &)
StringByteSink::dest_	unicode/bytestream.h	/^  StringClass* dest_;$/;"	m	class:StringByteSink	access:private
StringByteSink::operator =	unicode/bytestream.h	/^  StringByteSink &operator=(const StringByteSink &); \/\/\/< assignment operator not implemented$/;"	p	class:StringByteSink	access:private	signature:(const StringByteSink &)
StringCharacterIterator	schriter.cpp	/^StringCharacterIterator::StringCharacterIterator()$/;"	f	class:StringCharacterIterator	signature:()
StringCharacterIterator	schriter.cpp	/^StringCharacterIterator::StringCharacterIterator(const StringCharacterIterator& that)$/;"	f	class:StringCharacterIterator	signature:(const StringCharacterIterator& that)
StringCharacterIterator	schriter.cpp	/^StringCharacterIterator::StringCharacterIterator(const UnicodeString& textStr)$/;"	f	class:StringCharacterIterator	signature:(const UnicodeString& textStr)
StringCharacterIterator	schriter.cpp	/^StringCharacterIterator::StringCharacterIterator(const UnicodeString& textStr,$/;"	f	class:StringCharacterIterator	signature:(const UnicodeString& textStr, int32_t textBegin, int32_t textEnd, int32_t textPos)
StringCharacterIterator	schriter.cpp	/^StringCharacterIterator::StringCharacterIterator(const UnicodeString& textStr,$/;"	f	class:StringCharacterIterator	signature:(const UnicodeString& textStr, int32_t textPos)
StringCharacterIterator	unicode/schriter.h	/^  StringCharacterIterator();$/;"	p	class:StringCharacterIterator	access:protected	signature:()
StringCharacterIterator	unicode/schriter.h	/^  StringCharacterIterator(const StringCharacterIterator&  that);$/;"	p	class:StringCharacterIterator	access:public	signature:(const StringCharacterIterator& that)
StringCharacterIterator	unicode/schriter.h	/^  StringCharacterIterator(const UnicodeString&    textStr,$/;"	p	class:StringCharacterIterator	access:public	signature:(const UnicodeString& textStr, int32_t textBegin, int32_t textEnd, int32_t textPos)
StringCharacterIterator	unicode/schriter.h	/^  StringCharacterIterator(const UnicodeString&    textStr,$/;"	p	class:StringCharacterIterator	access:public	signature:(const UnicodeString& textStr, int32_t textPos)
StringCharacterIterator	unicode/schriter.h	/^  StringCharacterIterator(const UnicodeString& textStr);$/;"	p	class:StringCharacterIterator	access:public	signature:(const UnicodeString& textStr)
StringCharacterIterator	unicode/schriter.h	/^class U_COMMON_API StringCharacterIterator : public UCharCharacterIterator {$/;"	c	inherits:UCharCharacterIterator
StringCharacterIterator	unicode/unistr.h	/^class StringCharacterIterator;$/;"	x
StringCharacterIterator	unicode/urename.h	2142;"	d
StringCharacterIterator::StringCharacterIterator	schriter.cpp	/^StringCharacterIterator::StringCharacterIterator()$/;"	f	class:StringCharacterIterator	signature:()
StringCharacterIterator::StringCharacterIterator	schriter.cpp	/^StringCharacterIterator::StringCharacterIterator(const StringCharacterIterator& that)$/;"	f	class:StringCharacterIterator	signature:(const StringCharacterIterator& that)
StringCharacterIterator::StringCharacterIterator	schriter.cpp	/^StringCharacterIterator::StringCharacterIterator(const UnicodeString& textStr)$/;"	f	class:StringCharacterIterator	signature:(const UnicodeString& textStr)
StringCharacterIterator::StringCharacterIterator	schriter.cpp	/^StringCharacterIterator::StringCharacterIterator(const UnicodeString& textStr,$/;"	f	class:StringCharacterIterator	signature:(const UnicodeString& textStr, int32_t textBegin, int32_t textEnd, int32_t textPos)
StringCharacterIterator::StringCharacterIterator	schriter.cpp	/^StringCharacterIterator::StringCharacterIterator(const UnicodeString& textStr,$/;"	f	class:StringCharacterIterator	signature:(const UnicodeString& textStr, int32_t textPos)
StringCharacterIterator::StringCharacterIterator	unicode/schriter.h	/^  StringCharacterIterator();$/;"	p	class:StringCharacterIterator	access:protected	signature:()
StringCharacterIterator::StringCharacterIterator	unicode/schriter.h	/^  StringCharacterIterator(const StringCharacterIterator&  that);$/;"	p	class:StringCharacterIterator	access:public	signature:(const StringCharacterIterator& that)
StringCharacterIterator::StringCharacterIterator	unicode/schriter.h	/^  StringCharacterIterator(const UnicodeString&    textStr,$/;"	p	class:StringCharacterIterator	access:public	signature:(const UnicodeString& textStr, int32_t textBegin, int32_t textEnd, int32_t textPos)
StringCharacterIterator::StringCharacterIterator	unicode/schriter.h	/^  StringCharacterIterator(const UnicodeString&    textStr,$/;"	p	class:StringCharacterIterator	access:public	signature:(const UnicodeString& textStr, int32_t textPos)
StringCharacterIterator::StringCharacterIterator	unicode/schriter.h	/^  StringCharacterIterator(const UnicodeString& textStr);$/;"	p	class:StringCharacterIterator	access:public	signature:(const UnicodeString& textStr)
StringCharacterIterator::clone	schriter.cpp	/^StringCharacterIterator::clone() const {$/;"	f	class:StringCharacterIterator	signature:() const
StringCharacterIterator::clone	unicode/schriter.h	/^  virtual CharacterIterator* clone(void) const;$/;"	p	class:StringCharacterIterator	access:public	signature:(void) const
StringCharacterIterator::getDynamicClassID	unicode/schriter.h	/^  virtual UClassID         getDynamicClassID(void) const;$/;"	p	class:StringCharacterIterator	access:public	signature:(void) const
StringCharacterIterator::getStaticClassID	unicode/schriter.h	/^  static UClassID   U_EXPORT2 getStaticClassID(void);$/;"	p	class:StringCharacterIterator	access:public	signature:(void)
StringCharacterIterator::getText	schriter.cpp	/^StringCharacterIterator::getText(UnicodeString& result) {$/;"	f	class:StringCharacterIterator	signature:(UnicodeString& result)
StringCharacterIterator::getText	unicode/schriter.h	/^  virtual void            getText(UnicodeString& result);$/;"	p	class:StringCharacterIterator	access:public	signature:(UnicodeString& result)
StringCharacterIterator::operator =	schriter.cpp	/^StringCharacterIterator::operator=(const StringCharacterIterator& that) {$/;"	f	class:StringCharacterIterator	signature:(const StringCharacterIterator& that)
StringCharacterIterator::operator =	unicode/schriter.h	/^  operator=(const StringCharacterIterator&    that);$/;"	p	class:StringCharacterIterator	access:public	signature:(const StringCharacterIterator& that)
StringCharacterIterator::operator ==	schriter.cpp	/^StringCharacterIterator::operator==(const ForwardCharacterIterator& that) const {$/;"	f	class:StringCharacterIterator	signature:(const ForwardCharacterIterator& that) const
StringCharacterIterator::operator ==	unicode/schriter.h	/^  virtual UBool          operator==(const ForwardCharacterIterator& that) const;$/;"	p	class:StringCharacterIterator	access:public	signature:(const ForwardCharacterIterator& that) const
StringCharacterIterator::setText	schriter.cpp	/^StringCharacterIterator::setText(const UnicodeString& newText) {$/;"	f	class:StringCharacterIterator	signature:(const UnicodeString& newText)
StringCharacterIterator::setText	unicode/schriter.h	/^  void setText(const UChar* newText, int32_t newTextLength);$/;"	p	class:StringCharacterIterator	access:protected	signature:(const UChar* newText, int32_t newTextLength)
StringCharacterIterator::setText	unicode/schriter.h	/^  void setText(const UnicodeString& newText);$/;"	p	class:StringCharacterIterator	access:public	signature:(const UnicodeString& newText)
StringCharacterIterator::text	unicode/schriter.h	/^  UnicodeString            text;$/;"	m	class:StringCharacterIterator	access:protected
StringCharacterIterator::~StringCharacterIterator	schriter.cpp	/^StringCharacterIterator::~StringCharacterIterator() {$/;"	f	class:StringCharacterIterator	signature:()
StringCharacterIterator::~StringCharacterIterator	unicode/schriter.h	/^  virtual ~StringCharacterIterator();$/;"	p	class:StringCharacterIterator	access:public	signature:()
StringEnumeration	triedict.h	/^class StringEnumeration;$/;"	x
StringEnumeration	unicode/strenum.h	/^    StringEnumeration();$/;"	p	class:StringEnumeration	access:protected	signature:()
StringEnumeration	unicode/strenum.h	/^class U_COMMON_API StringEnumeration : public UObject { $/;"	c	inherits:UObject
StringEnumeration	unicode/urename.h	2143;"	d
StringEnumeration	ustrenum.cpp	/^StringEnumeration::StringEnumeration()$/;"	f	class:StringEnumeration	signature:()
StringEnumeration::StringEnumeration	unicode/strenum.h	/^    StringEnumeration();$/;"	p	class:StringEnumeration	access:protected	signature:()
StringEnumeration::StringEnumeration	ustrenum.cpp	/^StringEnumeration::StringEnumeration()$/;"	f	class:StringEnumeration	signature:()
StringEnumeration::chars	unicode/strenum.h	/^    char *chars;$/;"	m	class:StringEnumeration	access:protected
StringEnumeration::charsBuffer	unicode/strenum.h	/^    char charsBuffer[32];$/;"	m	class:StringEnumeration	access:protected
StringEnumeration::charsCapacity	unicode/strenum.h	/^    int32_t charsCapacity;$/;"	m	class:StringEnumeration	access:protected
StringEnumeration::clone	unicode/strenum.h	/^    virtual StringEnumeration *clone() const;$/;"	p	class:StringEnumeration	access:public	signature:() const
StringEnumeration::clone	ustrenum.cpp	/^StringEnumeration::clone() const {$/;"	f	class:StringEnumeration	signature:() const
StringEnumeration::count	unicode/strenum.h	/^    virtual int32_t count(UErrorCode& status) const = 0;$/;"	p	class:StringEnumeration	access:public	signature:(UErrorCode& status) const
StringEnumeration::ensureCharsCapacity	unicode/strenum.h	/^    void ensureCharsCapacity(int32_t capacity, UErrorCode &status);$/;"	p	class:StringEnumeration	access:protected	signature:(int32_t capacity, UErrorCode &status)
StringEnumeration::ensureCharsCapacity	ustrenum.cpp	/^StringEnumeration::ensureCharsCapacity(int32_t capacity, UErrorCode &status) {$/;"	f	class:StringEnumeration	signature:(int32_t capacity, UErrorCode &status)
StringEnumeration::next	unicode/strenum.h	/^    virtual const char* next(int32_t *resultLength, UErrorCode& status);$/;"	p	class:StringEnumeration	access:public	signature:(int32_t *resultLength, UErrorCode& status)
StringEnumeration::next	ustrenum.cpp	/^StringEnumeration::next(int32_t *resultLength, UErrorCode &status) {$/;"	f	class:StringEnumeration	signature:(int32_t *resultLength, UErrorCode &status)
StringEnumeration::operator !=	unicode/strenum.h	/^    virtual UBool operator!=(const StringEnumeration& that)const;$/;"	p	class:StringEnumeration	access:public	signature:(const StringEnumeration& that) const
StringEnumeration::operator !=	ustrenum.cpp	/^StringEnumeration::operator!=(const StringEnumeration& that)const {$/;"	f	class:StringEnumeration	signature:(const StringEnumeration& that) const
StringEnumeration::operator ==	unicode/strenum.h	/^    virtual UBool operator==(const StringEnumeration& that)const;$/;"	p	class:StringEnumeration	access:public	signature:(const StringEnumeration& that) const
StringEnumeration::operator ==	ustrenum.cpp	/^StringEnumeration::operator==(const StringEnumeration& that)const {$/;"	f	class:StringEnumeration	signature:(const StringEnumeration& that) const
StringEnumeration::reset	unicode/strenum.h	/^    virtual void reset(UErrorCode& status) = 0;$/;"	p	class:StringEnumeration	access:public	signature:(UErrorCode& status)
StringEnumeration::setChars	unicode/strenum.h	/^    UnicodeString *setChars(const char *s, int32_t length, UErrorCode &status);$/;"	p	class:StringEnumeration	access:protected	signature:(const char *s, int32_t length, UErrorCode &status)
StringEnumeration::setChars	ustrenum.cpp	/^StringEnumeration::setChars(const char *s, int32_t length, UErrorCode &status) {$/;"	f	class:StringEnumeration	signature:(const char *s, int32_t length, UErrorCode &status)
StringEnumeration::snext	unicode/strenum.h	/^    virtual const UnicodeString* snext(UErrorCode& status) = 0;$/;"	p	class:StringEnumeration	access:public	signature:(UErrorCode& status)
StringEnumeration::unext	unicode/strenum.h	/^    virtual const UChar* unext(int32_t *resultLength, UErrorCode& status);$/;"	p	class:StringEnumeration	access:public	signature:(int32_t *resultLength, UErrorCode& status)
StringEnumeration::unext	ustrenum.cpp	/^StringEnumeration::unext(int32_t *resultLength, UErrorCode &status) {$/;"	f	class:StringEnumeration	signature:(int32_t *resultLength, UErrorCode &status)
StringEnumeration::unistr	unicode/strenum.h	/^    UnicodeString unistr;$/;"	m	class:StringEnumeration	access:protected
StringEnumeration::~StringEnumeration	unicode/strenum.h	/^    virtual ~StringEnumeration();$/;"	p	class:StringEnumeration	access:public	signature:()
StringEnumeration::~StringEnumeration	ustrenum.cpp	/^StringEnumeration::~StringEnumeration() {$/;"	f	class:StringEnumeration	signature:()
StringList	unicode/urename.h	2144;"	d
StringLocalizationInfo	unicode/urename.h	2145;"	d
StringMatcher	unicode/urename.h	2146;"	d
StringPair	serv.cpp	/^StringPair::StringPair(const UnicodeString& _displayName, $/;"	f	class:StringPair	signature:(const UnicodeString& _displayName, const UnicodeString& _id)
StringPair	unicode/urename.h	2147;"	d
StringPair::StringPair	serv.cpp	/^StringPair::StringPair(const UnicodeString& _displayName, $/;"	f	class:StringPair	signature:(const UnicodeString& _displayName, const UnicodeString& _id)
StringPair::create	serv.cpp	/^StringPair::create(const UnicodeString& displayName, $/;"	f	class:StringPair	signature:(const UnicodeString& displayName, const UnicodeString& id, UErrorCode& status)
StringPair::isBogus	serv.cpp	/^StringPair::isBogus() const {$/;"	f	class:StringPair	signature:() const
StringPiece	stringpiece.cpp	/^StringPiece::StringPiece(const StringPiece& x, int32_t pos) {$/;"	f	class:StringPiece	signature:(const StringPiece& x, int32_t pos)
StringPiece	stringpiece.cpp	/^StringPiece::StringPiece(const StringPiece& x, int32_t pos, int32_t len) {$/;"	f	class:StringPiece	signature:(const StringPiece& x, int32_t pos, int32_t len)
StringPiece	stringpiece.cpp	/^StringPiece::StringPiece(const char* str)$/;"	f	class:StringPiece	signature:(const char* str)
StringPiece	unicode/stringpiece.h	/^  StringPiece() : ptr_(NULL), length_(0) { }$/;"	f	class:StringPiece	access:public	signature:()
StringPiece	unicode/stringpiece.h	/^  StringPiece(const StringPiece& x, int32_t pos);$/;"	p	class:StringPiece	access:public	signature:(const StringPiece& x, int32_t pos)
StringPiece	unicode/stringpiece.h	/^  StringPiece(const StringPiece& x, int32_t pos, int32_t len);$/;"	p	class:StringPiece	access:public	signature:(const StringPiece& x, int32_t pos, int32_t len)
StringPiece	unicode/stringpiece.h	/^  StringPiece(const U_STD_NSQ string& str)$/;"	f	class:StringPiece	access:public	signature:(const U_STD_NSQ string& str)
StringPiece	unicode/stringpiece.h	/^  StringPiece(const char* offset, int32_t len) : ptr_(offset), length_(len) { }$/;"	f	class:StringPiece	access:public	signature:(const char* offset, int32_t len)
StringPiece	unicode/stringpiece.h	/^  StringPiece(const char* str);$/;"	p	class:StringPiece	access:public	signature:(const char* str)
StringPiece	unicode/stringpiece.h	/^class U_COMMON_API StringPiece : public UMemory {$/;"	c	inherits:UMemory
StringPiece	unicode/urename.h	2148;"	d
StringPiece::StringPiece	stringpiece.cpp	/^StringPiece::StringPiece(const StringPiece& x, int32_t pos) {$/;"	f	class:StringPiece	signature:(const StringPiece& x, int32_t pos)
StringPiece::StringPiece	stringpiece.cpp	/^StringPiece::StringPiece(const StringPiece& x, int32_t pos, int32_t len) {$/;"	f	class:StringPiece	signature:(const StringPiece& x, int32_t pos, int32_t len)
StringPiece::StringPiece	stringpiece.cpp	/^StringPiece::StringPiece(const char* str)$/;"	f	class:StringPiece	signature:(const char* str)
StringPiece::StringPiece	unicode/stringpiece.h	/^  StringPiece() : ptr_(NULL), length_(0) { }$/;"	f	class:StringPiece	access:public	signature:()
StringPiece::StringPiece	unicode/stringpiece.h	/^  StringPiece(const StringPiece& x, int32_t pos);$/;"	p	class:StringPiece	access:public	signature:(const StringPiece& x, int32_t pos)
StringPiece::StringPiece	unicode/stringpiece.h	/^  StringPiece(const StringPiece& x, int32_t pos, int32_t len);$/;"	p	class:StringPiece	access:public	signature:(const StringPiece& x, int32_t pos, int32_t len)
StringPiece::StringPiece	unicode/stringpiece.h	/^  StringPiece(const U_STD_NSQ string& str)$/;"	f	class:StringPiece	access:public	signature:(const U_STD_NSQ string& str)
StringPiece::StringPiece	unicode/stringpiece.h	/^  StringPiece(const char* offset, int32_t len) : ptr_(offset), length_(len) { }$/;"	f	class:StringPiece	access:public	signature:(const char* offset, int32_t len)
StringPiece::StringPiece	unicode/stringpiece.h	/^  StringPiece(const char* str);$/;"	p	class:StringPiece	access:public	signature:(const char* str)
StringPiece::clear	unicode/stringpiece.h	/^  void clear() { ptr_ = NULL; length_ = 0; }$/;"	f	class:StringPiece	access:public	signature:()
StringPiece::data	unicode/stringpiece.h	/^  const char* data() const { return ptr_; }$/;"	f	class:StringPiece	access:public	signature:() const
StringPiece::empty	unicode/stringpiece.h	/^  UBool empty() const { return length_ == 0; }$/;"	f	class:StringPiece	access:public	signature:() const
StringPiece::length	unicode/stringpiece.h	/^  int32_t length() const { return length_; }$/;"	f	class:StringPiece	access:public	signature:() const
StringPiece::length_	unicode/stringpiece.h	/^  int32_t       length_;$/;"	m	class:StringPiece	access:private
StringPiece::npos	stringpiece.cpp	/^const int32_t StringPiece::npos;$/;"	m	class:StringPiece	file:
StringPiece::npos	unicode/stringpiece.h	/^  static const int32_t npos = 0x7fffffff;$/;"	m	class:StringPiece	access:public
StringPiece::ptr_	unicode/stringpiece.h	/^  const char*   ptr_;$/;"	m	class:StringPiece	access:private
StringPiece::remove_prefix	unicode/stringpiece.h	/^  void remove_prefix(int32_t n) {$/;"	f	class:StringPiece	access:public	signature:(int32_t n)
StringPiece::remove_suffix	unicode/stringpiece.h	/^  void remove_suffix(int32_t n) {$/;"	f	class:StringPiece	access:public	signature:(int32_t n)
StringPiece::set	stringpiece.cpp	/^void StringPiece::set(const char* str) {$/;"	f	class:StringPiece	signature:(const char* str)
StringPiece::set	unicode/stringpiece.h	/^  void set(const char* data, int32_t len) { ptr_ = data; length_ = len; }$/;"	f	class:StringPiece	access:public	signature:(const char* data, int32_t len)
StringPiece::set	unicode/stringpiece.h	/^  void set(const char* str);$/;"	p	class:StringPiece	access:public	signature:(const char* str)
StringPiece::size	unicode/stringpiece.h	/^  int32_t size() const { return length_; }$/;"	f	class:StringPiece	access:public	signature:() const
StringPiece::substr	unicode/stringpiece.h	/^  StringPiece substr(int32_t pos, int32_t len = npos) const {$/;"	f	class:StringPiece	access:public	signature:(int32_t pos, int32_t len = npos) const
StringReplacer	unicode/urename.h	2149;"	d
StringSearch	unicode/urename.h	2150;"	d
StringThreadTest	unicode/unistr.h	/^  friend class StringThreadTest;$/;"	x
StringThreadTest	unicode/unistr.h	/^class  StringThreadTest;$/;"	x
StringToCEsMap	unicode/urename.h	2151;"	d
StripForCompareFn	ucnv_io.c	/^typedef char * U_CALLCONV StripForCompareFn(char *dst, const char *name);$/;"	t	file:
StyleRuns	unicode/urename.h	2152;"	d
SubstitutionLookup	unicode/urename.h	2153;"	d
SubtableProcessor	unicode/urename.h	2154;"	d
SunTimeAngleFunc	unicode/urename.h	2155;"	d
SymbolTable	ruleiter.h	/^class SymbolTable;$/;"	x
SymbolTable	unicode/symtable.h	/^class U_COMMON_API SymbolTable \/* not : public UObject because this is an interface\/mixin class *\/ {$/;"	c
SymbolTable	unicode/uniset.h	/^class SymbolTable;$/;"	x
SymbolTable	unicode/urename.h	2156;"	d
SymbolTable::SYMBOL_REF	unicode/symtable.h	/^    enum { SYMBOL_REF = 0x0024 \/*$*\/ };$/;"	e	enum:SymbolTable::__anon125
SymbolTable::lookup	unicode/symtable.h	/^    virtual const UnicodeString* lookup(const UnicodeString& s) const = 0;$/;"	p	class:SymbolTable	access:public	signature:(const UnicodeString& s) const
SymbolTable::lookupMatcher	unicode/symtable.h	/^    virtual const UnicodeFunctor* lookupMatcher(UChar32 ch) const = 0;$/;"	p	class:SymbolTable	access:public	signature:(UChar32 ch) const
SymbolTable::parseReference	unicode/symtable.h	/^    virtual UnicodeString parseReference(const UnicodeString& text,$/;"	p	class:SymbolTable	access:public	signature:(const UnicodeString& text, ParsePosition& pos, int32_t limit) const
SymbolTable::~SymbolTable	unicode/symtable.h	/^    virtual ~SymbolTable();$/;"	p	class:SymbolTable	access:public	signature:()
SymbolTable::~SymbolTable	uniset.cpp	/^SymbolTable::~SymbolTable() {}$/;"	f	class:SymbolTable	signature:()
TAB	uprops.h	/^    TAB     =0x0009,$/;"	e	enum:__anon90
TAMIL	ucnvisci.c	/^    TAMIL,$/;"	e	enum:__anon13	file:
TASHKEEL_SPACE_SUB	ushape.c	67;"	d	file:
TATWEEL_CHAR	ushape.c	73;"	d	file:
TELUGU	ucnvisci.c	/^    TELUGU,$/;"	e	enum:__anon13	file:
TELUGU_DELTA	ucnvisci.c	52;"	d	file:
THAI_LOOKAHEAD	dictbe.cpp	193;"	d	file:
THAI_MAIYAMOK	dictbe.cpp	206;"	d	file:
THAI_MIN_WORD	dictbe.cpp	209;"	d	file:
THAI_MIN_WORD_SPAN	dictbe.cpp	212;"	d	file:
THAI_PAIYANNOI	dictbe.cpp	203;"	d	file:
THAI_PREFIX_COMBINE_THRESHOLD	dictbe.cpp	200;"	d	file:
THAI_ROOT_COMBINE_THRESHOLD	dictbe.cpp	196;"	d	file:
THIS	ustrenum.cpp	160;"	d	file:
TILDE	ucnv_u7.c	91;"	d	file:
TILDE_ESCAPE	ucnvhz.c	34;"	d	file:
TIME_ZONE_INFORMATION	wintz.h	/^typedef struct _TIME_ZONE_INFORMATION TIME_ZONE_INFORMATION;$/;"	t	typeref:struct:_TIME_ZONE_INFORMATION
TLG	ucnvisci.c	/^    TLG = 0x45,$/;"	e	enum:__anon14	file:
TMAX	punycode.c	61;"	d	file:
TMIN	punycode.c	60;"	d	file:
TML	ucnvisci.c	/^    TML = 0x44,$/;"	e	enum:__anon14	file:
TML_MASK	ucnvisci.c	/^    TML_MASK =0x01,$/;"	e	enum:__anon15	file:
TOP	usc_impl.c	32;"	d	file:
TO_BASE64_IMAP	ucnv_u7.c	842;"	d	file:
TO_LOWER	ustr_imp.h	/^    TO_LOWER,$/;"	e	enum:__anon73
TO_TITLE	ustr_imp.h	/^    TO_TITLE,$/;"	e	enum:__anon73
TO_UPPER	ustr_imp.h	/^    TO_UPPER,$/;"	e	enum:__anon73
TO_U_USE_FALLBACK	ucnv_cnv.h	265;"	d
TRIEDICT_H	triedict.h	9;"	d
TRUE	unicode/umachine.h	223;"	d
TYPEALIAS	uloc_tag.c	553;"	d	file:
TYPEMAP	uloc_tag.c	552;"	d	file:
TZDEFAULT	putil.c	659;"	d	file:
TZEnumeration	unicode/urename.h	2157;"	d
TZFILE_SKIP	putil.c	663;"	d	file:
TZFILE_SKIP2	putil.c	667;"	d	file:
TZI	wintz.c	/^} TZI;$/;"	t	typeref:struct:__anon1	file:
TZI_REGKEY	wintz.c	/^static const char TZI_REGKEY[] = "TZI";$/;"	v	file:
TZZONEINFO	putil.c	657;"	d	file:
TZZONEINFO	putil.c	660;"	d	file:
TZ_REGKEY	wintz.c	/^static const char* const TZ_REGKEY[] = {$/;"	v	file:
T_CString_int64ToString	cstring.c	/^T_CString_int64ToString(char* buffer, int64_t v, uint32_t radix)$/;"	f	signature:(char* buffer, int64_t v, uint32_t radix)
T_CString_int64ToString	cstring.h	/^T_CString_int64ToString(char *buffer, int64_t n, uint32_t radix);$/;"	p	signature:(char *buffer, int64_t n, uint32_t radix)
T_CString_int64ToString	unicode/urename.h	54;"	d
T_CString_integerToString	cstring.c	/^T_CString_integerToString(char* buffer, int32_t v, int32_t radix)$/;"	f	signature:(char* buffer, int32_t v, int32_t radix)
T_CString_integerToString	cstring.h	/^T_CString_integerToString(char *buffer, int32_t n, int32_t radix);$/;"	p	signature:(char *buffer, int32_t n, int32_t radix)
T_CString_integerToString	unicode/urename.h	55;"	d
T_CString_itosOffset	cstring.h	83;"	d
T_CString_stricmp	cstring.c	/^T_CString_stricmp(const char *str1, const char *str2) {$/;"	f	signature:(const char *str1, const char *str2)
T_CString_stricmp	cstring.h	/^T_CString_stricmp(const char *str1, const char *str2);$/;"	p	signature:(const char *str1, const char *str2)
T_CString_stricmp	unicode/urename.h	56;"	d
T_CString_stringToInteger	cstring.c	/^T_CString_stringToInteger(const char *integerString, int32_t radix)$/;"	f	signature:(const char *integerString, int32_t radix)
T_CString_stringToInteger	cstring.h	/^T_CString_stringToInteger(const char *integerString, int32_t radix);$/;"	p	signature:(const char *integerString, int32_t radix)
T_CString_stringToInteger	unicode/urename.h	57;"	d
T_CString_strnicmp	cstring.c	/^T_CString_strnicmp(const char *str1, const char *str2, uint32_t n) {$/;"	f	signature:(const char *str1, const char *str2, uint32_t n)
T_CString_strnicmp	cstring.h	/^T_CString_strnicmp(const char *str1, const char *str2, uint32_t n);$/;"	p	signature:(const char *str1, const char *str2, uint32_t n)
T_CString_strnicmp	unicode/urename.h	58;"	d
T_CString_toLowerCase	cstring.c	/^T_CString_toLowerCase(char* str)$/;"	f	signature:(char* str)
T_CString_toLowerCase	cstring.h	/^T_CString_toLowerCase(char* str);$/;"	p	signature:(char* str)
T_CString_toLowerCase	unicode/urename.h	59;"	d
T_CString_toUpperCase	cstring.c	/^T_CString_toUpperCase(char* str)$/;"	f	signature:(char* str)
T_CString_toUpperCase	cstring.h	/^T_CString_toUpperCase(char* str);$/;"	p	signature:(char* str)
T_CString_toUpperCase	unicode/urename.h	60;"	d
T_UConverter_fromUnicode_UTF32_BE	ucnv_u32.c	/^T_UConverter_fromUnicode_UTF32_BE(UConverterFromUnicodeArgs * args,$/;"	f	file:	signature:(UConverterFromUnicodeArgs * args, UErrorCode * err)
T_UConverter_fromUnicode_UTF32_BE_OFFSET_LOGIC	ucnv_u32.c	/^T_UConverter_fromUnicode_UTF32_BE_OFFSET_LOGIC(UConverterFromUnicodeArgs * args,$/;"	f	file:	signature:(UConverterFromUnicodeArgs * args, UErrorCode * err)
T_UConverter_fromUnicode_UTF32_LE	ucnv_u32.c	/^T_UConverter_fromUnicode_UTF32_LE(UConverterFromUnicodeArgs * args,$/;"	f	file:	signature:(UConverterFromUnicodeArgs * args, UErrorCode * err)
T_UConverter_fromUnicode_UTF32_LE_OFFSET_LOGIC	ucnv_u32.c	/^T_UConverter_fromUnicode_UTF32_LE_OFFSET_LOGIC(UConverterFromUnicodeArgs * args,$/;"	f	file:	signature:(UConverterFromUnicodeArgs * args, UErrorCode * err)
T_UConverter_getNextUChar_UTF32_BE	ucnv_u32.c	/^T_UConverter_getNextUChar_UTF32_BE(UConverterToUnicodeArgs* args,$/;"	f	file:	signature:(UConverterToUnicodeArgs* args, UErrorCode* err)
T_UConverter_getNextUChar_UTF32_LE	ucnv_u32.c	/^T_UConverter_getNextUChar_UTF32_LE(UConverterToUnicodeArgs* args,$/;"	f	file:	signature:(UConverterToUnicodeArgs* args, UErrorCode* err)
T_UConverter_toUnicode_ISO_2022_OFFSETS_LOGIC	ucnv2022.c	/^T_UConverter_toUnicode_ISO_2022_OFFSETS_LOGIC(UConverterToUnicodeArgs* args, UErrorCode* err);$/;"	p	file:	signature:(UConverterToUnicodeArgs* args, UErrorCode* err)
T_UConverter_toUnicode_ISO_2022_OFFSETS_LOGIC	ucnv2022.c	/^T_UConverter_toUnicode_ISO_2022_OFFSETS_LOGIC(UConverterToUnicodeArgs* args,$/;"	f	file:	signature:(UConverterToUnicodeArgs* args, UErrorCode* err)
T_UConverter_toUnicode_UTF32_BE	ucnv_u32.c	/^T_UConverter_toUnicode_UTF32_BE(UConverterToUnicodeArgs * args,$/;"	f	file:	signature:(UConverterToUnicodeArgs * args, UErrorCode * err)
T_UConverter_toUnicode_UTF32_BE_OFFSET_LOGIC	ucnv_u32.c	/^T_UConverter_toUnicode_UTF32_BE_OFFSET_LOGIC(UConverterToUnicodeArgs * args,$/;"	f	file:	signature:(UConverterToUnicodeArgs * args, UErrorCode * err)
T_UConverter_toUnicode_UTF32_LE	ucnv_u32.c	/^T_UConverter_toUnicode_UTF32_LE(UConverterToUnicodeArgs * args,$/;"	f	file:	signature:(UConverterToUnicodeArgs * args, UErrorCode * err)
T_UConverter_toUnicode_UTF32_LE_OFFSET_LOGIC	ucnv_u32.c	/^T_UConverter_toUnicode_UTF32_LE_OFFSET_LOGIC(UConverterToUnicodeArgs * args,$/;"	f	file:	signature:(UConverterToUnicodeArgs * args, UErrorCode * err)
TaiwanCalendar	unicode/urename.h	2158;"	d
Target	unicode/urename.h	2159;"	d
TempAliasTable	ucnv_io.c	/^typedef struct TempAliasTable {$/;"	s	file:
TempAliasTable	ucnv_io.c	/^} TempAliasTable;$/;"	t	typeref:struct:TempAliasTable	file:
TempAliasTable::chars	ucnv_io.c	/^    const char *chars;$/;"	m	struct:TempAliasTable	file:	access:public
TempAliasTable::resort	ucnv_io.c	/^    uint16_t *resort;$/;"	m	struct:TempAliasTable	file:	access:public
TempAliasTable::rows	ucnv_io.c	/^    TempRow *rows;$/;"	m	struct:TempAliasTable	file:	access:public
TempAliasTable::stripForCompare	ucnv_io.c	/^    StripForCompareFn *stripForCompare;$/;"	m	struct:TempAliasTable	file:	access:public
TempRow	ucnv_io.c	/^typedef struct TempRow {$/;"	s	file:
TempRow	ucnv_io.c	/^} TempRow;$/;"	t	typeref:struct:TempRow	file:
TempRow::sortIndex	ucnv_io.c	/^    uint16_t strIndex, sortIndex;$/;"	m	struct:TempRow	file:	access:public
TempRow::strIndex	ucnv_io.c	/^    uint16_t strIndex, sortIndex;$/;"	m	struct:TempRow	file:	access:public
TempTable	uresdata.c	/^typedef struct TempTable {$/;"	s	file:
TempTable	uresdata.c	/^} TempTable;$/;"	t	typeref:struct:TempTable	file:
TempTable::keyChars	uresdata.c	/^    const char *keyChars;$/;"	m	struct:TempTable	file:	access:public
TempTable::localKeyLimit	uresdata.c	/^    int32_t localKeyLimit;$/;"	m	struct:TempTable	file:	access:public
TempTable::majorFormatVersion	uresdata.c	/^    uint8_t majorFormatVersion;$/;"	m	struct:TempTable	file:	access:public
TempTable::resFlags	uresdata.c	/^    uint32_t *resFlags;$/;"	m	struct:TempTable	file:	access:public
TempTable::resort	uresdata.c	/^    int32_t *resort;$/;"	m	struct:TempTable	file:	access:public
TempTable::rows	uresdata.c	/^    Row *rows;$/;"	m	struct:TempTable	file:	access:public
TernaryNode	triedict.cpp	/^    TernaryNode(UChar uc);$/;"	p	struct:TernaryNode	file:	access:public	signature:(UChar uc)
TernaryNode	triedict.cpp	/^TernaryNode::TernaryNode(UChar uc) {$/;"	f	class:TernaryNode	signature:(UChar uc)
TernaryNode	triedict.cpp	/^struct TernaryNode : public UMemory {$/;"	s	file:	inherits:UMemory
TernaryNode	triedict.h	/^struct TernaryNode;             \/\/ Forwards declaration$/;"	x
TernaryNode	unicode/urename.h	2160;"	d
TernaryNode::TernaryNode	triedict.cpp	/^    TernaryNode(UChar uc);$/;"	p	struct:TernaryNode	file:	access:public	signature:(UChar uc)
TernaryNode::TernaryNode	triedict.cpp	/^TernaryNode::TernaryNode(UChar uc) {$/;"	f	class:TernaryNode	signature:(UChar uc)
TernaryNode::ch	triedict.cpp	/^    UChar       ch;         \/\/ UTF-16 code unit$/;"	m	struct:TernaryNode	file:	access:public
TernaryNode::equal	triedict.cpp	/^    TernaryNode *equal;     \/\/ Equal link$/;"	m	struct:TernaryNode	file:	access:public
TernaryNode::flags	triedict.cpp	/^    uint16_t    flags;      \/\/ Flag word$/;"	m	struct:TernaryNode	file:	access:public
TernaryNode::high	triedict.cpp	/^    TernaryNode *high;      \/\/ Greater-than link$/;"	m	struct:TernaryNode	file:	access:public
TernaryNode::low	triedict.cpp	/^    TernaryNode *low;       \/\/ Less-than link$/;"	m	struct:TernaryNode	file:	access:public
TernaryNode::~TernaryNode	triedict.cpp	/^    ~TernaryNode();$/;"	p	struct:TernaryNode	file:	access:public	signature:()
TernaryNode::~TernaryNode	triedict.cpp	/^TernaryNode::~TernaryNode() {$/;"	f	class:TernaryNode	signature:()
TextTrieMap	unicode/urename.h	2161;"	d
TextTrieMapSearchResultHandler	unicode/urename.h	2162;"	d
ThaiBreakEngine	dictbe.cpp	/^ThaiBreakEngine::ThaiBreakEngine(const TrieWordDictionary *adoptDictionary, UErrorCode &status)$/;"	f	class:ThaiBreakEngine	signature:(const TrieWordDictionary *adoptDictionary, UErrorCode &status)
ThaiBreakEngine	dictbe.h	/^  ThaiBreakEngine(const TrieWordDictionary *adoptDictionary, UErrorCode &status);$/;"	p	class:ThaiBreakEngine	access:public	signature:(const TrieWordDictionary *adoptDictionary, UErrorCode &status)
ThaiBreakEngine	dictbe.h	/^class ThaiBreakEngine : public DictionaryBreakEngine {$/;"	c	inherits:DictionaryBreakEngine
ThaiBreakEngine	unicode/urename.h	2163;"	d
ThaiBreakEngine::ThaiBreakEngine	dictbe.cpp	/^ThaiBreakEngine::ThaiBreakEngine(const TrieWordDictionary *adoptDictionary, UErrorCode &status)$/;"	f	class:ThaiBreakEngine	signature:(const TrieWordDictionary *adoptDictionary, UErrorCode &status)
ThaiBreakEngine::ThaiBreakEngine	dictbe.h	/^  ThaiBreakEngine(const TrieWordDictionary *adoptDictionary, UErrorCode &status);$/;"	p	class:ThaiBreakEngine	access:public	signature:(const TrieWordDictionary *adoptDictionary, UErrorCode &status)
ThaiBreakEngine::divideUpDictionaryRange	dictbe.cpp	/^ThaiBreakEngine::divideUpDictionaryRange( UText *text,$/;"	f	class:ThaiBreakEngine	signature:( UText *text, int32_t rangeStart, int32_t rangeEnd, UStack &foundBreaks ) const
ThaiBreakEngine::divideUpDictionaryRange	dictbe.h	/^  virtual int32_t divideUpDictionaryRange( UText *text,$/;"	p	class:ThaiBreakEngine	access:protected	signature:( UText *text, int32_t rangeStart, int32_t rangeEnd, UStack &foundBreaks ) const
ThaiBreakEngine::fBeginWordSet	dictbe.h	/^  UnicodeSet                fBeginWordSet;$/;"	m	class:ThaiBreakEngine	access:private
ThaiBreakEngine::fDictionary	dictbe.h	/^  const TrieWordDictionary  *fDictionary;$/;"	m	class:ThaiBreakEngine	access:private
ThaiBreakEngine::fEndWordSet	dictbe.h	/^  UnicodeSet                fEndWordSet;$/;"	m	class:ThaiBreakEngine	access:private
ThaiBreakEngine::fMarkSet	dictbe.h	/^  UnicodeSet                fMarkSet;$/;"	m	class:ThaiBreakEngine	access:private
ThaiBreakEngine::fSuffixSet	dictbe.h	/^  UnicodeSet                fSuffixSet;$/;"	m	class:ThaiBreakEngine	access:private
ThaiBreakEngine::fThaiWordSet	dictbe.h	/^  UnicodeSet                fThaiWordSet;$/;"	m	class:ThaiBreakEngine	access:private
ThaiBreakEngine::~ThaiBreakEngine	dictbe.cpp	/^ThaiBreakEngine::~ThaiBreakEngine() {$/;"	f	class:ThaiBreakEngine	signature:()
ThaiBreakEngine::~ThaiBreakEngine	dictbe.h	/^  virtual ~ThaiBreakEngine();$/;"	p	class:ThaiBreakEngine	access:public	signature:()
ThaiLayoutEngine	unicode/urename.h	2164;"	d
ThaiShaping	unicode/urename.h	2165;"	d
TibetanClassTable	unicode/urename.h	2166;"	d
TibetanOpenTypeLayoutEngine	unicode/urename.h	2167;"	d
TibetanReordering	unicode/urename.h	2168;"	d
TimeArrayTimeZoneRule	unicode/urename.h	2169;"	d
TimeUnit	unicode/urename.h	2170;"	d
TimeUnitAmount	unicode/urename.h	2171;"	d
TimeUnitFormat	unicode/urename.h	2172;"	d
TimeZone	unicode/urename.h	2173;"	d
TimeZoneRule	unicode/urename.h	2174;"	d
TimeZoneTransition	unicode/urename.h	2175;"	d
TitlecaseTransliterator	unicode/urename.h	2176;"	d
ToCPFuncs	ucmndata.c	/^static const commonDataFuncs ToCPFuncs = {pointerTOCLookupFn, pointerTOCEntryCount};$/;"	v	file:
TransliterationRule	unicode/urename.h	2177;"	d
TransliterationRuleData	unicode/unifunct.h	/^class TransliterationRuleData;$/;"	x
TransliterationRuleData	unicode/urename.h	2178;"	d
TransliterationRuleSet	unicode/urename.h	2179;"	d
Transliterator	unicode/urename.h	2180;"	d
TransliteratorAlias	unicode/urename.h	2181;"	d
TransliteratorEntry	unicode/urename.h	2182;"	d
TransliteratorIDParser	unicode/urename.h	2183;"	d
TransliteratorParser	unicode/urename.h	2184;"	d
TransliteratorRegistry	unicode/urename.h	2185;"	d
TransliteratorSpec	unicode/urename.h	2186;"	d
TriStateSingleton	mutex.h	/^struct TriStateSingleton {$/;"	s
TriStateSingleton	unicode/urename.h	2187;"	d
TriStateSingleton::fErrorCode	mutex.h	/^    UErrorCode fErrorCode;$/;"	m	struct:TriStateSingleton	access:public
TriStateSingleton::fHaveInstance	mutex.h	/^    int8_t fHaveInstance;$/;"	m	struct:TriStateSingleton	access:public
TriStateSingleton::fInstance	mutex.h	/^    void *fInstance;$/;"	m	struct:TriStateSingleton	access:public
TriStateSingleton::getInstance	mutex.cpp	/^void *TriStateSingleton::getInstance(InstantiatorFn *instantiator, const void *context,$/;"	f	class:TriStateSingleton	signature:(InstantiatorFn *instantiator, const void *context, void *&duplicate, UErrorCode &errorCode)
TriStateSingleton::getInstance	mutex.h	/^    void *getInstance(InstantiatorFn *instantiator, const void *context,$/;"	p	struct:TriStateSingleton	access:public	signature:(InstantiatorFn *instantiator, const void *context, void *&duplicate, UErrorCode &errorCode)
TriStateSingleton::reset	mutex.cpp	/^void TriStateSingleton::reset() {$/;"	f	class:TriStateSingleton	signature:()
TriStateSingleton::reset	mutex.h	/^    void reset();$/;"	p	struct:TriStateSingleton	access:public	signature:()
TriStateSingletonWrapper	mutex.h	/^    TriStateSingletonWrapper(TriStateSingleton &s) : singleton(s) {}$/;"	f	class:TriStateSingletonWrapper	access:public	signature:(TriStateSingleton &s)
TriStateSingletonWrapper	mutex.h	/^class TriStateSingletonWrapper {$/;"	c
TriStateSingletonWrapper::TriStateSingletonWrapper	mutex.h	/^    TriStateSingletonWrapper(TriStateSingleton &s) : singleton(s) {}$/;"	f	class:TriStateSingletonWrapper	access:public	signature:(TriStateSingleton &s)
TriStateSingletonWrapper::deleteInstance	mutex.h	/^    void deleteInstance() {$/;"	f	class:TriStateSingletonWrapper	access:public	signature:()
TriStateSingletonWrapper::getInstance	mutex.h	/^    T *getInstance(InstantiatorFn *instantiator, const void *context,$/;"	f	class:TriStateSingletonWrapper	access:public	signature:(InstantiatorFn *instantiator, const void *context, UErrorCode &errorCode)
TriStateSingletonWrapper::singleton	mutex.h	/^    TriStateSingleton &singleton;$/;"	m	class:TriStateSingletonWrapper	access:private
TrieWordDictionary	dictbe.h	/^class TrieWordDictionary;$/;"	x
TrieWordDictionary	triedict.cpp	/^TrieWordDictionary::TrieWordDictionary() {$/;"	f	class:TrieWordDictionary	signature:()
TrieWordDictionary	triedict.h	/^  TrieWordDictionary();$/;"	p	class:TrieWordDictionary	access:public	signature:()
TrieWordDictionary	triedict.h	/^class U_COMMON_API TrieWordDictionary : public UMemory {$/;"	c	inherits:UMemory
TrieWordDictionary	unicode/urename.h	2188;"	d
TrieWordDictionary::TrieWordDictionary	triedict.cpp	/^TrieWordDictionary::TrieWordDictionary() {$/;"	f	class:TrieWordDictionary	signature:()
TrieWordDictionary::TrieWordDictionary	triedict.h	/^  TrieWordDictionary();$/;"	p	class:TrieWordDictionary	access:public	signature:()
TrieWordDictionary::matches	triedict.h	/^  virtual int32_t matches( UText *text,$/;"	p	class:TrieWordDictionary	access:public	signature:( UText *text, int32_t maxLength, int32_t *lengths, int &count, int limit ) const
TrieWordDictionary::openWords	triedict.h	/^  virtual StringEnumeration *openWords( UErrorCode &status ) const = 0;$/;"	p	class:TrieWordDictionary	access:public	signature:( UErrorCode &status ) const
TrieWordDictionary::~TrieWordDictionary	triedict.cpp	/^TrieWordDictionary::~TrieWordDictionary() {$/;"	f	class:TrieWordDictionary	signature:()
TrieWordDictionary::~TrieWordDictionary	triedict.h	/^  virtual ~TrieWordDictionary();$/;"	p	class:TrieWordDictionary	access:public	signature:()
TrimmedArrayProcessor	unicode/urename.h	2189;"	d
U16_APPEND	unicode/utf16.h	311;"	d
U16_APPEND_UNSAFE	unicode/utf16.h	285;"	d
U16_BACK_1	unicode/utf16.h	525;"	d
U16_BACK_1_UNSAFE	unicode/utf16.h	507;"	d
U16_BACK_N	unicode/utf16.h	566;"	d
U16_BACK_N_UNSAFE	unicode/utf16.h	544;"	d
U16_FWD_1	unicode/utf16.h	349;"	d
U16_FWD_1_UNSAFE	unicode/utf16.h	332;"	d
U16_FWD_N	unicode/utf16.h	388;"	d
U16_FWD_N_UNSAFE	unicode/utf16.h	367;"	d
U16_GET	unicode/utf16.h	197;"	d
U16_GET_SUPPLEMENTARY	unicode/utf16.h	111;"	d
U16_GET_UNSAFE	unicode/utf16.h	166;"	d
U16_IS_LEAD	unicode/utf16.h	58;"	d
U16_IS_SINGLE	unicode/utf16.h	50;"	d
U16_IS_SURROGATE	unicode/utf16.h	74;"	d
U16_IS_SURROGATE_LEAD	unicode/utf16.h	83;"	d
U16_IS_SURROGATE_TRAIL	unicode/utf16.h	92;"	d
U16_IS_TRAIL	unicode/utf16.h	66;"	d
U16_LEAD	unicode/utf16.h	122;"	d
U16_LENGTH	unicode/utf16.h	140;"	d
U16_MAX_LENGTH	unicode/utf16.h	147;"	d
U16_NEXT	unicode/utf16.h	261;"	d
U16_NEXT_UNSAFE	unicode/utf16.h	234;"	d
U16_PREV	unicode/utf16.h	485;"	d
U16_PREV_UNSAFE	unicode/utf16.h	457;"	d
U16_SET_CP_LIMIT	unicode/utf16.h	608;"	d
U16_SET_CP_LIMIT_UNSAFE	unicode/utf16.h	587;"	d
U16_SET_CP_START	unicode/utf16.h	429;"	d
U16_SET_CP_START_UNSAFE	unicode/utf16.h	409;"	d
U16_SURROGATE_OFFSET	unicode/utf16.h	98;"	d
U16_TRAIL	unicode/utf16.h	131;"	d
U8_APPEND	unicode/utf8.h	361;"	d
U8_APPEND_UNSAFE	unicode/utf8.h	325;"	d
U8_BACK_1	unicode/utf8.h	594;"	d
U8_BACK_1_UNSAFE	unicode/utf8.h	578;"	d
U8_BACK_N	unicode/utf8.h	635;"	d
U8_BACK_N_UNSAFE	unicode/utf8.h	613;"	d
U8_COUNT_TRAIL_BYTES	unicode/utf8.h	71;"	d
U8_FWD_1	unicode/utf8.h	401;"	d
U8_FWD_1_UNSAFE	unicode/utf8.h	386;"	d
U8_FWD_N	unicode/utf8.h	448;"	d
U8_FWD_N_UNSAFE	unicode/utf8.h	427;"	d
U8_GET	unicode/utf8.h	221;"	d
U8_GET_UNSAFE	unicode/utf8.h	197;"	d
U8_IS_LEAD	unicode/utf8.h	146;"	d
U8_IS_SINGLE	unicode/utf8.h	138;"	d
U8_IS_TRAIL	unicode/utf8.h	154;"	d
U8_LENGTH	unicode/utf8.h	163;"	d
U8_MASK_LEAD_BYTE	unicode/utf8.h	80;"	d
U8_MAX_LENGTH	unicode/utf8.h	179;"	d
U8_NEXT	unicode/utf8.h	283;"	d
U8_NEXT_UNSAFE	unicode/utf8.h	246;"	d
U8_PREV	unicode/utf8.h	556;"	d
U8_PREV_UNSAFE	unicode/utf8.h	514;"	d
U8_SET_CP_LIMIT	unicode/utf8.h	676;"	d
U8_SET_CP_LIMIT_UNSAFE	unicode/utf8.h	656;"	d
U8_SET_CP_START	unicode/utf8.h	487;"	d
U8_SET_CP_START_UNSAFE	unicode/utf8.h	469;"	d
UAcceptResult	unicode/uloc.h	/^} UAcceptResult;$/;"	t	typeref:enum:__anon102
UAliasContext	ucnv_io.c	/^typedef struct UAliasContext {$/;"	s	file:
UAliasContext	ucnv_io.c	/^} UAliasContext;$/;"	t	typeref:struct:UAliasContext	file:
UAliasContext::listIdx	ucnv_io.c	/^    uint32_t listIdx;$/;"	m	struct:UAliasContext	file:	access:public
UAliasContext::listOffset	ucnv_io.c	/^    uint32_t listOffset;$/;"	m	struct:UAliasContext	file:	access:public
UAlignedMemory	cmemory.h	/^} UAlignedMemory;$/;"	t	typeref:union:__anon91
UAmbiguousConverter	ucnv.c	/^typedef struct UAmbiguousConverter {$/;"	s	file:
UAmbiguousConverter	ucnv.c	/^} UAmbiguousConverter;$/;"	t	typeref:struct:UAmbiguousConverter	file:
UAmbiguousConverter::name	ucnv.c	/^    const char *name;$/;"	m	struct:UAmbiguousConverter	file:	access:public
UAmbiguousConverter::variant5c	ucnv.c	/^    const UChar variant5c;$/;"	m	struct:UAmbiguousConverter	file:	access:public
UBIDIIMP_H	ubidiimp.h	18;"	d
UBIDI_BIDI_CONTROL_SHIFT	ubidi_props.h	/^    UBIDI_BIDI_CONTROL_SHIFT=11,$/;"	e	enum:__anon136
UBIDI_CLASS_MASK	ubidi_props.h	113;"	d
UBIDI_DATA_NAME	ubidi_props.h	73;"	d
UBIDI_DATA_TYPE	ubidi_props.h	74;"	d
UBIDI_DEFAULT_LTR	unicode/ubidi.h	356;"	d
UBIDI_DEFAULT_RTL	unicode/ubidi.h	383;"	d
UBIDI_DO_MIRRORING	unicode/ubidi.h	1755;"	d
UBIDI_ESC_MIRROR_DELTA	ubidi_props.h	/^    UBIDI_ESC_MIRROR_DELTA=-4,$/;"	e	enum:__anon137
UBIDI_FMT_0	ubidi_props.h	77;"	d
UBIDI_FMT_1	ubidi_props.h	78;"	d
UBIDI_FMT_2	ubidi_props.h	79;"	d
UBIDI_FMT_3	ubidi_props.h	80;"	d
UBIDI_GET_CLASS	ubidi_props.h	118;"	d
UBIDI_GET_FLAG	ubidi_props.h	119;"	d
UBIDI_GET_MIRROR_CODE_POINT	ubidi_props.h	135;"	d
UBIDI_GET_MIRROR_INDEX	ubidi_props.h	137;"	d
UBIDI_H	unicode/ubidi.h	18;"	d
UBIDI_INSERT_LRM_FOR_NUMERIC	unicode/ubidi.h	1769;"	d
UBIDI_IS_MIRRORED_SHIFT	ubidi_props.h	/^    UBIDI_IS_MIRRORED_SHIFT=12,         \/* 'is mirrored' *\/$/;"	e	enum:__anon136
UBIDI_IX_INDEX_TOP	ubidi_props.h	/^    UBIDI_IX_INDEX_TOP,$/;"	e	enum:__anon135
UBIDI_IX_JG_LIMIT	ubidi_props.h	/^    UBIDI_IX_JG_LIMIT,$/;"	e	enum:__anon135
UBIDI_IX_JG_START	ubidi_props.h	/^    UBIDI_IX_JG_START,$/;"	e	enum:__anon135
UBIDI_IX_LENGTH	ubidi_props.h	/^    UBIDI_IX_LENGTH,$/;"	e	enum:__anon135
UBIDI_IX_MIRROR_LENGTH	ubidi_props.h	/^    UBIDI_IX_MIRROR_LENGTH,$/;"	e	enum:__anon135
UBIDI_IX_TOP	ubidi_props.h	/^    UBIDI_IX_TOP=16$/;"	e	enum:__anon135
UBIDI_IX_TRIE_SIZE	ubidi_props.h	/^    UBIDI_IX_TRIE_SIZE,$/;"	e	enum:__anon135
UBIDI_JOIN_CONTROL_SHIFT	ubidi_props.h	/^    UBIDI_JOIN_CONTROL_SHIFT=10,$/;"	e	enum:__anon136
UBIDI_JT_MASK	ubidi_props.h	114;"	d
UBIDI_JT_SHIFT	ubidi_props.h	/^    UBIDI_JT_SHIFT=5,           \/* joining type: 3 bits (7..5) *\/$/;"	e	enum:__anon136
UBIDI_KEEP_BASE_COMBINING	unicode/ubidi.h	1745;"	d
UBIDI_LEVEL_OVERRIDE	unicode/ubidi.h	396;"	d
UBIDI_LTR	unicode/ubidi.h	/^  UBIDI_LTR,$/;"	e	enum:UBiDiDirection
UBIDI_MAP_NOWHERE	unicode/ubidi.h	411;"	d
UBIDI_MAX_EXPLICIT_LEVEL	unicode/ubidi.h	390;"	d
UBIDI_MAX_JG_MASK	ubidi_props.h	116;"	d
UBIDI_MAX_JG_SHIFT	ubidi_props.h	/^    UBIDI_MAX_JG_SHIFT=16               \/* max JG value in indexes[UBIDI_MAX_VALUES_INDEX] bits 23..16 *\/$/;"	e	enum:__anon136
UBIDI_MAX_MIRROR_DELTA	ubidi_props.h	/^    UBIDI_MAX_MIRROR_DELTA=3$/;"	e	enum:__anon137
UBIDI_MAX_MIRROR_INDEX	ubidi_props.h	/^    UBIDI_MAX_MIRROR_INDEX=0x7ff$/;"	e	enum:__anon138
UBIDI_MAX_VALUES_INDEX	ubidi_props.h	/^    UBIDI_MAX_VALUES_INDEX=15,$/;"	e	enum:__anon135
UBIDI_MIN_MIRROR_DELTA	ubidi_props.h	/^    UBIDI_MIN_MIRROR_DELTA=-3,$/;"	e	enum:__anon137
UBIDI_MIRROR_DELTA_SHIFT	ubidi_props.h	/^    UBIDI_MIRROR_DELTA_SHIFT=13,        \/* bidi mirroring delta: 3 bits (15..13) *\/$/;"	e	enum:__anon136
UBIDI_MIRROR_INDEX_SHIFT	ubidi_props.h	/^    UBIDI_MIRROR_INDEX_SHIFT=21,$/;"	e	enum:__anon138
UBIDI_MIXED	unicode/ubidi.h	/^  UBIDI_MIXED,$/;"	e	enum:UBiDiDirection
UBIDI_NEUTRAL	unicode/ubidi.h	/^  UBIDI_NEUTRAL$/;"	e	enum:UBiDiDirection
UBIDI_OPTION_DEFAULT	unicode/ubidi.h	/^    UBIDI_OPTION_DEFAULT = 0,$/;"	e	enum:UBiDiReorderingOption
UBIDI_OPTION_INSERT_MARKS	unicode/ubidi.h	/^    UBIDI_OPTION_INSERT_MARKS = 1,$/;"	e	enum:UBiDiReorderingOption
UBIDI_OPTION_REMOVE_CONTROLS	unicode/ubidi.h	/^    UBIDI_OPTION_REMOVE_CONTROLS = 2,$/;"	e	enum:UBiDiReorderingOption
UBIDI_OPTION_STREAMING	unicode/ubidi.h	/^    UBIDI_OPTION_STREAMING = 4$/;"	e	enum:UBiDiReorderingOption
UBIDI_OUTPUT_REVERSE	unicode/ubidi.h	1798;"	d
UBIDI_REMOVE_BIDI_CONTROLS	unicode/ubidi.h	1782;"	d
UBIDI_REORDER_COUNT	unicode/ubidi.h	/^    UBIDI_REORDER_COUNT$/;"	e	enum:UBiDiReorderingMode
UBIDI_REORDER_DEFAULT	unicode/ubidi.h	/^    UBIDI_REORDER_DEFAULT = 0,$/;"	e	enum:UBiDiReorderingMode
UBIDI_REORDER_GROUP_NUMBERS_WITH_R	unicode/ubidi.h	/^    UBIDI_REORDER_GROUP_NUMBERS_WITH_R,$/;"	e	enum:UBiDiReorderingMode
UBIDI_REORDER_INVERSE_FOR_NUMBERS_SPECIAL	unicode/ubidi.h	/^    UBIDI_REORDER_INVERSE_FOR_NUMBERS_SPECIAL,$/;"	e	enum:UBiDiReorderingMode
UBIDI_REORDER_INVERSE_LIKE_DIRECT	unicode/ubidi.h	/^    UBIDI_REORDER_INVERSE_LIKE_DIRECT,$/;"	e	enum:UBiDiReorderingMode
UBIDI_REORDER_INVERSE_NUMBERS_AS_L	unicode/ubidi.h	/^    UBIDI_REORDER_INVERSE_NUMBERS_AS_L,$/;"	e	enum:UBiDiReorderingMode
UBIDI_REORDER_LAST_LOGICAL_TO_VISUAL	ubidiimp.h	246;"	d
UBIDI_REORDER_NUMBERS_SPECIAL	unicode/ubidi.h	/^    UBIDI_REORDER_NUMBERS_SPECIAL,$/;"	e	enum:UBiDiReorderingMode
UBIDI_REORDER_RUNS_ONLY	unicode/ubidi.h	/^    UBIDI_REORDER_RUNS_ONLY,$/;"	e	enum:UBiDiReorderingMode
UBIDI_RTL	unicode/ubidi.h	/^  UBIDI_RTL,$/;"	e	enum:UBiDiDirection
UBLOCK_AEGEAN_NUMBERS	unicode/uchar.h	/^    UBLOCK_AEGEAN_NUMBERS = 119, \/*[10100]*\/$/;"	e	enum:UBlockCode
UBLOCK_ALCHEMICAL_SYMBOLS	unicode/uchar.h	/^    UBLOCK_ALCHEMICAL_SYMBOLS = 208, \/*[1F700]*\/$/;"	e	enum:UBlockCode
UBLOCK_ALPHABETIC_PRESENTATION_FORMS	unicode/uchar.h	/^    UBLOCK_ALPHABETIC_PRESENTATION_FORMS =80, \/*[FB00]*\/$/;"	e	enum:UBlockCode
UBLOCK_ANCIENT_GREEK_MUSICAL_NOTATION	unicode/uchar.h	/^    UBLOCK_ANCIENT_GREEK_MUSICAL_NOTATION = 126, \/*[1D200]*\/$/;"	e	enum:UBlockCode
UBLOCK_ANCIENT_GREEK_NUMBERS	unicode/uchar.h	/^    UBLOCK_ANCIENT_GREEK_NUMBERS = 127, \/*[10140]*\/$/;"	e	enum:UBlockCode
UBLOCK_ANCIENT_SYMBOLS	unicode/uchar.h	/^    UBLOCK_ANCIENT_SYMBOLS = 165, \/*[10190]*\/$/;"	e	enum:UBlockCode
UBLOCK_ARABIC	unicode/uchar.h	/^    UBLOCK_ARABIC =12, \/*[0600]*\/$/;"	e	enum:UBlockCode
UBLOCK_ARABIC_PRESENTATION_FORMS_A	unicode/uchar.h	/^    UBLOCK_ARABIC_PRESENTATION_FORMS_A =81, \/*[FB50]*\/$/;"	e	enum:UBlockCode
UBLOCK_ARABIC_PRESENTATION_FORMS_B	unicode/uchar.h	/^    UBLOCK_ARABIC_PRESENTATION_FORMS_B =85, \/*[FE70]*\/$/;"	e	enum:UBlockCode
UBLOCK_ARABIC_SUPPLEMENT	unicode/uchar.h	/^    UBLOCK_ARABIC_SUPPLEMENT = 128, \/*[0750]*\/$/;"	e	enum:UBlockCode
UBLOCK_ARMENIAN	unicode/uchar.h	/^    UBLOCK_ARMENIAN =10, \/*[0530]*\/$/;"	e	enum:UBlockCode
UBLOCK_ARROWS	unicode/uchar.h	/^    UBLOCK_ARROWS =46, \/*[2190]*\/$/;"	e	enum:UBlockCode
UBLOCK_AVESTAN	unicode/uchar.h	/^    UBLOCK_AVESTAN = 188, \/*[10B00]*\/$/;"	e	enum:UBlockCode
UBLOCK_BALINESE	unicode/uchar.h	/^    UBLOCK_BALINESE = 147, \/*[1B00]*\/$/;"	e	enum:UBlockCode
UBLOCK_BAMUM	unicode/uchar.h	/^    UBLOCK_BAMUM = 177, \/*[A6A0]*\/$/;"	e	enum:UBlockCode
UBLOCK_BAMUM_SUPPLEMENT	unicode/uchar.h	/^    UBLOCK_BAMUM_SUPPLEMENT = 202, \/*[16800]*\/$/;"	e	enum:UBlockCode
UBLOCK_BASIC_LATIN	unicode/uchar.h	/^    UBLOCK_BASIC_LATIN = 1, \/*[0000]*\/ \/*See note !!*\/$/;"	e	enum:UBlockCode
UBLOCK_BATAK	unicode/uchar.h	/^    UBLOCK_BATAK = 199, \/*[1BC0]*\/$/;"	e	enum:UBlockCode
UBLOCK_BENGALI	unicode/uchar.h	/^    UBLOCK_BENGALI =16, \/*[0980]*\/$/;"	e	enum:UBlockCode
UBLOCK_BLOCK_ELEMENTS	unicode/uchar.h	/^    UBLOCK_BLOCK_ELEMENTS =53, \/*[2580]*\/$/;"	e	enum:UBlockCode
UBLOCK_BOPOMOFO	unicode/uchar.h	/^    UBLOCK_BOPOMOFO =64, \/*[3100]*\/$/;"	e	enum:UBlockCode
UBLOCK_BOPOMOFO_EXTENDED	unicode/uchar.h	/^    UBLOCK_BOPOMOFO_EXTENDED =67, \/*[31A0]*\/$/;"	e	enum:UBlockCode
UBLOCK_BOX_DRAWING	unicode/uchar.h	/^    UBLOCK_BOX_DRAWING =52, \/*[2500]*\/$/;"	e	enum:UBlockCode
UBLOCK_BRAHMI	unicode/uchar.h	/^    UBLOCK_BRAHMI = 201, \/*[11000]*\/$/;"	e	enum:UBlockCode
UBLOCK_BRAILLE_PATTERNS	unicode/uchar.h	/^    UBLOCK_BRAILLE_PATTERNS =57, \/*[2800]*\/$/;"	e	enum:UBlockCode
UBLOCK_BUGINESE	unicode/uchar.h	/^    UBLOCK_BUGINESE = 129, \/*[1A00]*\/$/;"	e	enum:UBlockCode
UBLOCK_BUHID	unicode/uchar.h	/^    UBLOCK_BUHID = 100, \/*[1740]*\/$/;"	e	enum:UBlockCode
UBLOCK_BYZANTINE_MUSICAL_SYMBOLS	unicode/uchar.h	/^    UBLOCK_BYZANTINE_MUSICAL_SYMBOLS = 91 , \/*[1D000]*\/$/;"	e	enum:UBlockCode
UBLOCK_CARIAN	unicode/uchar.h	/^    UBLOCK_CARIAN = 168, \/*[102A0]*\/$/;"	e	enum:UBlockCode
UBLOCK_CHAM	unicode/uchar.h	/^    UBLOCK_CHAM = 164, \/*[AA00]*\/$/;"	e	enum:UBlockCode
UBLOCK_CHEROKEE	unicode/uchar.h	/^    UBLOCK_CHEROKEE =32, \/*[13A0]*\/$/;"	e	enum:UBlockCode
UBLOCK_CJK_COMPATIBILITY	unicode/uchar.h	/^    UBLOCK_CJK_COMPATIBILITY =69, \/*[3300]*\/$/;"	e	enum:UBlockCode
UBLOCK_CJK_COMPATIBILITY_FORMS	unicode/uchar.h	/^    UBLOCK_CJK_COMPATIBILITY_FORMS =83, \/*[FE30]*\/$/;"	e	enum:UBlockCode
UBLOCK_CJK_COMPATIBILITY_IDEOGRAPHS	unicode/uchar.h	/^    UBLOCK_CJK_COMPATIBILITY_IDEOGRAPHS =79, \/*[F900]*\/$/;"	e	enum:UBlockCode
UBLOCK_CJK_COMPATIBILITY_IDEOGRAPHS_SUPPLEMENT	unicode/uchar.h	/^    UBLOCK_CJK_COMPATIBILITY_IDEOGRAPHS_SUPPLEMENT = 95 , \/*[2F800]*\/$/;"	e	enum:UBlockCode
UBLOCK_CJK_RADICALS_SUPPLEMENT	unicode/uchar.h	/^    UBLOCK_CJK_RADICALS_SUPPLEMENT =58, \/*[2E80]*\/$/;"	e	enum:UBlockCode
UBLOCK_CJK_STROKES	unicode/uchar.h	/^    UBLOCK_CJK_STROKES = 130, \/*[31C0]*\/$/;"	e	enum:UBlockCode
UBLOCK_CJK_SYMBOLS_AND_PUNCTUATION	unicode/uchar.h	/^    UBLOCK_CJK_SYMBOLS_AND_PUNCTUATION =61, \/*[3000]*\/$/;"	e	enum:UBlockCode
UBLOCK_CJK_UNIFIED_IDEOGRAPHS	unicode/uchar.h	/^    UBLOCK_CJK_UNIFIED_IDEOGRAPHS =71, \/*[4E00]*\/$/;"	e	enum:UBlockCode
UBLOCK_CJK_UNIFIED_IDEOGRAPHS_EXTENSION_A	unicode/uchar.h	/^    UBLOCK_CJK_UNIFIED_IDEOGRAPHS_EXTENSION_A =70, \/*[3400]*\/$/;"	e	enum:UBlockCode
UBLOCK_CJK_UNIFIED_IDEOGRAPHS_EXTENSION_B	unicode/uchar.h	/^    UBLOCK_CJK_UNIFIED_IDEOGRAPHS_EXTENSION_B  = 94 , \/*[20000]*\/$/;"	e	enum:UBlockCode
UBLOCK_CJK_UNIFIED_IDEOGRAPHS_EXTENSION_C	unicode/uchar.h	/^    UBLOCK_CJK_UNIFIED_IDEOGRAPHS_EXTENSION_C = 197, \/*[2A700]*\/$/;"	e	enum:UBlockCode
UBLOCK_CJK_UNIFIED_IDEOGRAPHS_EXTENSION_D	unicode/uchar.h	/^    UBLOCK_CJK_UNIFIED_IDEOGRAPHS_EXTENSION_D = 209, \/*[2B740]*\/$/;"	e	enum:UBlockCode
UBLOCK_COMBINING_DIACRITICAL_MARKS	unicode/uchar.h	/^    UBLOCK_COMBINING_DIACRITICAL_MARKS =7, \/*[0300]*\/$/;"	e	enum:UBlockCode
UBLOCK_COMBINING_DIACRITICAL_MARKS_SUPPLEMENT	unicode/uchar.h	/^    UBLOCK_COMBINING_DIACRITICAL_MARKS_SUPPLEMENT = 131, \/*[1DC0]*\/$/;"	e	enum:UBlockCode
UBLOCK_COMBINING_HALF_MARKS	unicode/uchar.h	/^    UBLOCK_COMBINING_HALF_MARKS =82, \/*[FE20]*\/$/;"	e	enum:UBlockCode
UBLOCK_COMBINING_MARKS_FOR_SYMBOLS	unicode/uchar.h	/^    UBLOCK_COMBINING_MARKS_FOR_SYMBOLS =43, \/*[20D0]*\/$/;"	e	enum:UBlockCode
UBLOCK_COMMON_INDIC_NUMBER_FORMS	unicode/uchar.h	/^    UBLOCK_COMMON_INDIC_NUMBER_FORMS = 178, \/*[A830]*\/$/;"	e	enum:UBlockCode
UBLOCK_CONTROL_PICTURES	unicode/uchar.h	/^    UBLOCK_CONTROL_PICTURES =49, \/*[2400]*\/$/;"	e	enum:UBlockCode
UBLOCK_COPTIC	unicode/uchar.h	/^    UBLOCK_COPTIC = 132, \/*[2C80]*\/$/;"	e	enum:UBlockCode
UBLOCK_COUNT	unicode/uchar.h	/^    UBLOCK_COUNT = 210,$/;"	e	enum:UBlockCode
UBLOCK_COUNTING_ROD_NUMERALS	unicode/uchar.h	/^    UBLOCK_COUNTING_ROD_NUMERALS = 154, \/*[1D360]*\/$/;"	e	enum:UBlockCode
UBLOCK_CUNEIFORM	unicode/uchar.h	/^    UBLOCK_CUNEIFORM = 152, \/*[12000]*\/$/;"	e	enum:UBlockCode
UBLOCK_CUNEIFORM_NUMBERS_AND_PUNCTUATION	unicode/uchar.h	/^    UBLOCK_CUNEIFORM_NUMBERS_AND_PUNCTUATION = 153, \/*[12400]*\/$/;"	e	enum:UBlockCode
UBLOCK_CURRENCY_SYMBOLS	unicode/uchar.h	/^    UBLOCK_CURRENCY_SYMBOLS =42, \/*[20A0]*\/$/;"	e	enum:UBlockCode
UBLOCK_CYPRIOT_SYLLABARY	unicode/uchar.h	/^    UBLOCK_CYPRIOT_SYLLABARY = 123, \/*[10800]*\/$/;"	e	enum:UBlockCode
UBLOCK_CYRILLIC	unicode/uchar.h	/^    UBLOCK_CYRILLIC =9, \/*[0400]*\/$/;"	e	enum:UBlockCode
UBLOCK_CYRILLIC_EXTENDED_A	unicode/uchar.h	/^    UBLOCK_CYRILLIC_EXTENDED_A = 158, \/*[2DE0]*\/$/;"	e	enum:UBlockCode
UBLOCK_CYRILLIC_EXTENDED_B	unicode/uchar.h	/^    UBLOCK_CYRILLIC_EXTENDED_B = 160, \/*[A640]*\/$/;"	e	enum:UBlockCode
UBLOCK_CYRILLIC_SUPPLEMENT	unicode/uchar.h	/^    UBLOCK_CYRILLIC_SUPPLEMENT = UBLOCK_CYRILLIC_SUPPLEMENTARY, \/*[0500]*\/$/;"	e	enum:UBlockCode
UBLOCK_CYRILLIC_SUPPLEMENTARY	unicode/uchar.h	/^    UBLOCK_CYRILLIC_SUPPLEMENTARY = 97, $/;"	e	enum:UBlockCode
UBLOCK_DESERET	unicode/uchar.h	/^    UBLOCK_DESERET = 90 , \/*[10400]*\/$/;"	e	enum:UBlockCode
UBLOCK_DEVANAGARI	unicode/uchar.h	/^    UBLOCK_DEVANAGARI =15, \/*[0900]*\/$/;"	e	enum:UBlockCode
UBLOCK_DEVANAGARI_EXTENDED	unicode/uchar.h	/^    UBLOCK_DEVANAGARI_EXTENDED = 179, \/*[A8E0]*\/$/;"	e	enum:UBlockCode
UBLOCK_DINGBATS	unicode/uchar.h	/^    UBLOCK_DINGBATS =56, \/*[2700]*\/$/;"	e	enum:UBlockCode
UBLOCK_DOMINO_TILES	unicode/uchar.h	/^    UBLOCK_DOMINO_TILES = 171, \/*[1F030]*\/$/;"	e	enum:UBlockCode
UBLOCK_EGYPTIAN_HIEROGLYPHS	unicode/uchar.h	/^    UBLOCK_EGYPTIAN_HIEROGLYPHS = 194, \/*[13000]*\/$/;"	e	enum:UBlockCode
UBLOCK_EMOTICONS	unicode/uchar.h	/^    UBLOCK_EMOTICONS = 206, \/*[1F600]*\/$/;"	e	enum:UBlockCode
UBLOCK_ENCLOSED_ALPHANUMERICS	unicode/uchar.h	/^    UBLOCK_ENCLOSED_ALPHANUMERICS =51, \/*[2460]*\/$/;"	e	enum:UBlockCode
UBLOCK_ENCLOSED_ALPHANUMERIC_SUPPLEMENT	unicode/uchar.h	/^    UBLOCK_ENCLOSED_ALPHANUMERIC_SUPPLEMENT = 195, \/*[1F100]*\/$/;"	e	enum:UBlockCode
UBLOCK_ENCLOSED_CJK_LETTERS_AND_MONTHS	unicode/uchar.h	/^    UBLOCK_ENCLOSED_CJK_LETTERS_AND_MONTHS =68, \/*[3200]*\/$/;"	e	enum:UBlockCode
UBLOCK_ENCLOSED_IDEOGRAPHIC_SUPPLEMENT	unicode/uchar.h	/^    UBLOCK_ENCLOSED_IDEOGRAPHIC_SUPPLEMENT = 196, \/*[1F200]*\/$/;"	e	enum:UBlockCode
UBLOCK_ETHIOPIC	unicode/uchar.h	/^    UBLOCK_ETHIOPIC =31, \/*[1200]*\/$/;"	e	enum:UBlockCode
UBLOCK_ETHIOPIC_EXTENDED	unicode/uchar.h	/^    UBLOCK_ETHIOPIC_EXTENDED = 133, \/*[2D80]*\/$/;"	e	enum:UBlockCode
UBLOCK_ETHIOPIC_EXTENDED_A	unicode/uchar.h	/^    UBLOCK_ETHIOPIC_EXTENDED_A = 200, \/*[AB00]*\/$/;"	e	enum:UBlockCode
UBLOCK_ETHIOPIC_SUPPLEMENT	unicode/uchar.h	/^    UBLOCK_ETHIOPIC_SUPPLEMENT = 134, \/*[1380]*\/$/;"	e	enum:UBlockCode
UBLOCK_GENERAL_PUNCTUATION	unicode/uchar.h	/^    UBLOCK_GENERAL_PUNCTUATION =40, \/*[2000]*\/$/;"	e	enum:UBlockCode
UBLOCK_GEOMETRIC_SHAPES	unicode/uchar.h	/^    UBLOCK_GEOMETRIC_SHAPES =54, \/*[25A0]*\/$/;"	e	enum:UBlockCode
UBLOCK_GEORGIAN	unicode/uchar.h	/^    UBLOCK_GEORGIAN =29, \/*[10A0]*\/$/;"	e	enum:UBlockCode
UBLOCK_GEORGIAN_SUPPLEMENT	unicode/uchar.h	/^    UBLOCK_GEORGIAN_SUPPLEMENT = 135, \/*[2D00]*\/$/;"	e	enum:UBlockCode
UBLOCK_GLAGOLITIC	unicode/uchar.h	/^    UBLOCK_GLAGOLITIC = 136, \/*[2C00]*\/$/;"	e	enum:UBlockCode
UBLOCK_GOTHIC	unicode/uchar.h	/^    UBLOCK_GOTHIC = 89 , \/*[10330]*\/$/;"	e	enum:UBlockCode
UBLOCK_GREEK	unicode/uchar.h	/^    UBLOCK_GREEK =8, \/*[0370]*\/$/;"	e	enum:UBlockCode
UBLOCK_GREEK_EXTENDED	unicode/uchar.h	/^    UBLOCK_GREEK_EXTENDED =39, \/*[1F00]*\/$/;"	e	enum:UBlockCode
UBLOCK_GUJARATI	unicode/uchar.h	/^    UBLOCK_GUJARATI =18, \/*[0A80]*\/$/;"	e	enum:UBlockCode
UBLOCK_GURMUKHI	unicode/uchar.h	/^    UBLOCK_GURMUKHI =17, \/*[0A00]*\/$/;"	e	enum:UBlockCode
UBLOCK_HALFWIDTH_AND_FULLWIDTH_FORMS	unicode/uchar.h	/^    UBLOCK_HALFWIDTH_AND_FULLWIDTH_FORMS =87, \/*[FF00]*\/$/;"	e	enum:UBlockCode
UBLOCK_HANGUL_COMPATIBILITY_JAMO	unicode/uchar.h	/^    UBLOCK_HANGUL_COMPATIBILITY_JAMO =65, \/*[3130]*\/$/;"	e	enum:UBlockCode
UBLOCK_HANGUL_JAMO	unicode/uchar.h	/^    UBLOCK_HANGUL_JAMO =30, \/*[1100]*\/$/;"	e	enum:UBlockCode
UBLOCK_HANGUL_JAMO_EXTENDED_A	unicode/uchar.h	/^    UBLOCK_HANGUL_JAMO_EXTENDED_A = 180, \/*[A960]*\/$/;"	e	enum:UBlockCode
UBLOCK_HANGUL_JAMO_EXTENDED_B	unicode/uchar.h	/^    UBLOCK_HANGUL_JAMO_EXTENDED_B = 185, \/*[D7B0]*\/$/;"	e	enum:UBlockCode
UBLOCK_HANGUL_SYLLABLES	unicode/uchar.h	/^    UBLOCK_HANGUL_SYLLABLES =74, \/*[AC00]*\/$/;"	e	enum:UBlockCode
UBLOCK_HANUNOO	unicode/uchar.h	/^    UBLOCK_HANUNOO = 99, \/*[1720]*\/$/;"	e	enum:UBlockCode
UBLOCK_HEBREW	unicode/uchar.h	/^    UBLOCK_HEBREW =11, \/*[0590]*\/$/;"	e	enum:UBlockCode
UBLOCK_HIGH_PRIVATE_USE_SURROGATES	unicode/uchar.h	/^    UBLOCK_HIGH_PRIVATE_USE_SURROGATES =76, \/*[DB80]*\/$/;"	e	enum:UBlockCode
UBLOCK_HIGH_SURROGATES	unicode/uchar.h	/^    UBLOCK_HIGH_SURROGATES =75, \/*[D800]*\/$/;"	e	enum:UBlockCode
UBLOCK_HIRAGANA	unicode/uchar.h	/^    UBLOCK_HIRAGANA =62, \/*[3040]*\/$/;"	e	enum:UBlockCode
UBLOCK_IDEOGRAPHIC_DESCRIPTION_CHARACTERS	unicode/uchar.h	/^    UBLOCK_IDEOGRAPHIC_DESCRIPTION_CHARACTERS =60, \/*[2FF0]*\/$/;"	e	enum:UBlockCode
UBLOCK_IMPERIAL_ARAMAIC	unicode/uchar.h	/^    UBLOCK_IMPERIAL_ARAMAIC = 186, \/*[10840]*\/$/;"	e	enum:UBlockCode
UBLOCK_INSCRIPTIONAL_PAHLAVI	unicode/uchar.h	/^    UBLOCK_INSCRIPTIONAL_PAHLAVI = 190, \/*[10B60]*\/$/;"	e	enum:UBlockCode
UBLOCK_INSCRIPTIONAL_PARTHIAN	unicode/uchar.h	/^    UBLOCK_INSCRIPTIONAL_PARTHIAN = 189, \/*[10B40]*\/$/;"	e	enum:UBlockCode
UBLOCK_INVALID_CODE	unicode/uchar.h	/^    UBLOCK_INVALID_CODE=-1$/;"	e	enum:UBlockCode
UBLOCK_IPA_EXTENSIONS	unicode/uchar.h	/^    UBLOCK_IPA_EXTENSIONS =5, \/*[0250]*\/$/;"	e	enum:UBlockCode
UBLOCK_JAVANESE	unicode/uchar.h	/^    UBLOCK_JAVANESE = 181, \/*[A980]*\/$/;"	e	enum:UBlockCode
UBLOCK_KAITHI	unicode/uchar.h	/^    UBLOCK_KAITHI = 193, \/*[11080]*\/$/;"	e	enum:UBlockCode
UBLOCK_KANA_SUPPLEMENT	unicode/uchar.h	/^    UBLOCK_KANA_SUPPLEMENT = 203, \/*[1B000]*\/$/;"	e	enum:UBlockCode
UBLOCK_KANBUN	unicode/uchar.h	/^    UBLOCK_KANBUN =66, \/*[3190]*\/$/;"	e	enum:UBlockCode
UBLOCK_KANGXI_RADICALS	unicode/uchar.h	/^    UBLOCK_KANGXI_RADICALS =59, \/*[2F00]*\/$/;"	e	enum:UBlockCode
UBLOCK_KANNADA	unicode/uchar.h	/^    UBLOCK_KANNADA =22, \/*[0C80]*\/$/;"	e	enum:UBlockCode
UBLOCK_KATAKANA	unicode/uchar.h	/^    UBLOCK_KATAKANA =63, \/*[30A0]*\/$/;"	e	enum:UBlockCode
UBLOCK_KATAKANA_PHONETIC_EXTENSIONS	unicode/uchar.h	/^    UBLOCK_KATAKANA_PHONETIC_EXTENSIONS = 107, \/*[31F0]*\/$/;"	e	enum:UBlockCode
UBLOCK_KAYAH_LI	unicode/uchar.h	/^    UBLOCK_KAYAH_LI = 162, \/*[A900]*\/$/;"	e	enum:UBlockCode
UBLOCK_KHAROSHTHI	unicode/uchar.h	/^    UBLOCK_KHAROSHTHI = 137, \/*[10A00]*\/$/;"	e	enum:UBlockCode
UBLOCK_KHMER	unicode/uchar.h	/^    UBLOCK_KHMER =36, \/*[1780]*\/$/;"	e	enum:UBlockCode
UBLOCK_KHMER_SYMBOLS	unicode/uchar.h	/^    UBLOCK_KHMER_SYMBOLS = 113, \/*[19E0]*\/$/;"	e	enum:UBlockCode
UBLOCK_LAO	unicode/uchar.h	/^    UBLOCK_LAO =26, \/*[0E80]*\/$/;"	e	enum:UBlockCode
UBLOCK_LATIN_1_SUPPLEMENT	unicode/uchar.h	/^    UBLOCK_LATIN_1_SUPPLEMENT=2, \/*[0080]*\/$/;"	e	enum:UBlockCode
UBLOCK_LATIN_EXTENDED_A	unicode/uchar.h	/^    UBLOCK_LATIN_EXTENDED_A =3, \/*[0100]*\/$/;"	e	enum:UBlockCode
UBLOCK_LATIN_EXTENDED_ADDITIONAL	unicode/uchar.h	/^    UBLOCK_LATIN_EXTENDED_ADDITIONAL =38, \/*[1E00]*\/$/;"	e	enum:UBlockCode
UBLOCK_LATIN_EXTENDED_B	unicode/uchar.h	/^    UBLOCK_LATIN_EXTENDED_B =4, \/*[0180]*\/$/;"	e	enum:UBlockCode
UBLOCK_LATIN_EXTENDED_C	unicode/uchar.h	/^    UBLOCK_LATIN_EXTENDED_C = 148, \/*[2C60]*\/$/;"	e	enum:UBlockCode
UBLOCK_LATIN_EXTENDED_D	unicode/uchar.h	/^    UBLOCK_LATIN_EXTENDED_D = 149, \/*[A720]*\/$/;"	e	enum:UBlockCode
UBLOCK_LEPCHA	unicode/uchar.h	/^    UBLOCK_LEPCHA = 156, \/*[1C00]*\/$/;"	e	enum:UBlockCode
UBLOCK_LETTERLIKE_SYMBOLS	unicode/uchar.h	/^    UBLOCK_LETTERLIKE_SYMBOLS =44, \/*[2100]*\/$/;"	e	enum:UBlockCode
UBLOCK_LIMBU	unicode/uchar.h	/^    UBLOCK_LIMBU = 111, \/*[1900]*\/$/;"	e	enum:UBlockCode
UBLOCK_LINEAR_B_IDEOGRAMS	unicode/uchar.h	/^    UBLOCK_LINEAR_B_IDEOGRAMS = 118, \/*[10080]*\/$/;"	e	enum:UBlockCode
UBLOCK_LINEAR_B_SYLLABARY	unicode/uchar.h	/^    UBLOCK_LINEAR_B_SYLLABARY = 117, \/*[10000]*\/$/;"	e	enum:UBlockCode
UBLOCK_LISU	unicode/uchar.h	/^    UBLOCK_LISU = 176, \/*[A4D0]*\/$/;"	e	enum:UBlockCode
UBLOCK_LOW_SURROGATES	unicode/uchar.h	/^    UBLOCK_LOW_SURROGATES =77, \/*[DC00]*\/$/;"	e	enum:UBlockCode
UBLOCK_LYCIAN	unicode/uchar.h	/^    UBLOCK_LYCIAN = 167, \/*[10280]*\/$/;"	e	enum:UBlockCode
UBLOCK_LYDIAN	unicode/uchar.h	/^    UBLOCK_LYDIAN = 169, \/*[10920]*\/$/;"	e	enum:UBlockCode
UBLOCK_MAHJONG_TILES	unicode/uchar.h	/^    UBLOCK_MAHJONG_TILES = 170, \/*[1F000]*\/$/;"	e	enum:UBlockCode
UBLOCK_MALAYALAM	unicode/uchar.h	/^    UBLOCK_MALAYALAM =23, \/*[0D00]*\/$/;"	e	enum:UBlockCode
UBLOCK_MANDAIC	unicode/uchar.h	/^    UBLOCK_MANDAIC = 198, \/*[0840]*\/$/;"	e	enum:UBlockCode
UBLOCK_MATHEMATICAL_ALPHANUMERIC_SYMBOLS	unicode/uchar.h	/^    UBLOCK_MATHEMATICAL_ALPHANUMERIC_SYMBOLS = 93  , \/*[1D400]*\/$/;"	e	enum:UBlockCode
UBLOCK_MATHEMATICAL_OPERATORS	unicode/uchar.h	/^    UBLOCK_MATHEMATICAL_OPERATORS =47, \/*[2200]*\/$/;"	e	enum:UBlockCode
UBLOCK_MEETEI_MAYEK	unicode/uchar.h	/^    UBLOCK_MEETEI_MAYEK = 184, \/*[ABC0]*\/$/;"	e	enum:UBlockCode
UBLOCK_MISCELLANEOUS_MATHEMATICAL_SYMBOLS_A	unicode/uchar.h	/^    UBLOCK_MISCELLANEOUS_MATHEMATICAL_SYMBOLS_A = 102, \/*[27C0]*\/$/;"	e	enum:UBlockCode
UBLOCK_MISCELLANEOUS_MATHEMATICAL_SYMBOLS_B	unicode/uchar.h	/^    UBLOCK_MISCELLANEOUS_MATHEMATICAL_SYMBOLS_B = 105, \/*[2980]*\/$/;"	e	enum:UBlockCode
UBLOCK_MISCELLANEOUS_SYMBOLS	unicode/uchar.h	/^    UBLOCK_MISCELLANEOUS_SYMBOLS =55, \/*[2600]*\/$/;"	e	enum:UBlockCode
UBLOCK_MISCELLANEOUS_SYMBOLS_AND_ARROWS	unicode/uchar.h	/^    UBLOCK_MISCELLANEOUS_SYMBOLS_AND_ARROWS = 115, \/*[2B00]*\/$/;"	e	enum:UBlockCode
UBLOCK_MISCELLANEOUS_SYMBOLS_AND_PICTOGRAPHS	unicode/uchar.h	/^    UBLOCK_MISCELLANEOUS_SYMBOLS_AND_PICTOGRAPHS = 205, \/*[1F300]*\/$/;"	e	enum:UBlockCode
UBLOCK_MISCELLANEOUS_TECHNICAL	unicode/uchar.h	/^    UBLOCK_MISCELLANEOUS_TECHNICAL =48, \/*[2300]*\/$/;"	e	enum:UBlockCode
UBLOCK_MODIFIER_TONE_LETTERS	unicode/uchar.h	/^    UBLOCK_MODIFIER_TONE_LETTERS = 138, \/*[A700]*\/$/;"	e	enum:UBlockCode
UBLOCK_MONGOLIAN	unicode/uchar.h	/^    UBLOCK_MONGOLIAN =37, \/*[1800]*\/$/;"	e	enum:UBlockCode
UBLOCK_MUSICAL_SYMBOLS	unicode/uchar.h	/^    UBLOCK_MUSICAL_SYMBOLS = 92 , \/*[1D100]*\/$/;"	e	enum:UBlockCode
UBLOCK_MYANMAR	unicode/uchar.h	/^    UBLOCK_MYANMAR =28, \/*[1000]*\/$/;"	e	enum:UBlockCode
UBLOCK_MYANMAR_EXTENDED_A	unicode/uchar.h	/^    UBLOCK_MYANMAR_EXTENDED_A = 182, \/*[AA60]*\/$/;"	e	enum:UBlockCode
UBLOCK_NEW_TAI_LUE	unicode/uchar.h	/^    UBLOCK_NEW_TAI_LUE = 139, \/*[1980]*\/$/;"	e	enum:UBlockCode
UBLOCK_NKO	unicode/uchar.h	/^    UBLOCK_NKO = 146, \/*[07C0]*\/$/;"	e	enum:UBlockCode
UBLOCK_NO_BLOCK	unicode/uchar.h	/^    UBLOCK_NO_BLOCK = 0, \/*[none]*\/ \/* Special range indicating No_Block *\/$/;"	e	enum:UBlockCode
UBLOCK_NUMBER_FORMS	unicode/uchar.h	/^    UBLOCK_NUMBER_FORMS =45, \/*[2150]*\/$/;"	e	enum:UBlockCode
UBLOCK_OGHAM	unicode/uchar.h	/^    UBLOCK_OGHAM =34, \/*[1680]*\/$/;"	e	enum:UBlockCode
UBLOCK_OLD_ITALIC	unicode/uchar.h	/^    UBLOCK_OLD_ITALIC = 88  , \/*[10300]*\/$/;"	e	enum:UBlockCode
UBLOCK_OLD_PERSIAN	unicode/uchar.h	/^    UBLOCK_OLD_PERSIAN = 140, \/*[103A0]*\/$/;"	e	enum:UBlockCode
UBLOCK_OLD_SOUTH_ARABIAN	unicode/uchar.h	/^    UBLOCK_OLD_SOUTH_ARABIAN = 187, \/*[10A60]*\/$/;"	e	enum:UBlockCode
UBLOCK_OLD_TURKIC	unicode/uchar.h	/^    UBLOCK_OLD_TURKIC = 191, \/*[10C00]*\/$/;"	e	enum:UBlockCode
UBLOCK_OL_CHIKI	unicode/uchar.h	/^    UBLOCK_OL_CHIKI = 157, \/*[1C50]*\/$/;"	e	enum:UBlockCode
UBLOCK_OPTICAL_CHARACTER_RECOGNITION	unicode/uchar.h	/^    UBLOCK_OPTICAL_CHARACTER_RECOGNITION =50, \/*[2440]*\/$/;"	e	enum:UBlockCode
UBLOCK_ORIYA	unicode/uchar.h	/^    UBLOCK_ORIYA =19, \/*[0B00]*\/$/;"	e	enum:UBlockCode
UBLOCK_OSMANYA	unicode/uchar.h	/^    UBLOCK_OSMANYA = 122, \/*[10480]*\/$/;"	e	enum:UBlockCode
UBLOCK_PHAGS_PA	unicode/uchar.h	/^    UBLOCK_PHAGS_PA = 150, \/*[A840]*\/$/;"	e	enum:UBlockCode
UBLOCK_PHAISTOS_DISC	unicode/uchar.h	/^    UBLOCK_PHAISTOS_DISC = 166, \/*[101D0]*\/$/;"	e	enum:UBlockCode
UBLOCK_PHOENICIAN	unicode/uchar.h	/^    UBLOCK_PHOENICIAN = 151, \/*[10900]*\/$/;"	e	enum:UBlockCode
UBLOCK_PHONETIC_EXTENSIONS	unicode/uchar.h	/^    UBLOCK_PHONETIC_EXTENSIONS = 114, \/*[1D00]*\/$/;"	e	enum:UBlockCode
UBLOCK_PHONETIC_EXTENSIONS_SUPPLEMENT	unicode/uchar.h	/^    UBLOCK_PHONETIC_EXTENSIONS_SUPPLEMENT = 141, \/*[1D80]*\/$/;"	e	enum:UBlockCode
UBLOCK_PLAYING_CARDS	unicode/uchar.h	/^    UBLOCK_PLAYING_CARDS = 204, \/*[1F0A0]*\/$/;"	e	enum:UBlockCode
UBLOCK_PRIVATE_USE	unicode/uchar.h	/^    UBLOCK_PRIVATE_USE = 78,$/;"	e	enum:UBlockCode
UBLOCK_PRIVATE_USE_AREA	unicode/uchar.h	/^    UBLOCK_PRIVATE_USE_AREA =UBLOCK_PRIVATE_USE, \/*[E000]*\/$/;"	e	enum:UBlockCode
UBLOCK_REJANG	unicode/uchar.h	/^    UBLOCK_REJANG = 163, \/*[A930]*\/$/;"	e	enum:UBlockCode
UBLOCK_RUMI_NUMERAL_SYMBOLS	unicode/uchar.h	/^    UBLOCK_RUMI_NUMERAL_SYMBOLS = 192, \/*[10E60]*\/$/;"	e	enum:UBlockCode
UBLOCK_RUNIC	unicode/uchar.h	/^    UBLOCK_RUNIC =35, \/*[16A0]*\/$/;"	e	enum:UBlockCode
UBLOCK_SAMARITAN	unicode/uchar.h	/^    UBLOCK_SAMARITAN = 172, \/*[0800]*\/$/;"	e	enum:UBlockCode
UBLOCK_SAURASHTRA	unicode/uchar.h	/^    UBLOCK_SAURASHTRA = 161, \/*[A880]*\/$/;"	e	enum:UBlockCode
UBLOCK_SHAVIAN	unicode/uchar.h	/^    UBLOCK_SHAVIAN = 121, \/*[10450]*\/$/;"	e	enum:UBlockCode
UBLOCK_SINHALA	unicode/uchar.h	/^    UBLOCK_SINHALA =24, \/*[0D80]*\/$/;"	e	enum:UBlockCode
UBLOCK_SMALL_FORM_VARIANTS	unicode/uchar.h	/^    UBLOCK_SMALL_FORM_VARIANTS =84, \/*[FE50]*\/$/;"	e	enum:UBlockCode
UBLOCK_SPACING_MODIFIER_LETTERS	unicode/uchar.h	/^    UBLOCK_SPACING_MODIFIER_LETTERS =6, \/*[02B0]*\/$/;"	e	enum:UBlockCode
UBLOCK_SPECIALS	unicode/uchar.h	/^    UBLOCK_SPECIALS =86, \/*[FFF0]*\/$/;"	e	enum:UBlockCode
UBLOCK_SUNDANESE	unicode/uchar.h	/^    UBLOCK_SUNDANESE = 155, \/*[1B80]*\/$/;"	e	enum:UBlockCode
UBLOCK_SUPERSCRIPTS_AND_SUBSCRIPTS	unicode/uchar.h	/^    UBLOCK_SUPERSCRIPTS_AND_SUBSCRIPTS =41, \/*[2070]*\/$/;"	e	enum:UBlockCode
UBLOCK_SUPPLEMENTAL_ARROWS_A	unicode/uchar.h	/^    UBLOCK_SUPPLEMENTAL_ARROWS_A = 103, \/*[27F0]*\/$/;"	e	enum:UBlockCode
UBLOCK_SUPPLEMENTAL_ARROWS_B	unicode/uchar.h	/^    UBLOCK_SUPPLEMENTAL_ARROWS_B = 104, \/*[2900]*\/$/;"	e	enum:UBlockCode
UBLOCK_SUPPLEMENTAL_MATHEMATICAL_OPERATORS	unicode/uchar.h	/^    UBLOCK_SUPPLEMENTAL_MATHEMATICAL_OPERATORS = 106, \/*[2A00]*\/$/;"	e	enum:UBlockCode
UBLOCK_SUPPLEMENTAL_PUNCTUATION	unicode/uchar.h	/^    UBLOCK_SUPPLEMENTAL_PUNCTUATION = 142, \/*[2E00]*\/$/;"	e	enum:UBlockCode
UBLOCK_SUPPLEMENTARY_PRIVATE_USE_AREA_A	unicode/uchar.h	/^    UBLOCK_SUPPLEMENTARY_PRIVATE_USE_AREA_A = 109, \/*[F0000]*\/$/;"	e	enum:UBlockCode
UBLOCK_SUPPLEMENTARY_PRIVATE_USE_AREA_B	unicode/uchar.h	/^    UBLOCK_SUPPLEMENTARY_PRIVATE_USE_AREA_B = 110, \/*[100000]*\/$/;"	e	enum:UBlockCode
UBLOCK_SYLOTI_NAGRI	unicode/uchar.h	/^    UBLOCK_SYLOTI_NAGRI = 143, \/*[A800]*\/$/;"	e	enum:UBlockCode
UBLOCK_SYRIAC	unicode/uchar.h	/^    UBLOCK_SYRIAC =13, \/*[0700]*\/$/;"	e	enum:UBlockCode
UBLOCK_TAGALOG	unicode/uchar.h	/^    UBLOCK_TAGALOG = 98, \/*[1700]*\/$/;"	e	enum:UBlockCode
UBLOCK_TAGBANWA	unicode/uchar.h	/^    UBLOCK_TAGBANWA = 101, \/*[1760]*\/$/;"	e	enum:UBlockCode
UBLOCK_TAGS	unicode/uchar.h	/^    UBLOCK_TAGS = 96, \/*[E0000]*\/$/;"	e	enum:UBlockCode
UBLOCK_TAI_LE	unicode/uchar.h	/^    UBLOCK_TAI_LE = 112, \/*[1950]*\/$/;"	e	enum:UBlockCode
UBLOCK_TAI_THAM	unicode/uchar.h	/^    UBLOCK_TAI_THAM = 174, \/*[1A20]*\/$/;"	e	enum:UBlockCode
UBLOCK_TAI_VIET	unicode/uchar.h	/^    UBLOCK_TAI_VIET = 183, \/*[AA80]*\/$/;"	e	enum:UBlockCode
UBLOCK_TAI_XUAN_JING_SYMBOLS	unicode/uchar.h	/^    UBLOCK_TAI_XUAN_JING_SYMBOLS = 124, \/*[1D300]*\/$/;"	e	enum:UBlockCode
UBLOCK_TAMIL	unicode/uchar.h	/^    UBLOCK_TAMIL =20, \/*[0B80]*\/$/;"	e	enum:UBlockCode
UBLOCK_TELUGU	unicode/uchar.h	/^    UBLOCK_TELUGU =21, \/*[0C00]*\/$/;"	e	enum:UBlockCode
UBLOCK_THAANA	unicode/uchar.h	/^    UBLOCK_THAANA =14, \/*[0780]*\/$/;"	e	enum:UBlockCode
UBLOCK_THAI	unicode/uchar.h	/^    UBLOCK_THAI =25, \/*[0E00]*\/$/;"	e	enum:UBlockCode
UBLOCK_TIBETAN	unicode/uchar.h	/^    UBLOCK_TIBETAN =27, \/*[0F00]*\/$/;"	e	enum:UBlockCode
UBLOCK_TIFINAGH	unicode/uchar.h	/^    UBLOCK_TIFINAGH = 144, \/*[2D30]*\/$/;"	e	enum:UBlockCode
UBLOCK_TRANSPORT_AND_MAP_SYMBOLS	unicode/uchar.h	/^    UBLOCK_TRANSPORT_AND_MAP_SYMBOLS = 207, \/*[1F680]*\/$/;"	e	enum:UBlockCode
UBLOCK_UGARITIC	unicode/uchar.h	/^    UBLOCK_UGARITIC = 120, \/*[10380]*\/$/;"	e	enum:UBlockCode
UBLOCK_UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS	unicode/uchar.h	/^    UBLOCK_UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS =33, \/*[1400]*\/$/;"	e	enum:UBlockCode
UBLOCK_UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS_EXTENDED	unicode/uchar.h	/^    UBLOCK_UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS_EXTENDED = 173, \/*[18B0]*\/$/;"	e	enum:UBlockCode
UBLOCK_VAI	unicode/uchar.h	/^    UBLOCK_VAI = 159, \/*[A500]*\/$/;"	e	enum:UBlockCode
UBLOCK_VARIATION_SELECTORS	unicode/uchar.h	/^    UBLOCK_VARIATION_SELECTORS = 108, \/*[FE00]*\/$/;"	e	enum:UBlockCode
UBLOCK_VARIATION_SELECTORS_SUPPLEMENT	unicode/uchar.h	/^    UBLOCK_VARIATION_SELECTORS_SUPPLEMENT = 125, \/*[E0100]*\/$/;"	e	enum:UBlockCode
UBLOCK_VEDIC_EXTENSIONS	unicode/uchar.h	/^    UBLOCK_VEDIC_EXTENSIONS = 175, \/*[1CD0]*\/$/;"	e	enum:UBlockCode
UBLOCK_VERTICAL_FORMS	unicode/uchar.h	/^    UBLOCK_VERTICAL_FORMS = 145, \/*[FE10]*\/$/;"	e	enum:UBlockCode
UBLOCK_YIJING_HEXAGRAM_SYMBOLS	unicode/uchar.h	/^    UBLOCK_YIJING_HEXAGRAM_SYMBOLS = 116, \/*[4DC0]*\/$/;"	e	enum:UBlockCode
UBLOCK_YI_RADICALS	unicode/uchar.h	/^    UBLOCK_YI_RADICALS =73, \/*[A490]*\/$/;"	e	enum:UBlockCode
UBLOCK_YI_SYLLABLES	unicode/uchar.h	/^    UBLOCK_YI_SYLLABLES =72, \/*[A000]*\/$/;"	e	enum:UBlockCode
UBRKIMPL_H	ubrkimpl.h	9;"	d
UBRK_CHARACTER	unicode/ubrk.h	/^  UBRK_CHARACTER = 0,$/;"	e	enum:UBreakIteratorType
UBRK_COUNT	unicode/ubrk.h	/^  UBRK_COUNT = 5$/;"	e	enum:UBreakIteratorType
UBRK_DONE	unicode/ubrk.h	114;"	d
UBRK_H	unicode/ubrk.h	9;"	d
UBRK_LINE	unicode/ubrk.h	/^  UBRK_LINE = 2,$/;"	e	enum:UBreakIteratorType
UBRK_LINE_HARD	unicode/ubrk.h	/^    UBRK_LINE_HARD            = 100,$/;"	e	enum:ULineBreakTag
UBRK_LINE_HARD_LIMIT	unicode/ubrk.h	/^    UBRK_LINE_HARD_LIMIT      = 200$/;"	e	enum:ULineBreakTag
UBRK_LINE_SOFT	unicode/ubrk.h	/^    UBRK_LINE_SOFT            = 0,$/;"	e	enum:ULineBreakTag
UBRK_LINE_SOFT_LIMIT	unicode/ubrk.h	/^    UBRK_LINE_SOFT_LIMIT      = 100,$/;"	e	enum:ULineBreakTag
UBRK_SENTENCE	unicode/ubrk.h	/^  UBRK_SENTENCE = 3,$/;"	e	enum:UBreakIteratorType
UBRK_SENTENCE_SEP	unicode/ubrk.h	/^    UBRK_SENTENCE_SEP        = 100,$/;"	e	enum:USentenceBreakTag
UBRK_SENTENCE_SEP_LIMIT	unicode/ubrk.h	/^    UBRK_SENTENCE_SEP_LIMIT  = 200$/;"	e	enum:USentenceBreakTag
UBRK_SENTENCE_TERM	unicode/ubrk.h	/^    UBRK_SENTENCE_TERM       = 0,$/;"	e	enum:USentenceBreakTag
UBRK_SENTENCE_TERM_LIMIT	unicode/ubrk.h	/^    UBRK_SENTENCE_TERM_LIMIT = 100,$/;"	e	enum:USentenceBreakTag
UBRK_TITLE	unicode/ubrk.h	/^  UBRK_TITLE = 4,$/;"	e	enum:UBreakIteratorType
UBRK_TYPEDEF_UBREAK_ITERATOR	unicode/ubrk.h	21;"	d
UBRK_TYPEDEF_UBREAK_ITERATOR	unicode/ustring.h	25;"	d
UBRK_TYPEDEF_UBREAK_ITERATOR	ustr_imp.h	24;"	d
UBRK_WORD	unicode/ubrk.h	/^  UBRK_WORD = 1,$/;"	e	enum:UBreakIteratorType
UBRK_WORD_IDEO	unicode/ubrk.h	/^    UBRK_WORD_IDEO           = 400,$/;"	e	enum:UWordBreak
UBRK_WORD_IDEO_LIMIT	unicode/ubrk.h	/^    UBRK_WORD_IDEO_LIMIT     = 500$/;"	e	enum:UWordBreak
UBRK_WORD_KANA	unicode/ubrk.h	/^    UBRK_WORD_KANA           = 300,$/;"	e	enum:UWordBreak
UBRK_WORD_KANA_LIMIT	unicode/ubrk.h	/^    UBRK_WORD_KANA_LIMIT     = 400,$/;"	e	enum:UWordBreak
UBRK_WORD_LETTER	unicode/ubrk.h	/^    UBRK_WORD_LETTER         = 200,$/;"	e	enum:UWordBreak
UBRK_WORD_LETTER_LIMIT	unicode/ubrk.h	/^    UBRK_WORD_LETTER_LIMIT   = 300,$/;"	e	enum:UWordBreak
UBRK_WORD_NONE	unicode/ubrk.h	/^    UBRK_WORD_NONE           = 0,$/;"	e	enum:UWordBreak
UBRK_WORD_NONE_LIMIT	unicode/ubrk.h	/^    UBRK_WORD_NONE_LIMIT     = 100,$/;"	e	enum:UWordBreak
UBRK_WORD_NUMBER	unicode/ubrk.h	/^    UBRK_WORD_NUMBER         = 100,$/;"	e	enum:UWordBreak
UBRK_WORD_NUMBER_LIMIT	unicode/ubrk.h	/^    UBRK_WORD_NUMBER_LIMIT   = 200,$/;"	e	enum:UWordBreak
UBiDi	ubidiimp.h	/^struct UBiDi {$/;"	s
UBiDi	unicode/ubidi.h	/^struct UBiDi;$/;"	x
UBiDi	unicode/ubidi.h	/^typedef struct UBiDi UBiDi;$/;"	t	typeref:struct:UBiDi
UBiDi::bdp	ubidiimp.h	/^    const UBiDiProps *bdp;$/;"	m	struct:UBiDi	access:public
UBiDi::coClassCallback	ubidiimp.h	/^    const void *coClassCallback;            \/* context pointer *\/$/;"	m	struct:UBiDi	access:public
UBiDi::controlCount	ubidiimp.h	/^    int32_t controlCount;$/;"	m	struct:UBiDi	access:public
UBiDi::defaultParaLevel	ubidiimp.h	/^    UBiDiLevel defaultParaLevel;$/;"	m	struct:UBiDi	access:public
UBiDi::dirProps	ubidiimp.h	/^    const DirProp *dirProps;$/;"	m	struct:UBiDi	access:public
UBiDi::dirPropsMemory	ubidiimp.h	/^    DirProp *dirPropsMemory;$/;"	m	struct:UBiDi	access:public
UBiDi::dirPropsSize	ubidiimp.h	/^    int32_t dirPropsSize, levelsSize, parasSize, runsSize;$/;"	m	struct:UBiDi	access:public
UBiDi::direction	ubidiimp.h	/^    UBiDiDirection direction;$/;"	m	struct:UBiDi	access:public
UBiDi::flags	ubidiimp.h	/^    Flags flags;$/;"	m	struct:UBiDi	access:public
UBiDi::fnClassCallback	ubidiimp.h	/^    UBiDiClassCallback *fnClassCallback;    \/* action pointer *\/$/;"	m	struct:UBiDi	access:public
UBiDi::insertPoints	ubidiimp.h	/^    InsertPoints insertPoints;$/;"	m	struct:UBiDi	access:public
UBiDi::isInverse	ubidiimp.h	/^    UBool isInverse;$/;"	m	struct:UBiDi	access:public
UBiDi::lastArabicPos	ubidiimp.h	/^    int32_t lastArabicPos;$/;"	m	struct:UBiDi	access:public
UBiDi::length	ubidiimp.h	/^    int32_t length;$/;"	m	struct:UBiDi	access:public
UBiDi::levels	ubidiimp.h	/^    UBiDiLevel *levels;$/;"	m	struct:UBiDi	access:public
UBiDi::levelsMemory	ubidiimp.h	/^    UBiDiLevel *levelsMemory;$/;"	m	struct:UBiDi	access:public
UBiDi::levelsSize	ubidiimp.h	/^    int32_t dirPropsSize, levelsSize, parasSize, runsSize;$/;"	m	struct:UBiDi	access:public
UBiDi::mayAllocateRuns	ubidiimp.h	/^    UBool mayAllocateText, mayAllocateRuns;$/;"	m	struct:UBiDi	access:public
UBiDi::mayAllocateText	ubidiimp.h	/^    UBool mayAllocateText, mayAllocateRuns;$/;"	m	struct:UBiDi	access:public
UBiDi::orderParagraphsLTR	ubidiimp.h	/^    UBool orderParagraphsLTR;$/;"	m	struct:UBiDi	access:public
UBiDi::originalLength	ubidiimp.h	/^    int32_t originalLength;$/;"	m	struct:UBiDi	access:public
UBiDi::pImpTabPair	ubidiimp.h	/^    const struct ImpTabPair * pImpTabPair;  \/* pointer to levels state table pair *\/$/;"	m	struct:UBiDi	typeref:struct:UBiDi::ImpTabPair	access:public
UBiDi::pParaBiDi	ubidiimp.h	/^    const UBiDi * pParaBiDi;$/;"	m	struct:UBiDi	access:public
UBiDi::paraCount	ubidiimp.h	/^    int32_t paraCount;                  \/* set in getDirProps() *\/$/;"	m	struct:UBiDi	access:public
UBiDi::paraLevel	ubidiimp.h	/^    UBiDiLevel paraLevel;$/;"	m	struct:UBiDi	access:public
UBiDi::paras	ubidiimp.h	/^    Para *paras;                        \/* limits of paragraphs, filled in$/;"	m	struct:UBiDi	access:public
UBiDi::parasMemory	ubidiimp.h	/^    Para *parasMemory;$/;"	m	struct:UBiDi	access:public
UBiDi::parasSize	ubidiimp.h	/^    int32_t dirPropsSize, levelsSize, parasSize, runsSize;$/;"	m	struct:UBiDi	access:public
UBiDi::reorderingMode	ubidiimp.h	/^    UBiDiReorderingMode reorderingMode;$/;"	m	struct:UBiDi	access:public
UBiDi::reorderingOptions	ubidiimp.h	/^    uint32_t reorderingOptions;$/;"	m	struct:UBiDi	access:public
UBiDi::resultLength	ubidiimp.h	/^    int32_t resultLength;$/;"	m	struct:UBiDi	access:public
UBiDi::runCount	ubidiimp.h	/^    int32_t runCount;     \/* ==-1: runs not set up yet *\/$/;"	m	struct:UBiDi	access:public
UBiDi::runs	ubidiimp.h	/^    Run *runs;$/;"	m	struct:UBiDi	access:public
UBiDi::runsMemory	ubidiimp.h	/^    Run *runsMemory;$/;"	m	struct:UBiDi	access:public
UBiDi::runsSize	ubidiimp.h	/^    int32_t dirPropsSize, levelsSize, parasSize, runsSize;$/;"	m	struct:UBiDi	access:public
UBiDi::simpleParas	ubidiimp.h	/^    Para simpleParas[1];$/;"	m	struct:UBiDi	access:public
UBiDi::simpleRuns	ubidiimp.h	/^    Run simpleRuns[1];$/;"	m	struct:UBiDi	access:public
UBiDi::text	ubidiimp.h	/^    const UChar *text;$/;"	m	struct:UBiDi	access:public
UBiDi::trailingWSStart	ubidiimp.h	/^    int32_t trailingWSStart;$/;"	m	struct:UBiDi	access:public
UBiDiClassCallback	unicode/ubidi.h	/^UBiDiClassCallback(const void *context, UChar32 c);$/;"	t
UBiDiDirection	unicode/ubidi.h	/^enum UBiDiDirection {$/;"	g
UBiDiDirection	unicode/ubidi.h	/^typedef enum UBiDiDirection UBiDiDirection;$/;"	t	typeref:enum:UBiDiDirection
UBiDiLevel	unicode/ubidi.h	/^typedef uint8_t UBiDiLevel;$/;"	t
UBiDiProps	ubidi_props.c	/^struct UBiDiProps {$/;"	s	file:
UBiDiProps	ubidi_props.h	/^struct UBiDiProps;$/;"	x
UBiDiProps	ubidi_props.h	/^typedef struct UBiDiProps UBiDiProps;$/;"	t	typeref:struct:UBiDiProps
UBiDiProps::formatVersion	ubidi_props.c	/^    uint8_t formatVersion[4];$/;"	m	struct:UBiDiProps	file:	access:public
UBiDiProps::indexes	ubidi_props.c	/^    const int32_t *indexes;$/;"	m	struct:UBiDiProps	file:	access:public
UBiDiProps::jgArray	ubidi_props.c	/^    const uint8_t *jgArray;$/;"	m	struct:UBiDiProps	file:	access:public
UBiDiProps::mem	ubidi_props.c	/^    UDataMemory *mem;$/;"	m	struct:UBiDiProps	file:	access:public
UBiDiProps::mirrors	ubidi_props.c	/^    const uint32_t *mirrors;$/;"	m	struct:UBiDiProps	file:	access:public
UBiDiProps::trie	ubidi_props.c	/^    UTrie2 trie;$/;"	m	struct:UBiDiProps	file:	access:public
UBiDiReorderingMode	unicode/ubidi.h	/^typedef enum UBiDiReorderingMode {$/;"	g
UBiDiReorderingMode	unicode/ubidi.h	/^} UBiDiReorderingMode;$/;"	t	typeref:enum:UBiDiReorderingMode
UBiDiReorderingOption	unicode/ubidi.h	/^typedef enum UBiDiReorderingOption {$/;"	g
UBiDiReorderingOption	unicode/ubidi.h	/^} UBiDiReorderingOption;$/;"	t	typeref:enum:UBiDiReorderingOption
UBlockCode	unicode/uchar.h	/^enum UBlockCode {$/;"	g
UBlockCode	unicode/uchar.h	/^typedef enum UBlockCode UBlockCode;$/;"	t	typeref:enum:UBlockCode
UBool	unicode/umachine.h	/^typedef int8_t UBool;$/;"	t
UBreakIterator	unicode/ubrk.h	/^    typedef struct UBreakIterator UBreakIterator;$/;"	t	typeref:struct:UBreakIterator
UBreakIterator	unicode/ustring.h	/^    typedef struct UBreakIterator UBreakIterator;$/;"	t	typeref:struct:UBreakIterator
UBreakIterator	ustr_imp.h	/^    typedef struct UBreakIterator UBreakIterator;$/;"	t	typeref:struct:UBreakIterator
UBreakIteratorType	unicode/ubrk.h	/^typedef enum UBreakIteratorType {$/;"	g
UBreakIteratorType	unicode/ubrk.h	/^} UBreakIteratorType;$/;"	t	typeref:enum:UBreakIteratorType
UC0	ucnvscsu.c	/^    UC0=0xE0, \/* Select window 0 *\/$/;"	e	enum:__anon152	file:
UC7	ucnvscsu.c	/^    UC7=0xE7, \/* Select window 7 *\/$/;"	e	enum:__anon152	file:
UCASE_ABOVE	ucase.h	/^    UCASE_ABOVE=0x20,       \/* "above" accents with cc=230 *\/$/;"	e	enum:__anon57
UCASE_CASE_IGNORABLE	ucase.h	304;"	d
UCASE_CLOSURE_MAX_LENGTH	ucase.h	357;"	d
UCASE_DATA_NAME	ucase.h	250;"	d
UCASE_DATA_TYPE	ucase.h	251;"	d
UCASE_DELTA_MASK	ucase.h	297;"	d
UCASE_DELTA_SHIFT	ucase.h	296;"	d
UCASE_DOT_MASK	ucase.h	287;"	d
UCASE_EXCEPTION	ucase.h	285;"	d
UCASE_EXC_4	ucase.h	/^    UCASE_EXC_4,            \/* reserved *\/$/;"	e	enum:__anon58
UCASE_EXC_5	ucase.h	/^    UCASE_EXC_5,            \/* reserved *\/$/;"	e	enum:__anon58
UCASE_EXC_ABOVE	ucase.h	/^    UCASE_EXC_ABOVE=0x2000,         \/* "above" accents with cc=230 *\/$/;"	e	enum:__anon59
UCASE_EXC_ALL_SLOTS	ucase.h	/^    UCASE_EXC_ALL_SLOTS     \/* one past the last slot *\/$/;"	e	enum:__anon58
UCASE_EXC_CASE_IGNORABLE	ucase.h	331;"	d
UCASE_EXC_CLOSURE	ucase.h	/^    UCASE_EXC_CLOSURE,$/;"	e	enum:__anon58
UCASE_EXC_CONDITIONAL_FOLD	ucase.h	347;"	d
UCASE_EXC_CONDITIONAL_SPECIAL	ucase.h	346;"	d
UCASE_EXC_DOT_MASK	ucase.h	337;"	d
UCASE_EXC_DOT_SHIFT	ucase.h	334;"	d
UCASE_EXC_DOUBLE_SLOTS	ucase.h	327;"	d
UCASE_EXC_FOLD	ucase.h	/^    UCASE_EXC_FOLD,$/;"	e	enum:__anon58
UCASE_EXC_FULL_MAPPINGS	ucase.h	/^    UCASE_EXC_FULL_MAPPINGS,$/;"	e	enum:__anon58
UCASE_EXC_LOWER	ucase.h	/^    UCASE_EXC_LOWER,$/;"	e	enum:__anon58
UCASE_EXC_MASK	ucase.h	308;"	d
UCASE_EXC_NO_DOT	ucase.h	/^    UCASE_EXC_NO_DOT=0,$/;"	e	enum:__anon59
UCASE_EXC_OTHER_ACCENT	ucase.h	/^    UCASE_EXC_OTHER_ACCENT=0x3000   \/* other character (0<cc!=230) *\/$/;"	e	enum:__anon59
UCASE_EXC_SHIFT	ucase.h	307;"	d
UCASE_EXC_SOFT_DOTTED	ucase.h	/^    UCASE_EXC_SOFT_DOTTED=0x1000,$/;"	e	enum:__anon59
UCASE_EXC_TITLE	ucase.h	/^    UCASE_EXC_TITLE,$/;"	e	enum:__anon58
UCASE_EXC_UPPER	ucase.h	/^    UCASE_EXC_UPPER,$/;"	e	enum:__anon58
UCASE_FMT_0	ucase.h	254;"	d
UCASE_FMT_1	ucase.h	255;"	d
UCASE_FMT_2	ucase.h	256;"	d
UCASE_FMT_3	ucase.h	257;"	d
UCASE_FULL_FOLDING	ucase.h	351;"	d
UCASE_FULL_LOWER	ucase.h	350;"	d
UCASE_FULL_MAPPINGS_MAX_LENGTH	ucase.h	356;"	d
UCASE_FULL_TITLE	ucase.h	353;"	d
UCASE_FULL_UPPER	ucase.h	352;"	d
UCASE_GET_DELTA	ucase.h	301;"	d
UCASE_GET_TYPE	ucase.h	282;"	d
UCASE_IX_EXC_LENGTH	ucase.h	/^    UCASE_IX_EXC_LENGTH,$/;"	e	enum:__anon55
UCASE_IX_INDEX_TOP	ucase.h	/^    UCASE_IX_INDEX_TOP,$/;"	e	enum:__anon55
UCASE_IX_LENGTH	ucase.h	/^    UCASE_IX_LENGTH,$/;"	e	enum:__anon55
UCASE_IX_MAX_FULL_LENGTH	ucase.h	/^    UCASE_IX_MAX_FULL_LENGTH=15,$/;"	e	enum:__anon55
UCASE_IX_TOP	ucase.h	/^    UCASE_IX_TOP=16$/;"	e	enum:__anon55
UCASE_IX_TRIE_SIZE	ucase.h	/^    UCASE_IX_TRIE_SIZE,$/;"	e	enum:__anon55
UCASE_IX_UNFOLD_LENGTH	ucase.h	/^    UCASE_IX_UNFOLD_LENGTH,$/;"	e	enum:__anon55
UCASE_LOC_DUTCH	ucase.h	/^    UCASE_LOC_DUTCH$/;"	e	enum:__anon53
UCASE_LOC_LITHUANIAN	ucase.h	/^    UCASE_LOC_LITHUANIAN,$/;"	e	enum:__anon53
UCASE_LOC_ROOT	ucase.h	/^    UCASE_LOC_ROOT,$/;"	e	enum:__anon53
UCASE_LOC_TURKISH	ucase.h	/^    UCASE_LOC_TURKISH,$/;"	e	enum:__anon53
UCASE_LOC_UNKNOWN	ucase.h	/^    UCASE_LOC_UNKNOWN,$/;"	e	enum:__anon53
UCASE_LOWER	ucase.h	/^    UCASE_LOWER,$/;"	e	enum:__anon56
UCASE_MAX_DELTA	ucase.h	298;"	d
UCASE_MAX_EXCEPTIONS	ucase.h	309;"	d
UCASE_MAX_STRING_LENGTH	ucase.h	/^    UCASE_MAX_STRING_LENGTH=0x1f$/;"	e	enum:__anon54
UCASE_MIN_DELTA	ucase.h	299;"	d
UCASE_NONE	ucase.h	/^    UCASE_NONE,$/;"	e	enum:__anon56
UCASE_NO_DOT	ucase.h	/^    UCASE_NO_DOT=0,         \/* normal characters with cc=0 *\/$/;"	e	enum:__anon57
UCASE_OTHER_ACCENT	ucase.h	/^    UCASE_OTHER_ACCENT=0x30 \/* other accent character (0<cc!=230) *\/$/;"	e	enum:__anon57
UCASE_SENSITIVE	ucase.h	284;"	d
UCASE_SOFT_DOTTED	ucase.h	/^    UCASE_SOFT_DOTTED=0x10, \/* soft-dotted characters with cc=0 *\/$/;"	e	enum:__anon57
UCASE_TITLE	ucase.h	/^    UCASE_TITLE$/;"	e	enum:__anon56
UCASE_TYPE_MASK	ucase.h	274;"	d
UCASE_UNFOLD_ROWS	ucase.h	/^    UCASE_UNFOLD_ROWS,$/;"	e	enum:__anon60
UCASE_UNFOLD_ROW_WIDTH	ucase.h	/^    UCASE_UNFOLD_ROW_WIDTH,$/;"	e	enum:__anon60
UCASE_UNFOLD_STRING_WIDTH	ucase.h	/^    UCASE_UNFOLD_STRING_WIDTH$/;"	e	enum:__anon60
UCASE_UPPER	ucase.h	/^    UCASE_UPPER,$/;"	e	enum:__anon56
UCAT_H	unicode/ucat.h	12;"	d
UCHARSTRENUM_VT	ustrenum.cpp	/^static const UEnumeration UCHARSTRENUM_VT = {$/;"	v	file:
UCHAR_AGE	unicode/uchar.h	/^    UCHAR_AGE=0x4000,$/;"	e	enum:UProperty
UCHAR_ALPHABETIC	unicode/uchar.h	/^    UCHAR_ALPHABETIC=0,$/;"	e	enum:UProperty
UCHAR_ASCII_HEX_DIGIT	unicode/uchar.h	/^    UCHAR_ASCII_HEX_DIGIT=1,$/;"	e	enum:UProperty
UCHAR_BIDI_CLASS	unicode/uchar.h	/^    UCHAR_BIDI_CLASS=0x1000,$/;"	e	enum:UProperty
UCHAR_BIDI_CONTROL	unicode/uchar.h	/^    UCHAR_BIDI_CONTROL=2,$/;"	e	enum:UProperty
UCHAR_BIDI_MIRRORED	unicode/uchar.h	/^    UCHAR_BIDI_MIRRORED=3,$/;"	e	enum:UProperty
UCHAR_BIDI_MIRRORING_GLYPH	unicode/uchar.h	/^    UCHAR_BIDI_MIRRORING_GLYPH=0x4001,$/;"	e	enum:UProperty
UCHAR_BINARY_LIMIT	unicode/uchar.h	/^    UCHAR_BINARY_LIMIT=57,$/;"	e	enum:UProperty
UCHAR_BINARY_START	unicode/uchar.h	/^    UCHAR_BINARY_START=UCHAR_ALPHABETIC,$/;"	e	enum:UProperty
UCHAR_BLOCK	unicode/uchar.h	/^    UCHAR_BLOCK=0x1001,$/;"	e	enum:UProperty
UCHAR_CANONICAL_COMBINING_CLASS	unicode/uchar.h	/^    UCHAR_CANONICAL_COMBINING_CLASS=0x1002,$/;"	e	enum:UProperty
UCHAR_CASED	unicode/uchar.h	/^    UCHAR_CASED=49,$/;"	e	enum:UProperty
UCHAR_CASE_FOLDING	unicode/uchar.h	/^    UCHAR_CASE_FOLDING=0x4002,$/;"	e	enum:UProperty
UCHAR_CASE_IGNORABLE	unicode/uchar.h	/^    UCHAR_CASE_IGNORABLE=50,$/;"	e	enum:UProperty
UCHAR_CASE_SENSITIVE	unicode/uchar.h	/^   UCHAR_CASE_SENSITIVE=34,$/;"	e	enum:UProperty
UCHAR_CHANGES_WHEN_CASEFOLDED	unicode/uchar.h	/^    UCHAR_CHANGES_WHEN_CASEFOLDED=54,$/;"	e	enum:UProperty
UCHAR_CHANGES_WHEN_CASEMAPPED	unicode/uchar.h	/^    UCHAR_CHANGES_WHEN_CASEMAPPED=55,$/;"	e	enum:UProperty
UCHAR_CHANGES_WHEN_LOWERCASED	unicode/uchar.h	/^    UCHAR_CHANGES_WHEN_LOWERCASED=51,$/;"	e	enum:UProperty
UCHAR_CHANGES_WHEN_NFKC_CASEFOLDED	unicode/uchar.h	/^    UCHAR_CHANGES_WHEN_NFKC_CASEFOLDED=56,$/;"	e	enum:UProperty
UCHAR_CHANGES_WHEN_TITLECASED	unicode/uchar.h	/^    UCHAR_CHANGES_WHEN_TITLECASED=53,$/;"	e	enum:UProperty
UCHAR_CHANGES_WHEN_UPPERCASED	unicode/uchar.h	/^    UCHAR_CHANGES_WHEN_UPPERCASED=52,$/;"	e	enum:UProperty
UCHAR_DASH	unicode/uchar.h	/^    UCHAR_DASH=4,$/;"	e	enum:UProperty
UCHAR_DECOMPOSITION_TYPE	unicode/uchar.h	/^    UCHAR_DECOMPOSITION_TYPE=0x1003,$/;"	e	enum:UProperty
UCHAR_DEFAULT_IGNORABLE_CODE_POINT	unicode/uchar.h	/^    UCHAR_DEFAULT_IGNORABLE_CODE_POINT=5,$/;"	e	enum:UProperty
UCHAR_DEPRECATED	unicode/uchar.h	/^    UCHAR_DEPRECATED=6,$/;"	e	enum:UProperty
UCHAR_DIACRITIC	unicode/uchar.h	/^    UCHAR_DIACRITIC=7,$/;"	e	enum:UProperty
UCHAR_DOUBLE_LIMIT	unicode/uchar.h	/^    UCHAR_DOUBLE_LIMIT=0x3001,$/;"	e	enum:UProperty
UCHAR_DOUBLE_START	unicode/uchar.h	/^    UCHAR_DOUBLE_START=UCHAR_NUMERIC_VALUE,$/;"	e	enum:UProperty
UCHAR_EAST_ASIAN_WIDTH	unicode/uchar.h	/^    UCHAR_EAST_ASIAN_WIDTH=0x1004,$/;"	e	enum:UProperty
UCHAR_EXTENDER	unicode/uchar.h	/^    UCHAR_EXTENDER=8,$/;"	e	enum:UProperty
UCHAR_FULL_COMPOSITION_EXCLUSION	unicode/uchar.h	/^    UCHAR_FULL_COMPOSITION_EXCLUSION=9,$/;"	e	enum:UProperty
UCHAR_GENERAL_CATEGORY	unicode/uchar.h	/^    UCHAR_GENERAL_CATEGORY=0x1005,$/;"	e	enum:UProperty
UCHAR_GENERAL_CATEGORY_MASK	unicode/uchar.h	/^    UCHAR_GENERAL_CATEGORY_MASK=0x2000,$/;"	e	enum:UProperty
UCHAR_GRAPHEME_BASE	unicode/uchar.h	/^    UCHAR_GRAPHEME_BASE=10,$/;"	e	enum:UProperty
UCHAR_GRAPHEME_CLUSTER_BREAK	unicode/uchar.h	/^    UCHAR_GRAPHEME_CLUSTER_BREAK=0x1012,$/;"	e	enum:UProperty
UCHAR_GRAPHEME_EXTEND	unicode/uchar.h	/^    UCHAR_GRAPHEME_EXTEND=11,$/;"	e	enum:UProperty
UCHAR_GRAPHEME_LINK	unicode/uchar.h	/^    UCHAR_GRAPHEME_LINK=12,$/;"	e	enum:UProperty
UCHAR_H	unicode/uchar.h	24;"	d
UCHAR_HANGUL_SYLLABLE_TYPE	unicode/uchar.h	/^    UCHAR_HANGUL_SYLLABLE_TYPE=0x100B,$/;"	e	enum:UProperty
UCHAR_HEX_DIGIT	unicode/uchar.h	/^    UCHAR_HEX_DIGIT=13,$/;"	e	enum:UProperty
UCHAR_HYPHEN	unicode/uchar.h	/^    UCHAR_HYPHEN=14,$/;"	e	enum:UProperty
UCHAR_IDEOGRAPHIC	unicode/uchar.h	/^    UCHAR_IDEOGRAPHIC=17,$/;"	e	enum:UProperty
UCHAR_IDS_BINARY_OPERATOR	unicode/uchar.h	/^    UCHAR_IDS_BINARY_OPERATOR=18,$/;"	e	enum:UProperty
UCHAR_IDS_TRINARY_OPERATOR	unicode/uchar.h	/^    UCHAR_IDS_TRINARY_OPERATOR=19,$/;"	e	enum:UProperty
UCHAR_ID_CONTINUE	unicode/uchar.h	/^    UCHAR_ID_CONTINUE=15,$/;"	e	enum:UProperty
UCHAR_ID_START	unicode/uchar.h	/^    UCHAR_ID_START=16,$/;"	e	enum:UProperty
UCHAR_INT_LIMIT	unicode/uchar.h	/^    UCHAR_INT_LIMIT=0x1015,$/;"	e	enum:UProperty
UCHAR_INT_START	unicode/uchar.h	/^    UCHAR_INT_START=UCHAR_BIDI_CLASS,$/;"	e	enum:UProperty
UCHAR_INVALID_CODE	unicode/uchar.h	/^    UCHAR_INVALID_CODE = -1$/;"	e	enum:UProperty
UCHAR_ISO_COMMENT	unicode/uchar.h	/^    UCHAR_ISO_COMMENT=0x4003,$/;"	e	enum:UProperty
UCHAR_IS_INVARIANT	uinvchar.c	143;"	d	file:
UCHAR_JOINING_GROUP	unicode/uchar.h	/^    UCHAR_JOINING_GROUP=0x1006,$/;"	e	enum:UProperty
UCHAR_JOINING_TYPE	unicode/uchar.h	/^    UCHAR_JOINING_TYPE=0x1007,$/;"	e	enum:UProperty
UCHAR_JOIN_CONTROL	unicode/uchar.h	/^    UCHAR_JOIN_CONTROL=20,$/;"	e	enum:UProperty
UCHAR_LEAD_CANONICAL_COMBINING_CLASS	unicode/uchar.h	/^    UCHAR_LEAD_CANONICAL_COMBINING_CLASS=0x1010,$/;"	e	enum:UProperty
UCHAR_LINE_BREAK	unicode/uchar.h	/^    UCHAR_LINE_BREAK=0x1008,$/;"	e	enum:UProperty
UCHAR_LOGICAL_ORDER_EXCEPTION	unicode/uchar.h	/^    UCHAR_LOGICAL_ORDER_EXCEPTION=21,$/;"	e	enum:UProperty
UCHAR_LOWERCASE	unicode/uchar.h	/^    UCHAR_LOWERCASE=22,$/;"	e	enum:UProperty
UCHAR_LOWERCASE_MAPPING	unicode/uchar.h	/^    UCHAR_LOWERCASE_MAPPING=0x4004,$/;"	e	enum:UProperty
UCHAR_MASK_LIMIT	unicode/uchar.h	/^    UCHAR_MASK_LIMIT=0x2001,$/;"	e	enum:UProperty
UCHAR_MASK_START	unicode/uchar.h	/^    UCHAR_MASK_START=UCHAR_GENERAL_CATEGORY_MASK,$/;"	e	enum:UProperty
UCHAR_MATH	unicode/uchar.h	/^    UCHAR_MATH=23,$/;"	e	enum:UProperty
UCHAR_MAX_VALUE	unicode/uchar.h	134;"	d
UCHAR_MIN_VALUE	unicode/uchar.h	124;"	d
UCHAR_NAME	unicode/uchar.h	/^    UCHAR_NAME=0x4005,$/;"	e	enum:UProperty
UCHAR_NFC_INERT	unicode/uchar.h	/^    UCHAR_NFC_INERT=39,$/;"	e	enum:UProperty
UCHAR_NFC_QUICK_CHECK	unicode/uchar.h	/^    UCHAR_NFC_QUICK_CHECK=0x100E,$/;"	e	enum:UProperty
UCHAR_NFD_INERT	unicode/uchar.h	/^    UCHAR_NFD_INERT=37,$/;"	e	enum:UProperty
UCHAR_NFD_QUICK_CHECK	unicode/uchar.h	/^    UCHAR_NFD_QUICK_CHECK=0x100C,$/;"	e	enum:UProperty
UCHAR_NFKC_INERT	unicode/uchar.h	/^    UCHAR_NFKC_INERT=40,$/;"	e	enum:UProperty
UCHAR_NFKC_QUICK_CHECK	unicode/uchar.h	/^    UCHAR_NFKC_QUICK_CHECK=0x100F,$/;"	e	enum:UProperty
UCHAR_NFKD_INERT	unicode/uchar.h	/^    UCHAR_NFKD_INERT=38,$/;"	e	enum:UProperty
UCHAR_NFKD_QUICK_CHECK	unicode/uchar.h	/^    UCHAR_NFKD_QUICK_CHECK=0x100D,$/;"	e	enum:UProperty
UCHAR_NONCHARACTER_CODE_POINT	unicode/uchar.h	/^    UCHAR_NONCHARACTER_CODE_POINT=24,$/;"	e	enum:UProperty
UCHAR_NUMERIC_TYPE	unicode/uchar.h	/^    UCHAR_NUMERIC_TYPE=0x1009,$/;"	e	enum:UProperty
UCHAR_NUMERIC_VALUE	unicode/uchar.h	/^    UCHAR_NUMERIC_VALUE=0x3000,$/;"	e	enum:UProperty
UCHAR_OTHER_PROPERTY_LIMIT	unicode/uchar.h	/^    UCHAR_OTHER_PROPERTY_LIMIT=0x7001,$/;"	e	enum:UProperty
UCHAR_OTHER_PROPERTY_START	unicode/uchar.h	/^    UCHAR_OTHER_PROPERTY_START=UCHAR_SCRIPT_EXTENSIONS,$/;"	e	enum:UProperty
UCHAR_PATTERN_SYNTAX	unicode/uchar.h	/^    UCHAR_PATTERN_SYNTAX=42,$/;"	e	enum:UProperty
UCHAR_PATTERN_WHITE_SPACE	unicode/uchar.h	/^    UCHAR_PATTERN_WHITE_SPACE=43,$/;"	e	enum:UProperty
UCHAR_POSIX_ALNUM	unicode/uchar.h	/^    UCHAR_POSIX_ALNUM=44,$/;"	e	enum:UProperty
UCHAR_POSIX_BLANK	unicode/uchar.h	/^    UCHAR_POSIX_BLANK=45,$/;"	e	enum:UProperty
UCHAR_POSIX_GRAPH	unicode/uchar.h	/^    UCHAR_POSIX_GRAPH=46,$/;"	e	enum:UProperty
UCHAR_POSIX_PRINT	unicode/uchar.h	/^    UCHAR_POSIX_PRINT=47,$/;"	e	enum:UProperty
UCHAR_POSIX_XDIGIT	unicode/uchar.h	/^    UCHAR_POSIX_XDIGIT=48,$/;"	e	enum:UProperty
UCHAR_QUOTATION_MARK	unicode/uchar.h	/^    UCHAR_QUOTATION_MARK=25,$/;"	e	enum:UProperty
UCHAR_RADICAL	unicode/uchar.h	/^    UCHAR_RADICAL=26,$/;"	e	enum:UProperty
UCHAR_SCRIPT	unicode/uchar.h	/^    UCHAR_SCRIPT=0x100A,$/;"	e	enum:UProperty
UCHAR_SCRIPT_EXTENSIONS	unicode/uchar.h	/^    UCHAR_SCRIPT_EXTENSIONS=0x7000,$/;"	e	enum:UProperty
UCHAR_SEGMENT_STARTER	unicode/uchar.h	/^    UCHAR_SEGMENT_STARTER=41,$/;"	e	enum:UProperty
UCHAR_SENTENCE_BREAK	unicode/uchar.h	/^    UCHAR_SENTENCE_BREAK=0x1013,$/;"	e	enum:UProperty
UCHAR_SIMPLE_CASE_FOLDING	unicode/uchar.h	/^    UCHAR_SIMPLE_CASE_FOLDING=0x4006,$/;"	e	enum:UProperty
UCHAR_SIMPLE_LOWERCASE_MAPPING	unicode/uchar.h	/^    UCHAR_SIMPLE_LOWERCASE_MAPPING=0x4007,$/;"	e	enum:UProperty
UCHAR_SIMPLE_TITLECASE_MAPPING	unicode/uchar.h	/^    UCHAR_SIMPLE_TITLECASE_MAPPING=0x4008,$/;"	e	enum:UProperty
UCHAR_SIMPLE_UPPERCASE_MAPPING	unicode/uchar.h	/^    UCHAR_SIMPLE_UPPERCASE_MAPPING=0x4009,$/;"	e	enum:UProperty
UCHAR_SOFT_DOTTED	unicode/uchar.h	/^    UCHAR_SOFT_DOTTED=27,$/;"	e	enum:UProperty
UCHAR_STRING_LIMIT	unicode/uchar.h	/^    UCHAR_STRING_LIMIT=0x400D,$/;"	e	enum:UProperty
UCHAR_STRING_START	unicode/uchar.h	/^    UCHAR_STRING_START=UCHAR_AGE,$/;"	e	enum:UProperty
UCHAR_S_TERM	unicode/uchar.h	/^    UCHAR_S_TERM=35,$/;"	e	enum:UProperty
UCHAR_TERMINAL_PUNCTUATION	unicode/uchar.h	/^    UCHAR_TERMINAL_PUNCTUATION=28,$/;"	e	enum:UProperty
UCHAR_TITLECASE_MAPPING	unicode/uchar.h	/^    UCHAR_TITLECASE_MAPPING=0x400A,$/;"	e	enum:UProperty
UCHAR_TO_CHAR	uinvchar.c	150;"	d	file:
UCHAR_TO_CHAR	uinvchar.c	153;"	d	file:
UCHAR_TRAIL_CANONICAL_COMBINING_CLASS	unicode/uchar.h	/^    UCHAR_TRAIL_CANONICAL_COMBINING_CLASS=0x1011,$/;"	e	enum:UProperty
UCHAR_UNICODE_1_NAME	unicode/uchar.h	/^    UCHAR_UNICODE_1_NAME=0x400B,$/;"	e	enum:UProperty
UCHAR_UNIFIED_IDEOGRAPH	unicode/uchar.h	/^    UCHAR_UNIFIED_IDEOGRAPH=29,$/;"	e	enum:UProperty
UCHAR_UPPERCASE	unicode/uchar.h	/^    UCHAR_UPPERCASE=30,$/;"	e	enum:UProperty
UCHAR_UPPERCASE_MAPPING	unicode/uchar.h	/^    UCHAR_UPPERCASE_MAPPING=0x400C,$/;"	e	enum:UProperty
UCHAR_VARIATION_SELECTOR	unicode/uchar.h	/^    UCHAR_VARIATION_SELECTOR=36,$/;"	e	enum:UProperty
UCHAR_WHITE_SPACE	unicode/uchar.h	/^    UCHAR_WHITE_SPACE=31,$/;"	e	enum:UProperty
UCHAR_WORD_BREAK	unicode/uchar.h	/^    UCHAR_WORD_BREAK=0x1014,$/;"	e	enum:UProperty
UCHAR_XID_CONTINUE	unicode/uchar.h	/^    UCHAR_XID_CONTINUE=32,$/;"	e	enum:UProperty
UCHAR_XID_START	unicode/uchar.h	/^    UCHAR_XID_START=33,$/;"	e	enum:UProperty
UCHRITER_H	unicode/uchriter.h	9;"	d
UCLN_COMMON	ucln.h	/^    UCLN_COMMON \/* This must be the last one to cleanup. *\/$/;"	e	enum:ECleanupLibraryType
UCLN_COMMON_BREAKITERATOR	ucln_cmn.h	/^    UCLN_COMMON_BREAKITERATOR,$/;"	e	enum:ECleanupCommonType
UCLN_COMMON_BREAKITERATOR_DICT	ucln_cmn.h	/^    UCLN_COMMON_BREAKITERATOR_DICT,$/;"	e	enum:ECleanupCommonType
UCLN_COMMON_COUNT	ucln_cmn.h	/^    UCLN_COMMON_COUNT \/* This must be last *\/$/;"	e	enum:ECleanupCommonType
UCLN_COMMON_LOCALE	ucln_cmn.h	/^    UCLN_COMMON_LOCALE,$/;"	e	enum:ECleanupCommonType
UCLN_COMMON_LOCALE_AVAILABLE	ucln_cmn.h	/^    UCLN_COMMON_LOCALE_AVAILABLE,$/;"	e	enum:ECleanupCommonType
UCLN_COMMON_NORMALIZER2	ucln_cmn.h	/^    UCLN_COMMON_NORMALIZER2,$/;"	e	enum:ECleanupCommonType
UCLN_COMMON_PNAME	ucln_cmn.h	/^    UCLN_COMMON_PNAME,$/;"	e	enum:ECleanupCommonType
UCLN_COMMON_PUTIL	ucln_cmn.h	/^    UCLN_COMMON_PUTIL,$/;"	e	enum:ECleanupCommonType
UCLN_COMMON_SERVICE	ucln_cmn.h	/^    UCLN_COMMON_SERVICE,$/;"	e	enum:ECleanupCommonType
UCLN_COMMON_START	ucln_cmn.h	/^    UCLN_COMMON_START = -1,$/;"	e	enum:ECleanupCommonType
UCLN_COMMON_UCNV	ucln_cmn.h	/^    UCLN_COMMON_UCNV,$/;"	e	enum:ECleanupCommonType
UCLN_COMMON_UCNV_IO	ucln_cmn.h	/^    UCLN_COMMON_UCNV_IO,$/;"	e	enum:ECleanupCommonType
UCLN_COMMON_UDATA	ucln_cmn.h	/^    UCLN_COMMON_UDATA,$/;"	e	enum:ECleanupCommonType
UCLN_COMMON_ULOC	ucln_cmn.h	/^    UCLN_COMMON_ULOC,$/;"	e	enum:ECleanupCommonType
UCLN_COMMON_UNAMES	ucln_cmn.h	/^    UCLN_COMMON_UNAMES,$/;"	e	enum:ECleanupCommonType
UCLN_COMMON_UPROPS	ucln_cmn.h	/^    UCLN_COMMON_UPROPS,$/;"	e	enum:ECleanupCommonType
UCLN_COMMON_URES	ucln_cmn.h	/^    UCLN_COMMON_URES,$/;"	e	enum:ECleanupCommonType
UCLN_COMMON_USET	ucln_cmn.h	/^    UCLN_COMMON_USET,$/;"	e	enum:ECleanupCommonType
UCLN_COMMON_USPREP	ucln_cmn.h	/^    UCLN_COMMON_USPREP,$/;"	e	enum:ECleanupCommonType
UCLN_CTESTFW	ucln.h	/^    UCLN_CTESTFW,$/;"	e	enum:ECleanupLibraryType
UCLN_CUSTOM	ucln.h	/^    UCLN_CUSTOM,    \/* Custom is for anyone else. *\/$/;"	e	enum:ECleanupLibraryType
UCLN_DEBUG_CLEANUP	ucln_cmn.c	35;"	d	file:
UCLN_FINI	ucln_imp.h	/^U_CAPI void U_EXPORT2 UCLN_FINI ()$/;"	f	signature:()
UCLN_FINI	ucln_imp.h	/^U_CAPI void U_EXPORT2 UCLN_FINI (void);$/;"	p	signature:(void)
UCLN_I18N	ucln.h	/^    UCLN_I18N,$/;"	e	enum:ECleanupLibraryType
UCLN_IO	ucln.h	/^    UCLN_IO,$/;"	e	enum:ECleanupLibraryType
UCLN_LAYOUT	ucln.h	/^    UCLN_LAYOUT,$/;"	e	enum:ECleanupLibraryType
UCLN_LAYOUTEX	ucln.h	/^    UCLN_LAYOUTEX,$/;"	e	enum:ECleanupLibraryType
UCLN_NO_AUTO_CLEANUP	unicode/platform.h	41;"	d
UCLN_NO_AUTO_CLEANUP	unicode/pwin32.h	190;"	d
UCLN_START	ucln.h	/^    UCLN_START = -1,$/;"	e	enum:ECleanupLibraryType
UCLN_TOOLUTIL	ucln.h	/^    UCLN_TOOLUTIL,$/;"	e	enum:ECleanupLibraryType
UCLN_TYPE	ucln_cmn.c	26;"	d	file:
UCLN_UPLUG	ucln.h	/^    UCLN_UPLUG,     \/* ICU plugins *\/$/;"	e	enum:ECleanupLibraryType
UCNVSEL_INDEX_COUNT	ucnvsel.cpp	/^  UCNVSEL_INDEX_COUNT = 16$/;"	e	enum:__anon150	file:
UCNVSEL_INDEX_NAMES_COUNT	ucnvsel.cpp	/^  UCNVSEL_INDEX_NAMES_COUNT,    \/\/ number of encoding names$/;"	e	enum:__anon150	file:
UCNVSEL_INDEX_NAMES_LENGTH	ucnvsel.cpp	/^  UCNVSEL_INDEX_NAMES_LENGTH,   \/\/ number of encoding name bytes including padding$/;"	e	enum:__anon150	file:
UCNVSEL_INDEX_PV_COUNT	ucnvsel.cpp	/^  UCNVSEL_INDEX_PV_COUNT,       \/\/ number of uint32_t in the bit vectors$/;"	e	enum:__anon150	file:
UCNVSEL_INDEX_SIZE	ucnvsel.cpp	/^  UCNVSEL_INDEX_SIZE = 15,      \/\/ bytes following the DataHeader$/;"	e	enum:__anon150	file:
UCNVSEL_INDEX_TRIE_SIZE	ucnvsel.cpp	/^  UCNVSEL_INDEX_TRIE_SIZE,      \/\/ trie size in bytes$/;"	e	enum:__anon150	file:
UCNV_2022_MAX_CONVERTERS	ucnv2022.c	193;"	d	file:
UCNV_AMBIGUOUS_ALIAS_MAP_BIT	ucnv_io.h	22;"	d
UCNV_BLD_H	ucnv_bld.h	18;"	d
UCNV_BOCU1	unicode/ucnv.h	/^    UCNV_BOCU1,$/;"	e	enum:__anon107
UCNV_CACHE_LOAD_FACTOR	ucnv_bld.c	398;"	d	file:
UCNV_CB_H	unicode/ucnv_cb.h	62;"	d
UCNV_CESU8	unicode/ucnv.h	/^    UCNV_CESU8,$/;"	e	enum:__anon107
UCNV_CLONE	unicode/ucnv_err.h	/^    UCNV_CLONE = 5         \/**< Called when ucnv_safeClone() is called on the$/;"	e	enum:__anon104
UCNV_CLOSE	unicode/ucnv_err.h	/^    UCNV_CLOSE = 4,        \/**< Called when the converter is closed. The$/;"	e	enum:__anon104
UCNV_CLOSE_BRACE	ucnvhz.c	31;"	d	file:
UCNV_CNV_H	ucnv_cnv.h	18;"	d
UCNV_CONTAINS_OPTION_BIT	ucnv_io.h	23;"	d
UCNV_CONVERTER_INDEX_MASK	ucnv_io.h	24;"	d
UCNV_DBCS	unicode/ucnv.h	/^    UCNV_DBCS = 1,$/;"	e	enum:__anon107
UCNV_DEBUG_LOG	ucnv_bld.c	51;"	d	file:
UCNV_EBCDIC_STATEFUL	unicode/ucnv.h	/^    UCNV_EBCDIC_STATEFUL = 9,$/;"	e	enum:__anon107
UCNV_ERROR_BUFFER_LENGTH	ucnv_bld.h	32;"	d
UCNV_ERR_H	unicode/ucnv_err.h	84;"	d
UCNV_ESCAPE_C	unicode/ucnv_err.h	123;"	d
UCNV_ESCAPE_CSS2	unicode/ucnv_err.h	147;"	d
UCNV_ESCAPE_ICU	unicode/ucnv_err.h	112;"	d
UCNV_ESCAPE_JAVA	unicode/ucnv_err.h	117;"	d
UCNV_ESCAPE_UNICODE	unicode/ucnv_err.h	140;"	d
UCNV_ESCAPE_XML_DEC	unicode/ucnv_err.h	129;"	d
UCNV_ESCAPE_XML_HEX	unicode/ucnv_err.h	135;"	d
UCNV_EXT_ARRAY	ucnv_ext.h	338;"	d
UCNV_EXT_COUNT_BYTES	ucnv_ext.h	/^    UCNV_EXT_COUNT_BYTES,               \/* 17 *\/$/;"	e	enum:__anon62
UCNV_EXT_COUNT_UCHARS	ucnv_ext.h	/^    UCNV_EXT_COUNT_UCHARS,$/;"	e	enum:__anon62
UCNV_EXT_FLAGS	ucnv_ext.h	/^    UCNV_EXT_FLAGS,$/;"	e	enum:__anon62
UCNV_EXT_FROM_U	ucnv_ext.h	442;"	d
UCNV_EXT_FROM_U_BYTES_INDEX	ucnv_ext.h	/^    UCNV_EXT_FROM_U_BYTES_INDEX,$/;"	e	enum:__anon62
UCNV_EXT_FROM_U_BYTES_LENGTH	ucnv_ext.h	/^    UCNV_EXT_FROM_U_BYTES_LENGTH,$/;"	e	enum:__anon62
UCNV_EXT_FROM_U_DATA_MASK	ucnv_ext.h	448;"	d
UCNV_EXT_FROM_U_GET_DATA	ucnv_ext.h	469;"	d
UCNV_EXT_FROM_U_GET_LENGTH	ucnv_ext.h	466;"	d
UCNV_EXT_FROM_U_GET_PARTIAL_INDEX	ucnv_ext.h	460;"	d
UCNV_EXT_FROM_U_IS_PARTIAL	ucnv_ext.h	459;"	d
UCNV_EXT_FROM_U_IS_ROUNDTRIP	ucnv_ext.h	462;"	d
UCNV_EXT_FROM_U_LENGTH	ucnv_ext.h	/^    UCNV_EXT_FROM_U_LENGTH,$/;"	e	enum:__anon62
UCNV_EXT_FROM_U_LENGTH_SHIFT	ucnv_ext.h	445;"	d
UCNV_EXT_FROM_U_MASK_ROUNDTRIP	ucnv_ext.h	463;"	d
UCNV_EXT_FROM_U_MAX_DIRECT_LENGTH	ucnv_ext.h	454;"	d
UCNV_EXT_FROM_U_RESERVED_MASK	ucnv_ext.h	447;"	d
UCNV_EXT_FROM_U_ROUNDTRIP_FLAG	ucnv_ext.h	446;"	d
UCNV_EXT_FROM_U_STAGE_12_INDEX	ucnv_ext.h	/^    UCNV_EXT_FROM_U_STAGE_12_INDEX,     \/* 10 *\/$/;"	e	enum:__anon62
UCNV_EXT_FROM_U_STAGE_12_LENGTH	ucnv_ext.h	/^    UCNV_EXT_FROM_U_STAGE_12_LENGTH,$/;"	e	enum:__anon62
UCNV_EXT_FROM_U_STAGE_1_LENGTH	ucnv_ext.h	/^    UCNV_EXT_FROM_U_STAGE_1_LENGTH,$/;"	e	enum:__anon62
UCNV_EXT_FROM_U_STAGE_3B_INDEX	ucnv_ext.h	/^    UCNV_EXT_FROM_U_STAGE_3B_INDEX,$/;"	e	enum:__anon62
UCNV_EXT_FROM_U_STAGE_3B_LENGTH	ucnv_ext.h	/^    UCNV_EXT_FROM_U_STAGE_3B_LENGTH,$/;"	e	enum:__anon62
UCNV_EXT_FROM_U_STAGE_3_INDEX	ucnv_ext.h	/^    UCNV_EXT_FROM_U_STAGE_3_INDEX,$/;"	e	enum:__anon62
UCNV_EXT_FROM_U_STAGE_3_LENGTH	ucnv_ext.h	/^    UCNV_EXT_FROM_U_STAGE_3_LENGTH,$/;"	e	enum:__anon62
UCNV_EXT_FROM_U_SUBCHAR1	ucnv_ext.h	451;"	d
UCNV_EXT_FROM_U_UCHARS_INDEX	ucnv_ext.h	/^    UCNV_EXT_FROM_U_UCHARS_INDEX,       \/* 5 *\/$/;"	e	enum:__anon62
UCNV_EXT_FROM_U_VALUES_INDEX	ucnv_ext.h	/^    UCNV_EXT_FROM_U_VALUES_INDEX,$/;"	e	enum:__anon62
UCNV_EXT_INDEXES_LENGTH	ucnv_ext.h	/^    UCNV_EXT_INDEXES_LENGTH,            \/* 0 *\/$/;"	e	enum:__anon62
UCNV_EXT_INDEXES_MIN_LENGTH	ucnv_ext.h	/^    UCNV_EXT_INDEXES_MIN_LENGTH=32$/;"	e	enum:__anon62
UCNV_EXT_MAX_BYTES	ucnv_ext.h	457;"	d
UCNV_EXT_MAX_UCHARS	ucnv_ext.h	413;"	d
UCNV_EXT_RESERVED_INDEX	ucnv_ext.h	/^    UCNV_EXT_RESERVED_INDEX,            \/* 20, moves with additional indexes *\/$/;"	e	enum:__anon62
UCNV_EXT_SIZE	ucnv_ext.h	/^    UCNV_EXT_SIZE=31,$/;"	e	enum:__anon62
UCNV_EXT_STAGE_2_LEFT_SHIFT	ucnv_ext.h	438;"	d
UCNV_EXT_STAGE_3_GRANULARITY	ucnv_ext.h	439;"	d
UCNV_EXT_TO_U_BYTE_SHIFT	ucnv_ext.h	403;"	d
UCNV_EXT_TO_U_GET_BYTE	ucnv_ext.h	417;"	d
UCNV_EXT_TO_U_GET_CODE_POINT	ucnv_ext.h	428;"	d
UCNV_EXT_TO_U_GET_INDEX	ucnv_ext.h	430;"	d
UCNV_EXT_TO_U_GET_LENGTH	ucnv_ext.h	431;"	d
UCNV_EXT_TO_U_GET_PARTIAL_INDEX	ucnv_ext.h	421;"	d
UCNV_EXT_TO_U_GET_VALUE	ucnv_ext.h	418;"	d
UCNV_EXT_TO_U_INDEX	ucnv_ext.h	/^    UCNV_EXT_TO_U_INDEX,                \/* 1 *\/$/;"	e	enum:__anon62
UCNV_EXT_TO_U_INDEX_MASK	ucnv_ext.h	408;"	d
UCNV_EXT_TO_U_IS_CODE_POINT	ucnv_ext.h	427;"	d
UCNV_EXT_TO_U_IS_PARTIAL	ucnv_ext.h	420;"	d
UCNV_EXT_TO_U_IS_ROUNDTRIP	ucnv_ext.h	423;"	d
UCNV_EXT_TO_U_LENGTH	ucnv_ext.h	/^    UCNV_EXT_TO_U_LENGTH,$/;"	e	enum:__anon62
UCNV_EXT_TO_U_LENGTH_OFFSET	ucnv_ext.h	410;"	d
UCNV_EXT_TO_U_LENGTH_SHIFT	ucnv_ext.h	409;"	d
UCNV_EXT_TO_U_MAKE_WORD	ucnv_ext.h	415;"	d
UCNV_EXT_TO_U_MASK_ROUNDTRIP	ucnv_ext.h	424;"	d
UCNV_EXT_TO_U_MAX_CODE_POINT	ucnv_ext.h	406;"	d
UCNV_EXT_TO_U_MIN_CODE_POINT	ucnv_ext.h	405;"	d
UCNV_EXT_TO_U_ROUNDTRIP_FLAG	ucnv_ext.h	407;"	d
UCNV_EXT_TO_U_UCHARS_INDEX	ucnv_ext.h	/^    UCNV_EXT_TO_U_UCHARS_INDEX,$/;"	e	enum:__anon62
UCNV_EXT_TO_U_UCHARS_LENGTH	ucnv_ext.h	/^    UCNV_EXT_TO_U_UCHARS_LENGTH,$/;"	e	enum:__anon62
UCNV_EXT_TO_U_VALUE_MASK	ucnv_ext.h	404;"	d
UCNV_EXT_TO_U_VERIFY_SISO_MATCH	ucnv_ext.c	110;"	d	file:
UCNV_FAST_IS_UTF8	ucnv_imp.h	37;"	d
UCNV_FROM_U_CALLBACK_ESCAPE	ucnv_err.c	/^UCNV_FROM_U_CALLBACK_ESCAPE ($/;"	f	signature:( const void *context, UConverterFromUnicodeArgs *fromArgs, const UChar *codeUnits, int32_t length, UChar32 codePoint, UConverterCallbackReason reason, UErrorCode * err)
UCNV_FROM_U_CALLBACK_ESCAPE	unicode/ucnv_err.h	/^U_STABLE void U_EXPORT2 UCNV_FROM_U_CALLBACK_ESCAPE ($/;"	p	signature:( const void *context, UConverterFromUnicodeArgs *fromUArgs, const UChar* codeUnits, int32_t length, UChar32 codePoint, UConverterCallbackReason reason, UErrorCode * err)
UCNV_FROM_U_CALLBACK_ESCAPE	unicode/urename.h	61;"	d
UCNV_FROM_U_CALLBACK_SKIP	ucnv_err.c	/^UCNV_FROM_U_CALLBACK_SKIP (                  $/;"	f	signature:( const void *context, UConverterFromUnicodeArgs *fromUArgs, const UChar* codeUnits, int32_t length, UChar32 codePoint, UConverterCallbackReason reason, UErrorCode * err)
UCNV_FROM_U_CALLBACK_SKIP	unicode/ucnv_err.h	/^U_STABLE void U_EXPORT2 UCNV_FROM_U_CALLBACK_SKIP ($/;"	p	signature:( const void *context, UConverterFromUnicodeArgs *fromUArgs, const UChar* codeUnits, int32_t length, UChar32 codePoint, UConverterCallbackReason reason, UErrorCode * err)
UCNV_FROM_U_CALLBACK_SKIP	unicode/urename.h	62;"	d
UCNV_FROM_U_CALLBACK_STOP	ucnv_err.c	/^UCNV_FROM_U_CALLBACK_STOP ($/;"	f	signature:( const void *context, UConverterFromUnicodeArgs *fromUArgs, const UChar* codeUnits, int32_t length, UChar32 codePoint, UConverterCallbackReason reason, UErrorCode * err)
UCNV_FROM_U_CALLBACK_STOP	unicode/ucnv_err.h	/^U_STABLE void U_EXPORT2 UCNV_FROM_U_CALLBACK_STOP ($/;"	p	signature:( const void *context, UConverterFromUnicodeArgs *fromUArgs, const UChar* codeUnits, int32_t length, UChar32 codePoint, UConverterCallbackReason reason, UErrorCode * err)
UCNV_FROM_U_CALLBACK_STOP	unicode/urename.h	63;"	d
UCNV_FROM_U_CALLBACK_SUBSTITUTE	ucnv_err.c	/^UCNV_FROM_U_CALLBACK_SUBSTITUTE ($/;"	f	signature:( const void *context, UConverterFromUnicodeArgs *fromArgs, const UChar* codeUnits, int32_t length, UChar32 codePoint, UConverterCallbackReason reason, UErrorCode * err)
UCNV_FROM_U_CALLBACK_SUBSTITUTE	unicode/ucnv_err.h	/^U_STABLE void U_EXPORT2 UCNV_FROM_U_CALLBACK_SUBSTITUTE ($/;"	p	signature:( const void *context, UConverterFromUnicodeArgs *fromUArgs, const UChar* codeUnits, int32_t length, UChar32 codePoint, UConverterCallbackReason reason, UErrorCode * err)
UCNV_FROM_U_CALLBACK_SUBSTITUTE	unicode/urename.h	64;"	d
UCNV_FROM_U_DEFAULT_CALLBACK	ucnv_imp.h	132;"	d
UCNV_FROM_U_USE_FALLBACK	ucnv_cnv.h	271;"	d
UCNV_GET_MAX_BYTES_FOR_STRING	unicode/ucnv.h	767;"	d
UCNV_GET_MAX_BYTES_PER_UCHAR	ucnv_ext.h	341;"	d
UCNV_GET_NEXT_UCHAR_USE_TO_U	ucnv_cnv.h	279;"	d
UCNV_GET_VERSION	ucnv_bld.h	44;"	d
UCNV_H	unicode/ucnv.h	48;"	d
UCNV_HAS_SUPPLEMENTARY	ucnv_bld.h	61;"	d
UCNV_HAS_SURROGATES	ucnv_bld.h	62;"	d
UCNV_HZ	unicode/ucnv.h	/^    UCNV_HZ,$/;"	e	enum:__anon107
UCNV_IBM	unicode/ucnv.h	/^    UCNV_IBM = 0$/;"	e	enum:__anon108
UCNV_ILLEGAL	unicode/ucnv_err.h	/^    UCNV_ILLEGAL = 1,     \/**< The code point is illegal. For example, $/;"	e	enum:__anon104
UCNV_IMAP_MAILBOX	unicode/ucnv.h	/^    UCNV_IMAP_MAILBOX,$/;"	e	enum:__anon107
UCNV_IMP_H	ucnv_imp.h	21;"	d
UCNV_IO_H	ucnv_io.h	14;"	d
UCNV_IO_NORM_TYPE_COUNT	ucnv_io.h	/^    UCNV_IO_NORM_TYPE_COUNT$/;"	e	enum:__anon140
UCNV_IO_STD_NORMALIZED	ucnv_io.h	/^    UCNV_IO_STD_NORMALIZED,$/;"	e	enum:__anon140
UCNV_IO_UNNORMALIZED	ucnv_io.h	/^    UCNV_IO_UNNORMALIZED,$/;"	e	enum:__anon140
UCNV_IRREGULAR	unicode/ucnv_err.h	/^    UCNV_IRREGULAR = 2,   \/**< The codepoint is not a regular sequence in $/;"	e	enum:__anon104
UCNV_ISCII	unicode/ucnv.h	/^    UCNV_ISCII,$/;"	e	enum:__anon107
UCNV_ISO_2022	unicode/ucnv.h	/^    UCNV_ISO_2022 = 10,$/;"	e	enum:__anon107
UCNV_LATIN_1	unicode/ucnv.h	/^    UCNV_LATIN_1 = 3,$/;"	e	enum:__anon107
UCNV_LMBCS_1	unicode/ucnv.h	/^    UCNV_LMBCS_1 = 11,$/;"	e	enum:__anon107
UCNV_LMBCS_11	unicode/ucnv.h	/^    UCNV_LMBCS_11,$/;"	e	enum:__anon107
UCNV_LMBCS_16	unicode/ucnv.h	/^    UCNV_LMBCS_16,$/;"	e	enum:__anon107
UCNV_LMBCS_17	unicode/ucnv.h	/^    UCNV_LMBCS_17,$/;"	e	enum:__anon107
UCNV_LMBCS_18	unicode/ucnv.h	/^    UCNV_LMBCS_18,$/;"	e	enum:__anon107
UCNV_LMBCS_19	unicode/ucnv.h	/^    UCNV_LMBCS_19,$/;"	e	enum:__anon107
UCNV_LMBCS_2	unicode/ucnv.h	/^    UCNV_LMBCS_2, $/;"	e	enum:__anon107
UCNV_LMBCS_3	unicode/ucnv.h	/^    UCNV_LMBCS_3,$/;"	e	enum:__anon107
UCNV_LMBCS_4	unicode/ucnv.h	/^    UCNV_LMBCS_4,$/;"	e	enum:__anon107
UCNV_LMBCS_5	unicode/ucnv.h	/^    UCNV_LMBCS_5,$/;"	e	enum:__anon107
UCNV_LMBCS_6	unicode/ucnv.h	/^    UCNV_LMBCS_6,$/;"	e	enum:__anon107
UCNV_LMBCS_8	unicode/ucnv.h	/^    UCNV_LMBCS_8,$/;"	e	enum:__anon107
UCNV_LMBCS_LAST	unicode/ucnv.h	/^    UCNV_LMBCS_LAST = UCNV_LMBCS_19,$/;"	e	enum:__anon107
UCNV_LOCALE_OPTION_STRING	unicode/ucnv.h	232;"	d
UCNV_MAX_CHAR_LEN	ucnv_bld.h	38;"	d
UCNV_MAX_CONVERTER_NAME_LENGTH	unicode/ucnv.h	76;"	d
UCNV_MAX_FULL_FILE_NAME_LENGTH	unicode/ucnv.h	78;"	d
UCNV_MAX_SUBCHAR_LEN	ucnv_bld.h	35;"	d
UCNV_MBCS	unicode/ucnv.h	/^    UCNV_MBCS = 2,$/;"	e	enum:__anon107
UCNV_NEED_TO_WRITE_BOM	ucnv_u16.c	/^    UCNV_NEED_TO_WRITE_BOM=1$/;"	e	enum:__anon29	file:
UCNV_NEED_TO_WRITE_BOM	ucnv_u32.c	/^    UCNV_NEED_TO_WRITE_BOM=1$/;"	e	enum:__anon139	file:
UCNV_NUMBER_OF_SUPPORTED_CONVERTER_TYPES	unicode/ucnv.h	/^    UCNV_NUMBER_OF_SUPPORTED_CONVERTER_TYPES$/;"	e	enum:__anon107
UCNV_NUM_HIDDEN_TAGS	ucnv_io.h	26;"	d
UCNV_NUM_RESERVED_TAGS	ucnv_io.h	25;"	d
UCNV_OPEN_BRACE	ucnvhz.c	30;"	d	file:
UCNV_OPTIONS_VERSION_MASK	ucnv2022.c	192;"	d	file:
UCNV_OPTIONS_VERSION_MASK	ucnvisci.c	30;"	d	file:
UCNV_OPTION_SEP_CHAR	unicode/ucnv.h	201;"	d
UCNV_OPTION_SEP_STRING	unicode/ucnv.h	208;"	d
UCNV_OPTION_SWAP_LFNL	ucnv_bld.h	42;"	d
UCNV_OPTION_VERSION	ucnv_bld.h	41;"	d
UCNV_PRV_ESCAPE_C	ucnv_err.c	45;"	d	file:
UCNV_PRV_ESCAPE_CSS2	ucnv_err.c	50;"	d	file:
UCNV_PRV_ESCAPE_ICU	ucnv_err.c	44;"	d	file:
UCNV_PRV_ESCAPE_JAVA	ucnv_err.c	48;"	d	file:
UCNV_PRV_ESCAPE_UNICODE	ucnv_err.c	49;"	d	file:
UCNV_PRV_ESCAPE_XML_DEC	ucnv_err.c	46;"	d	file:
UCNV_PRV_ESCAPE_XML_HEX	ucnv_err.c	47;"	d	file:
UCNV_PRV_STOP_ON_ILLEGAL	ucnv_err.c	51;"	d	file:
UCNV_RESET	unicode/ucnv_err.h	/^    UCNV_RESET = 3,       \/**< The callback is called with this reason when a$/;"	e	enum:__anon104
UCNV_RESET_BOTH	ucnv_cnv.h	/^    UCNV_RESET_BOTH,$/;"	e	enum:UConverterResetChoice
UCNV_RESET_FROM_UNICODE	ucnv_cnv.h	/^    UCNV_RESET_FROM_UNICODE$/;"	e	enum:UConverterResetChoice
UCNV_RESET_TO_UNICODE	ucnv_cnv.h	/^    UCNV_RESET_TO_UNICODE,$/;"	e	enum:UConverterResetChoice
UCNV_ROUNDTRIP_AND_FALLBACK_SET	unicode/ucnv.h	/^    UCNV_ROUNDTRIP_AND_FALLBACK_SET,$/;"	e	enum:UConverterUnicodeSet
UCNV_ROUNDTRIP_SET	unicode/ucnv.h	/^    UCNV_ROUNDTRIP_SET,$/;"	e	enum:UConverterUnicodeSet
UCNV_SBCS	unicode/ucnv.h	/^    UCNV_SBCS = 0,$/;"	e	enum:__anon107
UCNV_SCSU	unicode/ucnv.h	/^    UCNV_SCSU,$/;"	e	enum:__anon107
UCNV_SET_COUNT	unicode/ucnv.h	/^    UCNV_SET_COUNT$/;"	e	enum:UConverterUnicodeSet
UCNV_SET_FILTER_2022_CN	ucnv_cnv.h	/^    UCNV_SET_FILTER_2022_CN,$/;"	e	enum:UConverterSetFilter
UCNV_SET_FILTER_COUNT	ucnv_cnv.h	/^    UCNV_SET_FILTER_COUNT$/;"	e	enum:UConverterSetFilter
UCNV_SET_FILTER_DBCS_ONLY	ucnv_cnv.h	/^    UCNV_SET_FILTER_DBCS_ONLY,$/;"	e	enum:UConverterSetFilter
UCNV_SET_FILTER_GR94DBCS	ucnv_cnv.h	/^    UCNV_SET_FILTER_GR94DBCS,$/;"	e	enum:UConverterSetFilter
UCNV_SET_FILTER_HZ	ucnv_cnv.h	/^    UCNV_SET_FILTER_HZ,$/;"	e	enum:UConverterSetFilter
UCNV_SET_FILTER_NONE	ucnv_cnv.h	/^    UCNV_SET_FILTER_NONE,$/;"	e	enum:UConverterSetFilter
UCNV_SET_FILTER_SJIS	ucnv_cnv.h	/^    UCNV_SET_FILTER_SJIS,$/;"	e	enum:UConverterSetFilter
UCNV_SI	unicode/ucnv.h	81;"	d
UCNV_SISO_STATE	ucnv_ext.c	267;"	d	file:
UCNV_SKIP_STOP_ON_ILLEGAL	unicode/ucnv_err.h	106;"	d
UCNV_SO	unicode/ucnv.h	83;"	d
UCNV_SUB_STOP_ON_ILLEGAL	unicode/ucnv_err.h	100;"	d
UCNV_SWAP_LFNL_OPTION_STRING	unicode/ucnv.h	257;"	d
UCNV_TILDE	ucnvhz.c	29;"	d	file:
UCNV_TO_U_CALLBACK_ESCAPE	ucnv_err.c	/^UCNV_TO_U_CALLBACK_ESCAPE ($/;"	f	signature:( const void *context, UConverterToUnicodeArgs *toArgs, const char* codeUnits, int32_t length, UConverterCallbackReason reason, UErrorCode * err)
UCNV_TO_U_CALLBACK_ESCAPE	unicode/ucnv_err.h	/^U_STABLE void U_EXPORT2 UCNV_TO_U_CALLBACK_ESCAPE ($/;"	p	signature:( const void *context, UConverterToUnicodeArgs *toUArgs, const char* codeUnits, int32_t length, UConverterCallbackReason reason, UErrorCode * err)
UCNV_TO_U_CALLBACK_ESCAPE	unicode/urename.h	65;"	d
UCNV_TO_U_CALLBACK_SKIP	ucnv_err.c	/^UCNV_TO_U_CALLBACK_SKIP ($/;"	f	signature:( const void *context, UConverterToUnicodeArgs *toArgs, const char* codeUnits, int32_t length, UConverterCallbackReason reason, UErrorCode * err)
UCNV_TO_U_CALLBACK_SKIP	unicode/ucnv_err.h	/^U_STABLE void U_EXPORT2 UCNV_TO_U_CALLBACK_SKIP ($/;"	p	signature:( const void *context, UConverterToUnicodeArgs *toUArgs, const char* codeUnits, int32_t length, UConverterCallbackReason reason, UErrorCode * err)
UCNV_TO_U_CALLBACK_SKIP	unicode/urename.h	66;"	d
UCNV_TO_U_CALLBACK_STOP	ucnv_err.c	/^UCNV_TO_U_CALLBACK_STOP ($/;"	f	signature:( const void *context, UConverterToUnicodeArgs *toUArgs, const char* codePoints, int32_t length, UConverterCallbackReason reason, UErrorCode * err)
UCNV_TO_U_CALLBACK_STOP	unicode/ucnv_err.h	/^U_STABLE void U_EXPORT2 UCNV_TO_U_CALLBACK_STOP ($/;"	p	signature:( const void *context, UConverterToUnicodeArgs *toUArgs, const char* codeUnits, int32_t length, UConverterCallbackReason reason, UErrorCode * err)
UCNV_TO_U_CALLBACK_STOP	unicode/urename.h	67;"	d
UCNV_TO_U_CALLBACK_SUBSTITUTE	ucnv_err.c	/^UCNV_TO_U_CALLBACK_SUBSTITUTE ($/;"	f	signature:( const void *context, UConverterToUnicodeArgs *toArgs, const char* codeUnits, int32_t length, UConverterCallbackReason reason, UErrorCode * err)
UCNV_TO_U_CALLBACK_SUBSTITUTE	unicode/ucnv_err.h	/^U_STABLE void U_EXPORT2 UCNV_TO_U_CALLBACK_SUBSTITUTE ($/;"	p	signature:( const void *context, UConverterToUnicodeArgs *toUArgs, const char* codeUnits, int32_t length, UConverterCallbackReason reason, UErrorCode * err)
UCNV_TO_U_CALLBACK_SUBSTITUTE	unicode/urename.h	68;"	d
UCNV_TO_U_DEFAULT_CALLBACK	ucnv_imp.h	131;"	d
UCNV_TO_U_USE_FALLBACK	ucnv_cnv.h	266;"	d
UCNV_TableStates_2022	ucnv2022.c	/^} UCNV_TableStates_2022;$/;"	t	typeref:enum:__anon69	file:
UCNV_UNASSIGNED	unicode/ucnv_err.h	/^    UCNV_UNASSIGNED = 0,  \/**< The code point is unassigned.$/;"	e	enum:__anon104
UCNV_UNKNOWN	unicode/ucnv.h	/^    UCNV_UNKNOWN = -1,$/;"	e	enum:__anon108
UCNV_UNSUPPORTED_CONVERTER	unicode/ucnv.h	/^    UCNV_UNSUPPORTED_CONVERTER = -1,$/;"	e	enum:__anon107
UCNV_US_ASCII	unicode/ucnv.h	/^    UCNV_US_ASCII,$/;"	e	enum:__anon107
UCNV_UTF16	unicode/ucnv.h	/^    UCNV_UTF16,$/;"	e	enum:__anon107
UCNV_UTF16_BigEndian	unicode/ucnv.h	/^    UCNV_UTF16_BigEndian = 5,$/;"	e	enum:__anon107
UCNV_UTF16_LittleEndian	unicode/ucnv.h	/^    UCNV_UTF16_LittleEndian = 6,$/;"	e	enum:__anon107
UCNV_UTF32	unicode/ucnv.h	/^    UCNV_UTF32,$/;"	e	enum:__anon107
UCNV_UTF32_BigEndian	unicode/ucnv.h	/^    UCNV_UTF32_BigEndian = 7,$/;"	e	enum:__anon107
UCNV_UTF32_LittleEndian	unicode/ucnv.h	/^    UCNV_UTF32_LittleEndian = 8,$/;"	e	enum:__anon107
UCNV_UTF7	unicode/ucnv.h	/^    UCNV_UTF7,$/;"	e	enum:__anon107
UCNV_UTF8	unicode/ucnv.h	/^    UCNV_UTF8 = 4,$/;"	e	enum:__anon107
UCNV_VALUE_SEP_CHAR	unicode/ucnv.h	215;"	d
UCNV_VALUE_SEP_STRING	unicode/ucnv.h	222;"	d
UCNV_VERSION_OPTION_STRING	unicode/ucnv.h	245;"	d
UCOL_BUILDER_VERSION	unicode/uvernum.h	142;"	d
UCOL_RUNTIME_VERSION	unicode/uvernum.h	125;"	d
UCOL_TAILORINGS_VERSION	unicode/uvernum.h	148;"	d
UCONFIG_NO_BREAK_ITERATION	unicode/uconfig.h	166;"	d
UCONFIG_NO_BREAK_ITERATION	unicode/uconfig.h	66;"	d
UCONFIG_NO_COLLATION	unicode/uconfig.h	155;"	d
UCONFIG_NO_COLLATION	unicode/uconfig.h	188;"	d
UCONFIG_NO_CONVERSION	unicode/uconfig.h	114;"	d
UCONFIG_NO_FILE_IO	unicode/uconfig.h	99;"	d
UCONFIG_NO_FORMATTING	unicode/uconfig.h	198;"	d
UCONFIG_NO_FORMATTING	unicode/uconfig.h	73;"	d
UCONFIG_NO_IDNA	unicode/uconfig.h	149;"	d
UCONFIG_NO_IDNA	unicode/uconfig.h	176;"	d
UCONFIG_NO_IDNA	unicode/uconfig.h	67;"	d
UCONFIG_NO_LEGACY_CONVERSION	unicode/uconfig.h	118;"	d
UCONFIG_NO_LEGACY_CONVERSION	unicode/uconfig.h	134;"	d
UCONFIG_NO_NORMALIZATION	unicode/uconfig.h	146;"	d
UCONFIG_NO_REGULAR_EXPRESSIONS	unicode/uconfig.h	218;"	d
UCONFIG_NO_REGULAR_EXPRESSIONS	unicode/uconfig.h	75;"	d
UCONFIG_NO_SERVICE	unicode/uconfig.h	228;"	d
UCONFIG_NO_TRANSLITERATION	unicode/uconfig.h	156;"	d
UCONFIG_NO_TRANSLITERATION	unicode/uconfig.h	208;"	d
UCONFIG_NO_TRANSLITERATION	unicode/uconfig.h	74;"	d
UCONFIG_ONLY_COLLATION	unicode/uconfig.h	61;"	d
UCURRENCY_DISPLAY_NAME_INDEX	locdispnames.cpp	736;"	d	file:
UCaseContext	ucase.h	/^struct UCaseContext {$/;"	s
UCaseContext	ucase.h	/^typedef struct UCaseContext UCaseContext;$/;"	t	typeref:struct:UCaseContext
UCaseContext::b1	ucase.h	/^    int8_t b1, b2, b3;$/;"	m	struct:UCaseContext	access:public
UCaseContext::b2	ucase.h	/^    int8_t b1, b2, b3;$/;"	m	struct:UCaseContext	access:public
UCaseContext::b3	ucase.h	/^    int8_t b1, b2, b3;$/;"	m	struct:UCaseContext	access:public
UCaseContext::cpLimit	ucase.h	/^    int32_t cpStart, cpLimit;$/;"	m	struct:UCaseContext	access:public
UCaseContext::cpStart	ucase.h	/^    int32_t cpStart, cpLimit;$/;"	m	struct:UCaseContext	access:public
UCaseContext::dir	ucase.h	/^    int8_t dir;$/;"	m	struct:UCaseContext	access:public
UCaseContext::index	ucase.h	/^    int32_t start, index, limit;$/;"	m	struct:UCaseContext	access:public
UCaseContext::limit	ucase.h	/^    int32_t start, index, limit;$/;"	m	struct:UCaseContext	access:public
UCaseContext::p	ucase.h	/^    void *p;$/;"	m	struct:UCaseContext	access:public
UCaseContext::start	ucase.h	/^    int32_t start, index, limit;$/;"	m	struct:UCaseContext	access:public
UCaseContextIterator	ucase.h	/^UCaseContextIterator(void *context, int8_t dir);$/;"	t
UCaseMap	unicode/ucasemap.h	/^struct UCaseMap;$/;"	x
UCaseMap	unicode/ucasemap.h	/^typedef struct UCaseMap UCaseMap; \/**< C typedef for struct UCaseMap. @stable ICU 3.4 *\/$/;"	t	typeref:struct:UCaseMap
UCaseMap	ustr_imp.h	/^struct UCaseMap {$/;"	s
UCaseMap	ustr_imp.h	/^typedef struct UCaseMap UCaseMap;$/;"	t	typeref:struct:UCaseMap
UCaseMap::csp	ustr_imp.h	/^    const UCaseProps *csp;$/;"	m	struct:UCaseMap	access:public
UCaseMap::iter	ustr_imp.h	/^    UBreakIterator *iter;  \/* We adopt the iterator, so we own it. *\/$/;"	m	struct:UCaseMap	access:public
UCaseMap::locCache	ustr_imp.h	/^    int32_t locCache;$/;"	m	struct:UCaseMap	access:public
UCaseMap::locale	ustr_imp.h	/^    char locale[32];$/;"	m	struct:UCaseMap	access:public
UCaseMap::options	ustr_imp.h	/^    uint32_t options;$/;"	m	struct:UCaseMap	access:public
UCaseMapFull	ucase.h	/^UCaseMapFull(const UCaseProps *csp, UChar32 c,$/;"	t
UCaseProps	ucase.c	/^struct UCaseProps {$/;"	s	file:
UCaseProps	ucase.h	/^struct UCaseProps;$/;"	x
UCaseProps	ucase.h	/^typedef struct UCaseProps UCaseProps;$/;"	t	typeref:struct:UCaseProps
UCaseProps::exceptions	ucase.c	/^    const uint16_t *exceptions;$/;"	m	struct:UCaseProps	file:	access:public
UCaseProps::formatVersion	ucase.c	/^    uint8_t formatVersion[4];$/;"	m	struct:UCaseProps	file:	access:public
UCaseProps::indexes	ucase.c	/^    const int32_t *indexes;$/;"	m	struct:UCaseProps	file:	access:public
UCaseProps::mem	ucase.c	/^    UDataMemory *mem;$/;"	m	struct:UCaseProps	file:	access:public
UCaseProps::trie	ucase.c	/^    UTrie2 trie;$/;"	m	struct:UCaseProps	file:	access:public
UCaseProps::unfold	ucase.c	/^    const UChar *unfold;$/;"	m	struct:UCaseProps	file:	access:public
UChar	unicode/umachine.h	/^    typedef char16_t UChar;$/;"	t
UChar	unicode/umachine.h	/^    typedef uint16_t UChar;$/;"	t
UChar	unicode/umachine.h	/^    typedef wchar_t UChar;$/;"	t
UChar32	unicode/umachine.h	/^typedef int32_t UChar32;$/;"	t
UCharCategory	unicode/uchar.h	/^typedef enum UCharCategory$/;"	g
UCharCategory	unicode/uchar.h	/^} UCharCategory;$/;"	t	typeref:enum:UCharCategory
UCharCharacterIterator	uchriter.cpp	/^UCharCharacterIterator::UCharCharacterIterator()$/;"	f	class:UCharCharacterIterator	signature:()
UCharCharacterIterator	uchriter.cpp	/^UCharCharacterIterator::UCharCharacterIterator(const UChar* textPtr,$/;"	f	class:UCharCharacterIterator	signature:(const UChar* textPtr, int32_t length)
UCharCharacterIterator	uchriter.cpp	/^UCharCharacterIterator::UCharCharacterIterator(const UChar* textPtr,$/;"	f	class:UCharCharacterIterator	signature:(const UChar* textPtr, int32_t length, int32_t position)
UCharCharacterIterator	uchriter.cpp	/^UCharCharacterIterator::UCharCharacterIterator(const UChar* textPtr,$/;"	f	class:UCharCharacterIterator	signature:(const UChar* textPtr, int32_t length, int32_t textBegin, int32_t textEnd, int32_t position)
UCharCharacterIterator	uchriter.cpp	/^UCharCharacterIterator::UCharCharacterIterator(const UCharCharacterIterator& that)$/;"	f	class:UCharCharacterIterator	signature:(const UCharCharacterIterator& that)
UCharCharacterIterator	unicode/uchriter.h	/^  UCharCharacterIterator();$/;"	p	class:UCharCharacterIterator	access:protected	signature:()
UCharCharacterIterator	unicode/uchriter.h	/^  UCharCharacterIterator(const UChar* textPtr, int32_t length);$/;"	p	class:UCharCharacterIterator	access:public	signature:(const UChar* textPtr, int32_t length)
UCharCharacterIterator	unicode/uchriter.h	/^  UCharCharacterIterator(const UChar* textPtr, int32_t length,$/;"	p	class:UCharCharacterIterator	access:public	signature:(const UChar* textPtr, int32_t length, int32_t position)
UCharCharacterIterator	unicode/uchriter.h	/^  UCharCharacterIterator(const UChar* textPtr, int32_t length,$/;"	p	class:UCharCharacterIterator	access:public	signature:(const UChar* textPtr, int32_t length, int32_t textBegin, int32_t textEnd, int32_t position)
UCharCharacterIterator	unicode/uchriter.h	/^  UCharCharacterIterator(const UCharCharacterIterator&  that);$/;"	p	class:UCharCharacterIterator	access:public	signature:(const UCharCharacterIterator& that)
UCharCharacterIterator	unicode/uchriter.h	/^class U_COMMON_API UCharCharacterIterator : public CharacterIterator {$/;"	c	inherits:CharacterIterator
UCharCharacterIterator	unicode/urename.h	2190;"	d
UCharCharacterIterator::UCharCharacterIterator	uchriter.cpp	/^UCharCharacterIterator::UCharCharacterIterator()$/;"	f	class:UCharCharacterIterator	signature:()
UCharCharacterIterator::UCharCharacterIterator	uchriter.cpp	/^UCharCharacterIterator::UCharCharacterIterator(const UChar* textPtr,$/;"	f	class:UCharCharacterIterator	signature:(const UChar* textPtr, int32_t length)
UCharCharacterIterator::UCharCharacterIterator	uchriter.cpp	/^UCharCharacterIterator::UCharCharacterIterator(const UChar* textPtr,$/;"	f	class:UCharCharacterIterator	signature:(const UChar* textPtr, int32_t length, int32_t position)
UCharCharacterIterator::UCharCharacterIterator	uchriter.cpp	/^UCharCharacterIterator::UCharCharacterIterator(const UChar* textPtr,$/;"	f	class:UCharCharacterIterator	signature:(const UChar* textPtr, int32_t length, int32_t textBegin, int32_t textEnd, int32_t position)
UCharCharacterIterator::UCharCharacterIterator	uchriter.cpp	/^UCharCharacterIterator::UCharCharacterIterator(const UCharCharacterIterator& that)$/;"	f	class:UCharCharacterIterator	signature:(const UCharCharacterIterator& that)
UCharCharacterIterator::UCharCharacterIterator	unicode/uchriter.h	/^  UCharCharacterIterator();$/;"	p	class:UCharCharacterIterator	access:protected	signature:()
UCharCharacterIterator::UCharCharacterIterator	unicode/uchriter.h	/^  UCharCharacterIterator(const UChar* textPtr, int32_t length);$/;"	p	class:UCharCharacterIterator	access:public	signature:(const UChar* textPtr, int32_t length)
UCharCharacterIterator::UCharCharacterIterator	unicode/uchriter.h	/^  UCharCharacterIterator(const UChar* textPtr, int32_t length,$/;"	p	class:UCharCharacterIterator	access:public	signature:(const UChar* textPtr, int32_t length, int32_t position)
UCharCharacterIterator::UCharCharacterIterator	unicode/uchriter.h	/^  UCharCharacterIterator(const UChar* textPtr, int32_t length,$/;"	p	class:UCharCharacterIterator	access:public	signature:(const UChar* textPtr, int32_t length, int32_t textBegin, int32_t textEnd, int32_t position)
UCharCharacterIterator::UCharCharacterIterator	unicode/uchriter.h	/^  UCharCharacterIterator(const UCharCharacterIterator&  that);$/;"	p	class:UCharCharacterIterator	access:public	signature:(const UCharCharacterIterator& that)
UCharCharacterIterator::clone	uchriter.cpp	/^UCharCharacterIterator::clone() const {$/;"	f	class:UCharCharacterIterator	signature:() const
UCharCharacterIterator::clone	unicode/uchriter.h	/^  virtual CharacterIterator* clone(void) const;$/;"	p	class:UCharCharacterIterator	access:public	signature:(void) const
UCharCharacterIterator::current	uchriter.cpp	/^UCharCharacterIterator::current() const {$/;"	f	class:UCharCharacterIterator	signature:() const
UCharCharacterIterator::current	unicode/uchriter.h	/^  virtual UChar         current(void) const;$/;"	p	class:UCharCharacterIterator	access:public	signature:(void) const
UCharCharacterIterator::current32	uchriter.cpp	/^UCharCharacterIterator::current32() const {$/;"	f	class:UCharCharacterIterator	signature:() const
UCharCharacterIterator::current32	unicode/uchriter.h	/^  virtual UChar32       current32(void) const;$/;"	p	class:UCharCharacterIterator	access:public	signature:(void) const
UCharCharacterIterator::first	uchriter.cpp	/^UCharCharacterIterator::first() {$/;"	f	class:UCharCharacterIterator	signature:()
UCharCharacterIterator::first	unicode/uchriter.h	/^  virtual UChar         first(void);$/;"	p	class:UCharCharacterIterator	access:public	signature:(void)
UCharCharacterIterator::first32	uchriter.cpp	/^UCharCharacterIterator::first32() {$/;"	f	class:UCharCharacterIterator	signature:()
UCharCharacterIterator::first32	unicode/uchriter.h	/^  virtual UChar32       first32(void);$/;"	p	class:UCharCharacterIterator	access:public	signature:(void)
UCharCharacterIterator::first32PostInc	uchriter.cpp	/^UCharCharacterIterator::first32PostInc() {$/;"	f	class:UCharCharacterIterator	signature:()
UCharCharacterIterator::first32PostInc	unicode/uchriter.h	/^  virtual UChar32       first32PostInc(void);$/;"	p	class:UCharCharacterIterator	access:public	signature:(void)
UCharCharacterIterator::firstPostInc	uchriter.cpp	/^UCharCharacterIterator::firstPostInc() {$/;"	f	class:UCharCharacterIterator	signature:()
UCharCharacterIterator::firstPostInc	unicode/uchriter.h	/^  virtual UChar         firstPostInc(void);$/;"	p	class:UCharCharacterIterator	access:public	signature:(void)
UCharCharacterIterator::getDynamicClassID	unicode/uchriter.h	/^  virtual UClassID        getDynamicClassID(void) const;$/;"	p	class:UCharCharacterIterator	access:public	signature:(void) const
UCharCharacterIterator::getStaticClassID	unicode/uchriter.h	/^  static UClassID         U_EXPORT2 getStaticClassID(void);$/;"	p	class:UCharCharacterIterator	access:public	signature:(void)
UCharCharacterIterator::getText	uchriter.cpp	/^UCharCharacterIterator::getText(UnicodeString& result) {$/;"	f	class:UCharCharacterIterator	signature:(UnicodeString& result)
UCharCharacterIterator::getText	unicode/uchriter.h	/^  virtual void            getText(UnicodeString& result);$/;"	p	class:UCharCharacterIterator	access:public	signature:(UnicodeString& result)
UCharCharacterIterator::hasNext	uchriter.cpp	/^UCharCharacterIterator::hasNext() {$/;"	f	class:UCharCharacterIterator	signature:()
UCharCharacterIterator::hasNext	unicode/uchriter.h	/^  virtual UBool        hasNext();$/;"	p	class:UCharCharacterIterator	access:public	signature:()
UCharCharacterIterator::hasPrevious	uchriter.cpp	/^UCharCharacterIterator::hasPrevious() {$/;"	f	class:UCharCharacterIterator	signature:()
UCharCharacterIterator::hasPrevious	unicode/uchriter.h	/^  virtual UBool        hasPrevious();$/;"	p	class:UCharCharacterIterator	access:public	signature:()
UCharCharacterIterator::hashCode	uchriter.cpp	/^UCharCharacterIterator::hashCode() const {$/;"	f	class:UCharCharacterIterator	signature:() const
UCharCharacterIterator::hashCode	unicode/uchriter.h	/^  virtual int32_t         hashCode(void) const;$/;"	p	class:UCharCharacterIterator	access:public	signature:(void) const
UCharCharacterIterator::last	uchriter.cpp	/^UCharCharacterIterator::last() {$/;"	f	class:UCharCharacterIterator	signature:()
UCharCharacterIterator::last	unicode/uchriter.h	/^  virtual UChar         last(void);$/;"	p	class:UCharCharacterIterator	access:public	signature:(void)
UCharCharacterIterator::last32	uchriter.cpp	/^UCharCharacterIterator::last32() {$/;"	f	class:UCharCharacterIterator	signature:()
UCharCharacterIterator::last32	unicode/uchriter.h	/^  virtual UChar32       last32(void);$/;"	p	class:UCharCharacterIterator	access:public	signature:(void)
UCharCharacterIterator::move	uchriter.cpp	/^UCharCharacterIterator::move(int32_t delta, CharacterIterator::EOrigin origin) {$/;"	f	class:UCharCharacterIterator	signature:(int32_t delta, CharacterIterator::EOrigin origin)
UCharCharacterIterator::move	unicode/uchriter.h	/^  virtual int32_t      move(int32_t delta, EOrigin origin);$/;"	p	class:UCharCharacterIterator	access:public	signature:(int32_t delta, EOrigin origin)
UCharCharacterIterator::move32	uchriter.cpp	/^UCharCharacterIterator::move32(int32_t delta, CharacterIterator::EOrigin origin) {$/;"	f	class:UCharCharacterIterator	signature:(int32_t delta, CharacterIterator::EOrigin origin)
UCharCharacterIterator::move32	unicode/uchriter.h	/^  virtual int32_t      move32(int32_t delta, EOrigin origin);$/;"	p	class:UCharCharacterIterator	access:public	signature:(int32_t delta, EOrigin origin)
UCharCharacterIterator::next	uchriter.cpp	/^UCharCharacterIterator::next() {$/;"	f	class:UCharCharacterIterator	signature:()
UCharCharacterIterator::next	unicode/uchriter.h	/^  virtual UChar         next(void);$/;"	p	class:UCharCharacterIterator	access:public	signature:(void)
UCharCharacterIterator::next32	uchriter.cpp	/^UCharCharacterIterator::next32() {$/;"	f	class:UCharCharacterIterator	signature:()
UCharCharacterIterator::next32	unicode/uchriter.h	/^  virtual UChar32       next32(void);$/;"	p	class:UCharCharacterIterator	access:public	signature:(void)
UCharCharacterIterator::next32PostInc	uchriter.cpp	/^UCharCharacterIterator::next32PostInc() {$/;"	f	class:UCharCharacterIterator	signature:()
UCharCharacterIterator::next32PostInc	unicode/uchriter.h	/^  virtual UChar32       next32PostInc(void);$/;"	p	class:UCharCharacterIterator	access:public	signature:(void)
UCharCharacterIterator::nextPostInc	uchriter.cpp	/^UCharCharacterIterator::nextPostInc() {$/;"	f	class:UCharCharacterIterator	signature:()
UCharCharacterIterator::nextPostInc	unicode/uchriter.h	/^  virtual UChar         nextPostInc(void);$/;"	p	class:UCharCharacterIterator	access:public	signature:(void)
UCharCharacterIterator::operator =	uchriter.cpp	/^UCharCharacterIterator::operator=(const UCharCharacterIterator& that) {$/;"	f	class:UCharCharacterIterator	signature:(const UCharCharacterIterator& that)
UCharCharacterIterator::operator =	unicode/uchriter.h	/^  operator=(const UCharCharacterIterator&    that);$/;"	p	class:UCharCharacterIterator	access:public	signature:(const UCharCharacterIterator& that)
UCharCharacterIterator::operator ==	uchriter.cpp	/^UCharCharacterIterator::operator==(const ForwardCharacterIterator& that) const {$/;"	f	class:UCharCharacterIterator	signature:(const ForwardCharacterIterator& that) const
UCharCharacterIterator::operator ==	unicode/uchriter.h	/^  virtual UBool          operator==(const ForwardCharacterIterator& that) const;$/;"	p	class:UCharCharacterIterator	access:public	signature:(const ForwardCharacterIterator& that) const
UCharCharacterIterator::previous	uchriter.cpp	/^UCharCharacterIterator::previous() {$/;"	f	class:UCharCharacterIterator	signature:()
UCharCharacterIterator::previous	unicode/uchriter.h	/^  virtual UChar         previous(void);$/;"	p	class:UCharCharacterIterator	access:public	signature:(void)
UCharCharacterIterator::previous32	uchriter.cpp	/^UCharCharacterIterator::previous32() {$/;"	f	class:UCharCharacterIterator	signature:()
UCharCharacterIterator::previous32	unicode/uchriter.h	/^  virtual UChar32       previous32(void);$/;"	p	class:UCharCharacterIterator	access:public	signature:(void)
UCharCharacterIterator::setIndex	uchriter.cpp	/^UCharCharacterIterator::setIndex(int32_t position) {$/;"	f	class:UCharCharacterIterator	signature:(int32_t position)
UCharCharacterIterator::setIndex	unicode/uchriter.h	/^  virtual UChar         setIndex(int32_t position);$/;"	p	class:UCharCharacterIterator	access:public	signature:(int32_t position)
UCharCharacterIterator::setIndex32	uchriter.cpp	/^UCharCharacterIterator::setIndex32(int32_t position) {$/;"	f	class:UCharCharacterIterator	signature:(int32_t position)
UCharCharacterIterator::setIndex32	unicode/uchriter.h	/^  virtual UChar32       setIndex32(int32_t position);$/;"	p	class:UCharCharacterIterator	access:public	signature:(int32_t position)
UCharCharacterIterator::setText	uchriter.cpp	/^void UCharCharacterIterator::setText(const UChar* newText,$/;"	f	class:UCharCharacterIterator	signature:(const UChar* newText, int32_t newTextLength)
UCharCharacterIterator::setText	unicode/uchriter.h	/^  void setText(const UChar* newText, int32_t newTextLength);$/;"	p	class:UCharCharacterIterator	access:public	signature:(const UChar* newText, int32_t newTextLength)
UCharCharacterIterator::text	unicode/uchriter.h	/^  const UChar*            text;$/;"	m	class:UCharCharacterIterator	access:protected
UCharCharacterIterator::~UCharCharacterIterator	uchriter.cpp	/^UCharCharacterIterator::~UCharCharacterIterator() {$/;"	f	class:UCharCharacterIterator	signature:()
UCharCharacterIterator::~UCharCharacterIterator	unicode/uchriter.h	/^  virtual ~UCharCharacterIterator();$/;"	p	class:UCharCharacterIterator	access:public	signature:()
UCharDirection	unicode/uchar.h	/^typedef enum UCharDirection {$/;"	g
UCharDirection	unicode/uchar.h	/^} UCharDirection;$/;"	t	typeref:enum:UCharDirection
UCharEnumTypeRange	unicode/uchar.h	/^UCharEnumTypeRange(const void *context, UChar32 start, UChar32 limit, UCharCategory type);$/;"	t
UCharErrorBuffer	ucnv_bld.h	/^    UChar UCharErrorBuffer[UCNV_ERROR_BUFFER_LENGTH];   \/* unicode output from Error functions *\/$/;"	m	struct:UConverter	access:public
UCharErrorBufferLength	ucnv_bld.h	/^    int8_t UCharErrorBufferLength;      \/* number of valid UChars in charErrorBuffer *\/$/;"	m	struct:UConverter	access:public
UCharIterator	unicode/uiter.h	/^struct UCharIterator {$/;"	s
UCharIterator	unicode/uiter.h	/^struct UCharIterator;$/;"	x
UCharIterator	unicode/uiter.h	/^typedef struct UCharIterator UCharIterator; \/**< C typedef for struct UCharIterator. @stable ICU 2.1 *\/$/;"	t	typeref:struct:UCharIterator
UCharIterator::context	unicode/uiter.h	/^    const void *context;$/;"	m	struct:UCharIterator	access:public
UCharIterator::current	unicode/uiter.h	/^    UCharIteratorCurrent *current;$/;"	m	struct:UCharIterator	access:public
UCharIterator::getIndex	unicode/uiter.h	/^    UCharIteratorGetIndex *getIndex;$/;"	m	struct:UCharIterator	access:public
UCharIterator::getState	unicode/uiter.h	/^    UCharIteratorGetState *getState;$/;"	m	struct:UCharIterator	access:public
UCharIterator::hasNext	unicode/uiter.h	/^    UCharIteratorHasNext *hasNext;$/;"	m	struct:UCharIterator	access:public
UCharIterator::hasPrevious	unicode/uiter.h	/^    UCharIteratorHasPrevious *hasPrevious;$/;"	m	struct:UCharIterator	access:public
UCharIterator::index	unicode/uiter.h	/^    int32_t index;$/;"	m	struct:UCharIterator	access:public
UCharIterator::length	unicode/uiter.h	/^    int32_t length;$/;"	m	struct:UCharIterator	access:public
UCharIterator::limit	unicode/uiter.h	/^    int32_t limit;$/;"	m	struct:UCharIterator	access:public
UCharIterator::move	unicode/uiter.h	/^    UCharIteratorMove *move;$/;"	m	struct:UCharIterator	access:public
UCharIterator::next	unicode/uiter.h	/^    UCharIteratorNext *next;$/;"	m	struct:UCharIterator	access:public
UCharIterator::previous	unicode/uiter.h	/^    UCharIteratorPrevious *previous;$/;"	m	struct:UCharIterator	access:public
UCharIterator::reservedField	unicode/uiter.h	/^    int32_t reservedField;$/;"	m	struct:UCharIterator	access:public
UCharIterator::reservedFn	unicode/uiter.h	/^    UCharIteratorReserved *reservedFn;$/;"	m	struct:UCharIterator	access:public
UCharIterator::setState	unicode/uiter.h	/^    UCharIteratorSetState *setState;$/;"	m	struct:UCharIterator	access:public
UCharIterator::start	unicode/uiter.h	/^    int32_t start;$/;"	m	struct:UCharIterator	access:public
UCharIteratorCurrent	unicode/uiter.h	/^UCharIteratorCurrent(UCharIterator *iter);$/;"	t
UCharIteratorGetIndex	unicode/uiter.h	/^UCharIteratorGetIndex(UCharIterator *iter, UCharIteratorOrigin origin);$/;"	t
UCharIteratorGetState	unicode/uiter.h	/^UCharIteratorGetState(const UCharIterator *iter);$/;"	t
UCharIteratorHasNext	unicode/uiter.h	/^UCharIteratorHasNext(UCharIterator *iter);$/;"	t
UCharIteratorHasPrevious	unicode/uiter.h	/^UCharIteratorHasPrevious(UCharIterator *iter);$/;"	t
UCharIteratorMove	unicode/uiter.h	/^UCharIteratorMove(UCharIterator *iter, int32_t delta, UCharIteratorOrigin origin);$/;"	t
UCharIteratorNext	unicode/uiter.h	/^UCharIteratorNext(UCharIterator *iter);$/;"	t
UCharIteratorOrigin	unicode/uiter.h	/^typedef enum UCharIteratorOrigin {$/;"	g
UCharIteratorOrigin	unicode/uiter.h	/^} UCharIteratorOrigin;$/;"	t	typeref:enum:UCharIteratorOrigin
UCharIteratorPrevious	unicode/uiter.h	/^UCharIteratorPrevious(UCharIterator *iter);$/;"	t
UCharIteratorReserved	unicode/uiter.h	/^UCharIteratorReserved(UCharIterator *iter, int32_t something);$/;"	t
UCharIteratorSetState	unicode/uiter.h	/^UCharIteratorSetState(UCharIterator *iter, uint32_t state, UErrorCode *pErrorCode);$/;"	t
UCharNameChoice	unicode/uchar.h	/^typedef enum UCharNameChoice {$/;"	g
UCharNameChoice	unicode/uchar.h	/^} UCharNameChoice;$/;"	t	typeref:enum:UCharNameChoice
UCharNames	unames.c	/^} UCharNames;$/;"	t	typeref:struct:__anon94	file:
UCharStringEnumeration	ustrenum.cpp	/^typedef struct UCharStringEnumeration {$/;"	s	file:
UCharStringEnumeration	ustrenum.cpp	/^} UCharStringEnumeration;$/;"	t	typeref:struct:UCharStringEnumeration	file:
UCharStringEnumeration::count	ustrenum.cpp	/^    int32_t index, count;$/;"	m	struct:UCharStringEnumeration	file:	access:public
UCharStringEnumeration::index	ustrenum.cpp	/^    int32_t index, count;$/;"	m	struct:UCharStringEnumeration	file:	access:public
UCharStringEnumeration::uenum	ustrenum.cpp	/^    UEnumeration uenum;$/;"	m	struct:UCharStringEnumeration	file:	access:public
UClassID	unicode/utypes.h	/^typedef void* UClassID;$/;"	t
UCollationPCE	unicode/urename.h	2191;"	d
UComparator	uarrsort.h	/^UComparator(const void *context, const void *left, const void *right);$/;"	t
UConverter	ucnv_bld.h	/^struct UConverter {$/;"	s
UConverter	unicode/ucnv_err.h	/^struct UConverter;$/;"	x
UConverter	unicode/ucnv_err.h	/^typedef struct UConverter UConverter;$/;"	t	typeref:struct:UConverter
UConverter	unicode/unistr.h	/^struct UConverter;          \/\/ unicode\/ucnv.h$/;"	x
UConverter::UCharErrorBuffer	ucnv_bld.h	/^    UChar UCharErrorBuffer[UCNV_ERROR_BUFFER_LENGTH];   \/* unicode output from Error functions *\/$/;"	m	struct:UConverter	access:public
UConverter::UCharErrorBufferLength	ucnv_bld.h	/^    int8_t UCharErrorBufferLength;      \/* number of valid UChars in charErrorBuffer *\/$/;"	m	struct:UConverter	access:public
UConverter::charErrorBuffer	ucnv_bld.h	/^    uint8_t charErrorBuffer[UCNV_ERROR_BUFFER_LENGTH];  \/* codepage output from Error functions *\/$/;"	m	struct:UConverter	access:public
UConverter::charErrorBufferLength	ucnv_bld.h	/^    int8_t charErrorBufferLength;       \/* number of valid bytes in charErrorBuffer *\/$/;"	m	struct:UConverter	access:public
UConverter::extraInfo	ucnv_bld.h	/^    void *extraInfo;$/;"	m	struct:UConverter	access:public
UConverter::fromCharErrorBehaviour	ucnv_bld.h	/^    void (U_EXPORT2 *fromCharErrorBehaviour) (const void *context,$/;"	m	struct:UConverter	access:public
UConverter::fromUChar32	ucnv_bld.h	/^    UChar32 fromUChar32;$/;"	m	struct:UConverter	access:public
UConverter::fromUCharErrorBehaviour	ucnv_bld.h	/^    void (U_EXPORT2 *fromUCharErrorBehaviour) (const void *context,$/;"	m	struct:UConverter	access:public
UConverter::fromUContext	ucnv_bld.h	/^    const void *fromUContext;$/;"	m	struct:UConverter	access:public
UConverter::fromUnicodeStatus	ucnv_bld.h	/^    uint32_t fromUnicodeStatus;$/;"	m	struct:UConverter	access:public
UConverter::invalidCharBuffer	ucnv_bld.h	/^    char invalidCharBuffer[UCNV_MAX_CHAR_LEN];          \/* bytes from last error\/callback situation *\/$/;"	m	struct:UConverter	access:public
UConverter::invalidCharLength	ucnv_bld.h	/^    int8_t invalidCharLength;$/;"	m	struct:UConverter	access:public
UConverter::invalidUCharBuffer	ucnv_bld.h	/^    UChar invalidUCharBuffer[U16_MAX_LENGTH];           \/* UChars from last error\/callback situation *\/$/;"	m	struct:UConverter	access:public
UConverter::invalidUCharLength	ucnv_bld.h	/^    int8_t invalidUCharLength;$/;"	m	struct:UConverter	access:public
UConverter::isCopyLocal	ucnv_bld.h	/^    UBool isCopyLocal;  \/* TRUE if UConverter is not owned and not released in ucnv_close() (stack-allocated, safeClone(), etc.) *\/$/;"	m	struct:UConverter	access:public
UConverter::isExtraLocal	ucnv_bld.h	/^    UBool isExtraLocal; \/* TRUE if extraInfo is not owned and not released in ucnv_close() (stack-allocated, safeClone(), etc.) *\/$/;"	m	struct:UConverter	access:public
UConverter::maxBytesPerUChar	ucnv_bld.h	/^    int8_t maxBytesPerUChar;$/;"	m	struct:UConverter	access:public
UConverter::mode	ucnv_bld.h	/^    int32_t mode;$/;"	m	struct:UConverter	access:public
UConverter::options	ucnv_bld.h	/^    uint32_t options; \/* options flags from UConverterOpen, may contain additional bits *\/$/;"	m	struct:UConverter	access:public
UConverter::preFromU	ucnv_bld.h	/^    UChar preFromU[UCNV_EXT_MAX_UCHARS];$/;"	m	struct:UConverter	access:public
UConverter::preFromUFirstCP	ucnv_bld.h	/^    UChar32 preFromUFirstCP;                \/* >=0: partial match *\/$/;"	m	struct:UConverter	access:public
UConverter::preFromULength	ucnv_bld.h	/^    int8_t preFromULength, preToULength;    \/* negative: replay *\/$/;"	m	struct:UConverter	access:public
UConverter::preToU	ucnv_bld.h	/^    char preToU[UCNV_EXT_MAX_BYTES];$/;"	m	struct:UConverter	access:public
UConverter::preToUFirstLength	ucnv_bld.h	/^    int8_t preToUFirstLength;               \/* length of first character *\/$/;"	m	struct:UConverter	access:public
UConverter::preToULength	ucnv_bld.h	/^    int8_t preFromULength, preToULength;    \/* negative: replay *\/$/;"	m	struct:UConverter	access:public
UConverter::sharedData	ucnv_bld.h	/^    UConverterSharedData *sharedData;   \/* Pointer to the shared immutable part of the converter object *\/$/;"	m	struct:UConverter	access:public
UConverter::sharedDataIsCached	ucnv_bld.h	/^    UBool sharedDataIsCached;  \/* TRUE:  shared data is in cache, don't destroy on ucnv_close() if 0 ref.  FALSE: shared data isn't in the cache, do attempt to clean it up if the ref is 0 *\/$/;"	m	struct:UConverter	access:public
UConverter::subChar1	ucnv_bld.h	/^    uint8_t subChar1;                                   \/* single-byte substitution character if different from subChar *\/$/;"	m	struct:UConverter	access:public
UConverter::subCharLen	ucnv_bld.h	/^    int8_t subCharLen;                  \/* length of the codepage specific character sequence *\/$/;"	m	struct:UConverter	access:public
UConverter::subChars	ucnv_bld.h	/^    uint8_t *subChars;$/;"	m	struct:UConverter	access:public
UConverter::subUChars	ucnv_bld.h	/^    UChar subUChars[UCNV_MAX_SUBCHAR_LEN\/U_SIZEOF_UCHAR]; \/* see subChars documentation *\/$/;"	m	struct:UConverter	access:public
UConverter::toUBytes	ucnv_bld.h	/^    uint8_t toUBytes[UCNV_MAX_CHAR_LEN-1];\/* more "toU status"; keeps the bytes of the current character *\/$/;"	m	struct:UConverter	access:public
UConverter::toUCallbackReason	ucnv_bld.h	/^    UConverterCallbackReason toUCallbackReason; \/* (*fromCharErrorBehaviour) reason, set when error is detected *\/$/;"	m	struct:UConverter	access:public
UConverter::toUContext	ucnv_bld.h	/^    const void *toUContext;$/;"	m	struct:UConverter	access:public
UConverter::toULength	ucnv_bld.h	/^    int8_t toULength;                   \/* number of bytes in toUBytes *\/$/;"	m	struct:UConverter	access:public
UConverter::toUnicodeStatus	ucnv_bld.h	/^    uint32_t toUnicodeStatus;           \/* Used to internalize stream status information *\/$/;"	m	struct:UConverter	access:public
UConverter::useFallback	ucnv_bld.h	/^    UBool  useFallback;$/;"	m	struct:UConverter	access:public
UConverter::useSubChar1	ucnv_bld.h	/^    UBool useSubChar1;$/;"	m	struct:UConverter	access:public
UConverterAlias	ucnv_io.h	/^typedef struct UConverterAlias {$/;"	s
UConverterAlias	ucnv_io.h	/^} UConverterAlias;$/;"	t	typeref:struct:UConverterAlias
UConverterAlias::aliasList	ucnv_io.h	/^    const uint16_t *aliasList;$/;"	m	struct:UConverterAlias	access:public
UConverterAlias::aliasListSize	ucnv_io.h	/^    uint32_t aliasListSize;$/;"	m	struct:UConverterAlias	access:public
UConverterAlias::converterList	ucnv_io.h	/^    const uint16_t *converterList;$/;"	m	struct:UConverterAlias	access:public
UConverterAlias::converterListSize	ucnv_io.h	/^    uint32_t converterListSize;$/;"	m	struct:UConverterAlias	access:public
UConverterAlias::normalizedStringTable	ucnv_io.h	/^    const uint16_t *normalizedStringTable;$/;"	m	struct:UConverterAlias	access:public
UConverterAlias::normalizedStringTableSize	ucnv_io.h	/^    uint32_t normalizedStringTableSize;$/;"	m	struct:UConverterAlias	access:public
UConverterAlias::optionTable	ucnv_io.h	/^    const UConverterAliasOptions *optionTable;$/;"	m	struct:UConverterAlias	access:public
UConverterAlias::optionTableSize	ucnv_io.h	/^    uint32_t optionTableSize;$/;"	m	struct:UConverterAlias	access:public
UConverterAlias::stringTable	ucnv_io.h	/^    const uint16_t *stringTable;$/;"	m	struct:UConverterAlias	access:public
UConverterAlias::stringTableSize	ucnv_io.h	/^    uint32_t stringTableSize;$/;"	m	struct:UConverterAlias	access:public
UConverterAlias::tagList	ucnv_io.h	/^    const uint16_t *tagList;$/;"	m	struct:UConverterAlias	access:public
UConverterAlias::tagListSize	ucnv_io.h	/^    uint32_t tagListSize;$/;"	m	struct:UConverterAlias	access:public
UConverterAlias::taggedAliasArray	ucnv_io.h	/^    const uint16_t *taggedAliasArray;$/;"	m	struct:UConverterAlias	access:public
UConverterAlias::taggedAliasArraySize	ucnv_io.h	/^    uint32_t taggedAliasArraySize;$/;"	m	struct:UConverterAlias	access:public
UConverterAlias::taggedAliasLists	ucnv_io.h	/^    const uint16_t *taggedAliasLists;$/;"	m	struct:UConverterAlias	access:public
UConverterAlias::taggedAliasListsSize	ucnv_io.h	/^    uint32_t taggedAliasListsSize;$/;"	m	struct:UConverterAlias	access:public
UConverterAlias::untaggedConvArray	ucnv_io.h	/^    const uint16_t *untaggedConvArray;$/;"	m	struct:UConverterAlias	access:public
UConverterAlias::untaggedConvArraySize	ucnv_io.h	/^    uint32_t untaggedConvArraySize;$/;"	m	struct:UConverterAlias	access:public
UConverterAliasOptions	ucnv_io.h	/^} UConverterAliasOptions;$/;"	t	typeref:struct:__anon141
UConverterCallbackReason	unicode/ucnv_err.h	/^} UConverterCallbackReason;$/;"	t	typeref:enum:__anon104
UConverterClose	ucnv_cnv.h	/^typedef void (*UConverterClose) (UConverter *cnv);$/;"	t
UConverterConvert	ucnv_cnv.h	/^typedef void (*UConverterConvert) (UConverterFromUnicodeArgs *pFromUArgs,$/;"	t
UConverterDataHZ	ucnvhz.c	/^}UConverterDataHZ;$/;"	t	typeref:struct:__anon61	file:
UConverterDataISCII	ucnvisci.c	/^} UConverterDataISCII;$/;"	t	typeref:struct:__anon16	file:
UConverterDataISO2022	ucnv2022.c	/^}UConverterDataISO2022;$/;"	t	typeref:struct:__anon68	file:
UConverterDataLMBCS	ucnv_lmb.c	/^UConverterDataLMBCS;$/;"	t	typeref:struct:__anon25	file:
UConverterEnumToUCallback	ucnvmbcs.c	/^UConverterEnumToUCallback(const void *context, uint32_t value, UChar32 codePoints[32]);$/;"	t	file:
UConverterFromUCallback	unicode/ucnv.h	/^typedef void (U_EXPORT2 *UConverterFromUCallback) ($/;"	t
UConverterFromUnicode	ucnv_cnv.h	/^typedef void (*UConverterFromUnicode) (UConverterFromUnicodeArgs *, UErrorCode *);$/;"	t
UConverterFromUnicodeArgs	unicode/ucnv_err.h	/^} UConverterFromUnicodeArgs;$/;"	t	typeref:struct:__anon105
UConverterGetName	ucnv_cnv.h	/^typedef const char * (*UConverterGetName) (const UConverter *cnv);$/;"	t
UConverterGetNextUChar	ucnv_cnv.h	/^typedef UChar32 (*UConverterGetNextUChar) (UConverterToUnicodeArgs *, UErrorCode *);$/;"	t
UConverterGetStarters	ucnv_cnv.h	/^typedef void (*UConverterGetStarters)(const UConverter* converter,$/;"	t
UConverterGetUnicodeSet	ucnv_cnv.h	/^typedef void (*UConverterGetUnicodeSet) (const UConverter *cnv,$/;"	t
UConverterImpl	ucnv_bld.h	/^struct UConverterImpl;$/;"	x
UConverterImpl	ucnv_bld.h	/^typedef struct UConverterImpl UConverterImpl;$/;"	t	typeref:struct:UConverterImpl
UConverterImpl	ucnv_cnv.h	/^struct UConverterImpl {$/;"	s
UConverterImpl::close	ucnv_cnv.h	/^    UConverterClose close;$/;"	m	struct:UConverterImpl	access:public
UConverterImpl::fromUTF8	ucnv_cnv.h	/^    UConverterConvert fromUTF8;$/;"	m	struct:UConverterImpl	access:public
UConverterImpl::fromUnicode	ucnv_cnv.h	/^    UConverterFromUnicode fromUnicode;$/;"	m	struct:UConverterImpl	access:public
UConverterImpl::fromUnicodeWithOffsets	ucnv_cnv.h	/^    UConverterFromUnicode fromUnicodeWithOffsets;$/;"	m	struct:UConverterImpl	access:public
UConverterImpl::getName	ucnv_cnv.h	/^    UConverterGetName getName;$/;"	m	struct:UConverterImpl	access:public
UConverterImpl::getNextUChar	ucnv_cnv.h	/^    UConverterGetNextUChar getNextUChar;$/;"	m	struct:UConverterImpl	access:public
UConverterImpl::getStarters	ucnv_cnv.h	/^    UConverterGetStarters getStarters;$/;"	m	struct:UConverterImpl	access:public
UConverterImpl::getUnicodeSet	ucnv_cnv.h	/^    UConverterGetUnicodeSet getUnicodeSet;$/;"	m	struct:UConverterImpl	access:public
UConverterImpl::load	ucnv_cnv.h	/^    UConverterLoad load;$/;"	m	struct:UConverterImpl	access:public
UConverterImpl::open	ucnv_cnv.h	/^    UConverterOpen open;$/;"	m	struct:UConverterImpl	access:public
UConverterImpl::reset	ucnv_cnv.h	/^    UConverterReset reset;$/;"	m	struct:UConverterImpl	access:public
UConverterImpl::safeClone	ucnv_cnv.h	/^    UConverterSafeClone safeClone;$/;"	m	struct:UConverterImpl	access:public
UConverterImpl::toUTF8	ucnv_cnv.h	/^    UConverterConvert toUTF8;$/;"	m	struct:UConverterImpl	access:public
UConverterImpl::toUnicode	ucnv_cnv.h	/^    UConverterToUnicode toUnicode;$/;"	m	struct:UConverterImpl	access:public
UConverterImpl::toUnicodeWithOffsets	ucnv_cnv.h	/^    UConverterToUnicode toUnicodeWithOffsets;$/;"	m	struct:UConverterImpl	access:public
UConverterImpl::type	ucnv_cnv.h	/^    UConverterType type;$/;"	m	struct:UConverterImpl	access:public
UConverterImpl::unload	ucnv_cnv.h	/^    UConverterUnload unload;$/;"	m	struct:UConverterImpl	access:public
UConverterImpl::writeSub	ucnv_cnv.h	/^    UConverterWriteSub writeSub;$/;"	m	struct:UConverterImpl	access:public
UConverterLoad	ucnv_cnv.h	/^typedef void (*UConverterLoad) (UConverterSharedData *sharedData,$/;"	t
UConverterLoadArgs	ucnv_cnv.h	/^} UConverterLoadArgs;$/;"	t	typeref:struct:__anon9
UConverterMBCSTable	ucnvmbcs.h	/^typedef struct UConverterMBCSTable {$/;"	s
UConverterMBCSTable	ucnvmbcs.h	/^} UConverterMBCSTable;$/;"	t	typeref:struct:UConverterMBCSTable
UConverterMBCSTable::asciiRoundtrips	ucnvmbcs.h	/^    uint32_t asciiRoundtrips;$/;"	m	struct:UConverterMBCSTable	access:public
UConverterMBCSTable::baseSharedData	ucnvmbcs.h	/^    struct UConverterSharedData *baseSharedData;$/;"	m	struct:UConverterMBCSTable	typeref:struct:UConverterMBCSTable::UConverterSharedData	access:public
UConverterMBCSTable::countStates	ucnvmbcs.h	/^    uint8_t countStates, dbcsOnlyState, stateTableOwned;$/;"	m	struct:UConverterMBCSTable	access:public
UConverterMBCSTable::countToUFallbacks	ucnvmbcs.h	/^    uint32_t countToUFallbacks;$/;"	m	struct:UConverterMBCSTable	access:public
UConverterMBCSTable::dbcsOnlyState	ucnvmbcs.h	/^    uint8_t countStates, dbcsOnlyState, stateTableOwned;$/;"	m	struct:UConverterMBCSTable	access:public
UConverterMBCSTable::extIndexes	ucnvmbcs.h	/^    const int32_t *extIndexes;$/;"	m	struct:UConverterMBCSTable	access:public
UConverterMBCSTable::fromUBytesLength	ucnvmbcs.h	/^    uint32_t fromUBytesLength;$/;"	m	struct:UConverterMBCSTable	access:public
UConverterMBCSTable::fromUnicodeBytes	ucnvmbcs.h	/^    const uint8_t *fromUnicodeBytes;$/;"	m	struct:UConverterMBCSTable	access:public
UConverterMBCSTable::fromUnicodeTable	ucnvmbcs.h	/^    const uint16_t *fromUnicodeTable;$/;"	m	struct:UConverterMBCSTable	access:public
UConverterMBCSTable::maxFastUChar	ucnvmbcs.h	/^    UChar maxFastUChar;                     \/* for utf8Friendly data *\/$/;"	m	struct:UConverterMBCSTable	access:public
UConverterMBCSTable::mbcsIndex	ucnvmbcs.h	/^    const uint16_t *mbcsIndex;              \/* for fast conversion from most of BMP to MBCS (utf8Friendly data) *\/$/;"	m	struct:UConverterMBCSTable	access:public
UConverterMBCSTable::outputType	ucnvmbcs.h	/^    uint8_t outputType, unicodeMask;$/;"	m	struct:UConverterMBCSTable	access:public
UConverterMBCSTable::reconstitutedData	ucnvmbcs.h	/^    uint8_t *reconstitutedData;$/;"	m	struct:UConverterMBCSTable	access:public
UConverterMBCSTable::sbcsIndex	ucnvmbcs.h	/^    uint16_t sbcsIndex[SBCS_FAST_LIMIT>>6]; \/* for fast conversion from low BMP to SBCS (utf8Friendly data) *\/$/;"	m	struct:UConverterMBCSTable	access:public
UConverterMBCSTable::stateTable	ucnvmbcs.h	/^    const int32_t (*stateTable)\/*[countStates]*\/[256];$/;"	m	struct:UConverterMBCSTable	access:public
UConverterMBCSTable::stateTableOwned	ucnvmbcs.h	/^    uint8_t countStates, dbcsOnlyState, stateTableOwned;$/;"	m	struct:UConverterMBCSTable	access:public
UConverterMBCSTable::swapLFNLFromUnicodeBytes	ucnvmbcs.h	/^    uint8_t *swapLFNLFromUnicodeBytes;      \/* for swaplfnl *\/$/;"	m	struct:UConverterMBCSTable	access:public
UConverterMBCSTable::swapLFNLName	ucnvmbcs.h	/^    char *swapLFNLName;$/;"	m	struct:UConverterMBCSTable	access:public
UConverterMBCSTable::swapLFNLStateTable	ucnvmbcs.h	/^    int32_t (*swapLFNLStateTable)\/*[countStates]*\/[256]; \/* for swaplfnl *\/$/;"	m	struct:UConverterMBCSTable	access:public
UConverterMBCSTable::toUFallbacks	ucnvmbcs.h	/^    const _MBCSToUFallback *toUFallbacks;$/;"	m	struct:UConverterMBCSTable	access:public
UConverterMBCSTable::unicodeCodeUnits	ucnvmbcs.h	/^    const uint16_t *unicodeCodeUnits\/*[countUnicodeResults]*\/;$/;"	m	struct:UConverterMBCSTable	access:public
UConverterMBCSTable::unicodeMask	ucnvmbcs.h	/^    uint8_t outputType, unicodeMask;$/;"	m	struct:UConverterMBCSTable	access:public
UConverterMBCSTable::utf8Friendly	ucnvmbcs.h	/^    UBool utf8Friendly;                     \/* for utf8Friendly data *\/$/;"	m	struct:UConverterMBCSTable	access:public
UConverterNamePieces	ucnv_imp.h	/^} UConverterNamePieces;$/;"	t	typeref:struct:__anon151
UConverterOpen	ucnv_cnv.h	/^typedef void (*UConverterOpen) (UConverter *cnv, UConverterLoadArgs *pArgs, UErrorCode *pErrorCode);$/;"	t
UConverterPlatform	unicode/ucnv.h	/^} UConverterPlatform;$/;"	t	typeref:enum:__anon108
UConverterReset	ucnv_cnv.h	/^typedef void (*UConverterReset) (UConverter *cnv, UConverterResetChoice choice);$/;"	t
UConverterResetChoice	ucnv_cnv.h	/^typedef enum UConverterResetChoice {$/;"	g
UConverterResetChoice	ucnv_cnv.h	/^} UConverterResetChoice;$/;"	t	typeref:enum:UConverterResetChoice
UConverterSafeClone	ucnv_cnv.h	/^typedef UConverter * (*UConverterSafeClone) (const UConverter   *cnv, $/;"	t
UConverterSelector	ucnvsel.cpp	/^struct UConverterSelector {$/;"	s	file:
UConverterSelector	unicode/ucnvsel.h	/^struct UConverterSelector;$/;"	x
UConverterSelector	unicode/ucnvsel.h	/^typedef struct UConverterSelector UConverterSelector;$/;"	t	typeref:struct:UConverterSelector
UConverterSelector::encodingStrLength	ucnvsel.cpp	/^  int32_t encodingStrLength;$/;"	m	struct:UConverterSelector	file:	access:public
UConverterSelector::encodings	ucnvsel.cpp	/^  char** encodings;          \/\/ which encodings did user ask to use?$/;"	m	struct:UConverterSelector	file:	access:public
UConverterSelector::encodingsCount	ucnvsel.cpp	/^  int32_t encodingsCount;$/;"	m	struct:UConverterSelector	file:	access:public
UConverterSelector::ownEncodingStrings	ucnvsel.cpp	/^  UBool ownPv, ownEncodingStrings;$/;"	m	struct:UConverterSelector	file:	access:public
UConverterSelector::ownPv	ucnvsel.cpp	/^  UBool ownPv, ownEncodingStrings;$/;"	m	struct:UConverterSelector	file:	access:public
UConverterSelector::pv	ucnvsel.cpp	/^  uint32_t* pv;              \/\/ table of bits!$/;"	m	struct:UConverterSelector	file:	access:public
UConverterSelector::pvCount	ucnvsel.cpp	/^  int32_t pvCount;$/;"	m	struct:UConverterSelector	file:	access:public
UConverterSelector::swapped	ucnvsel.cpp	/^  uint8_t* swapped;$/;"	m	struct:UConverterSelector	file:	access:public
UConverterSelector::trie	ucnvsel.cpp	/^  UTrie2 *trie;              \/\/ 16 bit trie containing offsets into pv$/;"	m	struct:UConverterSelector	file:	access:public
UConverterSetFilter	ucnv_cnv.h	/^typedef enum UConverterSetFilter {$/;"	g
UConverterSetFilter	ucnv_cnv.h	/^} UConverterSetFilter;$/;"	t	typeref:enum:UConverterSetFilter
UConverterSharedData	ucnv_bld.h	/^struct UConverterSharedData {$/;"	s
UConverterSharedData	ucnv_cnv.h	/^struct UConverterSharedData;$/;"	x
UConverterSharedData	ucnv_cnv.h	/^typedef struct UConverterSharedData UConverterSharedData;$/;"	t	typeref:struct:UConverterSharedData
UConverterSharedData::dataMemory	ucnv_bld.h	/^    const void *dataMemory;         \/* from udata_openChoice() - for cleanup *\/$/;"	m	struct:UConverterSharedData	access:public
UConverterSharedData::impl	ucnv_bld.h	/^    const UConverterImpl *impl;     \/* vtable-style struct of mostly function pointers *\/$/;"	m	struct:UConverterSharedData	access:public
UConverterSharedData::mbcs	ucnv_bld.h	/^    UConverterMBCSTable mbcs;$/;"	m	struct:UConverterSharedData	access:public
UConverterSharedData::referenceCounter	ucnv_bld.h	/^    uint32_t referenceCounter;      \/* used to count number of clients, 0xffffffff for static SharedData *\/$/;"	m	struct:UConverterSharedData	access:public
UConverterSharedData::sharedDataCached	ucnv_bld.h	/^    UBool                sharedDataCached;   \/* TRUE:  shared data is in cache, don't destroy on ucnv_close() if 0 ref.  FALSE: shared data isn't in the cache, do attempt to clean it up if the ref is 0 *\/$/;"	m	struct:UConverterSharedData	access:public
UConverterSharedData::staticData	ucnv_bld.h	/^    const UConverterStaticData *staticData; \/* pointer to the static (non changing) data. *\/$/;"	m	struct:UConverterSharedData	access:public
UConverterSharedData::structSize	ucnv_bld.h	/^    uint32_t structSize;            \/* Size of this structure *\/$/;"	m	struct:UConverterSharedData	access:public
UConverterSharedData::table	ucnv_bld.h	/^    void *table;                    \/* Unused. This used to be a UConverterTable - Pointer to conversion data - see mbcs below *\/$/;"	m	struct:UConverterSharedData	access:public
UConverterSharedData::toUnicodeStatus	ucnv_bld.h	/^    uint32_t toUnicodeStatus;$/;"	m	struct:UConverterSharedData	access:public
UConverterStaticData	ucnv_bld.h	/^typedef struct UConverterStaticData {   \/* +offset: size *\/$/;"	s
UConverterStaticData	ucnv_bld.h	/^} UConverterStaticData;$/;"	t	typeref:struct:UConverterStaticData
UConverterStaticData::codepage	ucnv_bld.h	/^    int32_t codepage;               \/* +64: 4 codepage # (now IBM-$codepage) *\/$/;"	m	struct:UConverterStaticData	access:public
UConverterStaticData::conversionType	ucnv_bld.h	/^    int8_t conversionType;          \/* +69: 1 conversion type *\/$/;"	m	struct:UConverterStaticData	access:public
UConverterStaticData::hasFromUnicodeFallback	ucnv_bld.h	/^    uint8_t hasFromUnicodeFallback; \/* +78: 1 *\/$/;"	m	struct:UConverterStaticData	access:public
UConverterStaticData::hasToUnicodeFallback	ucnv_bld.h	/^    uint8_t hasToUnicodeFallback;   \/* +77: 1 UBool needs to be changed to UBool to be consistent across platform *\/$/;"	m	struct:UConverterStaticData	access:public
UConverterStaticData::maxBytesPerChar	ucnv_bld.h	/^    int8_t maxBytesPerChar;         \/* +71: 1 Maximum # bytes output per UChar in this codepage *\/$/;"	m	struct:UConverterStaticData	access:public
UConverterStaticData::minBytesPerChar	ucnv_bld.h	/^    int8_t minBytesPerChar;         \/* +70: 1 Minimum # bytes per char in this codepage *\/$/;"	m	struct:UConverterStaticData	access:public
UConverterStaticData::name	ucnv_bld.h	/^    char name $/;"	m	struct:UConverterStaticData	access:public
UConverterStaticData::platform	ucnv_bld.h	/^    int8_t platform;                \/* +68: 1 platform of the converter (only IBM now) *\/$/;"	m	struct:UConverterStaticData	access:public
UConverterStaticData::reserved	ucnv_bld.h	/^    uint8_t reserved[19];           \/* +81: 19 to round out the structure *\/$/;"	m	struct:UConverterStaticData	access:public
UConverterStaticData::structSize	ucnv_bld.h	/^    uint32_t structSize;                \/* +0: 4 Size of this structure *\/$/;"	m	struct:UConverterStaticData	access:public
UConverterStaticData::subChar	ucnv_bld.h	/^    uint8_t subChar[UCNV_MAX_SUBCHAR_LEN]; \/* +72: 4  [note:  4 and 8 byte boundary] *\/$/;"	m	struct:UConverterStaticData	access:public
UConverterStaticData::subChar1	ucnv_bld.h	/^    uint8_t subChar1;               \/* +80: 1  single-byte substitution character for IBM MBCS (0 if none) *\/$/;"	m	struct:UConverterStaticData	access:public
UConverterStaticData::subCharLen	ucnv_bld.h	/^    int8_t subCharLen;              \/* +76: 1 *\/$/;"	m	struct:UConverterStaticData	access:public
UConverterStaticData::unicodeMask	ucnv_bld.h	/^    uint8_t unicodeMask;            \/* +79: 1  bit 0: has supplementary  bit 1: has single surrogates *\/$/;"	m	struct:UConverterStaticData	access:public
UConverterTable	ucnv_bld.h	/^typedef union UConverterTable UConverterTable;$/;"	t	typeref:union:UConverterTable
UConverterTable	ucnv_bld.h	/^union UConverterTable {$/;"	u
UConverterTable::mbcs	ucnv_bld.h	/^    UConverterMBCSTable mbcs;$/;"	m	union:UConverterTable	access:public
UConverterToUCallback	unicode/ucnv.h	/^typedef void (U_EXPORT2 *UConverterToUCallback) ($/;"	t
UConverterToUnicode	ucnv_cnv.h	/^typedef void (*UConverterToUnicode) (UConverterToUnicodeArgs *, UErrorCode *);$/;"	t
UConverterToUnicodeArgs	unicode/ucnv_err.h	/^} UConverterToUnicodeArgs;$/;"	t	typeref:struct:__anon106
UConverterType	unicode/ucnv.h	/^} UConverterType;$/;"	t	typeref:enum:__anon107
UConverterUnicodeSet	unicode/ucnv.h	/^typedef enum UConverterUnicodeSet {$/;"	g
UConverterUnicodeSet	unicode/ucnv.h	/^} UConverterUnicodeSet;$/;"	t	typeref:enum:UConverterUnicodeSet
UConverterUnload	ucnv_cnv.h	/^typedef void (*UConverterUnload) (UConverterSharedData *sharedData);$/;"	t
UConverterWriteSub	ucnv_cnv.h	/^typedef void (*UConverterWriteSub) (UConverterFromUnicodeArgs *pArgs, int32_t offsetIndex, UErrorCode *pErrorCode);$/;"	t
UConverter_fromUnicode_HZ_OFFSETS_LOGIC	ucnvhz.c	/^UConverter_fromUnicode_HZ_OFFSETS_LOGIC (UConverterFromUnicodeArgs * args,$/;"	f	file:	signature:(UConverterFromUnicodeArgs * args, UErrorCode * err)
UConverter_fromUnicode_ISCII_OFFSETS_LOGIC	ucnvisci.c	/^static void UConverter_fromUnicode_ISCII_OFFSETS_LOGIC($/;"	f	file:	signature:( UConverterFromUnicodeArgs * args, UErrorCode * err)
UConverter_fromUnicode_ISO_2022_CN_OFFSETS_LOGIC	ucnv2022.c	/^UConverter_fromUnicode_ISO_2022_CN_OFFSETS_LOGIC(UConverterFromUnicodeArgs* args, UErrorCode* err){$/;"	f	file:	signature:(UConverterFromUnicodeArgs* args, UErrorCode* err)
UConverter_fromUnicode_ISO_2022_JP_OFFSETS_LOGIC	ucnv2022.c	/^UConverter_fromUnicode_ISO_2022_JP_OFFSETS_LOGIC(UConverterFromUnicodeArgs* args, UErrorCode* err) {$/;"	f	file:	signature:(UConverterFromUnicodeArgs* args, UErrorCode* err)
UConverter_fromUnicode_ISO_2022_KR_OFFSETS_LOGIC	ucnv2022.c	/^UConverter_fromUnicode_ISO_2022_KR_OFFSETS_LOGIC(UConverterFromUnicodeArgs* args, UErrorCode* err){$/;"	f	file:	signature:(UConverterFromUnicodeArgs* args, UErrorCode* err)
UConverter_fromUnicode_ISO_2022_KR_OFFSETS_LOGIC_IBM	ucnv2022.c	/^UConverter_fromUnicode_ISO_2022_KR_OFFSETS_LOGIC_IBM(UConverterFromUnicodeArgs* args, UErrorCode* err){$/;"	f	file:	signature:(UConverterFromUnicodeArgs* args, UErrorCode* err)
UConverter_toUnicode_HZ_OFFSETS_LOGIC	ucnvhz.c	/^UConverter_toUnicode_HZ_OFFSETS_LOGIC(UConverterToUnicodeArgs *args,$/;"	f	file:	signature:(UConverterToUnicodeArgs *args, UErrorCode* err)
UConverter_toUnicode_ISCII_OFFSETS_LOGIC	ucnvisci.c	/^static void UConverter_toUnicode_ISCII_OFFSETS_LOGIC(UConverterToUnicodeArgs *args, UErrorCode* err) {$/;"	f	file:	signature:(UConverterToUnicodeArgs *args, UErrorCode* err)
UConverter_toUnicode_ISO_2022_CN_OFFSETS_LOGIC	ucnv2022.c	/^UConverter_toUnicode_ISO_2022_CN_OFFSETS_LOGIC(UConverterToUnicodeArgs *args,$/;"	f	file:	signature:(UConverterToUnicodeArgs *args, UErrorCode* err)
UConverter_toUnicode_ISO_2022_JP_OFFSETS_LOGIC	ucnv2022.c	/^UConverter_toUnicode_ISO_2022_JP_OFFSETS_LOGIC(UConverterToUnicodeArgs *args,$/;"	f	file:	signature:(UConverterToUnicodeArgs *args, UErrorCode* err)
UConverter_toUnicode_ISO_2022_KR_OFFSETS_LOGIC	ucnv2022.c	/^UConverter_toUnicode_ISO_2022_KR_OFFSETS_LOGIC(UConverterToUnicodeArgs *args,$/;"	f	file:	signature:(UConverterToUnicodeArgs *args, UErrorCode* err)
UConverter_toUnicode_ISO_2022_KR_OFFSETS_LOGIC_IBM	ucnv2022.c	/^UConverter_toUnicode_ISO_2022_KR_OFFSETS_LOGIC_IBM(UConverterToUnicodeArgs *args,$/;"	f	file:	signature:(UConverterToUnicodeArgs *args, UErrorCode* err)
UD0	ucnvscsu.c	/^    UD0=0xE8, \/* Define and select window 0 *\/$/;"	e	enum:__anon152	file:
UD7	ucnvscsu.c	/^    UD7=0xEF, \/* Define and select window 7 *\/$/;"	e	enum:__anon152	file:
UDATA	propname.cpp	/^static UDataMemory* UDATA = NULL;$/;"	v	file:
UDATA_DEFAULT_ACCESS	unicode/udata.h	/^    UDATA_DEFAULT_ACCESS = UDATA_FILES_FIRST,$/;"	e	enum:UDataFileAccess
UDATA_FILES_FIRST	unicode/udata.h	/^    UDATA_FILES_FIRST,$/;"	e	enum:UDataFileAccess
UDATA_FILE_ACCESS_COUNT	unicode/udata.h	/^    UDATA_FILE_ACCESS_COUNT$/;"	e	enum:UDataFileAccess
UDATA_NO_FILES	unicode/udata.h	/^    UDATA_NO_FILES,$/;"	e	enum:UDataFileAccess
UDATA_ONLY_PACKAGES	unicode/udata.h	/^    UDATA_ONLY_PACKAGES,$/;"	e	enum:UDataFileAccess
UDATA_PACKAGES_FIRST	unicode/udata.h	/^    UDATA_PACKAGES_FIRST,$/;"	e	enum:UDataFileAccess
UDEPRCTD_H	unicode/udeprctd.h	22;"	d
UDRAFT_H	unicode/udraft.h	22;"	d
UDX	ucnvscsu.c	/^    UDX=0xF1, \/* Define a Window as extended *\/$/;"	e	enum:__anon152	file:
UDataCompareInvChars	udataswp.h	/^UDataCompareInvChars(const UDataSwapper *ds,$/;"	t
UDataFileAccess	unicode/udata.h	/^typedef enum UDataFileAccess {$/;"	g
UDataFileAccess	unicode/udata.h	/^} UDataFileAccess;$/;"	t	typeref:enum:UDataFileAccess
UDataInfo	unicode/udata.h	/^} UDataInfo;$/;"	t	typeref:struct:__anon114
UDataMemory	triedict.h	/^struct UDataMemory;$/;"	x
UDataMemory	udatamem.h	/^struct UDataMemory {$/;"	s
UDataMemory	unicode/udata.h	/^typedef struct UDataMemory UDataMemory;$/;"	t	typeref:struct:UDataMemory
UDataMemory::heapAllocated	udatamem.h	/^    UBool             heapAllocated;  \/* True if this UDataMemory Object is on the    *\/$/;"	m	struct:UDataMemory	access:public
UDataMemory::length	udatamem.h	/^    int32_t           length;      \/* Length of the data in bytes; -1 if unknown.     *\/$/;"	m	struct:UDataMemory	access:public
UDataMemory::map	udatamem.h	/^    void             *map;         \/* Handle, or other data, OS dependent.            *\/$/;"	m	struct:UDataMemory	access:public
UDataMemory::mapAddr	udatamem.h	/^    void             *mapAddr;     \/* For mapped or allocated memory, the start addr. *\/$/;"	m	struct:UDataMemory	access:public
UDataMemory::pHeader	udatamem.h	/^    const DataHeader *pHeader;     \/* Header of the memory being described by this    *\/$/;"	m	struct:UDataMemory	access:public
UDataMemory::toc	udatamem.h	/^    const void       *toc;         \/* For common memory, table of contents for        *\/$/;"	m	struct:UDataMemory	access:public
UDataMemory::vFuncs	udatamem.h	/^    const commonDataFuncs  *vFuncs;      \/* Function Pointers for accessing TOC             *\/$/;"	m	struct:UDataMemory	access:public
UDataMemoryIsAcceptable	unicode/udata.h	/^UDataMemoryIsAcceptable(void *context,$/;"	t
UDataMemory_createNewInstance	udatamem.c	/^U_CFUNC UDataMemory *UDataMemory_createNewInstance(UErrorCode *pErr) {$/;"	f	signature:(UErrorCode *pErr)
UDataMemory_createNewInstance	udatamem.h	/^U_CFUNC UDataMemory *UDataMemory_createNewInstance(UErrorCode *pErr);$/;"	p	signature:(UErrorCode *pErr)
UDataMemory_createNewInstance	unicode/urename.h	69;"	d
UDataMemory_init	udatamem.c	/^U_CFUNC void UDataMemory_init(UDataMemory *This) {$/;"	f	signature:(UDataMemory *This)
UDataMemory_init	udatamem.h	/^U_CFUNC void         UDataMemory_init    (UDataMemory *This);$/;"	p	signature:(UDataMemory *This)
UDataMemory_init	unicode/urename.h	70;"	d
UDataMemory_isLoaded	udatamem.c	/^U_CFUNC UBool UDataMemory_isLoaded(const UDataMemory *This) {$/;"	f	signature:(const UDataMemory *This)
UDataMemory_isLoaded	udatamem.h	/^U_CFUNC UBool        UDataMemory_isLoaded(const UDataMemory *This);$/;"	p	signature:(const UDataMemory *This)
UDataMemory_isLoaded	unicode/urename.h	71;"	d
UDataMemory_normalizeDataPointer	udatamem.c	/^UDataMemory_normalizeDataPointer(const void *p) {$/;"	f	signature:(const void *p)
UDataMemory_normalizeDataPointer	udatamem.h	/^U_CFUNC const DataHeader *UDataMemory_normalizeDataPointer(const void *p);$/;"	p	signature:(const void *p)
UDataMemory_normalizeDataPointer	unicode/urename.h	72;"	d
UDataMemory_setData	udatamem.c	/^U_CFUNC void UDataMemory_setData (UDataMemory *This, const void *dataAddr) {$/;"	f	signature:(UDataMemory *This, const void *dataAddr)
UDataMemory_setData	udatamem.h	/^U_CFUNC void         UDataMemory_setData (UDataMemory *This, const void *dataAddr);$/;"	p	signature:(UDataMemory *This, const void *dataAddr)
UDataMemory_setData	unicode/urename.h	73;"	d
UDataOffsetTOC	ucmndata.h	/^} UDataOffsetTOC;$/;"	t	typeref:struct:__anon145
UDataOffsetTOCEntry	ucmndata.h	/^} UDataOffsetTOCEntry;$/;"	t	typeref:struct:__anon144
UDataPathIterator	udata.cpp	/^    UDataPathIterator(const char *path, const char *pkg,$/;"	p	class:UDataPathIterator	file:	access:public	signature:(const char *path, const char *pkg, const char *item, const char *suffix, UBool doCheckLastFour, UErrorCode *pErrorCode)
UDataPathIterator	udata.cpp	/^UDataPathIterator::UDataPathIterator(const char *inPath, const char *pkg,$/;"	f	class:UDataPathIterator	signature:(const char *inPath, const char *pkg, const char *item, const char *inSuffix, UBool doCheckLastFour, UErrorCode *pErrorCode)
UDataPathIterator	udata.cpp	/^class UDataPathIterator$/;"	c	file:
UDataPathIterator	unicode/urename.h	2192;"	d
UDataPathIterator::UDataPathIterator	udata.cpp	/^    UDataPathIterator(const char *path, const char *pkg,$/;"	p	class:UDataPathIterator	file:	access:public	signature:(const char *path, const char *pkg, const char *item, const char *suffix, UBool doCheckLastFour, UErrorCode *pErrorCode)
UDataPathIterator::UDataPathIterator	udata.cpp	/^UDataPathIterator::UDataPathIterator(const char *inPath, const char *pkg,$/;"	f	class:UDataPathIterator	signature:(const char *inPath, const char *pkg, const char *item, const char *inSuffix, UBool doCheckLastFour, UErrorCode *pErrorCode)
UDataPathIterator::basename	udata.cpp	/^    const char *basename;                          \/* item's basename (icudt22e_mt.res)*\/$/;"	m	class:UDataPathIterator	file:	access:private
UDataPathIterator::basenameLen	udata.cpp	/^    uint32_t    basenameLen;                       \/* length of basename *\/$/;"	m	class:UDataPathIterator	file:	access:private
UDataPathIterator::checkLastFour	udata.cpp	/^    UBool       checkLastFour;                     \/* if TRUE then allow paths such as '\/foo\/myapp.dat'$/;"	m	class:UDataPathIterator	file:	access:private
UDataPathIterator::itemPath	udata.cpp	/^    CharString  itemPath;                          \/* path passed in with item name *\/$/;"	m	class:UDataPathIterator	file:	access:private
UDataPathIterator::next	udata.cpp	/^    const char *next(UErrorCode *pErrorCode);$/;"	p	class:UDataPathIterator	file:	access:public	signature:(UErrorCode *pErrorCode)
UDataPathIterator::next	udata.cpp	/^const char *UDataPathIterator::next(UErrorCode *pErrorCode)$/;"	f	class:UDataPathIterator	signature:(UErrorCode *pErrorCode)
UDataPathIterator::nextPath	udata.cpp	/^    const char *nextPath;                          \/* path following this one *\/$/;"	m	class:UDataPathIterator	file:	access:private
UDataPathIterator::packageStub	udata.cpp	/^    CharString  packageStub;                       \/* example:  "\/icudt28b". Will ignore that leaf in set paths. *\/$/;"	m	class:UDataPathIterator	file:	access:private
UDataPathIterator::path	udata.cpp	/^    const char *path;                              \/* working path (u_icudata_Dir) *\/$/;"	m	class:UDataPathIterator	file:	access:private
UDataPathIterator::pathBuffer	udata.cpp	/^    CharString  pathBuffer;                        \/* output path for this it'ion *\/$/;"	m	class:UDataPathIterator	file:	access:private
UDataPathIterator::suffix	udata.cpp	/^    const char *suffix;                            \/* item suffix (can be null) *\/$/;"	m	class:UDataPathIterator	file:	access:private
UDataPrintError	udataswp.h	/^UDataPrintError(void *context, const char *fmt, va_list args);$/;"	t
UDataReadUInt16	udataswp.h	/^UDataReadUInt16(uint16_t x);$/;"	t
UDataReadUInt32	udataswp.h	/^UDataReadUInt32(uint32_t x);$/;"	t
UDataSwapFn	udataswp.h	/^UDataSwapFn(const UDataSwapper *ds,$/;"	t
UDataSwapper	triedict.h	/^struct UDataSwapper;$/;"	x
UDataSwapper	udataswp.h	/^struct UDataSwapper {$/;"	s
UDataSwapper	udataswp.h	/^struct UDataSwapper;$/;"	x
UDataSwapper	udataswp.h	/^typedef struct UDataSwapper UDataSwapper;$/;"	t	typeref:struct:UDataSwapper
UDataSwapper::compareInvChars	udataswp.h	/^    UDataCompareInvChars *compareInvChars;$/;"	m	struct:UDataSwapper	access:public
UDataSwapper::inCharset	udataswp.h	/^    uint8_t inCharset;$/;"	m	struct:UDataSwapper	access:public
UDataSwapper::inIsBigEndian	udataswp.h	/^    UBool inIsBigEndian;$/;"	m	struct:UDataSwapper	access:public
UDataSwapper::outCharset	udataswp.h	/^    uint8_t outCharset;$/;"	m	struct:UDataSwapper	access:public
UDataSwapper::outIsBigEndian	udataswp.h	/^    UBool outIsBigEndian;$/;"	m	struct:UDataSwapper	access:public
UDataSwapper::printError	udataswp.h	/^    UDataPrintError *printError;$/;"	m	struct:UDataSwapper	access:public
UDataSwapper::printErrorContext	udataswp.h	/^    void *printErrorContext;$/;"	m	struct:UDataSwapper	access:public
UDataSwapper::readUInt16	udataswp.h	/^    UDataReadUInt16 *readUInt16;$/;"	m	struct:UDataSwapper	access:public
UDataSwapper::readUInt32	udataswp.h	/^    UDataReadUInt32 *readUInt32;$/;"	m	struct:UDataSwapper	access:public
UDataSwapper::swapArray16	udataswp.h	/^    UDataSwapFn *swapArray16;$/;"	m	struct:UDataSwapper	access:public
UDataSwapper::swapArray32	udataswp.h	/^    UDataSwapFn *swapArray32;$/;"	m	struct:UDataSwapper	access:public
UDataSwapper::swapInvChars	udataswp.h	/^    UDataSwapFn *swapInvChars;$/;"	m	struct:UDataSwapper	access:public
UDataSwapper::writeUInt16	udataswp.h	/^    UDataWriteUInt16 *writeUInt16;$/;"	m	struct:UDataSwapper	access:public
UDataSwapper::writeUInt32	udataswp.h	/^    UDataWriteUInt32 *writeUInt32;$/;"	m	struct:UDataSwapper	access:public
UDataWriteUInt16	udataswp.h	/^UDataWriteUInt16(uint16_t *p, uint16_t x);$/;"	t
UDataWriteUInt32	udataswp.h	/^UDataWriteUInt32(uint32_t *p, uint32_t x);$/;"	t
UDatamemory_assign	udatamem.c	/^U_CFUNC void UDatamemory_assign(UDataMemory *dest, UDataMemory *source) {$/;"	f	signature:(UDataMemory *dest, UDataMemory *source)
UDatamemory_assign	udatamem.h	/^U_CFUNC void         UDatamemory_assign  (UDataMemory *dest, UDataMemory *source);$/;"	p	signature:(UDataMemory *dest, UDataMemory *source)
UDatamemory_assign	unicode/urename.h	74;"	d
UDate	unicode/utypes.h	/^typedef double UDate;$/;"	t
UDecompositionType	unicode/uchar.h	/^typedef enum UDecompositionType {$/;"	g
UDecompositionType	unicode/uchar.h	/^} UDecompositionType;$/;"	t	typeref:enum:UDecompositionType
UDisplayNameGetter	locdispnames.cpp	/^typedef  int32_t U_CALLCONV UDisplayNameGetter(const char *, char *, int32_t, UErrorCode *);$/;"	t	file:
UEastAsianWidth	unicode/uchar.h	/^typedef enum UEastAsianWidth {$/;"	g
UEastAsianWidth	unicode/uchar.h	/^} UEastAsianWidth;$/;"	t	typeref:enum:UEastAsianWidth
UEnumCharNamesFn	unicode/uchar.h	/^typedef UBool U_CALLCONV UEnumCharNamesFn(void *context,$/;"	t
UEnumClose	uenumimp.h	/^UEnumClose(UEnumeration *en);$/;"	t
UEnumCount	uenumimp.h	/^UEnumCount(UEnumeration *en, UErrorCode *status);$/;"	t
UEnumNext	uenumimp.h	/^UEnumNext(UEnumeration* en,$/;"	t
UEnumReset	uenumimp.h	/^UEnumReset(UEnumeration* en, $/;"	t
UEnumUNext	uenumimp.h	/^UEnumUNext(UEnumeration* en,$/;"	t
UEnumeration	triedict.h	/^struct UEnumeration;$/;"	x
UEnumeration	uenumimp.h	/^struct UEnumeration {$/;"	s
UEnumeration	unicode/uenum.h	/^struct UEnumeration;$/;"	x
UEnumeration	unicode/uenum.h	/^typedef struct UEnumeration UEnumeration;$/;"	t	typeref:struct:UEnumeration
UEnumeration::baseContext	uenumimp.h	/^    void *baseContext;$/;"	m	struct:UEnumeration	access:public
UEnumeration::close	uenumimp.h	/^    UEnumClose *close;$/;"	m	struct:UEnumeration	access:public
UEnumeration::context	uenumimp.h	/^    void *context;$/;"	m	struct:UEnumeration	access:public
UEnumeration::count	uenumimp.h	/^    UEnumCount *count;$/;"	m	struct:UEnumeration	access:public
UEnumeration::next	uenumimp.h	/^    UEnumNext  *next;$/;"	m	struct:UEnumeration	access:public
UEnumeration::reset	uenumimp.h	/^    UEnumReset *reset;$/;"	m	struct:UEnumeration	access:public
UEnumeration::uNext	uenumimp.h	/^    UEnumUNext *uNext;$/;"	m	struct:UEnumeration	access:public
UErrorCode	unicode/utypes.h	/^typedef enum UErrorCode {$/;"	g
UErrorCode	unicode/utypes.h	/^} UErrorCode;$/;"	t	typeref:enum:UErrorCode
UFieldPosition	unicode/umisc.h	/^typedef struct UFieldPosition {$/;"	s
UFieldPosition	unicode/umisc.h	/^} UFieldPosition;$/;"	t	typeref:struct:UFieldPosition
UFieldPosition::beginIndex	unicode/umisc.h	/^  int32_t beginIndex;$/;"	m	struct:UFieldPosition	access:public
UFieldPosition::endIndex	unicode/umisc.h	/^  int32_t endIndex;$/;"	m	struct:UFieldPosition	access:public
UFieldPosition::field	unicode/umisc.h	/^  int32_t field;$/;"	m	struct:UFieldPosition	access:public
UGraphemeClusterBreak	unicode/uchar.h	/^typedef enum UGraphemeClusterBreak {$/;"	g
UGraphemeClusterBreak	unicode/uchar.h	/^} UGraphemeClusterBreak;$/;"	t	typeref:enum:UGraphemeClusterBreak
UHASH_H	uhash.h	14;"	d
UHangulSyllableType	unicode/uchar.h	/^typedef enum UHangulSyllableType {$/;"	g
UHangulSyllableType	unicode/uchar.h	/^} UHangulSyllableType;$/;"	t	typeref:enum:UHangulSyllableType
UHashElement	uhash.h	/^struct UHashElement {$/;"	s
UHashElement	uhash.h	/^typedef struct UHashElement UHashElement;$/;"	t	typeref:struct:UHashElement
UHashElement::hashcode	uhash.h	/^    int32_t  hashcode;$/;"	m	struct:UHashElement	access:public
UHashElement::key	uhash.h	/^    UHashTok key;$/;"	m	struct:UHashElement	access:public
UHashElement::value	uhash.h	/^    UHashTok value;$/;"	m	struct:UHashElement	access:public
UHashFunction	uhash.h	/^typedef int32_t U_CALLCONV UHashFunction(const UHashTok key);$/;"	t
UHashResizePolicy	uhash.h	/^enum UHashResizePolicy {$/;"	g
UHashTok	uhash.h	/^typedef union UHashTok UHashTok;$/;"	t	typeref:union:UHashTok
UHashTok	uhash.h	/^union UHashTok {$/;"	u
UHashTok::integer	uhash.h	/^    int32_t integer;$/;"	m	union:UHashTok	access:public
UHashTok::pointer	uhash.h	/^    void*   pointer;$/;"	m	union:UHashTok	access:public
UHashtable	uhash.h	/^struct UHashtable {$/;"	s
UHashtable	uhash.h	/^typedef struct UHashtable UHashtable;$/;"	t	typeref:struct:UHashtable
UHashtable::allocated	uhash.h	/^    UBool       allocated; \/* Was this UHashtable allocated? *\/$/;"	m	struct:UHashtable	access:public
UHashtable::count	uhash.h	/^    int32_t     count;      \/* The number of key-value pairs in this table.$/;"	m	struct:UHashtable	access:public
UHashtable::elements	uhash.h	/^    UHashElement *elements;$/;"	m	struct:UHashtable	access:public
UHashtable::highWaterMark	uhash.h	/^    int32_t     highWaterMark;  \/* If count > highWaterMark, rehash *\/$/;"	m	struct:UHashtable	access:public
UHashtable::highWaterRatio	uhash.h	/^    float       highWaterRatio; \/* 0..1; high water as a fraction of length *\/$/;"	m	struct:UHashtable	access:public
UHashtable::keyComparator	uhash.h	/^    UKeyComparator *keyComparator; \/* Compares keys for equality.$/;"	m	struct:UHashtable	access:public
UHashtable::keyDeleter	uhash.h	/^    UObjectDeleter *keyDeleter;    \/* Deletes keys when required.$/;"	m	struct:UHashtable	access:public
UHashtable::keyHasher	uhash.h	/^    UHashFunction *keyHasher;      \/* Computes hash from key.$/;"	m	struct:UHashtable	access:public
UHashtable::length	uhash.h	/^    int32_t     length;     \/* The physical size of the arrays hashes, keys$/;"	m	struct:UHashtable	access:public
UHashtable::lowWaterMark	uhash.h	/^    int32_t     lowWaterMark;   \/* If count < lowWaterMark, rehash *\/$/;"	m	struct:UHashtable	access:public
UHashtable::lowWaterRatio	uhash.h	/^    float       lowWaterRatio;  \/* 0..1; low water as a fraction of length *\/$/;"	m	struct:UHashtable	access:public
UHashtable::primeIndex	uhash.h	/^    int8_t      primeIndex;     \/* Index into our prime table for length.$/;"	m	struct:UHashtable	access:public
UHashtable::valueComparator	uhash.h	/^    UValueComparator *valueComparator; \/* Compares the values for equality *\/$/;"	m	struct:UHashtable	access:public
UHashtable::valueDeleter	uhash.h	/^    UObjectDeleter *valueDeleter;  \/* Deletes values when required.$/;"	m	struct:UHashtable	access:public
UIDNA	unicode/uidna.h	/^struct UIDNA;$/;"	x
UIDNA	unicode/uidna.h	/^typedef struct UIDNA UIDNA;  \/**< C typedef for struct UIDNA. @draft ICU 4.6 *\/$/;"	t	typeref:struct:UIDNA
UIDNAInfo	unicode/uidna.h	/^struct UIDNAInfo {$/;"	s
UIDNAInfo	unicode/uidna.h	/^typedef struct UIDNAInfo UIDNAInfo;$/;"	t	typeref:struct:UIDNAInfo
UIDNAInfo::errors	unicode/uidna.h	/^    uint32_t errors;$/;"	m	struct:UIDNAInfo	access:public
UIDNAInfo::isTransitionalDifferent	unicode/uidna.h	/^    UBool isTransitionalDifferent;$/;"	m	struct:UIDNAInfo	access:public
UIDNAInfo::reservedB3	unicode/uidna.h	/^    UBool reservedB3;  \/**< Reserved field, do not use. @internal *\/$/;"	m	struct:UIDNAInfo	access:public
UIDNAInfo::reservedI2	unicode/uidna.h	/^    int32_t reservedI2;  \/**< Reserved field, do not use. @internal *\/$/;"	m	struct:UIDNAInfo	access:public
UIDNAInfo::reservedI3	unicode/uidna.h	/^    int32_t reservedI3;  \/**< Reserved field, do not use. @internal *\/$/;"	m	struct:UIDNAInfo	access:public
UIDNAInfo::size	unicode/uidna.h	/^    int16_t size;$/;"	m	struct:UIDNAInfo	access:public
UIDNA_ALLOW_UNASSIGNED	unicode/uidna.h	/^    UIDNA_ALLOW_UNASSIGNED=1,$/;"	e	enum:__anon115
UIDNA_CHECK_BIDI	unicode/uidna.h	/^    UIDNA_CHECK_BIDI=4,$/;"	e	enum:__anon115
UIDNA_CHECK_CONTEXTJ	unicode/uidna.h	/^    UIDNA_CHECK_CONTEXTJ=8,$/;"	e	enum:__anon115
UIDNA_DEFAULT	unicode/uidna.h	/^    UIDNA_DEFAULT=0,$/;"	e	enum:__anon115
UIDNA_ERROR_BIDI	unicode/uidna.h	/^    UIDNA_ERROR_BIDI=0x800,$/;"	e	enum:__anon116
UIDNA_ERROR_CONTEXTJ	unicode/uidna.h	/^    UIDNA_ERROR_CONTEXTJ=0x1000$/;"	e	enum:__anon116
UIDNA_ERROR_DISALLOWED	unicode/uidna.h	/^    UIDNA_ERROR_DISALLOWED=0x80,$/;"	e	enum:__anon116
UIDNA_ERROR_DOMAIN_NAME_TOO_LONG	unicode/uidna.h	/^    UIDNA_ERROR_DOMAIN_NAME_TOO_LONG=4,$/;"	e	enum:__anon116
UIDNA_ERROR_EMPTY_LABEL	unicode/uidna.h	/^    UIDNA_ERROR_EMPTY_LABEL=1,$/;"	e	enum:__anon116
UIDNA_ERROR_HYPHEN_3_4	unicode/uidna.h	/^    UIDNA_ERROR_HYPHEN_3_4=0x20,$/;"	e	enum:__anon116
UIDNA_ERROR_INVALID_ACE_LABEL	unicode/uidna.h	/^    UIDNA_ERROR_INVALID_ACE_LABEL=0x400,$/;"	e	enum:__anon116
UIDNA_ERROR_LABEL_HAS_DOT	unicode/uidna.h	/^    UIDNA_ERROR_LABEL_HAS_DOT=0x200,$/;"	e	enum:__anon116
UIDNA_ERROR_LABEL_TOO_LONG	unicode/uidna.h	/^    UIDNA_ERROR_LABEL_TOO_LONG=2,$/;"	e	enum:__anon116
UIDNA_ERROR_LEADING_COMBINING_MARK	unicode/uidna.h	/^    UIDNA_ERROR_LEADING_COMBINING_MARK=0x40,$/;"	e	enum:__anon116
UIDNA_ERROR_LEADING_HYPHEN	unicode/uidna.h	/^    UIDNA_ERROR_LEADING_HYPHEN=8,$/;"	e	enum:__anon116
UIDNA_ERROR_PUNYCODE	unicode/uidna.h	/^    UIDNA_ERROR_PUNYCODE=0x100,$/;"	e	enum:__anon116
UIDNA_ERROR_TRAILING_HYPHEN	unicode/uidna.h	/^    UIDNA_ERROR_TRAILING_HYPHEN=0x10,$/;"	e	enum:__anon116
UIDNA_INFO_INITIALIZER	unicode/uidna.h	183;"	d
UIDNA_NONTRANSITIONAL_TO_ASCII	unicode/uidna.h	/^    UIDNA_NONTRANSITIONAL_TO_ASCII=0x10,$/;"	e	enum:__anon115
UIDNA_NONTRANSITIONAL_TO_UNICODE	unicode/uidna.h	/^    UIDNA_NONTRANSITIONAL_TO_UNICODE=0x20$/;"	e	enum:__anon115
UIDNA_USE_STD3_RULES	unicode/uidna.h	/^    UIDNA_USE_STD3_RULES=2,$/;"	e	enum:__anon115
UINT16_MAX	unicode/umachine.h	174;"	d
UINT32_MAX	unicode/umachine.h	178;"	d
UINT64_C	unicode/pwin32.h	110;"	d
UINT64_C	unicode/umachine.h	198;"	d
UINT8_MAX	unicode/umachine.h	170;"	d
UINTRNAL_H	unicode/uintrnal.h	22;"	d
UITER_CNV_CAPACITY	uiter.cpp	555;"	d	file:
UITER_CURRENT	unicode/uiter.h	/^    UITER_START, UITER_CURRENT, UITER_LIMIT, UITER_ZERO, UITER_LENGTH$/;"	e	enum:UCharIteratorOrigin
UITER_LENGTH	unicode/uiter.h	/^    UITER_START, UITER_CURRENT, UITER_LIMIT, UITER_ZERO, UITER_LENGTH$/;"	e	enum:UCharIteratorOrigin
UITER_LIMIT	unicode/uiter.h	/^    UITER_START, UITER_CURRENT, UITER_LIMIT, UITER_ZERO, UITER_LENGTH$/;"	e	enum:UCharIteratorOrigin
UITER_NO_STATE	unicode/uiter.h	84;"	d
UITER_START	unicode/uiter.h	/^    UITER_START, UITER_CURRENT, UITER_LIMIT, UITER_ZERO, UITER_LENGTH$/;"	e	enum:UCharIteratorOrigin
UITER_UNKNOWN_INDEX	unicode/uiter.h	/^    UITER_UNKNOWN_INDEX=-2$/;"	e	enum:__anon103
UITER_ZERO	unicode/uiter.h	/^    UITER_START, UITER_CURRENT, UITER_LIMIT, UITER_ZERO, UITER_LENGTH$/;"	e	enum:UCharIteratorOrigin
UJoiningGroup	unicode/uchar.h	/^typedef enum UJoiningGroup {$/;"	g
UJoiningGroup	unicode/uchar.h	/^} UJoiningGroup;$/;"	t	typeref:enum:UJoiningGroup
UJoiningType	unicode/uchar.h	/^typedef enum UJoiningType {$/;"	g
UJoiningType	unicode/uchar.h	/^} UJoiningType;$/;"	t	typeref:enum:UJoiningType
UKeyComparator	uhash.h	/^typedef UBool U_CALLCONV UKeyComparator(const UHashTok key1,$/;"	t
UKeywordsContext	uloc.c	/^typedef struct UKeywordsContext {$/;"	s	file:
UKeywordsContext	uloc.c	/^} UKeywordsContext;$/;"	t	typeref:struct:UKeywordsContext	file:
UKeywordsContext::current	uloc.c	/^    char* current;$/;"	m	struct:UKeywordsContext	file:	access:public
UKeywordsContext::keywords	uloc.c	/^    char* keywords;$/;"	m	struct:UKeywordsContext	file:	access:public
ULIST_H	ulist.h	9;"	d
ULMBCS_123SYSTEMRANGE	ucnv_lmb.c	162;"	d	file:
ULMBCS_AMBIGUOUS_ALL	ucnv_lmb.c	286;"	d	file:
ULMBCS_AMBIGUOUS_MATCH	ucnv_lmb.c	288;"	d	file:
ULMBCS_AMBIGUOUS_MBCS	ucnv_lmb.c	283;"	d	file:
ULMBCS_AMBIGUOUS_SBCS	ucnv_lmb.c	280;"	d	file:
ULMBCS_C0END	ucnv_lmb.c	92;"	d	file:
ULMBCS_C1START	ucnv_lmb.c	93;"	d	file:
ULMBCS_CHARSIZE_MAX	ucnv_lmb.c	86;"	d	file:
ULMBCS_CR	ucnv_lmb.c	157;"	d	file:
ULMBCS_CTRLOFFSET	ucnv_lmb.c	174;"	d	file:
ULMBCS_DEFAULTOPTGROUP	ucnv_lmb.c	214;"	d	file:
ULMBCS_DOUBLEOPTGROUP_START	ucnv_lmb.c	133;"	d	file:
ULMBCS_GRP_AR	ucnv_lmb.c	111;"	d	file:
ULMBCS_GRP_CN	ucnv_lmb.c	119;"	d	file:
ULMBCS_GRP_CTRL	ucnv_lmb.c	169;"	d	file:
ULMBCS_GRP_EXCEPT	ucnv_lmb.c	189;"	d	file:
ULMBCS_GRP_GR	ucnv_lmb.c	109;"	d	file:
ULMBCS_GRP_HE	ucnv_lmb.c	110;"	d	file:
ULMBCS_GRP_JA	ucnv_lmb.c	116;"	d	file:
ULMBCS_GRP_KO	ucnv_lmb.c	117;"	d	file:
ULMBCS_GRP_L1	ucnv_lmb.c	108;"	d	file:
ULMBCS_GRP_L2	ucnv_lmb.c	113;"	d	file:
ULMBCS_GRP_LAST	ucnv_lmb.c	235;"	d	file:
ULMBCS_GRP_RU	ucnv_lmb.c	112;"	d	file:
ULMBCS_GRP_TH	ucnv_lmb.c	115;"	d	file:
ULMBCS_GRP_TR	ucnv_lmb.c	114;"	d	file:
ULMBCS_GRP_TW	ucnv_lmb.c	118;"	d	file:
ULMBCS_GRP_UNICODE	ucnv_lmb.c	194;"	d	file:
ULMBCS_HT	ucnv_lmb.c	155;"	d	file:
ULMBCS_LF	ucnv_lmb.c	156;"	d	file:
ULMBCS_UNICODE_SIZE	ucnv_lmb.c	205;"	d	file:
ULMBCS_UNICOMPATZERO	ucnv_lmb.c	201;"	d	file:
ULOCIMP_H	ulocimp.h	9;"	d
ULOC_ACCEPT_FAILED	unicode/uloc.h	/^  ULOC_ACCEPT_FAILED   = 0,  \/* No exact match was found. *\/$/;"	e	enum:__anon102
ULOC_ACCEPT_FALLBACK	unicode/uloc.h	/^  ULOC_ACCEPT_FALLBACK = 2   \/* A fallback was found, for example, $/;"	e	enum:__anon102
ULOC_ACCEPT_VALID	unicode/uloc.h	/^  ULOC_ACCEPT_VALID    = 1,  \/* An exact match was found. *\/$/;"	e	enum:__anon102
ULOC_ACTUAL_LOCALE	unicode/uloc.h	/^  ULOC_ACTUAL_LOCALE    = 0,$/;"	e	enum:__anon100
ULOC_CANADA	unicode/uloc.h	220;"	d
ULOC_CANADA_FRENCH	unicode/uloc.h	222;"	d
ULOC_CHINA	unicode/uloc.h	224;"	d
ULOC_CHINESE	unicode/uloc.h	201;"	d
ULOC_COUNTRY_CAPACITY	unicode/uloc.h	256;"	d
ULOC_DATA_LOCALE_TYPE_LIMIT	unicode/uloc.h	/^  ULOC_DATA_LOCALE_TYPE_LIMIT = 3$/;"	e	enum:__anon100
ULOC_ENGLISH	unicode/uloc.h	203;"	d
ULOC_FRANCE	unicode/uloc.h	228;"	d
ULOC_FRENCH	unicode/uloc.h	205;"	d
ULOC_FULLNAME_CAPACITY	unicode/uloc.h	262;"	d
ULOC_GERMAN	unicode/uloc.h	207;"	d
ULOC_GERMANY	unicode/uloc.h	230;"	d
ULOC_H	unicode/uloc.h	22;"	d
ULOC_ITALIAN	unicode/uloc.h	209;"	d
ULOC_ITALY	unicode/uloc.h	232;"	d
ULOC_JAPAN	unicode/uloc.h	234;"	d
ULOC_JAPANESE	unicode/uloc.h	211;"	d
ULOC_KEYWORDS_CAPACITY	unicode/uloc.h	275;"	d
ULOC_KEYWORD_AND_VALUES_CAPACITY	unicode/uloc.h	281;"	d
ULOC_KEYWORD_ASSIGN	unicode/uloc.h	300;"	d
ULOC_KEYWORD_ASSIGN_UNICODE	unicode/uloc.h	307;"	d
ULOC_KEYWORD_BUFFER_LEN	uloc.c	568;"	d	file:
ULOC_KEYWORD_ITEM_SEPARATOR	unicode/uloc.h	313;"	d
ULOC_KEYWORD_ITEM_SEPARATOR_UNICODE	unicode/uloc.h	320;"	d
ULOC_KEYWORD_SEPARATOR	unicode/uloc.h	287;"	d
ULOC_KEYWORD_SEPARATOR_UNICODE	unicode/uloc.h	294;"	d
ULOC_KOREA	unicode/uloc.h	236;"	d
ULOC_KOREAN	unicode/uloc.h	213;"	d
ULOC_LANG_CAPACITY	unicode/uloc.h	249;"	d
ULOC_LAYOUT_BTT	unicode/uloc.h	/^  ULOC_LAYOUT_BTT    = 3,   \/* bottom-to-top. *\/$/;"	e	enum:__anon101
ULOC_LAYOUT_LTR	unicode/uloc.h	/^  ULOC_LAYOUT_LTR   = 0,  \/* left-to-right. *\/$/;"	e	enum:__anon101
ULOC_LAYOUT_RTL	unicode/uloc.h	/^  ULOC_LAYOUT_RTL    = 1,  \/* right-to-left. *\/$/;"	e	enum:__anon101
ULOC_LAYOUT_TTB	unicode/uloc.h	/^  ULOC_LAYOUT_TTB    = 2,  \/* top-to-bottom. *\/$/;"	e	enum:__anon101
ULOC_LAYOUT_UNKNOWN	unicode/uloc.h	/^  ULOC_LAYOUT_UNKNOWN$/;"	e	enum:__anon101
ULOC_MAX_NO_KEYWORDS	uloc.c	569;"	d	file:
ULOC_PRC	unicode/uloc.h	226;"	d
ULOC_REQUESTED_LOCALE	unicode/uloc.h	/^  ULOC_REQUESTED_LOCALE = 2,$/;"	e	enum:__anon100
ULOC_SCRIPT_CAPACITY	unicode/uloc.h	269;"	d
ULOC_SIMPLIFIED_CHINESE	unicode/uloc.h	215;"	d
ULOC_TAIWAN	unicode/uloc.h	238;"	d
ULOC_TRADITIONAL_CHINESE	unicode/uloc.h	217;"	d
ULOC_UK	unicode/uloc.h	240;"	d
ULOC_US	unicode/uloc.h	242;"	d
ULOC_VALID_LOCALE	unicode/uloc.h	/^  ULOC_VALID_LOCALE    = 1,$/;"	e	enum:__anon100
ULanguageTag	uloc_tag.c	/^typedef struct ULanguageTag {$/;"	s	file:
ULanguageTag	uloc_tag.c	/^} ULanguageTag;$/;"	t	typeref:struct:ULanguageTag	file:
ULanguageTag::buf	uloc_tag.c	/^    char                *buf;   \/* holding parsed subtags *\/$/;"	m	struct:ULanguageTag	file:	access:public
ULanguageTag::extensions	uloc_tag.c	/^    ExtensionListEntry  *extensions;$/;"	m	struct:ULanguageTag	file:	access:public
ULanguageTag::extlang	uloc_tag.c	/^    const char          *extlang[MAXEXTLANG];$/;"	m	struct:ULanguageTag	file:	access:public
ULanguageTag::grandfathered	uloc_tag.c	/^    const char          *grandfathered;$/;"	m	struct:ULanguageTag	file:	access:public
ULanguageTag::language	uloc_tag.c	/^    const char          *language;$/;"	m	struct:ULanguageTag	file:	access:public
ULanguageTag::privateuse	uloc_tag.c	/^    const char          *privateuse;$/;"	m	struct:ULanguageTag	file:	access:public
ULanguageTag::region	uloc_tag.c	/^    const char          *region;$/;"	m	struct:ULanguageTag	file:	access:public
ULanguageTag::script	uloc_tag.c	/^    const char          *script;$/;"	m	struct:ULanguageTag	file:	access:public
ULanguageTag::variants	uloc_tag.c	/^    VariantListEntry    *variants;$/;"	m	struct:ULanguageTag	file:	access:public
ULayoutType	unicode/uloc.h	/^} ULayoutType;$/;"	t	typeref:enum:__anon101
ULineBreak	unicode/uchar.h	/^typedef enum ULineBreak {$/;"	g
ULineBreak	unicode/uchar.h	/^} ULineBreak;$/;"	t	typeref:enum:ULineBreak
ULineBreakTag	unicode/ubrk.h	/^typedef enum ULineBreakTag {$/;"	g
ULineBreakTag	unicode/ubrk.h	/^} ULineBreakTag;$/;"	t	typeref:enum:ULineBreakTag
UList	ulist.c	/^struct UList {$/;"	s	file:
UList	ulist.h	/^struct UList;$/;"	x
UList	ulist.h	/^typedef struct UList UList;$/;"	t	typeref:struct:UList
UList::curr	ulist.c	/^    UListNode *curr;$/;"	m	struct:UList	file:	access:public
UList::currentIndex	ulist.c	/^    int32_t currentIndex;$/;"	m	struct:UList	file:	access:public
UList::head	ulist.c	/^    UListNode *head;$/;"	m	struct:UList	file:	access:public
UList::size	ulist.c	/^    int32_t size;$/;"	m	struct:UList	file:	access:public
UList::tail	ulist.c	/^    UListNode *tail;$/;"	m	struct:UList	file:	access:public
UListNode	ulist.c	/^struct UListNode {$/;"	s	file:
UListNode	ulist.c	/^typedef struct UListNode UListNode;$/;"	t	typeref:struct:UListNode	file:
UListNode::data	ulist.c	/^    void *data;$/;"	m	struct:UListNode	file:	access:public
UListNode::forceDelete	ulist.c	/^    UBool forceDelete;$/;"	m	struct:UListNode	file:	access:public
UListNode::next	ulist.c	/^    UListNode *next;$/;"	m	struct:UListNode	file:	access:public
UListNode::previous	ulist.c	/^    UListNode *previous;$/;"	m	struct:UListNode	file:	access:public
ULocDataLocaleType	unicode/uloc.h	/^} ULocDataLocaleType ;$/;"	t	typeref:enum:__anon100
ULocRuns	unicode/urename.h	2193;"	d
ULocalesContext	uresbund.c	/^typedef struct ULocalesContext {$/;"	s	file:
ULocalesContext	uresbund.c	/^} ULocalesContext;$/;"	t	typeref:struct:ULocalesContext	file:
ULocalesContext::curr	uresbund.c	/^    UResourceBundle curr;$/;"	m	struct:ULocalesContext	file:	access:public
ULocalesContext::installed	uresbund.c	/^    UResourceBundle installed;$/;"	m	struct:ULocalesContext	file:	access:public
UMISC_H	unicode/umisc.h	16;"	d
UMTX	unicode/uclean.h	/^typedef void *UMTX;$/;"	t
UMTX_CHECK	umutex.h	66;"	d
UMTX_CHECK	umutex.h	71;"	d
UMTX_STRONG_MEMORY_MODEL	umutex.h	46;"	d
UMTX_STRONG_MEMORY_MODEL	unicode/platform.h	160;"	d
UMTX_STRONG_MEMORY_MODEL	unicode/pwin32.h	199;"	d
UMUTEX_H	umutex.h	19;"	d
UMatchDegree	unicode/unimatch.h	/^enum UMatchDegree {$/;"	g
UMemAllocFn	unicode/uclean.h	/^typedef void *U_CALLCONV UMemAllocFn(const void *context, size_t size);$/;"	t
UMemFreeFn	unicode/uclean.h	/^typedef void  U_CALLCONV UMemFreeFn (const void *context, void *mem);$/;"	t
UMemReallocFn	unicode/uclean.h	/^typedef void *U_CALLCONV UMemReallocFn(const void *context, void *mem, size_t size);$/;"	t
UMemory	unicode/uobject.h	/^class U_COMMON_API UMemory {$/;"	c
UMemory	unicode/urename.h	2194;"	d
UMemory::FreeArray	unicode/uobject.h	/^    static void   FreeArray(void * array );$/;"	p	class:UMemory	access:public	signature:(void * array )
UMemory::GrowArray	unicode/uobject.h	/^    static void * GrowArray(void * array, int newSize );$/;"	p	class:UMemory	access:public	signature:(void * array, int newSize )
UMemory::NewArray	unicode/uobject.h	/^    static void * NewArray(int size, int count);$/;"	p	class:UMemory	access:public	signature:(int size, int count)
UMemory::U_NO_THROW	unicode/uobject.h	/^    static void * U_EXPORT2 operator new(size_t size) U_NO_THROW;$/;"	m	class:UMemory	access:public
UMemory::U_NO_THROW	unicode/uobject.h	/^    static void * U_EXPORT2 operator new(size_t size, const char* file, int line) U_NO_THROW;$/;"	m	class:UMemory	access:public
UMemory::U_NO_THROW	unicode/uobject.h	/^    static void * U_EXPORT2 operator new[](size_t size) U_NO_THROW;$/;"	m	class:UMemory	access:public
UMemory::U_NO_THROW	unicode/uobject.h	/^    static void U_EXPORT2 operator delete(void *p) U_NO_THROW;$/;"	m	class:UMemory	access:public
UMemory::U_NO_THROW	unicode/uobject.h	/^    static void U_EXPORT2 operator delete(void* p, const char* file, int line) U_NO_THROW;$/;"	m	class:UMemory	access:public
UMemory::U_NO_THROW	unicode/uobject.h	/^    static void U_EXPORT2 operator delete[](void *p) U_NO_THROW;$/;"	m	class:UMemory	access:public
UMtxAtomicFn	unicode/uclean.h	/^typedef int32_t U_CALLCONV UMtxAtomicFn(const void *context, int32_t *p);$/;"	t
UMtxFn	unicode/uclean.h	/^typedef void U_CALLCONV UMtxFn   (const void *context, UMTX  *mutex);$/;"	t
UMtxInitFn	unicode/uclean.h	/^typedef void U_CALLCONV UMtxInitFn (const void *context, UMTX  *mutex, UErrorCode* status);$/;"	t
UNDERSCORE_CHAR	locutil.cpp	23;"	d	file:
UNDERSCORE_CHAR	servlk.cpp	23;"	d	file:
UNDERSCORE_CHAR	servlkf.cpp	23;"	d	file:
UNDERSCORE_CHAR	servls.cpp	23;"	d	file:
UNDERSCORE_CHAR	servrbf.cpp	23;"	d	file:
UNDERSCORE_CHAR	servslkf.cpp	23;"	d	file:
UNESCAPE_CHAR_AT	unicode/ustring.h	/^typedef UChar (U_CALLCONV *UNESCAPE_CHAR_AT)(int32_t offset, void *context);$/;"	t
UNESCAPE_MAP	ustring.c	/^static const UChar UNESCAPE_MAP[] = {$/;"	v	file:
UNESCAPE_MAP_LENGTH	ustring.c	/^enum { UNESCAPE_MAP_LENGTH = sizeof(UNESCAPE_MAP) \/ sizeof(UNESCAPE_MAP[0]) };$/;"	e	enum:__anon156	file:
UNEWTRIE2_DATA_0800_OFFSET	utrie2_builder.c	/^    UNEWTRIE2_DATA_0800_OFFSET=UNEWTRIE2_DATA_START_OFFSET+0x780$/;"	e	enum:__anon6	file:
UNEWTRIE2_DATA_NULL_OFFSET	utrie2_builder.c	/^    UNEWTRIE2_DATA_NULL_OFFSET=UTRIE2_DATA_START_OFFSET,$/;"	e	enum:__anon6	file:
UNEWTRIE2_DATA_START_OFFSET	utrie2_builder.c	/^    UNEWTRIE2_DATA_START_OFFSET=UNEWTRIE2_DATA_NULL_OFFSET+0x40,$/;"	e	enum:__anon6	file:
UNEWTRIE2_INDEX_1_LENGTH	utrie2_impl.h	/^    UNEWTRIE2_INDEX_1_LENGTH=0x110000>>UTRIE2_SHIFT_1$/;"	e	enum:__anon31
UNEWTRIE2_INDEX_2_NULL_OFFSET	utrie2_builder.c	/^    UNEWTRIE2_INDEX_2_NULL_OFFSET=UNEWTRIE2_INDEX_GAP_OFFSET+UNEWTRIE2_INDEX_GAP_LENGTH,$/;"	e	enum:__anon6	file:
UNEWTRIE2_INDEX_2_START_OFFSET	utrie2_builder.c	/^    UNEWTRIE2_INDEX_2_START_OFFSET=UNEWTRIE2_INDEX_2_NULL_OFFSET+UTRIE2_INDEX_2_BLOCK_LENGTH,$/;"	e	enum:__anon6	file:
UNEWTRIE2_INDEX_GAP_LENGTH	utrie2_impl.h	/^    UNEWTRIE2_INDEX_GAP_LENGTH=$/;"	e	enum:__anon31
UNEWTRIE2_INDEX_GAP_OFFSET	utrie2_impl.h	/^    UNEWTRIE2_INDEX_GAP_OFFSET=UTRIE2_INDEX_2_BMP_LENGTH,$/;"	e	enum:__anon31
UNEWTRIE2_INITIAL_DATA_LENGTH	utrie2_builder.c	100;"	d	file:
UNEWTRIE2_MAX_DATA_LENGTH	utrie2_impl.h	126;"	d
UNEWTRIE2_MAX_INDEX_2_LENGTH	utrie2_impl.h	/^    UNEWTRIE2_MAX_INDEX_2_LENGTH=$/;"	e	enum:__anon31
UNEWTRIE2_MEDIUM_DATA_LENGTH	utrie2_builder.c	103;"	d	file:
UNICODESET_H	unicode/uniset.h	12;"	d
UNICODESET_HIGH	uniset.cpp	47;"	d	file:
UNICODESET_LOW	uniset.cpp	50;"	d	file:
UNICODE_AMP_CODEPOINT	ucnv_err.c	37;"	d	file:
UNICODE_HASH_CODEPOINT	ucnv_err.c	38;"	d	file:
UNICODE_LEFT_CURLY_CODEPOINT	ucnv_err.c	41;"	d	file:
UNICODE_PERCENT_SIGN_CODEPOINT	ucnv_err.c	31;"	d	file:
UNICODE_PLUS_CODEPOINT	ucnv_err.c	40;"	d	file:
UNICODE_RIGHT_CURLY_CODEPOINT	ucnv_err.c	42;"	d	file:
UNICODE_RS_CODEPOINT	ucnv_err.c	34;"	d	file:
UNICODE_SEMICOLON_CODEPOINT	ucnv_err.c	39;"	d	file:
UNICODE_SPACE_CODEPOINT	ucnv_err.c	43;"	d	file:
UNICODE_STRING	unicode/unistr.h	100;"	d
UNICODE_STRING	unicode/unistr.h	94;"	d
UNICODE_STRING	unicode/unistr.h	96;"	d
UNICODE_STRING	unicode/unistr.h	98;"	d
UNICODE_STRING_SIMPLE	unicode/unistr.h	116;"	d
UNICODE_U_CODEPOINT	ucnv_err.c	32;"	d	file:
UNICODE_U_LOW_CODEPOINT	ucnv_err.c	35;"	d	file:
UNICODE_X_CODEPOINT	ucnv_err.c	33;"	d	file:
UNICODE_X_LOW_CODEPOINT	ucnv_err.c	36;"	d	file:
UNIFILT_H	unicode/unifilt.h	11;"	d
UNIFUNCT_H	unicode/unifunct.h	11;"	d
UNIMATCH_H	unicode/unimatch.h	9;"	d
UNISTR_H	unicode/unistr.h	22;"	d
UNORM2_COMPOSE	unicode/unorm2.h	/^    UNORM2_COMPOSE,$/;"	e	enum:__anon124
UNORM2_COMPOSE_CONTIGUOUS	unicode/unorm2.h	/^    UNORM2_COMPOSE_CONTIGUOUS$/;"	e	enum:__anon124
UNORM2_DECOMPOSE	unicode/unorm2.h	/^    UNORM2_DECOMPOSE,$/;"	e	enum:__anon124
UNORM2_FCD	unicode/unorm2.h	/^    UNORM2_FCD,$/;"	e	enum:__anon124
UNORM_COMPARE_NORM_OPTIONS_SHIFT	unicode/unorm.h	185;"	d
UNORM_DEFAULT	unicode/unorm.h	/^  UNORM_DEFAULT = UNORM_NFC, $/;"	e	enum:__anon112
UNORM_FCD	unicode/unorm.h	/^  UNORM_FCD = 6,$/;"	e	enum:__anon112
UNORM_H	unicode/unorm.h	16;"	d
UNORM_INPUT_IS_FCD	unicode/unorm.h	468;"	d
UNORM_ITER_SIZE	unorm_it.h	91;"	d
UNORM_MAYBE	unicode/unorm2.h	/^  UNORM_MAYBE$/;"	e	enum:UNormalizationCheckResult
UNORM_MODE_COUNT	unicode/unorm.h	/^  UNORM_MODE_COUNT$/;"	e	enum:__anon112
UNORM_NFC	unicode/unorm.h	/^  UNORM_NFC = 4,$/;"	e	enum:__anon112
UNORM_NFD	unicode/unorm.h	/^  UNORM_NFD = 2,$/;"	e	enum:__anon112
UNORM_NFKC	unicode/unorm.h	/^  UNORM_NFKC =5,$/;"	e	enum:__anon112
UNORM_NFKD	unicode/unorm.h	/^  UNORM_NFKD = 3,$/;"	e	enum:__anon112
UNORM_NO	unicode/unorm2.h	/^  UNORM_NO,$/;"	e	enum:UNormalizationCheckResult
UNORM_NONE	unicode/unorm.h	/^  UNORM_NONE = 1, $/;"	e	enum:__anon112
UNORM_NX_CJK_COMPAT	unormimp.h	/^    UNORM_NX_CJK_COMPAT=2$/;"	e	enum:__anon38
UNORM_NX_HANGUL	unormimp.h	/^    UNORM_NX_HANGUL=1,$/;"	e	enum:__anon38
UNORM_UNICODE_3_2	unicode/unorm.h	/^    UNORM_UNICODE_3_2=0x20$/;"	e	enum:__anon113
UNORM_YES	unicode/unorm2.h	/^  UNORM_YES,$/;"	e	enum:UNormalizationCheckResult
UNewTrie	rbbisetb.h	/^struct  UNewTrie;$/;"	x
UNewTrie	utrie.h	/^struct UNewTrie {$/;"	s
UNewTrie	utrie.h	/^typedef struct UNewTrie UNewTrie;$/;"	t	typeref:struct:UNewTrie
UNewTrie2	utrie2.h	/^struct UNewTrie2;$/;"	x
UNewTrie2	utrie2.h	/^typedef struct UNewTrie2 UNewTrie2;$/;"	t	typeref:struct:UNewTrie2
UNewTrie2	utrie2_impl.h	/^struct UNewTrie2 {$/;"	s
UNewTrie2::data	utrie2_impl.h	/^    uint32_t *data;$/;"	m	struct:UNewTrie2	access:public
UNewTrie2::dataCapacity	utrie2_impl.h	/^    int32_t index2Length, dataCapacity, dataLength;$/;"	m	struct:UNewTrie2	access:public
UNewTrie2::dataLength	utrie2_impl.h	/^    int32_t index2Length, dataCapacity, dataLength;$/;"	m	struct:UNewTrie2	access:public
UNewTrie2::dataNullOffset	utrie2_impl.h	/^    int32_t index2NullOffset, dataNullOffset;$/;"	m	struct:UNewTrie2	access:public
UNewTrie2::errorValue	utrie2_impl.h	/^    uint32_t initialValue, errorValue;$/;"	m	struct:UNewTrie2	access:public
UNewTrie2::firstFreeBlock	utrie2_impl.h	/^    int32_t firstFreeBlock;$/;"	m	struct:UNewTrie2	access:public
UNewTrie2::highStart	utrie2_impl.h	/^    UChar32 highStart;$/;"	m	struct:UNewTrie2	access:public
UNewTrie2::index1	utrie2_impl.h	/^    int32_t index1[UNEWTRIE2_INDEX_1_LENGTH];$/;"	m	struct:UNewTrie2	access:public
UNewTrie2::index2	utrie2_impl.h	/^    int32_t index2[UNEWTRIE2_MAX_INDEX_2_LENGTH];$/;"	m	struct:UNewTrie2	access:public
UNewTrie2::index2Length	utrie2_impl.h	/^    int32_t index2Length, dataCapacity, dataLength;$/;"	m	struct:UNewTrie2	access:public
UNewTrie2::index2NullOffset	utrie2_impl.h	/^    int32_t index2NullOffset, dataNullOffset;$/;"	m	struct:UNewTrie2	access:public
UNewTrie2::initialValue	utrie2_impl.h	/^    uint32_t initialValue, errorValue;$/;"	m	struct:UNewTrie2	access:public
UNewTrie2::isCompacted	utrie2_impl.h	/^    UBool isCompacted;$/;"	m	struct:UNewTrie2	access:public
UNewTrie2::map	utrie2_impl.h	/^    int32_t map[UNEWTRIE2_MAX_DATA_LENGTH>>UTRIE2_SHIFT_2];$/;"	m	struct:UNewTrie2	access:public
UNewTrie::data	utrie.h	/^    uint32_t *data;$/;"	m	struct:UNewTrie	access:public
UNewTrie::dataCapacity	utrie.h	/^    int32_t indexLength, dataCapacity, dataLength;$/;"	m	struct:UNewTrie	access:public
UNewTrie::dataLength	utrie.h	/^    int32_t indexLength, dataCapacity, dataLength;$/;"	m	struct:UNewTrie	access:public
UNewTrie::index	utrie.h	/^    int32_t index[UTRIE_MAX_INDEX_LENGTH];$/;"	m	struct:UNewTrie	access:public
UNewTrie::indexLength	utrie.h	/^    int32_t indexLength, dataCapacity, dataLength;$/;"	m	struct:UNewTrie	access:public
UNewTrie::isAllocated	utrie.h	/^    UBool isAllocated, isDataAllocated;$/;"	m	struct:UNewTrie	access:public
UNewTrie::isCompacted	utrie.h	/^    UBool isLatin1Linear, isCompacted;$/;"	m	struct:UNewTrie	access:public
UNewTrie::isDataAllocated	utrie.h	/^    UBool isAllocated, isDataAllocated;$/;"	m	struct:UNewTrie	access:public
UNewTrie::isLatin1Linear	utrie.h	/^    UBool isLatin1Linear, isCompacted;$/;"	m	struct:UNewTrie	access:public
UNewTrie::leadUnitValue	utrie.h	/^    uint32_t leadUnitValue;$/;"	m	struct:UNewTrie	access:public
UNewTrie::map	utrie.h	/^    int32_t map[UTRIE_MAX_BUILD_TIME_DATA_LENGTH>>UTRIE_SHIFT];$/;"	m	struct:UNewTrie	access:public
UNewTrieGetFoldedValue	utrie.h	/^UNewTrieGetFoldedValue(UNewTrie *trie, UChar32 start, int32_t offset);$/;"	t
UNormIterator	unorm_it.c	/^struct UNormIterator {$/;"	s	file:
UNormIterator	unorm_it.h	/^struct UNormIterator;$/;"	x
UNormIterator	unorm_it.h	/^typedef struct UNormIterator UNormIterator;$/;"	t	typeref:struct:UNormIterator
UNormIterator::api	unorm_it.c	/^    UCharIterator api;$/;"	m	struct:UNormIterator	file:	access:public
UNormIterator::capacity	unorm_it.c	/^    int32_t capacity;$/;"	m	struct:UNormIterator	file:	access:public
UNormIterator::chars	unorm_it.c	/^    UChar *chars;$/;"	m	struct:UNormIterator	file:	access:public
UNormIterator::charsBuffer	unorm_it.c	/^    UChar charsBuffer[INITIAL_CAPACITY];$/;"	m	struct:UNormIterator	file:	access:public
UNormIterator::hasNext	unorm_it.c	/^    UBool hasPrevious, hasNext, isStackAllocated;$/;"	m	struct:UNormIterator	file:	access:public
UNormIterator::hasPrevious	unorm_it.c	/^    UBool hasPrevious, hasNext, isStackAllocated;$/;"	m	struct:UNormIterator	file:	access:public
UNormIterator::isStackAllocated	unorm_it.c	/^    UBool hasPrevious, hasNext, isStackAllocated;$/;"	m	struct:UNormIterator	file:	access:public
UNormIterator::iter	unorm_it.c	/^    UCharIterator *iter;$/;"	m	struct:UNormIterator	file:	access:public
UNormIterator::mode	unorm_it.c	/^    UNormalizationMode mode;$/;"	m	struct:UNormIterator	file:	access:public
UNormIterator::state	unorm_it.c	/^    uint32_t state;$/;"	m	struct:UNormIterator	file:	access:public
UNormIterator::states	unorm_it.c	/^    uint32_t *states;$/;"	m	struct:UNormIterator	file:	access:public
UNormIterator::statesBuffer	unorm_it.c	/^    uint32_t statesBuffer[INITIAL_CAPACITY+1]; \/* one more than charsBuffer[]! *\/$/;"	m	struct:UNormIterator	file:	access:public
UNormalization2Mode	unicode/unorm2.h	/^} UNormalization2Mode;$/;"	t	typeref:enum:__anon124
UNormalizationCheckResult	unicode/unorm2.h	/^typedef enum UNormalizationCheckResult {$/;"	g
UNormalizationCheckResult	unicode/unorm2.h	/^} UNormalizationCheckResult;$/;"	t	typeref:enum:UNormalizationCheckResult
UNormalizationMode	unicode/unorm.h	/^} UNormalizationMode;$/;"	t	typeref:enum:__anon112
UNormalizer2	unicode/unorm2.h	/^struct UNormalizer2;$/;"	x
UNormalizer2	unicode/unorm2.h	/^typedef struct UNormalizer2 UNormalizer2;  \/**< C typedef for struct UNormalizer2. @stable ICU 4.4 *\/$/;"	t	typeref:struct:UNormalizer2
UNumericType	unicode/uchar.h	/^typedef enum UNumericType {$/;"	g
UNumericType	unicode/uchar.h	/^} UNumericType;$/;"	t	typeref:enum:UNumericType
UOBJECT_DEFINE_ABSTRACT_RTTI_IMPLEMENTATION	unicode/uobject.h	314;"	d
UOBJECT_DEFINE_NO_RTTI_IMPLEMENTATION	unicode/uobject.h	330;"	d
UOBJECT_DEFINE_RTTI_IMPLEMENTATION	unicode/uobject.h	297;"	d
UOBSLETE_H	unicode/uobslete.h	22;"	d
UObject	unicode/uobject.h	/^class U_COMMON_API UObject : public UMemory {$/;"	c	inherits:UMemory
UObject	unicode/urename.h	2195;"	d
UObject::getDynamicClassID	unicode/uobject.h	/^    virtual UClassID getDynamicClassID() const = 0;$/;"	p	class:UObject	access:public	signature:() const
UObject::~UObject	unicode/uobject.h	/^    virtual ~UObject();$/;"	p	class:UObject	access:public	signature:()
UObject::~UObject	uobject.cpp	/^UObject::~UObject() {}$/;"	f	class:UObject	signature:()
UObjectDeleter	uhash.h	/^typedef void U_CALLCONV UObjectDeleter(void* obj);$/;"	t
UPLUG_LEVEL_COUNT	unicode/icuplug.h	/^    UPLUG_LEVEL_COUNT         \/**< count of known reasons **\/$/;"	e	enum:__anon123
UPLUG_LEVEL_HIGH	unicode/icuplug.h	/^    UPLUG_LEVEL_HIGH    = 3,     \/**< The plugin can run at any time. **\/$/;"	e	enum:__anon123
UPLUG_LEVEL_INVALID	unicode/icuplug.h	/^    UPLUG_LEVEL_INVALID = 0,     \/**< The plugin is invalid, hasn't called uplug_setLevel, or can't load. **\/$/;"	e	enum:__anon123
UPLUG_LEVEL_LOW	unicode/icuplug.h	/^    UPLUG_LEVEL_LOW     = 2,     \/**< The plugin must be called before u_init completes **\/$/;"	e	enum:__anon123
UPLUG_LEVEL_UNKNOWN	unicode/icuplug.h	/^    UPLUG_LEVEL_UNKNOWN = 1,     \/**< The plugin is waiting to be installed. **\/$/;"	e	enum:__anon123
UPLUG_LIBRARY_INITIAL_COUNT	icuplug.c	55;"	d	file:
UPLUG_NAME_MAX	unicode/icuplug.h	136;"	d
UPLUG_PLUGIN_INITIAL_COUNT	icuplug.c	56;"	d	file:
UPLUG_REASON_COUNT	unicode/icuplug.h	/^    UPLUG_REASON_COUNT         \/**< count of known reasons **\/$/;"	e	enum:__anon122
UPLUG_REASON_LOAD	unicode/icuplug.h	/^    UPLUG_REASON_LOAD = 1,     \/**< The plugin is being loaded. **\/$/;"	e	enum:__anon122
UPLUG_REASON_QUERY	unicode/icuplug.h	/^    UPLUG_REASON_QUERY = 0,     \/**< The plugin is being queried for info. **\/$/;"	e	enum:__anon122
UPLUG_REASON_UNLOAD	unicode/icuplug.h	/^    UPLUG_REASON_UNLOAD = 2,   \/**< The plugin is being unloaded. **\/$/;"	e	enum:__anon122
UPLUG_TOKEN	unicode/icuplug.h	130;"	d
UPLUG_TRACE	icuplug.c	25;"	d	file:
UPPER_N	uniset.cpp	43;"	d	file:
UPPER_N	uniset_props.cpp	71;"	d	file:
UPPER_P	uniset.cpp	41;"	d	file:
UPPER_P	uniset_props.cpp	69;"	d	file:
UPPER_U	uniset.cpp	37;"	d	file:
UPPER_U	uniset_props.cpp	65;"	d	file:
UPPER_U	util.cpp	/^static const UChar UPPER_U    = 0x0055; \/*U*\/$/;"	v	file:
UPROPS_ADDITIONAL_TRIE_INDEX	uprops.h	/^    UPROPS_ADDITIONAL_TRIE_INDEX,$/;"	e	enum:__anon86
UPROPS_ADDITIONAL_VECTORS_COLUMNS_INDEX	uprops.h	/^    UPROPS_ADDITIONAL_VECTORS_COLUMNS_INDEX,$/;"	e	enum:__anon86
UPROPS_ADDITIONAL_VECTORS_INDEX	uprops.h	/^    UPROPS_ADDITIONAL_VECTORS_INDEX,$/;"	e	enum:__anon86
UPROPS_AGE_MASK	uprops.h	104;"	d
UPROPS_AGE_SHIFT	uprops.h	105;"	d
UPROPS_ALPHABETIC	uprops.h	/^    UPROPS_ALPHABETIC,$/;"	e	enum:__anon89
UPROPS_ASCII_HEX_DIGIT	uprops.h	/^    UPROPS_ASCII_HEX_DIGIT,$/;"	e	enum:__anon89
UPROPS_BINARY_1_TOP	uprops.h	/^    UPROPS_BINARY_1_TOP                         \/* ==32 - full! *\/$/;"	e	enum:__anon89
UPROPS_BLOCK_MASK	uprops.h	114;"	d
UPROPS_BLOCK_SHIFT	uprops.h	115;"	d
UPROPS_DASH	uprops.h	/^    UPROPS_DASH,$/;"	e	enum:__anon89
UPROPS_DATA_TOP_INDEX	uprops.h	/^    UPROPS_DATA_TOP_INDEX,$/;"	e	enum:__anon86
UPROPS_DEFAULT_IGNORABLE_CODE_POINT	uprops.h	/^    UPROPS_DEFAULT_IGNORABLE_CODE_POINT,$/;"	e	enum:__anon89
UPROPS_DEPRECATED	uprops.h	/^    UPROPS_DEPRECATED,$/;"	e	enum:__anon89
UPROPS_DIACRITIC	uprops.h	/^    UPROPS_DIACRITIC,$/;"	e	enum:__anon89
UPROPS_DT_MASK	uprops.h	193;"	d
UPROPS_EA_MASK	uprops.h	111;"	d
UPROPS_EA_SHIFT	uprops.h	112;"	d
UPROPS_EXCEPTIONS_INDEX	uprops.h	/^    UPROPS_EXCEPTIONS_INDEX,$/;"	e	enum:__anon86
UPROPS_EXCEPTIONS_TOP_INDEX	uprops.h	/^    UPROPS_EXCEPTIONS_TOP_INDEX,$/;"	e	enum:__anon86
UPROPS_EXTENDER	uprops.h	/^    UPROPS_EXTENDER,$/;"	e	enum:__anon89
UPROPS_GCB_MASK	uprops.h	190;"	d
UPROPS_GCB_SHIFT	uprops.h	191;"	d
UPROPS_GRAPHEME_BASE	uprops.h	/^    UPROPS_GRAPHEME_BASE,$/;"	e	enum:__anon89
UPROPS_GRAPHEME_EXTEND	uprops.h	/^    UPROPS_GRAPHEME_EXTEND,$/;"	e	enum:__anon89
UPROPS_GRAPHEME_LINK	uprops.h	/^    UPROPS_GRAPHEME_LINK,$/;"	e	enum:__anon89
UPROPS_HEX_DIGIT	uprops.h	/^    UPROPS_HEX_DIGIT,$/;"	e	enum:__anon89
UPROPS_HYPHEN	uprops.h	/^    UPROPS_HYPHEN,$/;"	e	enum:__anon89
UPROPS_IDEOGRAPHIC	uprops.h	/^    UPROPS_IDEOGRAPHIC,$/;"	e	enum:__anon89
UPROPS_IDS_BINARY_OPERATOR	uprops.h	/^    UPROPS_IDS_BINARY_OPERATOR,$/;"	e	enum:__anon89
UPROPS_IDS_TRINARY_OPERATOR	uprops.h	/^    UPROPS_IDS_TRINARY_OPERATOR,$/;"	e	enum:__anon89
UPROPS_ID_CONTINUE	uprops.h	/^    UPROPS_ID_CONTINUE,$/;"	e	enum:__anon89
UPROPS_ID_START	uprops.h	/^    UPROPS_ID_START,                            \/* ICU 2.6, uprops format version 3.2 *\/$/;"	e	enum:__anon89
UPROPS_INDEX_COUNT	uprops.h	/^    UPROPS_INDEX_COUNT=16$/;"	e	enum:__anon86
UPROPS_LB_MASK	uprops.h	181;"	d
UPROPS_LB_SHIFT	uprops.h	182;"	d
UPROPS_LOGICAL_ORDER_EXCEPTION	uprops.h	/^    UPROPS_LOGICAL_ORDER_EXCEPTION,$/;"	e	enum:__anon89
UPROPS_MATH	uprops.h	/^    UPROPS_MATH,$/;"	e	enum:__anon89
UPROPS_MAX_VALUES_2_INDEX	uprops.h	/^    UPROPS_MAX_VALUES_2_INDEX,$/;"	e	enum:__anon86
UPROPS_MAX_VALUES_INDEX	uprops.h	/^    UPROPS_MAX_VALUES_INDEX=10,$/;"	e	enum:__anon86
UPROPS_NONCHARACTER_CODE_POINT	uprops.h	/^    UPROPS_NONCHARACTER_CODE_POINT,$/;"	e	enum:__anon89
UPROPS_NTV_DECIMAL_START	uprops.h	/^    UPROPS_NTV_DECIMAL_START=1,$/;"	e	enum:__anon88
UPROPS_NTV_DIGIT_START	uprops.h	/^    UPROPS_NTV_DIGIT_START=11,$/;"	e	enum:__anon88
UPROPS_NTV_FRACTION_START	uprops.h	/^    UPROPS_NTV_FRACTION_START=0xb0,$/;"	e	enum:__anon88
UPROPS_NTV_GET_TYPE	uprops.h	79;"	d
UPROPS_NTV_LARGE_START	uprops.h	/^    UPROPS_NTV_LARGE_START=0x1e0,$/;"	e	enum:__anon88
UPROPS_NTV_MAX_SMALL_INT	uprops.h	/^    UPROPS_NTV_MAX_SMALL_INT=UPROPS_NTV_FRACTION_START-UPROPS_NTV_NUMERIC_START-1$/;"	e	enum:__anon88
UPROPS_NTV_NONE	uprops.h	/^    UPROPS_NTV_NONE=0,$/;"	e	enum:__anon88
UPROPS_NTV_NUMERIC_START	uprops.h	/^    UPROPS_NTV_NUMERIC_START=21,$/;"	e	enum:__anon88
UPROPS_NTV_RESERVED_START	uprops.h	/^    UPROPS_NTV_RESERVED_START=0x300,$/;"	e	enum:__anon88
UPROPS_NUMERIC_TYPE_VALUE_SHIFT	uprops.h	/^    UPROPS_NUMERIC_TYPE_VALUE_SHIFT=6                       \/*  6 (10 bits) *\/$/;"	e	enum:__anon87
UPROPS_PATTERN_SYNTAX	uprops.h	/^    UPROPS_PATTERN_SYNTAX,                      \/* new in ICU 3.4 and Unicode 4.1 *\/$/;"	e	enum:__anon89
UPROPS_PATTERN_WHITE_SPACE	uprops.h	/^    UPROPS_PATTERN_WHITE_SPACE,$/;"	e	enum:__anon89
UPROPS_PROPS32_INDEX	uprops.h	/^    UPROPS_PROPS32_INDEX,$/;"	e	enum:__anon86
UPROPS_QUOTATION_MARK	uprops.h	/^    UPROPS_QUOTATION_MARK,$/;"	e	enum:__anon89
UPROPS_RADICAL	uprops.h	/^    UPROPS_RADICAL,$/;"	e	enum:__anon89
UPROPS_RESERVED	uprops.h	/^    UPROPS_RESERVED,                            \/* reserved & unused *\/$/;"	e	enum:__anon89
UPROPS_RESERVED_INDEX_7	uprops.h	/^    UPROPS_RESERVED_INDEX_7,$/;"	e	enum:__anon86
UPROPS_RESERVED_INDEX_8	uprops.h	/^    UPROPS_RESERVED_INDEX_8,$/;"	e	enum:__anon86
UPROPS_SB_MASK	uprops.h	184;"	d
UPROPS_SB_SHIFT	uprops.h	185;"	d
UPROPS_SCRIPT_EXTENSIONS_INDEX	uprops.h	/^    UPROPS_SCRIPT_EXTENSIONS_INDEX,$/;"	e	enum:__anon86
UPROPS_SCRIPT_MASK	uprops.h	117;"	d
UPROPS_SCRIPT_X_MASK	uprops.h	108;"	d
UPROPS_SCRIPT_X_SHIFT	uprops.h	109;"	d
UPROPS_SCRIPT_X_WITH_COMMON	uprops.h	120;"	d
UPROPS_SCRIPT_X_WITH_INHERITED	uprops.h	121;"	d
UPROPS_SCRIPT_X_WITH_OTHER	uprops.h	122;"	d
UPROPS_SRC_BIDI	uprops.h	/^    UPROPS_SRC_BIDI,$/;"	e	enum:UPropertySource
UPROPS_SRC_CASE	uprops.h	/^    UPROPS_SRC_CASE,$/;"	e	enum:UPropertySource
UPROPS_SRC_CASE_AND_NORM	uprops.h	/^    UPROPS_SRC_CASE_AND_NORM,$/;"	e	enum:UPropertySource
UPROPS_SRC_CHAR	uprops.h	/^    UPROPS_SRC_CHAR,$/;"	e	enum:UPropertySource
UPROPS_SRC_CHAR_AND_PROPSVEC	uprops.h	/^    UPROPS_SRC_CHAR_AND_PROPSVEC,$/;"	e	enum:UPropertySource
UPROPS_SRC_COUNT	uprops.h	/^    UPROPS_SRC_COUNT$/;"	e	enum:UPropertySource
UPROPS_SRC_NAMES	uprops.h	/^    UPROPS_SRC_NAMES,$/;"	e	enum:UPropertySource
UPROPS_SRC_NFC	uprops.h	/^    UPROPS_SRC_NFC,$/;"	e	enum:UPropertySource
UPROPS_SRC_NFC_CANON_ITER	uprops.h	/^    UPROPS_SRC_NFC_CANON_ITER,$/;"	e	enum:UPropertySource
UPROPS_SRC_NFKC	uprops.h	/^    UPROPS_SRC_NFKC,$/;"	e	enum:UPropertySource
UPROPS_SRC_NFKC_CF	uprops.h	/^    UPROPS_SRC_NFKC_CF,$/;"	e	enum:UPropertySource
UPROPS_SRC_NONE	uprops.h	/^    UPROPS_SRC_NONE,$/;"	e	enum:UPropertySource
UPROPS_SRC_PROPSVEC	uprops.h	/^    UPROPS_SRC_PROPSVEC,$/;"	e	enum:UPropertySource
UPROPS_S_TERM	uprops.h	/^    UPROPS_S_TERM,                              \/* new in ICU 3.0 and Unicode 4.0.1 *\/$/;"	e	enum:__anon89
UPROPS_TERMINAL_PUNCTUATION	uprops.h	/^    UPROPS_TERMINAL_PUNCTUATION,$/;"	e	enum:__anon89
UPROPS_UNIFIED_IDEOGRAPH	uprops.h	/^    UPROPS_UNIFIED_IDEOGRAPH,$/;"	e	enum:__anon89
UPROPS_VARIATION_SELECTOR	uprops.h	/^    UPROPS_VARIATION_SELECTOR,$/;"	e	enum:__anon89
UPROPS_VECTOR_WORDS	uprops.h	86;"	d
UPROPS_WB_MASK	uprops.h	187;"	d
UPROPS_WB_SHIFT	uprops.h	188;"	d
UPROPS_WHITE_SPACE	uprops.h	/^    UPROPS_WHITE_SPACE,$/;"	e	enum:__anon89
UPROPS_XID_CONTINUE	uprops.h	/^    UPROPS_XID_CONTINUE,$/;"	e	enum:__anon89
UPROPS_XID_START	uprops.h	/^    UPROPS_XID_START,$/;"	e	enum:__anon89
UPRV_REMAP_INLINE	umutex.c	34;"	d	file:
UPRV_REMAP_INLINE	umutex.c	41;"	d	file:
UPVEC_ERROR_VALUE_CP	propsvec.h	59;"	d
UPVEC_FIRST_SPECIAL_CP	propsvec.h	57;"	d
UPVEC_INITIAL_ROWS	propsvec.c	36;"	d	file:
UPVEC_INITIAL_VALUE_CP	propsvec.h	58;"	d
UPVEC_MAX_CP	propsvec.h	60;"	d
UPVEC_MAX_ROWS	propsvec.c	38;"	d	file:
UPVEC_MEDIUM_ROWS	propsvec.c	37;"	d	file:
UPVEC_START_REAL_VALUES_CP	propsvec.h	67;"	d
UPVecCompactHandler	propsvec.h	/^UPVecCompactHandler(void *context,$/;"	t
UPVecToUTrie2Context	propsvec.h	/^struct UPVecToUTrie2Context {$/;"	s
UPVecToUTrie2Context	propsvec.h	/^typedef struct UPVecToUTrie2Context UPVecToUTrie2Context;$/;"	t	typeref:struct:UPVecToUTrie2Context
UPVecToUTrie2Context::errorValue	propsvec.h	/^    int32_t errorValue;$/;"	m	struct:UPVecToUTrie2Context	access:public
UPVecToUTrie2Context::initialValue	propsvec.h	/^    int32_t initialValue;$/;"	m	struct:UPVecToUTrie2Context	access:public
UPVecToUTrie2Context::maxValue	propsvec.h	/^    int32_t maxValue;$/;"	m	struct:UPVecToUTrie2Context	access:public
UPVecToUTrie2Context::trie	propsvec.h	/^    UTrie2 *trie;$/;"	m	struct:UPVecToUTrie2Context	access:public
UParseError	unicode/parseerr.h	/^typedef struct UParseError {$/;"	s
UParseError	unicode/parseerr.h	/^} UParseError;$/;"	t	typeref:struct:UParseError
UParseError::line	unicode/parseerr.h	/^    int32_t        line;$/;"	m	struct:UParseError	access:public
UParseError::offset	unicode/parseerr.h	/^    int32_t        offset;$/;"	m	struct:UParseError	access:public
UParseError::postContext	unicode/parseerr.h	/^    UChar          postContext[U_PARSE_CONTEXT_LEN];$/;"	m	struct:UParseError	access:public
UParseError::preContext	unicode/parseerr.h	/^    UChar          preContext[U_PARSE_CONTEXT_LEN];$/;"	m	struct:UParseError	access:public
UPlugData	icuplug.c	/^struct UPlugData {$/;"	s	file:
UPlugData	unicode/icuplug.h	/^struct UPlugData;$/;"	x
UPlugData	unicode/icuplug.h	/^typedef struct UPlugData UPlugData;$/;"	t	typeref:struct:UPlugData
UPlugData::awaitingLoad	icuplug.c	/^  UBool   awaitingLoad; \/**< TRUE if the plugin is awaiting a load call *\/$/;"	m	struct:UPlugData	file:	access:public
UPlugData::config	icuplug.c	/^  char config[UPLUG_NAME_MAX];     \/**< configuration data *\/$/;"	m	struct:UPlugData	file:	access:public
UPlugData::context	icuplug.c	/^  void *context;          \/**< user context data *\/$/;"	m	struct:UPlugData	file:	access:public
UPlugData::dontUnload	icuplug.c	/^  UBool   dontUnload; \/**< TRUE if plugin must stay resident (leak plugin and lib) *\/$/;"	m	struct:UPlugData	file:	access:public
UPlugData::entrypoint	icuplug.c	/^  UPlugEntrypoint  *entrypoint; \/**< plugin entrypoint *\/$/;"	m	struct:UPlugData	file:	access:public
UPlugData::level	icuplug.c	/^  UPlugLevel  level; \/**< level of plugin *\/$/;"	m	struct:UPlugData	file:	access:public
UPlugData::lib	icuplug.c	/^  void *lib;              \/**< plugin library, or NULL *\/$/;"	m	struct:UPlugData	file:	access:public
UPlugData::libName	icuplug.c	/^  char libName[UPLUG_NAME_MAX];   \/**< library name *\/$/;"	m	struct:UPlugData	file:	access:public
UPlugData::name	icuplug.c	/^  char name[UPLUG_NAME_MAX];   \/**< name of plugin *\/$/;"	m	struct:UPlugData	file:	access:public
UPlugData::pluginStatus	icuplug.c	/^  UErrorCode pluginStatus; \/**< status code of plugin *\/$/;"	m	struct:UPlugData	file:	access:public
UPlugData::structSize	icuplug.c	/^  uint32_t structSize;    \/**< initialized to the size of this structure *\/$/;"	m	struct:UPlugData	file:	access:public
UPlugData::sym	icuplug.c	/^  char sym[UPLUG_NAME_MAX];        \/**< plugin symbol, or NULL *\/$/;"	m	struct:UPlugData	file:	access:public
UPlugData::token	icuplug.c	/^  uint32_t token;         \/**< must be U_PLUG_TOKEN *\/$/;"	m	struct:UPlugData	file:	access:public
UPlugEntrypoint	unicode/icuplug.h	/^typedef UPlugTokenReturn (U_EXPORT2 UPlugEntrypoint) ($/;"	t
UPlugLevel	unicode/icuplug.h	/^} UPlugLevel;$/;"	t	typeref:enum:__anon123
UPlugLibrary	icuplug.c	/^struct UPlugLibrary;$/;"	x	file:
UPlugLibrary	icuplug.c	/^typedef struct UPlugLibrary {$/;"	s	file:
UPlugLibrary	icuplug.c	/^} UPlugLibrary;$/;"	t	typeref:struct:UPlugLibrary	file:
UPlugLibrary::lib	icuplug.c	/^  void *lib;                           \/**< library ptr *\/$/;"	m	struct:UPlugLibrary	file:	access:public
UPlugLibrary::name	icuplug.c	/^  char name[UPLUG_NAME_MAX]; \/**< library name *\/$/;"	m	struct:UPlugLibrary	file:	access:public
UPlugLibrary::ref	icuplug.c	/^  uint32_t ref;                        \/**< reference count *\/$/;"	m	struct:UPlugLibrary	file:	access:public
UPlugReason	unicode/icuplug.h	/^} UPlugReason;$/;"	t	typeref:enum:__anon122
UPlugTokenReturn	unicode/icuplug.h	/^typedef uint32_t UPlugTokenReturn;$/;"	t
UProperty	unicode/uchar.h	/^typedef enum UProperty {$/;"	g
UProperty	unicode/uchar.h	/^} UProperty;$/;"	t	typeref:enum:UProperty
UPropertyNameChoice	unicode/uchar.h	/^typedef enum UPropertyNameChoice {$/;"	g
UPropertyNameChoice	unicode/uchar.h	/^} UPropertyNameChoice;$/;"	t	typeref:enum:UPropertyNameChoice
UPropertySource	uprops.h	/^enum UPropertySource {$/;"	g
UPropertySource	uprops.h	/^typedef enum UPropertySource UPropertySource;$/;"	t	typeref:enum:UPropertySource
UPropsVectors	propsvec.c	/^struct UPropsVectors {$/;"	s	file:
UPropsVectors	propsvec.h	/^struct UPropsVectors;$/;"	x
UPropsVectors	propsvec.h	/^typedef struct UPropsVectors UPropsVectors;$/;"	t	typeref:struct:UPropsVectors
UPropsVectors::columns	propsvec.c	/^    int32_t columns;  \/* number of columns, plus two for start & limit values *\/$/;"	m	struct:UPropsVectors	file:	access:public
UPropsVectors::isCompacted	propsvec.c	/^    UBool isCompacted;$/;"	m	struct:UPropsVectors	file:	access:public
UPropsVectors::maxRows	propsvec.c	/^    int32_t maxRows;$/;"	m	struct:UPropsVectors	file:	access:public
UPropsVectors::prevRow	propsvec.c	/^    int32_t prevRow;  \/* search optimization: remember last row seen *\/$/;"	m	struct:UPropsVectors	file:	access:public
UPropsVectors::rows	propsvec.c	/^    int32_t rows;$/;"	m	struct:UPropsVectors	file:	access:public
UPropsVectors::v	propsvec.c	/^    uint32_t *v;$/;"	m	struct:UPropsVectors	file:	access:public
UQU	ucnvscsu.c	/^    UQU=0xF0, \/* Quote a single Unicode character *\/$/;"	e	enum:__anon152	file:
URD	ucnvisci.c	/^    URD = 0x73,$/;"	e	enum:__anon14	file:
URENAME_H	unicode/urename.h	22;"	d
URESDATA_ITEM_NOT_FOUND	uresdata.c	51;"	d	file:
URESIMP_H	uresimp.h	9;"	d
URES_ALIAS	unicode/ures.h	/^    URES_ALIAS=3,$/;"	e	enum:__anon119
URES_ARRAY	unicode/ures.h	/^    URES_ARRAY=8,$/;"	e	enum:__anon119
URES_ARRAY16	uresdata.h	/^    URES_ARRAY16=9$/;"	e	enum:__anon10
URES_ATT_IS_POOL_BUNDLE	uresdata.h	119;"	d
URES_ATT_NO_FALLBACK	uresdata.h	111;"	d
URES_ATT_USES_POOL_BUNDLE	uresdata.h	120;"	d
URES_BINARY	unicode/ures.h	/^    URES_BINARY=1,$/;"	e	enum:__anon119
URES_H	unicode/ures.h	24;"	d
URES_INDEX_16BIT_TOP	uresdata.h	/^    URES_INDEX_16BIT_TOP,       \/* [6] top of the 16-bit units (UTF-16 string v2 UChars, URES_TABLE16, URES_ARRAY16),$/;"	e	enum:__anon11
URES_INDEX_ATTRIBUTES	uresdata.h	/^    URES_INDEX_ATTRIBUTES,      \/* [5] attributes bit set, see URES_ATT_* (new in formatVersion 1.2) *\/$/;"	e	enum:__anon11
URES_INDEX_BUNDLE_TOP	uresdata.h	/^    URES_INDEX_BUNDLE_TOP,      \/* [3] contains the top of the bundle, *\/$/;"	e	enum:__anon11
URES_INDEX_KEYS_TOP	uresdata.h	/^    URES_INDEX_KEYS_TOP,        \/* [1] contains the top of the key strings, *\/$/;"	e	enum:__anon11
URES_INDEX_LENGTH	uresdata.h	/^    URES_INDEX_LENGTH,          \/* [0] contains URES_INDEX_TOP==the length of indexes[];$/;"	e	enum:__anon11
URES_INDEX_MAX_TABLE_LENGTH	uresdata.h	/^    URES_INDEX_MAX_TABLE_LENGTH,\/* [4] max. length of any table *\/$/;"	e	enum:__anon11
URES_INDEX_POOL_CHECKSUM	uresdata.h	/^    URES_INDEX_POOL_CHECKSUM,   \/* [7] checksum of the pool bundle (new in formatVersion 2.0, ICU 4.4) *\/$/;"	e	enum:__anon11
URES_INDEX_RESOURCES_TOP	uresdata.h	/^    URES_INDEX_RESOURCES_TOP,   \/* [2] contains the top of all resources *\/$/;"	e	enum:__anon11
URES_INDEX_TOP	uresdata.h	/^    URES_INDEX_TOP$/;"	e	enum:__anon11
URES_INT	unicode/ures.h	/^    URES_INT=7,$/;"	e	enum:__anon119
URES_INTERNAL_NONE	uresdata.h	/^    URES_INTERNAL_NONE=-1,$/;"	e	enum:__anon10
URES_INT_VECTOR	unicode/ures.h	/^    URES_INT_VECTOR = 14,$/;"	e	enum:__anon119
URES_IS_ARRAY	uresdata.h	72;"	d
URES_IS_CONTAINER	uresdata.h	74;"	d
URES_IS_TABLE	uresdata.h	73;"	d
URES_LIMIT	unicode/ures.h	/^    URES_LIMIT = 16$/;"	e	enum:__anon119
URES_MAKE_EMPTY_RESOURCE	uresdata.h	77;"	d
URES_MAKE_RESOURCE	uresdata.h	76;"	d
URES_MAX_ALIAS_LEVEL	uresimp.h	30;"	d
URES_MAX_BUFFER_SIZE	uresimp.h	31;"	d
URES_NONE	unicode/ures.h	/^    URES_NONE=-1,$/;"	e	enum:__anon119
URES_STRING	unicode/ures.h	/^    URES_STRING=0,$/;"	e	enum:__anon119
URES_STRING_V2	uresdata.h	/^    URES_STRING_V2=6,$/;"	e	enum:__anon10
URES_TABLE	unicode/ures.h	/^    URES_TABLE=2,$/;"	e	enum:__anon119
URES_TABLE16	uresdata.h	/^    URES_TABLE16=5,$/;"	e	enum:__anon10
URES_TABLE32	uresdata.h	/^    URES_TABLE32=4,$/;"	e	enum:__anon10
URegistryKey	unicode/umisc.h	/^typedef const void* URegistryKey;$/;"	t
UReplaceable	unicode/urep.h	/^typedef void* UReplaceable;$/;"	t
UReplaceableCallbacks	unicode/urep.h	/^typedef struct UReplaceableCallbacks {$/;"	s
UReplaceableCallbacks	unicode/urep.h	/^} UReplaceableCallbacks;$/;"	t	typeref:struct:UReplaceableCallbacks
UReplaceableCallbacks::char32At	unicode/urep.h	/^    UChar32 (*char32At)(const UReplaceable* rep,$/;"	m	struct:UReplaceableCallbacks	access:public
UReplaceableCallbacks::charAt	unicode/urep.h	/^    UChar   (*charAt)(const UReplaceable* rep,$/;"	m	struct:UReplaceableCallbacks	access:public
UReplaceableCallbacks::copy	unicode/urep.h	/^    void    (*copy)(UReplaceable* rep,$/;"	m	struct:UReplaceableCallbacks	access:public
UReplaceableCallbacks::extract	unicode/urep.h	/^    void    (*extract)(UReplaceable* rep,$/;"	m	struct:UReplaceableCallbacks	access:public
UReplaceableCallbacks::length	unicode/urep.h	/^    int32_t (*length)(const UReplaceable* rep);$/;"	m	struct:UReplaceableCallbacks	access:public
UReplaceableCallbacks::replace	unicode/urep.h	/^    void    (*replace)(UReplaceable* rep,$/;"	m	struct:UReplaceableCallbacks	access:public
UResInternalType	uresdata.h	/^} UResInternalType;$/;"	t	typeref:enum:__anon10
UResType	unicode/ures.h	/^} UResType;$/;"	t	typeref:enum:__anon119
UResourceBundle	unicode/ures.h	/^struct UResourceBundle;$/;"	x
UResourceBundle	unicode/ures.h	/^typedef struct UResourceBundle UResourceBundle;$/;"	t	typeref:struct:UResourceBundle
UResourceBundle	uresimp.h	/^struct UResourceBundle {$/;"	s
UResourceBundle::fData	uresimp.h	/^    UResourceDataEntry *fData; \/*for low-level access*\/$/;"	m	struct:UResourceBundle	access:public
UResourceBundle::fHasFallback	uresimp.h	/^    UBool fHasFallback;$/;"	m	struct:UResourceBundle	access:public
UResourceBundle::fIndex	uresimp.h	/^    int32_t fIndex;$/;"	m	struct:UResourceBundle	access:public
UResourceBundle::fIsTopLevel	uresimp.h	/^    UBool fIsTopLevel;$/;"	m	struct:UResourceBundle	access:public
UResourceBundle::fKey	uresimp.h	/^    const char *fKey; \/*tag*\/$/;"	m	struct:UResourceBundle	access:public
UResourceBundle::fMagic1	uresimp.h	/^    uint32_t fMagic1;   \/* For determining if it's a stack object *\/$/;"	m	struct:UResourceBundle	access:public
UResourceBundle::fMagic2	uresimp.h	/^    uint32_t fMagic2;   \/* For determining if it's a stack object *\/$/;"	m	struct:UResourceBundle	access:public
UResourceBundle::fRes	uresimp.h	/^    Resource fRes;$/;"	m	struct:UResourceBundle	access:public
UResourceBundle::fResBuf	uresimp.h	/^    char fResBuf[RES_BUFSIZE];$/;"	m	struct:UResourceBundle	access:public
UResourceBundle::fResData	uresimp.h	/^    ResourceData fResData;$/;"	m	struct:UResourceBundle	access:public
UResourceBundle::fResPath	uresimp.h	/^    char *fResPath; \/* full path to the resource: "zh_TW\/CollationElements\/Sequence" *\/$/;"	m	struct:UResourceBundle	access:public
UResourceBundle::fResPathLen	uresimp.h	/^    int32_t fResPathLen;$/;"	m	struct:UResourceBundle	access:public
UResourceBundle::fSize	uresimp.h	/^    int32_t fSize;$/;"	m	struct:UResourceBundle	access:public
UResourceBundle::fTopLevelData	uresimp.h	/^    UResourceDataEntry *fTopLevelData; \/* for getting the valid locale *\/$/;"	m	struct:UResourceBundle	access:public
UResourceBundle::fVersion	uresimp.h	/^    char *fVersion;$/;"	m	struct:UResourceBundle	access:public
UResourceDataEntry	uresimp.h	/^struct UResourceDataEntry {$/;"	s
UResourceDataEntry	uresimp.h	/^struct UResourceDataEntry;$/;"	x
UResourceDataEntry	uresimp.h	/^typedef struct UResourceDataEntry UResourceDataEntry;$/;"	t	typeref:struct:UResourceDataEntry
UResourceDataEntry::fAlias	uresimp.h	/^    UResourceDataEntry *fAlias;$/;"	m	struct:UResourceDataEntry	access:public
UResourceDataEntry::fBogus	uresimp.h	/^    UErrorCode fBogus;$/;"	m	struct:UResourceDataEntry	access:public
UResourceDataEntry::fCountExisting	uresimp.h	/^    uint32_t fCountExisting; \/* how much is this resource used *\/$/;"	m	struct:UResourceDataEntry	access:public
UResourceDataEntry::fData	uresimp.h	/^    ResourceData fData; \/* data for low level access *\/$/;"	m	struct:UResourceDataEntry	access:public
UResourceDataEntry::fName	uresimp.h	/^    char *fName; \/* name of the locale for bundle - still to decide whether it is original or fallback *\/$/;"	m	struct:UResourceDataEntry	access:public
UResourceDataEntry::fNameBuffer	uresimp.h	/^    char fNameBuffer[3]; \/* A small buffer of free space for fName. The free space is due to struct padding. *\/$/;"	m	struct:UResourceDataEntry	access:public
UResourceDataEntry::fParent	uresimp.h	/^    UResourceDataEntry *fParent; \/*next resource in fallback chain*\/$/;"	m	struct:UResourceDataEntry	access:public
UResourceDataEntry::fPath	uresimp.h	/^    char *fPath; \/* path to bundle - used for distinguishing between resources with the same name *\/$/;"	m	struct:UResourceDataEntry	access:public
UResourceDataEntry::fPool	uresimp.h	/^    UResourceDataEntry *fPool;$/;"	m	struct:UResourceDataEntry	access:public
USCRIPT_ARABIC	unicode/uscript.h	/^      USCRIPT_ARABIC       =  2,  \/* Arab *\/$/;"	e	enum:UScriptCode
USCRIPT_ARMENIAN	unicode/uscript.h	/^      USCRIPT_ARMENIAN     =  3,  \/* Armn *\/$/;"	e	enum:UScriptCode
USCRIPT_AVESTAN	unicode/uscript.h	/^      USCRIPT_AVESTAN                       = 117,\/* Avst *\/$/;"	e	enum:UScriptCode
USCRIPT_BALINESE	unicode/uscript.h	/^      USCRIPT_BALINESE                      = 62, \/* Bali *\/$/;"	e	enum:UScriptCode
USCRIPT_BAMUM	unicode/uscript.h	/^      USCRIPT_BAMUM                         = 130,\/* Bamu *\/$/;"	e	enum:UScriptCode
USCRIPT_BASSA_VAH	unicode/uscript.h	/^      USCRIPT_BASSA_VAH                     = 134,\/* Bass *\/$/;"	e	enum:UScriptCode
USCRIPT_BATAK	unicode/uscript.h	/^      USCRIPT_BATAK                         = 63, \/* Batk *\/$/;"	e	enum:UScriptCode
USCRIPT_BENGALI	unicode/uscript.h	/^      USCRIPT_BENGALI      =  4,  \/* Beng *\/$/;"	e	enum:UScriptCode
USCRIPT_BLISSYMBOLS	unicode/uscript.h	/^      USCRIPT_BLISSYMBOLS                   = 64, \/* Blis *\/$/;"	e	enum:UScriptCode
USCRIPT_BOOK_PAHLAVI	unicode/uscript.h	/^      USCRIPT_BOOK_PAHLAVI                  = 124,\/* Phlv *\/$/;"	e	enum:UScriptCode
USCRIPT_BOPOMOFO	unicode/uscript.h	/^      USCRIPT_BOPOMOFO     =  5,  \/* Bopo *\/$/;"	e	enum:UScriptCode
USCRIPT_BRAHMI	unicode/uscript.h	/^      USCRIPT_BRAHMI                        = 65, \/* Brah *\/$/;"	e	enum:UScriptCode
USCRIPT_BRAILLE	unicode/uscript.h	/^      USCRIPT_BRAILLE      = 46,  \/* Brai *\/$/;"	e	enum:UScriptCode
USCRIPT_BUGINESE	unicode/uscript.h	/^      USCRIPT_BUGINESE      = 55, \/* Bugi *\/$/;"	e	enum:UScriptCode
USCRIPT_BUHID	unicode/uscript.h	/^      USCRIPT_BUHID        = 44,  \/* Buhd *\/$/;"	e	enum:UScriptCode
USCRIPT_CANADIAN_ABORIGINAL	unicode/uscript.h	/^      USCRIPT_CANADIAN_ABORIGINAL = 40,  \/* Cans *\/$/;"	e	enum:UScriptCode
USCRIPT_CARIAN	unicode/uscript.h	/^      USCRIPT_CARIAN                        = 104,\/* Cari *\/$/;"	e	enum:UScriptCode
USCRIPT_CHAKMA	unicode/uscript.h	/^      USCRIPT_CHAKMA                        = 118,\/* Cakm *\/$/;"	e	enum:UScriptCode
USCRIPT_CHAM	unicode/uscript.h	/^      USCRIPT_CHAM                          = 66, \/* Cham *\/$/;"	e	enum:UScriptCode
USCRIPT_CHEROKEE	unicode/uscript.h	/^      USCRIPT_CHEROKEE     =  6,  \/* Cher *\/$/;"	e	enum:UScriptCode
USCRIPT_CIRTH	unicode/uscript.h	/^      USCRIPT_CIRTH                         = 67, \/* Cirt *\/$/;"	e	enum:UScriptCode
USCRIPT_CODE_LIMIT	unicode/uscript.h	/^      USCRIPT_CODE_LIMIT    = 147$/;"	e	enum:UScriptCode
USCRIPT_COMMON	unicode/uscript.h	/^      USCRIPT_COMMON       =  0,  \/* Zyyy *\/$/;"	e	enum:UScriptCode
USCRIPT_COPTIC	unicode/uscript.h	/^      USCRIPT_COPTIC       =  7,  \/* Copt *\/$/;"	e	enum:UScriptCode
USCRIPT_CUNEIFORM	unicode/uscript.h	/^      USCRIPT_CUNEIFORM                     = 101,\/* Xsux *\/$/;"	e	enum:UScriptCode
USCRIPT_CYPRIOT	unicode/uscript.h	/^      USCRIPT_CYPRIOT      = 47,  \/* Cprt *\/$/;"	e	enum:UScriptCode
USCRIPT_CYRILLIC	unicode/uscript.h	/^      USCRIPT_CYRILLIC     =  8,  \/* Cyrl *\/$/;"	e	enum:UScriptCode
USCRIPT_DEMOTIC_EGYPTIAN	unicode/uscript.h	/^      USCRIPT_DEMOTIC_EGYPTIAN              = 69, \/* Egyd *\/$/;"	e	enum:UScriptCode
USCRIPT_DESERET	unicode/uscript.h	/^      USCRIPT_DESERET      =  9,  \/* Dsrt *\/$/;"	e	enum:UScriptCode
USCRIPT_DEVANAGARI	unicode/uscript.h	/^      USCRIPT_DEVANAGARI   = 10,  \/* Deva *\/$/;"	e	enum:UScriptCode
USCRIPT_DUPLOYAN_SHORTAND	unicode/uscript.h	/^      USCRIPT_DUPLOYAN_SHORTAND             = 135,\/* Dupl *\/$/;"	e	enum:UScriptCode
USCRIPT_EASTERN_SYRIAC	unicode/uscript.h	/^      USCRIPT_EASTERN_SYRIAC                = 97, \/* Syrn *\/$/;"	e	enum:UScriptCode
USCRIPT_EGYPTIAN_HIEROGLYPHS	unicode/uscript.h	/^      USCRIPT_EGYPTIAN_HIEROGLYPHS          = 71, \/* Egyp *\/$/;"	e	enum:UScriptCode
USCRIPT_ELBASAN	unicode/uscript.h	/^      USCRIPT_ELBASAN                       = 136,\/* Elba *\/$/;"	e	enum:UScriptCode
USCRIPT_ESTRANGELO_SYRIAC	unicode/uscript.h	/^      USCRIPT_ESTRANGELO_SYRIAC             = 95, \/* Syre *\/$/;"	e	enum:UScriptCode
USCRIPT_ETHIOPIC	unicode/uscript.h	/^      USCRIPT_ETHIOPIC     = 11,  \/* Ethi *\/$/;"	e	enum:UScriptCode
USCRIPT_GEORGIAN	unicode/uscript.h	/^      USCRIPT_GEORGIAN     = 12,  \/* Geor *\/$/;"	e	enum:UScriptCode
USCRIPT_GLAGOLITIC	unicode/uscript.h	/^      USCRIPT_GLAGOLITIC    = 56, \/* Glag *\/$/;"	e	enum:UScriptCode
USCRIPT_GOTHIC	unicode/uscript.h	/^      USCRIPT_GOTHIC       = 13,  \/* Goth *\/$/;"	e	enum:UScriptCode
USCRIPT_GRANTHA	unicode/uscript.h	/^      USCRIPT_GRANTHA                       = 137,\/* Gran *\/$/;"	e	enum:UScriptCode
USCRIPT_GREEK	unicode/uscript.h	/^      USCRIPT_GREEK        = 14,  \/* Grek *\/$/;"	e	enum:UScriptCode
USCRIPT_GUJARATI	unicode/uscript.h	/^      USCRIPT_GUJARATI     = 15,  \/* Gujr *\/$/;"	e	enum:UScriptCode
USCRIPT_GURMUKHI	unicode/uscript.h	/^      USCRIPT_GURMUKHI     = 16,  \/* Guru *\/$/;"	e	enum:UScriptCode
USCRIPT_H	unicode/uscript.h	17;"	d
USCRIPT_HAN	unicode/uscript.h	/^      USCRIPT_HAN          = 17,  \/* Hani *\/$/;"	e	enum:UScriptCode
USCRIPT_HANGUL	unicode/uscript.h	/^      USCRIPT_HANGUL       = 18,  \/* Hang *\/$/;"	e	enum:UScriptCode
USCRIPT_HANUNOO	unicode/uscript.h	/^      USCRIPT_HANUNOO      = 43,  \/* Hano *\/$/;"	e	enum:UScriptCode
USCRIPT_HARAPPAN_INDUS	unicode/uscript.h	/^      USCRIPT_HARAPPAN_INDUS                = 77, \/* Inds *\/$/;"	e	enum:UScriptCode
USCRIPT_HEBREW	unicode/uscript.h	/^      USCRIPT_HEBREW       = 19,  \/* Hebr *\/$/;"	e	enum:UScriptCode
USCRIPT_HIERATIC_EGYPTIAN	unicode/uscript.h	/^      USCRIPT_HIERATIC_EGYPTIAN             = 70, \/* Egyh *\/$/;"	e	enum:UScriptCode
USCRIPT_HIRAGANA	unicode/uscript.h	/^      USCRIPT_HIRAGANA     = 20,  \/* Hira *\/$/;"	e	enum:UScriptCode
USCRIPT_IMPERIAL_ARAMAIC	unicode/uscript.h	/^      USCRIPT_IMPERIAL_ARAMAIC              = 116,\/* Armi *\/$/;"	e	enum:UScriptCode
USCRIPT_INHERITED	unicode/uscript.h	/^      USCRIPT_INHERITED    =  1,  \/* Zinh *\/ \/* "Code for inherited script", for non-spacing combining marks; also Qaai *\/$/;"	e	enum:UScriptCode
USCRIPT_INSCRIPTIONAL_PAHLAVI	unicode/uscript.h	/^      USCRIPT_INSCRIPTIONAL_PAHLAVI         = 122,\/* Phli *\/$/;"	e	enum:UScriptCode
USCRIPT_INSCRIPTIONAL_PARTHIAN	unicode/uscript.h	/^      USCRIPT_INSCRIPTIONAL_PARTHIAN        = 125,\/* Prti *\/$/;"	e	enum:UScriptCode
USCRIPT_INVALID_CODE	unicode/uscript.h	/^      USCRIPT_INVALID_CODE = -1,$/;"	e	enum:UScriptCode
USCRIPT_JAPANESE	unicode/uscript.h	/^      USCRIPT_JAPANESE                      = 105,\/* Jpan *\/$/;"	e	enum:UScriptCode
USCRIPT_JAVANESE	unicode/uscript.h	/^      USCRIPT_JAVANESE                      = 78, \/* Java *\/$/;"	e	enum:UScriptCode
USCRIPT_KAITHI	unicode/uscript.h	/^      USCRIPT_KAITHI                        = 120,\/* Kthi *\/$/;"	e	enum:UScriptCode
USCRIPT_KANNADA	unicode/uscript.h	/^      USCRIPT_KANNADA      = 21,  \/* Knda *\/$/;"	e	enum:UScriptCode
USCRIPT_KATAKANA	unicode/uscript.h	/^      USCRIPT_KATAKANA     = 22,  \/* Kana *\/$/;"	e	enum:UScriptCode
USCRIPT_KATAKANA_OR_HIRAGANA	unicode/uscript.h	/^      USCRIPT_KATAKANA_OR_HIRAGANA = 54,\/*Hrkt *\/$/;"	e	enum:UScriptCode
USCRIPT_KAYAH_LI	unicode/uscript.h	/^      USCRIPT_KAYAH_LI                      = 79, \/* Kali *\/$/;"	e	enum:UScriptCode
USCRIPT_KHAROSHTHI	unicode/uscript.h	/^      USCRIPT_KHAROSHTHI    = 57, \/* Khar *\/$/;"	e	enum:UScriptCode
USCRIPT_KHMER	unicode/uscript.h	/^      USCRIPT_KHMER        = 23,  \/* Khmr *\/$/;"	e	enum:UScriptCode
USCRIPT_KHUTSURI	unicode/uscript.h	/^      USCRIPT_KHUTSURI                      = 72, \/* Geok *\/$/;"	e	enum:UScriptCode
USCRIPT_KOREAN	unicode/uscript.h	/^      USCRIPT_KOREAN                        = 119,\/* Kore *\/$/;"	e	enum:UScriptCode
USCRIPT_KPELLE	unicode/uscript.h	/^      USCRIPT_KPELLE                        = 138,\/* Kpel *\/$/;"	e	enum:UScriptCode
USCRIPT_LANNA	unicode/uscript.h	/^      USCRIPT_LANNA                         = 106,\/* Lana *\/$/;"	e	enum:UScriptCode
USCRIPT_LAO	unicode/uscript.h	/^      USCRIPT_LAO          = 24,  \/* Laoo *\/$/;"	e	enum:UScriptCode
USCRIPT_LATIN	unicode/uscript.h	/^      USCRIPT_LATIN        = 25,  \/* Latn *\/$/;"	e	enum:UScriptCode
USCRIPT_LATIN_FRAKTUR	unicode/uscript.h	/^      USCRIPT_LATIN_FRAKTUR                 = 80, \/* Latf *\/$/;"	e	enum:UScriptCode
USCRIPT_LATIN_GAELIC	unicode/uscript.h	/^      USCRIPT_LATIN_GAELIC                  = 81, \/* Latg *\/$/;"	e	enum:UScriptCode
USCRIPT_LEPCHA	unicode/uscript.h	/^      USCRIPT_LEPCHA                        = 82, \/* Lepc *\/$/;"	e	enum:UScriptCode
USCRIPT_LIMBU	unicode/uscript.h	/^      USCRIPT_LIMBU        = 48,  \/* Limb *\/$/;"	e	enum:UScriptCode
USCRIPT_LINEAR_A	unicode/uscript.h	/^      USCRIPT_LINEAR_A                      = 83, \/* Lina *\/$/;"	e	enum:UScriptCode
USCRIPT_LINEAR_B	unicode/uscript.h	/^      USCRIPT_LINEAR_B     = 49,  \/* Linb *\/$/;"	e	enum:UScriptCode
USCRIPT_LISU	unicode/uscript.h	/^      USCRIPT_LISU                          = 131,\/* Lisu *\/$/;"	e	enum:UScriptCode
USCRIPT_LOMA	unicode/uscript.h	/^      USCRIPT_LOMA                          = 139,\/* Loma *\/$/;"	e	enum:UScriptCode
USCRIPT_LYCIAN	unicode/uscript.h	/^      USCRIPT_LYCIAN                        = 107,\/* Lyci *\/$/;"	e	enum:UScriptCode
USCRIPT_LYDIAN	unicode/uscript.h	/^      USCRIPT_LYDIAN                        = 108,\/* Lydi *\/$/;"	e	enum:UScriptCode
USCRIPT_MALAYALAM	unicode/uscript.h	/^      USCRIPT_MALAYALAM    = 26,  \/* Mlym *\/$/;"	e	enum:UScriptCode
USCRIPT_MANDAEAN	unicode/uscript.h	/^      USCRIPT_MANDAEAN                      = USCRIPT_MANDAIC,$/;"	e	enum:UScriptCode
USCRIPT_MANDAIC	unicode/uscript.h	/^      USCRIPT_MANDAIC                       = 84, \/* Mand *\/$/;"	e	enum:UScriptCode
USCRIPT_MANICHAEAN	unicode/uscript.h	/^      USCRIPT_MANICHAEAN                    = 121,\/* Mani *\/$/;"	e	enum:UScriptCode
USCRIPT_MATHEMATICAL_NOTATION	unicode/uscript.h	/^      USCRIPT_MATHEMATICAL_NOTATION         = 128,\/* Zmth *\/$/;"	e	enum:UScriptCode
USCRIPT_MAYAN_HIEROGLYPHS	unicode/uscript.h	/^      USCRIPT_MAYAN_HIEROGLYPHS             = 85, \/* Maya *\/$/;"	e	enum:UScriptCode
USCRIPT_MEITEI_MAYEK	unicode/uscript.h	/^      USCRIPT_MEITEI_MAYEK                  = 115,\/* Mtei *\/$/;"	e	enum:UScriptCode
USCRIPT_MENDE	unicode/uscript.h	/^      USCRIPT_MENDE                         = 140,\/* Mend *\/$/;"	e	enum:UScriptCode
USCRIPT_MEROITIC	unicode/uscript.h	/^      USCRIPT_MEROITIC                      = USCRIPT_MEROITIC_HIEROGLYPHS,$/;"	e	enum:UScriptCode
USCRIPT_MEROITIC_CURSIVE	unicode/uscript.h	/^      USCRIPT_MEROITIC_CURSIVE              = 141,\/* Merc *\/$/;"	e	enum:UScriptCode
USCRIPT_MEROITIC_HIEROGLYPHS	unicode/uscript.h	/^      USCRIPT_MEROITIC_HIEROGLYPHS          = 86, \/* Mero *\/$/;"	e	enum:UScriptCode
USCRIPT_MONGOLIAN	unicode/uscript.h	/^      USCRIPT_MONGOLIAN    = 27,  \/* Mong *\/$/;"	e	enum:UScriptCode
USCRIPT_MOON	unicode/uscript.h	/^      USCRIPT_MOON                          = 114,\/* Moon *\/$/;"	e	enum:UScriptCode
USCRIPT_MYANMAR	unicode/uscript.h	/^      USCRIPT_MYANMAR      = 28,  \/* Mymr *\/$/;"	e	enum:UScriptCode
USCRIPT_NABATAEAN	unicode/uscript.h	/^      USCRIPT_NABATAEAN                     = 143,\/* Nbat *\/$/;"	e	enum:UScriptCode
USCRIPT_NAKHI_GEBA	unicode/uscript.h	/^      USCRIPT_NAKHI_GEBA                    = 132,\/* Nkgb *\/$/;"	e	enum:UScriptCode
USCRIPT_NEW_TAI_LUE	unicode/uscript.h	/^      USCRIPT_NEW_TAI_LUE   = 59, \/* Talu *\/$/;"	e	enum:UScriptCode
USCRIPT_NKO	unicode/uscript.h	/^      USCRIPT_NKO                           = 87, \/* Nkoo *\/$/;"	e	enum:UScriptCode
USCRIPT_OGHAM	unicode/uscript.h	/^      USCRIPT_OGHAM        = 29,  \/* Ogam *\/$/;"	e	enum:UScriptCode
USCRIPT_OLD_CHURCH_SLAVONIC_CYRILLIC	unicode/uscript.h	/^      USCRIPT_OLD_CHURCH_SLAVONIC_CYRILLIC  = 68, \/* Cyrs *\/$/;"	e	enum:UScriptCode
USCRIPT_OLD_HUNGARIAN	unicode/uscript.h	/^      USCRIPT_OLD_HUNGARIAN                 = 76, \/* Hung *\/$/;"	e	enum:UScriptCode
USCRIPT_OLD_ITALIC	unicode/uscript.h	/^      USCRIPT_OLD_ITALIC   = 30,  \/* Ital *\/$/;"	e	enum:UScriptCode
USCRIPT_OLD_NORTH_ARABIAN	unicode/uscript.h	/^      USCRIPT_OLD_NORTH_ARABIAN             = 142,\/* Narb *\/$/;"	e	enum:UScriptCode
USCRIPT_OLD_PERMIC	unicode/uscript.h	/^      USCRIPT_OLD_PERMIC                    = 89, \/* Perm *\/$/;"	e	enum:UScriptCode
USCRIPT_OLD_PERSIAN	unicode/uscript.h	/^      USCRIPT_OLD_PERSIAN   = 61, \/* Xpeo *\/$/;"	e	enum:UScriptCode
USCRIPT_OLD_SOUTH_ARABIAN	unicode/uscript.h	/^      USCRIPT_OLD_SOUTH_ARABIAN             = 133,\/* Sarb *\/$/;"	e	enum:UScriptCode
USCRIPT_OL_CHIKI	unicode/uscript.h	/^      USCRIPT_OL_CHIKI                      = 109,\/* Olck *\/$/;"	e	enum:UScriptCode
USCRIPT_ORIYA	unicode/uscript.h	/^      USCRIPT_ORIYA        = 31,  \/* Orya *\/$/;"	e	enum:UScriptCode
USCRIPT_ORKHON	unicode/uscript.h	/^      USCRIPT_ORKHON                        = 88, \/* Orkh *\/$/;"	e	enum:UScriptCode
USCRIPT_OSMANYA	unicode/uscript.h	/^      USCRIPT_OSMANYA      = 50,  \/* Osma *\/$/;"	e	enum:UScriptCode
USCRIPT_PAHAWH_HMONG	unicode/uscript.h	/^      USCRIPT_PAHAWH_HMONG                  = 75, \/* Hmng *\/$/;"	e	enum:UScriptCode
USCRIPT_PALMYRENE	unicode/uscript.h	/^      USCRIPT_PALMYRENE                     = 144,\/* Palm *\/$/;"	e	enum:UScriptCode
USCRIPT_PHAGS_PA	unicode/uscript.h	/^      USCRIPT_PHAGS_PA                      = 90, \/* Phag *\/$/;"	e	enum:UScriptCode
USCRIPT_PHOENICIAN	unicode/uscript.h	/^      USCRIPT_PHOENICIAN                    = 91, \/* Phnx *\/$/;"	e	enum:UScriptCode
USCRIPT_PHONETIC_POLLARD	unicode/uscript.h	/^      USCRIPT_PHONETIC_POLLARD              = 92, \/* Plrd *\/$/;"	e	enum:UScriptCode
USCRIPT_PSALTER_PAHLAVI	unicode/uscript.h	/^      USCRIPT_PSALTER_PAHLAVI               = 123,\/* Phlp *\/$/;"	e	enum:UScriptCode
USCRIPT_REJANG	unicode/uscript.h	/^      USCRIPT_REJANG                        = 110,\/* Rjng *\/$/;"	e	enum:UScriptCode
USCRIPT_RONGORONGO	unicode/uscript.h	/^      USCRIPT_RONGORONGO                    = 93, \/* Roro *\/$/;"	e	enum:UScriptCode
USCRIPT_RUNIC	unicode/uscript.h	/^      USCRIPT_RUNIC        = 32,  \/* Runr *\/$/;"	e	enum:UScriptCode
USCRIPT_SAMARITAN	unicode/uscript.h	/^      USCRIPT_SAMARITAN                     = 126,\/* Samr *\/$/;"	e	enum:UScriptCode
USCRIPT_SARATI	unicode/uscript.h	/^      USCRIPT_SARATI                        = 94, \/* Sara *\/$/;"	e	enum:UScriptCode
USCRIPT_SAURASHTRA	unicode/uscript.h	/^      USCRIPT_SAURASHTRA                    = 111,\/* Saur *\/$/;"	e	enum:UScriptCode
USCRIPT_SHAVIAN	unicode/uscript.h	/^      USCRIPT_SHAVIAN      = 51,  \/* Shaw *\/$/;"	e	enum:UScriptCode
USCRIPT_SIGN_WRITING	unicode/uscript.h	/^      USCRIPT_SIGN_WRITING                  = 112,\/* Sgnw *\/$/;"	e	enum:UScriptCode
USCRIPT_SIMPLIFIED_HAN	unicode/uscript.h	/^      USCRIPT_SIMPLIFIED_HAN                = 73, \/* Hans *\/$/;"	e	enum:UScriptCode
USCRIPT_SINDHI	unicode/uscript.h	/^      USCRIPT_SINDHI                        = 145,\/* Sind *\/$/;"	e	enum:UScriptCode
USCRIPT_SINHALA	unicode/uscript.h	/^      USCRIPT_SINHALA      = 33,  \/* Sinh *\/$/;"	e	enum:UScriptCode
USCRIPT_SUNDANESE	unicode/uscript.h	/^      USCRIPT_SUNDANESE                     = 113,\/* Sund *\/$/;"	e	enum:UScriptCode
USCRIPT_SYLOTI_NAGRI	unicode/uscript.h	/^      USCRIPT_SYLOTI_NAGRI  = 58, \/* Sylo *\/$/;"	e	enum:UScriptCode
USCRIPT_SYMBOLS	unicode/uscript.h	/^      USCRIPT_SYMBOLS                       = 129,\/* Zsym *\/$/;"	e	enum:UScriptCode
USCRIPT_SYRIAC	unicode/uscript.h	/^      USCRIPT_SYRIAC       = 34,  \/* Syrc *\/$/;"	e	enum:UScriptCode
USCRIPT_TAGALOG	unicode/uscript.h	/^      USCRIPT_TAGALOG      = 42,  \/* Tglg *\/$/;"	e	enum:UScriptCode
USCRIPT_TAGBANWA	unicode/uscript.h	/^      USCRIPT_TAGBANWA     = 45,  \/* Tagb *\/$/;"	e	enum:UScriptCode
USCRIPT_TAI_LE	unicode/uscript.h	/^      USCRIPT_TAI_LE       = 52,  \/* Tale *\/$/;"	e	enum:UScriptCode
USCRIPT_TAI_VIET	unicode/uscript.h	/^      USCRIPT_TAI_VIET                      = 127,\/* Tavt *\/$/;"	e	enum:UScriptCode
USCRIPT_TAMIL	unicode/uscript.h	/^      USCRIPT_TAMIL        = 35,  \/* Taml *\/$/;"	e	enum:UScriptCode
USCRIPT_TELUGU	unicode/uscript.h	/^      USCRIPT_TELUGU       = 36,  \/* Telu *\/$/;"	e	enum:UScriptCode
USCRIPT_TENGWAR	unicode/uscript.h	/^      USCRIPT_TENGWAR                       = 98, \/* Teng *\/$/;"	e	enum:UScriptCode
USCRIPT_THAANA	unicode/uscript.h	/^      USCRIPT_THAANA       = 37,  \/* Thaa *\/$/;"	e	enum:UScriptCode
USCRIPT_THAI	unicode/uscript.h	/^      USCRIPT_THAI         = 38,  \/* Thai *\/$/;"	e	enum:UScriptCode
USCRIPT_TIBETAN	unicode/uscript.h	/^      USCRIPT_TIBETAN      = 39,  \/* Tibt *\/$/;"	e	enum:UScriptCode
USCRIPT_TIFINAGH	unicode/uscript.h	/^      USCRIPT_TIFINAGH      = 60, \/* Tfng *\/$/;"	e	enum:UScriptCode
USCRIPT_TRADITIONAL_HAN	unicode/uscript.h	/^      USCRIPT_TRADITIONAL_HAN               = 74, \/* Hant *\/$/;"	e	enum:UScriptCode
USCRIPT_UCAS	unicode/uscript.h	/^      USCRIPT_UCAS         = USCRIPT_CANADIAN_ABORIGINAL,$/;"	e	enum:UScriptCode
USCRIPT_UGARITIC	unicode/uscript.h	/^      USCRIPT_UGARITIC     = 53,  \/* Ugar *\/$/;"	e	enum:UScriptCode
USCRIPT_UNKNOWN	unicode/uscript.h	/^      USCRIPT_UNKNOWN                       = 103,\/* Zzzz *\/ \/* Unknown="Code for uncoded script", for unassigned code points *\/$/;"	e	enum:UScriptCode
USCRIPT_UNWRITTEN_LANGUAGES	unicode/uscript.h	/^      USCRIPT_UNWRITTEN_LANGUAGES           = 102,\/* Zxxx *\/$/;"	e	enum:UScriptCode
USCRIPT_VAI	unicode/uscript.h	/^      USCRIPT_VAI                           = 99, \/* Vaii *\/$/;"	e	enum:UScriptCode
USCRIPT_VISIBLE_SPEECH	unicode/uscript.h	/^      USCRIPT_VISIBLE_SPEECH                = 100,\/* Visp *\/$/;"	e	enum:UScriptCode
USCRIPT_WARANG_CITI	unicode/uscript.h	/^      USCRIPT_WARANG_CITI                   = 146,\/* Wara *\/$/;"	e	enum:UScriptCode
USCRIPT_WESTERN_SYRIAC	unicode/uscript.h	/^      USCRIPT_WESTERN_SYRIAC                = 96, \/* Syrj *\/$/;"	e	enum:UScriptCode
USCRIPT_YI	unicode/uscript.h	/^      USCRIPT_YI           = 41,  \/* Yiii *\/$/;"	e	enum:UScriptCode
USC_IMPL_H	usc_impl.h	17;"	d
USETITER_H	unicode/usetiter.h	8;"	d
USET_ADD_CASE_MAPPINGS	unicode/uset.h	/^    USET_ADD_CASE_MAPPINGS = 4,$/;"	e	enum:__anon120
USET_ADD_CP_AND_NEXT	uchar.c	629;"	d	file:
USET_CASE_INSENSITIVE	unicode/uset.h	/^    USET_CASE_INSENSITIVE = 2,  $/;"	e	enum:__anon120
USET_IGNORE_SPACE	unicode/uset.h	/^    USET_IGNORE_SPACE = 1,  $/;"	e	enum:__anon120
USET_SERIALIZED_STATIC_ARRAY_CAPACITY	unicode/uset.h	/^    USET_SERIALIZED_STATIC_ARRAY_CAPACITY=8$/;"	e	enum:__anon120
USET_SPAN_CONDITION_COUNT	unicode/uset.h	/^    USET_SPAN_CONDITION_COUNT$/;"	e	enum:USetSpanCondition
USET_SPAN_CONTAINED	unicode/uset.h	/^    USET_SPAN_CONTAINED = 1,$/;"	e	enum:USetSpanCondition
USET_SPAN_NOT_CONTAINED	unicode/uset.h	/^    USET_SPAN_NOT_CONTAINED = 0,$/;"	e	enum:USetSpanCondition
USET_SPAN_SIMPLE	unicode/uset.h	/^    USET_SPAN_SIMPLE = 2,$/;"	e	enum:USetSpanCondition
USE_MAC_OS_ATOMIC_INCREMENT	umutex.c	38;"	d	file:
USE_WINDOWS_LOCALE_API	locmap.c	34;"	d	file:
USPREP_ALLOW_UNASSIGNED	unicode/usprep.h	85;"	d
USPREP_DEFAULT	unicode/usprep.h	77;"	d
USPREP_DELETE	sprpimpl.h	/^    USPREP_DELETE               = 0x0003 ,$/;"	e	enum:UStringPrepType
USPREP_MAP	sprpimpl.h	/^    USPREP_MAP                  = 0x0001 ,$/;"	e	enum:UStringPrepType
USPREP_PROHIBITED	sprpimpl.h	/^    USPREP_PROHIBITED           = 0x0002 , $/;"	e	enum:UStringPrepType
USPREP_RFC3491_NAMEPREP	unicode/usprep.h	/^    USPREP_RFC3491_NAMEPREP,$/;"	e	enum:UStringPrepProfileType
USPREP_RFC3530_NFS4_CIS_PREP	unicode/usprep.h	/^	USPREP_RFC3530_NFS4_CIS_PREP,$/;"	e	enum:UStringPrepProfileType
USPREP_RFC3530_NFS4_CS_PREP	unicode/usprep.h	/^	USPREP_RFC3530_NFS4_CS_PREP,$/;"	e	enum:UStringPrepProfileType
USPREP_RFC3530_NFS4_CS_PREP_CI	unicode/usprep.h	/^	USPREP_RFC3530_NFS4_CS_PREP_CI,$/;"	e	enum:UStringPrepProfileType
USPREP_RFC3530_NFS4_MIXED_PREP_PREFIX	unicode/usprep.h	/^	USPREP_RFC3530_NFS4_MIXED_PREP_PREFIX,$/;"	e	enum:UStringPrepProfileType
USPREP_RFC3530_NFS4_MIXED_PREP_SUFFIX	unicode/usprep.h	/^	USPREP_RFC3530_NFS4_MIXED_PREP_SUFFIX,$/;"	e	enum:UStringPrepProfileType
USPREP_RFC3722_ISCSI	unicode/usprep.h	/^	USPREP_RFC3722_ISCSI,$/;"	e	enum:UStringPrepProfileType
USPREP_RFC3920_NODEPREP	unicode/usprep.h	/^	USPREP_RFC3920_NODEPREP,$/;"	e	enum:UStringPrepProfileType
USPREP_RFC3920_RESOURCEPREP	unicode/usprep.h	/^	USPREP_RFC3920_RESOURCEPREP,$/;"	e	enum:UStringPrepProfileType
USPREP_RFC4011_MIB	unicode/usprep.h	/^	USPREP_RFC4011_MIB,$/;"	e	enum:UStringPrepProfileType
USPREP_RFC4013_SASLPREP	unicode/usprep.h	/^    USPREP_RFC4013_SASLPREP,$/;"	e	enum:UStringPrepProfileType
USPREP_RFC4505_TRACE	unicode/usprep.h	/^	USPREP_RFC4505_TRACE,$/;"	e	enum:UStringPrepProfileType
USPREP_RFC4518_LDAP	unicode/usprep.h	/^	USPREP_RFC4518_LDAP,$/;"	e	enum:UStringPrepProfileType
USPREP_RFC4518_LDAP_CI	unicode/usprep.h	/^	USPREP_RFC4518_LDAP_CI$/;"	e	enum:UStringPrepProfileType
USPREP_TYPE_LIMIT	sprpimpl.h	/^    USPREP_TYPE_LIMIT           = 0x0004  $/;"	e	enum:UStringPrepType
USPREP_UNASSIGNED	sprpimpl.h	/^    USPREP_UNASSIGNED           = 0x0000 ,$/;"	e	enum:UStringPrepType
USTRENUM_VT	ustrenum.cpp	/^static const UEnumeration USTRENUM_VT = {$/;"	v	file:
USTRFMT_H	ustrfmt.h	9;"	d
USTRING_H	unicode/ustring.h	17;"	d
USTR_CNV_IMP_H	ustr_cnv.h	16;"	d
USYSTEM_H	unicode/usystem.h	22;"	d
US_INV	unicode/unistr.h	74;"	d
US_STACKBUF_SIZE	unicode/unistr.h	/^    US_STACKBUF_SIZE= sizeof(void *)==4 ? 13 : 15, \/\/ Size of stack buffer for small strings$/;"	e	enum:UnicodeString::__anon117
UScriptCode	unicode/uscript.h	/^typedef enum UScriptCode {$/;"	g
UScriptCode	unicode/uscript.h	/^} UScriptCode;$/;"	t	typeref:enum:UScriptCode
UScriptRun	usc_impl.c	/^struct UScriptRun$/;"	s	file:
UScriptRun	usc_impl.h	/^struct UScriptRun;$/;"	x
UScriptRun	usc_impl.h	/^typedef struct UScriptRun UScriptRun;$/;"	t	typeref:struct:UScriptRun
UScriptRun::fixupCount	usc_impl.c	/^    int32_t fixupCount;$/;"	m	struct:UScriptRun	file:	access:public
UScriptRun::parenSP	usc_impl.c	/^    int32_t parenSP;$/;"	m	struct:UScriptRun	file:	access:public
UScriptRun::parenStack	usc_impl.c	/^    struct ParenStackEntry parenStack[PAREN_STACK_DEPTH];$/;"	m	struct:UScriptRun	typeref:struct:UScriptRun::ParenStackEntry	file:	access:public
UScriptRun::pushCount	usc_impl.c	/^    int32_t pushCount;$/;"	m	struct:UScriptRun	file:	access:public
UScriptRun::scriptCode	usc_impl.c	/^    UScriptCode scriptCode;$/;"	m	struct:UScriptRun	file:	access:public
UScriptRun::scriptLimit	usc_impl.c	/^    int32_t scriptLimit;$/;"	m	struct:UScriptRun	file:	access:public
UScriptRun::scriptStart	usc_impl.c	/^    int32_t scriptStart;$/;"	m	struct:UScriptRun	file:	access:public
UScriptRun::textArray	usc_impl.c	/^    const UChar *textArray;$/;"	m	struct:UScriptRun	file:	access:public
UScriptRun::textLength	usc_impl.c	/^    int32_t textLength;$/;"	m	struct:UScriptRun	file:	access:public
USentenceBreak	unicode/uchar.h	/^typedef enum USentenceBreak {$/;"	g
USentenceBreak	unicode/uchar.h	/^} USentenceBreak;$/;"	t	typeref:enum:USentenceBreak
USentenceBreakTag	unicode/ubrk.h	/^typedef enum USentenceBreakTag {$/;"	g
USentenceBreakTag	unicode/ubrk.h	/^} USentenceBreakTag;$/;"	t	typeref:enum:USentenceBreakTag
USerializedSet	unicode/uset.h	/^typedef struct USerializedSet {$/;"	s
USerializedSet	unicode/uset.h	/^} USerializedSet;$/;"	t	typeref:struct:USerializedSet
USerializedSet::array	unicode/uset.h	/^    const uint16_t *array;$/;"	m	struct:USerializedSet	access:public
USerializedSet::bmpLength	unicode/uset.h	/^    int32_t bmpLength;$/;"	m	struct:USerializedSet	access:public
USerializedSet::length	unicode/uset.h	/^    int32_t length;$/;"	m	struct:USerializedSet	access:public
USerializedSet::staticArray	unicode/uset.h	/^    uint16_t staticArray[USET_SERIALIZED_STATIC_ARRAY_CAPACITY];$/;"	m	struct:USerializedSet	access:public
USet	unicode/ucnv.h	/^struct USet;$/;"	x
USet	unicode/ucnv.h	/^typedef struct USet USet;$/;"	t	typeref:struct:USet
USet	unicode/uset.h	/^struct USet;$/;"	x
USet	unicode/uset.h	/^typedef struct USet USet;$/;"	t	typeref:struct:USet
USetAccess	unicode/uniset.h	/^    friend class USetAccess;$/;"	x
USetAccess	uset.cpp	/^    USetAccess();$/;"	p	class:USetAccess	file:	access:private	signature:()
USetAccess	uset.cpp	/^class USetAccess \/* not : public UObject because all methods are static *\/ {$/;"	c	file:
USetAccess::USetAccess	uset.cpp	/^    USetAccess();$/;"	p	class:USetAccess	file:	access:private	signature:()
USetAccess::getString	uset.cpp	/^    inline static const UnicodeString* getString(const UnicodeSet& set,$/;"	f	class:USetAccess	access:public	signature:(const UnicodeSet& set, int32_t i)
USetAccess::getStringCount	uset.cpp	/^    inline static int32_t getStringCount(const UnicodeSet& set) {$/;"	f	class:USetAccess	access:public	signature:(const UnicodeSet& set)
USetAdd	uset_imp.h	/^USetAdd(USet *set, UChar32 c);$/;"	t
USetAddRange	uset_imp.h	/^USetAddRange(USet *set, UChar32 start, UChar32 end);$/;"	t
USetAddString	uset_imp.h	/^USetAddString(USet *set, const UChar *str, int32_t length);$/;"	t
USetAdder	uset_imp.h	/^struct USetAdder {$/;"	s
USetAdder	uset_imp.h	/^typedef struct USetAdder USetAdder;$/;"	t	typeref:struct:USetAdder
USetAdder::add	uset_imp.h	/^    USetAdd *add;$/;"	m	struct:USetAdder	access:public
USetAdder::addRange	uset_imp.h	/^    USetAddRange *addRange;$/;"	m	struct:USetAdder	access:public
USetAdder::addString	uset_imp.h	/^    USetAddString *addString;$/;"	m	struct:USetAdder	access:public
USetAdder::remove	uset_imp.h	/^    USetRemove *remove;$/;"	m	struct:USetAdder	access:public
USetAdder::removeRange	uset_imp.h	/^    USetRemoveRange *removeRange;$/;"	m	struct:USetAdder	access:public
USetAdder::set	uset_imp.h	/^    USet *set;$/;"	m	struct:USetAdder	access:public
USetRemove	uset_imp.h	/^USetRemove(USet *set, UChar32 c);$/;"	t
USetRemoveRange	uset_imp.h	/^USetRemoveRange(USet *set, UChar32 start, UChar32 end);$/;"	t
USetSpanCondition	unicode/uset.h	/^typedef enum USetSpanCondition {$/;"	g
USetSpanCondition	unicode/uset.h	/^} USetSpanCondition;$/;"	t	typeref:enum:USetSpanCondition
USortComparator	uvector.h	/^typedef int8_t U_CALLCONV USortComparator(UHashTok tok1,$/;"	t
UStack	brkeng.h	/^class UStack;$/;"	x
UStack	unicode/rbbi.h	/^class  UStack;$/;"	x
UStack	unicode/urename.h	2196;"	d
UStack	ustack.cpp	/^UStack::UStack(UErrorCode &status) :$/;"	f	class:UStack	signature:(UErrorCode &status)
UStack	ustack.cpp	/^UStack::UStack(UObjectDeleter *d, UKeyComparator *c, UErrorCode &status) :$/;"	f	class:UStack	signature:(UObjectDeleter *d, UKeyComparator *c, UErrorCode &status)
UStack	ustack.cpp	/^UStack::UStack(UObjectDeleter *d, UKeyComparator *c, int32_t initialCapacity, UErrorCode &status) :$/;"	f	class:UStack	signature:(UObjectDeleter *d, UKeyComparator *c, int32_t initialCapacity, UErrorCode &status)
UStack	ustack.cpp	/^UStack::UStack(int32_t initialCapacity, UErrorCode &status) :$/;"	f	class:UStack	signature:(int32_t initialCapacity, UErrorCode &status)
UStack	uvector.h	/^    UStack(UErrorCode &status);$/;"	p	class:UStack	access:public	signature:(UErrorCode &status)
UStack	uvector.h	/^    UStack(UObjectDeleter *d, UKeyComparator *c, UErrorCode &status);$/;"	p	class:UStack	access:public	signature:(UObjectDeleter *d, UKeyComparator *c, UErrorCode &status)
UStack	uvector.h	/^    UStack(UObjectDeleter *d, UKeyComparator *c, int32_t initialCapacity, UErrorCode &status);$/;"	p	class:UStack	access:public	signature:(UObjectDeleter *d, UKeyComparator *c, int32_t initialCapacity, UErrorCode &status)
UStack	uvector.h	/^    UStack(const UStack&);$/;"	p	class:UStack	access:private	signature:(const UStack&)
UStack	uvector.h	/^    UStack(int32_t initialCapacity, UErrorCode &status);$/;"	p	class:UStack	access:public	signature:(int32_t initialCapacity, UErrorCode &status)
UStack	uvector.h	/^class U_COMMON_API UStack : public UVector {$/;"	c	inherits:UVector
UStack::UStack	ustack.cpp	/^UStack::UStack(UErrorCode &status) :$/;"	f	class:UStack	signature:(UErrorCode &status)
UStack::UStack	ustack.cpp	/^UStack::UStack(UObjectDeleter *d, UKeyComparator *c, UErrorCode &status) :$/;"	f	class:UStack	signature:(UObjectDeleter *d, UKeyComparator *c, UErrorCode &status)
UStack::UStack	ustack.cpp	/^UStack::UStack(UObjectDeleter *d, UKeyComparator *c, int32_t initialCapacity, UErrorCode &status) :$/;"	f	class:UStack	signature:(UObjectDeleter *d, UKeyComparator *c, int32_t initialCapacity, UErrorCode &status)
UStack::UStack	ustack.cpp	/^UStack::UStack(int32_t initialCapacity, UErrorCode &status) :$/;"	f	class:UStack	signature:(int32_t initialCapacity, UErrorCode &status)
UStack::UStack	uvector.h	/^    UStack(UErrorCode &status);$/;"	p	class:UStack	access:public	signature:(UErrorCode &status)
UStack::UStack	uvector.h	/^    UStack(UObjectDeleter *d, UKeyComparator *c, UErrorCode &status);$/;"	p	class:UStack	access:public	signature:(UObjectDeleter *d, UKeyComparator *c, UErrorCode &status)
UStack::UStack	uvector.h	/^    UStack(UObjectDeleter *d, UKeyComparator *c, int32_t initialCapacity, UErrorCode &status);$/;"	p	class:UStack	access:public	signature:(UObjectDeleter *d, UKeyComparator *c, int32_t initialCapacity, UErrorCode &status)
UStack::UStack	uvector.h	/^    UStack(const UStack&);$/;"	p	class:UStack	access:private	signature:(const UStack&)
UStack::UStack	uvector.h	/^    UStack(int32_t initialCapacity, UErrorCode &status);$/;"	p	class:UStack	access:public	signature:(int32_t initialCapacity, UErrorCode &status)
UStack::empty	uvector.h	/^    UBool empty(void) const;$/;"	p	class:UStack	access:public	signature:(void) const
UStack::empty	uvector.h	/^inline UBool UStack::empty(void) const {$/;"	f	class:UStack	signature:(void) const
UStack::getDynamicClassID	uvector.h	/^    virtual UClassID getDynamicClassID() const;$/;"	p	class:UStack	access:public	signature:() const
UStack::getStaticClassID	uvector.h	/^    static UClassID U_EXPORT2 getStaticClassID();$/;"	p	class:UStack	access:public	signature:()
UStack::operator =	uvector.h	/^    UStack& operator=(const UStack&);$/;"	p	class:UStack	access:private	signature:(const UStack&)
UStack::peek	uvector.h	/^    void* peek(void) const;$/;"	p	class:UStack	access:public	signature:(void) const
UStack::peek	uvector.h	/^inline void* UStack::peek(void) const {$/;"	f	class:UStack	signature:(void) const
UStack::peeki	uvector.h	/^    int32_t peeki(void) const;$/;"	p	class:UStack	access:public	signature:(void) const
UStack::peeki	uvector.h	/^inline int32_t UStack::peeki(void) const {$/;"	f	class:UStack	signature:(void) const
UStack::pop	ustack.cpp	/^void* UStack::pop(void) {$/;"	f	class:UStack	signature:(void)
UStack::pop	uvector.h	/^    void* pop(void);$/;"	p	class:UStack	access:public	signature:(void)
UStack::popi	ustack.cpp	/^int32_t UStack::popi(void) {$/;"	f	class:UStack	signature:(void)
UStack::popi	uvector.h	/^    int32_t popi(void);$/;"	p	class:UStack	access:public	signature:(void)
UStack::push	uvector.h	/^    int32_t push(int32_t i, UErrorCode &status);$/;"	p	class:UStack	access:public	signature:(int32_t i, UErrorCode &status)
UStack::push	uvector.h	/^    void* push(void* obj, UErrorCode &status);$/;"	p	class:UStack	access:public	signature:(void* obj, UErrorCode &status)
UStack::push	uvector.h	/^inline int32_t UStack::push(int32_t i, UErrorCode &status) {$/;"	f	class:UStack	signature:(int32_t i, UErrorCode &status)
UStack::push	uvector.h	/^inline void* UStack::push(void* obj, UErrorCode &status) {$/;"	f	class:UStack	signature:(void* obj, UErrorCode &status)
UStack::search	ustack.cpp	/^int32_t UStack::search(void* obj) const {$/;"	f	class:UStack	signature:(void* obj) const
UStack::search	uvector.h	/^    int32_t search(void* obj) const;$/;"	p	class:UStack	access:public	signature:(void* obj) const
UStack::~UStack	ustack.cpp	/^UStack::~UStack() {}$/;"	f	class:UStack	signature:()
UStack::~UStack	uvector.h	/^    virtual ~UStack();$/;"	p	class:UStack	access:public	signature:()
UStringEnumeration	unicode/urename.h	2197;"	d
UStringEnumeration	ustrenum.cpp	/^UStringEnumeration::UStringEnumeration(UEnumeration* _uenum) :$/;"	f	class:UStringEnumeration	signature:(UEnumeration* _uenum)
UStringEnumeration	ustrenum.h	/^    UStringEnumeration(UEnumeration* uenum);$/;"	p	class:UStringEnumeration	access:public	signature:(UEnumeration* uenum)
UStringEnumeration	ustrenum.h	/^class U_COMMON_API UStringEnumeration : public StringEnumeration {$/;"	c	inherits:StringEnumeration
UStringEnumeration::UStringEnumeration	ustrenum.cpp	/^UStringEnumeration::UStringEnumeration(UEnumeration* _uenum) :$/;"	f	class:UStringEnumeration	signature:(UEnumeration* _uenum)
UStringEnumeration::UStringEnumeration	ustrenum.h	/^    UStringEnumeration(UEnumeration* uenum);$/;"	p	class:UStringEnumeration	access:public	signature:(UEnumeration* uenum)
UStringEnumeration::count	ustrenum.cpp	/^int32_t UStringEnumeration::count(UErrorCode& status) const {$/;"	f	class:UStringEnumeration	signature:(UErrorCode& status) const
UStringEnumeration::count	ustrenum.h	/^    virtual int32_t count(UErrorCode& status) const;$/;"	p	class:UStringEnumeration	access:public	signature:(UErrorCode& status) const
UStringEnumeration::getDynamicClassID	ustrenum.h	/^    virtual UClassID getDynamicClassID() const;$/;"	p	class:UStringEnumeration	access:public	signature:() const
UStringEnumeration::getStaticClassID	ustrenum.h	/^    static UClassID U_EXPORT2 getStaticClassID();$/;"	p	class:UStringEnumeration	access:public	signature:()
UStringEnumeration::reset	ustrenum.cpp	/^void UStringEnumeration::reset(UErrorCode& status) {$/;"	f	class:UStringEnumeration	signature:(UErrorCode& status)
UStringEnumeration::reset	ustrenum.h	/^    virtual void reset(UErrorCode& status);$/;"	p	class:UStringEnumeration	access:public	signature:(UErrorCode& status)
UStringEnumeration::snext	ustrenum.cpp	/^const UnicodeString* UStringEnumeration::snext(UErrorCode& status) {$/;"	f	class:UStringEnumeration	signature:(UErrorCode& status)
UStringEnumeration::snext	ustrenum.h	/^    virtual const UnicodeString* snext(UErrorCode& status);$/;"	p	class:UStringEnumeration	access:public	signature:(UErrorCode& status)
UStringEnumeration::uenum	ustrenum.h	/^    UEnumeration *uenum; \/\/ owned$/;"	m	class:UStringEnumeration	access:private
UStringEnumeration::~UStringEnumeration	ustrenum.cpp	/^UStringEnumeration::~UStringEnumeration() {$/;"	f	class:UStringEnumeration	signature:()
UStringEnumeration::~UStringEnumeration	ustrenum.h	/^    virtual ~UStringEnumeration();$/;"	p	class:UStringEnumeration	access:public	signature:()
UStringPrepKey	sprpimpl.h	/^struct UStringPrepKey{$/;"	s
UStringPrepKey	sprpimpl.h	/^typedef struct UStringPrepKey UStringPrepKey;$/;"	t	typeref:struct:UStringPrepKey
UStringPrepKey::name	sprpimpl.h	/^    char* name;$/;"	m	struct:UStringPrepKey	access:public
UStringPrepKey::path	sprpimpl.h	/^    char* path;$/;"	m	struct:UStringPrepKey	access:public
UStringPrepProfile	sprpimpl.h	/^struct UStringPrepProfile{$/;"	s
UStringPrepProfile	unicode/usprep.h	/^typedef struct UStringPrepProfile UStringPrepProfile;$/;"	t	typeref:struct:UStringPrepProfile
UStringPrepProfile::bdp	sprpimpl.h	/^    const UBiDiProps *bdp; \/* used only if checkBiDi is set *\/$/;"	m	struct:UStringPrepProfile	access:public
UStringPrepProfile::checkBiDi	sprpimpl.h	/^    UBool checkBiDi;$/;"	m	struct:UStringPrepProfile	access:public
UStringPrepProfile::doNFKC	sprpimpl.h	/^    UBool doNFKC;$/;"	m	struct:UStringPrepProfile	access:public
UStringPrepProfile::indexes	sprpimpl.h	/^    int32_t indexes[_SPREP_INDEX_TOP];$/;"	m	struct:UStringPrepProfile	access:public
UStringPrepProfile::isDataLoaded	sprpimpl.h	/^    UBool isDataLoaded;$/;"	m	struct:UStringPrepProfile	access:public
UStringPrepProfile::mappingData	sprpimpl.h	/^    const uint16_t* mappingData;$/;"	m	struct:UStringPrepProfile	access:public
UStringPrepProfile::refCount	sprpimpl.h	/^    int32_t refCount;$/;"	m	struct:UStringPrepProfile	access:public
UStringPrepProfile::sprepData	sprpimpl.h	/^    UDataMemory* sprepData;$/;"	m	struct:UStringPrepProfile	access:public
UStringPrepProfile::sprepTrie	sprpimpl.h	/^    UTrie sprepTrie;$/;"	m	struct:UStringPrepProfile	access:public
UStringPrepProfileType	unicode/usprep.h	/^typedef enum UStringPrepProfileType {$/;"	g
UStringPrepProfileType	unicode/usprep.h	/^} UStringPrepProfileType;$/;"	t	typeref:enum:UStringPrepProfileType
UStringPrepType	sprpimpl.h	/^enum UStringPrepType{$/;"	g
UStringPrepType	sprpimpl.h	/^typedef enum UStringPrepType UStringPrepType;$/;"	t	typeref:enum:UStringPrepType
UTEXT_CURRENT32	unicode/utext.h	844;"	d
UTEXT_EXTRA_HEAP_ALLOCATED	utext.cpp	/^    UTEXT_EXTRA_HEAP_ALLOCATED = 2, \/\/  1 if ICU has allocated extra storage as a separate$/;"	e	enum:__anon147	file:
UTEXT_GETNATIVEINDEX	unicode/utext.h	890;"	d
UTEXT_HEAP_ALLOCATED	utext.cpp	/^    UTEXT_HEAP_ALLOCATED  = 1,      \/\/  1 if ICU has allocated this UText struct on the heap.$/;"	e	enum:__anon147	file:
UTEXT_INITIALIZER	unicode/utext.h	1711;"	d
UTEXT_MAGIC	unicode/utext.h	/^    UTEXT_MAGIC = 0x345ad82c$/;"	e	enum:__anon110
UTEXT_NEXT32	unicode/utext.h	859;"	d
UTEXT_OPEN	utext.cpp	/^    UTEXT_OPEN = 4                  \/\/  1 if this UText is currently open$/;"	e	enum:__anon147	file:
UTEXT_PREVIOUS32	unicode/utext.h	873;"	d
UTEXT_PROVIDER_HAS_META_DATA	unicode/utext.h	/^    UTEXT_PROVIDER_HAS_META_DATA = 4,$/;"	e	enum:__anon109
UTEXT_PROVIDER_LENGTH_IS_EXPENSIVE	unicode/utext.h	/^    UTEXT_PROVIDER_LENGTH_IS_EXPENSIVE = 1,$/;"	e	enum:__anon109
UTEXT_PROVIDER_OWNS_TEXT	unicode/utext.h	/^     UTEXT_PROVIDER_OWNS_TEXT = 5$/;"	e	enum:__anon109
UTEXT_PROVIDER_STABLE_CHUNKS	unicode/utext.h	/^    UTEXT_PROVIDER_STABLE_CHUNKS = 2,$/;"	e	enum:__anon109
UTEXT_PROVIDER_WRITABLE	unicode/utext.h	/^    UTEXT_PROVIDER_WRITABLE = 3,$/;"	e	enum:__anon109
UTEXT_SETNATIVEINDEX	unicode/utext.h	906;"	d
UTF16	unisetspan.h	/^        UTF16           = 8,$/;"	e	enum:UnicodeSetStringSpan::__anon19
UTF16_APPEND_CHAR_SAFE	unicode/utf_old.h	663;"	d
UTF16_APPEND_CHAR_UNSAFE	unicode/utf_old.h	611;"	d
UTF16_ARRAY_SIZE	unicode/utf_old.h	551;"	d
UTF16_BACK_1_SAFE	unicode/utf_old.h	738;"	d
UTF16_BACK_1_UNSAFE	unicode/utf_old.h	696;"	d
UTF16_BACK_N_SAFE	unicode/utf_old.h	741;"	d
UTF16_BACK_N_UNSAFE	unicode/utf_old.h	703;"	d
UTF16_CHAR_LENGTH	unicode/utf_old.h	545;"	d
UTF16_FWD_1_SAFE	unicode/utf_old.h	679;"	d
UTF16_FWD_1_UNSAFE	unicode/utf_old.h	621;"	d
UTF16_FWD_N_SAFE	unicode/utf_old.h	682;"	d
UTF16_FWD_N_UNSAFE	unicode/utf_old.h	628;"	d
UTF16_GET_CHAR_SAFE	unicode/utf_old.h	576;"	d
UTF16_GET_CHAR_UNSAFE	unicode/utf_old.h	564;"	d
UTF16_GET_PAIR_VALUE	unicode/utf_old.h	517;"	d
UTF16_IS_LEAD	unicode/utf_old.h	536;"	d
UTF16_IS_SINGLE	unicode/utf_old.h	533;"	d
UTF16_IS_TRAIL	unicode/utf_old.h	539;"	d
UTF16_LEAD	unicode/utf_old.h	527;"	d
UTF16_MAX_CHAR_LENGTH	unicode/utf_old.h	548;"	d
UTF16_NEED_MULTIPLE_UCHAR	unicode/utf_old.h	542;"	d
UTF16_NEXT_CHAR_SAFE	unicode/utf_old.h	644;"	d
UTF16_NEXT_CHAR_UNSAFE	unicode/utf_old.h	603;"	d
UTF16_PREV_CHAR_SAFE	unicode/utf_old.h	719;"	d
UTF16_PREV_CHAR_UNSAFE	unicode/utf_old.h	688;"	d
UTF16_SET_CHAR_LIMIT_SAFE	unicode/utf_old.h	744;"	d
UTF16_SET_CHAR_LIMIT_UNSAFE	unicode/utf_old.h	712;"	d
UTF16_SET_CHAR_START_SAFE	unicode/utf_old.h	685;"	d
UTF16_SET_CHAR_START_UNSAFE	unicode/utf_old.h	637;"	d
UTF16_TRAIL	unicode/utf_old.h	530;"	d
UTF32_APPEND_CHAR_SAFE	unicode/utf_old.h	848;"	d
UTF32_APPEND_CHAR_UNSAFE	unicode/utf_old.h	821;"	d
UTF32_ARRAY_SIZE	unicode/utf_old.h	798;"	d
UTF32_BACK_1_SAFE	unicode/utf_old.h	902;"	d
UTF32_BACK_1_UNSAFE	unicode/utf_old.h	880;"	d
UTF32_BACK_N_SAFE	unicode/utf_old.h	907;"	d
UTF32_BACK_N_UNSAFE	unicode/utf_old.h	885;"	d
UTF32_CHAR_LENGTH	unicode/utf_old.h	791;"	d
UTF32_FWD_1_SAFE	unicode/utf_old.h	857;"	d
UTF32_FWD_1_UNSAFE	unicode/utf_old.h	826;"	d
UTF32_FWD_N_SAFE	unicode/utf_old.h	862;"	d
UTF32_FWD_N_UNSAFE	unicode/utf_old.h	831;"	d
UTF32_GET_CHAR_SAFE	unicode/utf_old.h	806;"	d
UTF32_GET_CHAR_UNSAFE	unicode/utf_old.h	801;"	d
UTF32_IS_LEAD	unicode/utf_old.h	782;"	d
UTF32_IS_SAFE	unicode/utf_old.h	764;"	d
UTF32_IS_SINGLE	unicode/utf_old.h	780;"	d
UTF32_IS_TRAIL	unicode/utf_old.h	784;"	d
UTF32_MAX_CHAR_LENGTH	unicode/utf_old.h	793;"	d
UTF32_NEED_MULTIPLE_UCHAR	unicode/utf_old.h	789;"	d
UTF32_NEXT_CHAR_SAFE	unicode/utf_old.h	840;"	d
UTF32_NEXT_CHAR_UNSAFE	unicode/utf_old.h	816;"	d
UTF32_PREV_CHAR_SAFE	unicode/utf_old.h	894;"	d
UTF32_PREV_CHAR_UNSAFE	unicode/utf_old.h	875;"	d
UTF32_SET_CHAR_LIMIT_SAFE	unicode/utf_old.h	915;"	d
UTF32_SET_CHAR_LIMIT_UNSAFE	unicode/utf_old.h	890;"	d
UTF32_SET_CHAR_START_SAFE	unicode/utf_old.h	869;"	d
UTF32_SET_CHAR_START_UNSAFE	unicode/utf_old.h	836;"	d
UTF8	unisetspan.h	/^        UTF8            = 4,$/;"	e	enum:UnicodeSetStringSpan::__anon19
UTF8Buf	utext.cpp	/^struct UTF8Buf {$/;"	s	file:
UTF8Buf::align	utext.cpp	/^    int32_t   align;$/;"	m	struct:UTF8Buf	file:	access:public
UTF8Buf::buf	utext.cpp	/^    UChar     buf[UTF8_TEXT_CHUNK_SIZE+4];           \/\/ The UChar buffer.  Requires one extra position beyond the$/;"	m	struct:UTF8Buf	file:	access:public
UTF8Buf::bufLimitIdx	utext.cpp	/^    int32_t   bufLimitIdx;                           \/\/ Limit of filled range in buf.$/;"	m	struct:UTF8Buf	file:	access:public
UTF8Buf::bufNILimit	utext.cpp	/^    int32_t   bufNILimit;                            \/\/ Limit of native indexing part of buf$/;"	m	struct:UTF8Buf	file:	access:public
UTF8Buf::bufNativeLimit	utext.cpp	/^    int32_t   bufNativeLimit;                        \/\/ Native index following last char in buf.$/;"	m	struct:UTF8Buf	file:	access:public
UTF8Buf::bufNativeStart	utext.cpp	/^    int32_t   bufNativeStart;                        \/\/ Native index of first char in UChar buf$/;"	m	struct:UTF8Buf	file:	access:public
UTF8Buf::bufStartIdx	utext.cpp	/^    int32_t   bufStartIdx;                           \/\/ First filled position in buf.$/;"	m	struct:UTF8Buf	file:	access:public
UTF8Buf::mapToNative	utext.cpp	/^    uint8_t   mapToNative[UTF8_TEXT_CHUNK_SIZE+4];   \/\/ map UChar index in buf to$/;"	m	struct:UTF8Buf	file:	access:public
UTF8Buf::mapToUChars	utext.cpp	/^    uint8_t   mapToUChars[UTF8_TEXT_CHUNK_SIZE*3+6]; \/\/ Map native offset from bufNativeStart to$/;"	m	struct:UTF8Buf	file:	access:public
UTF8Buf::toUCharsMapStart	utext.cpp	/^    int32_t   toUCharsMapStart;                      \/\/ Native index corresponding to$/;"	m	struct:UTF8Buf	file:	access:public
UTF8_APPEND_CHAR_SAFE	unicode/utf_old.h	421;"	d
UTF8_APPEND_CHAR_UNSAFE	unicode/utf_old.h	370;"	d
UTF8_ARRAY_SIZE	unicode/utf_old.h	333;"	d
UTF8_BACK_1_SAFE	unicode/utf_old.h	494;"	d
UTF8_BACK_1_UNSAFE	unicode/utf_old.h	462;"	d
UTF8_BACK_N_SAFE	unicode/utf_old.h	497;"	d
UTF8_BACK_N_UNSAFE	unicode/utf_old.h	467;"	d
UTF8_CHAR_LENGTH	unicode/utf_old.h	308;"	d
UTF8_CHAR_LENGTH	unicode/utf_old.h	315;"	d
UTF8_COUNT_TRAIL_BYTES	unicode/utf_old.h	276;"	d
UTF8_ERROR_VALUE_1	unicode/utf_old.h	198;"	d
UTF8_ERROR_VALUE_2	unicode/utf_old.h	205;"	d
UTF8_FWD_1_SAFE	unicode/utf_old.h	430;"	d
UTF8_FWD_1_UNSAFE	unicode/utf_old.h	390;"	d
UTF8_FWD_N_SAFE	unicode/utf_old.h	433;"	d
UTF8_FWD_N_UNSAFE	unicode/utf_old.h	395;"	d
UTF8_GET_CHAR_SAFE	unicode/utf_old.h	343;"	d
UTF8_GET_CHAR_UNSAFE	unicode/utf_old.h	336;"	d
UTF8_IS_LEAD	unicode/utf_old.h	287;"	d
UTF8_IS_SINGLE	unicode/utf_old.h	285;"	d
UTF8_IS_TRAIL	unicode/utf_old.h	289;"	d
UTF8_MASK_LEAD_BYTE	unicode/utf_old.h	282;"	d
UTF8_MAX_CHAR_LENGTH	unicode/utf_old.h	330;"	d
UTF8_NEED_MULTIPLE_UCHAR	unicode/utf_old.h	292;"	d
UTF8_NEXT_CHAR_SAFE	unicode/utf_old.h	409;"	d
UTF8_NEXT_CHAR_UNSAFE	unicode/utf_old.h	350;"	d
UTF8_PREV_CHAR_SAFE	unicode/utf_old.h	482;"	d
UTF8_PREV_CHAR_UNSAFE	unicode/utf_old.h	439;"	d
UTF8_SET_CHAR_LIMIT_SAFE	unicode/utf_old.h	500;"	d
UTF8_SET_CHAR_LIMIT_UNSAFE	unicode/utf_old.h	476;"	d
UTF8_SET_CHAR_START_SAFE	unicode/utf_old.h	436;"	d
UTF8_SET_CHAR_START_UNSAFE	unicode/utf_old.h	404;"	d
UTF8_TEXT_CHUNK_SIZE	utext.cpp	/^enum { UTF8_TEXT_CHUNK_SIZE=32 };$/;"	e	enum:__anon148	file:
UTF_APPEND_CHAR	unicode/utf_old.h	1075;"	d
UTF_APPEND_CHAR_SAFE	unicode/utf_old.h	945;"	d
UTF_APPEND_CHAR_UNSAFE	unicode/utf_old.h	942;"	d
UTF_ARRAY_SIZE	unicode/utf_old.h	925;"	d
UTF_BACK_1	unicode/utf_old.h	1139;"	d
UTF_BACK_1_SAFE	unicode/utf_old.h	980;"	d
UTF_BACK_1_UNSAFE	unicode/utf_old.h	977;"	d
UTF_BACK_N	unicode/utf_old.h	1152;"	d
UTF_BACK_N_SAFE	unicode/utf_old.h	987;"	d
UTF_BACK_N_UNSAFE	unicode/utf_old.h	984;"	d
UTF_CHAR_LENGTH	unicode/utf_old.h	1031;"	d
UTF_ERROR_VALUE	unicode/utf_old.h	213;"	d
UTF_FIRST_SURROGATE	unicode/utf_old.h	521;"	d
UTF_FWD_1	unicode/utf_old.h	1086;"	d
UTF_FWD_1_SAFE	unicode/utf_old.h	952;"	d
UTF_FWD_1_UNSAFE	unicode/utf_old.h	949;"	d
UTF_FWD_N	unicode/utf_old.h	1097;"	d
UTF_FWD_N_SAFE	unicode/utf_old.h	959;"	d
UTF_FWD_N_UNSAFE	unicode/utf_old.h	956;"	d
UTF_GET_CHAR	unicode/utf_old.h	1049;"	d
UTF_GET_CHAR_SAFE	unicode/utf_old.h	931;"	d
UTF_GET_CHAR_UNSAFE	unicode/utf_old.h	928;"	d
UTF_IS_ERROR	unicode/utf_old.h	221;"	d
UTF_IS_FIRST_SURROGATE	unicode/utf_old.h	505;"	d
UTF_IS_LEAD	unicode/utf_old.h	1010;"	d
UTF_IS_SECOND_SURROGATE	unicode/utf_old.h	508;"	d
UTF_IS_SINGLE	unicode/utf_old.h	1003;"	d
UTF_IS_SURROGATE	unicode/utf_old.h	237;"	d
UTF_IS_SURROGATE_FIRST	unicode/utf_old.h	511;"	d
UTF_IS_TRAIL	unicode/utf_old.h	1017;"	d
UTF_IS_UNICODE_CHAR	unicode/utf_old.h	264;"	d
UTF_IS_UNICODE_NONCHAR	unicode/utf_old.h	244;"	d
UTF_IS_VALID	unicode/utf_old.h	229;"	d
UTF_MAX_CHAR_LENGTH	unicode/utf_old.h	1038;"	d
UTF_NEED_MULTIPLE_UCHAR	unicode/utf_old.h	1024;"	d
UTF_NEXT_CHAR	unicode/utf_old.h	1062;"	d
UTF_NEXT_CHAR_SAFE	unicode/utf_old.h	938;"	d
UTF_NEXT_CHAR_UNSAFE	unicode/utf_old.h	935;"	d
UTF_PREV_CHAR	unicode/utf_old.h	1126;"	d
UTF_PREV_CHAR_SAFE	unicode/utf_old.h	973;"	d
UTF_PREV_CHAR_UNSAFE	unicode/utf_old.h	970;"	d
UTF_SAFE	unicode/utf_old.h	178;"	d
UTF_SECOND_SURROGATE	unicode/utf_old.h	524;"	d
UTF_SET_CHAR_LIMIT	unicode/utf_old.h	1168;"	d
UTF_SET_CHAR_LIMIT_SAFE	unicode/utf_old.h	994;"	d
UTF_SET_CHAR_LIMIT_UNSAFE	unicode/utf_old.h	991;"	d
UTF_SET_CHAR_START	unicode/utf_old.h	1113;"	d
UTF_SET_CHAR_START_SAFE	unicode/utf_old.h	966;"	d
UTF_SET_CHAR_START_UNSAFE	unicode/utf_old.h	963;"	d
UTF_SIZE	unicode/utf_old.h	170;"	d
UTF_STRICT	unicode/utf_old.h	182;"	d
UTF_SURROGATE_OFFSET	unicode/utf_old.h	514;"	d
UTF_UNSAFE	unicode/utf_old.h	180;"	d
UTRACE_COLLATION_LIMIT	unicode/utrace.h	/^    UTRACE_COLLATION_LIMIT$/;"	e	enum:UTraceFunctionNumber
UTRACE_COLLATION_START	unicode/utrace.h	/^    UTRACE_COLLATION_START=0x2000,$/;"	e	enum:UTraceFunctionNumber
UTRACE_CONVERSION_LIMIT	unicode/utrace.h	/^    UTRACE_CONVERSION_LIMIT,$/;"	e	enum:UTraceFunctionNumber
UTRACE_CONVERSION_START	unicode/utrace.h	/^    UTRACE_CONVERSION_START=0x1000,$/;"	e	enum:UTraceFunctionNumber
UTRACE_DATA0	utracimp.h	235;"	d
UTRACE_DATA1	utracimp.h	248;"	d
UTRACE_DATA2	utracimp.h	261;"	d
UTRACE_DATA3	utracimp.h	274;"	d
UTRACE_DATA4	utracimp.h	287;"	d
UTRACE_DATA5	utracimp.h	300;"	d
UTRACE_DATA6	utracimp.h	313;"	d
UTRACE_DATA7	utracimp.h	326;"	d
UTRACE_DATA8	utracimp.h	339;"	d
UTRACE_DATA9	utracimp.h	352;"	d
UTRACE_ENTRY	utracimp.h	157;"	d
UTRACE_ENTRY_OC	utracimp.h	175;"	d
UTRACE_ERROR	unicode/utrace.h	/^    UTRACE_ERROR=0,$/;"	e	enum:UTraceLevel
UTRACE_EXIT	utracimp.h	194;"	d
UTRACE_EXITV_BOOL	utracimp.h	/^    UTRACE_EXITV_BOOL   = 3,$/;"	e	enum:UTraceExitVal
UTRACE_EXITV_I32	utracimp.h	/^    UTRACE_EXITV_I32    = 1,$/;"	e	enum:UTraceExitVal
UTRACE_EXITV_MASK	utracimp.h	/^    UTRACE_EXITV_MASK   = 0xf,$/;"	e	enum:UTraceExitVal
UTRACE_EXITV_NONE	utracimp.h	/^    UTRACE_EXITV_NONE   = 0,$/;"	e	enum:UTraceExitVal
UTRACE_EXITV_PTR	utracimp.h	/^    UTRACE_EXITV_PTR    = 2,$/;"	e	enum:UTraceExitVal
UTRACE_EXITV_STATUS	utracimp.h	/^    UTRACE_EXITV_STATUS = 0x10$/;"	e	enum:UTraceExitVal
UTRACE_EXIT_PTR_STATUS	utracimp.h	222;"	d
UTRACE_EXIT_STATUS	utracimp.h	212;"	d
UTRACE_EXIT_VALUE	utracimp.h	207;"	d
UTRACE_EXIT_VALUE_STATUS	utracimp.h	217;"	d
UTRACE_FUNCTION_LIMIT	unicode/utrace.h	/^    UTRACE_FUNCTION_LIMIT,$/;"	e	enum:UTraceFunctionNumber
UTRACE_FUNCTION_START	unicode/utrace.h	/^    UTRACE_FUNCTION_START=0,$/;"	e	enum:UTraceFunctionNumber
UTRACE_IMPL	utrace.c	12;"	d	file:
UTRACE_INFO	unicode/utrace.h	/^    UTRACE_INFO=7,$/;"	e	enum:UTraceLevel
UTRACE_LEVEL	utracimp.h	129;"	d
UTRACE_OFF	unicode/utrace.h	/^    UTRACE_OFF=-1,$/;"	e	enum:UTraceLevel
UTRACE_OPEN_CLOSE	unicode/utrace.h	/^    UTRACE_OPEN_CLOSE=5,$/;"	e	enum:UTraceLevel
UTRACE_TRACED_ENTRY	utracimp.h	141;"	d
UTRACE_UCNV_CLONE	unicode/utrace.h	/^    UTRACE_UCNV_CLONE,$/;"	e	enum:UTraceFunctionNumber
UTRACE_UCNV_CLOSE	unicode/utrace.h	/^    UTRACE_UCNV_CLOSE,$/;"	e	enum:UTraceFunctionNumber
UTRACE_UCNV_FLUSH_CACHE	unicode/utrace.h	/^    UTRACE_UCNV_FLUSH_CACHE,$/;"	e	enum:UTraceFunctionNumber
UTRACE_UCNV_LOAD	unicode/utrace.h	/^    UTRACE_UCNV_LOAD,$/;"	e	enum:UTraceFunctionNumber
UTRACE_UCNV_OPEN	unicode/utrace.h	/^    UTRACE_UCNV_OPEN=UTRACE_CONVERSION_START,$/;"	e	enum:UTraceFunctionNumber
UTRACE_UCNV_OPEN_ALGORITHMIC	unicode/utrace.h	/^    UTRACE_UCNV_OPEN_ALGORITHMIC,$/;"	e	enum:UTraceFunctionNumber
UTRACE_UCNV_OPEN_PACKAGE	unicode/utrace.h	/^    UTRACE_UCNV_OPEN_PACKAGE,$/;"	e	enum:UTraceFunctionNumber
UTRACE_UCNV_UNLOAD	unicode/utrace.h	/^    UTRACE_UCNV_UNLOAD,$/;"	e	enum:UTraceFunctionNumber
UTRACE_UCOL_CLOSE	unicode/utrace.h	/^    UTRACE_UCOL_CLOSE,$/;"	e	enum:UTraceFunctionNumber
UTRACE_UCOL_GETLOCALE	unicode/utrace.h	/^    UTRACE_UCOL_GETLOCALE,$/;"	e	enum:UTraceFunctionNumber
UTRACE_UCOL_GET_SORTKEY	unicode/utrace.h	/^    UTRACE_UCOL_GET_SORTKEY,$/;"	e	enum:UTraceFunctionNumber
UTRACE_UCOL_NEXTSORTKEYPART	unicode/utrace.h	/^    UTRACE_UCOL_NEXTSORTKEYPART,$/;"	e	enum:UTraceFunctionNumber
UTRACE_UCOL_OPEN	unicode/utrace.h	/^    UTRACE_UCOL_OPEN=UTRACE_COLLATION_START,$/;"	e	enum:UTraceFunctionNumber
UTRACE_UCOL_OPEN_FROM_SHORT_STRING	unicode/utrace.h	/^    UTRACE_UCOL_OPEN_FROM_SHORT_STRING,$/;"	e	enum:UTraceFunctionNumber
UTRACE_UCOL_STRCOLL	unicode/utrace.h	/^    UTRACE_UCOL_STRCOLL,$/;"	e	enum:UTraceFunctionNumber
UTRACE_UCOL_STRCOLLITER	unicode/utrace.h	/^    UTRACE_UCOL_STRCOLLITER,$/;"	e	enum:UTraceFunctionNumber
UTRACE_U_CLEANUP	unicode/utrace.h	/^    UTRACE_U_CLEANUP,$/;"	e	enum:UTraceFunctionNumber
UTRACE_U_INIT	unicode/utrace.h	/^    UTRACE_U_INIT=UTRACE_FUNCTION_START,$/;"	e	enum:UTraceFunctionNumber
UTRACE_VERBOSE	unicode/utrace.h	/^    UTRACE_VERBOSE=9$/;"	e	enum:UTraceLevel
UTRACE_WARNING	unicode/utrace.h	/^    UTRACE_WARNING=3,$/;"	e	enum:UTraceLevel
UTRIE2_16_VALUE_BITS	utrie2.h	/^    UTRIE2_16_VALUE_BITS,$/;"	e	enum:UTrie2ValueBits
UTRIE2_32_VALUE_BITS	utrie2.h	/^    UTRIE2_32_VALUE_BITS,$/;"	e	enum:UTrie2ValueBits
UTRIE2_BAD_UTF8_DATA_OFFSET	utrie2.h	/^    UTRIE2_BAD_UTF8_DATA_OFFSET=0x80,$/;"	e	enum:__anon7
UTRIE2_COUNT_VALUE_BITS	utrie2.h	/^    UTRIE2_COUNT_VALUE_BITS$/;"	e	enum:UTrie2ValueBits
UTRIE2_CP_PER_INDEX_1_ENTRY	utrie2.h	/^    UTRIE2_CP_PER_INDEX_1_ENTRY=1<<UTRIE2_SHIFT_1,$/;"	e	enum:__anon7
UTRIE2_DATA_BLOCK_LENGTH	utrie2.h	/^    UTRIE2_DATA_BLOCK_LENGTH=1<<UTRIE2_SHIFT_2,$/;"	e	enum:__anon7
UTRIE2_DATA_GRANULARITY	utrie2.h	/^    UTRIE2_DATA_GRANULARITY=1<<UTRIE2_INDEX_SHIFT,$/;"	e	enum:__anon7
UTRIE2_DATA_MASK	utrie2.h	/^    UTRIE2_DATA_MASK=UTRIE2_DATA_BLOCK_LENGTH-1,$/;"	e	enum:__anon7
UTRIE2_DATA_START_OFFSET	utrie2.h	/^    UTRIE2_DATA_START_OFFSET=0xc0$/;"	e	enum:__anon7
UTRIE2_GET16	utrie2.h	389;"	d
UTRIE2_GET16_FROM_SUPP	utrie2.h	606;"	d
UTRIE2_GET16_FROM_U16_SINGLE_LEAD	utrie2.h	586;"	d
UTRIE2_GET32	utrie2.h	399;"	d
UTRIE2_GET32_FROM_SUPP	utrie2.h	615;"	d
UTRIE2_GET32_FROM_U16_SINGLE_LEAD	utrie2.h	597;"	d
UTRIE2_INDEX_1_OFFSET	utrie2.h	/^    UTRIE2_INDEX_1_OFFSET=UTRIE2_UTF8_2B_INDEX_2_OFFSET+UTRIE2_UTF8_2B_INDEX_2_LENGTH,$/;"	e	enum:__anon7
UTRIE2_INDEX_2_BLOCK_LENGTH	utrie2.h	/^    UTRIE2_INDEX_2_BLOCK_LENGTH=1<<UTRIE2_SHIFT_1_2,$/;"	e	enum:__anon7
UTRIE2_INDEX_2_BMP_LENGTH	utrie2.h	/^    UTRIE2_INDEX_2_BMP_LENGTH=UTRIE2_LSCP_INDEX_2_OFFSET+UTRIE2_LSCP_INDEX_2_LENGTH,$/;"	e	enum:__anon7
UTRIE2_INDEX_2_MASK	utrie2.h	/^    UTRIE2_INDEX_2_MASK=UTRIE2_INDEX_2_BLOCK_LENGTH-1,$/;"	e	enum:__anon7
UTRIE2_INDEX_2_OFFSET	utrie2.h	/^    UTRIE2_INDEX_2_OFFSET=0,$/;"	e	enum:__anon7
UTRIE2_INDEX_SHIFT	utrie2.h	/^    UTRIE2_INDEX_SHIFT=2,$/;"	e	enum:__anon7
UTRIE2_LSCP_INDEX_2_LENGTH	utrie2.h	/^    UTRIE2_LSCP_INDEX_2_LENGTH=0x400>>UTRIE2_SHIFT_2,$/;"	e	enum:__anon7
UTRIE2_LSCP_INDEX_2_OFFSET	utrie2.h	/^    UTRIE2_LSCP_INDEX_2_OFFSET=0x10000>>UTRIE2_SHIFT_2,$/;"	e	enum:__anon7
UTRIE2_MAX_DATA_LENGTH	utrie2_builder.c	1247;"	d	file:
UTRIE2_MAX_INDEX_1_LENGTH	utrie2.h	/^    UTRIE2_MAX_INDEX_1_LENGTH=0x100000>>UTRIE2_SHIFT_1,$/;"	e	enum:__anon7
UTRIE2_MAX_INDEX_LENGTH	utrie2_builder.c	1240;"	d	file:
UTRIE2_OE_SIG	utrie2_impl.h	40;"	d
UTRIE2_OMITTED_BMP_INDEX_1_LENGTH	utrie2.h	/^    UTRIE2_OMITTED_BMP_INDEX_1_LENGTH=0x10000>>UTRIE2_SHIFT_1,$/;"	e	enum:__anon7
UTRIE2_OPTIONS_VALUE_BITS_MASK	utrie2_impl.h	/^    UTRIE2_OPTIONS_VALUE_BITS_MASK=0xf$/;"	e	enum:__anon30
UTRIE2_SHIFT_1	utrie2.h	/^    UTRIE2_SHIFT_1=6+5,$/;"	e	enum:__anon7
UTRIE2_SHIFT_1_2	utrie2.h	/^    UTRIE2_SHIFT_1_2=UTRIE2_SHIFT_1-UTRIE2_SHIFT_2,$/;"	e	enum:__anon7
UTRIE2_SHIFT_2	utrie2.h	/^    UTRIE2_SHIFT_2=5,$/;"	e	enum:__anon7
UTRIE2_SIG	utrie2_impl.h	39;"	d
UTRIE2_U16_NEXT16	utrie2.h	411;"	d
UTRIE2_U16_NEXT32	utrie2.h	423;"	d
UTRIE2_U16_PREV16	utrie2.h	435;"	d
UTRIE2_U16_PREV32	utrie2.h	447;"	d
UTRIE2_U8_NEXT16	utrie2.h	457;"	d
UTRIE2_U8_NEXT32	utrie2.h	468;"	d
UTRIE2_U8_PREV16	utrie2.h	479;"	d
UTRIE2_U8_PREV32	utrie2.h	490;"	d
UTRIE2_UTF8_2B_INDEX_2_LENGTH	utrie2.h	/^    UTRIE2_UTF8_2B_INDEX_2_LENGTH=0x800>>6,  \/* U+0800 is the first code point after 2-byte UTF-8 *\/$/;"	e	enum:__anon7
UTRIE2_UTF8_2B_INDEX_2_OFFSET	utrie2.h	/^    UTRIE2_UTF8_2B_INDEX_2_OFFSET=UTRIE2_INDEX_2_BMP_LENGTH,$/;"	e	enum:__anon7
UTRIE_BMP_INDEX_LENGTH	utrie.h	/^    UTRIE_BMP_INDEX_LENGTH=0x10000>>UTRIE_SHIFT$/;"	e	enum:__anon3
UTRIE_DATA_BLOCK_LENGTH	utrie.h	/^    UTRIE_DATA_BLOCK_LENGTH=1<<UTRIE_SHIFT,$/;"	e	enum:__anon3
UTRIE_DATA_GRANULARITY	utrie.h	/^    UTRIE_DATA_GRANULARITY=1<<UTRIE_INDEX_SHIFT,$/;"	e	enum:__anon3
UTRIE_DUMMY_SIZE	utrie.h	128;"	d
UTRIE_GET16	utrie.h	335;"	d
UTRIE_GET16_FROM_BMP	utrie.h	313;"	d
UTRIE_GET16_FROM_LEAD	utrie.h	292;"	d
UTRIE_GET16_FROM_OFFSET_TRAIL	utrie.h	429;"	d
UTRIE_GET16_FROM_PAIR	utrie.h	408;"	d
UTRIE_GET16_LATIN1	utrie.h	271;"	d
UTRIE_GET32	utrie.h	346;"	d
UTRIE_GET32_FROM_BMP	utrie.h	324;"	d
UTRIE_GET32_FROM_LEAD	utrie.h	302;"	d
UTRIE_GET32_FROM_OFFSET_TRAIL	utrie.h	440;"	d
UTRIE_GET32_FROM_PAIR	utrie.h	418;"	d
UTRIE_GET32_LATIN1	utrie.h	282;"	d
UTRIE_INDEX_SHIFT	utrie.h	/^    UTRIE_INDEX_SHIFT=2,$/;"	e	enum:__anon3
UTRIE_LEAD_INDEX_DISP	utrie.h	/^    UTRIE_LEAD_INDEX_DISP=0x2800>>UTRIE_SHIFT,$/;"	e	enum:__anon3
UTRIE_MASK	utrie.h	/^    UTRIE_MASK=UTRIE_DATA_BLOCK_LENGTH-1,$/;"	e	enum:__anon3
UTRIE_MAX_BUILD_TIME_DATA_LENGTH	utrie.h	111;"	d
UTRIE_MAX_DATA_LENGTH	utrie.h	103;"	d
UTRIE_MAX_INDEX_LENGTH	utrie.h	97;"	d
UTRIE_NEXT16	utrie.h	359;"	d
UTRIE_NEXT32	utrie.h	372;"	d
UTRIE_OE_SIG	utrie2_impl.h	37;"	d
UTRIE_OPTIONS_DATA_IS_32_BIT	utrie.h	/^    UTRIE_OPTIONS_DATA_IS_32_BIT=0x100,$/;"	e	enum:__anon4
UTRIE_OPTIONS_INDEX_SHIFT	utrie.h	/^    UTRIE_OPTIONS_INDEX_SHIFT=4,$/;"	e	enum:__anon4
UTRIE_OPTIONS_LATIN1_IS_LINEAR	utrie.h	/^    UTRIE_OPTIONS_LATIN1_IS_LINEAR=0x200$/;"	e	enum:__anon4
UTRIE_OPTIONS_SHIFT_MASK	utrie.h	/^    UTRIE_OPTIONS_SHIFT_MASK=0xf,$/;"	e	enum:__anon4
UTRIE_PREVIOUS16	utrie.h	385;"	d
UTRIE_PREVIOUS32	utrie.h	398;"	d
UTRIE_SHIFT	utrie.h	/^    UTRIE_SHIFT=5,$/;"	e	enum:__anon3
UTRIE_SIG	utrie2_impl.h	36;"	d
UTRIE_SURROGATE_BLOCK_BITS	utrie.h	/^    UTRIE_SURROGATE_BLOCK_BITS=10-UTRIE_SHIFT,$/;"	e	enum:__anon3
UTRIE_SURROGATE_BLOCK_COUNT	utrie.h	/^    UTRIE_SURROGATE_BLOCK_COUNT=(1<<UTRIE_SURROGATE_BLOCK_BITS),$/;"	e	enum:__anon3
UTS46	unicode/idna.h	/^    friend class UTS46;$/;"	x
UTS46	unicode/idna.h	/^class UTS46;$/;"	x
UTS46	unicode/urename.h	2198;"	d
UTS46	uts46.cpp	/^    UTS46(uint32_t options, UErrorCode &errorCode);$/;"	p	class:UTS46	file:	access:public	signature:(uint32_t options, UErrorCode &errorCode)
UTS46	uts46.cpp	/^UTS46::UTS46(uint32_t opt, UErrorCode &errorCode)$/;"	f	class:UTS46	signature:(uint32_t opt, UErrorCode &errorCode)
UTS46	uts46.cpp	/^class UTS46 : public IDNA {$/;"	c	file:	inherits:IDNA
UTS46::UTS46	uts46.cpp	/^    UTS46(uint32_t options, UErrorCode &errorCode);$/;"	p	class:UTS46	file:	access:public	signature:(uint32_t options, UErrorCode &errorCode)
UTS46::UTS46	uts46.cpp	/^UTS46::UTS46(uint32_t opt, UErrorCode &errorCode)$/;"	f	class:UTS46	signature:(uint32_t opt, UErrorCode &errorCode)
UTS46::checkLabelBiDi	uts46.cpp	/^    checkLabelBiDi(const UChar *label, int32_t labelLength, IDNAInfo &info) const;$/;"	p	class:UTS46	file:	access:private	signature:(const UChar *label, int32_t labelLength, IDNAInfo &info) const
UTS46::checkLabelBiDi	uts46.cpp	/^UTS46::checkLabelBiDi(const UChar *label, int32_t labelLength, IDNAInfo &info) const {$/;"	f	class:UTS46	signature:(const UChar *label, int32_t labelLength, IDNAInfo &info) const
UTS46::isLabelOkContextJ	uts46.cpp	/^    isLabelOkContextJ(const UChar *label, int32_t labelLength) const;$/;"	p	class:UTS46	file:	access:private	signature:(const UChar *label, int32_t labelLength) const
UTS46::isLabelOkContextJ	uts46.cpp	/^UTS46::isLabelOkContextJ(const UChar *label, int32_t labelLength) const {$/;"	f	class:UTS46	signature:(const UChar *label, int32_t labelLength) const
UTS46::labelToASCII	uts46.cpp	/^    labelToASCII(const UnicodeString &label, UnicodeString &dest,$/;"	p	class:UTS46	file:	access:public	signature:(const UnicodeString &label, UnicodeString &dest, IDNAInfo &info, UErrorCode &errorCode) const
UTS46::labelToASCII	uts46.cpp	/^UTS46::labelToASCII(const UnicodeString &label, UnicodeString &dest,$/;"	f	class:UTS46	signature:(const UnicodeString &label, UnicodeString &dest, IDNAInfo &info, UErrorCode &errorCode) const
UTS46::labelToASCII_UTF8	uts46.cpp	/^    labelToASCII_UTF8(const StringPiece &label, ByteSink &dest,$/;"	p	class:UTS46	file:	access:public	signature:(const StringPiece &label, ByteSink &dest, IDNAInfo &info, UErrorCode &errorCode) const
UTS46::labelToASCII_UTF8	uts46.cpp	/^UTS46::labelToASCII_UTF8(const StringPiece &label, ByteSink &dest,$/;"	f	class:UTS46	signature:(const StringPiece &label, ByteSink &dest, IDNAInfo &info, UErrorCode &errorCode) const
UTS46::labelToUnicode	uts46.cpp	/^    labelToUnicode(const UnicodeString &label, UnicodeString &dest,$/;"	p	class:UTS46	file:	access:public	signature:(const UnicodeString &label, UnicodeString &dest, IDNAInfo &info, UErrorCode &errorCode) const
UTS46::labelToUnicode	uts46.cpp	/^UTS46::labelToUnicode(const UnicodeString &label, UnicodeString &dest,$/;"	f	class:UTS46	signature:(const UnicodeString &label, UnicodeString &dest, IDNAInfo &info, UErrorCode &errorCode) const
UTS46::labelToUnicodeUTF8	uts46.cpp	/^    labelToUnicodeUTF8(const StringPiece &label, ByteSink &dest,$/;"	p	class:UTS46	file:	access:public	signature:(const StringPiece &label, ByteSink &dest, IDNAInfo &info, UErrorCode &errorCode) const
UTS46::labelToUnicodeUTF8	uts46.cpp	/^UTS46::labelToUnicodeUTF8(const StringPiece &label, ByteSink &dest,$/;"	f	class:UTS46	signature:(const StringPiece &label, ByteSink &dest, IDNAInfo &info, UErrorCode &errorCode) const
UTS46::mapDevChars	uts46.cpp	/^    mapDevChars(UnicodeString &dest, int32_t labelStart, int32_t mappingStart,$/;"	p	class:UTS46	file:	access:private	signature:(UnicodeString &dest, int32_t labelStart, int32_t mappingStart, UErrorCode &errorCode) const
UTS46::mapDevChars	uts46.cpp	/^UTS46::mapDevChars(UnicodeString &dest, int32_t labelStart, int32_t mappingStart,$/;"	f	class:UTS46	signature:(UnicodeString &dest, int32_t labelStart, int32_t mappingStart, UErrorCode &errorCode) const
UTS46::markBadACELabel	uts46.cpp	/^    markBadACELabel(UnicodeString &dest,$/;"	p	class:UTS46	file:	access:private	signature:(UnicodeString &dest, int32_t labelStart, int32_t labelLength, UBool toASCII, IDNAInfo &info) const
UTS46::markBadACELabel	uts46.cpp	/^UTS46::markBadACELabel(UnicodeString &dest,$/;"	f	class:UTS46	signature:(UnicodeString &dest, int32_t labelStart, int32_t labelLength, UBool toASCII, IDNAInfo &info) const
UTS46::nameToASCII	uts46.cpp	/^    nameToASCII(const UnicodeString &name, UnicodeString &dest,$/;"	p	class:UTS46	file:	access:public	signature:(const UnicodeString &name, UnicodeString &dest, IDNAInfo &info, UErrorCode &errorCode) const
UTS46::nameToASCII	uts46.cpp	/^UTS46::nameToASCII(const UnicodeString &name, UnicodeString &dest,$/;"	f	class:UTS46	signature:(const UnicodeString &name, UnicodeString &dest, IDNAInfo &info, UErrorCode &errorCode) const
UTS46::nameToASCII_UTF8	uts46.cpp	/^    nameToASCII_UTF8(const StringPiece &name, ByteSink &dest,$/;"	p	class:UTS46	file:	access:public	signature:(const StringPiece &name, ByteSink &dest, IDNAInfo &info, UErrorCode &errorCode) const
UTS46::nameToASCII_UTF8	uts46.cpp	/^UTS46::nameToASCII_UTF8(const StringPiece &name, ByteSink &dest,$/;"	f	class:UTS46	signature:(const StringPiece &name, ByteSink &dest, IDNAInfo &info, UErrorCode &errorCode) const
UTS46::nameToUnicode	uts46.cpp	/^    nameToUnicode(const UnicodeString &name, UnicodeString &dest,$/;"	p	class:UTS46	file:	access:public	signature:(const UnicodeString &name, UnicodeString &dest, IDNAInfo &info, UErrorCode &errorCode) const
UTS46::nameToUnicode	uts46.cpp	/^UTS46::nameToUnicode(const UnicodeString &name, UnicodeString &dest,$/;"	f	class:UTS46	signature:(const UnicodeString &name, UnicodeString &dest, IDNAInfo &info, UErrorCode &errorCode) const
UTS46::nameToUnicodeUTF8	uts46.cpp	/^    nameToUnicodeUTF8(const StringPiece &name, ByteSink &dest,$/;"	p	class:UTS46	file:	access:public	signature:(const StringPiece &name, ByteSink &dest, IDNAInfo &info, UErrorCode &errorCode) const
UTS46::nameToUnicodeUTF8	uts46.cpp	/^UTS46::nameToUnicodeUTF8(const StringPiece &name, ByteSink &dest,$/;"	f	class:UTS46	signature:(const StringPiece &name, ByteSink &dest, IDNAInfo &info, UErrorCode &errorCode) const
UTS46::options	uts46.cpp	/^    uint32_t options;$/;"	m	class:UTS46	file:	access:private
UTS46::process	uts46.cpp	/^    process(const UnicodeString &src,$/;"	p	class:UTS46	file:	access:private	signature:(const UnicodeString &src, UBool isLabel, UBool toASCII, UnicodeString &dest, IDNAInfo &info, UErrorCode &errorCode) const
UTS46::process	uts46.cpp	/^UTS46::process(const UnicodeString &src,$/;"	f	class:UTS46	signature:(const UnicodeString &src, UBool isLabel, UBool toASCII, UnicodeString &dest, IDNAInfo &info, UErrorCode &errorCode) const
UTS46::processLabel	uts46.cpp	/^    processLabel(UnicodeString &dest,$/;"	p	class:UTS46	file:	access:private	signature:(UnicodeString &dest, int32_t labelStart, int32_t labelLength, UBool toASCII, IDNAInfo &info, UErrorCode &errorCode) const
UTS46::processLabel	uts46.cpp	/^UTS46::processLabel(UnicodeString &dest,$/;"	f	class:UTS46	signature:(UnicodeString &dest, int32_t labelStart, int32_t labelLength, UBool toASCII, IDNAInfo &info, UErrorCode &errorCode) const
UTS46::processUTF8	uts46.cpp	/^    processUTF8(const StringPiece &src,$/;"	p	class:UTS46	file:	access:private	signature:(const StringPiece &src, UBool isLabel, UBool toASCII, ByteSink &dest, IDNAInfo &info, UErrorCode &errorCode) const
UTS46::processUTF8	uts46.cpp	/^UTS46::processUTF8(const StringPiece &src,$/;"	f	class:UTS46	signature:(const StringPiece &src, UBool isLabel, UBool toASCII, ByteSink &dest, IDNAInfo &info, UErrorCode &errorCode) const
UTS46::processUnicode	uts46.cpp	/^    processUnicode(const UnicodeString &src,$/;"	p	class:UTS46	file:	access:private	signature:(const UnicodeString &src, int32_t labelStart, int32_t mappingStart, UBool isLabel, UBool toASCII, UnicodeString &dest, IDNAInfo &info, UErrorCode &errorCode) const
UTS46::processUnicode	uts46.cpp	/^UTS46::processUnicode(const UnicodeString &src,$/;"	f	class:UTS46	signature:(const UnicodeString &src, int32_t labelStart, int32_t mappingStart, UBool isLabel, UBool toASCII, UnicodeString &dest, IDNAInfo &info, UErrorCode &errorCode) const
UTS46::uts46Norm2	uts46.cpp	/^    const Normalizer2 &uts46Norm2;  \/\/ uts46.nrm$/;"	m	class:UTS46	file:	access:private
UTS46::~UTS46	uts46.cpp	/^    virtual ~UTS46();$/;"	p	class:UTS46	file:	access:public	signature:()
UTS46::~UTS46	uts46.cpp	/^UTS46::~UTS46() {}$/;"	f	class:UTS46	signature:()
UTYPES_H	unicode/utypes.h	33;"	d
UText	unicode/utext.h	/^struct UText {$/;"	s
UText	unicode/utext.h	/^struct UText;$/;"	x
UText	unicode/utext.h	/^typedef struct UText UText; \/**< C typedef for struct UText. @stable ICU 3.6 *\/$/;"	t	typeref:struct:UText
UText::a	unicode/utext.h	/^    int64_t         a;$/;"	m	struct:UText	access:public
UText::b	unicode/utext.h	/^    int32_t         b;$/;"	m	struct:UText	access:public
UText::c	unicode/utext.h	/^    int32_t         c;$/;"	m	struct:UText	access:public
UText::chunkContents	unicode/utext.h	/^    const UChar    *chunkContents;$/;"	m	struct:UText	access:public
UText::chunkLength	unicode/utext.h	/^    int32_t         chunkLength;$/;"	m	struct:UText	access:public
UText::chunkNativeLimit	unicode/utext.h	/^    int64_t         chunkNativeLimit;$/;"	m	struct:UText	access:public
UText::chunkNativeStart	unicode/utext.h	/^    int64_t         chunkNativeStart;$/;"	m	struct:UText	access:public
UText::chunkOffset	unicode/utext.h	/^    int32_t         chunkOffset;$/;"	m	struct:UText	access:public
UText::context	unicode/utext.h	/^    const void   *context;$/;"	m	struct:UText	access:public
UText::extraSize	unicode/utext.h	/^    int32_t        extraSize;$/;"	m	struct:UText	access:public
UText::flags	unicode/utext.h	/^    int32_t        flags;$/;"	m	struct:UText	access:public
UText::magic	unicode/utext.h	/^    uint32_t       magic;$/;"	m	struct:UText	access:public
UText::nativeIndexingLimit	unicode/utext.h	/^    int32_t         nativeIndexingLimit;$/;"	m	struct:UText	access:public
UText::p	unicode/utext.h	/^    const void     *p; $/;"	m	struct:UText	access:public
UText::pExtra	unicode/utext.h	/^    void          *pExtra;$/;"	m	struct:UText	access:public
UText::pFuncs	unicode/utext.h	/^    const UTextFuncs     *pFuncs;$/;"	m	struct:UText	access:public
UText::privA	unicode/utext.h	/^    int64_t         privA;$/;"	m	struct:UText	access:public
UText::privB	unicode/utext.h	/^    int32_t         privB;$/;"	m	struct:UText	access:public
UText::privC	unicode/utext.h	/^    int32_t         privC;$/;"	m	struct:UText	access:public
UText::privP	unicode/utext.h	/^    void           *privP;$/;"	m	struct:UText	access:public
UText::providerProperties	unicode/utext.h	/^    int32_t         providerProperties;$/;"	m	struct:UText	access:public
UText::q	unicode/utext.h	/^    const void     *q;$/;"	m	struct:UText	access:public
UText::r	unicode/utext.h	/^    const void     *r;$/;"	m	struct:UText	access:public
UText::sizeOfStruct	unicode/utext.h	/^    int32_t         sizeOfStruct;$/;"	m	struct:UText	access:public
UTextAccess	unicode/utext.h	/^UTextAccess(UText *ut, int64_t nativeIndex, UBool forward);$/;"	t
UTextClone	unicode/utext.h	/^UTextClone(UText *dest, const UText *src, UBool deep, UErrorCode *status);$/;"	t
UTextClose	unicode/utext.h	/^UTextClose(UText *ut);$/;"	t
UTextCopy	unicode/utext.h	/^UTextCopy(UText *ut,$/;"	t
UTextExtract	unicode/utext.h	/^UTextExtract(UText *ut,$/;"	t
UTextFuncs	unicode/utext.h	/^struct UTextFuncs {$/;"	s
UTextFuncs	unicode/utext.h	/^typedef struct UTextFuncs UTextFuncs;$/;"	t	typeref:struct:UTextFuncs
UTextFuncs::access	unicode/utext.h	/^    UTextAccess *access;$/;"	m	struct:UTextFuncs	access:public
UTextFuncs::clone	unicode/utext.h	/^    UTextClone *clone;$/;"	m	struct:UTextFuncs	access:public
UTextFuncs::close	unicode/utext.h	/^    UTextClose  *close;$/;"	m	struct:UTextFuncs	access:public
UTextFuncs::copy	unicode/utext.h	/^    UTextCopy *copy;$/;"	m	struct:UTextFuncs	access:public
UTextFuncs::extract	unicode/utext.h	/^    UTextExtract *extract;$/;"	m	struct:UTextFuncs	access:public
UTextFuncs::mapNativeIndexToUTF16	unicode/utext.h	/^    UTextMapNativeIndexToUTF16 *mapNativeIndexToUTF16;$/;"	m	struct:UTextFuncs	access:public
UTextFuncs::mapOffsetToNative	unicode/utext.h	/^    UTextMapOffsetToNative *mapOffsetToNative;$/;"	m	struct:UTextFuncs	access:public
UTextFuncs::nativeLength	unicode/utext.h	/^    UTextNativeLength *nativeLength;$/;"	m	struct:UTextFuncs	access:public
UTextFuncs::replace	unicode/utext.h	/^    UTextReplace *replace;$/;"	m	struct:UTextFuncs	access:public
UTextFuncs::reserved1	unicode/utext.h	/^    int32_t       reserved1, \/** @internal *\/ reserved2, \/** @internal *\/ reserved3;$/;"	m	struct:UTextFuncs	access:public
UTextFuncs::reserved2	unicode/utext.h	/^    int32_t       reserved1, \/** @internal *\/ reserved2, \/** @internal *\/ reserved3;$/;"	m	struct:UTextFuncs	access:public
UTextFuncs::reserved3	unicode/utext.h	/^    int32_t       reserved1, \/** @internal *\/ reserved2, \/** @internal *\/ reserved3;$/;"	m	struct:UTextFuncs	access:public
UTextFuncs::spare1	unicode/utext.h	/^    UTextClose  *spare1;$/;"	m	struct:UTextFuncs	access:public
UTextFuncs::spare2	unicode/utext.h	/^    UTextClose  *spare2;$/;"	m	struct:UTextFuncs	access:public
UTextFuncs::spare3	unicode/utext.h	/^    UTextClose  *spare3;$/;"	m	struct:UTextFuncs	access:public
UTextFuncs::tableSize	unicode/utext.h	/^    int32_t       tableSize;$/;"	m	struct:UTextFuncs	access:public
UTextMapNativeIndexToUTF16	unicode/utext.h	/^UTextMapNativeIndexToUTF16(const UText *ut, int64_t nativeIndex);$/;"	t
UTextMapOffsetToNative	unicode/utext.h	/^UTextMapOffsetToNative(const UText *ut);$/;"	t
UTextNativeLength	unicode/utext.h	/^UTextNativeLength(UText *ut);$/;"	t
UTextOffset	unicode/utf_old.h	/^typedef int32_t UTextOffset;$/;"	t
UTextReplace	unicode/utext.h	/^UTextReplace(UText *ut,$/;"	t
UTokenAssigner	uvector.h	/^typedef void U_CALLCONV UTokenAssigner(UHashTok *dst,$/;"	t
UTraceData	unicode/utrace.h	/^UTraceData(const void *context, int32_t fnNumber, int32_t level,$/;"	t
UTraceEntry	unicode/utrace.h	/^UTraceEntry(const void *context, int32_t fnNumber);$/;"	t
UTraceExit	unicode/utrace.h	/^UTraceExit(const void *context, int32_t fnNumber, $/;"	t
UTraceExitVal	utracimp.h	/^typedef enum UTraceExitVal {$/;"	g
UTraceExitVal	utracimp.h	/^} UTraceExitVal;$/;"	t	typeref:enum:UTraceExitVal
UTraceFunctionNumber	unicode/utrace.h	/^typedef enum UTraceFunctionNumber {$/;"	g
UTraceFunctionNumber	unicode/utrace.h	/^} UTraceFunctionNumber;$/;"	t	typeref:enum:UTraceFunctionNumber
UTraceLevel	unicode/utrace.h	/^typedef enum UTraceLevel {$/;"	g
UTraceLevel	unicode/utrace.h	/^} UTraceLevel;$/;"	t	typeref:enum:UTraceLevel
UTrie	unicode/rbbi.h	/^struct UTrie;$/;"	x
UTrie	utrie.h	/^struct UTrie {$/;"	s
UTrie	utrie.h	/^typedef struct UTrie UTrie;$/;"	t	typeref:struct:UTrie
UTrie	utrie2.h	/^struct UTrie;  \/* forward declaration *\/$/;"	x
UTrie	utrie2.h	/^typedef struct UTrie UTrie;$/;"	t	typeref:struct:UTrie
UTrie2	utrie2.h	/^struct UTrie2 {$/;"	s
UTrie2	utrie2.h	/^struct UTrie2;$/;"	x
UTrie2	utrie2.h	/^typedef struct UTrie2 UTrie2;$/;"	t	typeref:struct:UTrie2
UTrie2::data16	utrie2.h	/^    const uint16_t *data16;     \/* for fast UTF-8 ASCII access, if 16b data *\/$/;"	m	struct:UTrie2	access:public
UTrie2::data32	utrie2.h	/^    const uint32_t *data32;     \/* NULL if 16b data is used via index *\/$/;"	m	struct:UTrie2	access:public
UTrie2::dataLength	utrie2.h	/^    int32_t indexLength, dataLength;$/;"	m	struct:UTrie2	access:public
UTrie2::dataNullOffset	utrie2.h	/^    uint16_t dataNullOffset;$/;"	m	struct:UTrie2	access:public
UTrie2::errorValue	utrie2.h	/^    uint32_t errorValue;$/;"	m	struct:UTrie2	access:public
UTrie2::highStart	utrie2.h	/^    UChar32 highStart;$/;"	m	struct:UTrie2	access:public
UTrie2::highValueIndex	utrie2.h	/^    int32_t highValueIndex;$/;"	m	struct:UTrie2	access:public
UTrie2::index	utrie2.h	/^    const uint16_t *index;$/;"	m	struct:UTrie2	access:public
UTrie2::index2NullOffset	utrie2.h	/^    uint16_t index2NullOffset;  \/* 0xffff if there is no dedicated index-2 null block *\/$/;"	m	struct:UTrie2	access:public
UTrie2::indexLength	utrie2.h	/^    int32_t indexLength, dataLength;$/;"	m	struct:UTrie2	access:public
UTrie2::initialValue	utrie2.h	/^    uint32_t initialValue;$/;"	m	struct:UTrie2	access:public
UTrie2::isMemoryOwned	utrie2.h	/^    UBool isMemoryOwned;    \/* TRUE if the trie owns the memory *\/$/;"	m	struct:UTrie2	access:public
UTrie2::length	utrie2.h	/^    int32_t length;         \/* number of serialized bytes at memory; 0 if not frozen yet *\/$/;"	m	struct:UTrie2	access:public
UTrie2::memory	utrie2.h	/^    void *memory;           \/* serialized bytes; NULL if not frozen yet *\/$/;"	m	struct:UTrie2	access:public
UTrie2::newTrie	utrie2.h	/^    UNewTrie2 *newTrie;     \/* builder object; NULL when frozen *\/$/;"	m	struct:UTrie2	access:public
UTrie2::padding1	utrie2.h	/^    UBool padding1;$/;"	m	struct:UTrie2	access:public
UTrie2::padding2	utrie2.h	/^    int16_t padding2;$/;"	m	struct:UTrie2	access:public
UTrie2EnumRange	utrie2.h	/^UTrie2EnumRange(const void *context, UChar32 start, UChar32 end, uint32_t value);$/;"	t
UTrie2EnumValue	utrie2.h	/^UTrie2EnumValue(const void *context, uint32_t value);$/;"	t
UTrie2Header	utrie2_impl.h	/^typedef struct UTrie2Header {$/;"	s
UTrie2Header	utrie2_impl.h	/^} UTrie2Header;$/;"	t	typeref:struct:UTrie2Header
UTrie2Header::dataNullOffset	utrie2_impl.h	/^    uint16_t index2NullOffset, dataNullOffset;$/;"	m	struct:UTrie2Header	access:public
UTrie2Header::index2NullOffset	utrie2_impl.h	/^    uint16_t index2NullOffset, dataNullOffset;$/;"	m	struct:UTrie2Header	access:public
UTrie2Header::indexLength	utrie2_impl.h	/^    uint16_t indexLength;$/;"	m	struct:UTrie2Header	access:public
UTrie2Header::options	utrie2_impl.h	/^    uint16_t options;$/;"	m	struct:UTrie2Header	access:public
UTrie2Header::shiftedDataLength	utrie2_impl.h	/^    uint16_t shiftedDataLength;$/;"	m	struct:UTrie2Header	access:public
UTrie2Header::shiftedHighStart	utrie2_impl.h	/^    uint16_t shiftedHighStart;$/;"	m	struct:UTrie2Header	access:public
UTrie2Header::signature	utrie2_impl.h	/^    uint32_t signature;$/;"	m	struct:UTrie2Header	access:public
UTrie2Singleton	unicode/urename.h	2199;"	d
UTrie2Singleton	utrie2.h	/^    UTrie2Singleton(SimpleSingleton &s) : singleton(s) {}$/;"	f	class:UTrie2Singleton	access:public	signature:(SimpleSingleton &s)
UTrie2Singleton	utrie2.h	/^class UTrie2Singleton {$/;"	c
UTrie2Singleton::UTrie2Singleton	utrie2.h	/^    UTrie2Singleton(SimpleSingleton &s) : singleton(s) {}$/;"	f	class:UTrie2Singleton	access:public	signature:(SimpleSingleton &s)
UTrie2Singleton::deleteInstance	utrie2.h	/^    void deleteInstance() {$/;"	f	class:UTrie2Singleton	access:public	signature:()
UTrie2Singleton::getInstance	utrie2.cpp	/^UTrie2 *UTrie2Singleton::getInstance(InstantiatorFn *instantiator, const void *context,$/;"	f	class:UTrie2Singleton	signature:(InstantiatorFn *instantiator, const void *context, UErrorCode &errorCode)
UTrie2Singleton::getInstance	utrie2.h	/^    UTrie2 *getInstance(InstantiatorFn *instantiator, const void *context,$/;"	p	class:UTrie2Singleton	access:public	signature:(InstantiatorFn *instantiator, const void *context, UErrorCode &errorCode)
UTrie2Singleton::singleton	utrie2.h	/^    SimpleSingleton &singleton;$/;"	m	class:UTrie2Singleton	access:private
UTrie2StringIterator	utrie2.h	/^    UTrie2StringIterator(const UTrie2 *t, const UChar *p) :$/;"	f	class:UTrie2StringIterator	access:public	signature:(const UTrie2 *t, const UChar *p)
UTrie2StringIterator	utrie2.h	/^class UTrie2StringIterator : public UMemory {$/;"	c	inherits:UMemory
UTrie2StringIterator::UTrie2StringIterator	utrie2.h	/^    UTrie2StringIterator(const UTrie2 *t, const UChar *p) :$/;"	f	class:UTrie2StringIterator	access:public	signature:(const UTrie2 *t, const UChar *p)
UTrie2StringIterator::codePoint	utrie2.h	/^    UChar32 codePoint;$/;"	m	class:UTrie2StringIterator	access:public
UTrie2StringIterator::codePointLimit	utrie2.h	/^    const UChar *codePointStart, *codePointLimit;$/;"	m	class:UTrie2StringIterator	access:public
UTrie2StringIterator::codePointStart	utrie2.h	/^    const UChar *codePointStart, *codePointLimit;$/;"	m	class:UTrie2StringIterator	access:public
UTrie2StringIterator::trie	utrie2.h	/^    const UTrie2 *trie;$/;"	m	class:UTrie2StringIterator	access:public
UTrie2ValueBits	utrie2.h	/^enum UTrie2ValueBits {$/;"	g
UTrie2ValueBits	utrie2.h	/^typedef enum UTrie2ValueBits UTrie2ValueBits;$/;"	t	typeref:enum:UTrie2ValueBits
UTrie::data32	utrie.h	/^    const uint32_t *data32; \/* NULL if 16b data is used via index *\/$/;"	m	struct:UTrie	access:public
UTrie::dataLength	utrie.h	/^    int32_t indexLength, dataLength;$/;"	m	struct:UTrie	access:public
UTrie::getFoldingOffset	utrie.h	/^    UTrieGetFoldingOffset *getFoldingOffset;$/;"	m	struct:UTrie	access:public
UTrie::index	utrie.h	/^    const uint16_t *index;$/;"	m	struct:UTrie	access:public
UTrie::indexLength	utrie.h	/^    int32_t indexLength, dataLength;$/;"	m	struct:UTrie	access:public
UTrie::initialValue	utrie.h	/^    uint32_t initialValue;$/;"	m	struct:UTrie	access:public
UTrie::isLatin1Linear	utrie.h	/^    UBool isLatin1Linear;$/;"	m	struct:UTrie	access:public
UTrieEnumRange	utrie.h	/^UTrieEnumRange(const void *context, UChar32 start, UChar32 limit, uint32_t value);$/;"	t
UTrieEnumValue	utrie.h	/^UTrieEnumValue(const void *context, uint32_t value);$/;"	t
UTrieGetFoldingOffset	utrie.h	/^UTrieGetFoldingOffset(uint32_t data);$/;"	t
UTrieHeader	utrie.h	/^typedef struct UTrieHeader {$/;"	s
UTrieHeader	utrie.h	/^} UTrieHeader;$/;"	t	typeref:struct:UTrieHeader
UTrieHeader::dataLength	utrie.h	/^    int32_t dataLength;$/;"	m	struct:UTrieHeader	access:public
UTrieHeader::indexLength	utrie.h	/^    int32_t indexLength;$/;"	m	struct:UTrieHeader	access:public
UTrieHeader::options	utrie.h	/^    uint32_t options;$/;"	m	struct:UTrieHeader	access:public
UTrieHeader::signature	utrie.h	/^    uint32_t signature;$/;"	m	struct:UTrieHeader	access:public
UVECTOR32_H	uvectr32.h	15;"	d
UVECTOR64_H	uvectr64.h	15;"	d
UVECTOR_H	uvector.h	13;"	d
UVERNUM_H	unicode/uvernum.h	38;"	d
UVERSION_H	unicode/uversion.h	26;"	d
UValueComparator	uhash.h	/^typedef UBool U_CALLCONV UValueComparator(const UHashTok val1,$/;"	t
UVector	rbbinode.h	/^class    UVector;$/;"	x
UVector	unicode/uniset.h	/^class UVector;$/;"	x
UVector	unicode/urename.h	2200;"	d
UVector	uvector.cpp	/^UVector::UVector(UErrorCode &status) :$/;"	f	class:UVector	signature:(UErrorCode &status)
UVector	uvector.cpp	/^UVector::UVector(UObjectDeleter *d, UKeyComparator *c, UErrorCode &status) :$/;"	f	class:UVector	signature:(UObjectDeleter *d, UKeyComparator *c, UErrorCode &status)
UVector	uvector.cpp	/^UVector::UVector(UObjectDeleter *d, UKeyComparator *c, int32_t initialCapacity, UErrorCode &status) :$/;"	f	class:UVector	signature:(UObjectDeleter *d, UKeyComparator *c, int32_t initialCapacity, UErrorCode &status)
UVector	uvector.cpp	/^UVector::UVector(int32_t initialCapacity, UErrorCode &status) :$/;"	f	class:UVector	signature:(int32_t initialCapacity, UErrorCode &status)
UVector	uvector.h	/^    UVector(UErrorCode &status);$/;"	p	class:UVector	access:public	signature:(UErrorCode &status)
UVector	uvector.h	/^    UVector(UObjectDeleter *d, UKeyComparator *c, UErrorCode &status);$/;"	p	class:UVector	access:public	signature:(UObjectDeleter *d, UKeyComparator *c, UErrorCode &status)
UVector	uvector.h	/^    UVector(UObjectDeleter *d, UKeyComparator *c, int32_t initialCapacity, UErrorCode &status);$/;"	p	class:UVector	access:public	signature:(UObjectDeleter *d, UKeyComparator *c, int32_t initialCapacity, UErrorCode &status)
UVector	uvector.h	/^    UVector(const UVector&);$/;"	p	class:UVector	access:private	signature:(const UVector&)
UVector	uvector.h	/^    UVector(int32_t initialCapacity, UErrorCode &status);$/;"	p	class:UVector	access:public	signature:(int32_t initialCapacity, UErrorCode &status)
UVector	uvector.h	/^class U_COMMON_API UVector : public UObject {$/;"	c	inherits:UObject
UVector32	unicode/urename.h	2201;"	d
UVector32	uvectr32.cpp	/^UVector32::UVector32(UErrorCode &status) :$/;"	f	class:UVector32	signature:(UErrorCode &status)
UVector32	uvectr32.cpp	/^UVector32::UVector32(int32_t initialCapacity, UErrorCode &status) :$/;"	f	class:UVector32	signature:(int32_t initialCapacity, UErrorCode &status)
UVector32	uvectr32.h	/^    UVector32(UErrorCode &status);$/;"	p	class:UVector32	access:public	signature:(UErrorCode &status)
UVector32	uvectr32.h	/^    UVector32(const UVector32&);$/;"	p	class:UVector32	access:private	signature:(const UVector32&)
UVector32	uvectr32.h	/^    UVector32(int32_t initialCapacity, UErrorCode &status);$/;"	p	class:UVector32	access:public	signature:(int32_t initialCapacity, UErrorCode &status)
UVector32	uvectr32.h	/^class U_COMMON_API UVector32 : public UObject {$/;"	c	inherits:UObject
UVector32::UVector32	uvectr32.cpp	/^UVector32::UVector32(UErrorCode &status) :$/;"	f	class:UVector32	signature:(UErrorCode &status)
UVector32::UVector32	uvectr32.cpp	/^UVector32::UVector32(int32_t initialCapacity, UErrorCode &status) :$/;"	f	class:UVector32	signature:(int32_t initialCapacity, UErrorCode &status)
UVector32::UVector32	uvectr32.h	/^    UVector32(UErrorCode &status);$/;"	p	class:UVector32	access:public	signature:(UErrorCode &status)
UVector32::UVector32	uvectr32.h	/^    UVector32(const UVector32&);$/;"	p	class:UVector32	access:private	signature:(const UVector32&)
UVector32::UVector32	uvectr32.h	/^    UVector32(int32_t initialCapacity, UErrorCode &status);$/;"	p	class:UVector32	access:public	signature:(int32_t initialCapacity, UErrorCode &status)
UVector32::_init	uvectr32.cpp	/^void UVector32::_init(int32_t initialCapacity, UErrorCode &status) {$/;"	f	class:UVector32	signature:(int32_t initialCapacity, UErrorCode &status)
UVector32::_init	uvectr32.h	/^    void _init(int32_t initialCapacity, UErrorCode &status);$/;"	p	class:UVector32	access:private	signature:(int32_t initialCapacity, UErrorCode &status)
UVector32::addElement	uvectr32.h	/^    void addElement(int32_t elem, UErrorCode &status);$/;"	p	class:UVector32	access:public	signature:(int32_t elem, UErrorCode &status)
UVector32::addElement	uvectr32.h	/^inline void UVector32::addElement(int32_t elem, UErrorCode &status) {$/;"	f	class:UVector32	signature:(int32_t elem, UErrorCode &status)
UVector32::assign	uvectr32.cpp	/^void UVector32::assign(const UVector32& other, UErrorCode &ec) {$/;"	f	class:UVector32	signature:(const UVector32& other, UErrorCode &ec)
UVector32::assign	uvectr32.h	/^    void assign(const UVector32& other, UErrorCode &ec);$/;"	p	class:UVector32	access:public	signature:(const UVector32& other, UErrorCode &ec)
UVector32::capacity	uvectr32.h	/^    int32_t   capacity;$/;"	m	class:UVector32	access:private
UVector32::contains	uvectr32.h	/^    UBool contains(int32_t elem) const;$/;"	p	class:UVector32	access:public	signature:(int32_t elem) const
UVector32::contains	uvectr32.h	/^inline UBool UVector32::contains(int32_t obj) const {$/;"	f	class:UVector32	signature:(int32_t obj) const
UVector32::containsAll	uvectr32.cpp	/^UBool UVector32::containsAll(const UVector32& other) const {$/;"	f	class:UVector32	signature:(const UVector32& other) const
UVector32::containsAll	uvectr32.h	/^    UBool containsAll(const UVector32& other) const;$/;"	p	class:UVector32	access:public	signature:(const UVector32& other) const
UVector32::containsNone	uvectr32.cpp	/^UBool UVector32::containsNone(const UVector32& other) const {$/;"	f	class:UVector32	signature:(const UVector32& other) const
UVector32::containsNone	uvectr32.h	/^    UBool containsNone(const UVector32& other) const;$/;"	p	class:UVector32	access:public	signature:(const UVector32& other) const
UVector32::count	uvectr32.h	/^    int32_t   count;$/;"	m	class:UVector32	access:private
UVector32::elementAti	uvectr32.h	/^    int32_t elementAti(int32_t index) const;$/;"	p	class:UVector32	access:public	signature:(int32_t index) const
UVector32::elementAti	uvectr32.h	/^inline int32_t UVector32::elementAti(int32_t index) const {$/;"	f	class:UVector32	signature:(int32_t index) const
UVector32::elements	uvectr32.h	/^    int32_t*  elements;$/;"	m	class:UVector32	access:private
UVector32::empty	uvectr32.h	/^    UBool empty(void) const;   \/\/ TODO:  redundant, same as empty().  Remove it?$/;"	p	class:UVector32	access:public	signature:(void) const
UVector32::empty	uvectr32.h	/^inline UBool UVector32::empty(void) const {$/;"	f	class:UVector32	signature:(void) const
UVector32::ensureCapacity	uvectr32.h	/^    inline UBool ensureCapacity(int32_t minimumCapacity, UErrorCode &status);$/;"	p	class:UVector32	access:public	signature:(int32_t minimumCapacity, UErrorCode &status)
UVector32::ensureCapacity	uvectr32.h	/^inline UBool UVector32::ensureCapacity(int32_t minimumCapacity, UErrorCode &status) {$/;"	f	class:UVector32	signature:(int32_t minimumCapacity, UErrorCode &status)
UVector32::equals	uvectr32.cpp	/^UBool   UVector32::equals(const UVector32 &other) const {$/;"	f	class:UVector32	signature:(const UVector32 &other) const
UVector32::equals	uvectr32.h	/^    UBool equals(const UVector32 &other) const;$/;"	p	class:UVector32	access:public	signature:(const UVector32 &other) const
UVector32::expandCapacity	uvectr32.cpp	/^UBool UVector32::expandCapacity(int32_t minimumCapacity, UErrorCode &status) {$/;"	f	class:UVector32	signature:(int32_t minimumCapacity, UErrorCode &status)
UVector32::expandCapacity	uvectr32.h	/^    UBool expandCapacity(int32_t minimumCapacity, UErrorCode &status);$/;"	p	class:UVector32	access:public	signature:(int32_t minimumCapacity, UErrorCode &status)
UVector32::getBuffer	uvectr32.h	/^    int32_t *getBuffer() const;$/;"	p	class:UVector32	access:public	signature:() const
UVector32::getBuffer	uvectr32.h	/^inline int32_t *UVector32::getBuffer() const {$/;"	f	class:UVector32	signature:() const
UVector32::getDynamicClassID	uvectr32.h	/^    virtual UClassID getDynamicClassID() const;$/;"	p	class:UVector32	access:public	signature:() const
UVector32::getStaticClassID	uvectr32.h	/^    static UClassID U_EXPORT2 getStaticClassID();$/;"	p	class:UVector32	access:public	signature:()
UVector32::indexOf	uvectr32.cpp	/^int32_t UVector32::indexOf(int32_t key, int32_t startIndex) const {$/;"	f	class:UVector32	signature:(int32_t key, int32_t startIndex) const
UVector32::indexOf	uvectr32.h	/^    int32_t indexOf(int32_t elem, int32_t startIndex = 0) const;$/;"	p	class:UVector32	access:public	signature:(int32_t elem, int32_t startIndex = 0) const
UVector32::insertElementAt	uvectr32.cpp	/^void UVector32::insertElementAt(int32_t elem, int32_t index, UErrorCode &status) {$/;"	f	class:UVector32	signature:(int32_t elem, int32_t index, UErrorCode &status)
UVector32::insertElementAt	uvectr32.h	/^    void insertElementAt(int32_t elem, int32_t index, UErrorCode &status);$/;"	p	class:UVector32	access:public	signature:(int32_t elem, int32_t index, UErrorCode &status)
UVector32::isEmpty	uvectr32.h	/^    UBool isEmpty(void) const;$/;"	p	class:UVector32	access:public	signature:(void) const
UVector32::isEmpty	uvectr32.h	/^inline UBool UVector32::isEmpty(void) const {$/;"	f	class:UVector32	signature:(void) const
UVector32::lastElementi	uvectr32.h	/^    int32_t lastElementi(void) const;$/;"	p	class:UVector32	access:public	signature:(void) const
UVector32::lastElementi	uvectr32.h	/^inline int32_t UVector32::lastElementi(void) const {$/;"	f	class:UVector32	signature:(void) const
UVector32::maxCapacity	uvectr32.h	/^    int32_t   maxCapacity;   \/\/ Limit beyond which capacity is not permitted to grow.$/;"	m	class:UVector32	access:private
UVector32::operator !=	uvectr32.h	/^    inline UBool operator!=(const UVector32& other);$/;"	p	class:UVector32	access:public	signature:(const UVector32& other)
UVector32::operator !=	uvectr32.h	/^inline UBool UVector32::operator!=(const UVector32& other) {$/;"	f	class:UVector32	signature:(const UVector32& other)
UVector32::operator =	uvectr32.h	/^    UVector32& operator=(const UVector32&);$/;"	p	class:UVector32	access:private	signature:(const UVector32&)
UVector32::operator ==	uvectr32.cpp	/^UBool UVector32::operator==(const UVector32& other) {$/;"	f	class:UVector32	signature:(const UVector32& other)
UVector32::operator ==	uvectr32.h	/^    UBool operator==(const UVector32& other);$/;"	p	class:UVector32	access:public	signature:(const UVector32& other)
UVector32::peeki	uvectr32.h	/^    int32_t peeki(void) const;$/;"	p	class:UVector32	access:public	signature:(void) const
UVector32::peeki	uvectr32.h	/^inline int32_t UVector32::peeki(void) const {$/;"	f	class:UVector32	signature:(void) const
UVector32::popFrame	uvectr32.h	/^    int32_t *popFrame(int32_t size);$/;"	p	class:UVector32	access:public	signature:(int32_t size)
UVector32::popFrame	uvectr32.h	/^inline int32_t *UVector32::popFrame(int32_t size) {$/;"	f	class:UVector32	signature:(int32_t size)
UVector32::popi	uvectr32.h	/^    int32_t popi(void);$/;"	p	class:UVector32	access:public	signature:(void)
UVector32::popi	uvectr32.h	/^inline int32_t UVector32::popi(void) {$/;"	f	class:UVector32	signature:(void)
UVector32::push	uvectr32.h	/^    int32_t push(int32_t i, UErrorCode &status);$/;"	p	class:UVector32	access:public	signature:(int32_t i, UErrorCode &status)
UVector32::push	uvectr32.h	/^inline int32_t UVector32::push(int32_t i, UErrorCode &status) {$/;"	f	class:UVector32	signature:(int32_t i, UErrorCode &status)
UVector32::removeAll	uvectr32.cpp	/^UBool UVector32::removeAll(const UVector32& other) {$/;"	f	class:UVector32	signature:(const UVector32& other)
UVector32::removeAll	uvectr32.h	/^    UBool removeAll(const UVector32& other);$/;"	p	class:UVector32	access:public	signature:(const UVector32& other)
UVector32::removeAllElements	uvectr32.cpp	/^void UVector32::removeAllElements(void) {$/;"	f	class:UVector32	signature:(void)
UVector32::removeAllElements	uvectr32.h	/^    void removeAllElements();$/;"	p	class:UVector32	access:public	signature:()
UVector32::removeElementAt	uvectr32.cpp	/^void UVector32::removeElementAt(int32_t index) {$/;"	f	class:UVector32	signature:(int32_t index)
UVector32::removeElementAt	uvectr32.h	/^    void removeElementAt(int32_t index);$/;"	p	class:UVector32	access:public	signature:(int32_t index)
UVector32::reserveBlock	uvectr32.h	/^    int32_t *reserveBlock(int32_t size, UErrorCode &status);$/;"	p	class:UVector32	access:public	signature:(int32_t size, UErrorCode &status)
UVector32::reserveBlock	uvectr32.h	/^inline int32_t *UVector32::reserveBlock(int32_t size, UErrorCode &status) {$/;"	f	class:UVector32	signature:(int32_t size, UErrorCode &status)
UVector32::retainAll	uvectr32.cpp	/^UBool UVector32::retainAll(const UVector32& other) {$/;"	f	class:UVector32	signature:(const UVector32& other)
UVector32::retainAll	uvectr32.h	/^    UBool retainAll(const UVector32& other);$/;"	p	class:UVector32	access:public	signature:(const UVector32& other)
UVector32::setElementAt	uvectr32.cpp	/^void UVector32::setElementAt(int32_t elem, int32_t index) {$/;"	f	class:UVector32	signature:(int32_t elem, int32_t index)
UVector32::setElementAt	uvectr32.h	/^    void setElementAt(int32_t elem, int32_t index);$/;"	p	class:UVector32	access:public	signature:(int32_t elem, int32_t index)
UVector32::setMaxCapacity	uvectr32.cpp	/^void UVector32::setMaxCapacity(int32_t limit) {$/;"	f	class:UVector32	signature:(int32_t limit)
UVector32::setMaxCapacity	uvectr32.h	/^    void setMaxCapacity(int32_t limit);$/;"	p	class:UVector32	access:public	signature:(int32_t limit)
UVector32::setSize	uvectr32.cpp	/^void UVector32::setSize(int32_t newSize) {$/;"	f	class:UVector32	signature:(int32_t newSize)
UVector32::setSize	uvectr32.h	/^    void setSize(int32_t newSize);$/;"	p	class:UVector32	access:public	signature:(int32_t newSize)
UVector32::size	uvectr32.h	/^    int32_t size(void) const;$/;"	p	class:UVector32	access:public	signature:(void) const
UVector32::size	uvectr32.h	/^inline int32_t UVector32::size(void) const {$/;"	f	class:UVector32	signature:(void) const
UVector32::sortedInsert	uvectr32.cpp	/^void UVector32::sortedInsert(int32_t tok, UErrorCode& ec) {$/;"	f	class:UVector32	signature:(int32_t tok, UErrorCode& ec)
UVector32::sortedInsert	uvectr32.h	/^    void sortedInsert(int32_t elem, UErrorCode& ec);$/;"	p	class:UVector32	access:public	signature:(int32_t elem, UErrorCode& ec)
UVector32::~UVector32	uvectr32.cpp	/^UVector32::~UVector32() {$/;"	f	class:UVector32	signature:()
UVector32::~UVector32	uvectr32.h	/^    virtual ~UVector32();$/;"	p	class:UVector32	access:public	signature:()
UVector64	unicode/urename.h	2202;"	d
UVector64	uvectr64.cpp	/^UVector64::UVector64(UErrorCode &status) :$/;"	f	class:UVector64	signature:(UErrorCode &status)
UVector64	uvectr64.cpp	/^UVector64::UVector64(int32_t initialCapacity, UErrorCode &status) :$/;"	f	class:UVector64	signature:(int32_t initialCapacity, UErrorCode &status)
UVector64	uvectr64.h	/^    UVector64(UErrorCode &status);$/;"	p	class:UVector64	access:public	signature:(UErrorCode &status)
UVector64	uvectr64.h	/^    UVector64(const UVector64&);$/;"	p	class:UVector64	access:private	signature:(const UVector64&)
UVector64	uvectr64.h	/^    UVector64(int32_t initialCapacity, UErrorCode &status);$/;"	p	class:UVector64	access:public	signature:(int32_t initialCapacity, UErrorCode &status)
UVector64	uvectr64.h	/^class U_COMMON_API UVector64 : public UObject {$/;"	c	inherits:UObject
UVector64::UVector64	uvectr64.cpp	/^UVector64::UVector64(UErrorCode &status) :$/;"	f	class:UVector64	signature:(UErrorCode &status)
UVector64::UVector64	uvectr64.cpp	/^UVector64::UVector64(int32_t initialCapacity, UErrorCode &status) :$/;"	f	class:UVector64	signature:(int32_t initialCapacity, UErrorCode &status)
UVector64::UVector64	uvectr64.h	/^    UVector64(UErrorCode &status);$/;"	p	class:UVector64	access:public	signature:(UErrorCode &status)
UVector64::UVector64	uvectr64.h	/^    UVector64(const UVector64&);$/;"	p	class:UVector64	access:private	signature:(const UVector64&)
UVector64::UVector64	uvectr64.h	/^    UVector64(int32_t initialCapacity, UErrorCode &status);$/;"	p	class:UVector64	access:public	signature:(int32_t initialCapacity, UErrorCode &status)
UVector64::_init	uvectr64.cpp	/^void UVector64::_init(int32_t initialCapacity, UErrorCode &status) {$/;"	f	class:UVector64	signature:(int32_t initialCapacity, UErrorCode &status)
UVector64::_init	uvectr64.h	/^    void _init(int32_t initialCapacity, UErrorCode &status);$/;"	p	class:UVector64	access:private	signature:(int32_t initialCapacity, UErrorCode &status)
UVector64::addElement	uvectr64.h	/^    void addElement(int64_t elem, UErrorCode &status);$/;"	p	class:UVector64	access:public	signature:(int64_t elem, UErrorCode &status)
UVector64::addElement	uvectr64.h	/^inline void UVector64::addElement(int64_t elem, UErrorCode &status) {$/;"	f	class:UVector64	signature:(int64_t elem, UErrorCode &status)
UVector64::assign	uvectr64.cpp	/^void UVector64::assign(const UVector64& other, UErrorCode &ec) {$/;"	f	class:UVector64	signature:(const UVector64& other, UErrorCode &ec)
UVector64::assign	uvectr64.h	/^    void assign(const UVector64& other, UErrorCode &ec);$/;"	p	class:UVector64	access:public	signature:(const UVector64& other, UErrorCode &ec)
UVector64::capacity	uvectr64.h	/^    int32_t   capacity;$/;"	m	class:UVector64	access:private
UVector64::count	uvectr64.h	/^    int32_t   count;$/;"	m	class:UVector64	access:private
UVector64::elementAti	uvectr64.h	/^    int64_t elementAti(int32_t index) const;$/;"	p	class:UVector64	access:public	signature:(int32_t index) const
UVector64::elementAti	uvectr64.h	/^inline int64_t UVector64::elementAti(int32_t index) const {$/;"	f	class:UVector64	signature:(int32_t index) const
UVector64::elements	uvectr64.h	/^    int64_t*  elements;$/;"	m	class:UVector64	access:private
UVector64::ensureCapacity	uvectr64.h	/^    inline UBool ensureCapacity(int32_t minimumCapacity, UErrorCode &status);$/;"	p	class:UVector64	access:public	signature:(int32_t minimumCapacity, UErrorCode &status)
UVector64::ensureCapacity	uvectr64.h	/^inline UBool UVector64::ensureCapacity(int32_t minimumCapacity, UErrorCode &status) {$/;"	f	class:UVector64	signature:(int32_t minimumCapacity, UErrorCode &status)
UVector64::expandCapacity	uvectr64.cpp	/^UBool UVector64::expandCapacity(int32_t minimumCapacity, UErrorCode &status) {$/;"	f	class:UVector64	signature:(int32_t minimumCapacity, UErrorCode &status)
UVector64::expandCapacity	uvectr64.h	/^    UBool expandCapacity(int32_t minimumCapacity, UErrorCode &status);$/;"	p	class:UVector64	access:public	signature:(int32_t minimumCapacity, UErrorCode &status)
UVector64::getBuffer	uvectr64.h	/^    int64_t *getBuffer() const;$/;"	p	class:UVector64	access:public	signature:() const
UVector64::getBuffer	uvectr64.h	/^inline int64_t *UVector64::getBuffer() const {$/;"	f	class:UVector64	signature:() const
UVector64::getDynamicClassID	uvectr64.h	/^    virtual UClassID getDynamicClassID() const;$/;"	p	class:UVector64	access:public	signature:() const
UVector64::getStaticClassID	uvectr64.h	/^    static UClassID U_EXPORT2 getStaticClassID();$/;"	p	class:UVector64	access:public	signature:()
UVector64::insertElementAt	uvectr64.cpp	/^void UVector64::insertElementAt(int64_t elem, int32_t index, UErrorCode &status) {$/;"	f	class:UVector64	signature:(int64_t elem, int32_t index, UErrorCode &status)
UVector64::insertElementAt	uvectr64.h	/^    void insertElementAt(int64_t elem, int32_t index, UErrorCode &status);$/;"	p	class:UVector64	access:public	signature:(int64_t elem, int32_t index, UErrorCode &status)
UVector64::lastElementi	uvectr64.h	/^    int64_t lastElementi(void) const;$/;"	p	class:UVector64	access:public	signature:(void) const
UVector64::lastElementi	uvectr64.h	/^inline int64_t UVector64::lastElementi(void) const {$/;"	f	class:UVector64	signature:(void) const
UVector64::maxCapacity	uvectr64.h	/^    int32_t   maxCapacity;   \/\/ Limit beyond which capacity is not permitted to grow.$/;"	m	class:UVector64	access:private
UVector64::operator !=	uvectr64.h	/^    inline UBool operator!=(const UVector64& other);$/;"	p	class:UVector64	access:public	signature:(const UVector64& other)
UVector64::operator !=	uvectr64.h	/^inline UBool UVector64::operator!=(const UVector64& other) {$/;"	f	class:UVector64	signature:(const UVector64& other)
UVector64::operator =	uvectr64.h	/^    UVector64& operator=(const UVector64&);$/;"	p	class:UVector64	access:private	signature:(const UVector64&)
UVector64::operator ==	uvectr64.cpp	/^UBool UVector64::operator==(const UVector64& other) {$/;"	f	class:UVector64	signature:(const UVector64& other)
UVector64::operator ==	uvectr64.h	/^    UBool operator==(const UVector64& other);$/;"	p	class:UVector64	access:public	signature:(const UVector64& other)
UVector64::popFrame	uvectr64.h	/^    int64_t *popFrame(int32_t size);$/;"	p	class:UVector64	access:public	signature:(int32_t size)
UVector64::popFrame	uvectr64.h	/^inline int64_t *UVector64::popFrame(int32_t size) {$/;"	f	class:UVector64	signature:(int32_t size)
UVector64::popi	uvectr64.h	/^    int64_t popi(void);$/;"	p	class:UVector64	access:public	signature:(void)
UVector64::popi	uvectr64.h	/^inline int64_t UVector64::popi(void) {$/;"	f	class:UVector64	signature:(void)
UVector64::push	uvectr64.h	/^    int64_t push(int64_t i, UErrorCode &status);$/;"	p	class:UVector64	access:public	signature:(int64_t i, UErrorCode &status)
UVector64::push	uvectr64.h	/^inline int64_t UVector64::push(int64_t i, UErrorCode &status) {$/;"	f	class:UVector64	signature:(int64_t i, UErrorCode &status)
UVector64::removeAllElements	uvectr64.cpp	/^void UVector64::removeAllElements(void) {$/;"	f	class:UVector64	signature:(void)
UVector64::removeAllElements	uvectr64.h	/^    void removeAllElements();$/;"	p	class:UVector64	access:public	signature:()
UVector64::reserveBlock	uvectr64.h	/^    int64_t *reserveBlock(int32_t size, UErrorCode &status);$/;"	p	class:UVector64	access:public	signature:(int32_t size, UErrorCode &status)
UVector64::reserveBlock	uvectr64.h	/^inline int64_t *UVector64::reserveBlock(int32_t size, UErrorCode &status) {$/;"	f	class:UVector64	signature:(int32_t size, UErrorCode &status)
UVector64::setElementAt	uvectr64.cpp	/^void UVector64::setElementAt(int64_t elem, int32_t index) {$/;"	f	class:UVector64	signature:(int64_t elem, int32_t index)
UVector64::setElementAt	uvectr64.h	/^    void setElementAt(int64_t elem, int32_t index);$/;"	p	class:UVector64	access:public	signature:(int64_t elem, int32_t index)
UVector64::setMaxCapacity	uvectr64.cpp	/^void UVector64::setMaxCapacity(int32_t limit) {$/;"	f	class:UVector64	signature:(int32_t limit)
UVector64::setMaxCapacity	uvectr64.h	/^    void setMaxCapacity(int32_t limit);$/;"	p	class:UVector64	access:public	signature:(int32_t limit)
UVector64::setSize	uvectr64.cpp	/^void UVector64::setSize(int32_t newSize) {$/;"	f	class:UVector64	signature:(int32_t newSize)
UVector64::setSize	uvectr64.h	/^    void setSize(int32_t newSize);$/;"	p	class:UVector64	access:public	signature:(int32_t newSize)
UVector64::size	uvectr64.h	/^    int32_t size(void) const;$/;"	p	class:UVector64	access:public	signature:(void) const
UVector64::size	uvectr64.h	/^inline int32_t UVector64::size(void) const {$/;"	f	class:UVector64	signature:(void) const
UVector64::~UVector64	uvectr64.cpp	/^UVector64::~UVector64() {$/;"	f	class:UVector64	signature:()
UVector64::~UVector64	uvectr64.h	/^    virtual ~UVector64();$/;"	p	class:UVector64	access:public	signature:()
UVector::UVector	uvector.cpp	/^UVector::UVector(UErrorCode &status) :$/;"	f	class:UVector	signature:(UErrorCode &status)
UVector::UVector	uvector.cpp	/^UVector::UVector(UObjectDeleter *d, UKeyComparator *c, UErrorCode &status) :$/;"	f	class:UVector	signature:(UObjectDeleter *d, UKeyComparator *c, UErrorCode &status)
UVector::UVector	uvector.cpp	/^UVector::UVector(UObjectDeleter *d, UKeyComparator *c, int32_t initialCapacity, UErrorCode &status) :$/;"	f	class:UVector	signature:(UObjectDeleter *d, UKeyComparator *c, int32_t initialCapacity, UErrorCode &status)
UVector::UVector	uvector.cpp	/^UVector::UVector(int32_t initialCapacity, UErrorCode &status) :$/;"	f	class:UVector	signature:(int32_t initialCapacity, UErrorCode &status)
UVector::UVector	uvector.h	/^    UVector(UErrorCode &status);$/;"	p	class:UVector	access:public	signature:(UErrorCode &status)
UVector::UVector	uvector.h	/^    UVector(UObjectDeleter *d, UKeyComparator *c, UErrorCode &status);$/;"	p	class:UVector	access:public	signature:(UObjectDeleter *d, UKeyComparator *c, UErrorCode &status)
UVector::UVector	uvector.h	/^    UVector(UObjectDeleter *d, UKeyComparator *c, int32_t initialCapacity, UErrorCode &status);$/;"	p	class:UVector	access:public	signature:(UObjectDeleter *d, UKeyComparator *c, int32_t initialCapacity, UErrorCode &status)
UVector::UVector	uvector.h	/^    UVector(const UVector&);$/;"	p	class:UVector	access:private	signature:(const UVector&)
UVector::UVector	uvector.h	/^    UVector(int32_t initialCapacity, UErrorCode &status);$/;"	p	class:UVector	access:public	signature:(int32_t initialCapacity, UErrorCode &status)
UVector::_init	uvector.cpp	/^void UVector::_init(int32_t initialCapacity, UErrorCode &status) {$/;"	f	class:UVector	signature:(int32_t initialCapacity, UErrorCode &status)
UVector::_init	uvector.h	/^    void _init(int32_t initialCapacity, UErrorCode &status);$/;"	p	class:UVector	access:private	signature:(int32_t initialCapacity, UErrorCode &status)
UVector::addElement	uvector.cpp	/^void UVector::addElement(int32_t elem, UErrorCode &status) {$/;"	f	class:UVector	signature:(int32_t elem, UErrorCode &status)
UVector::addElement	uvector.cpp	/^void UVector::addElement(void* obj, UErrorCode &status) {$/;"	f	class:UVector	signature:(void* obj, UErrorCode &status)
UVector::addElement	uvector.h	/^    void addElement(int32_t elem, UErrorCode &status);$/;"	p	class:UVector	access:public	signature:(int32_t elem, UErrorCode &status)
UVector::addElement	uvector.h	/^    void addElement(void* obj, UErrorCode &status);$/;"	p	class:UVector	access:public	signature:(void* obj, UErrorCode &status)
UVector::assign	uvector.cpp	/^void UVector::assign(const UVector& other, UTokenAssigner *assign, UErrorCode &ec) {$/;"	f	class:UVector	signature:(const UVector& other, UTokenAssigner *assign, UErrorCode &ec)
UVector::assign	uvector.h	/^    void assign(const UVector& other, UTokenAssigner *assign, UErrorCode &ec);$/;"	p	class:UVector	access:public	signature:(const UVector& other, UTokenAssigner *assign, UErrorCode &ec)
UVector::capacity	uvector.h	/^    int32_t capacity;$/;"	m	class:UVector	access:private
UVector::comparer	uvector.h	/^    UKeyComparator *comparer;$/;"	m	class:UVector	access:private
UVector::contains	uvector.h	/^    UBool contains(int32_t obj) const;$/;"	p	class:UVector	access:public	signature:(int32_t obj) const
UVector::contains	uvector.h	/^    UBool contains(void* obj) const;$/;"	p	class:UVector	access:public	signature:(void* obj) const
UVector::contains	uvector.h	/^inline UBool UVector::contains(int32_t obj) const {$/;"	f	class:UVector	signature:(int32_t obj) const
UVector::contains	uvector.h	/^inline UBool UVector::contains(void* obj) const {$/;"	f	class:UVector	signature:(void* obj) const
UVector::containsAll	uvector.cpp	/^UBool UVector::containsAll(const UVector& other) const {$/;"	f	class:UVector	signature:(const UVector& other) const
UVector::containsAll	uvector.h	/^    UBool containsAll(const UVector& other) const;$/;"	p	class:UVector	access:public	signature:(const UVector& other) const
UVector::containsNone	uvector.cpp	/^UBool UVector::containsNone(const UVector& other) const {$/;"	f	class:UVector	signature:(const UVector& other) const
UVector::containsNone	uvector.h	/^    UBool containsNone(const UVector& other) const;$/;"	p	class:UVector	access:public	signature:(const UVector& other) const
UVector::count	uvector.h	/^    int32_t count;$/;"	m	class:UVector	access:private
UVector::deleter	uvector.h	/^    UObjectDeleter *deleter;$/;"	m	class:UVector	access:private
UVector::elementAt	uvector.cpp	/^void* UVector::elementAt(int32_t index) const {$/;"	f	class:UVector	signature:(int32_t index) const
UVector::elementAt	uvector.h	/^    void* elementAt(int32_t index) const;$/;"	p	class:UVector	access:public	signature:(int32_t index) const
UVector::elementAti	uvector.cpp	/^int32_t UVector::elementAti(int32_t index) const {$/;"	f	class:UVector	signature:(int32_t index) const
UVector::elementAti	uvector.h	/^    int32_t elementAti(int32_t index) const;$/;"	p	class:UVector	access:public	signature:(int32_t index) const
UVector::elements	uvector.h	/^    UHashTok* elements;$/;"	m	class:UVector	access:private
UVector::ensureCapacity	uvector.cpp	/^UBool UVector::ensureCapacity(int32_t minimumCapacity, UErrorCode &status) {$/;"	f	class:UVector	signature:(int32_t minimumCapacity, UErrorCode &status)
UVector::ensureCapacity	uvector.h	/^    UBool ensureCapacity(int32_t minimumCapacity, UErrorCode &status);$/;"	p	class:UVector	access:public	signature:(int32_t minimumCapacity, UErrorCode &status)
UVector::equals	uvector.cpp	/^UBool   UVector::equals(const UVector &other) const {$/;"	f	class:UVector	signature:(const UVector &other) const
UVector::equals	uvector.h	/^    UBool equals(const UVector &other) const;$/;"	p	class:UVector	access:public	signature:(const UVector &other) const
UVector::firstElement	uvector.h	/^    void* firstElement(void) const;$/;"	p	class:UVector	access:public	signature:(void) const
UVector::firstElement	uvector.h	/^inline void* UVector::firstElement(void) const {$/;"	f	class:UVector	signature:(void) const
UVector::getDynamicClassID	uvector.h	/^    virtual UClassID getDynamicClassID() const;$/;"	p	class:UVector	access:public	signature:() const
UVector::getStaticClassID	uvector.h	/^    static UClassID U_EXPORT2 getStaticClassID();$/;"	p	class:UVector	access:public	signature:()
UVector::indexOf	uvector.cpp	/^int32_t UVector::indexOf(UHashTok key, int32_t startIndex, int8_t hint) const {$/;"	f	class:UVector	signature:(UHashTok key, int32_t startIndex, int8_t hint) const
UVector::indexOf	uvector.cpp	/^int32_t UVector::indexOf(int32_t obj, int32_t startIndex) const {$/;"	f	class:UVector	signature:(int32_t obj, int32_t startIndex) const
UVector::indexOf	uvector.cpp	/^int32_t UVector::indexOf(void* obj, int32_t startIndex) const {$/;"	f	class:UVector	signature:(void* obj, int32_t startIndex) const
UVector::indexOf	uvector.h	/^    int32_t indexOf(UHashTok key, int32_t startIndex = 0, int8_t hint = 0) const;$/;"	p	class:UVector	access:private	signature:(UHashTok key, int32_t startIndex = 0, int8_t hint = 0) const
UVector::indexOf	uvector.h	/^    int32_t indexOf(int32_t obj, int32_t startIndex = 0) const;$/;"	p	class:UVector	access:public	signature:(int32_t obj, int32_t startIndex = 0) const
UVector::indexOf	uvector.h	/^    int32_t indexOf(void* obj, int32_t startIndex = 0) const;$/;"	p	class:UVector	access:public	signature:(void* obj, int32_t startIndex = 0) const
UVector::insertElementAt	uvector.cpp	/^void UVector::insertElementAt(int32_t elem, int32_t index, UErrorCode &status) {$/;"	f	class:UVector	signature:(int32_t elem, int32_t index, UErrorCode &status)
UVector::insertElementAt	uvector.cpp	/^void UVector::insertElementAt(void* obj, int32_t index, UErrorCode &status) {$/;"	f	class:UVector	signature:(void* obj, int32_t index, UErrorCode &status)
UVector::insertElementAt	uvector.h	/^    void insertElementAt(int32_t elem, int32_t index, UErrorCode &status);$/;"	p	class:UVector	access:public	signature:(int32_t elem, int32_t index, UErrorCode &status)
UVector::insertElementAt	uvector.h	/^    void insertElementAt(void* obj, int32_t index, UErrorCode &status);$/;"	p	class:UVector	access:public	signature:(void* obj, int32_t index, UErrorCode &status)
UVector::isEmpty	uvector.h	/^    UBool isEmpty(void) const;$/;"	p	class:UVector	access:public	signature:(void) const
UVector::isEmpty	uvector.h	/^inline UBool UVector::isEmpty(void) const {$/;"	f	class:UVector	signature:(void) const
UVector::lastElement	uvector.h	/^    void* lastElement(void) const;$/;"	p	class:UVector	access:public	signature:(void) const
UVector::lastElement	uvector.h	/^inline void* UVector::lastElement(void) const {$/;"	f	class:UVector	signature:(void) const
UVector::lastElementi	uvector.h	/^    int32_t lastElementi(void) const;$/;"	p	class:UVector	access:public	signature:(void) const
UVector::lastElementi	uvector.h	/^inline int32_t UVector::lastElementi(void) const {$/;"	f	class:UVector	signature:(void) const
UVector::operator !=	uvector.h	/^    inline UBool operator!=(const UVector& other);$/;"	p	class:UVector	access:public	signature:(const UVector& other)
UVector::operator !=	uvector.h	/^inline UBool UVector::operator!=(const UVector& other) {$/;"	f	class:UVector	signature:(const UVector& other)
UVector::operator =	uvector.h	/^    UVector& operator=(const UVector&);$/;"	p	class:UVector	access:private	signature:(const UVector&)
UVector::operator ==	uvector.cpp	/^UBool UVector::operator==(const UVector& other) {$/;"	f	class:UVector	signature:(const UVector& other)
UVector::operator ==	uvector.h	/^    UBool operator==(const UVector& other);$/;"	p	class:UVector	access:public	signature:(const UVector& other)
UVector::operator []	uvector.h	/^    void* operator[](int32_t index) const;$/;"	p	class:UVector	access:public	signature:(int32_t index) const
UVector::operator []	uvector.h	/^inline void* UVector::operator[](int32_t index) const {$/;"	f	class:UVector	signature:(int32_t index) const
UVector::orphanElementAt	uvector.cpp	/^void* UVector::orphanElementAt(int32_t index) {$/;"	f	class:UVector	signature:(int32_t index)
UVector::orphanElementAt	uvector.h	/^    void* orphanElementAt(int32_t index);$/;"	p	class:UVector	access:public	signature:(int32_t index)
UVector::removeAll	uvector.cpp	/^UBool UVector::removeAll(const UVector& other) {$/;"	f	class:UVector	signature:(const UVector& other)
UVector::removeAll	uvector.h	/^    UBool removeAll(const UVector& other);$/;"	p	class:UVector	access:public	signature:(const UVector& other)
UVector::removeAllElements	uvector.cpp	/^void UVector::removeAllElements(void) {$/;"	f	class:UVector	signature:(void)
UVector::removeAllElements	uvector.h	/^    void removeAllElements();$/;"	p	class:UVector	access:public	signature:()
UVector::removeElement	uvector.cpp	/^UBool UVector::removeElement(void* obj) {$/;"	f	class:UVector	signature:(void* obj)
UVector::removeElement	uvector.h	/^    UBool removeElement(void* obj);$/;"	p	class:UVector	access:public	signature:(void* obj)
UVector::removeElementAt	uvector.cpp	/^void UVector::removeElementAt(int32_t index) {$/;"	f	class:UVector	signature:(int32_t index)
UVector::removeElementAt	uvector.h	/^    void removeElementAt(int32_t index);$/;"	p	class:UVector	access:public	signature:(int32_t index)
UVector::retainAll	uvector.cpp	/^UBool UVector::retainAll(const UVector& other) {$/;"	f	class:UVector	signature:(const UVector& other)
UVector::retainAll	uvector.h	/^    UBool retainAll(const UVector& other);$/;"	p	class:UVector	access:public	signature:(const UVector& other)
UVector::setComparer	uvector.cpp	/^UKeyComparator *UVector::setComparer(UKeyComparator *d) {$/;"	f	class:UVector	signature:(UKeyComparator *d)
UVector::setComparer	uvector.h	/^    UKeyComparator *setComparer(UKeyComparator *c);$/;"	p	class:UVector	access:public	signature:(UKeyComparator *c)
UVector::setDeleter	uvector.cpp	/^UObjectDeleter *UVector::setDeleter(UObjectDeleter *d) {$/;"	f	class:UVector	signature:(UObjectDeleter *d)
UVector::setDeleter	uvector.h	/^    UObjectDeleter *setDeleter(UObjectDeleter *d);$/;"	p	class:UVector	access:public	signature:(UObjectDeleter *d)
UVector::setElementAt	uvector.cpp	/^void UVector::setElementAt(int32_t elem, int32_t index) {$/;"	f	class:UVector	signature:(int32_t elem, int32_t index)
UVector::setElementAt	uvector.cpp	/^void UVector::setElementAt(void* obj, int32_t index) {$/;"	f	class:UVector	signature:(void* obj, int32_t index)
UVector::setElementAt	uvector.h	/^    void setElementAt(int32_t elem, int32_t index);$/;"	p	class:UVector	access:public	signature:(int32_t elem, int32_t index)
UVector::setElementAt	uvector.h	/^    void setElementAt(void* obj, int32_t index);$/;"	p	class:UVector	access:public	signature:(void* obj, int32_t index)
UVector::setSize	uvector.cpp	/^void UVector::setSize(int32_t newSize, UErrorCode &status) {$/;"	f	class:UVector	signature:(int32_t newSize, UErrorCode &status)
UVector::setSize	uvector.h	/^    void setSize(int32_t newSize, UErrorCode &status);$/;"	p	class:UVector	access:public	signature:(int32_t newSize, UErrorCode &status)
UVector::size	uvector.h	/^    int32_t size(void) const;$/;"	p	class:UVector	access:public	signature:(void) const
UVector::size	uvector.h	/^inline int32_t UVector::size(void) const {$/;"	f	class:UVector	signature:(void) const
UVector::sort	uvector.cpp	/^void UVector::sort(USortComparator *compare, UErrorCode &ec) {$/;"	f	class:UVector	signature:(USortComparator *compare, UErrorCode &ec)
UVector::sort	uvector.h	/^    void sort(USortComparator *compare, UErrorCode &ec);$/;"	p	class:UVector	access:public	signature:(USortComparator *compare, UErrorCode &ec)
UVector::sortedInsert	uvector.cpp	/^void UVector::sortedInsert(UHashTok tok, USortComparator *compare, UErrorCode& ec) {$/;"	f	class:UVector	signature:(UHashTok tok, USortComparator *compare, UErrorCode& ec)
UVector::sortedInsert	uvector.cpp	/^void UVector::sortedInsert(int32_t obj, USortComparator *compare, UErrorCode& ec) {$/;"	f	class:UVector	signature:(int32_t obj, USortComparator *compare, UErrorCode& ec)
UVector::sortedInsert	uvector.cpp	/^void UVector::sortedInsert(void* obj, USortComparator *compare, UErrorCode& ec) {$/;"	f	class:UVector	signature:(void* obj, USortComparator *compare, UErrorCode& ec)
UVector::sortedInsert	uvector.h	/^    void sortedInsert(UHashTok tok, USortComparator *compare, UErrorCode& ec);$/;"	p	class:UVector	access:private	signature:(UHashTok tok, USortComparator *compare, UErrorCode& ec)
UVector::sortedInsert	uvector.h	/^    void sortedInsert(int32_t obj, USortComparator *compare, UErrorCode& ec);$/;"	p	class:UVector	access:public	signature:(int32_t obj, USortComparator *compare, UErrorCode& ec)
UVector::sortedInsert	uvector.h	/^    void sortedInsert(void* obj, USortComparator *compare, UErrorCode& ec);$/;"	p	class:UVector	access:public	signature:(void* obj, USortComparator *compare, UErrorCode& ec)
UVector::sorti	uvector.cpp	/^void UVector::sorti(UErrorCode &ec) {$/;"	f	class:UVector	signature:(UErrorCode &ec)
UVector::sorti	uvector.h	/^    void sorti(UErrorCode &ec);$/;"	p	class:UVector	access:public	signature:(UErrorCode &ec)
UVector::toArray	uvector.cpp	/^void** UVector::toArray(void** result) const {$/;"	f	class:UVector	signature:(void** result) const
UVector::toArray	uvector.h	/^    void** toArray(void** result) const;$/;"	p	class:UVector	access:public	signature:(void** result) const
UVector::~UVector	uvector.cpp	/^UVector::~UVector() {$/;"	f	class:UVector	signature:()
UVector::~UVector	uvector.h	/^    virtual ~UVector();$/;"	p	class:UVector	access:public	signature:()
UVectorDeleter	serv.cpp	/^    UVectorDeleter() : _obj(NULL) {}$/;"	f	struct:UVectorDeleter	access:public	signature:()
UVectorDeleter	serv.cpp	/^struct UVectorDeleter {$/;"	s	file:
UVectorDeleter::UVectorDeleter	serv.cpp	/^    UVectorDeleter() : _obj(NULL) {}$/;"	f	struct:UVectorDeleter	access:public	signature:()
UVectorDeleter::_obj	serv.cpp	/^    UVector* _obj;$/;"	m	struct:UVectorDeleter	file:	access:public
UVectorDeleter::~UVectorDeleter	serv.cpp	/^    ~UVectorDeleter() { delete _obj; }$/;"	f	struct:UVectorDeleter	access:public	signature:()
UVersionInfo	unicode/uversion.h	/^typedef uint8_t UVersionInfo[U_MAX_VERSION_LENGTH];$/;"	t
UWordBreak	unicode/ubrk.h	/^typedef enum UWordBreak {$/;"	g
UWordBreak	unicode/ubrk.h	/^} UWordBreak;$/;"	t	typeref:enum:UWordBreak
UWordBreakValues	unicode/uchar.h	/^typedef enum UWordBreakValues {$/;"	g
UWordBreakValues	unicode/uchar.h	/^} UWordBreakValues;$/;"	t	typeref:enum:UWordBreakValues
U_A	uprops.h	/^    U_A     =0x0041,$/;"	e	enum:__anon90
U_ALIGNMENT_OFFSET	cmemory.h	71;"	d
U_ALIGNMENT_OFFSET_UP	cmemory.h	77;"	d
U_ALIGN_CODE	unicode/platform.h	366;"	d
U_ALIGN_CODE	unicode/ppalmos.h	258;"	d
U_ALIGN_CODE	unicode/ppalmos.h	260;"	d
U_ALIGN_CODE	unicode/pwin32.h	347;"	d
U_ALIGN_CODE	unicode/pwin32.h	349;"	d
U_ALIGN_CODE	unicode/umachine.h	354;"	d
U_AMBIGUOUS_ALIAS_WARNING	unicode/utypes.h	/^    U_AMBIGUOUS_ALIAS_WARNING = -122,   \/**< This converter alias can go to different converter implementations *\/$/;"	e	enum:UErrorCode
U_ARABIC_NUMBER	unicode/uchar.h	/^    U_ARABIC_NUMBER               = 5,$/;"	e	enum:UCharDirection
U_ARGUMENT_TYPE_MISMATCH	unicode/utypes.h	/^    U_ARGUMENT_TYPE_MISMATCH,         \/**< Argument name and argument index mismatch in MessageFormat functions *\/$/;"	e	enum:UErrorCode
U_ASCII_FAMILY	unicode/utypes.h	109;"	d
U_ASSERT	uassert.h	25;"	d
U_ASSERT	uassert.h	28;"	d
U_ASSERT_H	uassert.h	21;"	d
U_ATTRIBUTE_DEPRECATED	unicode/umachine.h	114;"	d
U_ATTRIBUTE_DEPRECATED	unicode/umachine.h	121;"	d
U_ATTRIBUTE_DEPRECATED	unicode/umachine.h	123;"	d
U_BAD_VARIABLE_DEFINITION	unicode/utypes.h	/^    U_BAD_VARIABLE_DEFINITION=0x10000,\/**< Missing '$' or duplicate variable name *\/$/;"	e	enum:UErrorCode
U_BIDI_CLASS_DEFAULT	unicode/ubidi.h	1878;"	d
U_BLOCK_SEPARATOR	unicode/uchar.h	/^    U_BLOCK_SEPARATOR             = 7,$/;"	e	enum:UCharDirection
U_BMP_MAX	ustring.c	29;"	d	file:
U_BOUNDARY_NEUTRAL	unicode/uchar.h	/^    U_BOUNDARY_NEUTRAL            = 18,$/;"	e	enum:UCharDirection
U_BRK_ASSIGN_ERROR	unicode/utypes.h	/^    U_BRK_ASSIGN_ERROR,                    \/**< Syntax error in RBBI rule assignment statement.   *\/$/;"	e	enum:UErrorCode
U_BRK_ERROR_LIMIT	unicode/utypes.h	/^    U_BRK_ERROR_LIMIT,                     \/**< This must always be the last value to indicate the limit for Break Iterator failures *\/$/;"	e	enum:UErrorCode
U_BRK_ERROR_START	unicode/utypes.h	/^    U_BRK_ERROR_START=0x10200,             \/**< Start of codes indicating Break Iterator failures *\/$/;"	e	enum:UErrorCode
U_BRK_HEX_DIGITS_EXPECTED	unicode/utypes.h	/^    U_BRK_HEX_DIGITS_EXPECTED,             \/**< Hex digits expected as part of a escaped char in a rule. *\/$/;"	e	enum:UErrorCode
U_BRK_INIT_ERROR	unicode/utypes.h	/^    U_BRK_INIT_ERROR,                      \/**< Initialization failure.  Probable missing ICU Data. *\/$/;"	e	enum:UErrorCode
U_BRK_INTERNAL_ERROR	unicode/utypes.h	/^    U_BRK_INTERNAL_ERROR=0x10200,          \/**< An internal error (bug) was detected.             *\/$/;"	e	enum:UErrorCode
U_BRK_MALFORMED_RULE_TAG	unicode/utypes.h	/^    U_BRK_MALFORMED_RULE_TAG,              \/**< The {nnn} tag on a rule is mal formed             *\/$/;"	e	enum:UErrorCode
U_BRK_MISMATCHED_PAREN	unicode/utypes.h	/^    U_BRK_MISMATCHED_PAREN,                \/**< Mis-matched parentheses in an RBBI rule.          *\/$/;"	e	enum:UErrorCode
U_BRK_NEW_LINE_IN_QUOTED_STRING	unicode/utypes.h	/^    U_BRK_NEW_LINE_IN_QUOTED_STRING,       \/**< Missing closing quote in an RBBI rule.            *\/$/;"	e	enum:UErrorCode
U_BRK_RULE_EMPTY_SET	unicode/utypes.h	/^    U_BRK_RULE_EMPTY_SET,                  \/**< Rule contains an empty Unicode Set.               *\/$/;"	e	enum:UErrorCode
U_BRK_RULE_SYNTAX	unicode/utypes.h	/^    U_BRK_RULE_SYNTAX,                     \/**< Syntax error in RBBI rule.                        *\/$/;"	e	enum:UErrorCode
U_BRK_SAFECLONE_BUFFERSIZE	unicode/ubrk.h	270;"	d
U_BRK_SEMICOLON_EXPECTED	unicode/utypes.h	/^    U_BRK_SEMICOLON_EXPECTED,              \/**< Missing ';' at the end of a RBBI rule.            *\/$/;"	e	enum:UErrorCode
U_BRK_UNCLOSED_SET	unicode/utypes.h	/^    U_BRK_UNCLOSED_SET,                    \/**< UnicodeSet witing an RBBI rule missing a closing ']'.  *\/$/;"	e	enum:UErrorCode
U_BRK_UNDEFINED_VARIABLE	unicode/utypes.h	/^    U_BRK_UNDEFINED_VARIABLE,              \/**< Use of an undefined $Variable in an RBBI rule.    *\/$/;"	e	enum:UErrorCode
U_BRK_UNRECOGNIZED_OPTION	unicode/utypes.h	/^    U_BRK_UNRECOGNIZED_OPTION,             \/**< !!option in RBBI rules not recognized.            *\/$/;"	e	enum:UErrorCode
U_BRK_VARIABLE_REDFINITION	unicode/utypes.h	/^    U_BRK_VARIABLE_REDFINITION,            \/**< RBBI rule $Variable redefined.                    *\/$/;"	e	enum:UErrorCode
U_BUFFER_OVERFLOW_ERROR	unicode/utypes.h	/^    U_BUFFER_OVERFLOW_ERROR   = 15,     \/**< A result would not fit in the supplied buffer *\/$/;"	e	enum:UErrorCode
U_CALLCONV	unicode/utypes.h	278;"	d
U_CALLCONV	unicode/utypes.h	280;"	d
U_CAPI	unicode/umachine.h	126;"	d
U_CDECL_BEGIN	unicode/umachine.h	100;"	d
U_CDECL_BEGIN	unicode/umachine.h	104;"	d
U_CDECL_END	unicode/umachine.h	101;"	d
U_CDECL_END	unicode/umachine.h	105;"	d
U_CE_NOT_FOUND_ERROR	unicode/utypes.h	/^    U_CE_NOT_FOUND_ERROR      = 21,     \/**< Currently used only while setting variable top, but can be used generally *\/$/;"	e	enum:UErrorCode
U_CFUNC	unicode/umachine.h	103;"	d
U_CFUNC	unicode/umachine.h	99;"	d
U_CHARSET_FAMILY	unicode/platform.h	220;"	d
U_CHARSET_FAMILY	unicode/utypes.h	161;"	d
U_CHARSET_IS_UTF8	unicode/utypes.h	185;"	d
U_CHAR_CATEGORY_COUNT	unicode/uchar.h	/^    U_CHAR_CATEGORY_COUNT$/;"	e	enum:UCharCategory
U_CHAR_DIRECTION_COUNT	unicode/uchar.h	/^    U_CHAR_DIRECTION_COUNT$/;"	e	enum:UCharDirection
U_CHAR_EXTENDED_CATEGORY_COUNT	unames.c	120;"	d	file:
U_CHAR_NAME_ALIAS	unicode/uchar.h	/^    U_CHAR_NAME_ALIAS,          \/**< Corrected name from NameAliases.txt. @stable ICU 4.4 *\/$/;"	e	enum:UCharNameChoice
U_CHAR_NAME_CHOICE_COUNT	unicode/uchar.h	/^    U_CHAR_NAME_CHOICE_COUNT$/;"	e	enum:UCharNameChoice
U_CHECK_DYLOAD	unicode/platform.h	204;"	d
U_CNV_SAFECLONE_BUFFERSIZE	unicode/ucnv.h	511;"	d
U_COLLATOR_VERSION_MISMATCH	unicode/utypes.h	/^    U_COLLATOR_VERSION_MISMATCH = 28,   \/**< Collator version is not compatible with the base version *\/$/;"	e	enum:UErrorCode
U_COMBINING_SPACING_MARK	unicode/uchar.h	/^    U_COMBINING_SPACING_MARK  = 8,$/;"	e	enum:UCharCategory
U_COMMON_API	unicode/utypes.h	436;"	d
U_COMMON_API	unicode/utypes.h	444;"	d
U_COMMON_API	unicode/utypes.h	452;"	d
U_COMMON_API	unicode/utypes.h	460;"	d
U_COMMON_API	unicode/utypes.h	468;"	d
U_COMMON_API	unicode/utypes.h	476;"	d
U_COMMON_API	unicode/utypes.h	484;"	d
U_COMMON_API	unicode/utypes.h	492;"	d
U_COMMON_API	unicode/utypes.h	500;"	d
U_COMMON_IMPLEMENTATION	ubidiwrt.c	22;"	d	file:
U_COMMON_NUMBER_SEPARATOR	unicode/uchar.h	/^    U_COMMON_NUMBER_SEPARATOR     = 6,$/;"	e	enum:UCharDirection
U_COMPARE_CODE_POINT_ORDER	unicode/unistr.h	45;"	d
U_COMPARE_CODE_POINT_ORDER	unicode/unorm.h	484;"	d
U_COMPARE_CODE_POINT_ORDER	unicode/ustring.h	500;"	d
U_COMPARE_IGNORE_CASE	unicode/unorm.h	475;"	d
U_COMPARE_IGNORE_CASE	ustr_imp.h	35;"	d
U_CONNECTOR_PUNCTUATION	unicode/uchar.h	/^    U_CONNECTOR_PUNCTUATION   = 22,$/;"	e	enum:UCharCategory
U_CONTROL_CHAR	unicode/uchar.h	/^    U_CONTROL_CHAR            = 15,$/;"	e	enum:UCharCategory
U_COPYRIGHT_STRING	unicode/uvernum.h	44;"	d
U_COPYRIGHT_STRING_LENGTH	unicode/uversion.h	36;"	d
U_CURRENCY_SYMBOL	unicode/uchar.h	/^    U_CURRENCY_SYMBOL         = 25,$/;"	e	enum:UCharCategory
U_DASH_PUNCTUATION	unicode/uchar.h	/^    U_DASH_PUNCTUATION        = 19,$/;"	e	enum:UCharCategory
U_DATA_API	unicode/utypes.h	435;"	d
U_DATA_API	unicode/utypes.h	443;"	d
U_DATA_API	unicode/utypes.h	451;"	d
U_DATA_API	unicode/utypes.h	459;"	d
U_DATA_API	unicode/utypes.h	467;"	d
U_DATA_API	unicode/utypes.h	475;"	d
U_DATA_API	unicode/utypes.h	483;"	d
U_DATA_API	unicode/utypes.h	491;"	d
U_DATA_API	unicode/utypes.h	499;"	d
U_DATA_PATHITER_BUFSIZ	udata.cpp	382;"	d	file:
U_DAYLIGHT	unicode/pwin32.h	308;"	d
U_DEBUG	unicode/platform.h	164;"	d
U_DEBUG	unicode/ppalmos.h	161;"	d
U_DEBUG	unicode/ppalmos.h	163;"	d
U_DEBUG	unicode/pwin32.h	205;"	d
U_DEBUG	unicode/pwin32.h	207;"	d
U_DECIMAL_DIGIT_NUMBER	unicode/uchar.h	/^    U_DECIMAL_DIGIT_NUMBER    = 9,$/;"	e	enum:UCharCategory
U_DECIMAL_NUMBER_SYNTAX_ERROR	unicode/utypes.h	/^    U_DECIMAL_NUMBER_SYNTAX_ERROR,    \/**< Decimal number syntax error *\/$/;"	e	enum:UErrorCode
U_DECLARE_UTF16	unicode/platform.h	276;"	d
U_DECLARE_UTF16	unicode/platform.h	280;"	d
U_DECLARE_UTF16	unicode/platform.h	283;"	d
U_DECLARE_UTF16	unicode/pwin32.h	279;"	d
U_DEF2_ICUDATA_ENTRY_POINT	unicode/utypes.h	256;"	d
U_DEFAULT_KEYWORD_MISSING	unicode/utypes.h	/^    U_DEFAULT_KEYWORD_MISSING,        \/**< Missing DEFAULT rule in plural rules *\/$/;"	e	enum:UErrorCode
U_DEFAULT_SHOW_DRAFT	unicode/platform.h	210;"	d
U_DEFAULT_SHOW_DRAFT	unicode/ppalmos.h	201;"	d
U_DEFAULT_SHOW_DRAFT	unicode/pwin32.h	246;"	d
U_DEFINE_LOCAL_OPEN_POINTER	unicode/localpointer.h	286;"	d
U_DEFINE_LOCAL_OPEN_POINTER	unicode/ubidi.h	/^U_DEFINE_LOCAL_OPEN_POINTER(LocalUBiDiPointer, UBiDi, ubidi_close);$/;"	p	signature:(LocalUBiDiPointer, UBiDi, ubidi_close)
U_DEFINE_LOCAL_OPEN_POINTER	unicode/ubrk.h	/^U_DEFINE_LOCAL_OPEN_POINTER(LocalUBreakIteratorPointer, UBreakIterator, ubrk_close);$/;"	p	signature:(LocalUBreakIteratorPointer, UBreakIterator, ubrk_close)
U_DEFINE_LOCAL_OPEN_POINTER	unicode/ucasemap.h	/^U_DEFINE_LOCAL_OPEN_POINTER(LocalUCaseMapPointer, UCaseMap, ucasemap_close);$/;"	p	signature:(LocalUCaseMapPointer, UCaseMap, ucasemap_close)
U_DEFINE_LOCAL_OPEN_POINTER	unicode/ucnv.h	/^U_DEFINE_LOCAL_OPEN_POINTER(LocalUConverterPointer, UConverter, ucnv_close);$/;"	p	signature:(LocalUConverterPointer, UConverter, ucnv_close)
U_DEFINE_LOCAL_OPEN_POINTER	unicode/ucnvsel.h	/^U_DEFINE_LOCAL_OPEN_POINTER(LocalUConverterSelectorPointer, UConverterSelector, ucnvsel_close);$/;"	p	signature:(LocalUConverterSelectorPointer, UConverterSelector, ucnvsel_close)
U_DEFINE_LOCAL_OPEN_POINTER	unicode/udata.h	/^U_DEFINE_LOCAL_OPEN_POINTER(LocalUDataMemoryPointer, UDataMemory, udata_close);$/;"	p	signature:(LocalUDataMemoryPointer, UDataMemory, udata_close)
U_DEFINE_LOCAL_OPEN_POINTER	unicode/uenum.h	/^U_DEFINE_LOCAL_OPEN_POINTER(LocalUEnumerationPointer, UEnumeration, uenum_close);$/;"	p	signature:(LocalUEnumerationPointer, UEnumeration, uenum_close)
U_DEFINE_LOCAL_OPEN_POINTER	unicode/uidna.h	/^U_DEFINE_LOCAL_OPEN_POINTER(LocalUIDNAPointer, UIDNA, uidna_close);$/;"	p	signature:(LocalUIDNAPointer, UIDNA, uidna_close)
U_DEFINE_LOCAL_OPEN_POINTER	unicode/unorm2.h	/^U_DEFINE_LOCAL_OPEN_POINTER(LocalUNormalizer2Pointer, UNormalizer2, unorm2_close);$/;"	p	signature:(LocalUNormalizer2Pointer, UNormalizer2, unorm2_close)
U_DEFINE_LOCAL_OPEN_POINTER	unicode/ures.h	/^U_DEFINE_LOCAL_OPEN_POINTER(LocalUResourceBundlePointer, UResourceBundle, ures_close);$/;"	p	signature:(LocalUResourceBundlePointer, UResourceBundle, ures_close)
U_DEFINE_LOCAL_OPEN_POINTER	unicode/uset.h	/^U_DEFINE_LOCAL_OPEN_POINTER(LocalUSetPointer, USet, uset_close);$/;"	p	signature:(LocalUSetPointer, USet, uset_close)
U_DEFINE_LOCAL_OPEN_POINTER	unicode/usprep.h	/^U_DEFINE_LOCAL_OPEN_POINTER(LocalUStringPrepProfilePointer, UStringPrepProfile, usprep_close);$/;"	p	signature:(LocalUStringPrepProfilePointer, UStringPrepProfile, usprep_close)
U_DEFINE_LOCAL_OPEN_POINTER	unicode/utext.h	/^U_DEFINE_LOCAL_OPEN_POINTER(LocalUTextPointer, UText, utext_close);$/;"	p	signature:(LocalUTextPointer, UText, utext_close)
U_DEF_ICUDATA_ENTRY_POINT	unicode/platform.h	431;"	d
U_DEF_ICUDATA_ENTRY_POINT	unicode/utypes.h	263;"	d
U_DEPRECATED	unicode/umachine.h	132;"	d
U_DIFFERENT_UCA_VERSION	unicode/utypes.h	/^    U_DIFFERENT_UCA_VERSION = -121,     \/**< ucol_open encountered a mismatch between UCA version and collator image version, so the collator was constructed from rules. No impact to further function *\/$/;"	e	enum:UErrorCode
U_DIR_NON_SPACING_MARK	unicode/uchar.h	/^    U_DIR_NON_SPACING_MARK        = 17,$/;"	e	enum:UCharDirection
U_DISABLE_RENAMING	unicode/platform.h	174;"	d
U_DISABLE_RENAMING	unicode/ppalmos.h	178;"	d
U_DISABLE_RENAMING	unicode/pwin32.h	223;"	d
U_DRAFT	unicode/umachine.h	130;"	d
U_DT_CANONICAL	unicode/uchar.h	/^    U_DT_CANONICAL,         \/*[can]*\/$/;"	e	enum:UDecompositionType
U_DT_CIRCLE	unicode/uchar.h	/^    U_DT_CIRCLE,            \/*[enc]*\/$/;"	e	enum:UDecompositionType
U_DT_COMPAT	unicode/uchar.h	/^    U_DT_COMPAT,            \/*[com]*\/$/;"	e	enum:UDecompositionType
U_DT_COUNT	unicode/uchar.h	/^    U_DT_COUNT \/* 18 *\/$/;"	e	enum:UDecompositionType
U_DT_FINAL	unicode/uchar.h	/^    U_DT_FINAL,             \/*[fin]*\/$/;"	e	enum:UDecompositionType
U_DT_FONT	unicode/uchar.h	/^    U_DT_FONT,              \/*[font]*\/$/;"	e	enum:UDecompositionType
U_DT_FRACTION	unicode/uchar.h	/^    U_DT_FRACTION,          \/*[fra]*\/$/;"	e	enum:UDecompositionType
U_DT_INITIAL	unicode/uchar.h	/^    U_DT_INITIAL,           \/*[init]*\/$/;"	e	enum:UDecompositionType
U_DT_ISOLATED	unicode/uchar.h	/^    U_DT_ISOLATED,          \/*[iso]*\/$/;"	e	enum:UDecompositionType
U_DT_MEDIAL	unicode/uchar.h	/^    U_DT_MEDIAL,            \/*[med]*\/$/;"	e	enum:UDecompositionType
U_DT_NARROW	unicode/uchar.h	/^    U_DT_NARROW,            \/*[nar]*\/$/;"	e	enum:UDecompositionType
U_DT_NOBREAK	unicode/uchar.h	/^    U_DT_NOBREAK,           \/*[nb]*\/$/;"	e	enum:UDecompositionType
U_DT_NONE	unicode/uchar.h	/^    U_DT_NONE,              \/*[none]*\/ \/*See note !!*\/$/;"	e	enum:UDecompositionType
U_DT_SMALL	unicode/uchar.h	/^    U_DT_SMALL,             \/*[sml]*\/$/;"	e	enum:UDecompositionType
U_DT_SQUARE	unicode/uchar.h	/^    U_DT_SQUARE,            \/*[sqr]*\/$/;"	e	enum:UDecompositionType
U_DT_SUB	unicode/uchar.h	/^    U_DT_SUB,               \/*[sub]*\/$/;"	e	enum:UDecompositionType
U_DT_SUPER	unicode/uchar.h	/^    U_DT_SUPER,             \/*[sup]*\/$/;"	e	enum:UDecompositionType
U_DT_VERTICAL	unicode/uchar.h	/^    U_DT_VERTICAL,          \/*[vert]*\/$/;"	e	enum:UDecompositionType
U_DT_WIDE	unicode/uchar.h	/^    U_DT_WIDE,              \/*[wide]*\/$/;"	e	enum:UDecompositionType
U_DUPLICATE_KEYWORD	unicode/utypes.h	/^    U_DUPLICATE_KEYWORD,              \/**< Duplicate keyword in PluralFormat *\/$/;"	e	enum:UErrorCode
U_EA_AMBIGUOUS	unicode/uchar.h	/^    U_EA_AMBIGUOUS, \/*[A]*\/$/;"	e	enum:UEastAsianWidth
U_EA_COUNT	unicode/uchar.h	/^    U_EA_COUNT$/;"	e	enum:UEastAsianWidth
U_EA_FULLWIDTH	unicode/uchar.h	/^    U_EA_FULLWIDTH, \/*[F]*\/$/;"	e	enum:UEastAsianWidth
U_EA_HALFWIDTH	unicode/uchar.h	/^    U_EA_HALFWIDTH, \/*[H]*\/$/;"	e	enum:UEastAsianWidth
U_EA_NARROW	unicode/uchar.h	/^    U_EA_NARROW,    \/*[Na]*\/$/;"	e	enum:UEastAsianWidth
U_EA_NEUTRAL	unicode/uchar.h	/^    U_EA_NEUTRAL,   \/*[N]*\/ \/*See note !!*\/$/;"	e	enum:UEastAsianWidth
U_EA_WIDE	unicode/uchar.h	/^    U_EA_WIDE,      \/*[W]*\/$/;"	e	enum:UEastAsianWidth
U_EBCDIC_FAMILY	unicode/utypes.h	115;"	d
U_ENABLE_DYLOAD	unicode/platform.h	196;"	d
U_ENABLE_DYLOAD	unicode/pwin32.h	315;"	d
U_ENABLE_TRACING	unicode/platform.h	188;"	d
U_ENABLE_TRACING	unicode/ppalmos.h	196;"	d
U_ENABLE_TRACING	unicode/pwin32.h	241;"	d
U_ENCLOSING_MARK	unicode/uchar.h	/^    U_ENCLOSING_MARK          = 7,$/;"	e	enum:UCharCategory
U_END_PUNCTUATION	unicode/uchar.h	/^    U_END_PUNCTUATION         = 21,$/;"	e	enum:UCharCategory
U_ENUM_OUT_OF_SYNC_ERROR	unicode/utypes.h	/^    U_ENUM_OUT_OF_SYNC_ERROR  = 25,     \/**< UEnumeration out of sync with underlying collection *\/$/;"	e	enum:UErrorCode
U_ERROR_LIMIT	unicode/utypes.h	/^    U_ERROR_LIMIT=U_PLUGIN_ERROR_LIMIT      \/**< This must always be the last value to indicate the limit for UErrorCode (last error code +1) *\/$/;"	e	enum:UErrorCode
U_ERROR_WARNING_LIMIT	unicode/utypes.h	/^    U_ERROR_WARNING_LIMIT,              \/**< This must always be the last warning value to indicate the limit for UErrorCode warnings (last warning code +1) *\/$/;"	e	enum:UErrorCode
U_ERROR_WARNING_START	unicode/utypes.h	/^    U_ERROR_WARNING_START     = -128,   \/**< Start of information results (semantically successful) *\/$/;"	e	enum:UErrorCode
U_ETHER	unicode/unifilt.h	31;"	d
U_EUROPEAN_NUMBER	unicode/uchar.h	/^    U_EUROPEAN_NUMBER             = 2,$/;"	e	enum:UCharDirection
U_EUROPEAN_NUMBER_SEPARATOR	unicode/uchar.h	/^    U_EUROPEAN_NUMBER_SEPARATOR   = 3,$/;"	e	enum:UCharDirection
U_EUROPEAN_NUMBER_TERMINATOR	unicode/uchar.h	/^    U_EUROPEAN_NUMBER_TERMINATOR  = 4,$/;"	e	enum:UCharDirection
U_EXPORT	unicode/platform.h	331;"	d
U_EXPORT	unicode/platform.h	334;"	d
U_EXPORT	unicode/platform.h	338;"	d
U_EXPORT	unicode/ppalmos.h	241;"	d
U_EXPORT	unicode/pwin32.h	326;"	d
U_EXPORT	unicode/pwin32.h	328;"	d
U_EXPORT2	unicode/platform.h	342;"	d
U_EXPORT2	unicode/ppalmos.h	242;"	d
U_EXPORT2	unicode/pwin32.h	330;"	d
U_EXTENDED_CHAR_NAME	unicode/uchar.h	/^    U_EXTENDED_CHAR_NAME,$/;"	e	enum:UCharNameChoice
U_F	uprops.h	/^    U_F     =0x0046,$/;"	e	enum:__anon90
U_FAILURE	unicode/utypes.h	/^    inline UBool U_FAILURE(UErrorCode code) { return (UBool)(code>U_ZERO_ERROR); }$/;"	f	signature:(UErrorCode code)
U_FAILURE	unicode/utypes.h	852;"	d
U_FILE_ACCESS_ERROR	unicode/utypes.h	/^    U_FILE_ACCESS_ERROR       =  4,     \/**< The requested file cannot be found *\/$/;"	e	enum:UErrorCode
U_FILE_ALT_SEP_CHAR	unicode/putil.h	127;"	d
U_FILE_ALT_SEP_CHAR	unicode/putil.h	134;"	d
U_FILE_ALT_SEP_CHAR	unicode/putil.h	141;"	d
U_FILE_ALT_SEP_STRING	unicode/putil.h	130;"	d
U_FILE_ALT_SEP_STRING	unicode/putil.h	137;"	d
U_FILE_ALT_SEP_STRING	unicode/putil.h	144;"	d
U_FILE_SEP_CHAR	unicode/putil.h	126;"	d
U_FILE_SEP_CHAR	unicode/putil.h	133;"	d
U_FILE_SEP_CHAR	unicode/putil.h	140;"	d
U_FILE_SEP_STRING	unicode/putil.h	129;"	d
U_FILE_SEP_STRING	unicode/putil.h	136;"	d
U_FILE_SEP_STRING	unicode/putil.h	143;"	d
U_FINAL_PUNCTUATION	unicode/uchar.h	/^    U_FINAL_PUNCTUATION       = 29,$/;"	e	enum:UCharCategory
U_FIXED	uhash.h	/^    U_FIXED            \/* Never change size *\/$/;"	e	enum:UHashResizePolicy
U_FMT_PARSE_ERROR_LIMIT	unicode/utypes.h	/^    U_FMT_PARSE_ERROR_LIMIT,          \/**< The limit for format library errors *\/$/;"	e	enum:UErrorCode
U_FMT_PARSE_ERROR_START	unicode/utypes.h	/^    U_FMT_PARSE_ERROR_START=0x10100,  \/**< Start of format library errors *\/$/;"	e	enum:UErrorCode
U_FOLD_CASE_DEFAULT	unicode/uchar.h	2989;"	d
U_FOLD_CASE_EXCLUDE_SPECIAL_I	unicode/uchar.h	3007;"	d
U_FORMAT_CHAR	unicode/uchar.h	/^    U_FORMAT_CHAR             = 16,$/;"	e	enum:UCharCategory
U_FW_A	uprops.h	/^    U_FW_A  =0xff21,$/;"	e	enum:__anon90
U_FW_F	uprops.h	/^    U_FW_F  =0xff26,$/;"	e	enum:__anon90
U_FW_Z	uprops.h	/^    U_FW_Z  =0xff3a,$/;"	e	enum:__anon90
U_FW_a	uprops.h	/^    U_FW_a  =0xff41,$/;"	e	enum:__anon90
U_FW_f	uprops.h	/^    U_FW_f  =0xff46,$/;"	e	enum:__anon90
U_FW_z	uprops.h	/^    U_FW_z  =0xff5a,$/;"	e	enum:__anon90
U_GCB_CONTROL	unicode/uchar.h	/^    U_GCB_CONTROL = 1,          \/*[CN]*\/$/;"	e	enum:UGraphemeClusterBreak
U_GCB_COUNT	unicode/uchar.h	/^    U_GCB_COUNT = 12$/;"	e	enum:UGraphemeClusterBreak
U_GCB_CR	unicode/uchar.h	/^    U_GCB_CR = 2,               \/*[CR]*\/$/;"	e	enum:UGraphemeClusterBreak
U_GCB_EXTEND	unicode/uchar.h	/^    U_GCB_EXTEND = 3,           \/*[EX]*\/$/;"	e	enum:UGraphemeClusterBreak
U_GCB_L	unicode/uchar.h	/^    U_GCB_L = 4,                \/*[L]*\/$/;"	e	enum:UGraphemeClusterBreak
U_GCB_LF	unicode/uchar.h	/^    U_GCB_LF = 5,               \/*[LF]*\/$/;"	e	enum:UGraphemeClusterBreak
U_GCB_LV	unicode/uchar.h	/^    U_GCB_LV = 6,               \/*[LV]*\/$/;"	e	enum:UGraphemeClusterBreak
U_GCB_LVT	unicode/uchar.h	/^    U_GCB_LVT = 7,              \/*[LVT]*\/$/;"	e	enum:UGraphemeClusterBreak
U_GCB_OTHER	unicode/uchar.h	/^    U_GCB_OTHER = 0,            \/*[XX]*\/ \/*See note !!*\/$/;"	e	enum:UGraphemeClusterBreak
U_GCB_PREPEND	unicode/uchar.h	/^    U_GCB_PREPEND = 11,         \/*[PP]*\/$/;"	e	enum:UGraphemeClusterBreak
U_GCB_SPACING_MARK	unicode/uchar.h	/^    U_GCB_SPACING_MARK = 10,    \/*[SM]*\/ \/* from here on: new in Unicode 5.1\/ICU 4.0 *\/$/;"	e	enum:UGraphemeClusterBreak
U_GCB_T	unicode/uchar.h	/^    U_GCB_T = 8,                \/*[T]*\/$/;"	e	enum:UGraphemeClusterBreak
U_GCB_V	unicode/uchar.h	/^    U_GCB_V = 9,                \/*[V]*\/$/;"	e	enum:UGraphemeClusterBreak
U_GC_CC_MASK	unicode/uchar.h	705;"	d
U_GC_CF_MASK	unicode/uchar.h	707;"	d
U_GC_CN_MASK	unicode/uchar.h	670;"	d
U_GC_CO_MASK	unicode/uchar.h	709;"	d
U_GC_CS_MASK	unicode/uchar.h	711;"	d
U_GC_C_MASK	unicode/uchar.h	757;"	d
U_GC_LC_MASK	unicode/uchar.h	744;"	d
U_GC_LL_MASK	unicode/uchar.h	675;"	d
U_GC_LM_MASK	unicode/uchar.h	679;"	d
U_GC_LO_MASK	unicode/uchar.h	681;"	d
U_GC_LT_MASK	unicode/uchar.h	677;"	d
U_GC_LU_MASK	unicode/uchar.h	673;"	d
U_GC_L_MASK	unicode/uchar.h	740;"	d
U_GC_MC_MASK	unicode/uchar.h	688;"	d
U_GC_ME_MASK	unicode/uchar.h	686;"	d
U_GC_MN_MASK	unicode/uchar.h	684;"	d
U_GC_M_MASK	unicode/uchar.h	748;"	d
U_GC_ND_MASK	unicode/uchar.h	691;"	d
U_GC_NL_MASK	unicode/uchar.h	693;"	d
U_GC_NO_MASK	unicode/uchar.h	695;"	d
U_GC_N_MASK	unicode/uchar.h	751;"	d
U_GC_PC_MASK	unicode/uchar.h	720;"	d
U_GC_PD_MASK	unicode/uchar.h	714;"	d
U_GC_PE_MASK	unicode/uchar.h	718;"	d
U_GC_PF_MASK	unicode/uchar.h	736;"	d
U_GC_PI_MASK	unicode/uchar.h	734;"	d
U_GC_PO_MASK	unicode/uchar.h	722;"	d
U_GC_PS_MASK	unicode/uchar.h	716;"	d
U_GC_P_MASK	unicode/uchar.h	761;"	d
U_GC_SC_MASK	unicode/uchar.h	727;"	d
U_GC_SK_MASK	unicode/uchar.h	729;"	d
U_GC_SM_MASK	unicode/uchar.h	725;"	d
U_GC_SO_MASK	unicode/uchar.h	731;"	d
U_GC_S_MASK	unicode/uchar.h	766;"	d
U_GC_ZL_MASK	unicode/uchar.h	700;"	d
U_GC_ZP_MASK	unicode/uchar.h	702;"	d
U_GC_ZS_MASK	unicode/uchar.h	698;"	d
U_GC_Z_MASK	unicode/uchar.h	754;"	d
U_GENERAL_OTHER_TYPES	unicode/uchar.h	/^    U_GENERAL_OTHER_TYPES     = 0,$/;"	e	enum:UCharCategory
U_GET_GC_MASK	unicode/uchar.h	2423;"	d
U_GNUC_UTF16_STRING	unicode/platform.h	269;"	d
U_GROW	uhash.h	/^    U_GROW,            \/* Grow on demand, do not shrink *\/$/;"	e	enum:UHashResizePolicy
U_GROW_AND_SHRINK	uhash.h	/^    U_GROW_AND_SHRINK, \/* Grow and shrink on demand *\/$/;"	e	enum:UHashResizePolicy
U_HAVE_DEBUG_LOCATION_NEW	unicode/ppalmos.h	191;"	d
U_HAVE_DEBUG_LOCATION_NEW	unicode/pwin32.h	236;"	d
U_HAVE_DEBUG_LOCATION_NEW	unicode/uobject.h	63;"	d
U_HAVE_DIRENT_H	unicode/platform.h	58;"	d
U_HAVE_GCC_ATOMICS	unicode/platform.h	377;"	d
U_HAVE_GCC_ATOMICS	unicode/platform.h	386;"	d
U_HAVE_INT16_T	unicode/platform.h	110;"	d
U_HAVE_INT16_T	unicode/ppalmos.h	69;"	d
U_HAVE_INT16_T	unicode/pwin32.h	79;"	d
U_HAVE_INT32_T	unicode/platform.h	118;"	d
U_HAVE_INT32_T	unicode/ppalmos.h	77;"	d
U_HAVE_INT32_T	unicode/pwin32.h	87;"	d
U_HAVE_INT64_T	unicode/platform.h	126;"	d
U_HAVE_INT64_T	unicode/ppalmos.h	85;"	d
U_HAVE_INT64_T	unicode/pwin32.h	95;"	d
U_HAVE_INT8_T	unicode/platform.h	102;"	d
U_HAVE_INT8_T	unicode/ppalmos.h	61;"	d
U_HAVE_INT8_T	unicode/pwin32.h	71;"	d
U_HAVE_INTTYPES_H	unicode/platform.h	63;"	d
U_HAVE_INTTYPES_H	unicode/ppalmos.h	38;"	d
U_HAVE_INTTYPES_H	unicode/pwin32.h	44;"	d
U_HAVE_INTTYPES_H	unicode/pwin32.h	46;"	d
U_HAVE_LIB_SUFFIX	unicode/platform.h	425;"	d
U_HAVE_LIB_SUFFIX	unicode/ppalmos.h	205;"	d
U_HAVE_LIB_SUFFIX	unicode/pwin32.h	251;"	d
U_HAVE_MMAP	unicode/platform.h	321;"	d
U_HAVE_MMAP	unicode/ppalmos.h	234;"	d
U_HAVE_MMAP	unicode/pwin32.h	311;"	d
U_HAVE_MSVC_2003_OR_EARLIER	unicode/pwin32.h	356;"	d
U_HAVE_NAMESPACE	unicode/platform.h	141;"	d
U_HAVE_NAMESPACE	unicode/ppalmos.h	150;"	d
U_HAVE_NAMESPACE	unicode/pwin32.h	177;"	d
U_HAVE_NL_LANGINFO	unicode/platform.h	297;"	d
U_HAVE_NL_LANGINFO_CODESET	unicode/platform.h	300;"	d
U_HAVE_PLACEMENT_NEW	unicode/platform.h	183;"	d
U_HAVE_PLACEMENT_NEW	unicode/ppalmos.h	187;"	d
U_HAVE_PLACEMENT_NEW	unicode/pwin32.h	232;"	d
U_HAVE_PLACEMENT_NEW	unicode/pwin32.h	30;"	d
U_HAVE_PLACEMENT_NEW	unicode/uobject.h	51;"	d
U_HAVE_POPEN	unicode/platform.h	322;"	d
U_HAVE_POPEN	unicode/ppalmos.h	235;"	d
U_HAVE_POPEN	unicode/pwin32.h	312;"	d
U_HAVE_STD_STRING	unicode/platform.h	93;"	d
U_HAVE_STD_STRING	unicode/platform.h	96;"	d
U_HAVE_STD_STRING	unicode/std_string.h	34;"	d
U_HAVE_UINT16_T	unicode/platform.h	114;"	d
U_HAVE_UINT16_T	unicode/ppalmos.h	73;"	d
U_HAVE_UINT16_T	unicode/pwin32.h	83;"	d
U_HAVE_UINT32_T	unicode/platform.h	122;"	d
U_HAVE_UINT32_T	unicode/ppalmos.h	81;"	d
U_HAVE_UINT32_T	unicode/pwin32.h	91;"	d
U_HAVE_UINT64_T	unicode/platform.h	130;"	d
U_HAVE_UINT64_T	unicode/ppalmos.h	89;"	d
U_HAVE_UINT64_T	unicode/pwin32.h	99;"	d
U_HAVE_UINT8_T	unicode/platform.h	106;"	d
U_HAVE_UINT8_T	unicode/ppalmos.h	65;"	d
U_HAVE_UINT8_T	unicode/pwin32.h	75;"	d
U_HAVE_WCHAR_H	unicode/platform.h	235;"	d
U_HAVE_WCHAR_H	unicode/platform.h	243;"	d
U_HAVE_WCHAR_H	unicode/ppalmos.h	213;"	d
U_HAVE_WCHAR_H	unicode/pwin32.h	265;"	d
U_HAVE_WCHAR_H	unicode/umachine.h	244;"	d
U_HAVE_WCSCPY	unicode/platform.h	238;"	d
U_HAVE_WCSCPY	unicode/platform.h	251;"	d
U_HAVE_WCSCPY	unicode/ppalmos.h	216;"	d
U_HAVE_WCSCPY	unicode/pwin32.h	268;"	d
U_HIDE_DRAFT_API	unicode/utypes.h	72;"	d
U_HIDE_INTERNAL_API	unicode/utypes.h	75;"	d
U_HST_COUNT	unicode/uchar.h	/^    U_HST_COUNT$/;"	e	enum:UHangulSyllableType
U_HST_LEADING_JAMO	unicode/uchar.h	/^    U_HST_LEADING_JAMO,     \/*[L]*\/$/;"	e	enum:UHangulSyllableType
U_HST_LVT_SYLLABLE	unicode/uchar.h	/^    U_HST_LVT_SYLLABLE,     \/*[LVT]*\/$/;"	e	enum:UHangulSyllableType
U_HST_LV_SYLLABLE	unicode/uchar.h	/^    U_HST_LV_SYLLABLE,      \/*[LV]*\/$/;"	e	enum:UHangulSyllableType
U_HST_NOT_APPLICABLE	unicode/uchar.h	/^    U_HST_NOT_APPLICABLE,   \/*[NA]*\/ \/*See note !!*\/$/;"	e	enum:UHangulSyllableType
U_HST_TRAILING_JAMO	unicode/uchar.h	/^    U_HST_TRAILING_JAMO,    \/*[T]*\/$/;"	e	enum:UHangulSyllableType
U_HST_VOWEL_JAMO	unicode/uchar.h	/^    U_HST_VOWEL_JAMO,       \/*[V]*\/$/;"	e	enum:UHangulSyllableType
U_I18N_API	unicode/utypes.h	437;"	d
U_I18N_API	unicode/utypes.h	445;"	d
U_I18N_API	unicode/utypes.h	453;"	d
U_I18N_API	unicode/utypes.h	461;"	d
U_I18N_API	unicode/utypes.h	469;"	d
U_I18N_API	unicode/utypes.h	477;"	d
U_I18N_API	unicode/utypes.h	485;"	d
U_I18N_API	unicode/utypes.h	493;"	d
U_I18N_API	unicode/utypes.h	501;"	d
U_ICUDATA_ALIAS	unicode/udata.h	69;"	d
U_ICUDATA_BRKITR	ubrkimpl.h	11;"	d
U_ICUDATA_CURR	ureslocs.h	19;"	d
U_ICUDATA_ENTRY_NAME	umapfile.c	61;"	d	file:
U_ICUDATA_ENTRY_POINT	udata.cpp	/^extern "C" const DataHeader U_DATA_API U_ICUDATA_ENTRY_POINT;$/;"	v
U_ICUDATA_ENTRY_POINT	unicode/utypes.h	250;"	d
U_ICUDATA_LANG	ureslocs.h	17;"	d
U_ICUDATA_NAME	unicode/utypes.h	235;"	d
U_ICUDATA_REGION	ureslocs.h	18;"	d
U_ICUDATA_TYPE_LETTER	unicode/utypes.h	211;"	d
U_ICUDATA_TYPE_LETTER	unicode/utypes.h	215;"	d
U_ICUDATA_TYPE_LETTER	unicode/utypes.h	221;"	d
U_ICUDATA_TYPE_LETTER	unicode/utypes.h	225;"	d
U_ICUDATA_TYPE_LITLETTER	unicode/utypes.h	212;"	d
U_ICUDATA_TYPE_LITLETTER	unicode/utypes.h	216;"	d
U_ICUDATA_TYPE_LITLETTER	unicode/utypes.h	222;"	d
U_ICUDATA_TYPE_LITLETTER	unicode/utypes.h	226;"	d
U_ICUDATA_ZONE	ureslocs.h	20;"	d
U_ICU_DATA_KEY	unicode/icudataver.h	28;"	d
U_ICU_DATA_VERSION	unicode/uvernum.h	105;"	d
U_ICU_ENTRY_POINT_RENAME	unicode/platform.h	430;"	d
U_ICU_ENTRY_POINT_RENAME	unicode/uvernum.h	86;"	d
U_ICU_NAMESPACE	unicode/uversion.h	/^        namespace U_ICU_NAMESPACE { }$/;"	n
U_ICU_NAMESPACE	unicode/uversion.h	105;"	d
U_ICU_STD_BUNDLE	unicode/icudataver.h	23;"	d
U_ICU_VERSION	unicode/uvernum.h	94;"	d
U_ICU_VERSION_BUILDLEVEL_NUM	unicode/uvernum.h	70;"	d
U_ICU_VERSION_BUNDLE	unicode/icudataver.h	18;"	d
U_ICU_VERSION_MAJOR_NUM	unicode/uvernum.h	51;"	d
U_ICU_VERSION_MINOR_NUM	unicode/uvernum.h	57;"	d
U_ICU_VERSION_PATCHLEVEL_NUM	unicode/uvernum.h	63;"	d
U_ICU_VERSION_SHORT	unicode/uvernum.h	100;"	d
U_ICU_VERSION_SUFFIX	unicode/uvernum.h	77;"	d
U_IDNA_ACE_PREFIX_ERROR	unicode/utypes.h	/^    U_IDNA_ACE_PREFIX_ERROR,$/;"	e	enum:UErrorCode
U_IDNA_CHECK_BIDI_ERROR	unicode/utypes.h	/^    U_IDNA_CHECK_BIDI_ERROR,$/;"	e	enum:UErrorCode
U_IDNA_DOMAIN_NAME_TOO_LONG_ERROR	unicode/utypes.h	/^    U_IDNA_DOMAIN_NAME_TOO_LONG_ERROR,$/;"	e	enum:UErrorCode
U_IDNA_ERROR_LIMIT	unicode/utypes.h	/^    U_IDNA_ERROR_LIMIT,$/;"	e	enum:UErrorCode
U_IDNA_ERROR_START	unicode/utypes.h	/^    U_IDNA_ERROR_START=0x10400,$/;"	e	enum:UErrorCode
U_IDNA_LABEL_TOO_LONG_ERROR	unicode/utypes.h	/^    U_IDNA_LABEL_TOO_LONG_ERROR,$/;"	e	enum:UErrorCode
U_IDNA_PROHIBITED_ERROR	unicode/utypes.h	/^    U_IDNA_PROHIBITED_ERROR=0x10400,$/;"	e	enum:UErrorCode
U_IDNA_STD3_ASCII_RULES_ERROR	unicode/utypes.h	/^    U_IDNA_STD3_ASCII_RULES_ERROR,$/;"	e	enum:UErrorCode
U_IDNA_UNASSIGNED_ERROR	unicode/utypes.h	/^    U_IDNA_UNASSIGNED_ERROR,$/;"	e	enum:UErrorCode
U_IDNA_VERIFICATION_ERROR	unicode/utypes.h	/^    U_IDNA_VERIFICATION_ERROR,$/;"	e	enum:UErrorCode
U_IDNA_ZERO_LENGTH_LABEL_ERROR	unicode/utypes.h	/^    U_IDNA_ZERO_LENGTH_LABEL_ERROR,$/;"	e	enum:UErrorCode
U_ILLEGAL_ARGUMENT_ERROR	unicode/utypes.h	/^    U_ILLEGAL_ARGUMENT_ERROR  =  1,     \/**< Start of codes indicating failure *\/$/;"	e	enum:UErrorCode
U_ILLEGAL_CHARACTER	unicode/utypes.h	/^    U_ILLEGAL_CHARACTER,              \/**< A special character is outside its allowed context *\/$/;"	e	enum:UErrorCode
U_ILLEGAL_CHAR_FOUND	unicode/utypes.h	/^    U_ILLEGAL_CHAR_FOUND      = 12,     \/**< Character conversion: Illegal input sequence\/combination of input units. *\/$/;"	e	enum:UErrorCode
U_ILLEGAL_CHAR_IN_SEGMENT	unicode/utypes.h	/^    U_ILLEGAL_CHAR_IN_SEGMENT,        \/**< UNUSED as of ICU 2.4 *\/$/;"	e	enum:UErrorCode
U_ILLEGAL_ESCAPE_SEQUENCE	unicode/utypes.h	/^    U_ILLEGAL_ESCAPE_SEQUENCE = 18,     \/**< ISO-2022 illlegal escape sequence *\/$/;"	e	enum:UErrorCode
U_ILLEGAL_PAD_POSITION	unicode/utypes.h	/^    U_ILLEGAL_PAD_POSITION,           \/**< Pad symbol misplaced in number pattern *\/$/;"	e	enum:UErrorCode
U_IMPORT	unicode/platform.h	346;"	d
U_IMPORT	unicode/platform.h	348;"	d
U_IMPORT	unicode/ppalmos.h	243;"	d
U_IMPORT	unicode/pwin32.h	331;"	d
U_INDEX_OUTOFBOUNDS_ERROR	unicode/utypes.h	/^    U_INDEX_OUTOFBOUNDS_ERROR =  8,     \/**< Trying to access the index that is out of bounds *\/$/;"	e	enum:UErrorCode
U_INITIAL_PUNCTUATION	unicode/uchar.h	/^    U_INITIAL_PUNCTUATION     = 28,$/;"	e	enum:UCharCategory
U_INLINE	unicode/platform.h	359;"	d
U_INLINE	unicode/platform.h	361;"	d
U_INLINE	unicode/ppalmos.h	251;"	d
U_INLINE	unicode/ppalmos.h	253;"	d
U_INLINE	unicode/pwin32.h	340;"	d
U_INLINE	unicode/pwin32.h	342;"	d
U_INLINE	unicode/umachine.h	366;"	d
U_INLINE	unicode/umachine.h	368;"	d
U_INT64_IS_LONG_LONG	unicode/ppalmos.h	31;"	d
U_INT64_IS_LONG_LONG	unicode/ppalmos.h	33;"	d
U_INT64_IS_LONG_LONG	unicode/pwin32.h	36;"	d
U_INT64_IS_LONG_LONG	unicode/pwin32.h	38;"	d
U_INT64_MAX	unicode/umachine.h	206;"	d
U_INT64_MIN	unicode/umachine.h	202;"	d
U_INTERNAL	unicode/umachine.h	136;"	d
U_INTERNAL_PROGRAM_ERROR	unicode/utypes.h	/^    U_INTERNAL_PROGRAM_ERROR  =  5,     \/**< Indicates a bug in the library code *\/$/;"	e	enum:UErrorCode
U_INTERNAL_TRANSLITERATOR_ERROR	unicode/utypes.h	/^    U_INTERNAL_TRANSLITERATOR_ERROR,  \/**< Internal transliterator system error *\/$/;"	e	enum:UErrorCode
U_INVALID_CHAR_FOUND	unicode/utypes.h	/^    U_INVALID_CHAR_FOUND      = 10,     \/**< Character conversion: Unmappable input sequence. In other APIs: Invalid character. *\/$/;"	e	enum:UErrorCode
U_INVALID_FORMAT_ERROR	unicode/utypes.h	/^    U_INVALID_FORMAT_ERROR    =  3,     \/**< Data format is not what is expected *\/$/;"	e	enum:UErrorCode
U_INVALID_FUNCTION	unicode/utypes.h	/^    U_INVALID_FUNCTION,               \/**< A "&fn()" rule specifies an unknown transliterator *\/$/;"	e	enum:UErrorCode
U_INVALID_ID	unicode/utypes.h	/^    U_INVALID_ID,                     \/**< A "::id" rule specifies an unknown transliterator *\/$/;"	e	enum:UErrorCode
U_INVALID_PROPERTY_PATTERN	unicode/utypes.h	/^    U_INVALID_PROPERTY_PATTERN,       \/**< UNUSED as of ICU 2.4 *\/$/;"	e	enum:UErrorCode
U_INVALID_RBT_SYNTAX	unicode/utypes.h	/^    U_INVALID_RBT_SYNTAX,             \/**< A "::id" rule was passed to the RuleBasedTransliterator parser *\/$/;"	e	enum:UErrorCode
U_INVALID_STATE_ERROR	unicode/utypes.h	/^    U_INVALID_STATE_ERROR     = 27,     \/**< Requested operation can not be completed with ICU in its current state *\/$/;"	e	enum:UErrorCode
U_INVALID_TABLE_FILE	unicode/utypes.h	/^    U_INVALID_TABLE_FILE      = 14,     \/**< Conversion table file not found *\/$/;"	e	enum:UErrorCode
U_INVALID_TABLE_FORMAT	unicode/utypes.h	/^    U_INVALID_TABLE_FORMAT    = 13,     \/**< Conversion table file found, but corrupted *\/$/;"	e	enum:UErrorCode
U_INVARIANT_CONVERSION_ERROR	unicode/utypes.h	/^    U_INVARIANT_CONVERSION_ERROR = 26,  \/**< Unable to convert a UChar* string to char* with the invariant converter. *\/$/;"	e	enum:UErrorCode
U_IOSTREAM_SOURCE	unicode/platform.h	81;"	d
U_IOSTREAM_SOURCE	unicode/ppalmos.h	56;"	d
U_IOSTREAM_SOURCE	unicode/pwin32.h	65;"	d
U_IO_API	unicode/utypes.h	440;"	d
U_IO_API	unicode/utypes.h	448;"	d
U_IO_API	unicode/utypes.h	456;"	d
U_IO_API	unicode/utypes.h	464;"	d
U_IO_API	unicode/utypes.h	472;"	d
U_IO_API	unicode/utypes.h	480;"	d
U_IO_API	unicode/utypes.h	488;"	d
U_IO_API	unicode/utypes.h	496;"	d
U_IO_API	unicode/utypes.h	504;"	d
U_ISO_COMMENT	unames.c	244;"	d	file:
U_IS_BIG_ENDIAN	unicode/platform.h	148;"	d
U_IS_BIG_ENDIAN	unicode/platform.h	150;"	d
U_IS_BIG_ENDIAN	unicode/ppalmos.h	154;"	d
U_IS_BIG_ENDIAN	unicode/pwin32.h	181;"	d
U_IS_BMP	unicode/utf.h	176;"	d
U_IS_LEAD	unicode/utf.h	192;"	d
U_IS_SUPPLEMENTARY	unicode/utf.h	184;"	d
U_IS_SURROGATE	unicode/utf.h	208;"	d
U_IS_SURROGATE_LEAD	unicode/utf.h	217;"	d
U_IS_SURROGATE_TRAIL	unicode/utf.h	226;"	d
U_IS_TRAIL	unicode/utf.h	200;"	d
U_IS_UNICODE_CHAR	unicode/utf.h	164;"	d
U_IS_UNICODE_NONCHAR	unicode/utf.h	142;"	d
U_JG_AIN	unicode/uchar.h	/^    U_JG_AIN,$/;"	e	enum:UJoiningGroup
U_JG_ALAPH	unicode/uchar.h	/^    U_JG_ALAPH,$/;"	e	enum:UJoiningGroup
U_JG_ALEF	unicode/uchar.h	/^    U_JG_ALEF,$/;"	e	enum:UJoiningGroup
U_JG_BEH	unicode/uchar.h	/^    U_JG_BEH,$/;"	e	enum:UJoiningGroup
U_JG_BETH	unicode/uchar.h	/^    U_JG_BETH,$/;"	e	enum:UJoiningGroup
U_JG_BURUSHASKI_YEH_BARREE	unicode/uchar.h	/^    U_JG_BURUSHASKI_YEH_BARREE, \/**< @stable ICU 4.0 *\/$/;"	e	enum:UJoiningGroup
U_JG_COUNT	unicode/uchar.h	/^    U_JG_COUNT$/;"	e	enum:UJoiningGroup
U_JG_DAL	unicode/uchar.h	/^    U_JG_DAL,$/;"	e	enum:UJoiningGroup
U_JG_DALATH_RISH	unicode/uchar.h	/^    U_JG_DALATH_RISH,$/;"	e	enum:UJoiningGroup
U_JG_E	unicode/uchar.h	/^    U_JG_E,$/;"	e	enum:UJoiningGroup
U_JG_FARSI_YEH	unicode/uchar.h	/^    U_JG_FARSI_YEH, \/**< @stable ICU 4.4 *\/$/;"	e	enum:UJoiningGroup
U_JG_FE	unicode/uchar.h	/^    U_JG_FE,        \/**< @stable ICU 2.6 *\/$/;"	e	enum:UJoiningGroup
U_JG_FEH	unicode/uchar.h	/^    U_JG_FEH,$/;"	e	enum:UJoiningGroup
U_JG_FINAL_SEMKATH	unicode/uchar.h	/^    U_JG_FINAL_SEMKATH,$/;"	e	enum:UJoiningGroup
U_JG_GAF	unicode/uchar.h	/^    U_JG_GAF,$/;"	e	enum:UJoiningGroup
U_JG_GAMAL	unicode/uchar.h	/^    U_JG_GAMAL,$/;"	e	enum:UJoiningGroup
U_JG_HAH	unicode/uchar.h	/^    U_JG_HAH,$/;"	e	enum:UJoiningGroup
U_JG_HAMZA_ON_HEH_GOAL	unicode/uchar.h	/^    U_JG_HAMZA_ON_HEH_GOAL=U_JG_TEH_MARBUTA_GOAL,$/;"	e	enum:UJoiningGroup
U_JG_HE	unicode/uchar.h	/^    U_JG_HE,$/;"	e	enum:UJoiningGroup
U_JG_HEH	unicode/uchar.h	/^    U_JG_HEH,$/;"	e	enum:UJoiningGroup
U_JG_HEH_GOAL	unicode/uchar.h	/^    U_JG_HEH_GOAL,$/;"	e	enum:UJoiningGroup
U_JG_HETH	unicode/uchar.h	/^    U_JG_HETH,$/;"	e	enum:UJoiningGroup
U_JG_KAF	unicode/uchar.h	/^    U_JG_KAF,$/;"	e	enum:UJoiningGroup
U_JG_KAPH	unicode/uchar.h	/^    U_JG_KAPH,$/;"	e	enum:UJoiningGroup
U_JG_KHAPH	unicode/uchar.h	/^    U_JG_KHAPH,     \/**< @stable ICU 2.6 *\/$/;"	e	enum:UJoiningGroup
U_JG_KNOTTED_HEH	unicode/uchar.h	/^    U_JG_KNOTTED_HEH,$/;"	e	enum:UJoiningGroup
U_JG_LAM	unicode/uchar.h	/^    U_JG_LAM,$/;"	e	enum:UJoiningGroup
U_JG_LAMADH	unicode/uchar.h	/^    U_JG_LAMADH,$/;"	e	enum:UJoiningGroup
U_JG_MEEM	unicode/uchar.h	/^    U_JG_MEEM,$/;"	e	enum:UJoiningGroup
U_JG_MIM	unicode/uchar.h	/^    U_JG_MIM,$/;"	e	enum:UJoiningGroup
U_JG_NOON	unicode/uchar.h	/^    U_JG_NOON,$/;"	e	enum:UJoiningGroup
U_JG_NO_JOINING_GROUP	unicode/uchar.h	/^    U_JG_NO_JOINING_GROUP,$/;"	e	enum:UJoiningGroup
U_JG_NUN	unicode/uchar.h	/^    U_JG_NUN,$/;"	e	enum:UJoiningGroup
U_JG_NYA	unicode/uchar.h	/^    U_JG_NYA,       \/**< @stable ICU 4.4 *\/$/;"	e	enum:UJoiningGroup
U_JG_PE	unicode/uchar.h	/^    U_JG_PE,$/;"	e	enum:UJoiningGroup
U_JG_QAF	unicode/uchar.h	/^    U_JG_QAF,$/;"	e	enum:UJoiningGroup
U_JG_QAPH	unicode/uchar.h	/^    U_JG_QAPH,$/;"	e	enum:UJoiningGroup
U_JG_REH	unicode/uchar.h	/^    U_JG_REH,$/;"	e	enum:UJoiningGroup
U_JG_REVERSED_PE	unicode/uchar.h	/^    U_JG_REVERSED_PE,$/;"	e	enum:UJoiningGroup
U_JG_SAD	unicode/uchar.h	/^    U_JG_SAD,$/;"	e	enum:UJoiningGroup
U_JG_SADHE	unicode/uchar.h	/^    U_JG_SADHE,$/;"	e	enum:UJoiningGroup
U_JG_SEEN	unicode/uchar.h	/^    U_JG_SEEN,$/;"	e	enum:UJoiningGroup
U_JG_SEMKATH	unicode/uchar.h	/^    U_JG_SEMKATH,$/;"	e	enum:UJoiningGroup
U_JG_SHIN	unicode/uchar.h	/^    U_JG_SHIN,$/;"	e	enum:UJoiningGroup
U_JG_SWASH_KAF	unicode/uchar.h	/^    U_JG_SWASH_KAF,$/;"	e	enum:UJoiningGroup
U_JG_SYRIAC_WAW	unicode/uchar.h	/^    U_JG_SYRIAC_WAW,$/;"	e	enum:UJoiningGroup
U_JG_TAH	unicode/uchar.h	/^    U_JG_TAH,$/;"	e	enum:UJoiningGroup
U_JG_TAW	unicode/uchar.h	/^    U_JG_TAW,$/;"	e	enum:UJoiningGroup
U_JG_TEH_MARBUTA	unicode/uchar.h	/^    U_JG_TEH_MARBUTA,$/;"	e	enum:UJoiningGroup
U_JG_TEH_MARBUTA_GOAL	unicode/uchar.h	/^    U_JG_TEH_MARBUTA_GOAL,  \/**< @stable ICU 4.6 *\/$/;"	e	enum:UJoiningGroup
U_JG_TETH	unicode/uchar.h	/^    U_JG_TETH,$/;"	e	enum:UJoiningGroup
U_JG_WAW	unicode/uchar.h	/^    U_JG_WAW,$/;"	e	enum:UJoiningGroup
U_JG_YEH	unicode/uchar.h	/^    U_JG_YEH,$/;"	e	enum:UJoiningGroup
U_JG_YEH_BARREE	unicode/uchar.h	/^    U_JG_YEH_BARREE,$/;"	e	enum:UJoiningGroup
U_JG_YEH_WITH_TAIL	unicode/uchar.h	/^    U_JG_YEH_WITH_TAIL,$/;"	e	enum:UJoiningGroup
U_JG_YUDH	unicode/uchar.h	/^    U_JG_YUDH,$/;"	e	enum:UJoiningGroup
U_JG_YUDH_HE	unicode/uchar.h	/^    U_JG_YUDH_HE,$/;"	e	enum:UJoiningGroup
U_JG_ZAIN	unicode/uchar.h	/^    U_JG_ZAIN,$/;"	e	enum:UJoiningGroup
U_JG_ZHAIN	unicode/uchar.h	/^    U_JG_ZHAIN,     \/**< @stable ICU 2.6 *\/$/;"	e	enum:UJoiningGroup
U_JT_COUNT	unicode/uchar.h	/^    U_JT_COUNT \/* 6 *\/$/;"	e	enum:UJoiningType
U_JT_DUAL_JOINING	unicode/uchar.h	/^    U_JT_DUAL_JOINING,      \/*[D]*\/$/;"	e	enum:UJoiningType
U_JT_JOIN_CAUSING	unicode/uchar.h	/^    U_JT_JOIN_CAUSING,      \/*[C]*\/$/;"	e	enum:UJoiningType
U_JT_LEFT_JOINING	unicode/uchar.h	/^    U_JT_LEFT_JOINING,      \/*[L]*\/$/;"	e	enum:UJoiningType
U_JT_NON_JOINING	unicode/uchar.h	/^    U_JT_NON_JOINING,       \/*[U]*\/ \/*See note !!*\/$/;"	e	enum:UJoiningType
U_JT_RIGHT_JOINING	unicode/uchar.h	/^    U_JT_RIGHT_JOINING,     \/*[R]*\/$/;"	e	enum:UJoiningType
U_JT_TRANSPARENT	unicode/uchar.h	/^    U_JT_TRANSPARENT,       \/*[T]*\/$/;"	e	enum:UJoiningType
U_LAYOUTEX_API	unicode/utypes.h	439;"	d
U_LAYOUTEX_API	unicode/utypes.h	447;"	d
U_LAYOUTEX_API	unicode/utypes.h	455;"	d
U_LAYOUTEX_API	unicode/utypes.h	463;"	d
U_LAYOUTEX_API	unicode/utypes.h	471;"	d
U_LAYOUTEX_API	unicode/utypes.h	479;"	d
U_LAYOUTEX_API	unicode/utypes.h	487;"	d
U_LAYOUTEX_API	unicode/utypes.h	495;"	d
U_LAYOUTEX_API	unicode/utypes.h	503;"	d
U_LAYOUT_API	unicode/utypes.h	438;"	d
U_LAYOUT_API	unicode/utypes.h	446;"	d
U_LAYOUT_API	unicode/utypes.h	454;"	d
U_LAYOUT_API	unicode/utypes.h	462;"	d
U_LAYOUT_API	unicode/utypes.h	470;"	d
U_LAYOUT_API	unicode/utypes.h	478;"	d
U_LAYOUT_API	unicode/utypes.h	486;"	d
U_LAYOUT_API	unicode/utypes.h	494;"	d
U_LAYOUT_API	unicode/utypes.h	502;"	d
U_LB_ALPHABETIC	unicode/uchar.h	/^    U_LB_ALPHABETIC = 2,        \/*[AL]*\/$/;"	e	enum:ULineBreak
U_LB_AMBIGUOUS	unicode/uchar.h	/^    U_LB_AMBIGUOUS = 1,         \/*[AI]*\/$/;"	e	enum:ULineBreak
U_LB_BREAK_AFTER	unicode/uchar.h	/^    U_LB_BREAK_AFTER = 4,       \/*[BA]*\/$/;"	e	enum:ULineBreak
U_LB_BREAK_BEFORE	unicode/uchar.h	/^    U_LB_BREAK_BEFORE = 5,      \/*[BB]*\/$/;"	e	enum:ULineBreak
U_LB_BREAK_BOTH	unicode/uchar.h	/^    U_LB_BREAK_BOTH = 3,        \/*[B2]*\/$/;"	e	enum:ULineBreak
U_LB_BREAK_SYMBOLS	unicode/uchar.h	/^    U_LB_BREAK_SYMBOLS = 27,     \/*[SY]*\/$/;"	e	enum:ULineBreak
U_LB_CARRIAGE_RETURN	unicode/uchar.h	/^    U_LB_CARRIAGE_RETURN = 10,   \/*[CR]*\/$/;"	e	enum:ULineBreak
U_LB_CLOSE_PARENTHESIS	unicode/uchar.h	/^    U_LB_CLOSE_PARENTHESIS = 36, \/*[CP]*\/ \/* new in Unicode 5.2\/ICU 4.4 *\/$/;"	e	enum:ULineBreak
U_LB_CLOSE_PUNCTUATION	unicode/uchar.h	/^    U_LB_CLOSE_PUNCTUATION = 8, \/*[CL]*\/$/;"	e	enum:ULineBreak
U_LB_COMBINING_MARK	unicode/uchar.h	/^    U_LB_COMBINING_MARK = 9,    \/*[CM]*\/$/;"	e	enum:ULineBreak
U_LB_COMPLEX_CONTEXT	unicode/uchar.h	/^    U_LB_COMPLEX_CONTEXT = 24,   \/*[SA]*\/$/;"	e	enum:ULineBreak
U_LB_CONTINGENT_BREAK	unicode/uchar.h	/^    U_LB_CONTINGENT_BREAK = 7,  \/*[CB]*\/$/;"	e	enum:ULineBreak
U_LB_COUNT	unicode/uchar.h	/^    U_LB_COUNT = 37$/;"	e	enum:ULineBreak
U_LB_EXCLAMATION	unicode/uchar.h	/^    U_LB_EXCLAMATION = 11,       \/*[EX]*\/$/;"	e	enum:ULineBreak
U_LB_GLUE	unicode/uchar.h	/^    U_LB_GLUE = 12,              \/*[GL]*\/$/;"	e	enum:ULineBreak
U_LB_H2	unicode/uchar.h	/^    U_LB_H2 = 31,                \/*[H2]*\/ \/* from here on: new in Unicode 4.1\/ICU 3.4 *\/$/;"	e	enum:ULineBreak
U_LB_H3	unicode/uchar.h	/^    U_LB_H3 = 32,                \/*[H3]*\/$/;"	e	enum:ULineBreak
U_LB_HYPHEN	unicode/uchar.h	/^    U_LB_HYPHEN = 13,            \/*[HY]*\/$/;"	e	enum:ULineBreak
U_LB_IDEOGRAPHIC	unicode/uchar.h	/^    U_LB_IDEOGRAPHIC = 14,       \/*[ID]*\/$/;"	e	enum:ULineBreak
U_LB_INFIX_NUMERIC	unicode/uchar.h	/^    U_LB_INFIX_NUMERIC = 16,     \/*[IS]*\/$/;"	e	enum:ULineBreak
U_LB_INSEPARABLE	unicode/uchar.h	/^    U_LB_INSEPARABLE=U_LB_INSEPERABLE,\/*[IN]*\/$/;"	e	enum:ULineBreak
U_LB_INSEPERABLE	unicode/uchar.h	/^    U_LB_INSEPERABLE = 15,$/;"	e	enum:ULineBreak
U_LB_JL	unicode/uchar.h	/^    U_LB_JL = 33,                \/*[JL]*\/$/;"	e	enum:ULineBreak
U_LB_JT	unicode/uchar.h	/^    U_LB_JT = 34,                \/*[JT]*\/$/;"	e	enum:ULineBreak
U_LB_JV	unicode/uchar.h	/^    U_LB_JV = 35,                \/*[JV]*\/$/;"	e	enum:ULineBreak
U_LB_LINE_FEED	unicode/uchar.h	/^    U_LB_LINE_FEED = 17,         \/*[LF]*\/$/;"	e	enum:ULineBreak
U_LB_MANDATORY_BREAK	unicode/uchar.h	/^    U_LB_MANDATORY_BREAK = 6,   \/*[BK]*\/$/;"	e	enum:ULineBreak
U_LB_NEXT_LINE	unicode/uchar.h	/^    U_LB_NEXT_LINE = 29,         \/*[NL]*\/ \/* from here on: new in Unicode 4\/ICU 2.6 *\/$/;"	e	enum:ULineBreak
U_LB_NONSTARTER	unicode/uchar.h	/^    U_LB_NONSTARTER = 18,        \/*[NS]*\/$/;"	e	enum:ULineBreak
U_LB_NUMERIC	unicode/uchar.h	/^    U_LB_NUMERIC = 19,           \/*[NU]*\/$/;"	e	enum:ULineBreak
U_LB_OPEN_PUNCTUATION	unicode/uchar.h	/^    U_LB_OPEN_PUNCTUATION = 20,  \/*[OP]*\/$/;"	e	enum:ULineBreak
U_LB_POSTFIX_NUMERIC	unicode/uchar.h	/^    U_LB_POSTFIX_NUMERIC = 21,   \/*[PO]*\/$/;"	e	enum:ULineBreak
U_LB_PREFIX_NUMERIC	unicode/uchar.h	/^    U_LB_PREFIX_NUMERIC = 22,    \/*[PR]*\/$/;"	e	enum:ULineBreak
U_LB_QUOTATION	unicode/uchar.h	/^    U_LB_QUOTATION = 23,         \/*[QU]*\/$/;"	e	enum:ULineBreak
U_LB_SPACE	unicode/uchar.h	/^    U_LB_SPACE = 26,             \/*[SP]*\/$/;"	e	enum:ULineBreak
U_LB_SURROGATE	unicode/uchar.h	/^    U_LB_SURROGATE = 25,         \/*[SG]*\/$/;"	e	enum:ULineBreak
U_LB_UNKNOWN	unicode/uchar.h	/^    U_LB_UNKNOWN = 0,           \/*[XX]*\/ \/*See note !!*\/$/;"	e	enum:ULineBreak
U_LB_WORD_JOINER	unicode/uchar.h	/^    U_LB_WORD_JOINER = 30,       \/*[WJ]*\/$/;"	e	enum:ULineBreak
U_LB_ZWSPACE	unicode/uchar.h	/^    U_LB_ZWSPACE = 28,           \/*[ZW]*\/$/;"	e	enum:ULineBreak
U_LEAD_SURROGATE	unames.c	117;"	d	file:
U_LEFT_TO_RIGHT	unicode/uchar.h	/^    U_LEFT_TO_RIGHT               = 0,$/;"	e	enum:UCharDirection
U_LEFT_TO_RIGHT_EMBEDDING	unicode/uchar.h	/^    U_LEFT_TO_RIGHT_EMBEDDING     = 11,$/;"	e	enum:UCharDirection
U_LEFT_TO_RIGHT_OVERRIDE	unicode/uchar.h	/^    U_LEFT_TO_RIGHT_OVERRIDE      = 12,$/;"	e	enum:UCharDirection
U_LETTER_NUMBER	unicode/uchar.h	/^    U_LETTER_NUMBER           = 10,$/;"	e	enum:UCharCategory
U_LF	ucnvmbcs.c	1107;"	d	file:
U_LIB_SUFFIX_C_NAME	unicode/platform.h	415;"	d
U_LIB_SUFFIX_C_NAME	unicode/ppalmos.h	206;"	d
U_LIB_SUFFIX_C_NAME	unicode/pwin32.h	254;"	d
U_LIB_SUFFIX_C_NAME_STRING	unicode/platform.h	420;"	d
U_LIB_SUFFIX_C_NAME_STRING	unicode/ppalmos.h	207;"	d
U_LIB_SUFFIX_C_NAME_STRING	unicode/pwin32.h	257;"	d
U_LINE_SEPARATOR	unicode/uchar.h	/^    U_LINE_SEPARATOR          = 13,$/;"	e	enum:UCharCategory
U_LINUX	unicode/platform.h	49;"	d
U_LOCALE_BASED	locbased.h	22;"	d
U_LONG_PROPERTY_NAME	unicode/uchar.h	/^    U_LONG_PROPERTY_NAME,$/;"	e	enum:UPropertyNameChoice
U_LOWERCASE_LETTER	unicode/uchar.h	/^    U_LOWERCASE_LETTER        = 2,$/;"	e	enum:UCharCategory
U_MAKE	unicode/platform.h	400;"	d
U_MAKE	unicode/ppalmos.h	269;"	d
U_MAKE	unicode/pwin32.h	367;"	d
U_MAKE_IS_NMAKE	unicode/ppalmos.h	270;"	d
U_MAKE_IS_NMAKE	unicode/pwin32.h	368;"	d
U_MALFORMED_EXPONENTIAL_PATTERN	unicode/utypes.h	/^    U_MALFORMED_EXPONENTIAL_PATTERN,  \/**< Grouping symbol in exponent pattern *\/$/;"	e	enum:UErrorCode
U_MALFORMED_PRAGMA	unicode/utypes.h	/^    U_MALFORMED_PRAGMA,               \/**< A 'use' pragma is invlalid *\/$/;"	e	enum:UErrorCode
U_MALFORMED_RULE	unicode/utypes.h	/^    U_MALFORMED_RULE,                 \/**< Elements of a rule are misplaced *\/$/;"	e	enum:UErrorCode
U_MALFORMED_SET	unicode/utypes.h	/^    U_MALFORMED_SET,                  \/**< A UnicodeSet pattern is invalid*\/$/;"	e	enum:UErrorCode
U_MALFORMED_SYMBOL_REFERENCE	unicode/utypes.h	/^    U_MALFORMED_SYMBOL_REFERENCE,     \/**< UNUSED as of ICU 2.4 *\/$/;"	e	enum:UErrorCode
U_MALFORMED_UNICODE_ESCAPE	unicode/utypes.h	/^    U_MALFORMED_UNICODE_ESCAPE,       \/**< A Unicode escape pattern is invalid*\/$/;"	e	enum:UErrorCode
U_MALFORMED_VARIABLE_DEFINITION	unicode/utypes.h	/^    U_MALFORMED_VARIABLE_DEFINITION,  \/**< A variable definition is invalid *\/$/;"	e	enum:UErrorCode
U_MALFORMED_VARIABLE_REFERENCE	unicode/utypes.h	/^    U_MALFORMED_VARIABLE_REFERENCE,   \/**< A variable reference is invalid *\/$/;"	e	enum:UErrorCode
U_MASK	unicode/uchar.h	140;"	d
U_MATCH	unicode/unimatch.h	/^    U_MATCH$/;"	e	enum:UMatchDegree
U_MATH_SYMBOL	unicode/uchar.h	/^    U_MATH_SYMBOL             = 24,$/;"	e	enum:UCharCategory
U_MAX_PTR	putilimp.h	264;"	d
U_MAX_PTR	putilimp.h	266;"	d
U_MAX_PTR	putilimp.h	275;"	d
U_MAX_PTR	putilimp.h	280;"	d
U_MAX_VERSION_LENGTH	unicode/uversion.h	41;"	d
U_MAX_VERSION_STRING_LENGTH	unicode/uversion.h	51;"	d
U_MEMORY_ALLOCATION_ERROR	unicode/utypes.h	/^    U_MEMORY_ALLOCATION_ERROR =  7,     \/**< Memory allocation error *\/$/;"	e	enum:UErrorCode
U_MESSAGE_PARSE_ERROR	unicode/utypes.h	/^    U_MESSAGE_PARSE_ERROR     =  6,     \/**< Unable to parse a message (message format) *\/$/;"	e	enum:UErrorCode
U_MILLIS_PER_DAY	unicode/utypes.h	316;"	d
U_MILLIS_PER_HOUR	unicode/utypes.h	314;"	d
U_MILLIS_PER_MINUTE	unicode/utypes.h	312;"	d
U_MILLIS_PER_SECOND	unicode/utypes.h	310;"	d
U_MISMATCH	unicode/unimatch.h	/^    U_MISMATCH,$/;"	e	enum:UMatchDegree
U_MISMATCHED_SEGMENT_DELIMITERS	unicode/utypes.h	/^    U_MISMATCHED_SEGMENT_DELIMITERS,  \/**< UNUSED as of ICU 2.4 *\/$/;"	e	enum:UErrorCode
U_MISPLACED_ANCHOR_START	unicode/utypes.h	/^    U_MISPLACED_ANCHOR_START,         \/**< A start anchor appears at an illegal position *\/$/;"	e	enum:UErrorCode
U_MISPLACED_COMPOUND_FILTER	unicode/utypes.h	/^    U_MISPLACED_COMPOUND_FILTER,      \/**< A compound filter is in an invalid location *\/$/;"	e	enum:UErrorCode
U_MISPLACED_CURSOR_OFFSET	unicode/utypes.h	/^    U_MISPLACED_CURSOR_OFFSET,        \/**< A cursor offset occurs at an illegal position *\/$/;"	e	enum:UErrorCode
U_MISPLACED_QUANTIFIER	unicode/utypes.h	/^    U_MISPLACED_QUANTIFIER,           \/**< A quantifier appears after a segment close delimiter *\/$/;"	e	enum:UErrorCode
U_MISSING_OPERATOR	unicode/utypes.h	/^    U_MISSING_OPERATOR,               \/**< A rule contains no operator *\/$/;"	e	enum:UErrorCode
U_MISSING_RESOURCE_ERROR	unicode/utypes.h	/^    U_MISSING_RESOURCE_ERROR  =  2,     \/**< The requested resource cannot be found *\/$/;"	e	enum:UErrorCode
U_MISSING_SEGMENT_CLOSE	unicode/utypes.h	/^    U_MISSING_SEGMENT_CLOSE,          \/**< UNUSED as of ICU 2.4 *\/$/;"	e	enum:UErrorCode
U_MODIFIER_LETTER	unicode/uchar.h	/^    U_MODIFIER_LETTER         = 4,$/;"	e	enum:UCharCategory
U_MODIFIER_SYMBOL	unicode/uchar.h	/^    U_MODIFIER_SYMBOL         = 26,$/;"	e	enum:UCharCategory
U_MULTIPLE_ANTE_CONTEXTS	unicode/utypes.h	/^    U_MULTIPLE_ANTE_CONTEXTS,         \/**< More than one ante context *\/$/;"	e	enum:UErrorCode
U_MULTIPLE_COMPOUND_FILTERS	unicode/utypes.h	/^    U_MULTIPLE_COMPOUND_FILTERS,      \/**< More than one compound filter *\/$/;"	e	enum:UErrorCode
U_MULTIPLE_CURSORS	unicode/utypes.h	/^    U_MULTIPLE_CURSORS,               \/**< More than one cursor *\/$/;"	e	enum:UErrorCode
U_MULTIPLE_DECIMAL_SEPARATORS	unicode/utypes.h	/^    U_MULTIPLE_DECIMAL_SEPARATORS,    \/**< More than one decimal separator in number pattern *\/$/;"	e	enum:UErrorCode
U_MULTIPLE_DECIMAL_SEPERATORS	unicode/utypes.h	/^    U_MULTIPLE_DECIMAL_SEPERATORS = U_MULTIPLE_DECIMAL_SEPARATORS, \/**< Typo: kept for backward compatibility. Use U_MULTIPLE_DECIMAL_SEPARATORS *\/$/;"	e	enum:UErrorCode
U_MULTIPLE_EXPONENTIAL_SYMBOLS	unicode/utypes.h	/^    U_MULTIPLE_EXPONENTIAL_SYMBOLS,   \/**< More than one exponent symbol in number pattern *\/$/;"	e	enum:UErrorCode
U_MULTIPLE_PAD_SPECIFIERS	unicode/utypes.h	/^    U_MULTIPLE_PAD_SPECIFIERS,        \/**< More than one pad symbol in number pattern *\/$/;"	e	enum:UErrorCode
U_MULTIPLE_PERCENT_SYMBOLS	unicode/utypes.h	/^    U_MULTIPLE_PERCENT_SYMBOLS,       \/**< More than one percent symbol in number pattern *\/$/;"	e	enum:UErrorCode
U_MULTIPLE_PERMILL_SYMBOLS	unicode/utypes.h	/^    U_MULTIPLE_PERMILL_SYMBOLS,       \/**< More than one permill symbol in number pattern *\/$/;"	e	enum:UErrorCode
U_MULTIPLE_POST_CONTEXTS	unicode/utypes.h	/^    U_MULTIPLE_POST_CONTEXTS,         \/**< More than one post context *\/$/;"	e	enum:UErrorCode
U_NAMESPACE_BEGIN	unicode/uversion.h	113;"	d
U_NAMESPACE_END	unicode/uversion.h	114;"	d
U_NAMESPACE_QUALIFIER	unicode/uversion.h	116;"	d
U_NAMESPACE_USE	unicode/uversion.h	115;"	d
U_NL	ucnvmbcs.c	1108;"	d	file:
U_NL_LANGINFO_CODESET	unicode/platform.h	306;"	d
U_NONCHARACTER_CODE_POINT	unames.c	116;"	d	file:
U_NON_SPACING_MARK	unicode/uchar.h	/^    U_NON_SPACING_MARK        = 6,$/;"	e	enum:UCharCategory
U_NO_NUMERIC_VALUE	unicode/uchar.h	1930;"	d
U_NO_SPACE_AVAILABLE	unicode/utypes.h	/^    U_NO_SPACE_AVAILABLE      = 20,     \/**< No space available for in-buffer expansion for Arabic shaping *\/$/;"	e	enum:UErrorCode
U_NO_THROW	unicode/uobject.h	/^    static void * U_EXPORT2 operator new(size_t size) U_NO_THROW;$/;"	m	class:UMemory	access:public
U_NO_THROW	unicode/uobject.h	/^    static void * U_EXPORT2 operator new(size_t size, const char* file, int line) U_NO_THROW;$/;"	m	class:UMemory	access:public
U_NO_THROW	unicode/uobject.h	/^    static void * U_EXPORT2 operator new[](size_t size) U_NO_THROW;$/;"	m	class:UMemory	access:public
U_NO_THROW	unicode/uobject.h	/^    static void U_EXPORT2 operator delete(void *p) U_NO_THROW;$/;"	m	class:UMemory	access:public
U_NO_THROW	unicode/uobject.h	/^    static void U_EXPORT2 operator delete(void* p, const char* file, int line) U_NO_THROW;$/;"	m	class:UMemory	access:public
U_NO_THROW	unicode/uobject.h	/^    static void U_EXPORT2 operator delete[](void *p) U_NO_THROW;$/;"	m	class:UMemory	access:public
U_NO_THROW	unicode/uobject.h	81;"	d
U_NO_WRITE_PERMISSION	unicode/utypes.h	/^    U_NO_WRITE_PERMISSION     = 30,     \/**< Attempt to modify read-only or constant data. *\/$/;"	e	enum:UErrorCode
U_NT_COUNT	unicode/uchar.h	/^    U_NT_COUNT$/;"	e	enum:UNumericType
U_NT_DECIMAL	unicode/uchar.h	/^    U_NT_DECIMAL,           \/*[de]*\/$/;"	e	enum:UNumericType
U_NT_DIGIT	unicode/uchar.h	/^    U_NT_DIGIT,             \/*[di]*\/$/;"	e	enum:UNumericType
U_NT_NONE	unicode/uchar.h	/^    U_NT_NONE,              \/*[None]*\/ \/*See note !!*\/$/;"	e	enum:UNumericType
U_NT_NUMERIC	unicode/uchar.h	/^    U_NT_NUMERIC,           \/*[nu]*\/$/;"	e	enum:UNumericType
U_OBSOLETE	unicode/umachine.h	134;"	d
U_OTHER_LETTER	unicode/uchar.h	/^    U_OTHER_LETTER            = 5,$/;"	e	enum:UCharCategory
U_OTHER_NEUTRAL	unicode/uchar.h	/^    U_OTHER_NEUTRAL               = 10,$/;"	e	enum:UCharDirection
U_OTHER_NUMBER	unicode/uchar.h	/^    U_OTHER_NUMBER            = 11,$/;"	e	enum:UCharCategory
U_OTHER_PUNCTUATION	unicode/uchar.h	/^    U_OTHER_PUNCTUATION       = 23,$/;"	e	enum:UCharCategory
U_OTHER_SYMBOL	unicode/uchar.h	/^    U_OTHER_SYMBOL            = 27,$/;"	e	enum:UCharCategory
U_OVERRIDE_CXX_ALLOCATION	unicode/platform.h	179;"	d
U_OVERRIDE_CXX_ALLOCATION	unicode/ppalmos.h	183;"	d
U_OVERRIDE_CXX_ALLOCATION	unicode/pwin32.h	228;"	d
U_OVERRIDE_CXX_ALLOCATION	unicode/uobject.h	40;"	d
U_PALMOS	unicode/ppalmos.h	26;"	d
U_PARAGRAPH_SEPARATOR	unicode/uchar.h	/^    U_PARAGRAPH_SEPARATOR     = 14,$/;"	e	enum:UCharCategory
U_PARSE_CONTEXT_LEN	unicode/parseerr.h	/^enum { U_PARSE_CONTEXT_LEN = 16 };$/;"	e	enum:__anon121
U_PARSE_ERROR	unicode/utypes.h	/^    U_PARSE_ERROR             =  9,     \/**< Equivalent to Java ParseException *\/$/;"	e	enum:UErrorCode
U_PARSE_ERROR_LIMIT	unicode/utypes.h	/^    U_PARSE_ERROR_LIMIT,              \/**< The limit for Transliterator errors *\/$/;"	e	enum:UErrorCode
U_PARSE_ERROR_START	unicode/utypes.h	/^    U_PARSE_ERROR_START = 0x10000,    \/**< Start of Transliterator errors *\/$/;"	e	enum:UErrorCode
U_PARTIAL_MATCH	unicode/unimatch.h	/^    U_PARTIAL_MATCH,$/;"	e	enum:UMatchDegree
U_PATH_SEP_CHAR	unicode/putil.h	128;"	d
U_PATH_SEP_CHAR	unicode/putil.h	135;"	d
U_PATH_SEP_CHAR	unicode/putil.h	142;"	d
U_PATH_SEP_STRING	unicode/putil.h	131;"	d
U_PATH_SEP_STRING	unicode/putil.h	138;"	d
U_PATH_SEP_STRING	unicode/putil.h	145;"	d
U_PATTERN_SYNTAX_ERROR	unicode/utypes.h	/^    U_PATTERN_SYNTAX_ERROR,           \/**< Syntax error in format pattern *\/$/;"	e	enum:UErrorCode
U_PLUGIN_CHANGED_LEVEL_WARNING	unicode/utypes.h	/^    U_PLUGIN_CHANGED_LEVEL_WARNING = -120, \/**< A plugin caused a level change. May not be an error, but later plugins may not load. *\/$/;"	e	enum:UErrorCode
U_PLUGIN_DIDNT_SET_LEVEL	unicode/utypes.h	/^    U_PLUGIN_DIDNT_SET_LEVEL,             \/**< The plugin didn't call uplug_setPlugLevel in response to a QUERY *\/$/;"	e	enum:UErrorCode
U_PLUGIN_ERROR_LIMIT	unicode/utypes.h	/^    U_PLUGIN_ERROR_LIMIT,                 \/**< This must always be the last value to indicate the limit for plugin errors *\/$/;"	e	enum:UErrorCode
U_PLUGIN_ERROR_START	unicode/utypes.h	/^    U_PLUGIN_ERROR_START=0x10500,         \/**< Start of codes indicating plugin failures *\/$/;"	e	enum:UErrorCode
U_PLUGIN_TOO_HIGH	unicode/utypes.h	/^    U_PLUGIN_TOO_HIGH=0x10500,            \/**< The plugin's level is too high to be loaded right now. *\/$/;"	e	enum:UErrorCode
U_POINTER_MASK_LSB	cmemory.h	65;"	d
U_POP_DIRECTIONAL_FORMAT	unicode/uchar.h	/^    U_POP_DIRECTIONAL_FORMAT      = 16,$/;"	e	enum:UCharDirection
U_POSIX_LOCALE	putil.c	175;"	d	file:
U_POSIX_LOCALE	putil.c	177;"	d	file:
U_PPALMOS_H	unicode/ppalmos.h	17;"	d
U_PRIMARY_TOO_LONG_ERROR	unicode/utypes.h	/^    U_PRIMARY_TOO_LONG_ERROR  = 22,     \/**< User tried to set variable top to a primary that is longer than two bytes *\/$/;"	e	enum:UErrorCode
U_PRIVATE_USE_CHAR	unicode/uchar.h	/^    U_PRIVATE_USE_CHAR        = 17,$/;"	e	enum:UCharCategory
U_PROPERTY_NAME_CHOICE_COUNT	unicode/uchar.h	/^    U_PROPERTY_NAME_CHOICE_COUNT$/;"	e	enum:UPropertyNameChoice
U_REGEX_BAD_ESCAPE_SEQUENCE	unicode/utypes.h	/^    U_REGEX_BAD_ESCAPE_SEQUENCE,          \/**< Unrecognized backslash escape sequence in pattern  *\/$/;"	e	enum:UErrorCode
U_REGEX_BAD_INTERVAL	unicode/utypes.h	/^    U_REGEX_BAD_INTERVAL,                 \/**< Error in {min,max} interval                        *\/$/;"	e	enum:UErrorCode
U_REGEX_ERROR_LIMIT	unicode/utypes.h	/^    U_REGEX_ERROR_LIMIT,                  \/**< This must always be the last value to indicate the limit for regexp errors *\/$/;"	e	enum:UErrorCode
U_REGEX_ERROR_START	unicode/utypes.h	/^    U_REGEX_ERROR_START=0x10300,          \/**< Start of codes indicating Regexp failures          *\/$/;"	e	enum:UErrorCode
U_REGEX_INTERNAL_ERROR	unicode/utypes.h	/^    U_REGEX_INTERNAL_ERROR=0x10300,       \/**< An internal error (bug) was detected.              *\/$/;"	e	enum:UErrorCode
U_REGEX_INVALID_BACK_REF	unicode/utypes.h	/^    U_REGEX_INVALID_BACK_REF,             \/**< Back-reference to a non-existent capture group.    *\/$/;"	e	enum:UErrorCode
U_REGEX_INVALID_FLAG	unicode/utypes.h	/^    U_REGEX_INVALID_FLAG,                 \/**< Invalid value for match mode flags.                *\/$/;"	e	enum:UErrorCode
U_REGEX_INVALID_RANGE	unicode/utypes.h	/^    U_REGEX_INVALID_RANGE,                \/**< In a character range [x-y], x is greater than y.   *\/$/;"	e	enum:UErrorCode
U_REGEX_INVALID_STATE	unicode/utypes.h	/^    U_REGEX_INVALID_STATE,                \/**< RegexMatcher in invalid state for requested operation *\/$/;"	e	enum:UErrorCode
U_REGEX_LOOK_BEHIND_LIMIT	unicode/utypes.h	/^    U_REGEX_LOOK_BEHIND_LIMIT,            \/**< Look-Behind pattern matches must have a bounded maximum length.    *\/$/;"	e	enum:UErrorCode
U_REGEX_MAX_LT_MIN	unicode/utypes.h	/^    U_REGEX_MAX_LT_MIN,                   \/**< In {min,max}, max is less than min.                *\/$/;"	e	enum:UErrorCode
U_REGEX_MISMATCHED_PAREN	unicode/utypes.h	/^    U_REGEX_MISMATCHED_PAREN,             \/**< Incorrectly nested parentheses in regexp pattern.  *\/$/;"	e	enum:UErrorCode
U_REGEX_MISSING_CLOSE_BRACKET	unicode/utypes.h	/^    U_REGEX_MISSING_CLOSE_BRACKET,        \/**< Missing closing bracket on a bracket expression.   *\/$/;"	e	enum:UErrorCode
U_REGEX_NUMBER_TOO_BIG	unicode/utypes.h	/^    U_REGEX_NUMBER_TOO_BIG,               \/**< Decimal number is too large.                       *\/$/;"	e	enum:UErrorCode
U_REGEX_OCTAL_TOO_BIG	unicode/utypes.h	/^    U_REGEX_OCTAL_TOO_BIG,                \/**< Octal character constants must be <= 0377.         *\/$/;"	e	enum:UErrorCode
U_REGEX_PROPERTY_SYNTAX	unicode/utypes.h	/^    U_REGEX_PROPERTY_SYNTAX,              \/**< Incorrect Unicode property                         *\/$/;"	e	enum:UErrorCode
U_REGEX_RULE_SYNTAX	unicode/utypes.h	/^    U_REGEX_RULE_SYNTAX,                  \/**< Syntax error in regexp pattern.                    *\/$/;"	e	enum:UErrorCode
U_REGEX_SET_CONTAINS_STRING	unicode/utypes.h	/^    U_REGEX_SET_CONTAINS_STRING,          \/**< Regexps cannot have UnicodeSets containing strings.*\/$/;"	e	enum:UErrorCode
U_REGEX_STACK_OVERFLOW	unicode/utypes.h	/^    U_REGEX_STACK_OVERFLOW,               \/**< Regular expression backtrack stack overflow.       *\/$/;"	e	enum:UErrorCode
U_REGEX_STOPPED_BY_CALLER	unicode/utypes.h	/^    U_REGEX_STOPPED_BY_CALLER,            \/**< Matching operation aborted by user callback fn.    *\/$/;"	e	enum:UErrorCode
U_REGEX_TIME_OUT	unicode/utypes.h	/^    U_REGEX_TIME_OUT,                     \/**< Maximum allowed match time exceeded                *\/$/;"	e	enum:UErrorCode
U_REGEX_UNIMPLEMENTED	unicode/utypes.h	/^    U_REGEX_UNIMPLEMENTED,                \/**< Use of regexp feature that is not yet implemented. *\/$/;"	e	enum:UErrorCode
U_RELEASE	unicode/platform.h	168;"	d
U_RELEASE	unicode/ppalmos.h	169;"	d
U_RELEASE	unicode/ppalmos.h	171;"	d
U_RELEASE	unicode/pwin32.h	214;"	d
U_RELEASE	unicode/pwin32.h	216;"	d
U_RESOURCE_TYPE_MISMATCH	unicode/utypes.h	/^    U_RESOURCE_TYPE_MISMATCH  = 17,     \/**< an operation is requested over a resource that does not support it *\/$/;"	e	enum:UErrorCode
U_RIGHT_TO_LEFT	unicode/uchar.h	/^    U_RIGHT_TO_LEFT               = 1,$/;"	e	enum:UCharDirection
U_RIGHT_TO_LEFT_ARABIC	unicode/uchar.h	/^    U_RIGHT_TO_LEFT_ARABIC        = 13,$/;"	e	enum:UCharDirection
U_RIGHT_TO_LEFT_EMBEDDING	unicode/uchar.h	/^    U_RIGHT_TO_LEFT_EMBEDDING     = 14,$/;"	e	enum:UCharDirection
U_RIGHT_TO_LEFT_OVERRIDE	unicode/uchar.h	/^    U_RIGHT_TO_LEFT_OVERRIDE      = 15,$/;"	e	enum:UCharDirection
U_RULE_MASK_ERROR	unicode/utypes.h	/^    U_RULE_MASK_ERROR,                \/**< A rule is hidden by an earlier more general rule *\/$/;"	e	enum:UErrorCode
U_SAFECLONE_ALLOCATED_WARNING	unicode/utypes.h	/^    U_SAFECLONE_ALLOCATED_WARNING = -126, \/**< A SafeClone operation required allocating memory (informational only) *\/$/;"	e	enum:UErrorCode
U_SB_ATERM	unicode/uchar.h	/^    U_SB_ATERM = 1,             \/*[AT]*\/$/;"	e	enum:USentenceBreak
U_SB_CLOSE	unicode/uchar.h	/^    U_SB_CLOSE = 2,             \/*[CL]*\/$/;"	e	enum:USentenceBreak
U_SB_COUNT	unicode/uchar.h	/^    U_SB_COUNT = 15$/;"	e	enum:USentenceBreak
U_SB_CR	unicode/uchar.h	/^    U_SB_CR = 11,               \/*[CR]*\/ \/* from here on: new in Unicode 5.1\/ICU 4.0 *\/$/;"	e	enum:USentenceBreak
U_SB_EXTEND	unicode/uchar.h	/^    U_SB_EXTEND = 12,           \/*[EX]*\/$/;"	e	enum:USentenceBreak
U_SB_FORMAT	unicode/uchar.h	/^    U_SB_FORMAT = 3,            \/*[FO]*\/$/;"	e	enum:USentenceBreak
U_SB_LF	unicode/uchar.h	/^    U_SB_LF = 13,               \/*[LF]*\/$/;"	e	enum:USentenceBreak
U_SB_LOWER	unicode/uchar.h	/^    U_SB_LOWER = 4,             \/*[LO]*\/$/;"	e	enum:USentenceBreak
U_SB_NUMERIC	unicode/uchar.h	/^    U_SB_NUMERIC = 5,           \/*[NU]*\/$/;"	e	enum:USentenceBreak
U_SB_OLETTER	unicode/uchar.h	/^    U_SB_OLETTER = 6,           \/*[LE]*\/$/;"	e	enum:USentenceBreak
U_SB_OTHER	unicode/uchar.h	/^    U_SB_OTHER = 0,             \/*[XX]*\/ \/*See note !!*\/$/;"	e	enum:USentenceBreak
U_SB_SCONTINUE	unicode/uchar.h	/^    U_SB_SCONTINUE = 14,        \/*[SC]*\/$/;"	e	enum:USentenceBreak
U_SB_SEP	unicode/uchar.h	/^    U_SB_SEP = 7,               \/*[SE]*\/$/;"	e	enum:USentenceBreak
U_SB_SP	unicode/uchar.h	/^    U_SB_SP = 8,                \/*[SP]*\/$/;"	e	enum:USentenceBreak
U_SB_STERM	unicode/uchar.h	/^    U_SB_STERM = 9,             \/*[ST]*\/$/;"	e	enum:USentenceBreak
U_SB_UPPER	unicode/uchar.h	/^    U_SB_UPPER = 10,            \/*[UP]*\/$/;"	e	enum:USentenceBreak
U_SEGMENT_SEPARATOR	unicode/uchar.h	/^    U_SEGMENT_SEPARATOR           = 8,$/;"	e	enum:UCharDirection
U_SENTINEL	unicode/utf.h	134;"	d
U_SHAPE_AGGREGATE_TASHKEEL	unicode/ushape.h	311;"	d
U_SHAPE_AGGREGATE_TASHKEEL_MASK	unicode/ushape.h	315;"	d
U_SHAPE_AGGREGATE_TASHKEEL_NOOP	unicode/ushape.h	313;"	d
U_SHAPE_DIGITS_ALEN2AN_INIT_AL	unicode/ushape.h	283;"	d
U_SHAPE_DIGITS_ALEN2AN_INIT_LR	unicode/ushape.h	271;"	d
U_SHAPE_DIGITS_AN2EN	unicode/ushape.h	258;"	d
U_SHAPE_DIGITS_EN2AN	unicode/ushape.h	251;"	d
U_SHAPE_DIGITS_MASK	unicode/ushape.h	289;"	d
U_SHAPE_DIGITS_NOOP	unicode/ushape.h	244;"	d
U_SHAPE_DIGITS_RESERVED	unicode/ushape.h	286;"	d
U_SHAPE_DIGIT_TYPE_AN	unicode/ushape.h	293;"	d
U_SHAPE_DIGIT_TYPE_AN_EXTENDED	unicode/ushape.h	296;"	d
U_SHAPE_DIGIT_TYPE_MASK	unicode/ushape.h	302;"	d
U_SHAPE_DIGIT_TYPE_RESERVED	unicode/ushape.h	299;"	d
U_SHAPE_LAMALEF_AUTO	unicode/ushape.h	184;"	d
U_SHAPE_LAMALEF_BEGIN	unicode/ushape.h	168;"	d
U_SHAPE_LAMALEF_END	unicode/ushape.h	152;"	d
U_SHAPE_LAMALEF_MASK	unicode/ushape.h	194;"	d
U_SHAPE_LAMALEF_NEAR	unicode/ushape.h	136;"	d
U_SHAPE_LAMALEF_RESIZE	unicode/ushape.h	120;"	d
U_SHAPE_LENGTH_FIXED_SPACES_AT_BEGINNING	unicode/ushape.h	159;"	d
U_SHAPE_LENGTH_FIXED_SPACES_AT_END	unicode/ushape.h	143;"	d
U_SHAPE_LENGTH_FIXED_SPACES_NEAR	unicode/ushape.h	127;"	d
U_SHAPE_LENGTH_GROW_SHRINK	unicode/ushape.h	112;"	d
U_SHAPE_LENGTH_MASK	unicode/ushape.h	187;"	d
U_SHAPE_LETTERS_MASK	unicode/ushape.h	240;"	d
U_SHAPE_LETTERS_NOOP	unicode/ushape.h	221;"	d
U_SHAPE_LETTERS_SHAPE	unicode/ushape.h	224;"	d
U_SHAPE_LETTERS_SHAPE_TASHKEEL_ISOLATED	unicode/ushape.h	236;"	d
U_SHAPE_LETTERS_UNSHAPE	unicode/ushape.h	227;"	d
U_SHAPE_PRESERVE_PRESENTATION	unicode/ushape.h	323;"	d
U_SHAPE_PRESERVE_PRESENTATION_MASK	unicode/ushape.h	331;"	d
U_SHAPE_PRESERVE_PRESENTATION_NOOP	unicode/ushape.h	329;"	d
U_SHAPE_SEEN_MASK	unicode/ushape.h	352;"	d
U_SHAPE_SEEN_TWOCELL_NEAR	unicode/ushape.h	346;"	d
U_SHAPE_SPACES_RELATIVE_TO_TEXT_BEGIN_END	unicode/ushape.h	448;"	d
U_SHAPE_SPACES_RELATIVE_TO_TEXT_MASK	unicode/ushape.h	454;"	d
U_SHAPE_TASHKEEL_BEGIN	unicode/ushape.h	386;"	d
U_SHAPE_TASHKEEL_END	unicode/ushape.h	397;"	d
U_SHAPE_TASHKEEL_MASK	unicode/ushape.h	424;"	d
U_SHAPE_TASHKEEL_REPLACE_BY_TATWEEL	unicode/ushape.h	418;"	d
U_SHAPE_TASHKEEL_RESIZE	unicode/ushape.h	407;"	d
U_SHAPE_TEXT_DIRECTION_LOGICAL	unicode/ushape.h	197;"	d
U_SHAPE_TEXT_DIRECTION_MASK	unicode/ushape.h	217;"	d
U_SHAPE_TEXT_DIRECTION_VISUAL_LTR	unicode/ushape.h	214;"	d
U_SHAPE_TEXT_DIRECTION_VISUAL_RTL	unicode/ushape.h	206;"	d
U_SHAPE_X_LAMALEF_SUB_ALTERNATE	unicode/ushape.h	484;"	d
U_SHAPE_YEHHAMZA_MASK	unicode/ushape.h	374;"	d
U_SHAPE_YEHHAMZA_TWOCELL_NEAR	unicode/ushape.h	367;"	d
U_SHORT_PROPERTY_NAME	unicode/uchar.h	/^    U_SHORT_PROPERTY_NAME,$/;"	e	enum:UPropertyNameChoice
U_SHOW_CPLUSPLUS_API	unicode/utypes.h	58;"	d
U_SHOW_CPLUSPLUS_API	unicode/utypes.h	61;"	d
U_SHOW_CPLUSPLUS_API	unicode/utypes.h	62;"	d
U_SIZEOF_UCHAR	unicode/umachine.h	293;"	d
U_SIZEOF_WCHAR_T	unicode/platform.h	236;"	d
U_SIZEOF_WCHAR_T	unicode/platform.h	247;"	d
U_SIZEOF_WCHAR_T	unicode/ppalmos.h	214;"	d
U_SIZEOF_WCHAR_T	unicode/pwin32.h	266;"	d
U_SIZEOF_WCHAR_T	unicode/umachine.h	254;"	d
U_SIZEOF_WCHAR_T	unicode/umachine.h	255;"	d
U_SORT_KEY_TOO_SHORT_WARNING	unicode/utypes.h	/^    U_SORT_KEY_TOO_SHORT_WARNING = -123, \/**< Number of levels requested in getBound is higher than the number of levels in the sort key *\/$/;"	e	enum:UErrorCode
U_SPACE_SEPARATOR	unicode/uchar.h	/^    U_SPACE_SEPARATOR         = 12,$/;"	e	enum:UCharCategory
U_STABLE	unicode/umachine.h	128;"	d
U_STANDARD_CPP_NAMESPACE	unicode/utypes.h	514;"	d
U_STANDARD_CPP_NAMESPACE	unicode/utypes.h	516;"	d
U_STANDARD_ERROR_LIMIT	unicode/utypes.h	/^    U_STANDARD_ERROR_LIMIT,             \/**< This must always be the last value to indicate the limit for standard errors *\/$/;"	e	enum:UErrorCode
U_START_PUNCTUATION	unicode/uchar.h	/^    U_START_PUNCTUATION       = 20,$/;"	e	enum:UCharCategory
U_STATE_OLD_WARNING	unicode/utypes.h	/^    U_STATE_OLD_WARNING       = -125,   \/**< ICU has to use compatibility layer to construct the service. Expect performance\/memory usage degradation. Consider upgrading *\/$/;"	e	enum:UErrorCode
U_STATE_TOO_OLD_ERROR	unicode/utypes.h	/^    U_STATE_TOO_OLD_ERROR     = 23,     \/**< ICU cannot construct a service from this state, as it is no longer supported *\/$/;"	e	enum:UErrorCode
U_STD_NS	unicode/std_string.h	66;"	d
U_STD_NS	unicode/std_string.h	70;"	d
U_STD_NSQ	unicode/std_string.h	67;"	d
U_STD_NSQ	unicode/std_string.h	71;"	d
U_STD_NS_USE	unicode/std_string.h	68;"	d
U_STD_NS_USE	unicode/std_string.h	72;"	d
U_STRINGPREP_CHECK_BIDI_ERROR	unicode/utypes.h	/^    U_STRINGPREP_CHECK_BIDI_ERROR = U_IDNA_CHECK_BIDI_ERROR,$/;"	e	enum:UErrorCode
U_STRINGPREP_PROHIBITED_ERROR	unicode/utypes.h	/^    U_STRINGPREP_PROHIBITED_ERROR = U_IDNA_PROHIBITED_ERROR,$/;"	e	enum:UErrorCode
U_STRINGPREP_UNASSIGNED_ERROR	unicode/utypes.h	/^    U_STRINGPREP_UNASSIGNED_ERROR = U_IDNA_UNASSIGNED_ERROR,$/;"	e	enum:UErrorCode
U_STRING_DECL	unicode/ustring.h	937;"	d
U_STRING_DECL	unicode/ustring.h	941;"	d
U_STRING_DECL	unicode/ustring.h	945;"	d
U_STRING_DECL	unicode/ustring.h	949;"	d
U_STRING_INIT	unicode/ustring.h	939;"	d
U_STRING_INIT	unicode/ustring.h	943;"	d
U_STRING_INIT	unicode/ustring.h	947;"	d
U_STRING_INIT	unicode/ustring.h	951;"	d
U_STRING_NOT_TERMINATED_WARNING	unicode/utypes.h	/^    U_STRING_NOT_TERMINATED_WARNING = -124,\/**< An output string could not be NUL-terminated because output length==destCapacity. *\/$/;"	e	enum:UErrorCode
U_SUCCESS	unicode/utypes.h	/^    inline UBool U_SUCCESS(UErrorCode code) { return (UBool)(code<=U_ZERO_ERROR); }$/;"	f	signature:(UErrorCode code)
U_SUCCESS	unicode/utypes.h	847;"	d
U_SURROGATE	unicode/uchar.h	/^    U_SURROGATE               = 18,$/;"	e	enum:UCharCategory
U_TIMEZONE	unicode/platform.h	314;"	d
U_TIMEZONE	unicode/pwin32.h	296;"	d
U_TITLECASE_LETTER	unicode/uchar.h	/^    U_TITLECASE_LETTER        = 3,$/;"	e	enum:UCharCategory
U_TITLECASE_NO_BREAK_ADJUSTMENT	unicode/ucasemap.h	184;"	d
U_TITLECASE_NO_LOWERCASE	unicode/ucasemap.h	159;"	d
U_TOOLUTIL_API	unicode/utypes.h	441;"	d
U_TOOLUTIL_API	unicode/utypes.h	449;"	d
U_TOOLUTIL_API	unicode/utypes.h	457;"	d
U_TOOLUTIL_API	unicode/utypes.h	465;"	d
U_TOOLUTIL_API	unicode/utypes.h	473;"	d
U_TOOLUTIL_API	unicode/utypes.h	481;"	d
U_TOOLUTIL_API	unicode/utypes.h	489;"	d
U_TOOLUTIL_API	unicode/utypes.h	497;"	d
U_TOOLUTIL_API	unicode/utypes.h	505;"	d
U_TOO_MANY_ALIASES_ERROR	unicode/utypes.h	/^    U_TOO_MANY_ALIASES_ERROR  = 24,     \/**< There are too many aliases in the path to the requested resource.$/;"	e	enum:UErrorCode
U_TRAILING_BACKSLASH	unicode/utypes.h	/^    U_TRAILING_BACKSLASH,             \/**< A dangling backslash *\/$/;"	e	enum:UErrorCode
U_TRAIL_SURROGATE	unames.c	118;"	d	file:
U_TREE_ENTRY_SEP_CHAR	unicode/udata.h	57;"	d
U_TREE_ENTRY_SEP_STRING	unicode/udata.h	63;"	d
U_TREE_SEPARATOR	unicode/udata.h	45;"	d
U_TREE_SEPARATOR_STRING	unicode/udata.h	51;"	d
U_TRUNCATED_CHAR_FOUND	unicode/utypes.h	/^    U_TRUNCATED_CHAR_FOUND    = 11,     \/**< Character conversion: Incomplete input sequence. *\/$/;"	e	enum:UErrorCode
U_TZNAME	putil.c	/^extern U_IMPORT char *U_TZNAME[];$/;"	x
U_TZNAME	unicode/platform.h	317;"	d
U_TZNAME	unicode/pwin32.h	302;"	d
U_TZSET	unicode/platform.h	311;"	d
U_TZSET	unicode/pwin32.h	290;"	d
U_UINT64_MAX	unicode/umachine.h	210;"	d
U_UNASSIGNED	unicode/uchar.h	/^    U_UNASSIGNED              = 0,$/;"	e	enum:UCharCategory
U_UNCLOSED_SEGMENT	unicode/utypes.h	/^    U_UNCLOSED_SEGMENT,               \/**< A closing ')' is missing *\/$/;"	e	enum:UErrorCode
U_UNDEFINED_KEYWORD	unicode/utypes.h	/^    U_UNDEFINED_KEYWORD,              \/**< Undefined Plural keyword *\/$/;"	e	enum:UErrorCode
U_UNDEFINED_SEGMENT_REFERENCE	unicode/utypes.h	/^    U_UNDEFINED_SEGMENT_REFERENCE,    \/**< A segment reference does not correspond to a defined segment *\/$/;"	e	enum:UErrorCode
U_UNDEFINED_VARIABLE	unicode/utypes.h	/^    U_UNDEFINED_VARIABLE,             \/**< A variable reference does not correspond to a defined variable *\/$/;"	e	enum:UErrorCode
U_UNEXPECTED_TOKEN	unicode/utypes.h	/^    U_UNEXPECTED_TOKEN=0x10100,       \/**< Syntax error in format pattern *\/$/;"	e	enum:UErrorCode
U_UNICODE_10_CHAR_NAME	unicode/uchar.h	/^    U_UNICODE_10_CHAR_NAME,$/;"	e	enum:UCharNameChoice
U_UNICODE_CHAR_NAME	unicode/uchar.h	/^    U_UNICODE_CHAR_NAME,$/;"	e	enum:UCharNameChoice
U_UNICODE_VERSION	unicode/uchar.h	42;"	d
U_UNMATCHED_BRACES	unicode/utypes.h	/^    U_UNMATCHED_BRACES,               \/**< Braces do not match in message pattern *\/$/;"	e	enum:UErrorCode
U_UNQUOTED_SPECIAL	unicode/utypes.h	/^    U_UNQUOTED_SPECIAL,               \/**< A special character was not quoted or escaped *\/$/;"	e	enum:UErrorCode
U_UNSUPPORTED_ATTRIBUTE	unicode/utypes.h	/^    U_UNSUPPORTED_ATTRIBUTE,          \/**< UNUSED as of ICU 2.4 *\/$/;"	e	enum:UErrorCode
U_UNSUPPORTED_ERROR	unicode/utypes.h	/^    U_UNSUPPORTED_ERROR       = 16,     \/**< Requested operation not supported in current context *\/$/;"	e	enum:UErrorCode
U_UNSUPPORTED_ESCAPE_SEQUENCE	unicode/utypes.h	/^    U_UNSUPPORTED_ESCAPE_SEQUENCE = 19, \/**< ISO-2022 unsupported escape sequence *\/$/;"	e	enum:UErrorCode
U_UNSUPPORTED_PROPERTY	unicode/utypes.h	/^    U_UNSUPPORTED_PROPERTY,           \/**< UNUSED as of ICU 2.4 *\/$/;"	e	enum:UErrorCode
U_UNTERMINATED_QUOTE	unicode/utypes.h	/^    U_UNTERMINATED_QUOTE,             \/**< A closing single quote is missing *\/$/;"	e	enum:UErrorCode
U_UPPERCASE_LETTER	unicode/uchar.h	/^    U_UPPERCASE_LETTER        = 1,$/;"	e	enum:UCharCategory
U_UPPER_ORDINAL	uinvchar.h	57;"	d
U_UPPER_ORDINAL	uinvchar.h	59;"	d
U_USELESS_COLLATOR_ERROR	unicode/utypes.h	/^    U_USELESS_COLLATOR_ERROR  = 29,     \/**< Collator is options only and no base is specified *\/$/;"	e	enum:UErrorCode
U_USE_USRDATA	unicode/utypes.h	237;"	d
U_USING_DEFAULT_WARNING	unicode/utypes.h	/^    U_USING_DEFAULT_WARNING   = -127,   \/**< A resource bundle lookup returned a result from the root locale (not an error) *\/$/;"	e	enum:UErrorCode
U_USING_FALLBACK_WARNING	unicode/utypes.h	/^    U_USING_FALLBACK_WARNING  = -128,   \/**< A resource bundle lookup returned a fallback result (not an error) *\/$/;"	e	enum:UErrorCode
U_USING_ICU_NAMESPACE	unicode/uversion.h	119;"	d
U_USRDATA_NAME	unicode/utypes.h	236;"	d
U_UTF8_IMPL	utf_impl.c	22;"	d	file:
U_VARIABLE_RANGE_EXHAUSTED	unicode/utypes.h	/^    U_VARIABLE_RANGE_EXHAUSTED,       \/**< Too many stand-ins generated for the given variable range *\/$/;"	e	enum:UErrorCode
U_VARIABLE_RANGE_OVERLAP	unicode/utypes.h	/^    U_VARIABLE_RANGE_OVERLAP,         \/**< The variable range overlaps characters used in rules *\/$/;"	e	enum:UErrorCode
U_VERSION_DELIMITER	unicode/uversion.h	46;"	d
U_WB_ALETTER	unicode/uchar.h	/^    U_WB_ALETTER = 1,           \/*[LE]*\/$/;"	e	enum:UWordBreakValues
U_WB_COUNT	unicode/uchar.h	/^    U_WB_COUNT = 13$/;"	e	enum:UWordBreakValues
U_WB_CR	unicode/uchar.h	/^    U_WB_CR = 8,                \/*[CR]*\/ \/* from here on: new in Unicode 5.1\/ICU 4.0 *\/$/;"	e	enum:UWordBreakValues
U_WB_EXTEND	unicode/uchar.h	/^    U_WB_EXTEND = 9,            \/*[Extend]*\/$/;"	e	enum:UWordBreakValues
U_WB_EXTENDNUMLET	unicode/uchar.h	/^    U_WB_EXTENDNUMLET = 7,      \/*[EX]*\/$/;"	e	enum:UWordBreakValues
U_WB_FORMAT	unicode/uchar.h	/^    U_WB_FORMAT = 2,            \/*[FO]*\/$/;"	e	enum:UWordBreakValues
U_WB_KATAKANA	unicode/uchar.h	/^    U_WB_KATAKANA = 3,          \/*[KA]*\/$/;"	e	enum:UWordBreakValues
U_WB_LF	unicode/uchar.h	/^    U_WB_LF = 10,               \/*[LF]*\/$/;"	e	enum:UWordBreakValues
U_WB_MIDLETTER	unicode/uchar.h	/^    U_WB_MIDLETTER = 4,         \/*[ML]*\/$/;"	e	enum:UWordBreakValues
U_WB_MIDNUM	unicode/uchar.h	/^    U_WB_MIDNUM = 5,            \/*[MN]*\/$/;"	e	enum:UWordBreakValues
U_WB_MIDNUMLET	unicode/uchar.h	/^    U_WB_MIDNUMLET =11,         \/*[MB]*\/$/;"	e	enum:UWordBreakValues
U_WB_NEWLINE	unicode/uchar.h	/^    U_WB_NEWLINE =12,           \/*[NL]*\/$/;"	e	enum:UWordBreakValues
U_WB_NUMERIC	unicode/uchar.h	/^    U_WB_NUMERIC = 6,           \/*[NU]*\/$/;"	e	enum:UWordBreakValues
U_WB_OTHER	unicode/uchar.h	/^    U_WB_OTHER = 0,             \/*[XX]*\/ \/*See note !!*\/$/;"	e	enum:UWordBreakValues
U_WCHAR_IS_UTF16	unicode/umachine.h	273;"	d
U_WCHAR_IS_UTF16	unicode/umachine.h	279;"	d
U_WCHAR_IS_UTF16	unicode/umachine.h	286;"	d
U_WCHAR_IS_UTF32	unicode/umachine.h	275;"	d
U_WCHAR_IS_UTF32	unicode/umachine.h	283;"	d
U_WHITE_SPACE_NEUTRAL	unicode/uchar.h	/^    U_WHITE_SPACE_NEUTRAL         = 9,$/;"	e	enum:UCharDirection
U_WINDOWS	unicode/pwin32.h	26;"	d
U_Z	uprops.h	/^    U_Z     =0x005a,$/;"	e	enum:__anon90
U_ZERO_ERROR	unicode/utypes.h	/^    U_ZERO_ERROR              =  0,     \/**< No error, no warning. *\/$/;"	e	enum:UErrorCode
U_a	uprops.h	/^    U_a     =0x0061,$/;"	e	enum:__anon90
U_f	uprops.h	/^    U_f     =0x0066,$/;"	e	enum:__anon90
U_z	uprops.h	/^    U_z     =0x007a,$/;"	e	enum:__anon90
UnescapeTransliterator	unicode/urename.h	2203;"	d
UnhandledEngine	brkeng.cpp	/^UnhandledEngine::UnhandledEngine(UErrorCode &\/*status*\/) {$/;"	f	class:UnhandledEngine	signature:(UErrorCode & )
UnhandledEngine	brkeng.h	/^  UnhandledEngine(UErrorCode &status);$/;"	p	class:UnhandledEngine	access:public	signature:(UErrorCode &status)
UnhandledEngine	brkeng.h	/^class UnhandledEngine : public LanguageBreakEngine {$/;"	c	inherits:LanguageBreakEngine
UnhandledEngine	unicode/rbbi.h	/^class  UnhandledEngine;$/;"	x
UnhandledEngine	unicode/urename.h	2204;"	d
UnhandledEngine::UnhandledEngine	brkeng.cpp	/^UnhandledEngine::UnhandledEngine(UErrorCode &\/*status*\/) {$/;"	f	class:UnhandledEngine	signature:(UErrorCode & )
UnhandledEngine::UnhandledEngine	brkeng.h	/^  UnhandledEngine(UErrorCode &status);$/;"	p	class:UnhandledEngine	access:public	signature:(UErrorCode &status)
UnhandledEngine::fHandled	brkeng.h	/^  UnicodeSet    *fHandled[4];$/;"	m	class:UnhandledEngine	access:private
UnhandledEngine::findBreaks	brkeng.cpp	/^UnhandledEngine::findBreaks( UText *text,$/;"	f	class:UnhandledEngine	signature:( UText *text, int32_t startPos, int32_t endPos, UBool reverse, int32_t breakType, UStack & ) const
UnhandledEngine::findBreaks	brkeng.h	/^  virtual int32_t findBreaks( UText *text,$/;"	p	class:UnhandledEngine	access:public	signature:( UText *text, int32_t startPos, int32_t endPos, UBool reverse, int32_t breakType, UStack &foundBreaks ) const
UnhandledEngine::handleCharacter	brkeng.cpp	/^UnhandledEngine::handleCharacter(UChar32 c, int32_t breakType) {$/;"	f	class:UnhandledEngine	signature:(UChar32 c, int32_t breakType)
UnhandledEngine::handleCharacter	brkeng.h	/^  virtual void handleCharacter(UChar32 c, int32_t breakType);$/;"	p	class:UnhandledEngine	access:public	signature:(UChar32 c, int32_t breakType)
UnhandledEngine::handles	brkeng.cpp	/^UnhandledEngine::handles(UChar32 c, int32_t breakType) const {$/;"	f	class:UnhandledEngine	signature:(UChar32 c, int32_t breakType) const
UnhandledEngine::handles	brkeng.h	/^  virtual UBool handles(UChar32 c, int32_t breakType) const;$/;"	p	class:UnhandledEngine	access:public	signature:(UChar32 c, int32_t breakType) const
UnhandledEngine::~UnhandledEngine	brkeng.cpp	/^UnhandledEngine::~UnhandledEngine() {$/;"	f	class:UnhandledEngine	signature:()
UnhandledEngine::~UnhandledEngine	brkeng.h	/^  virtual ~UnhandledEngine();$/;"	p	class:UnhandledEngine	access:public	signature:()
UniLMBCSGrpMap	ucnv_lmb.c	/^} UniLMBCSGrpMap[]$/;"	v	typeref:struct:_UniLMBCSGrpMap	file:
UniLang	ucnvisci.c	/^}UniLang;$/;"	t	typeref:enum:__anon13	file:
UnicodeArabicOpenTypeLayoutEngine	unicode/urename.h	2205;"	d
UnicodeFilter	unicode/unifilt.h	/^class U_COMMON_API UnicodeFilter : public UnicodeFunctor, public UnicodeMatcher {$/;"	c	inherits:UnicodeFunctor,UnicodeMatcher
UnicodeFilter	unicode/urename.h	2206;"	d
UnicodeFilter::contains	unicode/unifilt.h	/^    virtual UBool contains(UChar32 c) const = 0;$/;"	p	class:UnicodeFilter	access:public	signature:(UChar32 c) const
UnicodeFilter::getStaticClassID	unicode/unifilt.h	/^    static UClassID U_EXPORT2 getStaticClassID();$/;"	p	class:UnicodeFilter	access:public	signature:()
UnicodeFilter::matches	unicode/unifilt.h	/^    virtual UMatchDegree matches(const Replaceable& text,$/;"	p	class:UnicodeFilter	access:public	signature:(const Replaceable& text, int32_t& offset, int32_t limit, UBool incremental)
UnicodeFilter::matches	unifilt.cpp	/^UMatchDegree UnicodeFilter::matches(const Replaceable& text,$/;"	f	class:UnicodeFilter	signature:(const Replaceable& text, int32_t& offset, int32_t limit, UBool incremental)
UnicodeFilter::setData	unicode/unifilt.h	/^    virtual void setData(const TransliterationRuleData*);$/;"	p	class:UnicodeFilter	access:public	signature:(const TransliterationRuleData*)
UnicodeFilter::setData	unifilt.cpp	/^void UnicodeFilter::setData(const TransliterationRuleData*) {}$/;"	f	class:UnicodeFilter	signature:(const TransliterationRuleData*)
UnicodeFilter::toMatcher	unicode/unifilt.h	/^    virtual UnicodeMatcher* toMatcher() const;$/;"	p	class:UnicodeFilter	access:public	signature:() const
UnicodeFilter::toMatcher	unifilt.cpp	/^UnicodeMatcher* UnicodeFilter::toMatcher() const {$/;"	f	class:UnicodeFilter	signature:() const
UnicodeFilter::~UnicodeFilter	unicode/unifilt.h	/^    virtual ~UnicodeFilter();$/;"	p	class:UnicodeFilter	access:public	signature:()
UnicodeFilter::~UnicodeFilter	unifilt.cpp	/^UnicodeFilter::~UnicodeFilter() {}$/;"	f	class:UnicodeFilter	signature:()
UnicodeFunctor	unicode/symtable.h	/^class UnicodeFunctor;$/;"	x
UnicodeFunctor	unicode/unifunct.h	/^class U_COMMON_API UnicodeFunctor : public UObject {$/;"	c	inherits:UObject
UnicodeFunctor	unicode/urename.h	2207;"	d
UnicodeFunctor::clone	unicode/unifunct.h	/^    virtual UnicodeFunctor* clone() const = 0;$/;"	p	class:UnicodeFunctor	access:public	signature:() const
UnicodeFunctor::getDynamicClassID	unicode/unifunct.h	/^    virtual UClassID getDynamicClassID(void) const = 0;$/;"	p	class:UnicodeFunctor	access:public	signature:(void) const
UnicodeFunctor::getStaticClassID	unicode/unifunct.h	/^    static UClassID U_EXPORT2 getStaticClassID(void);$/;"	p	class:UnicodeFunctor	access:public	signature:(void)
UnicodeFunctor::setData	unicode/unifunct.h	/^    virtual void setData(const TransliterationRuleData*) = 0;$/;"	p	class:UnicodeFunctor	access:public	signature:(const TransliterationRuleData*)
UnicodeFunctor::toMatcher	unicode/unifunct.h	/^    virtual UnicodeMatcher* toMatcher() const;$/;"	p	class:UnicodeFunctor	access:public	signature:() const
UnicodeFunctor::toMatcher	unifunct.cpp	/^UnicodeMatcher* UnicodeFunctor::toMatcher() const {$/;"	f	class:UnicodeFunctor	signature:() const
UnicodeFunctor::toReplacer	unicode/unifunct.h	/^    virtual UnicodeReplacer* toReplacer() const;$/;"	p	class:UnicodeFunctor	access:public	signature:() const
UnicodeFunctor::toReplacer	unifunct.cpp	/^UnicodeReplacer* UnicodeFunctor::toReplacer() const {$/;"	f	class:UnicodeFunctor	signature:() const
UnicodeFunctor::~UnicodeFunctor	unicode/unifunct.h	/^    virtual ~UnicodeFunctor();$/;"	p	class:UnicodeFunctor	access:public	signature:()
UnicodeFunctor::~UnicodeFunctor	unifunct.cpp	/^UnicodeFunctor::~UnicodeFunctor() {}$/;"	f	class:UnicodeFunctor	signature:()
UnicodeMatcher	unicode/unifunct.h	/^class UnicodeMatcher;$/;"	x
UnicodeMatcher	unicode/unimatch.h	/^class U_COMMON_API UnicodeMatcher \/* not : public UObject because this is an interface\/mixin class *\/ {$/;"	c
UnicodeMatcher	unicode/urename.h	2208;"	d
UnicodeMatcher	util.h	/^class UnicodeMatcher;$/;"	x
UnicodeMatcher::addMatchSetTo	unicode/unimatch.h	/^    virtual void addMatchSetTo(UnicodeSet& toUnionTo) const = 0;$/;"	p	class:UnicodeMatcher	access:public	signature:(UnicodeSet& toUnionTo) const
UnicodeMatcher::matches	unicode/unimatch.h	/^    virtual UMatchDegree matches(const Replaceable& text,$/;"	p	class:UnicodeMatcher	access:public	signature:(const Replaceable& text, int32_t& offset, int32_t limit, UBool incremental)
UnicodeMatcher::matchesIndexValue	unicode/unimatch.h	/^    virtual UBool matchesIndexValue(uint8_t v) const = 0;$/;"	p	class:UnicodeMatcher	access:public	signature:(uint8_t v) const
UnicodeMatcher::toPattern	unicode/unimatch.h	/^    virtual UnicodeString& toPattern(UnicodeString& result,$/;"	p	class:UnicodeMatcher	access:public	signature:(UnicodeString& result, UBool escapeUnprintable = FALSE) const
UnicodeMatcher::~UnicodeMatcher	unicode/unimatch.h	/^    virtual ~UnicodeMatcher();$/;"	p	class:UnicodeMatcher	access:public	signature:()
UnicodeMatcher::~UnicodeMatcher	unifilt.cpp	/^UnicodeMatcher::~UnicodeMatcher() {}$/;"	f	class:UnicodeMatcher	signature:()
UnicodeNameTransliterator	unicode/urename.h	2209;"	d
UnicodeReplacer	unicode/unifunct.h	/^class UnicodeReplacer;$/;"	x
UnicodeReplacer	unicode/urename.h	2210;"	d
UnicodeSet	brkeng.h	/^class UnicodeSet;$/;"	x
UnicodeSet	rbbinode.h	/^class    UnicodeSet;$/;"	x
UnicodeSet	unicode/symtable.h	/^class UnicodeSet;$/;"	x
UnicodeSet	unicode/unimatch.h	/^class UnicodeSet;$/;"	x
UnicodeSet	unicode/uniset.h	/^    UnicodeSet();$/;"	p	class:UnicodeSet	access:public	signature:()
UnicodeSet	unicode/uniset.h	/^    UnicodeSet(UChar32 start, UChar32 end);$/;"	p	class:UnicodeSet	access:public	signature:(UChar32 start, UChar32 end)
UnicodeSet	unicode/uniset.h	/^    UnicodeSet(const UnicodeSet& o);$/;"	p	class:UnicodeSet	access:public	signature:(const UnicodeSet& o)
UnicodeSet	unicode/uniset.h	/^    UnicodeSet(const UnicodeSet& o, UBool \/* asThawed *\/);$/;"	p	class:UnicodeSet	access:private	signature:(const UnicodeSet& o, UBool )
UnicodeSet	unicode/uniset.h	/^    UnicodeSet(const UnicodeString& pattern, ParsePosition& pos,$/;"	p	class:UnicodeSet	access:public	signature:(const UnicodeString& pattern, ParsePosition& pos, uint32_t options, const SymbolTable* symbols, UErrorCode& status)
UnicodeSet	unicode/uniset.h	/^    UnicodeSet(const UnicodeString& pattern,$/;"	p	class:UnicodeSet	access:public	signature:(const UnicodeString& pattern, UErrorCode& status)
UnicodeSet	unicode/uniset.h	/^    UnicodeSet(const UnicodeString& pattern,$/;"	p	class:UnicodeSet	access:public	signature:(const UnicodeString& pattern, uint32_t options, const SymbolTable* symbols, UErrorCode& status)
UnicodeSet	unicode/uniset.h	/^class U_COMMON_API UnicodeSet : public UnicodeFilter {$/;"	c	inherits:UnicodeFilter
UnicodeSet	unicode/urename.h	2211;"	d
UnicodeSet	unicode/usetiter.h	/^class UnicodeSet;$/;"	x
UnicodeSet	uniset.cpp	/^UnicodeSet::UnicodeSet() :$/;"	f	class:UnicodeSet	signature:()
UnicodeSet	uniset.cpp	/^UnicodeSet::UnicodeSet(UChar32 start, UChar32 end) :$/;"	f	class:UnicodeSet	signature:(UChar32 start, UChar32 end)
UnicodeSet	uniset.cpp	/^UnicodeSet::UnicodeSet(const UnicodeSet& o) :$/;"	f	class:UnicodeSet	signature:(const UnicodeSet& o)
UnicodeSet	uniset.cpp	/^UnicodeSet::UnicodeSet(const UnicodeSet& o, UBool \/* asThawed *\/) :$/;"	f	class:UnicodeSet	signature:(const UnicodeSet& o, UBool )
UnicodeSet	uniset_props.cpp	/^UnicodeSet::UnicodeSet(const UnicodeString& pattern, ParsePosition& pos,$/;"	f	class:UnicodeSet	signature:(const UnicodeString& pattern, ParsePosition& pos, uint32_t options, const SymbolTable* symbols, UErrorCode& status)
UnicodeSet	uniset_props.cpp	/^UnicodeSet::UnicodeSet(const UnicodeString& pattern,$/;"	f	class:UnicodeSet	signature:(const UnicodeString& pattern, UErrorCode& status)
UnicodeSet	uniset_props.cpp	/^UnicodeSet::UnicodeSet(const UnicodeString& pattern,$/;"	f	class:UnicodeSet	signature:(const UnicodeString& pattern, uint32_t options, const SymbolTable* symbols, UErrorCode& status)
UnicodeSet	uprops.h	/^class UnicodeSet;$/;"	x
UnicodeSet	util.h	/^class UnicodeSet;$/;"	x
UnicodeSet::Filter	unicode/uniset.h	/^    typedef UBool (*Filter)(UChar32 codePoint, void* context);$/;"	t	class:UnicodeSet	access:private
UnicodeSet::MAX_VALUE	unicode/uniset.h	/^        MAX_VALUE = 0x10ffff$/;"	e	enum:UnicodeSet::__anon99
UnicodeSet::MIN_VALUE	unicode/uniset.h	/^        MIN_VALUE = 0,$/;"	e	enum:UnicodeSet::__anon99
UnicodeSet::USetAccess	unicode/uniset.h	/^    friend class USetAccess;$/;"	x
UnicodeSet::UnicodeSet	unicode/uniset.h	/^    UnicodeSet();$/;"	p	class:UnicodeSet	access:public	signature:()
UnicodeSet::UnicodeSet	unicode/uniset.h	/^    UnicodeSet(UChar32 start, UChar32 end);$/;"	p	class:UnicodeSet	access:public	signature:(UChar32 start, UChar32 end)
UnicodeSet::UnicodeSet	unicode/uniset.h	/^    UnicodeSet(const UnicodeSet& o);$/;"	p	class:UnicodeSet	access:public	signature:(const UnicodeSet& o)
UnicodeSet::UnicodeSet	unicode/uniset.h	/^    UnicodeSet(const UnicodeSet& o, UBool \/* asThawed *\/);$/;"	p	class:UnicodeSet	access:private	signature:(const UnicodeSet& o, UBool )
UnicodeSet::UnicodeSet	unicode/uniset.h	/^    UnicodeSet(const UnicodeString& pattern, ParsePosition& pos,$/;"	p	class:UnicodeSet	access:public	signature:(const UnicodeString& pattern, ParsePosition& pos, uint32_t options, const SymbolTable* symbols, UErrorCode& status)
UnicodeSet::UnicodeSet	unicode/uniset.h	/^    UnicodeSet(const UnicodeString& pattern,$/;"	p	class:UnicodeSet	access:public	signature:(const UnicodeString& pattern, UErrorCode& status)
UnicodeSet::UnicodeSet	unicode/uniset.h	/^    UnicodeSet(const UnicodeString& pattern,$/;"	p	class:UnicodeSet	access:public	signature:(const UnicodeString& pattern, uint32_t options, const SymbolTable* symbols, UErrorCode& status)
UnicodeSet::UnicodeSet	uniset.cpp	/^UnicodeSet::UnicodeSet() :$/;"	f	class:UnicodeSet	signature:()
UnicodeSet::UnicodeSet	uniset.cpp	/^UnicodeSet::UnicodeSet(UChar32 start, UChar32 end) :$/;"	f	class:UnicodeSet	signature:(UChar32 start, UChar32 end)
UnicodeSet::UnicodeSet	uniset.cpp	/^UnicodeSet::UnicodeSet(const UnicodeSet& o) :$/;"	f	class:UnicodeSet	signature:(const UnicodeSet& o)
UnicodeSet::UnicodeSet	uniset.cpp	/^UnicodeSet::UnicodeSet(const UnicodeSet& o, UBool \/* asThawed *\/) :$/;"	f	class:UnicodeSet	signature:(const UnicodeSet& o, UBool )
UnicodeSet::UnicodeSet	uniset_props.cpp	/^UnicodeSet::UnicodeSet(const UnicodeString& pattern, ParsePosition& pos,$/;"	f	class:UnicodeSet	signature:(const UnicodeString& pattern, ParsePosition& pos, uint32_t options, const SymbolTable* symbols, UErrorCode& status)
UnicodeSet::UnicodeSet	uniset_props.cpp	/^UnicodeSet::UnicodeSet(const UnicodeString& pattern,$/;"	f	class:UnicodeSet	signature:(const UnicodeString& pattern, UErrorCode& status)
UnicodeSet::UnicodeSet	uniset_props.cpp	/^UnicodeSet::UnicodeSet(const UnicodeString& pattern,$/;"	f	class:UnicodeSet	signature:(const UnicodeString& pattern, uint32_t options, const SymbolTable* symbols, UErrorCode& status)
UnicodeSet::UnicodeSetIterator	unicode/uniset.h	/^    friend class UnicodeSetIterator;$/;"	x
UnicodeSet::_add	unicode/uniset.h	/^    void _add(const UnicodeString& s);$/;"	p	class:UnicodeSet	access:private	signature:(const UnicodeString& s)
UnicodeSet::_add	uniset.cpp	/^void UnicodeSet::_add(const UnicodeString& s) {$/;"	f	class:UnicodeSet	signature:(const UnicodeString& s)
UnicodeSet::_appendToPat	unicode/uniset.h	/^    static void _appendToPat(UnicodeString& buf, UChar32 c, UBool escapeUnprintable);$/;"	p	class:UnicodeSet	access:private	signature:(UnicodeString& buf, UChar32 c, UBool escapeUnprintable)
UnicodeSet::_appendToPat	unicode/uniset.h	/^    static void _appendToPat(UnicodeString& buf, const UnicodeString& s, UBool escapeUnprintable);$/;"	p	class:UnicodeSet	access:private	signature:(UnicodeString& buf, const UnicodeString& s, UBool escapeUnprintable)
UnicodeSet::_appendToPat	uniset.cpp	/^void UnicodeSet::_appendToPat(UnicodeString& buf, UChar32 c, UBool$/;"	f	class:UnicodeSet	signature:(UnicodeString& buf, UChar32 c, UBool escapeUnprintable)
UnicodeSet::_appendToPat	uniset.cpp	/^void UnicodeSet::_appendToPat(UnicodeString& buf, const UnicodeString& s, UBool$/;"	f	class:UnicodeSet	signature:(UnicodeString& buf, const UnicodeString& s, UBool escapeUnprintable)
UnicodeSet::_generatePattern	unicode/uniset.h	/^    UnicodeString& _generatePattern(UnicodeString& result,$/;"	p	class:UnicodeSet	access:private	signature:(UnicodeString& result, UBool escapeUnprintable) const
UnicodeSet::_generatePattern	uniset.cpp	/^UnicodeString& UnicodeSet::_generatePattern(UnicodeString& result,$/;"	f	class:UnicodeSet	signature:(UnicodeString& result, UBool escapeUnprintable) const
UnicodeSet::_toPattern	unicode/uniset.h	/^    UnicodeString& _toPattern(UnicodeString& result,$/;"	p	class:UnicodeSet	access:private	signature:(UnicodeString& result, UBool escapeUnprintable) const
UnicodeSet::_toPattern	uniset.cpp	/^UnicodeString& UnicodeSet::_toPattern(UnicodeString& result,$/;"	f	class:UnicodeSet	signature:(UnicodeString& result, UBool escapeUnprintable) const
UnicodeSet::add	unicode/uniset.h	/^    UnicodeSet& add(UChar32 c);$/;"	p	class:UnicodeSet	access:public	signature:(UChar32 c)
UnicodeSet::add	unicode/uniset.h	/^    UnicodeSet& add(const UnicodeString& s);$/;"	p	class:UnicodeSet	access:public	signature:(const UnicodeString& s)
UnicodeSet::add	unicode/uniset.h	/^    virtual UnicodeSet& add(UChar32 start, UChar32 end);$/;"	p	class:UnicodeSet	access:public	signature:(UChar32 start, UChar32 end)
UnicodeSet::add	unicode/uniset.h	/^    void add(const UChar32* other, int32_t otherLen, int8_t polarity);$/;"	p	class:UnicodeSet	access:private	signature:(const UChar32* other, int32_t otherLen, int8_t polarity)
UnicodeSet::add	uniset.cpp	/^UnicodeSet& UnicodeSet::add(UChar32 c) {$/;"	f	class:UnicodeSet	signature:(UChar32 c)
UnicodeSet::add	uniset.cpp	/^UnicodeSet& UnicodeSet::add(UChar32 start, UChar32 end) {$/;"	f	class:UnicodeSet	signature:(UChar32 start, UChar32 end)
UnicodeSet::add	uniset.cpp	/^UnicodeSet& UnicodeSet::add(const UnicodeString& s) {$/;"	f	class:UnicodeSet	signature:(const UnicodeString& s)
UnicodeSet::add	uniset.cpp	/^void UnicodeSet::add(const UChar32* other, int32_t otherLen, int8_t polarity) {$/;"	f	class:UnicodeSet	signature:(const UChar32* other, int32_t otherLen, int8_t polarity)
UnicodeSet::addAll	unicode/uniset.h	/^    UnicodeSet& addAll(const UnicodeString& s);$/;"	p	class:UnicodeSet	access:public	signature:(const UnicodeString& s)
UnicodeSet::addAll	unicode/uniset.h	/^    virtual UnicodeSet& addAll(const UnicodeSet& c);$/;"	p	class:UnicodeSet	access:public	signature:(const UnicodeSet& c)
UnicodeSet::addAll	uniset.cpp	/^UnicodeSet& UnicodeSet::addAll(const UnicodeSet& c) {$/;"	f	class:UnicodeSet	signature:(const UnicodeSet& c)
UnicodeSet::addAll	uniset.cpp	/^UnicodeSet& UnicodeSet::addAll(const UnicodeString& s) {$/;"	f	class:UnicodeSet	signature:(const UnicodeString& s)
UnicodeSet::addMatchSetTo	unicode/uniset.h	/^    virtual void addMatchSetTo(UnicodeSet& toUnionTo) const;$/;"	p	class:UnicodeSet	access:public	signature:(UnicodeSet& toUnionTo) const
UnicodeSet::addMatchSetTo	uniset.cpp	/^void UnicodeSet::addMatchSetTo(UnicodeSet& toUnionTo) const {$/;"	f	class:UnicodeSet	signature:(UnicodeSet& toUnionTo) const
UnicodeSet::allocateStrings	unicode/uniset.h	/^    UBool allocateStrings(UErrorCode &status);$/;"	p	class:UnicodeSet	access:private	signature:(UErrorCode &status)
UnicodeSet::allocateStrings	uniset.cpp	/^UBool UnicodeSet::allocateStrings(UErrorCode &status) {$/;"	f	class:UnicodeSet	signature:(UErrorCode &status)
UnicodeSet::applyFilter	unicode/uniset.h	/^    void applyFilter(Filter filter,$/;"	p	class:UnicodeSet	access:private	signature:(Filter filter, void* context, int32_t src, UErrorCode &status)
UnicodeSet::applyFilter	uniset_props.cpp	/^void UnicodeSet::applyFilter(UnicodeSet::Filter filter,$/;"	f	class:UnicodeSet	signature:(UnicodeSet::Filter filter, void* context, int32_t src, UErrorCode &status)
UnicodeSet::applyIntPropertyValue	unicode/uniset.h	/^    UnicodeSet& applyIntPropertyValue(UProperty prop,$/;"	p	class:UnicodeSet	access:public	signature:(UProperty prop, int32_t value, UErrorCode& ec)
UnicodeSet::applyIntPropertyValue	uniset_props.cpp	/^UnicodeSet::applyIntPropertyValue(UProperty prop, int32_t value, UErrorCode& ec) {$/;"	f	class:UnicodeSet	signature:(UProperty prop, int32_t value, UErrorCode& ec)
UnicodeSet::applyPattern	unicode/uniset.h	/^    UnicodeSet& applyPattern(const UnicodeString& pattern,$/;"	p	class:UnicodeSet	access:public	signature:(const UnicodeString& pattern, ParsePosition& pos, uint32_t options, const SymbolTable* symbols, UErrorCode& status)
UnicodeSet::applyPattern	unicode/uniset.h	/^    UnicodeSet& applyPattern(const UnicodeString& pattern,$/;"	p	class:UnicodeSet	access:public	signature:(const UnicodeString& pattern, UErrorCode& status)
UnicodeSet::applyPattern	unicode/uniset.h	/^    UnicodeSet& applyPattern(const UnicodeString& pattern,$/;"	p	class:UnicodeSet	access:public	signature:(const UnicodeString& pattern, uint32_t options, const SymbolTable* symbols, UErrorCode& status)
UnicodeSet::applyPattern	unicode/uniset.h	/^    void applyPattern(RuleCharacterIterator& chars,$/;"	p	class:UnicodeSet	access:private	signature:(RuleCharacterIterator& chars, const SymbolTable* symbols, UnicodeString& rebuiltPat, uint32_t options, UErrorCode& ec)
UnicodeSet::applyPattern	uniset_props.cpp	/^UnicodeSet& UnicodeSet::applyPattern(const UnicodeString& pattern,$/;"	f	class:UnicodeSet	signature:(const UnicodeString& pattern, ParsePosition& pos, uint32_t options, const SymbolTable* symbols, UErrorCode& status)
UnicodeSet::applyPattern	uniset_props.cpp	/^UnicodeSet& UnicodeSet::applyPattern(const UnicodeString& pattern,$/;"	f	class:UnicodeSet	signature:(const UnicodeString& pattern, UErrorCode& status)
UnicodeSet::applyPattern	uniset_props.cpp	/^UnicodeSet& UnicodeSet::applyPattern(const UnicodeString& pattern,$/;"	f	class:UnicodeSet	signature:(const UnicodeString& pattern, uint32_t options, const SymbolTable* symbols, UErrorCode& status)
UnicodeSet::applyPattern	uniset_props.cpp	/^void UnicodeSet::applyPattern(RuleCharacterIterator& chars,$/;"	f	class:UnicodeSet	signature:(RuleCharacterIterator& chars, const SymbolTable* symbols, UnicodeString& rebuiltPat, uint32_t options, UErrorCode& ec)
UnicodeSet::applyPropertyAlias	unicode/uniset.h	/^    UnicodeSet& applyPropertyAlias(const UnicodeString& prop,$/;"	p	class:UnicodeSet	access:public	signature:(const UnicodeString& prop, const UnicodeString& value, UErrorCode& ec)
UnicodeSet::applyPropertyAlias	uniset_props.cpp	/^UnicodeSet::applyPropertyAlias(const UnicodeString& prop,$/;"	f	class:UnicodeSet	signature:(const UnicodeString& prop, const UnicodeString& value, UErrorCode& ec)
UnicodeSet::applyPropertyPattern	unicode/uniset.h	/^    UnicodeSet& applyPropertyPattern(const UnicodeString& pattern,$/;"	p	class:UnicodeSet	access:private	signature:(const UnicodeString& pattern, ParsePosition& ppos, UErrorCode &ec)
UnicodeSet::applyPropertyPattern	unicode/uniset.h	/^    void applyPropertyPattern(RuleCharacterIterator& chars,$/;"	p	class:UnicodeSet	access:private	signature:(RuleCharacterIterator& chars, UnicodeString& rebuiltPat, UErrorCode& ec)
UnicodeSet::applyPropertyPattern	uniset_props.cpp	/^UnicodeSet& UnicodeSet::applyPropertyPattern(const UnicodeString& pattern,$/;"	f	class:UnicodeSet	signature:(const UnicodeString& pattern, ParsePosition& ppos, UErrorCode &ec)
UnicodeSet::applyPropertyPattern	uniset_props.cpp	/^void UnicodeSet::applyPropertyPattern(RuleCharacterIterator& chars,$/;"	f	class:UnicodeSet	signature:(RuleCharacterIterator& chars, UnicodeString& rebuiltPat, UErrorCode& ec)
UnicodeSet::bmpSet	unicode/uniset.h	/^    BMPSet *bmpSet; \/\/ The set is frozen iff either bmpSet or stringSpan is not NULL.$/;"	m	class:UnicodeSet	access:private
UnicodeSet::buffer	unicode/uniset.h	/^    UChar32* buffer; \/\/ internal buffer, may be NULL$/;"	m	class:UnicodeSet	access:private
UnicodeSet::bufferCapacity	unicode/uniset.h	/^    int32_t bufferCapacity; \/\/ capacity of buffer$/;"	m	class:UnicodeSet	access:private
UnicodeSet::capacity	unicode/uniset.h	/^    int32_t capacity; \/\/ capacity of list$/;"	m	class:UnicodeSet	access:private
UnicodeSet::charAt	unicode/uniset.h	/^    UChar32 charAt(int32_t index) const;$/;"	p	class:UnicodeSet	access:public	signature:(int32_t index) const
UnicodeSet::charAt	uniset.cpp	/^UChar32 UnicodeSet::charAt(int32_t index) const {$/;"	f	class:UnicodeSet	signature:(int32_t index) const
UnicodeSet::clear	unicode/uniset.h	/^    virtual UnicodeSet& clear(void);$/;"	p	class:UnicodeSet	access:public	signature:(void)
UnicodeSet::clear	uniset.cpp	/^UnicodeSet& UnicodeSet::clear(void) {$/;"	f	class:UnicodeSet	signature:(void)
UnicodeSet::clone	unicode/uniset.h	/^    virtual UnicodeFunctor* clone() const;$/;"	p	class:UnicodeSet	access:public	signature:() const
UnicodeSet::clone	uniset.cpp	/^UnicodeFunctor* UnicodeSet::clone() const {$/;"	f	class:UnicodeSet	signature:() const
UnicodeSet::cloneAsThawed	unicode/uniset.h	/^    UnicodeFunctor *cloneAsThawed() const;$/;"	p	class:UnicodeSet	access:public	signature:() const
UnicodeSet::cloneAsThawed	uniset.cpp	/^UnicodeFunctor *UnicodeSet::cloneAsThawed() const {$/;"	f	class:UnicodeSet	signature:() const
UnicodeSet::closeOver	unicode/uniset.h	/^    UnicodeSet& closeOver(int32_t attribute);$/;"	p	class:UnicodeSet	access:public	signature:(int32_t attribute)
UnicodeSet::closeOver	uniset_props.cpp	/^UnicodeSet& UnicodeSet::closeOver(int32_t attribute) {$/;"	f	class:UnicodeSet	signature:(int32_t attribute)
UnicodeSet::compact	unicode/uniset.h	/^    virtual UnicodeSet& compact();$/;"	p	class:UnicodeSet	access:public	signature:()
UnicodeSet::compact	uniset.cpp	/^UnicodeSet& UnicodeSet::compact() {$/;"	f	class:UnicodeSet	signature:()
UnicodeSet::complement	unicode/uniset.h	/^    UnicodeSet& complement(UChar32 c);$/;"	p	class:UnicodeSet	access:public	signature:(UChar32 c)
UnicodeSet::complement	unicode/uniset.h	/^    UnicodeSet& complement(const UnicodeString& s);$/;"	p	class:UnicodeSet	access:public	signature:(const UnicodeString& s)
UnicodeSet::complement	unicode/uniset.h	/^    virtual UnicodeSet& complement(UChar32 start, UChar32 end);$/;"	p	class:UnicodeSet	access:public	signature:(UChar32 start, UChar32 end)
UnicodeSet::complement	unicode/uniset.h	/^    virtual UnicodeSet& complement(void);$/;"	p	class:UnicodeSet	access:public	signature:(void)
UnicodeSet::complement	uniset.cpp	/^UnicodeSet& UnicodeSet::complement(UChar32 c) {$/;"	f	class:UnicodeSet	signature:(UChar32 c)
UnicodeSet::complement	uniset.cpp	/^UnicodeSet& UnicodeSet::complement(UChar32 start, UChar32 end) {$/;"	f	class:UnicodeSet	signature:(UChar32 start, UChar32 end)
UnicodeSet::complement	uniset.cpp	/^UnicodeSet& UnicodeSet::complement(const UnicodeString& s) {$/;"	f	class:UnicodeSet	signature:(const UnicodeString& s)
UnicodeSet::complement	uniset.cpp	/^UnicodeSet& UnicodeSet::complement(void) {$/;"	f	class:UnicodeSet	signature:(void)
UnicodeSet::complementAll	unicode/uniset.h	/^    UnicodeSet& complementAll(const UnicodeString& s);$/;"	p	class:UnicodeSet	access:public	signature:(const UnicodeString& s)
UnicodeSet::complementAll	unicode/uniset.h	/^    virtual UnicodeSet& complementAll(const UnicodeSet& c);$/;"	p	class:UnicodeSet	access:public	signature:(const UnicodeSet& c)
UnicodeSet::complementAll	uniset.cpp	/^UnicodeSet& UnicodeSet::complementAll(const UnicodeSet& c) {$/;"	f	class:UnicodeSet	signature:(const UnicodeSet& c)
UnicodeSet::complementAll	uniset.cpp	/^UnicodeSet& UnicodeSet::complementAll(const UnicodeString& s) {$/;"	f	class:UnicodeSet	signature:(const UnicodeString& s)
UnicodeSet::contains	unicode/uniset.h	/^    UBool contains(const UnicodeString& s) const;$/;"	p	class:UnicodeSet	access:public	signature:(const UnicodeString& s) const
UnicodeSet::contains	unicode/uniset.h	/^    virtual UBool contains(UChar32 c) const;$/;"	p	class:UnicodeSet	access:public	signature:(UChar32 c) const
UnicodeSet::contains	unicode/uniset.h	/^    virtual UBool contains(UChar32 start, UChar32 end) const;$/;"	p	class:UnicodeSet	access:public	signature:(UChar32 start, UChar32 end) const
UnicodeSet::contains	uniset.cpp	/^UBool UnicodeSet::contains(UChar32 c) const {$/;"	f	class:UnicodeSet	signature:(UChar32 c) const
UnicodeSet::contains	uniset.cpp	/^UBool UnicodeSet::contains(UChar32 start, UChar32 end) const {$/;"	f	class:UnicodeSet	signature:(UChar32 start, UChar32 end) const
UnicodeSet::contains	uniset.cpp	/^UBool UnicodeSet::contains(const UnicodeString& s) const {$/;"	f	class:UnicodeSet	signature:(const UnicodeString& s) const
UnicodeSet::containsAll	unicode/uniset.h	/^    UBool containsAll(const UnicodeString& s) const;$/;"	p	class:UnicodeSet	access:public	signature:(const UnicodeString& s) const
UnicodeSet::containsAll	unicode/uniset.h	/^    virtual UBool containsAll(const UnicodeSet& c) const;$/;"	p	class:UnicodeSet	access:public	signature:(const UnicodeSet& c) const
UnicodeSet::containsAll	uniset.cpp	/^UBool UnicodeSet::containsAll(const UnicodeSet& c) const {$/;"	f	class:UnicodeSet	signature:(const UnicodeSet& c) const
UnicodeSet::containsAll	uniset.cpp	/^UBool UnicodeSet::containsAll(const UnicodeString& s) const {$/;"	f	class:UnicodeSet	signature:(const UnicodeString& s) const
UnicodeSet::containsNone	unicode/uniset.h	/^    UBool containsNone(UChar32 start, UChar32 end) const;$/;"	p	class:UnicodeSet	access:public	signature:(UChar32 start, UChar32 end) const
UnicodeSet::containsNone	unicode/uniset.h	/^    UBool containsNone(const UnicodeSet& c) const;$/;"	p	class:UnicodeSet	access:public	signature:(const UnicodeSet& c) const
UnicodeSet::containsNone	unicode/uniset.h	/^    UBool containsNone(const UnicodeString& s) const;$/;"	p	class:UnicodeSet	access:public	signature:(const UnicodeString& s) const
UnicodeSet::containsNone	uniset.cpp	/^UBool UnicodeSet::containsNone(UChar32 start, UChar32 end) const {$/;"	f	class:UnicodeSet	signature:(UChar32 start, UChar32 end) const
UnicodeSet::containsNone	uniset.cpp	/^UBool UnicodeSet::containsNone(const UnicodeSet& c) const {$/;"	f	class:UnicodeSet	signature:(const UnicodeSet& c) const
UnicodeSet::containsNone	uniset.cpp	/^UBool UnicodeSet::containsNone(const UnicodeString& s) const {$/;"	f	class:UnicodeSet	signature:(const UnicodeString& s) const
UnicodeSet::containsSome	unicode/uniset.h	/^    inline UBool containsSome(UChar32 start, UChar32 end) const;$/;"	p	class:UnicodeSet	access:public	signature:(UChar32 start, UChar32 end) const
UnicodeSet::containsSome	unicode/uniset.h	/^    inline UBool containsSome(const UnicodeSet& s) const;$/;"	p	class:UnicodeSet	access:public	signature:(const UnicodeSet& s) const
UnicodeSet::containsSome	unicode/uniset.h	/^    inline UBool containsSome(const UnicodeString& s) const;$/;"	p	class:UnicodeSet	access:public	signature:(const UnicodeString& s) const
UnicodeSet::containsSome	unicode/uniset.h	/^inline UBool UnicodeSet::containsSome(UChar32 start, UChar32 end) const {$/;"	f	class:UnicodeSet	signature:(UChar32 start, UChar32 end) const
UnicodeSet::containsSome	unicode/uniset.h	/^inline UBool UnicodeSet::containsSome(const UnicodeSet& s) const {$/;"	f	class:UnicodeSet	signature:(const UnicodeSet& s) const
UnicodeSet::containsSome	unicode/uniset.h	/^inline UBool UnicodeSet::containsSome(const UnicodeString& s) const {$/;"	f	class:UnicodeSet	signature:(const UnicodeString& s) const
UnicodeSet::createFrom	unicode/uniset.h	/^    static UnicodeSet* U_EXPORT2 createFrom(const UnicodeString& s);$/;"	p	class:UnicodeSet	access:public	signature:(const UnicodeString& s)
UnicodeSet::createFrom	uniset.cpp	/^UnicodeSet* U_EXPORT2 UnicodeSet::createFrom(const UnicodeString& s) {$/;"	f	class:UnicodeSet	signature:(const UnicodeString& s)
UnicodeSet::createFromAll	unicode/uniset.h	/^    static UnicodeSet* U_EXPORT2 createFromAll(const UnicodeString& s);$/;"	p	class:UnicodeSet	access:public	signature:(const UnicodeString& s)
UnicodeSet::createFromAll	uniset.cpp	/^UnicodeSet* U_EXPORT2 UnicodeSet::createFromAll(const UnicodeString& s) {$/;"	f	class:UnicodeSet	signature:(const UnicodeString& s)
UnicodeSet::ensureBufferCapacity	unicode/uniset.h	/^    void ensureBufferCapacity(int32_t newLen, UErrorCode& ec);$/;"	p	class:UnicodeSet	access:private	signature:(int32_t newLen, UErrorCode& ec)
UnicodeSet::ensureBufferCapacity	uniset.cpp	/^void UnicodeSet::ensureBufferCapacity(int32_t newLen, UErrorCode& ec) {$/;"	f	class:UnicodeSet	signature:(int32_t newLen, UErrorCode& ec)
UnicodeSet::ensureCapacity	unicode/uniset.h	/^    void ensureCapacity(int32_t newLen, UErrorCode& ec);$/;"	p	class:UnicodeSet	access:private	signature:(int32_t newLen, UErrorCode& ec)
UnicodeSet::ensureCapacity	uniset.cpp	/^void UnicodeSet::ensureCapacity(int32_t newLen, UErrorCode& ec) {$/;"	f	class:UnicodeSet	signature:(int32_t newLen, UErrorCode& ec)
UnicodeSet::exclusiveOr	unicode/uniset.h	/^    void exclusiveOr(const UChar32* other, int32_t otherLen, int8_t polarity);$/;"	p	class:UnicodeSet	access:private	signature:(const UChar32* other, int32_t otherLen, int8_t polarity)
UnicodeSet::exclusiveOr	uniset.cpp	/^void UnicodeSet::exclusiveOr(const UChar32* other, int32_t otherLen, int8_t polarity) {$/;"	f	class:UnicodeSet	signature:(const UChar32* other, int32_t otherLen, int8_t polarity)
UnicodeSet::fFlags	unicode/uniset.h	/^    uint8_t fFlags;         \/\/ Bit flag (see constants above)$/;"	m	class:UnicodeSet	access:private
UnicodeSet::findCodePoint	unicode/uniset.h	/^    int32_t findCodePoint(UChar32 c) const;$/;"	p	class:UnicodeSet	access:private	signature:(UChar32 c) const
UnicodeSet::findCodePoint	uniset.cpp	/^int32_t UnicodeSet::findCodePoint(UChar32 c) const {$/;"	f	class:UnicodeSet	signature:(UChar32 c) const
UnicodeSet::freeze	unicode/uniset.h	/^    UnicodeFunctor *freeze();$/;"	p	class:UnicodeSet	access:public	signature:()
UnicodeSet::freeze	uniset.cpp	/^UnicodeFunctor *UnicodeSet::freeze() {$/;"	f	class:UnicodeSet	signature:()
UnicodeSet::fromUSet	unicode/uniset.h	/^    inline static UnicodeSet *fromUSet(USet *uset);$/;"	p	class:UnicodeSet	access:public	signature:(USet *uset)
UnicodeSet::fromUSet	unicode/uniset.h	/^    inline static const UnicodeSet *fromUSet(const USet *uset);$/;"	p	class:UnicodeSet	access:public	signature:(const USet *uset)
UnicodeSet::fromUSet	unicode/uniset.h	/^inline UnicodeSet *UnicodeSet::fromUSet(USet *uset) {$/;"	f	class:UnicodeSet	signature:(USet *uset)
UnicodeSet::fromUSet	unicode/uniset.h	/^inline const UnicodeSet *UnicodeSet::fromUSet(const USet *uset) {$/;"	f	class:UnicodeSet	signature:(const USet *uset)
UnicodeSet::getDynamicClassID	unicode/uniset.h	/^    virtual UClassID getDynamicClassID(void) const;$/;"	p	class:UnicodeSet	access:public	signature:(void) const
UnicodeSet::getInclusions	unicode/uniset.h	/^    static const UnicodeSet* getInclusions(int32_t src, UErrorCode &status);$/;"	p	class:UnicodeSet	access:private	signature:(int32_t src, UErrorCode &status)
UnicodeSet::getInclusions	uniset_props.cpp	/^const UnicodeSet* UnicodeSet::getInclusions(int32_t src, UErrorCode &status) {$/;"	f	class:UnicodeSet	signature:(int32_t src, UErrorCode &status)
UnicodeSet::getRangeCount	unicode/uniset.h	/^    virtual int32_t getRangeCount(void) const;$/;"	p	class:UnicodeSet	access:public	signature:(void) const
UnicodeSet::getRangeCount	uniset.cpp	/^int32_t UnicodeSet::getRangeCount() const {$/;"	f	class:UnicodeSet	signature:() const
UnicodeSet::getRangeEnd	unicode/uniset.h	/^    virtual UChar32 getRangeEnd(int32_t index) const;$/;"	p	class:UnicodeSet	access:public	signature:(int32_t index) const
UnicodeSet::getRangeEnd	uniset.cpp	/^UChar32 UnicodeSet::getRangeEnd(int32_t index) const {$/;"	f	class:UnicodeSet	signature:(int32_t index) const
UnicodeSet::getRangeStart	unicode/uniset.h	/^    virtual UChar32 getRangeStart(int32_t index) const;$/;"	p	class:UnicodeSet	access:public	signature:(int32_t index) const
UnicodeSet::getRangeStart	uniset.cpp	/^UChar32 UnicodeSet::getRangeStart(int32_t index) const {$/;"	f	class:UnicodeSet	signature:(int32_t index) const
UnicodeSet::getSingleCP	unicode/uniset.h	/^    static int32_t getSingleCP(const UnicodeString& s);$/;"	p	class:UnicodeSet	access:private	signature:(const UnicodeString& s)
UnicodeSet::getSingleCP	uniset.cpp	/^int32_t UnicodeSet::getSingleCP(const UnicodeString& s) {$/;"	f	class:UnicodeSet	signature:(const UnicodeString& s)
UnicodeSet::getStaticClassID	unicode/uniset.h	/^    static UClassID U_EXPORT2 getStaticClassID(void);$/;"	p	class:UnicodeSet	access:public	signature:(void)
UnicodeSet::getString	unicode/uniset.h	/^    const UnicodeString* getString(int32_t index) const;$/;"	p	class:UnicodeSet	access:private	signature:(int32_t index) const
UnicodeSet::getString	uniset.cpp	/^const UnicodeString* UnicodeSet::getString(int32_t index) const {$/;"	f	class:UnicodeSet	signature:(int32_t index) const
UnicodeSet::getStringCount	unicode/uniset.h	/^    int32_t getStringCount() const;$/;"	p	class:UnicodeSet	access:private	signature:() const
UnicodeSet::getStringCount	uniset.cpp	/^int32_t UnicodeSet::getStringCount() const {$/;"	f	class:UnicodeSet	signature:() const
UnicodeSet::hashCode	unicode/uniset.h	/^    virtual int32_t hashCode(void) const;$/;"	p	class:UnicodeSet	access:public	signature:(void) const
UnicodeSet::hashCode	uniset.cpp	/^int32_t UnicodeSet::hashCode(void) const {$/;"	f	class:UnicodeSet	signature:(void) const
UnicodeSet::indexOf	unicode/uniset.h	/^    int32_t indexOf(UChar32 c) const;$/;"	p	class:UnicodeSet	access:public	signature:(UChar32 c) const
UnicodeSet::indexOf	uniset.cpp	/^int32_t UnicodeSet::indexOf(UChar32 c) const {$/;"	f	class:UnicodeSet	signature:(UChar32 c) const
UnicodeSet::isBogus	unicode/uniset.h	/^    inline UBool isBogus(void) const;$/;"	p	class:UnicodeSet	access:public	signature:(void) const
UnicodeSet::isBogus	unicode/uniset.h	/^inline UBool UnicodeSet::isBogus() const {$/;"	f	class:UnicodeSet	signature:() const
UnicodeSet::isEmpty	unicode/uniset.h	/^    virtual UBool isEmpty(void) const;$/;"	p	class:UnicodeSet	access:public	signature:(void) const
UnicodeSet::isEmpty	uniset.cpp	/^UBool UnicodeSet::isEmpty(void) const {$/;"	f	class:UnicodeSet	signature:(void) const
UnicodeSet::isFrozen	unicode/uniset.h	/^    inline UBool isFrozen() const;$/;"	p	class:UnicodeSet	access:public	signature:() const
UnicodeSet::isFrozen	unicode/uniset.h	/^inline UBool UnicodeSet::isFrozen() const {$/;"	f	class:UnicodeSet	signature:() const
UnicodeSet::kIsBogus	unicode/uniset.h	/^        kIsBogus = 1       \/\/ This set is bogus (i.e. not valid)$/;"	e	enum:UnicodeSet::__anon98
UnicodeSet::len	unicode/uniset.h	/^    int32_t len; \/\/ length of list used; 0 <= len <= capacity$/;"	m	class:UnicodeSet	access:private
UnicodeSet::list	unicode/uniset.h	/^    UChar32* list; \/\/ MUST be terminated with HIGH$/;"	m	class:UnicodeSet	access:private
UnicodeSet::matchRest	unicode/uniset.h	/^    static int32_t matchRest(const Replaceable& text,$/;"	p	class:UnicodeSet	access:private	signature:(const Replaceable& text, int32_t start, int32_t limit, const UnicodeString& s)
UnicodeSet::matchRest	uniset.cpp	/^int32_t UnicodeSet::matchRest(const Replaceable& text,$/;"	f	class:UnicodeSet	signature:(const Replaceable& text, int32_t start, int32_t limit, const UnicodeString& s)
UnicodeSet::matches	unicode/uniset.h	/^    virtual UMatchDegree matches(const Replaceable& text,$/;"	p	class:UnicodeSet	access:public	signature:(const Replaceable& text, int32_t& offset, int32_t limit, UBool incremental)
UnicodeSet::matches	uniset.cpp	/^UMatchDegree UnicodeSet::matches(const Replaceable& text,$/;"	f	class:UnicodeSet	signature:(const Replaceable& text, int32_t& offset, int32_t limit, UBool incremental)
UnicodeSet::matchesIndexValue	unicode/uniset.h	/^    virtual UBool matchesIndexValue(uint8_t v) const;$/;"	p	class:UnicodeSet	access:private	signature:(uint8_t v) const
UnicodeSet::matchesIndexValue	uniset.cpp	/^UBool UnicodeSet::matchesIndexValue(uint8_t v) const {$/;"	f	class:UnicodeSet	signature:(uint8_t v) const
UnicodeSet::operator !=	unicode/uniset.h	/^    UBool operator!=(const UnicodeSet& o) const;$/;"	p	class:UnicodeSet	access:public	signature:(const UnicodeSet& o) const
UnicodeSet::operator !=	unicode/uniset.h	/^inline UBool UnicodeSet::operator!=(const UnicodeSet& o) const {$/;"	f	class:UnicodeSet	signature:(const UnicodeSet& o) const
UnicodeSet::operator =	unicode/uniset.h	/^    UnicodeSet& operator=(const UnicodeSet& o);$/;"	p	class:UnicodeSet	access:public	signature:(const UnicodeSet& o)
UnicodeSet::operator =	uniset.cpp	/^UnicodeSet& UnicodeSet::operator=(const UnicodeSet& o) {$/;"	f	class:UnicodeSet	signature:(const UnicodeSet& o)
UnicodeSet::operator ==	unicode/uniset.h	/^    virtual UBool operator==(const UnicodeSet& o) const;$/;"	p	class:UnicodeSet	access:public	signature:(const UnicodeSet& o) const
UnicodeSet::operator ==	uniset.cpp	/^UBool UnicodeSet::operator==(const UnicodeSet& o) const {$/;"	f	class:UnicodeSet	signature:(const UnicodeSet& o) const
UnicodeSet::pat	unicode/uniset.h	/^    UChar *pat;$/;"	m	class:UnicodeSet	access:private
UnicodeSet::patLen	unicode/uniset.h	/^    int32_t patLen;$/;"	m	class:UnicodeSet	access:private
UnicodeSet::releasePattern	unicode/uniset.h	/^    void releasePattern();$/;"	p	class:UnicodeSet	access:private	signature:()
UnicodeSet::releasePattern	uniset.cpp	/^void UnicodeSet::releasePattern() {$/;"	f	class:UnicodeSet	signature:()
UnicodeSet::remove	unicode/uniset.h	/^    UnicodeSet& remove(UChar32 c);$/;"	p	class:UnicodeSet	access:public	signature:(UChar32 c)
UnicodeSet::remove	unicode/uniset.h	/^    UnicodeSet& remove(const UnicodeString& s);$/;"	p	class:UnicodeSet	access:public	signature:(const UnicodeString& s)
UnicodeSet::remove	unicode/uniset.h	/^    virtual UnicodeSet& remove(UChar32 start, UChar32 end);$/;"	p	class:UnicodeSet	access:public	signature:(UChar32 start, UChar32 end)
UnicodeSet::remove	uniset.cpp	/^UnicodeSet& UnicodeSet::remove(UChar32 c) {$/;"	f	class:UnicodeSet	signature:(UChar32 c)
UnicodeSet::remove	uniset.cpp	/^UnicodeSet& UnicodeSet::remove(UChar32 start, UChar32 end) {$/;"	f	class:UnicodeSet	signature:(UChar32 start, UChar32 end)
UnicodeSet::remove	uniset.cpp	/^UnicodeSet& UnicodeSet::remove(const UnicodeString& s) {$/;"	f	class:UnicodeSet	signature:(const UnicodeString& s)
UnicodeSet::removeAll	unicode/uniset.h	/^    UnicodeSet& removeAll(const UnicodeString& s);$/;"	p	class:UnicodeSet	access:public	signature:(const UnicodeString& s)
UnicodeSet::removeAll	unicode/uniset.h	/^    virtual UnicodeSet& removeAll(const UnicodeSet& c);$/;"	p	class:UnicodeSet	access:public	signature:(const UnicodeSet& c)
UnicodeSet::removeAll	uniset.cpp	/^UnicodeSet& UnicodeSet::removeAll(const UnicodeSet& c) {$/;"	f	class:UnicodeSet	signature:(const UnicodeSet& c)
UnicodeSet::removeAll	uniset.cpp	/^UnicodeSet& UnicodeSet::removeAll(const UnicodeString& s) {$/;"	f	class:UnicodeSet	signature:(const UnicodeString& s)
UnicodeSet::removeAllStrings	unicode/uniset.h	/^    virtual UnicodeSet &removeAllStrings();$/;"	p	class:UnicodeSet	access:public	signature:()
UnicodeSet::removeAllStrings	uniset.cpp	/^UnicodeSet& UnicodeSet::removeAllStrings() {$/;"	f	class:UnicodeSet	signature:()
UnicodeSet::resemblesPattern	unicode/uniset.h	/^    static UBool resemblesPattern(const UnicodeString& pattern,$/;"	p	class:UnicodeSet	access:public	signature:(const UnicodeString& pattern, int32_t pos)
UnicodeSet::resemblesPattern	uniset_props.cpp	/^UBool UnicodeSet::resemblesPattern(const UnicodeString& pattern, int32_t pos) {$/;"	f	class:UnicodeSet	signature:(const UnicodeString& pattern, int32_t pos)
UnicodeSet::resemblesPropertyPattern	unicode/uniset.h	/^    static UBool resemblesPropertyPattern(RuleCharacterIterator& chars,$/;"	p	class:UnicodeSet	access:private	signature:(RuleCharacterIterator& chars, int32_t iterOpts)
UnicodeSet::resemblesPropertyPattern	unicode/uniset.h	/^    static UBool resemblesPropertyPattern(const UnicodeString& pattern,$/;"	p	class:UnicodeSet	access:private	signature:(const UnicodeString& pattern, int32_t pos)
UnicodeSet::resemblesPropertyPattern	uniset_props.cpp	/^UBool UnicodeSet::resemblesPropertyPattern(RuleCharacterIterator& chars,$/;"	f	class:UnicodeSet	signature:(RuleCharacterIterator& chars, int32_t iterOpts)
UnicodeSet::resemblesPropertyPattern	uniset_props.cpp	/^UBool UnicodeSet::resemblesPropertyPattern(const UnicodeString& pattern,$/;"	f	class:UnicodeSet	signature:(const UnicodeString& pattern, int32_t pos)
UnicodeSet::retain	unicode/uniset.h	/^    UnicodeSet& retain(UChar32 c);$/;"	p	class:UnicodeSet	access:public	signature:(UChar32 c)
UnicodeSet::retain	unicode/uniset.h	/^    virtual UnicodeSet& retain(UChar32 start, UChar32 end);$/;"	p	class:UnicodeSet	access:public	signature:(UChar32 start, UChar32 end)
UnicodeSet::retain	unicode/uniset.h	/^    void retain(const UChar32* other, int32_t otherLen, int8_t polarity);$/;"	p	class:UnicodeSet	access:private	signature:(const UChar32* other, int32_t otherLen, int8_t polarity)
UnicodeSet::retain	uniset.cpp	/^UnicodeSet& UnicodeSet::retain(UChar32 c) {$/;"	f	class:UnicodeSet	signature:(UChar32 c)
UnicodeSet::retain	uniset.cpp	/^UnicodeSet& UnicodeSet::retain(UChar32 start, UChar32 end) {$/;"	f	class:UnicodeSet	signature:(UChar32 start, UChar32 end)
UnicodeSet::retain	uniset.cpp	/^void UnicodeSet::retain(const UChar32* other, int32_t otherLen, int8_t polarity) {$/;"	f	class:UnicodeSet	signature:(const UChar32* other, int32_t otherLen, int8_t polarity)
UnicodeSet::retainAll	unicode/uniset.h	/^    UnicodeSet& retainAll(const UnicodeString& s);$/;"	p	class:UnicodeSet	access:public	signature:(const UnicodeString& s)
UnicodeSet::retainAll	unicode/uniset.h	/^    virtual UnicodeSet& retainAll(const UnicodeSet& c);$/;"	p	class:UnicodeSet	access:public	signature:(const UnicodeSet& c)
UnicodeSet::retainAll	uniset.cpp	/^UnicodeSet& UnicodeSet::retainAll(const UnicodeSet& c) {$/;"	f	class:UnicodeSet	signature:(const UnicodeSet& c)
UnicodeSet::retainAll	uniset.cpp	/^UnicodeSet& UnicodeSet::retainAll(const UnicodeString& s) {$/;"	f	class:UnicodeSet	signature:(const UnicodeString& s)
UnicodeSet::serialize	unicode/uniset.h	/^    int32_t serialize(uint16_t *dest, int32_t destCapacity, UErrorCode& ec) const;$/;"	p	class:UnicodeSet	access:public	signature:(uint16_t *dest, int32_t destCapacity, UErrorCode& ec) const
UnicodeSet::serialize	uniset.cpp	/^int32_t UnicodeSet::serialize(uint16_t *dest, int32_t destCapacity, UErrorCode& ec) const {$/;"	f	class:UnicodeSet	signature:(uint16_t *dest, int32_t destCapacity, UErrorCode& ec) const
UnicodeSet::set	unicode/uniset.h	/^    UnicodeSet& set(UChar32 start, UChar32 end);$/;"	p	class:UnicodeSet	access:public	signature:(UChar32 start, UChar32 end)
UnicodeSet::set	uniset.cpp	/^UnicodeSet& UnicodeSet::set(UChar32 start, UChar32 end) {$/;"	f	class:UnicodeSet	signature:(UChar32 start, UChar32 end)
UnicodeSet::setPattern	unicode/uniset.h	/^    void setPattern(const UnicodeString& newPat);$/;"	p	class:UnicodeSet	access:private	signature:(const UnicodeString& newPat)
UnicodeSet::setPattern	uniset.cpp	/^void UnicodeSet::setPattern(const UnicodeString& newPat) {$/;"	f	class:UnicodeSet	signature:(const UnicodeString& newPat)
UnicodeSet::setToBogus	unicode/uniset.h	/^    void setToBogus();$/;"	p	class:UnicodeSet	access:public	signature:()
UnicodeSet::setToBogus	uniset.cpp	/^void UnicodeSet::setToBogus() {$/;"	f	class:UnicodeSet	signature:()
UnicodeSet::size	unicode/uniset.h	/^    virtual int32_t size(void) const;$/;"	p	class:UnicodeSet	access:public	signature:(void) const
UnicodeSet::size	uniset.cpp	/^int32_t UnicodeSet::size(void) const {$/;"	f	class:UnicodeSet	signature:(void) const
UnicodeSet::span	unicode/uniset.h	/^    inline int32_t span(const UnicodeString &s, int32_t start, USetSpanCondition spanCondition) const;$/;"	p	class:UnicodeSet	access:public	signature:(const UnicodeString &s, int32_t start, USetSpanCondition spanCondition) const
UnicodeSet::span	unicode/uniset.h	/^    int32_t span(const UChar *s, int32_t length, USetSpanCondition spanCondition) const;$/;"	p	class:UnicodeSet	access:public	signature:(const UChar *s, int32_t length, USetSpanCondition spanCondition) const
UnicodeSet::span	unicode/uniset.h	/^inline int32_t UnicodeSet::span(const UnicodeString &s, int32_t start, USetSpanCondition spanCondition) const {$/;"	f	class:UnicodeSet	signature:(const UnicodeString &s, int32_t start, USetSpanCondition spanCondition) const
UnicodeSet::span	uniset.cpp	/^int32_t UnicodeSet::span(const UChar *s, int32_t length, USetSpanCondition spanCondition) const {$/;"	f	class:UnicodeSet	signature:(const UChar *s, int32_t length, USetSpanCondition spanCondition) const
UnicodeSet::spanBack	unicode/uniset.h	/^    inline int32_t spanBack(const UnicodeString &s, int32_t limit, USetSpanCondition spanCondition) const;$/;"	p	class:UnicodeSet	access:public	signature:(const UnicodeString &s, int32_t limit, USetSpanCondition spanCondition) const
UnicodeSet::spanBack	unicode/uniset.h	/^    int32_t spanBack(const UChar *s, int32_t length, USetSpanCondition spanCondition) const;$/;"	p	class:UnicodeSet	access:public	signature:(const UChar *s, int32_t length, USetSpanCondition spanCondition) const
UnicodeSet::spanBack	unicode/uniset.h	/^inline int32_t UnicodeSet::spanBack(const UnicodeString &s, int32_t limit, USetSpanCondition spanCondition) const {$/;"	f	class:UnicodeSet	signature:(const UnicodeString &s, int32_t limit, USetSpanCondition spanCondition) const
UnicodeSet::spanBack	uniset.cpp	/^int32_t UnicodeSet::spanBack(const UChar *s, int32_t length, USetSpanCondition spanCondition) const {$/;"	f	class:UnicodeSet	signature:(const UChar *s, int32_t length, USetSpanCondition spanCondition) const
UnicodeSet::spanBackUTF8	unicode/uniset.h	/^    int32_t spanBackUTF8(const char *s, int32_t length, USetSpanCondition spanCondition) const;$/;"	p	class:UnicodeSet	access:public	signature:(const char *s, int32_t length, USetSpanCondition spanCondition) const
UnicodeSet::spanBackUTF8	uniset.cpp	/^int32_t UnicodeSet::spanBackUTF8(const char *s, int32_t length, USetSpanCondition spanCondition) const {$/;"	f	class:UnicodeSet	signature:(const char *s, int32_t length, USetSpanCondition spanCondition) const
UnicodeSet::spanUTF8	unicode/uniset.h	/^    int32_t spanUTF8(const char *s, int32_t length, USetSpanCondition spanCondition) const;$/;"	p	class:UnicodeSet	access:public	signature:(const char *s, int32_t length, USetSpanCondition spanCondition) const
UnicodeSet::spanUTF8	uniset.cpp	/^int32_t UnicodeSet::spanUTF8(const char *s, int32_t length, USetSpanCondition spanCondition) const {$/;"	f	class:UnicodeSet	signature:(const char *s, int32_t length, USetSpanCondition spanCondition) const
UnicodeSet::stringSpan	unicode/uniset.h	/^    UnicodeSetStringSpan *stringSpan;$/;"	m	class:UnicodeSet	access:private
UnicodeSet::strings	unicode/uniset.h	/^    UVector* strings; \/\/ maintained in sorted order$/;"	m	class:UnicodeSet	access:private
UnicodeSet::swapBuffers	unicode/uniset.h	/^    void swapBuffers(void);$/;"	p	class:UnicodeSet	access:private	signature:(void)
UnicodeSet::swapBuffers	uniset.cpp	/^void UnicodeSet::swapBuffers(void) {$/;"	f	class:UnicodeSet	signature:(void)
UnicodeSet::toPattern	unicode/uniset.h	/^    virtual UnicodeString& toPattern(UnicodeString& result,$/;"	p	class:UnicodeSet	access:public	signature:(UnicodeString& result, UBool escapeUnprintable = FALSE) const
UnicodeSet::toPattern	uniset.cpp	/^UnicodeString& UnicodeSet::toPattern(UnicodeString& result,$/;"	f	class:UnicodeSet	signature:(UnicodeString& result, UBool escapeUnprintable) const
UnicodeSet::toUSet	unicode/uniset.h	/^    inline USet *toUSet();$/;"	p	class:UnicodeSet	access:public	signature:()
UnicodeSet::toUSet	unicode/uniset.h	/^    inline const USet * toUSet() const;$/;"	p	class:UnicodeSet	access:public	signature:() const
UnicodeSet::toUSet	unicode/uniset.h	/^inline USet *UnicodeSet::toUSet() {$/;"	f	class:UnicodeSet	signature:()
UnicodeSet::toUSet	unicode/uniset.h	/^inline const USet *UnicodeSet::toUSet() const {$/;"	f	class:UnicodeSet	signature:() const
UnicodeSet::~UnicodeSet	unicode/uniset.h	/^    virtual ~UnicodeSet();$/;"	p	class:UnicodeSet	access:public	signature:()
UnicodeSet::~UnicodeSet	uniset.cpp	/^UnicodeSet::~UnicodeSet() {$/;"	f	class:UnicodeSet	signature:()
UnicodeSetIterator	unicode/uniset.h	/^    friend class UnicodeSetIterator;$/;"	x
UnicodeSetIterator	unicode/urename.h	2212;"	d
UnicodeSetIterator	unicode/usetiter.h	/^    UnicodeSetIterator();$/;"	p	class:UnicodeSetIterator	access:public	signature:()
UnicodeSetIterator	unicode/usetiter.h	/^    UnicodeSetIterator(const UnicodeSet& set);$/;"	p	class:UnicodeSetIterator	access:public	signature:(const UnicodeSet& set)
UnicodeSetIterator	unicode/usetiter.h	/^    UnicodeSetIterator(const UnicodeSetIterator&); \/\/ disallow$/;"	p	class:UnicodeSetIterator	access:protected	signature:(const UnicodeSetIterator&)
UnicodeSetIterator	unicode/usetiter.h	/^class U_COMMON_API UnicodeSetIterator : public UObject {$/;"	c	inherits:UObject
UnicodeSetIterator	usetiter.cpp	/^UnicodeSetIterator::UnicodeSetIterator() {$/;"	f	class:UnicodeSetIterator	signature:()
UnicodeSetIterator	usetiter.cpp	/^UnicodeSetIterator::UnicodeSetIterator(const UnicodeSet& uSet) {$/;"	f	class:UnicodeSetIterator	signature:(const UnicodeSet& uSet)
UnicodeSetIterator::IS_STRING	unicode/usetiter.h	/^    enum { IS_STRING = -1 };$/;"	e	enum:UnicodeSetIterator::__anon126
UnicodeSetIterator::UnicodeSetIterator	unicode/usetiter.h	/^    UnicodeSetIterator();$/;"	p	class:UnicodeSetIterator	access:public	signature:()
UnicodeSetIterator::UnicodeSetIterator	unicode/usetiter.h	/^    UnicodeSetIterator(const UnicodeSet& set);$/;"	p	class:UnicodeSetIterator	access:public	signature:(const UnicodeSet& set)
UnicodeSetIterator::UnicodeSetIterator	unicode/usetiter.h	/^    UnicodeSetIterator(const UnicodeSetIterator&); \/\/ disallow$/;"	p	class:UnicodeSetIterator	access:protected	signature:(const UnicodeSetIterator&)
UnicodeSetIterator::UnicodeSetIterator	usetiter.cpp	/^UnicodeSetIterator::UnicodeSetIterator() {$/;"	f	class:UnicodeSetIterator	signature:()
UnicodeSetIterator::UnicodeSetIterator	usetiter.cpp	/^UnicodeSetIterator::UnicodeSetIterator(const UnicodeSet& uSet) {$/;"	f	class:UnicodeSetIterator	signature:(const UnicodeSet& uSet)
UnicodeSetIterator::codepoint	unicode/usetiter.h	/^    UChar32 codepoint;$/;"	m	class:UnicodeSetIterator	access:protected
UnicodeSetIterator::codepointEnd	unicode/usetiter.h	/^    UChar32 codepointEnd;$/;"	m	class:UnicodeSetIterator	access:protected
UnicodeSetIterator::cpString	unicode/usetiter.h	/^    UnicodeString *cpString;$/;"	m	class:UnicodeSetIterator	access:protected
UnicodeSetIterator::endElement	unicode/usetiter.h	/^    int32_t endElement;$/;"	m	class:UnicodeSetIterator	access:protected
UnicodeSetIterator::endRange	unicode/usetiter.h	/^    int32_t endRange;$/;"	m	class:UnicodeSetIterator	access:protected
UnicodeSetIterator::getCodepoint	unicode/usetiter.h	/^    inline UChar32 getCodepoint() const;$/;"	p	class:UnicodeSetIterator	access:public	signature:() const
UnicodeSetIterator::getCodepoint	unicode/usetiter.h	/^inline UChar32 UnicodeSetIterator::getCodepoint() const {$/;"	f	class:UnicodeSetIterator	signature:() const
UnicodeSetIterator::getCodepointEnd	unicode/usetiter.h	/^    inline UChar32 getCodepointEnd() const;$/;"	p	class:UnicodeSetIterator	access:public	signature:() const
UnicodeSetIterator::getCodepointEnd	unicode/usetiter.h	/^inline UChar32 UnicodeSetIterator::getCodepointEnd() const {$/;"	f	class:UnicodeSetIterator	signature:() const
UnicodeSetIterator::getDynamicClassID	unicode/usetiter.h	/^    virtual UClassID getDynamicClassID() const;$/;"	p	class:UnicodeSetIterator	access:public	signature:() const
UnicodeSetIterator::getStaticClassID	unicode/usetiter.h	/^    static UClassID U_EXPORT2 getStaticClassID();$/;"	p	class:UnicodeSetIterator	access:public	signature:()
UnicodeSetIterator::getString	unicode/usetiter.h	/^    const UnicodeString& getString();$/;"	p	class:UnicodeSetIterator	access:public	signature:()
UnicodeSetIterator::getString	usetiter.cpp	/^const UnicodeString& UnicodeSetIterator::getString()  {$/;"	f	class:UnicodeSetIterator	signature:()
UnicodeSetIterator::isString	unicode/usetiter.h	/^    inline UBool isString() const;$/;"	p	class:UnicodeSetIterator	access:public	signature:() const
UnicodeSetIterator::isString	unicode/usetiter.h	/^inline UBool UnicodeSetIterator::isString() const {$/;"	f	class:UnicodeSetIterator	signature:() const
UnicodeSetIterator::loadRange	unicode/usetiter.h	/^    virtual void loadRange(int32_t range);$/;"	p	class:UnicodeSetIterator	access:protected	signature:(int32_t range)
UnicodeSetIterator::loadRange	usetiter.cpp	/^void UnicodeSetIterator::loadRange(int32_t iRange) {$/;"	f	class:UnicodeSetIterator	signature:(int32_t iRange)
UnicodeSetIterator::next	unicode/usetiter.h	/^    UBool next();$/;"	p	class:UnicodeSetIterator	access:public	signature:()
UnicodeSetIterator::next	usetiter.cpp	/^UBool UnicodeSetIterator::next() {$/;"	f	class:UnicodeSetIterator	signature:()
UnicodeSetIterator::nextElement	unicode/usetiter.h	/^    int32_t nextElement;$/;"	m	class:UnicodeSetIterator	access:protected
UnicodeSetIterator::nextRange	unicode/usetiter.h	/^    UBool nextRange();$/;"	p	class:UnicodeSetIterator	access:public	signature:()
UnicodeSetIterator::nextRange	usetiter.cpp	/^UBool UnicodeSetIterator::nextRange() {$/;"	f	class:UnicodeSetIterator	signature:()
UnicodeSetIterator::nextString	unicode/usetiter.h	/^    int32_t nextString;$/;"	m	class:UnicodeSetIterator	access:protected
UnicodeSetIterator::operator =	unicode/usetiter.h	/^    UnicodeSetIterator& operator=(const UnicodeSetIterator&); \/\/ disallow$/;"	p	class:UnicodeSetIterator	access:protected	signature:(const UnicodeSetIterator&)
UnicodeSetIterator::range	unicode/usetiter.h	/^    int32_t range;$/;"	m	class:UnicodeSetIterator	access:protected
UnicodeSetIterator::reset	unicode/usetiter.h	/^    void reset();$/;"	p	class:UnicodeSetIterator	access:public	signature:()
UnicodeSetIterator::reset	unicode/usetiter.h	/^    void reset(const UnicodeSet& set);$/;"	p	class:UnicodeSetIterator	access:public	signature:(const UnicodeSet& set)
UnicodeSetIterator::reset	usetiter.cpp	/^void UnicodeSetIterator::reset() {$/;"	f	class:UnicodeSetIterator	signature:()
UnicodeSetIterator::reset	usetiter.cpp	/^void UnicodeSetIterator::reset(const UnicodeSet& uSet) {$/;"	f	class:UnicodeSetIterator	signature:(const UnicodeSet& uSet)
UnicodeSetIterator::set	unicode/usetiter.h	/^    const UnicodeSet* set;$/;"	m	class:UnicodeSetIterator	access:protected
UnicodeSetIterator::string	unicode/usetiter.h	/^    const UnicodeString* string;$/;"	m	class:UnicodeSetIterator	access:protected
UnicodeSetIterator::stringCount	unicode/usetiter.h	/^    int32_t stringCount;$/;"	m	class:UnicodeSetIterator	access:protected
UnicodeSetIterator::~UnicodeSetIterator	unicode/usetiter.h	/^    virtual ~UnicodeSetIterator();$/;"	p	class:UnicodeSetIterator	access:public	signature:()
UnicodeSetIterator::~UnicodeSetIterator	usetiter.cpp	/^UnicodeSetIterator::~UnicodeSetIterator() {$/;"	f	class:UnicodeSetIterator	signature:()
UnicodeSetPointer	uniset_props.cpp	/^    inline UnicodeSetPointer() : p(0) {}$/;"	f	class:UnicodeSetPointer	access:public	signature:()
UnicodeSetPointer	uniset_props.cpp	/^class UnicodeSetPointer {$/;"	c	file:
UnicodeSetPointer::UnicodeSetPointer	uniset_props.cpp	/^    inline UnicodeSetPointer() : p(0) {}$/;"	f	class:UnicodeSetPointer	access:public	signature:()
UnicodeSetPointer::allocate	uniset_props.cpp	/^    inline UBool allocate() {$/;"	f	class:UnicodeSetPointer	access:public	signature:()
UnicodeSetPointer::p	uniset_props.cpp	/^    UnicodeSet* p;$/;"	m	class:UnicodeSetPointer	file:	access:private
UnicodeSetPointer::pointer	uniset_props.cpp	/^    inline UnicodeSet* pointer() { return p; }$/;"	f	class:UnicodeSetPointer	access:public	signature:()
UnicodeSetPointer::~UnicodeSetPointer	uniset_props.cpp	/^    inline ~UnicodeSetPointer() { delete p; }$/;"	f	class:UnicodeSetPointer	access:public	signature:()
UnicodeSetSingleton	uniset_props.cpp	/^    UnicodeSetSingleton(SimpleSingleton &s, const char *pattern) :$/;"	f	class:UnicodeSetSingleton	access:public	signature:(SimpleSingleton &s, const char *pattern)
UnicodeSetSingleton	uniset_props.cpp	/^class UnicodeSetSingleton : public SimpleSingletonWrapper<UnicodeSet> {$/;"	c	file:	inherits:SimpleSingletonWrapper
UnicodeSetSingleton::UnicodeSetSingleton	uniset_props.cpp	/^    UnicodeSetSingleton(SimpleSingleton &s, const char *pattern) :$/;"	f	class:UnicodeSetSingleton	access:public	signature:(SimpleSingleton &s, const char *pattern)
UnicodeSetSingleton::createInstance	uniset_props.cpp	/^    static void *createInstance(const void *context, UErrorCode &errorCode) {$/;"	f	class:UnicodeSetSingleton	file:	access:private	signature:(const void *context, UErrorCode &errorCode)
UnicodeSetSingleton::fPattern	uniset_props.cpp	/^    const char *fPattern;$/;"	m	class:UnicodeSetSingleton	file:	access:private
UnicodeSetSingleton::getInstance	uniset_props.cpp	/^    UnicodeSet *getInstance(UErrorCode &errorCode) {$/;"	f	class:UnicodeSetSingleton	access:public	signature:(UErrorCode &errorCode)
UnicodeSetStringSpan	unicode/uniset.h	/^class UnicodeSetStringSpan;$/;"	x
UnicodeSetStringSpan	unicode/urename.h	2213;"	d
UnicodeSetStringSpan	unisetspan.cpp	/^UnicodeSetStringSpan::UnicodeSetStringSpan(const UnicodeSet &set,$/;"	f	class:UnicodeSetStringSpan	signature:(const UnicodeSet &set, const UVector &setStrings, uint32_t which)
UnicodeSetStringSpan	unisetspan.cpp	/^UnicodeSetStringSpan::UnicodeSetStringSpan(const UnicodeSetStringSpan &otherStringSpan,$/;"	f	class:UnicodeSetStringSpan	signature:(const UnicodeSetStringSpan &otherStringSpan, const UVector &newParentSetStrings)
UnicodeSetStringSpan	unisetspan.h	/^    UnicodeSetStringSpan(const UnicodeSet &set, const UVector &setStrings, uint32_t which);$/;"	p	class:UnicodeSetStringSpan	access:public	signature:(const UnicodeSet &set, const UVector &setStrings, uint32_t which)
UnicodeSetStringSpan	unisetspan.h	/^    UnicodeSetStringSpan(const UnicodeSetStringSpan &otherStringSpan, const UVector &newParentSetStrings);$/;"	p	class:UnicodeSetStringSpan	access:public	signature:(const UnicodeSetStringSpan &otherStringSpan, const UVector &newParentSetStrings)
UnicodeSetStringSpan	unisetspan.h	/^class UnicodeSetStringSpan : public UMemory {$/;"	c	inherits:UMemory
UnicodeSetStringSpan::ALL	unisetspan.h	/^        ALL             = 0x3f,$/;"	e	enum:UnicodeSetStringSpan::__anon19
UnicodeSetStringSpan::ALL_CP_CONTAINED	unisetspan.h	/^        ALL_CP_CONTAINED=0xff$/;"	e	enum:UnicodeSetStringSpan::__anon20
UnicodeSetStringSpan::BACK	unisetspan.h	/^        BACK            = 0x10,$/;"	e	enum:UnicodeSetStringSpan::__anon19
UnicodeSetStringSpan::BACK_UTF16_CONTAINED	unisetspan.h	/^        BACK_UTF16_CONTAINED    = BACK | UTF16 |     CONTAINED,$/;"	e	enum:UnicodeSetStringSpan::__anon19
UnicodeSetStringSpan::BACK_UTF16_NOT_CONTAINED	unisetspan.h	/^        BACK_UTF16_NOT_CONTAINED= BACK | UTF16 | NOT_CONTAINED,$/;"	e	enum:UnicodeSetStringSpan::__anon19
UnicodeSetStringSpan::BACK_UTF8_CONTAINED	unisetspan.h	/^        BACK_UTF8_CONTAINED     = BACK | UTF8  |     CONTAINED,$/;"	e	enum:UnicodeSetStringSpan::__anon19
UnicodeSetStringSpan::BACK_UTF8_NOT_CONTAINED	unisetspan.h	/^        BACK_UTF8_NOT_CONTAINED = BACK | UTF8  | NOT_CONTAINED$/;"	e	enum:UnicodeSetStringSpan::__anon19
UnicodeSetStringSpan::CONTAINED	unisetspan.h	/^        CONTAINED       = 2,$/;"	e	enum:UnicodeSetStringSpan::__anon19
UnicodeSetStringSpan::FWD	unisetspan.h	/^        FWD             = 0x20,$/;"	e	enum:UnicodeSetStringSpan::__anon19
UnicodeSetStringSpan::FWD_UTF16_CONTAINED	unisetspan.h	/^        FWD_UTF16_CONTAINED     = FWD  | UTF16 |     CONTAINED,$/;"	e	enum:UnicodeSetStringSpan::__anon19
UnicodeSetStringSpan::FWD_UTF16_NOT_CONTAINED	unisetspan.h	/^        FWD_UTF16_NOT_CONTAINED = FWD  | UTF16 | NOT_CONTAINED,$/;"	e	enum:UnicodeSetStringSpan::__anon19
UnicodeSetStringSpan::FWD_UTF8_CONTAINED	unisetspan.h	/^        FWD_UTF8_CONTAINED      = FWD  | UTF8  |     CONTAINED,$/;"	e	enum:UnicodeSetStringSpan::__anon19
UnicodeSetStringSpan::FWD_UTF8_NOT_CONTAINED	unisetspan.h	/^        FWD_UTF8_NOT_CONTAINED  = FWD  | UTF8  | NOT_CONTAINED,$/;"	e	enum:UnicodeSetStringSpan::__anon19
UnicodeSetStringSpan::LONG_SPAN	unisetspan.h	/^        LONG_SPAN=0xfe,$/;"	e	enum:UnicodeSetStringSpan::__anon20
UnicodeSetStringSpan::NOT_CONTAINED	unisetspan.h	/^        NOT_CONTAINED   = 1,$/;"	e	enum:UnicodeSetStringSpan::__anon19
UnicodeSetStringSpan::UTF16	unisetspan.h	/^        UTF16           = 8,$/;"	e	enum:UnicodeSetStringSpan::__anon19
UnicodeSetStringSpan::UTF8	unisetspan.h	/^        UTF8            = 4,$/;"	e	enum:UnicodeSetStringSpan::__anon19
UnicodeSetStringSpan::UnicodeSetStringSpan	unisetspan.cpp	/^UnicodeSetStringSpan::UnicodeSetStringSpan(const UnicodeSet &set,$/;"	f	class:UnicodeSetStringSpan	signature:(const UnicodeSet &set, const UVector &setStrings, uint32_t which)
UnicodeSetStringSpan::UnicodeSetStringSpan	unisetspan.cpp	/^UnicodeSetStringSpan::UnicodeSetStringSpan(const UnicodeSetStringSpan &otherStringSpan,$/;"	f	class:UnicodeSetStringSpan	signature:(const UnicodeSetStringSpan &otherStringSpan, const UVector &newParentSetStrings)
UnicodeSetStringSpan::UnicodeSetStringSpan	unisetspan.h	/^    UnicodeSetStringSpan(const UnicodeSet &set, const UVector &setStrings, uint32_t which);$/;"	p	class:UnicodeSetStringSpan	access:public	signature:(const UnicodeSet &set, const UVector &setStrings, uint32_t which)
UnicodeSetStringSpan::UnicodeSetStringSpan	unisetspan.h	/^    UnicodeSetStringSpan(const UnicodeSetStringSpan &otherStringSpan, const UVector &newParentSetStrings);$/;"	p	class:UnicodeSetStringSpan	access:public	signature:(const UnicodeSetStringSpan &otherStringSpan, const UVector &newParentSetStrings)
UnicodeSetStringSpan::addToSpanNotSet	unisetspan.cpp	/^void UnicodeSetStringSpan::addToSpanNotSet(UChar32 c) {$/;"	f	class:UnicodeSetStringSpan	signature:(UChar32 c)
UnicodeSetStringSpan::addToSpanNotSet	unisetspan.h	/^    void addToSpanNotSet(UChar32 c);$/;"	p	class:UnicodeSetStringSpan	access:private	signature:(UChar32 c)
UnicodeSetStringSpan::all	unisetspan.h	/^    UBool all;$/;"	m	class:UnicodeSetStringSpan	access:private
UnicodeSetStringSpan::contains	unisetspan.h	/^    inline UBool contains(UChar32 c) const;$/;"	p	class:UnicodeSetStringSpan	access:public	signature:(UChar32 c) const
UnicodeSetStringSpan::contains	unisetspan.h	/^UBool UnicodeSetStringSpan::contains(UChar32 c) const {$/;"	f	class:UnicodeSetStringSpan	signature:(UChar32 c) const
UnicodeSetStringSpan::maxLength16	unisetspan.h	/^    int32_t maxLength16;$/;"	m	class:UnicodeSetStringSpan	access:private
UnicodeSetStringSpan::maxLength8	unisetspan.h	/^    int32_t maxLength8;$/;"	m	class:UnicodeSetStringSpan	access:private
UnicodeSetStringSpan::needsStringSpanUTF16	unisetspan.h	/^    inline UBool needsStringSpanUTF16();$/;"	p	class:UnicodeSetStringSpan	access:public	signature:()
UnicodeSetStringSpan::needsStringSpanUTF16	unisetspan.h	/^UBool UnicodeSetStringSpan::needsStringSpanUTF16() {$/;"	f	class:UnicodeSetStringSpan	signature:()
UnicodeSetStringSpan::needsStringSpanUTF8	unisetspan.h	/^    inline UBool needsStringSpanUTF8();$/;"	p	class:UnicodeSetStringSpan	access:public	signature:()
UnicodeSetStringSpan::needsStringSpanUTF8	unisetspan.h	/^UBool UnicodeSetStringSpan::needsStringSpanUTF8() {$/;"	f	class:UnicodeSetStringSpan	signature:()
UnicodeSetStringSpan::pSpanNotSet	unisetspan.h	/^    UnicodeSet *pSpanNotSet;$/;"	m	class:UnicodeSetStringSpan	access:private
UnicodeSetStringSpan::span	unisetspan.cpp	/^int32_t UnicodeSetStringSpan::span(const UChar *s, int32_t length, USetSpanCondition spanCondition) const {$/;"	f	class:UnicodeSetStringSpan	signature:(const UChar *s, int32_t length, USetSpanCondition spanCondition) const
UnicodeSetStringSpan::span	unisetspan.h	/^    int32_t span(const UChar *s, int32_t length, USetSpanCondition spanCondition) const;$/;"	p	class:UnicodeSetStringSpan	access:public	signature:(const UChar *s, int32_t length, USetSpanCondition spanCondition) const
UnicodeSetStringSpan::spanBack	unisetspan.cpp	/^int32_t UnicodeSetStringSpan::spanBack(const UChar *s, int32_t length, USetSpanCondition spanCondition) const {$/;"	f	class:UnicodeSetStringSpan	signature:(const UChar *s, int32_t length, USetSpanCondition spanCondition) const
UnicodeSetStringSpan::spanBack	unisetspan.h	/^    int32_t spanBack(const UChar *s, int32_t length, USetSpanCondition spanCondition) const;$/;"	p	class:UnicodeSetStringSpan	access:public	signature:(const UChar *s, int32_t length, USetSpanCondition spanCondition) const
UnicodeSetStringSpan::spanBackUTF8	unisetspan.cpp	/^int32_t UnicodeSetStringSpan::spanBackUTF8(const uint8_t *s, int32_t length, USetSpanCondition spanCondition) const {$/;"	f	class:UnicodeSetStringSpan	signature:(const uint8_t *s, int32_t length, USetSpanCondition spanCondition) const
UnicodeSetStringSpan::spanBackUTF8	unisetspan.h	/^    int32_t spanBackUTF8(const uint8_t *s, int32_t length, USetSpanCondition spanCondition) const;$/;"	p	class:UnicodeSetStringSpan	access:public	signature:(const uint8_t *s, int32_t length, USetSpanCondition spanCondition) const
UnicodeSetStringSpan::spanLengths	unisetspan.h	/^    uint8_t *spanLengths;$/;"	m	class:UnicodeSetStringSpan	access:private
UnicodeSetStringSpan::spanNot	unisetspan.cpp	/^int32_t UnicodeSetStringSpan::spanNot(const UChar *s, int32_t length) const {$/;"	f	class:UnicodeSetStringSpan	signature:(const UChar *s, int32_t length) const
UnicodeSetStringSpan::spanNot	unisetspan.h	/^    int32_t spanNot(const UChar *s, int32_t length) const;$/;"	p	class:UnicodeSetStringSpan	access:private	signature:(const UChar *s, int32_t length) const
UnicodeSetStringSpan::spanNotBack	unisetspan.cpp	/^int32_t UnicodeSetStringSpan::spanNotBack(const UChar *s, int32_t length) const {$/;"	f	class:UnicodeSetStringSpan	signature:(const UChar *s, int32_t length) const
UnicodeSetStringSpan::spanNotBack	unisetspan.h	/^    int32_t spanNotBack(const UChar *s, int32_t length) const;$/;"	p	class:UnicodeSetStringSpan	access:private	signature:(const UChar *s, int32_t length) const
UnicodeSetStringSpan::spanNotBackUTF8	unisetspan.cpp	/^int32_t UnicodeSetStringSpan::spanNotBackUTF8(const uint8_t *s, int32_t length) const {$/;"	f	class:UnicodeSetStringSpan	signature:(const uint8_t *s, int32_t length) const
UnicodeSetStringSpan::spanNotBackUTF8	unisetspan.h	/^    int32_t spanNotBackUTF8(const uint8_t *s, int32_t length) const;$/;"	p	class:UnicodeSetStringSpan	access:private	signature:(const uint8_t *s, int32_t length) const
UnicodeSetStringSpan::spanNotUTF8	unisetspan.cpp	/^int32_t UnicodeSetStringSpan::spanNotUTF8(const uint8_t *s, int32_t length) const {$/;"	f	class:UnicodeSetStringSpan	signature:(const uint8_t *s, int32_t length) const
UnicodeSetStringSpan::spanNotUTF8	unisetspan.h	/^    int32_t spanNotUTF8(const uint8_t *s, int32_t length) const;$/;"	p	class:UnicodeSetStringSpan	access:private	signature:(const uint8_t *s, int32_t length) const
UnicodeSetStringSpan::spanSet	unisetspan.h	/^    UnicodeSet spanSet;$/;"	m	class:UnicodeSetStringSpan	access:private
UnicodeSetStringSpan::spanUTF8	unisetspan.cpp	/^int32_t UnicodeSetStringSpan::spanUTF8(const uint8_t *s, int32_t length, USetSpanCondition spanCondition) const {$/;"	f	class:UnicodeSetStringSpan	signature:(const uint8_t *s, int32_t length, USetSpanCondition spanCondition) const
UnicodeSetStringSpan::spanUTF8	unisetspan.h	/^    int32_t spanUTF8(const uint8_t *s, int32_t length, USetSpanCondition spanCondition) const;$/;"	p	class:UnicodeSetStringSpan	access:public	signature:(const uint8_t *s, int32_t length, USetSpanCondition spanCondition) const
UnicodeSetStringSpan::staticLengths	unisetspan.h	/^    int32_t staticLengths[32];$/;"	m	class:UnicodeSetStringSpan	access:private
UnicodeSetStringSpan::strings	unisetspan.h	/^    const UVector &strings;$/;"	m	class:UnicodeSetStringSpan	access:private
UnicodeSetStringSpan::utf8	unisetspan.h	/^    uint8_t *utf8;$/;"	m	class:UnicodeSetStringSpan	access:private
UnicodeSetStringSpan::utf8Length	unisetspan.h	/^    int32_t utf8Length;$/;"	m	class:UnicodeSetStringSpan	access:private
UnicodeSetStringSpan::utf8Lengths	unisetspan.h	/^    int32_t *utf8Lengths;$/;"	m	class:UnicodeSetStringSpan	access:private
UnicodeSetStringSpan::~UnicodeSetStringSpan	unisetspan.cpp	/^UnicodeSetStringSpan::~UnicodeSetStringSpan() {$/;"	f	class:UnicodeSetStringSpan	signature:()
UnicodeSetStringSpan::~UnicodeSetStringSpan	unisetspan.h	/^    ~UnicodeSetStringSpan();$/;"	p	class:UnicodeSetStringSpan	access:public	signature:()
UnicodeString	ruleiter.h	/^class UnicodeString;$/;"	x
UnicodeString	unicode/rep.h	/^class UnicodeString;$/;"	x
UnicodeString	unicode/symtable.h	/^class UnicodeString;$/;"	x
UnicodeString	unicode/unimatch.h	/^class UnicodeString;$/;"	x
UnicodeString	unicode/unistr.h	/^  UnicodeString($/;"	p	class:UnicodeString	access:public	signature:( const char *src, int32_t srcLength, UConverter *cnv, UErrorCode &errorCode)
UnicodeString	unicode/unistr.h	/^  UnicodeString();$/;"	p	class:UnicodeString	access:public	signature:()
UnicodeString	unicode/unistr.h	/^  UnicodeString(UBool isTerminated,$/;"	p	class:UnicodeString	access:public	signature:(UBool isTerminated, const UChar *text, int32_t textLength)
UnicodeString	unicode/unistr.h	/^  UnicodeString(UChar *buffer, int32_t buffLength, int32_t buffCapacity);$/;"	p	class:UnicodeString	access:public	signature:(UChar *buffer, int32_t buffLength, int32_t buffCapacity)
UnicodeString	unicode/unistr.h	/^  UnicodeString(UChar ch);$/;"	p	class:UnicodeString	access:public	signature:(UChar ch)
UnicodeString	unicode/unistr.h	/^  UnicodeString(UChar32 ch);$/;"	p	class:UnicodeString	access:public	signature:(UChar32 ch)
UnicodeString	unicode/unistr.h	/^  UnicodeString(const UChar *text);$/;"	p	class:UnicodeString	access:public	signature:(const UChar *text)
UnicodeString	unicode/unistr.h	/^  UnicodeString(const UChar *text,$/;"	p	class:UnicodeString	access:public	signature:(const UChar *text, int32_t textLength)
UnicodeString	unicode/unistr.h	/^  UnicodeString(const UnicodeString& src, int32_t srcStart);$/;"	p	class:UnicodeString	access:public	signature:(const UnicodeString& src, int32_t srcStart)
UnicodeString	unicode/unistr.h	/^  UnicodeString(const UnicodeString& src, int32_t srcStart, int32_t srcLength);$/;"	p	class:UnicodeString	access:public	signature:(const UnicodeString& src, int32_t srcStart, int32_t srcLength)
UnicodeString	unicode/unistr.h	/^  UnicodeString(const UnicodeString& that);$/;"	p	class:UnicodeString	access:public	signature:(const UnicodeString& that)
UnicodeString	unicode/unistr.h	/^  UnicodeString(const char *codepageData);$/;"	p	class:UnicodeString	access:public	signature:(const char *codepageData)
UnicodeString	unicode/unistr.h	/^  UnicodeString(const char *codepageData, const char *codepage);$/;"	p	class:UnicodeString	access:public	signature:(const char *codepageData, const char *codepage)
UnicodeString	unicode/unistr.h	/^  UnicodeString(const char *codepageData, int32_t dataLength);$/;"	p	class:UnicodeString	access:public	signature:(const char *codepageData, int32_t dataLength)
UnicodeString	unicode/unistr.h	/^  UnicodeString(const char *codepageData, int32_t dataLength, const char *codepage);$/;"	p	class:UnicodeString	access:public	signature:(const char *codepageData, int32_t dataLength, const char *codepage)
UnicodeString	unicode/unistr.h	/^  UnicodeString(const char *src, int32_t length, enum EInvariant inv);$/;"	p	class:UnicodeString	access:public	signature:(const char *src, int32_t length, enum EInvariant inv)
UnicodeString	unicode/unistr.h	/^  UnicodeString(int32_t capacity, UChar32 c, int32_t count);$/;"	p	class:UnicodeString	access:public	signature:(int32_t capacity, UChar32 c, int32_t count)
UnicodeString	unicode/unistr.h	/^class U_COMMON_API UnicodeString : public Replaceable$/;"	c	inherits:Replaceable
UnicodeString	unicode/urename.h	2214;"	d
UnicodeString	unicode/usetiter.h	/^class UnicodeString;$/;"	x
UnicodeString	unistr.cpp	/^UnicodeString::UnicodeString()$/;"	f	class:UnicodeString	signature:()
UnicodeString	unistr.cpp	/^UnicodeString::UnicodeString(UBool isTerminated,$/;"	f	class:UnicodeString	signature:(UBool isTerminated, const UChar *text, int32_t textLength)
UnicodeString	unistr.cpp	/^UnicodeString::UnicodeString(UChar *buff,$/;"	f	class:UnicodeString	signature:(UChar *buff, int32_t buffLength, int32_t buffCapacity)
UnicodeString	unistr.cpp	/^UnicodeString::UnicodeString(UChar ch)$/;"	f	class:UnicodeString	signature:(UChar ch)
UnicodeString	unistr.cpp	/^UnicodeString::UnicodeString(UChar32 ch)$/;"	f	class:UnicodeString	signature:(UChar32 ch)
UnicodeString	unistr.cpp	/^UnicodeString::UnicodeString(const UChar *text)$/;"	f	class:UnicodeString	signature:(const UChar *text)
UnicodeString	unistr.cpp	/^UnicodeString::UnicodeString(const UChar *text,$/;"	f	class:UnicodeString	signature:(const UChar *text, int32_t textLength)
UnicodeString	unistr.cpp	/^UnicodeString::UnicodeString(const UnicodeString& that)$/;"	f	class:UnicodeString	signature:(const UnicodeString& that)
UnicodeString	unistr.cpp	/^UnicodeString::UnicodeString(const UnicodeString& that,$/;"	f	class:UnicodeString	signature:(const UnicodeString& that, int32_t srcStart)
UnicodeString	unistr.cpp	/^UnicodeString::UnicodeString(const UnicodeString& that,$/;"	f	class:UnicodeString	signature:(const UnicodeString& that, int32_t srcStart, int32_t srcLength)
UnicodeString	unistr.cpp	/^UnicodeString::UnicodeString(const char *codepageData)$/;"	f	class:UnicodeString	signature:(const char *codepageData)
UnicodeString	unistr.cpp	/^UnicodeString::UnicodeString(const char *codepageData, int32_t dataLength)$/;"	f	class:UnicodeString	signature:(const char *codepageData, int32_t dataLength)
UnicodeString	unistr.cpp	/^UnicodeString::UnicodeString(const char *src, int32_t length, EInvariant)$/;"	f	class:UnicodeString	signature:(const char *src, int32_t length, EInvariant)
UnicodeString	unistr.cpp	/^UnicodeString::UnicodeString(int32_t capacity, UChar32 c, int32_t count)$/;"	f	class:UnicodeString	signature:(int32_t capacity, UChar32 c, int32_t count)
UnicodeString	unistr_cnv.cpp	/^UnicodeString::UnicodeString(const char *codepageData)$/;"	f	class:UnicodeString	signature:(const char *codepageData)
UnicodeString	unistr_cnv.cpp	/^UnicodeString::UnicodeString(const char *codepageData,$/;"	f	class:UnicodeString	signature:(const char *codepageData, const char *codepage)
UnicodeString	unistr_cnv.cpp	/^UnicodeString::UnicodeString(const char *codepageData,$/;"	f	class:UnicodeString	signature:(const char *codepageData, int32_t dataLength)
UnicodeString	unistr_cnv.cpp	/^UnicodeString::UnicodeString(const char *codepageData,$/;"	f	class:UnicodeString	signature:(const char *codepageData, int32_t dataLength, const char *codepage)
UnicodeString	unistr_cnv.cpp	/^UnicodeString::UnicodeString(const char *src, int32_t srcLength,$/;"	f	class:UnicodeString	signature:(const char *src, int32_t srcLength, UConverter *cnv, UErrorCode &errorCode)
UnicodeString::EInvariant	unicode/unistr.h	/^  enum EInvariant {$/;"	g	class:UnicodeString	access:public
UnicodeString::StackBufferOrFields	unicode/unistr.h	/^  friend union StackBufferOrFields; \/\/ make US_STACKBUF_SIZE visible inside fUnion$/;"	x
UnicodeString::StackBufferOrFields	unicode/unistr.h	/^  union StackBufferOrFields {$/;"	u	class:UnicodeString	access:private
UnicodeString::StackBufferOrFields	unicode/unistr.h	/^  union StackBufferOrFields;        \/\/ forward declaration necessary before friend declaration$/;"	x
UnicodeString::StackBufferOrFields::__anon118::fArray	unicode/unistr.h	/^      UChar     *fArray;    \/\/ the Unicode data (aligned at 12B (32b pointers) or 16B (64b))$/;"	m	struct:UnicodeString::StackBufferOrFields::__anon118	access:public
UnicodeString::StackBufferOrFields::__anon118::fCapacity	unicode/unistr.h	/^      int32_t   fCapacity;  \/\/ sizeof fArray$/;"	m	struct:UnicodeString::StackBufferOrFields::__anon118	access:public
UnicodeString::StackBufferOrFields::__anon118::fLength	unicode/unistr.h	/^      int32_t   fLength;    \/\/ number of characters in fArray if >127; else undefined$/;"	m	struct:UnicodeString::StackBufferOrFields::__anon118	access:public
UnicodeString::StackBufferOrFields::__anon118::fPadding	unicode/unistr.h	/^      uint16_t  fPadding;   \/\/ align the following field at 8B (32b pointers) or 12B (64b)$/;"	m	struct:UnicodeString::StackBufferOrFields::__anon118	access:public
UnicodeString::StackBufferOrFields::fFields	unicode/unistr.h	/^    } fFields;$/;"	m	union:UnicodeString::StackBufferOrFields	typeref:struct:UnicodeString::StackBufferOrFields::__anon118	access:public
UnicodeString::StackBufferOrFields::fStackBuffer	unicode/unistr.h	/^    UChar     fStackBuffer [US_STACKBUF_SIZE]; \/\/ buffer for small strings$/;"	m	union:UnicodeString::StackBufferOrFields	access:public
UnicodeString::StringThreadTest	unicode/unistr.h	/^  friend class StringThreadTest;$/;"	x
UnicodeString::US_STACKBUF_SIZE	unicode/unistr.h	/^    US_STACKBUF_SIZE= sizeof(void *)==4 ? 13 : 15, \/\/ Size of stack buffer for small strings$/;"	e	enum:UnicodeString::__anon117
UnicodeString::UnicodeString	unicode/unistr.h	/^  UnicodeString($/;"	p	class:UnicodeString	access:public	signature:( const char *src, int32_t srcLength, UConverter *cnv, UErrorCode &errorCode)
UnicodeString::UnicodeString	unicode/unistr.h	/^  UnicodeString();$/;"	p	class:UnicodeString	access:public	signature:()
UnicodeString::UnicodeString	unicode/unistr.h	/^  UnicodeString(UBool isTerminated,$/;"	p	class:UnicodeString	access:public	signature:(UBool isTerminated, const UChar *text, int32_t textLength)
UnicodeString::UnicodeString	unicode/unistr.h	/^  UnicodeString(UChar *buffer, int32_t buffLength, int32_t buffCapacity);$/;"	p	class:UnicodeString	access:public	signature:(UChar *buffer, int32_t buffLength, int32_t buffCapacity)
UnicodeString::UnicodeString	unicode/unistr.h	/^  UnicodeString(UChar ch);$/;"	p	class:UnicodeString	access:public	signature:(UChar ch)
UnicodeString::UnicodeString	unicode/unistr.h	/^  UnicodeString(UChar32 ch);$/;"	p	class:UnicodeString	access:public	signature:(UChar32 ch)
UnicodeString::UnicodeString	unicode/unistr.h	/^  UnicodeString(const UChar *text);$/;"	p	class:UnicodeString	access:public	signature:(const UChar *text)
UnicodeString::UnicodeString	unicode/unistr.h	/^  UnicodeString(const UChar *text,$/;"	p	class:UnicodeString	access:public	signature:(const UChar *text, int32_t textLength)
UnicodeString::UnicodeString	unicode/unistr.h	/^  UnicodeString(const UnicodeString& src, int32_t srcStart);$/;"	p	class:UnicodeString	access:public	signature:(const UnicodeString& src, int32_t srcStart)
UnicodeString::UnicodeString	unicode/unistr.h	/^  UnicodeString(const UnicodeString& src, int32_t srcStart, int32_t srcLength);$/;"	p	class:UnicodeString	access:public	signature:(const UnicodeString& src, int32_t srcStart, int32_t srcLength)
UnicodeString::UnicodeString	unicode/unistr.h	/^  UnicodeString(const UnicodeString& that);$/;"	p	class:UnicodeString	access:public	signature:(const UnicodeString& that)
UnicodeString::UnicodeString	unicode/unistr.h	/^  UnicodeString(const char *codepageData);$/;"	p	class:UnicodeString	access:public	signature:(const char *codepageData)
UnicodeString::UnicodeString	unicode/unistr.h	/^  UnicodeString(const char *codepageData, const char *codepage);$/;"	p	class:UnicodeString	access:public	signature:(const char *codepageData, const char *codepage)
UnicodeString::UnicodeString	unicode/unistr.h	/^  UnicodeString(const char *codepageData, int32_t dataLength);$/;"	p	class:UnicodeString	access:public	signature:(const char *codepageData, int32_t dataLength)
UnicodeString::UnicodeString	unicode/unistr.h	/^  UnicodeString(const char *codepageData, int32_t dataLength, const char *codepage);$/;"	p	class:UnicodeString	access:public	signature:(const char *codepageData, int32_t dataLength, const char *codepage)
UnicodeString::UnicodeString	unicode/unistr.h	/^  UnicodeString(const char *src, int32_t length, enum EInvariant inv);$/;"	p	class:UnicodeString	access:public	signature:(const char *src, int32_t length, enum EInvariant inv)
UnicodeString::UnicodeString	unicode/unistr.h	/^  UnicodeString(int32_t capacity, UChar32 c, int32_t count);$/;"	p	class:UnicodeString	access:public	signature:(int32_t capacity, UChar32 c, int32_t count)
UnicodeString::UnicodeString	unistr.cpp	/^UnicodeString::UnicodeString()$/;"	f	class:UnicodeString	signature:()
UnicodeString::UnicodeString	unistr.cpp	/^UnicodeString::UnicodeString(UBool isTerminated,$/;"	f	class:UnicodeString	signature:(UBool isTerminated, const UChar *text, int32_t textLength)
UnicodeString::UnicodeString	unistr.cpp	/^UnicodeString::UnicodeString(UChar *buff,$/;"	f	class:UnicodeString	signature:(UChar *buff, int32_t buffLength, int32_t buffCapacity)
UnicodeString::UnicodeString	unistr.cpp	/^UnicodeString::UnicodeString(UChar ch)$/;"	f	class:UnicodeString	signature:(UChar ch)
UnicodeString::UnicodeString	unistr.cpp	/^UnicodeString::UnicodeString(UChar32 ch)$/;"	f	class:UnicodeString	signature:(UChar32 ch)
UnicodeString::UnicodeString	unistr.cpp	/^UnicodeString::UnicodeString(const UChar *text)$/;"	f	class:UnicodeString	signature:(const UChar *text)
UnicodeString::UnicodeString	unistr.cpp	/^UnicodeString::UnicodeString(const UChar *text,$/;"	f	class:UnicodeString	signature:(const UChar *text, int32_t textLength)
UnicodeString::UnicodeString	unistr.cpp	/^UnicodeString::UnicodeString(const UnicodeString& that)$/;"	f	class:UnicodeString	signature:(const UnicodeString& that)
UnicodeString::UnicodeString	unistr.cpp	/^UnicodeString::UnicodeString(const UnicodeString& that,$/;"	f	class:UnicodeString	signature:(const UnicodeString& that, int32_t srcStart)
UnicodeString::UnicodeString	unistr.cpp	/^UnicodeString::UnicodeString(const UnicodeString& that,$/;"	f	class:UnicodeString	signature:(const UnicodeString& that, int32_t srcStart, int32_t srcLength)
UnicodeString::UnicodeString	unistr.cpp	/^UnicodeString::UnicodeString(const char *codepageData)$/;"	f	class:UnicodeString	signature:(const char *codepageData)
UnicodeString::UnicodeString	unistr.cpp	/^UnicodeString::UnicodeString(const char *codepageData, int32_t dataLength)$/;"	f	class:UnicodeString	signature:(const char *codepageData, int32_t dataLength)
UnicodeString::UnicodeString	unistr.cpp	/^UnicodeString::UnicodeString(const char *src, int32_t length, EInvariant)$/;"	f	class:UnicodeString	signature:(const char *src, int32_t length, EInvariant)
UnicodeString::UnicodeString	unistr.cpp	/^UnicodeString::UnicodeString(int32_t capacity, UChar32 c, int32_t count)$/;"	f	class:UnicodeString	signature:(int32_t capacity, UChar32 c, int32_t count)
UnicodeString::UnicodeString	unistr_cnv.cpp	/^UnicodeString::UnicodeString(const char *codepageData)$/;"	f	class:UnicodeString	signature:(const char *codepageData)
UnicodeString::UnicodeString	unistr_cnv.cpp	/^UnicodeString::UnicodeString(const char *codepageData,$/;"	f	class:UnicodeString	signature:(const char *codepageData, const char *codepage)
UnicodeString::UnicodeString	unistr_cnv.cpp	/^UnicodeString::UnicodeString(const char *codepageData,$/;"	f	class:UnicodeString	signature:(const char *codepageData, int32_t dataLength)
UnicodeString::UnicodeString	unistr_cnv.cpp	/^UnicodeString::UnicodeString(const char *codepageData,$/;"	f	class:UnicodeString	signature:(const char *codepageData, int32_t dataLength, const char *codepage)
UnicodeString::UnicodeString	unistr_cnv.cpp	/^UnicodeString::UnicodeString(const char *src, int32_t srcLength,$/;"	f	class:UnicodeString	signature:(const char *src, int32_t srcLength, UConverter *cnv, UErrorCode &errorCode)
UnicodeString::addRef	unicode/unistr.h	/^  void addRef(void);$/;"	p	class:UnicodeString	access:private	signature:(void)
UnicodeString::addRef	unistr.cpp	/^UnicodeString::addRef()$/;"	f	class:UnicodeString	signature:()
UnicodeString::allocate	unicode/unistr.h	/^  UBool allocate(int32_t capacity);$/;"	p	class:UnicodeString	access:private	signature:(int32_t capacity)
UnicodeString::allocate	unistr.cpp	/^UnicodeString::allocate(int32_t capacity) {$/;"	f	class:UnicodeString	signature:(int32_t capacity)
UnicodeString::append	unicode/unistr.h	/^  inline UnicodeString& append(UChar srcChar);$/;"	p	class:UnicodeString	access:public	signature:(UChar srcChar)
UnicodeString::append	unicode/unistr.h	/^  inline UnicodeString& append(UChar32 srcChar);$/;"	p	class:UnicodeString	access:public	signature:(UChar32 srcChar)
UnicodeString::append	unicode/unistr.h	/^  inline UnicodeString& append(const UChar *srcChars,$/;"	p	class:UnicodeString	access:public	signature:(const UChar *srcChars, int32_t srcLength)
UnicodeString::append	unicode/unistr.h	/^  inline UnicodeString& append(const UChar *srcChars,$/;"	p	class:UnicodeString	access:public	signature:(const UChar *srcChars, int32_t srcStart, int32_t srcLength)
UnicodeString::append	unicode/unistr.h	/^  inline UnicodeString& append(const UnicodeString& srcText);$/;"	p	class:UnicodeString	access:public	signature:(const UnicodeString& srcText)
UnicodeString::append	unicode/unistr.h	/^  inline UnicodeString& append(const UnicodeString& srcText,$/;"	p	class:UnicodeString	access:public	signature:(const UnicodeString& srcText, int32_t srcStart, int32_t srcLength)
UnicodeString::append	unicode/unistr.h	/^UnicodeString::append(UChar srcChar)$/;"	f	class:UnicodeString	signature:(UChar srcChar)
UnicodeString::append	unicode/unistr.h	/^UnicodeString::append(UChar32 srcChar) {$/;"	f	class:UnicodeString	signature:(UChar32 srcChar)
UnicodeString::append	unicode/unistr.h	/^UnicodeString::append(const UChar *srcChars,$/;"	f	class:UnicodeString	signature:(const UChar *srcChars, int32_t srcLength)
UnicodeString::append	unicode/unistr.h	/^UnicodeString::append(const UChar *srcChars,$/;"	f	class:UnicodeString	signature:(const UChar *srcChars, int32_t srcStart, int32_t srcLength)
UnicodeString::append	unicode/unistr.h	/^UnicodeString::append(const UnicodeString& srcText)$/;"	f	class:UnicodeString	signature:(const UnicodeString& srcText)
UnicodeString::append	unicode/unistr.h	/^UnicodeString::append(const UnicodeString& srcText,$/;"	f	class:UnicodeString	signature:(const UnicodeString& srcText, int32_t srcStart, int32_t srcLength)
UnicodeString::caseCompare	unicode/unistr.h	/^  inline int8_t caseCompare(const UChar *srcChars,$/;"	p	class:UnicodeString	access:public	signature:(const UChar *srcChars, int32_t srcLength, uint32_t options) const
UnicodeString::caseCompare	unicode/unistr.h	/^  inline int8_t caseCompare(const UnicodeString& text, uint32_t options) const;$/;"	p	class:UnicodeString	access:public	signature:(const UnicodeString& text, uint32_t options) const
UnicodeString::caseCompare	unicode/unistr.h	/^  inline int8_t caseCompare(int32_t start,$/;"	p	class:UnicodeString	access:public	signature:(int32_t start, int32_t length, const UChar *srcChars, int32_t srcStart, int32_t srcLength, uint32_t options) const
UnicodeString::caseCompare	unicode/unistr.h	/^  inline int8_t caseCompare(int32_t start,$/;"	p	class:UnicodeString	access:public	signature:(int32_t start, int32_t length, const UChar *srcChars, uint32_t options) const
UnicodeString::caseCompare	unicode/unistr.h	/^  inline int8_t caseCompare(int32_t start,$/;"	p	class:UnicodeString	access:public	signature:(int32_t start, int32_t length, const UnicodeString& srcText, int32_t srcStart, int32_t srcLength, uint32_t options) const
UnicodeString::caseCompare	unicode/unistr.h	/^  inline int8_t caseCompare(int32_t start,$/;"	p	class:UnicodeString	access:public	signature:(int32_t start, int32_t length, const UnicodeString& srcText, uint32_t options) const
UnicodeString::caseCompare	unicode/unistr.h	/^UnicodeString::caseCompare(const UChar *srcChars,$/;"	f	class:UnicodeString	signature:(const UChar *srcChars, int32_t srcLength, uint32_t options) const
UnicodeString::caseCompare	unicode/unistr.h	/^UnicodeString::caseCompare(const UnicodeString &text, uint32_t options) const {$/;"	f	class:UnicodeString	signature:(const UnicodeString &text, uint32_t options) const
UnicodeString::caseCompare	unicode/unistr.h	/^UnicodeString::caseCompare(int32_t start,$/;"	f	class:UnicodeString	signature:(int32_t start, int32_t _length, const UChar *srcChars, int32_t srcStart, int32_t srcLength, uint32_t options) const
UnicodeString::caseCompare	unicode/unistr.h	/^UnicodeString::caseCompare(int32_t start,$/;"	f	class:UnicodeString	signature:(int32_t start, int32_t _length, const UChar *srcChars, uint32_t options) const
UnicodeString::caseCompare	unicode/unistr.h	/^UnicodeString::caseCompare(int32_t start,$/;"	f	class:UnicodeString	signature:(int32_t start, int32_t _length, const UnicodeString &srcText, int32_t srcStart, int32_t srcLength, uint32_t options) const
UnicodeString::caseCompare	unicode/unistr.h	/^UnicodeString::caseCompare(int32_t start,$/;"	f	class:UnicodeString	signature:(int32_t start, int32_t _length, const UnicodeString &srcText, uint32_t options) const
UnicodeString::caseCompareBetween	unicode/unistr.h	/^  inline int8_t caseCompareBetween(int32_t start,$/;"	p	class:UnicodeString	access:public	signature:(int32_t start, int32_t limit, const UnicodeString& srcText, int32_t srcStart, int32_t srcLimit, uint32_t options) const
UnicodeString::caseCompareBetween	unicode/unistr.h	/^UnicodeString::caseCompareBetween(int32_t start,$/;"	f	class:UnicodeString	signature:(int32_t start, int32_t limit, const UnicodeString &srcText, int32_t srcStart, int32_t srcLimit, uint32_t options) const
UnicodeString::caseMap	unicode/unistr.h	/^  caseMap(BreakIterator *titleIter,$/;"	p	class:UnicodeString	access:private	signature:(BreakIterator *titleIter, const char *locale, uint32_t options, int32_t toWhichCase)
UnicodeString::caseMap	unistr_case.cpp	/^UnicodeString::caseMap(BreakIterator *titleIter,$/;"	f	class:UnicodeString	signature:(BreakIterator *titleIter, const char *locale, uint32_t options, int32_t toWhichCase)
UnicodeString::char32At	unicode/unistr.h	/^  inline UChar32 char32At(int32_t offset) const;$/;"	p	class:UnicodeString	access:public	signature:(int32_t offset) const
UnicodeString::char32At	unicode/unistr.h	/^UnicodeString::char32At(int32_t offset) const$/;"	f	class:UnicodeString	signature:(int32_t offset) const
UnicodeString::charAt	unicode/unistr.h	/^  inline UChar charAt(int32_t offset) const;$/;"	p	class:UnicodeString	access:public	signature:(int32_t offset) const
UnicodeString::charAt	unicode/unistr.h	/^UnicodeString::charAt(int32_t offset) const$/;"	f	class:UnicodeString	signature:(int32_t offset) const
UnicodeString::clone	unicode/unistr.h	/^  virtual Replaceable *clone() const;$/;"	p	class:UnicodeString	access:public	signature:() const
UnicodeString::clone	unistr.cpp	/^UnicodeString::clone() const {$/;"	f	class:UnicodeString	signature:() const
UnicodeString::cloneArrayIfNeeded	unicode/unistr.h	/^  UBool cloneArrayIfNeeded(int32_t newCapacity = -1,$/;"	p	class:UnicodeString	access:private	signature:(int32_t newCapacity = -1, int32_t growCapacity = -1, UBool doCopyArray = TRUE, int32_t **pBufferToDelete = 0, UBool forceClone = FALSE)
UnicodeString::cloneArrayIfNeeded	unistr.cpp	/^UnicodeString::cloneArrayIfNeeded(int32_t newCapacity,$/;"	f	class:UnicodeString	signature:(int32_t newCapacity, int32_t growCapacity, UBool doCopyArray, int32_t **pBufferToDelete, UBool forceClone)
UnicodeString::compare	unicode/unistr.h	/^   inline int8_t compare(int32_t start,$/;"	p	class:UnicodeString	access:public	signature:(int32_t start, int32_t length, const UnicodeString& srcText, int32_t srcStart, int32_t srcLength) const
UnicodeString::compare	unicode/unistr.h	/^  inline int8_t compare(const UChar *srcChars,$/;"	p	class:UnicodeString	access:public	signature:(const UChar *srcChars, int32_t srcLength) const
UnicodeString::compare	unicode/unistr.h	/^  inline int8_t compare(const UnicodeString& text) const;$/;"	p	class:UnicodeString	access:public	signature:(const UnicodeString& text) const
UnicodeString::compare	unicode/unistr.h	/^  inline int8_t compare(int32_t start,$/;"	p	class:UnicodeString	access:public	signature:(int32_t start, int32_t length, const UChar *srcChars) const
UnicodeString::compare	unicode/unistr.h	/^  inline int8_t compare(int32_t start,$/;"	p	class:UnicodeString	access:public	signature:(int32_t start, int32_t length, const UChar *srcChars, int32_t srcStart, int32_t srcLength) const
UnicodeString::compare	unicode/unistr.h	/^  inline int8_t compare(int32_t start,$/;"	p	class:UnicodeString	access:public	signature:(int32_t start, int32_t length, const UnicodeString& text) const
UnicodeString::compare	unicode/unistr.h	/^UnicodeString::compare(const UChar *srcChars,$/;"	f	class:UnicodeString	signature:(const UChar *srcChars, int32_t srcLength) const
UnicodeString::compare	unicode/unistr.h	/^UnicodeString::compare(const UnicodeString& text) const$/;"	f	class:UnicodeString	signature:(const UnicodeString& text) const
UnicodeString::compare	unicode/unistr.h	/^UnicodeString::compare(int32_t start,$/;"	f	class:UnicodeString	signature:(int32_t start, int32_t _length, const UChar *srcChars) const
UnicodeString::compare	unicode/unistr.h	/^UnicodeString::compare(int32_t start,$/;"	f	class:UnicodeString	signature:(int32_t start, int32_t _length, const UChar *srcChars, int32_t srcStart, int32_t srcLength) const
UnicodeString::compare	unicode/unistr.h	/^UnicodeString::compare(int32_t start,$/;"	f	class:UnicodeString	signature:(int32_t start, int32_t _length, const UnicodeString& srcText) const
UnicodeString::compare	unicode/unistr.h	/^UnicodeString::compare(int32_t start,$/;"	f	class:UnicodeString	signature:(int32_t start, int32_t _length, const UnicodeString& srcText, int32_t srcStart, int32_t srcLength) const
UnicodeString::compareBetween	unicode/unistr.h	/^  inline int8_t compareBetween(int32_t start,$/;"	p	class:UnicodeString	access:public	signature:(int32_t start, int32_t limit, const UnicodeString& srcText, int32_t srcStart, int32_t srcLimit) const
UnicodeString::compareBetween	unicode/unistr.h	/^UnicodeString::compareBetween(int32_t start,$/;"	f	class:UnicodeString	signature:(int32_t start, int32_t limit, const UnicodeString& srcText, int32_t srcStart, int32_t srcLimit) const
UnicodeString::compareCodePointOrder	unicode/unistr.h	/^   inline int8_t compareCodePointOrder(int32_t start,$/;"	p	class:UnicodeString	access:public	signature:(int32_t start, int32_t length, const UnicodeString& srcText, int32_t srcStart, int32_t srcLength) const
UnicodeString::compareCodePointOrder	unicode/unistr.h	/^  inline int8_t compareCodePointOrder(const UChar *srcChars,$/;"	p	class:UnicodeString	access:public	signature:(const UChar *srcChars, int32_t srcLength) const
UnicodeString::compareCodePointOrder	unicode/unistr.h	/^  inline int8_t compareCodePointOrder(const UnicodeString& text) const;$/;"	p	class:UnicodeString	access:public	signature:(const UnicodeString& text) const
UnicodeString::compareCodePointOrder	unicode/unistr.h	/^  inline int8_t compareCodePointOrder(int32_t start,$/;"	p	class:UnicodeString	access:public	signature:(int32_t start, int32_t length, const UChar *srcChars) const
UnicodeString::compareCodePointOrder	unicode/unistr.h	/^  inline int8_t compareCodePointOrder(int32_t start,$/;"	p	class:UnicodeString	access:public	signature:(int32_t start, int32_t length, const UChar *srcChars, int32_t srcStart, int32_t srcLength) const
UnicodeString::compareCodePointOrder	unicode/unistr.h	/^  inline int8_t compareCodePointOrder(int32_t start,$/;"	p	class:UnicodeString	access:public	signature:(int32_t start, int32_t length, const UnicodeString& srcText) const
UnicodeString::compareCodePointOrder	unicode/unistr.h	/^UnicodeString::compareCodePointOrder(const UChar *srcChars,$/;"	f	class:UnicodeString	signature:(const UChar *srcChars, int32_t srcLength) const
UnicodeString::compareCodePointOrder	unicode/unistr.h	/^UnicodeString::compareCodePointOrder(const UnicodeString& text) const$/;"	f	class:UnicodeString	signature:(const UnicodeString& text) const
UnicodeString::compareCodePointOrder	unicode/unistr.h	/^UnicodeString::compareCodePointOrder(int32_t start,$/;"	f	class:UnicodeString	signature:(int32_t start, int32_t _length, const UChar *srcChars) const
UnicodeString::compareCodePointOrder	unicode/unistr.h	/^UnicodeString::compareCodePointOrder(int32_t start,$/;"	f	class:UnicodeString	signature:(int32_t start, int32_t _length, const UChar *srcChars, int32_t srcStart, int32_t srcLength) const
UnicodeString::compareCodePointOrder	unicode/unistr.h	/^UnicodeString::compareCodePointOrder(int32_t start,$/;"	f	class:UnicodeString	signature:(int32_t start, int32_t _length, const UnicodeString& srcText) const
UnicodeString::compareCodePointOrder	unicode/unistr.h	/^UnicodeString::compareCodePointOrder(int32_t start,$/;"	f	class:UnicodeString	signature:(int32_t start, int32_t _length, const UnicodeString& srcText, int32_t srcStart, int32_t srcLength) const
UnicodeString::compareCodePointOrderBetween	unicode/unistr.h	/^  inline int8_t compareCodePointOrderBetween(int32_t start,$/;"	p	class:UnicodeString	access:public	signature:(int32_t start, int32_t limit, const UnicodeString& srcText, int32_t srcStart, int32_t srcLimit) const
UnicodeString::compareCodePointOrderBetween	unicode/unistr.h	/^UnicodeString::compareCodePointOrderBetween(int32_t start,$/;"	f	class:UnicodeString	signature:(int32_t start, int32_t limit, const UnicodeString& srcText, int32_t srcStart, int32_t srcLimit) const
UnicodeString::copy	unicode/unistr.h	/^  virtual void copy(int32_t start, int32_t limit, int32_t dest);$/;"	p	class:UnicodeString	access:public	signature:(int32_t start, int32_t limit, int32_t dest)
UnicodeString::copy	unistr.cpp	/^UnicodeString::copy(int32_t start, int32_t limit, int32_t dest) {$/;"	f	class:UnicodeString	signature:(int32_t start, int32_t limit, int32_t dest)
UnicodeString::copyFrom	unicode/unistr.h	/^  UnicodeString &copyFrom(const UnicodeString &src, UBool fastCopy=FALSE);$/;"	p	class:UnicodeString	access:private	signature:(const UnicodeString &src, UBool fastCopy=FALSE)
UnicodeString::copyFrom	unistr.cpp	/^UnicodeString::copyFrom(const UnicodeString &src, UBool fastCopy) {$/;"	f	class:UnicodeString	signature:(const UnicodeString &src, UBool fastCopy)
UnicodeString::countChar32	unicode/unistr.h	/^  countChar32(int32_t start=0, int32_t length=INT32_MAX) const;$/;"	p	class:UnicodeString	access:public	signature:(int32_t start=0, int32_t length=INT32_MAX) const
UnicodeString::countChar32	unistr.cpp	/^UnicodeString::countChar32(int32_t start, int32_t length) const {$/;"	f	class:UnicodeString	signature:(int32_t start, int32_t length) const
UnicodeString::doCaseCompare	unicode/unistr.h	/^  doCaseCompare(int32_t start,$/;"	p	class:UnicodeString	access:private	signature:(int32_t start, int32_t length, const UChar *srcChars, int32_t srcStart, int32_t srcLength, uint32_t options) const
UnicodeString::doCaseCompare	unicode/unistr.h	/^  doCaseCompare(int32_t start,$/;"	p	class:UnicodeString	access:private	signature:(int32_t start, int32_t length, const UnicodeString &srcText, int32_t srcStart, int32_t srcLength, uint32_t options) const
UnicodeString::doCaseCompare	unicode/unistr.h	/^UnicodeString::doCaseCompare(int32_t start,$/;"	f	class:UnicodeString	signature:(int32_t start, int32_t thisLength, const UnicodeString &srcText, int32_t srcStart, int32_t srcLength, uint32_t options) const
UnicodeString::doCaseCompare	unistr_case.cpp	/^UnicodeString::doCaseCompare(int32_t start,$/;"	f	class:UnicodeString	signature:(int32_t start, int32_t length, const UChar *srcChars, int32_t srcStart, int32_t srcLength, uint32_t options) const
UnicodeString::doCharAt	unicode/unistr.h	/^  inline UChar doCharAt(int32_t offset)  const;$/;"	p	class:UnicodeString	access:private	signature:(int32_t offset) const
UnicodeString::doCharAt	unicode/unistr.h	/^UnicodeString::doCharAt(int32_t offset) const$/;"	f	class:UnicodeString	signature:(int32_t offset) const
UnicodeString::doCodepageCreate	unicode/unistr.h	/^  doCodepageCreate(const char *codepageData,$/;"	p	class:UnicodeString	access:private	signature:(const char *codepageData, int32_t dataLength, UConverter *converter, UErrorCode &status)
UnicodeString::doCodepageCreate	unicode/unistr.h	/^  void doCodepageCreate(const char *codepageData,$/;"	p	class:UnicodeString	access:private	signature:(const char *codepageData, int32_t dataLength, const char *codepage)
UnicodeString::doCodepageCreate	unistr_cnv.cpp	/^UnicodeString::doCodepageCreate(const char *codepageData,$/;"	f	class:UnicodeString	signature:(const char *codepageData, int32_t dataLength, UConverter *converter, UErrorCode &status)
UnicodeString::doCodepageCreate	unistr_cnv.cpp	/^UnicodeString::doCodepageCreate(const char *codepageData,$/;"	f	class:UnicodeString	signature:(const char *codepageData, int32_t dataLength, const char *codepage)
UnicodeString::doCompare	unicode/unistr.h	/^  doCompare(int32_t start,$/;"	p	class:UnicodeString	access:private	signature:(int32_t start, int32_t length, const UnicodeString& srcText, int32_t srcStart, int32_t srcLength) const
UnicodeString::doCompare	unicode/unistr.h	/^  int8_t doCompare(int32_t start,$/;"	p	class:UnicodeString	access:private	signature:(int32_t start, int32_t length, const UChar *srcChars, int32_t srcStart, int32_t srcLength) const
UnicodeString::doCompare	unicode/unistr.h	/^UnicodeString::doCompare(int32_t start,$/;"	f	class:UnicodeString	signature:(int32_t start, int32_t thisLength, const UnicodeString& srcText, int32_t srcStart, int32_t srcLength) const
UnicodeString::doCompare	unistr.cpp	/^UnicodeString::doCompare( int32_t start,$/;"	f	class:UnicodeString	signature:( int32_t start, int32_t length, const UChar *srcChars, int32_t srcStart, int32_t srcLength) const
UnicodeString::doCompareCodePointOrder	unicode/unistr.h	/^  doCompareCodePointOrder(int32_t start,$/;"	p	class:UnicodeString	access:private	signature:(int32_t start, int32_t length, const UnicodeString& srcText, int32_t srcStart, int32_t srcLength) const
UnicodeString::doCompareCodePointOrder	unicode/unistr.h	/^  int8_t doCompareCodePointOrder(int32_t start,$/;"	p	class:UnicodeString	access:private	signature:(int32_t start, int32_t length, const UChar *srcChars, int32_t srcStart, int32_t srcLength) const
UnicodeString::doCompareCodePointOrder	unicode/unistr.h	/^UnicodeString::doCompareCodePointOrder(int32_t start,$/;"	f	class:UnicodeString	signature:(int32_t start, int32_t thisLength, const UnicodeString& srcText, int32_t srcStart, int32_t srcLength) const
UnicodeString::doCompareCodePointOrder	unistr.cpp	/^UnicodeString::doCompareCodePointOrder(int32_t start,$/;"	f	class:UnicodeString	signature:(int32_t start, int32_t length, const UChar *srcChars, int32_t srcStart, int32_t srcLength) const
UnicodeString::doExtract	unicode/unistr.h	/^  inline void doExtract(int32_t start,$/;"	p	class:UnicodeString	access:private	signature:(int32_t start, int32_t length, UnicodeString& target) const
UnicodeString::doExtract	unicode/unistr.h	/^  int32_t doExtract(int32_t start, int32_t length,$/;"	p	class:UnicodeString	access:private	signature:(int32_t start, int32_t length, char *dest, int32_t destCapacity, UConverter *cnv, UErrorCode &errorCode) const
UnicodeString::doExtract	unicode/unistr.h	/^  void doExtract(int32_t start,$/;"	p	class:UnicodeString	access:private	signature:(int32_t start, int32_t length, UChar *dst, int32_t dstStart) const
UnicodeString::doExtract	unicode/unistr.h	/^UnicodeString::doExtract(int32_t start,$/;"	f	class:UnicodeString	signature:(int32_t start, int32_t _length, UnicodeString& target) const
UnicodeString::doExtract	unistr.cpp	/^UnicodeString::doExtract(int32_t start,$/;"	f	class:UnicodeString	signature:(int32_t start, int32_t length, UChar *dst, int32_t dstStart) const
UnicodeString::doExtract	unistr_cnv.cpp	/^UnicodeString::doExtract(int32_t start, int32_t length,$/;"	f	class:UnicodeString	signature:(int32_t start, int32_t length, char *dest, int32_t destCapacity, UConverter *cnv, UErrorCode &errorCode) const
UnicodeString::doHashCode	unicode/unistr.h	/^  int32_t doHashCode(void) const;$/;"	p	class:UnicodeString	access:private	signature:(void) const
UnicodeString::doHashCode	unistr.cpp	/^UnicodeString::doHashCode() const$/;"	f	class:UnicodeString	signature:() const
UnicodeString::doIndexOf	unicode/unistr.h	/^  int32_t doIndexOf(UChar c,$/;"	p	class:UnicodeString	access:private	signature:(UChar c, int32_t start, int32_t length) const
UnicodeString::doIndexOf	unicode/unistr.h	/^  int32_t doIndexOf(UChar32 c,$/;"	p	class:UnicodeString	access:private	signature:(UChar32 c, int32_t start, int32_t length) const
UnicodeString::doIndexOf	unistr.cpp	/^UnicodeString::doIndexOf(UChar c,$/;"	f	class:UnicodeString	signature:(UChar c, int32_t start, int32_t length) const
UnicodeString::doIndexOf	unistr.cpp	/^UnicodeString::doIndexOf(UChar32 c,$/;"	f	class:UnicodeString	signature:(UChar32 c, int32_t start, int32_t length) const
UnicodeString::doLastIndexOf	unicode/unistr.h	/^  int32_t doLastIndexOf(UChar c,$/;"	p	class:UnicodeString	access:private	signature:(UChar c, int32_t start, int32_t length) const
UnicodeString::doLastIndexOf	unicode/unistr.h	/^  int32_t doLastIndexOf(UChar32 c,$/;"	p	class:UnicodeString	access:private	signature:(UChar32 c, int32_t start, int32_t length) const
UnicodeString::doLastIndexOf	unistr.cpp	/^UnicodeString::doLastIndexOf(UChar c,$/;"	f	class:UnicodeString	signature:(UChar c, int32_t start, int32_t length) const
UnicodeString::doLastIndexOf	unistr.cpp	/^UnicodeString::doLastIndexOf(UChar32 c,$/;"	f	class:UnicodeString	signature:(UChar32 c, int32_t start, int32_t length) const
UnicodeString::doReplace	unicode/unistr.h	/^  UnicodeString& doReplace(int32_t start,$/;"	p	class:UnicodeString	access:private	signature:(int32_t start, int32_t length, const UChar *srcChars, int32_t srcStart, int32_t srcLength)
UnicodeString::doReplace	unicode/unistr.h	/^  UnicodeString& doReplace(int32_t start,$/;"	p	class:UnicodeString	access:private	signature:(int32_t start, int32_t length, const UnicodeString& srcText, int32_t srcStart, int32_t srcLength)
UnicodeString::doReplace	unistr.cpp	/^UnicodeString::doReplace( int32_t start,$/;"	f	class:UnicodeString	signature:( int32_t start, int32_t length, const UnicodeString& src, int32_t srcStart, int32_t srcLength)
UnicodeString::doReplace	unistr.cpp	/^UnicodeString::doReplace(int32_t start,$/;"	f	class:UnicodeString	signature:(int32_t start, int32_t length, const UChar *srcChars, int32_t srcStart, int32_t srcLength)
UnicodeString::doReverse	unicode/unistr.h	/^  UnicodeString& doReverse(int32_t start,$/;"	p	class:UnicodeString	access:private	signature:(int32_t start, int32_t length)
UnicodeString::doReverse	unistr.cpp	/^UnicodeString::doReverse(int32_t start, int32_t length) {$/;"	f	class:UnicodeString	signature:(int32_t start, int32_t length)
UnicodeString::endsWith	unicode/unistr.h	/^  inline UBool endsWith(const UChar *srcChars,$/;"	p	class:UnicodeString	access:public	signature:(const UChar *srcChars, int32_t srcLength) const
UnicodeString::endsWith	unicode/unistr.h	/^  inline UBool endsWith(const UChar *srcChars,$/;"	p	class:UnicodeString	access:public	signature:(const UChar *srcChars, int32_t srcStart, int32_t srcLength) const
UnicodeString::endsWith	unicode/unistr.h	/^  inline UBool endsWith(const UnicodeString& srcText,$/;"	p	class:UnicodeString	access:public	signature:(const UnicodeString& srcText, int32_t srcStart, int32_t srcLength) const
UnicodeString::endsWith	unicode/unistr.h	/^  inline UBool endsWith(const UnicodeString& text) const;$/;"	p	class:UnicodeString	access:public	signature:(const UnicodeString& text) const
UnicodeString::endsWith	unicode/unistr.h	/^UnicodeString::endsWith(const UChar *srcChars,$/;"	f	class:UnicodeString	signature:(const UChar *srcChars, int32_t srcLength) const
UnicodeString::endsWith	unicode/unistr.h	/^UnicodeString::endsWith(const UChar *srcChars,$/;"	f	class:UnicodeString	signature:(const UChar *srcChars, int32_t srcStart, int32_t srcLength) const
UnicodeString::endsWith	unicode/unistr.h	/^UnicodeString::endsWith(const UnicodeString& srcText,$/;"	f	class:UnicodeString	signature:(const UnicodeString& srcText, int32_t srcStart, int32_t srcLength) const
UnicodeString::endsWith	unicode/unistr.h	/^UnicodeString::endsWith(const UnicodeString& text) const$/;"	f	class:UnicodeString	signature:(const UnicodeString& text) const
UnicodeString::extract	unicode/unistr.h	/^  extract(UChar *dest, int32_t destCapacity,$/;"	p	class:UnicodeString	access:public	signature:(UChar *dest, int32_t destCapacity, UErrorCode &errorCode) const
UnicodeString::extract	unicode/unistr.h	/^  inline int32_t extract(int32_t start,$/;"	p	class:UnicodeString	access:public	signature:(int32_t start, int32_t startLength, char *target, const char *codepage = 0) const
UnicodeString::extract	unicode/unistr.h	/^  inline void extract(int32_t start,$/;"	p	class:UnicodeString	access:public	signature:(int32_t start, int32_t length, UChar *dst, int32_t dstStart = 0) const
UnicodeString::extract	unicode/unistr.h	/^  inline void extract(int32_t start,$/;"	p	class:UnicodeString	access:public	signature:(int32_t start, int32_t length, UnicodeString& target) const
UnicodeString::extract	unicode/unistr.h	/^  int32_t extract(char *dest, int32_t destCapacity,$/;"	p	class:UnicodeString	access:public	signature:(char *dest, int32_t destCapacity, UConverter *cnv, UErrorCode &errorCode) const
UnicodeString::extract	unicode/unistr.h	/^  int32_t extract(int32_t start,$/;"	p	class:UnicodeString	access:public	signature:(int32_t start, int32_t startLength, char *target, int32_t targetCapacity, enum EInvariant inv) const
UnicodeString::extract	unicode/unistr.h	/^  int32_t extract(int32_t start,$/;"	p	class:UnicodeString	access:public	signature:(int32_t start, int32_t startLength, char *target, uint32_t targetLength) const
UnicodeString::extract	unicode/unistr.h	/^  int32_t extract(int32_t start,$/;"	p	class:UnicodeString	access:public	signature:(int32_t start, int32_t startLength, char *target, uint32_t targetLength, const char *codepage) const
UnicodeString::extract	unicode/unistr.h	/^UnicodeString::extract(int32_t start,$/;"	f	class:UnicodeString	signature:(int32_t start, int32_t _length, UChar *target, int32_t targetStart) const
UnicodeString::extract	unicode/unistr.h	/^UnicodeString::extract(int32_t start,$/;"	f	class:UnicodeString	signature:(int32_t start, int32_t _length, UnicodeString& target) const
UnicodeString::extract	unicode/unistr.h	/^UnicodeString::extract(int32_t start,$/;"	f	class:UnicodeString	signature:(int32_t start, int32_t _length, char *dst, const char *codepage) const
UnicodeString::extract	unistr.cpp	/^UnicodeString::extract(UChar *dest, int32_t destCapacity,$/;"	f	class:UnicodeString	signature:(UChar *dest, int32_t destCapacity, UErrorCode &errorCode) const
UnicodeString::extract	unistr.cpp	/^UnicodeString::extract(int32_t start, int32_t len,$/;"	f	class:UnicodeString	signature:(int32_t start, int32_t len, char *target, uint32_t dstSize) const
UnicodeString::extract	unistr.cpp	/^UnicodeString::extract(int32_t start,$/;"	f	class:UnicodeString	signature:(int32_t start, int32_t length, char *target, int32_t targetCapacity, enum EInvariant) const
UnicodeString::extract	unistr_cnv.cpp	/^UnicodeString::extract(char *dest, int32_t destCapacity,$/;"	f	class:UnicodeString	signature:(char *dest, int32_t destCapacity, UConverter *cnv, UErrorCode &errorCode) const
UnicodeString::extract	unistr_cnv.cpp	/^UnicodeString::extract(int32_t start,$/;"	f	class:UnicodeString	signature:(int32_t start, int32_t length, char *target, uint32_t dstSize) const
UnicodeString::extract	unistr_cnv.cpp	/^UnicodeString::extract(int32_t start,$/;"	f	class:UnicodeString	signature:(int32_t start, int32_t length, char *target, uint32_t dstSize, const char *codepage) const
UnicodeString::extractBetween	unicode/unistr.h	/^  inline void extractBetween(int32_t start,$/;"	p	class:UnicodeString	access:public	signature:(int32_t start, int32_t limit, UChar *dst, int32_t dstStart = 0) const
UnicodeString::extractBetween	unicode/unistr.h	/^  virtual void extractBetween(int32_t start,$/;"	p	class:UnicodeString	access:public	signature:(int32_t start, int32_t limit, UnicodeString& target) const
UnicodeString::extractBetween	unicode/unistr.h	/^UnicodeString::extractBetween(int32_t start,$/;"	f	class:UnicodeString	signature:(int32_t start, int32_t limit, UChar *dst, int32_t dstStart) const
UnicodeString::extractBetween	unistr.cpp	/^UnicodeString::extractBetween(int32_t start,$/;"	f	class:UnicodeString	signature:(int32_t start, int32_t limit, UnicodeString& target) const
UnicodeString::fFlags	unicode/unistr.h	/^  uint8_t   fFlags;         \/\/ bit flags: see constants above$/;"	m	class:UnicodeString	access:private
UnicodeString::fShortLength	unicode/unistr.h	/^  int8_t    fShortLength;   \/\/ 0..127: length  <0: real length is in fUnion.fFields.fLength$/;"	m	class:UnicodeString	access:private
UnicodeString::fUnion	unicode/unistr.h	/^  } fUnion;$/;"	m	class:UnicodeString	typeref:union:UnicodeString::StackBufferOrFields	access:private
UnicodeString::fastCopyFrom	unicode/unistr.h	/^  UnicodeString &fastCopyFrom(const UnicodeString &src);$/;"	p	class:UnicodeString	access:public	signature:(const UnicodeString &src)
UnicodeString::fastCopyFrom	unistr.cpp	/^UnicodeString::fastCopyFrom(const UnicodeString &src) {$/;"	f	class:UnicodeString	signature:(const UnicodeString &src)
UnicodeString::findAndReplace	unicode/unistr.h	/^  UnicodeString& findAndReplace(int32_t start,$/;"	p	class:UnicodeString	access:public	signature:(int32_t start, int32_t length, const UnicodeString& oldText, int32_t oldStart, int32_t oldLength, const UnicodeString& newText, int32_t newStart, int32_t newLength)
UnicodeString::findAndReplace	unicode/unistr.h	/^  inline UnicodeString& findAndReplace(const UnicodeString& oldText,$/;"	p	class:UnicodeString	access:public	signature:(const UnicodeString& oldText, const UnicodeString& newText)
UnicodeString::findAndReplace	unicode/unistr.h	/^  inline UnicodeString& findAndReplace(int32_t start,$/;"	p	class:UnicodeString	access:public	signature:(int32_t start, int32_t length, const UnicodeString& oldText, const UnicodeString& newText)
UnicodeString::findAndReplace	unicode/unistr.h	/^UnicodeString::findAndReplace(const UnicodeString& oldText,$/;"	f	class:UnicodeString	signature:(const UnicodeString& oldText, const UnicodeString& newText)
UnicodeString::findAndReplace	unicode/unistr.h	/^UnicodeString::findAndReplace(int32_t start,$/;"	f	class:UnicodeString	signature:(int32_t start, int32_t _length, const UnicodeString& oldText, const UnicodeString& newText)
UnicodeString::findAndReplace	unistr.cpp	/^UnicodeString::findAndReplace(int32_t start,$/;"	f	class:UnicodeString	signature:(int32_t start, int32_t length, const UnicodeString& oldText, int32_t oldStart, int32_t oldLength, const UnicodeString& newText, int32_t newStart, int32_t newLength)
UnicodeString::foldCase	unicode/unistr.h	/^  UnicodeString &foldCase(uint32_t options=0 \/*U_FOLD_CASE_DEFAULT*\/);$/;"	p	class:UnicodeString	access:public	signature:(uint32_t options=0 )
UnicodeString::foldCase	unistr_case.cpp	/^UnicodeString::foldCase(uint32_t options) {$/;"	f	class:UnicodeString	signature:(uint32_t options)
UnicodeString::fromUTF32	unicode/unistr.h	/^  static UnicodeString fromUTF32(const UChar32 *utf32, int32_t length);$/;"	p	class:UnicodeString	access:public	signature:(const UChar32 *utf32, int32_t length)
UnicodeString::fromUTF32	unistr.cpp	/^UnicodeString UnicodeString::fromUTF32(const UChar32 *utf32, int32_t length) {$/;"	f	class:UnicodeString	signature:(const UChar32 *utf32, int32_t length)
UnicodeString::fromUTF8	unicode/unistr.h	/^  static UnicodeString fromUTF8(const StringPiece &utf8);$/;"	p	class:UnicodeString	access:public	signature:(const StringPiece &utf8)
UnicodeString::fromUTF8	unistr.cpp	/^UnicodeString UnicodeString::fromUTF8(const StringPiece &utf8) {$/;"	f	class:UnicodeString	signature:(const StringPiece &utf8)
UnicodeString::getArrayStart	unicode/unistr.h	/^  inline UChar* getArrayStart(void);$/;"	p	class:UnicodeString	access:private	signature:(void)
UnicodeString::getArrayStart	unicode/unistr.h	/^  inline const UChar* getArrayStart(void) const;$/;"	p	class:UnicodeString	access:private	signature:(void) const
UnicodeString::getArrayStart	unicode/unistr.h	/^UnicodeString::getArrayStart() const$/;"	f	class:UnicodeString	signature:() const
UnicodeString::getArrayStart	unicode/unistr.h	/^UnicodeString::getArrayStart()$/;"	f	class:UnicodeString	signature:()
UnicodeString::getBuffer	unicode/unistr.h	/^  UChar *getBuffer(int32_t minCapacity);$/;"	p	class:UnicodeString	access:public	signature:(int32_t minCapacity)
UnicodeString::getBuffer	unicode/unistr.h	/^  inline const UChar *getBuffer() const;$/;"	p	class:UnicodeString	access:public	signature:() const
UnicodeString::getBuffer	unicode/unistr.h	/^UnicodeString::getBuffer() const {$/;"	f	class:UnicodeString	signature:() const
UnicodeString::getBuffer	unistr.cpp	/^UnicodeString::getBuffer(int32_t minCapacity) {$/;"	f	class:UnicodeString	signature:(int32_t minCapacity)
UnicodeString::getCapacity	unicode/unistr.h	/^  inline int32_t getCapacity(void) const;$/;"	p	class:UnicodeString	access:public	signature:(void) const
UnicodeString::getCapacity	unicode/unistr.h	/^UnicodeString::getCapacity() const$/;"	f	class:UnicodeString	signature:() const
UnicodeString::getChar32At	unicode/unistr.h	/^  virtual UChar32 getChar32At(int32_t offset) const;$/;"	p	class:UnicodeString	access:protected	signature:(int32_t offset) const
UnicodeString::getChar32At	unistr.cpp	/^UnicodeString::getChar32At(int32_t offset) const {$/;"	f	class:UnicodeString	signature:(int32_t offset) const
UnicodeString::getChar32Limit	unicode/unistr.h	/^  inline int32_t getChar32Limit(int32_t offset) const;$/;"	p	class:UnicodeString	access:public	signature:(int32_t offset) const
UnicodeString::getChar32Limit	unicode/unistr.h	/^UnicodeString::getChar32Limit(int32_t offset) const {$/;"	f	class:UnicodeString	signature:(int32_t offset) const
UnicodeString::getChar32Start	unicode/unistr.h	/^  inline int32_t getChar32Start(int32_t offset) const;$/;"	p	class:UnicodeString	access:public	signature:(int32_t offset) const
UnicodeString::getChar32Start	unicode/unistr.h	/^UnicodeString::getChar32Start(int32_t offset) const {$/;"	f	class:UnicodeString	signature:(int32_t offset) const
UnicodeString::getCharAt	unicode/unistr.h	/^  virtual UChar getCharAt(int32_t offset) const;$/;"	p	class:UnicodeString	access:protected	signature:(int32_t offset) const
UnicodeString::getCharAt	unistr.cpp	/^UnicodeString::getCharAt(int32_t offset) const {$/;"	f	class:UnicodeString	signature:(int32_t offset) const
UnicodeString::getDynamicClassID	unicode/unistr.h	/^  virtual UClassID getDynamicClassID() const;$/;"	p	class:UnicodeString	access:public	signature:() const
UnicodeString::getLength	unicode/unistr.h	/^  virtual int32_t getLength() const;$/;"	p	class:UnicodeString	access:protected	signature:() const
UnicodeString::getLength	unistr.cpp	/^UnicodeString::getLength() const {$/;"	f	class:UnicodeString	signature:() const
UnicodeString::getStaticClassID	unicode/unistr.h	/^  static UClassID U_EXPORT2 getStaticClassID();$/;"	p	class:UnicodeString	access:public	signature:()
UnicodeString::getTerminatedBuffer	unicode/unistr.h	/^  inline const UChar *getTerminatedBuffer();$/;"	p	class:UnicodeString	access:public	signature:()
UnicodeString::getTerminatedBuffer	unicode/unistr.h	/^UnicodeString::getTerminatedBuffer() {$/;"	f	class:UnicodeString	signature:()
UnicodeString::handleReplaceBetween	unicode/unistr.h	/^  virtual void handleReplaceBetween(int32_t start,$/;"	p	class:UnicodeString	access:public	signature:(int32_t start, int32_t limit, const UnicodeString& text)
UnicodeString::handleReplaceBetween	unistr.cpp	/^UnicodeString::handleReplaceBetween(int32_t start,$/;"	f	class:UnicodeString	signature:(int32_t start, int32_t limit, const UnicodeString& text)
UnicodeString::hasMetaData	unicode/unistr.h	/^  virtual UBool hasMetaData() const;$/;"	p	class:UnicodeString	access:public	signature:() const
UnicodeString::hasMetaData	unistr.cpp	/^UBool UnicodeString::hasMetaData() const {$/;"	f	class:UnicodeString	signature:() const
UnicodeString::hasMoreChar32Than	unicode/unistr.h	/^  hasMoreChar32Than(int32_t start, int32_t length, int32_t number) const;$/;"	p	class:UnicodeString	access:public	signature:(int32_t start, int32_t length, int32_t number) const
UnicodeString::hasMoreChar32Than	unistr.cpp	/^UnicodeString::hasMoreChar32Than(int32_t start, int32_t length, int32_t number) const {$/;"	f	class:UnicodeString	signature:(int32_t start, int32_t length, int32_t number) const
UnicodeString::hashCode	unicode/unistr.h	/^  inline int32_t hashCode(void) const;$/;"	p	class:UnicodeString	access:public	signature:(void) const
UnicodeString::hashCode	unicode/unistr.h	/^UnicodeString::hashCode() const$/;"	f	class:UnicodeString	signature:() const
UnicodeString::indexOf	unicode/unistr.h	/^  inline int32_t indexOf(UChar c) const;$/;"	p	class:UnicodeString	access:public	signature:(UChar c) const
UnicodeString::indexOf	unicode/unistr.h	/^  inline int32_t indexOf(UChar c,$/;"	p	class:UnicodeString	access:public	signature:(UChar c, int32_t start) const
UnicodeString::indexOf	unicode/unistr.h	/^  inline int32_t indexOf(UChar c,$/;"	p	class:UnicodeString	access:public	signature:(UChar c, int32_t start, int32_t length) const
UnicodeString::indexOf	unicode/unistr.h	/^  inline int32_t indexOf(UChar32 c) const;$/;"	p	class:UnicodeString	access:public	signature:(UChar32 c) const
UnicodeString::indexOf	unicode/unistr.h	/^  inline int32_t indexOf(UChar32 c,$/;"	p	class:UnicodeString	access:public	signature:(UChar32 c, int32_t start) const
UnicodeString::indexOf	unicode/unistr.h	/^  inline int32_t indexOf(UChar32 c,$/;"	p	class:UnicodeString	access:public	signature:(UChar32 c, int32_t start, int32_t length) const
UnicodeString::indexOf	unicode/unistr.h	/^  inline int32_t indexOf(const UChar *srcChars,$/;"	p	class:UnicodeString	access:public	signature:(const UChar *srcChars, int32_t srcLength, int32_t start) const
UnicodeString::indexOf	unicode/unistr.h	/^  inline int32_t indexOf(const UChar *srcChars,$/;"	p	class:UnicodeString	access:public	signature:(const UChar *srcChars, int32_t srcLength, int32_t start, int32_t length) const
UnicodeString::indexOf	unicode/unistr.h	/^  inline int32_t indexOf(const UnicodeString& srcText,$/;"	p	class:UnicodeString	access:public	signature:(const UnicodeString& srcText, int32_t srcStart, int32_t srcLength, int32_t start, int32_t length) const
UnicodeString::indexOf	unicode/unistr.h	/^  inline int32_t indexOf(const UnicodeString& text) const;$/;"	p	class:UnicodeString	access:public	signature:(const UnicodeString& text) const
UnicodeString::indexOf	unicode/unistr.h	/^  inline int32_t indexOf(const UnicodeString& text,$/;"	p	class:UnicodeString	access:public	signature:(const UnicodeString& text, int32_t start) const
UnicodeString::indexOf	unicode/unistr.h	/^  inline int32_t indexOf(const UnicodeString& text,$/;"	p	class:UnicodeString	access:public	signature:(const UnicodeString& text, int32_t start, int32_t length) const
UnicodeString::indexOf	unicode/unistr.h	/^  int32_t indexOf(const UChar *srcChars,$/;"	p	class:UnicodeString	access:public	signature:(const UChar *srcChars, int32_t srcStart, int32_t srcLength, int32_t start, int32_t length) const
UnicodeString::indexOf	unicode/unistr.h	/^UnicodeString::indexOf(UChar c) const$/;"	f	class:UnicodeString	signature:(UChar c) const
UnicodeString::indexOf	unicode/unistr.h	/^UnicodeString::indexOf(UChar c,$/;"	f	class:UnicodeString	signature:(UChar c, int32_t start) const
UnicodeString::indexOf	unicode/unistr.h	/^UnicodeString::indexOf(UChar c,$/;"	f	class:UnicodeString	signature:(UChar c, int32_t start, int32_t _length) const
UnicodeString::indexOf	unicode/unistr.h	/^UnicodeString::indexOf(UChar32 c) const$/;"	f	class:UnicodeString	signature:(UChar32 c) const
UnicodeString::indexOf	unicode/unistr.h	/^UnicodeString::indexOf(UChar32 c,$/;"	f	class:UnicodeString	signature:(UChar32 c, int32_t start) const
UnicodeString::indexOf	unicode/unistr.h	/^UnicodeString::indexOf(UChar32 c,$/;"	f	class:UnicodeString	signature:(UChar32 c, int32_t start, int32_t _length) const
UnicodeString::indexOf	unicode/unistr.h	/^UnicodeString::indexOf(const UChar *srcChars,$/;"	f	class:UnicodeString	signature:(const UChar *srcChars, int32_t srcLength, int32_t start) const
UnicodeString::indexOf	unicode/unistr.h	/^UnicodeString::indexOf(const UChar *srcChars,$/;"	f	class:UnicodeString	signature:(const UChar *srcChars, int32_t srcLength, int32_t start, int32_t _length) const
UnicodeString::indexOf	unicode/unistr.h	/^UnicodeString::indexOf(const UnicodeString& srcText,$/;"	f	class:UnicodeString	signature:(const UnicodeString& srcText, int32_t srcStart, int32_t srcLength, int32_t start, int32_t _length) const
UnicodeString::indexOf	unicode/unistr.h	/^UnicodeString::indexOf(const UnicodeString& text) const$/;"	f	class:UnicodeString	signature:(const UnicodeString& text) const
UnicodeString::indexOf	unicode/unistr.h	/^UnicodeString::indexOf(const UnicodeString& text,$/;"	f	class:UnicodeString	signature:(const UnicodeString& text, int32_t start) const
UnicodeString::indexOf	unicode/unistr.h	/^UnicodeString::indexOf(const UnicodeString& text,$/;"	f	class:UnicodeString	signature:(const UnicodeString& text, int32_t start, int32_t _length) const
UnicodeString::indexOf	unistr.cpp	/^UnicodeString::indexOf(const UChar *srcChars,$/;"	f	class:UnicodeString	signature:(const UChar *srcChars, int32_t srcStart, int32_t srcLength, int32_t start, int32_t length) const
UnicodeString::insert	unicode/unistr.h	/^  inline UnicodeString& insert(int32_t start,$/;"	p	class:UnicodeString	access:public	signature:(int32_t start, UChar srcChar)
UnicodeString::insert	unicode/unistr.h	/^  inline UnicodeString& insert(int32_t start,$/;"	p	class:UnicodeString	access:public	signature:(int32_t start, UChar32 srcChar)
UnicodeString::insert	unicode/unistr.h	/^  inline UnicodeString& insert(int32_t start,$/;"	p	class:UnicodeString	access:public	signature:(int32_t start, const UChar *srcChars, int32_t srcLength)
UnicodeString::insert	unicode/unistr.h	/^  inline UnicodeString& insert(int32_t start,$/;"	p	class:UnicodeString	access:public	signature:(int32_t start, const UChar *srcChars, int32_t srcStart, int32_t srcLength)
UnicodeString::insert	unicode/unistr.h	/^  inline UnicodeString& insert(int32_t start,$/;"	p	class:UnicodeString	access:public	signature:(int32_t start, const UnicodeString& srcText)
UnicodeString::insert	unicode/unistr.h	/^  inline UnicodeString& insert(int32_t start,$/;"	p	class:UnicodeString	access:public	signature:(int32_t start, const UnicodeString& srcText, int32_t srcStart, int32_t srcLength)
UnicodeString::insert	unicode/unistr.h	/^UnicodeString::insert(int32_t start,$/;"	f	class:UnicodeString	signature:(int32_t start, UChar srcChar)
UnicodeString::insert	unicode/unistr.h	/^UnicodeString::insert(int32_t start,$/;"	f	class:UnicodeString	signature:(int32_t start, UChar32 srcChar)
UnicodeString::insert	unicode/unistr.h	/^UnicodeString::insert(int32_t start,$/;"	f	class:UnicodeString	signature:(int32_t start, const UChar *srcChars, int32_t srcLength)
UnicodeString::insert	unicode/unistr.h	/^UnicodeString::insert(int32_t start,$/;"	f	class:UnicodeString	signature:(int32_t start, const UChar *srcChars, int32_t srcStart, int32_t srcLength)
UnicodeString::insert	unicode/unistr.h	/^UnicodeString::insert(int32_t start,$/;"	f	class:UnicodeString	signature:(int32_t start, const UnicodeString& srcText)
UnicodeString::insert	unicode/unistr.h	/^UnicodeString::insert(int32_t start,$/;"	f	class:UnicodeString	signature:(int32_t start, const UnicodeString& srcText, int32_t srcStart, int32_t srcLength)
UnicodeString::isBogus	unicode/unistr.h	/^  inline UBool isBogus(void) const;$/;"	p	class:UnicodeString	access:public	signature:(void) const
UnicodeString::isBogus	unicode/unistr.h	/^UnicodeString::isBogus() const$/;"	f	class:UnicodeString	signature:() const
UnicodeString::isBufferWritable	unicode/unistr.h	/^  inline UBool isBufferWritable() const;$/;"	p	class:UnicodeString	access:private	signature:() const
UnicodeString::isBufferWritable	unicode/unistr.h	/^UnicodeString::isBufferWritable() const$/;"	f	class:UnicodeString	signature:() const
UnicodeString::isEmpty	unicode/unistr.h	/^  inline UBool isEmpty(void) const;$/;"	p	class:UnicodeString	access:public	signature:(void) const
UnicodeString::isEmpty	unicode/unistr.h	/^UnicodeString::isEmpty() const {$/;"	f	class:UnicodeString	signature:() const
UnicodeString::isWritable	unicode/unistr.h	/^  inline UBool isWritable() const;$/;"	p	class:UnicodeString	access:private	signature:() const
UnicodeString::isWritable	unicode/unistr.h	/^UnicodeString::isWritable() const$/;"	f	class:UnicodeString	signature:() const
UnicodeString::kBufferIsReadonly	unicode/unistr.h	/^    kBufferIsReadonly=8,\/\/ do not write to this buffer$/;"	e	enum:UnicodeString::__anon117
UnicodeString::kEmptyHashCode	unicode/unistr.h	/^    kEmptyHashCode=1, \/\/ hash code for empty string$/;"	e	enum:UnicodeString::__anon117
UnicodeString::kGrowSize	unicode/unistr.h	/^    kGrowSize=128, \/\/ grow size for this buffer$/;"	e	enum:UnicodeString::__anon117
UnicodeString::kInvalidHashCode	unicode/unistr.h	/^    kInvalidHashCode=0, \/\/ invalid hash code$/;"	e	enum:UnicodeString::__anon117
UnicodeString::kInvalidUChar	unicode/unistr.h	/^    kInvalidUChar=0xffff, \/\/ invalid UChar index$/;"	e	enum:UnicodeString::__anon117
UnicodeString::kInvariant	unicode/unistr.h	/^    kInvariant$/;"	e	enum:UnicodeString::EInvariant
UnicodeString::kIsBogus	unicode/unistr.h	/^    kIsBogus=1,         \/\/ this string is bogus, i.e., not valid or NULL$/;"	e	enum:UnicodeString::__anon117
UnicodeString::kLongString	unicode/unistr.h	/^    kLongString=kRefCounted,$/;"	e	enum:UnicodeString::__anon117
UnicodeString::kOpenGetBuffer	unicode/unistr.h	/^    kOpenGetBuffer=16,  \/\/ getBuffer(minCapacity) was called (is "open"),$/;"	e	enum:UnicodeString::__anon117
UnicodeString::kReadonlyAlias	unicode/unistr.h	/^    kReadonlyAlias=kBufferIsReadonly,$/;"	e	enum:UnicodeString::__anon117
UnicodeString::kRefCounted	unicode/unistr.h	/^    kRefCounted=4,      \/\/ there is a refCount field before the characters in fArray$/;"	e	enum:UnicodeString::__anon117
UnicodeString::kShortString	unicode/unistr.h	/^    kShortString=kUsingStackBuffer,$/;"	e	enum:UnicodeString::__anon117
UnicodeString::kUsingStackBuffer	unicode/unistr.h	/^    kUsingStackBuffer=2,\/\/ fArray==fStackBuffer$/;"	e	enum:UnicodeString::__anon117
UnicodeString::kWritableAlias	unicode/unistr.h	/^    kWritableAlias=0$/;"	e	enum:UnicodeString::__anon117
UnicodeString::lastIndexOf	unicode/unistr.h	/^  inline int32_t lastIndexOf(UChar c) const;$/;"	p	class:UnicodeString	access:public	signature:(UChar c) const
UnicodeString::lastIndexOf	unicode/unistr.h	/^  inline int32_t lastIndexOf(UChar c,$/;"	p	class:UnicodeString	access:public	signature:(UChar c, int32_t start) const
UnicodeString::lastIndexOf	unicode/unistr.h	/^  inline int32_t lastIndexOf(UChar c,$/;"	p	class:UnicodeString	access:public	signature:(UChar c, int32_t start, int32_t length) const
UnicodeString::lastIndexOf	unicode/unistr.h	/^  inline int32_t lastIndexOf(UChar32 c) const;$/;"	p	class:UnicodeString	access:public	signature:(UChar32 c) const
UnicodeString::lastIndexOf	unicode/unistr.h	/^  inline int32_t lastIndexOf(UChar32 c,$/;"	p	class:UnicodeString	access:public	signature:(UChar32 c, int32_t start) const
UnicodeString::lastIndexOf	unicode/unistr.h	/^  inline int32_t lastIndexOf(UChar32 c,$/;"	p	class:UnicodeString	access:public	signature:(UChar32 c, int32_t start, int32_t length) const
UnicodeString::lastIndexOf	unicode/unistr.h	/^  inline int32_t lastIndexOf(const UChar *srcChars,$/;"	p	class:UnicodeString	access:public	signature:(const UChar *srcChars, int32_t srcLength, int32_t start) const
UnicodeString::lastIndexOf	unicode/unistr.h	/^  inline int32_t lastIndexOf(const UChar *srcChars,$/;"	p	class:UnicodeString	access:public	signature:(const UChar *srcChars, int32_t srcLength, int32_t start, int32_t length) const
UnicodeString::lastIndexOf	unicode/unistr.h	/^  inline int32_t lastIndexOf(const UnicodeString& srcText,$/;"	p	class:UnicodeString	access:public	signature:(const UnicodeString& srcText, int32_t srcStart, int32_t srcLength, int32_t start, int32_t length) const
UnicodeString::lastIndexOf	unicode/unistr.h	/^  inline int32_t lastIndexOf(const UnicodeString& text) const;$/;"	p	class:UnicodeString	access:public	signature:(const UnicodeString& text) const
UnicodeString::lastIndexOf	unicode/unistr.h	/^  inline int32_t lastIndexOf(const UnicodeString& text,$/;"	p	class:UnicodeString	access:public	signature:(const UnicodeString& text, int32_t start) const
UnicodeString::lastIndexOf	unicode/unistr.h	/^  inline int32_t lastIndexOf(const UnicodeString& text,$/;"	p	class:UnicodeString	access:public	signature:(const UnicodeString& text, int32_t start, int32_t length) const
UnicodeString::lastIndexOf	unicode/unistr.h	/^  int32_t lastIndexOf(const UChar *srcChars,$/;"	p	class:UnicodeString	access:public	signature:(const UChar *srcChars, int32_t srcStart, int32_t srcLength, int32_t start, int32_t length) const
UnicodeString::lastIndexOf	unicode/unistr.h	/^UnicodeString::lastIndexOf(UChar c) const$/;"	f	class:UnicodeString	signature:(UChar c) const
UnicodeString::lastIndexOf	unicode/unistr.h	/^UnicodeString::lastIndexOf(UChar c,$/;"	f	class:UnicodeString	signature:(UChar c, int32_t start) const
UnicodeString::lastIndexOf	unicode/unistr.h	/^UnicodeString::lastIndexOf(UChar c,$/;"	f	class:UnicodeString	signature:(UChar c, int32_t start, int32_t _length) const
UnicodeString::lastIndexOf	unicode/unistr.h	/^UnicodeString::lastIndexOf(UChar32 c) const {$/;"	f	class:UnicodeString	signature:(UChar32 c) const
UnicodeString::lastIndexOf	unicode/unistr.h	/^UnicodeString::lastIndexOf(UChar32 c,$/;"	f	class:UnicodeString	signature:(UChar32 c, int32_t start) const
UnicodeString::lastIndexOf	unicode/unistr.h	/^UnicodeString::lastIndexOf(UChar32 c,$/;"	f	class:UnicodeString	signature:(UChar32 c, int32_t start, int32_t _length) const
UnicodeString::lastIndexOf	unicode/unistr.h	/^UnicodeString::lastIndexOf(const UChar *srcChars,$/;"	f	class:UnicodeString	signature:(const UChar *srcChars, int32_t srcLength, int32_t start) const
UnicodeString::lastIndexOf	unicode/unistr.h	/^UnicodeString::lastIndexOf(const UChar *srcChars,$/;"	f	class:UnicodeString	signature:(const UChar *srcChars, int32_t srcLength, int32_t start, int32_t _length) const
UnicodeString::lastIndexOf	unicode/unistr.h	/^UnicodeString::lastIndexOf(const UnicodeString& srcText,$/;"	f	class:UnicodeString	signature:(const UnicodeString& srcText, int32_t srcStart, int32_t srcLength, int32_t start, int32_t _length) const
UnicodeString::lastIndexOf	unicode/unistr.h	/^UnicodeString::lastIndexOf(const UnicodeString& text) const$/;"	f	class:UnicodeString	signature:(const UnicodeString& text) const
UnicodeString::lastIndexOf	unicode/unistr.h	/^UnicodeString::lastIndexOf(const UnicodeString& text,$/;"	f	class:UnicodeString	signature:(const UnicodeString& text, int32_t start) const
UnicodeString::lastIndexOf	unicode/unistr.h	/^UnicodeString::lastIndexOf(const UnicodeString& text,$/;"	f	class:UnicodeString	signature:(const UnicodeString& text, int32_t start, int32_t _length) const
UnicodeString::lastIndexOf	unistr.cpp	/^UnicodeString::lastIndexOf(const UChar *srcChars,$/;"	f	class:UnicodeString	signature:(const UChar *srcChars, int32_t srcStart, int32_t srcLength, int32_t start, int32_t length) const
UnicodeString::length	unicode/unistr.h	/^  inline int32_t length(void) const;$/;"	p	class:UnicodeString	access:public	signature:(void) const
UnicodeString::length	unicode/unistr.h	/^UnicodeString::length() const$/;"	f	class:UnicodeString	signature:() const
UnicodeString::moveIndex32	unicode/unistr.h	/^  int32_t moveIndex32(int32_t index, int32_t delta) const;$/;"	p	class:UnicodeString	access:public	signature:(int32_t index, int32_t delta) const
UnicodeString::moveIndex32	unistr.cpp	/^UnicodeString::moveIndex32(int32_t index, int32_t delta) const {$/;"	f	class:UnicodeString	signature:(int32_t index, int32_t delta) const
UnicodeString::operator !=	unicode/unistr.h	/^  inline UBool operator!= (const UnicodeString& text) const;$/;"	p	class:UnicodeString	access:public	signature:(const UnicodeString& text) const
UnicodeString::operator !=	unicode/unistr.h	/^UnicodeString::operator!= (const UnicodeString& text) const$/;"	f	class:UnicodeString	signature:(const UnicodeString& text) const
UnicodeString::operator +=	unicode/unistr.h	/^  inline UnicodeString& operator+= (const UnicodeString& srcText);$/;"	p	class:UnicodeString	access:public	signature:(const UnicodeString& srcText)
UnicodeString::operator +=	unicode/unistr.h	/^ inline  UnicodeString& operator+= (UChar ch);$/;"	p	class:UnicodeString	access:public	signature:(UChar ch)
UnicodeString::operator +=	unicode/unistr.h	/^ inline  UnicodeString& operator+= (UChar32 ch);$/;"	p	class:UnicodeString	access:public	signature:(UChar32 ch)
UnicodeString::operator +=	unicode/unistr.h	/^UnicodeString::operator+= (UChar ch)$/;"	f	class:UnicodeString	signature:(UChar ch)
UnicodeString::operator +=	unicode/unistr.h	/^UnicodeString::operator+= (UChar32 ch) {$/;"	f	class:UnicodeString	signature:(UChar32 ch)
UnicodeString::operator +=	unicode/unistr.h	/^UnicodeString::operator+= (const UnicodeString& srcText)$/;"	f	class:UnicodeString	signature:(const UnicodeString& srcText)
UnicodeString::operator <	unicode/unistr.h	/^  inline UBool operator< (const UnicodeString& text) const;$/;"	p	class:UnicodeString	access:public	signature:(const UnicodeString& text) const
UnicodeString::operator <	unicode/unistr.h	/^UnicodeString::operator< (const UnicodeString& text) const$/;"	f	class:UnicodeString	signature:(const UnicodeString& text) const
UnicodeString::operator <=	unicode/unistr.h	/^  inline UBool operator<= (const UnicodeString& text) const;$/;"	p	class:UnicodeString	access:public	signature:(const UnicodeString& text) const
UnicodeString::operator <=	unicode/unistr.h	/^UnicodeString::operator<= (const UnicodeString& text) const$/;"	f	class:UnicodeString	signature:(const UnicodeString& text) const
UnicodeString::operator =	unicode/unistr.h	/^  UnicodeString &operator=(const UnicodeString &srcText);$/;"	p	class:UnicodeString	access:public	signature:(const UnicodeString &srcText)
UnicodeString::operator =	unicode/unistr.h	/^  inline UnicodeString& operator= (UChar ch);$/;"	p	class:UnicodeString	access:public	signature:(UChar ch)
UnicodeString::operator =	unicode/unistr.h	/^  inline UnicodeString& operator= (UChar32 ch);$/;"	p	class:UnicodeString	access:public	signature:(UChar32 ch)
UnicodeString::operator =	unicode/unistr.h	/^UnicodeString::operator= (UChar ch)$/;"	f	class:UnicodeString	signature:(UChar ch)
UnicodeString::operator =	unicode/unistr.h	/^UnicodeString::operator= (UChar32 ch)$/;"	f	class:UnicodeString	signature:(UChar32 ch)
UnicodeString::operator =	unistr.cpp	/^UnicodeString::operator=(const UnicodeString &src) {$/;"	f	class:UnicodeString	signature:(const UnicodeString &src)
UnicodeString::operator ==	unicode/unistr.h	/^  inline UBool operator== (const UnicodeString& text) const;$/;"	p	class:UnicodeString	access:public	signature:(const UnicodeString& text) const
UnicodeString::operator ==	unicode/unistr.h	/^UnicodeString::operator== (const UnicodeString& text) const$/;"	f	class:UnicodeString	signature:(const UnicodeString& text) const
UnicodeString::operator >	unicode/unistr.h	/^  inline UBool operator> (const UnicodeString& text) const;$/;"	p	class:UnicodeString	access:public	signature:(const UnicodeString& text) const
UnicodeString::operator >	unicode/unistr.h	/^UnicodeString::operator> (const UnicodeString& text) const$/;"	f	class:UnicodeString	signature:(const UnicodeString& text) const
UnicodeString::operator >=	unicode/unistr.h	/^  inline UBool operator>= (const UnicodeString& text) const;$/;"	p	class:UnicodeString	access:public	signature:(const UnicodeString& text) const
UnicodeString::operator >=	unicode/unistr.h	/^UnicodeString::operator>= (const UnicodeString& text) const$/;"	f	class:UnicodeString	signature:(const UnicodeString& text) const
UnicodeString::operator []	unicode/unistr.h	/^  inline UChar operator[] (int32_t offset) const;$/;"	p	class:UnicodeString	access:public	signature:(int32_t offset) const
UnicodeString::operator []	unicode/unistr.h	/^UnicodeString::operator[] (int32_t offset) const$/;"	f	class:UnicodeString	signature:(int32_t offset) const
UnicodeString::padLeading	unicode/unistr.h	/^  UBool padLeading(int32_t targetLength,$/;"	p	class:UnicodeString	access:public	signature:(int32_t targetLength, UChar padChar = 0x0020)
UnicodeString::padLeading	unistr.cpp	/^UnicodeString::padLeading(int32_t targetLength,$/;"	f	class:UnicodeString	signature:(int32_t targetLength, UChar padChar)
UnicodeString::padTrailing	unicode/unistr.h	/^  UBool padTrailing(int32_t targetLength,$/;"	p	class:UnicodeString	access:public	signature:(int32_t targetLength, UChar padChar = 0x0020)
UnicodeString::padTrailing	unistr.cpp	/^UnicodeString::padTrailing(int32_t targetLength,$/;"	f	class:UnicodeString	signature:(int32_t targetLength, UChar padChar)
UnicodeString::pinIndex	unicode/unistr.h	/^  inline void pinIndex(int32_t& start) const;$/;"	p	class:UnicodeString	access:private	signature:(int32_t& start) const
UnicodeString::pinIndex	unicode/unistr.h	/^UnicodeString::pinIndex(int32_t& start) const$/;"	f	class:UnicodeString	signature:(int32_t& start) const
UnicodeString::pinIndices	unicode/unistr.h	/^  inline void pinIndices(int32_t& start,$/;"	p	class:UnicodeString	access:private	signature:(int32_t& start, int32_t& length) const
UnicodeString::pinIndices	unicode/unistr.h	/^UnicodeString::pinIndices(int32_t& start,$/;"	f	class:UnicodeString	signature:(int32_t& start, int32_t& _length) const
UnicodeString::refCount	unicode/unistr.h	/^  int32_t refCount(void) const;$/;"	p	class:UnicodeString	access:private	signature:(void) const
UnicodeString::refCount	unistr.cpp	/^UnicodeString::refCount() const $/;"	f	class:UnicodeString	signature:() const
UnicodeString::releaseArray	unicode/unistr.h	/^  void releaseArray(void);$/;"	p	class:UnicodeString	access:private	signature:(void)
UnicodeString::releaseArray	unistr.cpp	/^UnicodeString::releaseArray() {$/;"	f	class:UnicodeString	signature:()
UnicodeString::releaseBuffer	unicode/unistr.h	/^  void releaseBuffer(int32_t newLength=-1);$/;"	p	class:UnicodeString	access:public	signature:(int32_t newLength=-1)
UnicodeString::releaseBuffer	unistr.cpp	/^UnicodeString::releaseBuffer(int32_t newLength) {$/;"	f	class:UnicodeString	signature:(int32_t newLength)
UnicodeString::remove	unicode/unistr.h	/^  inline UnicodeString& remove(int32_t start,$/;"	p	class:UnicodeString	access:public	signature:(int32_t start, int32_t length = (int32_t)INT32_MAX)
UnicodeString::remove	unicode/unistr.h	/^  inline UnicodeString& remove(void);$/;"	p	class:UnicodeString	access:public	signature:(void)
UnicodeString::remove	unicode/unistr.h	/^UnicodeString::remove()$/;"	f	class:UnicodeString	signature:()
UnicodeString::remove	unicode/unistr.h	/^UnicodeString::remove(int32_t start,$/;"	f	class:UnicodeString	signature:(int32_t start, int32_t _length)
UnicodeString::removeBetween	unicode/unistr.h	/^  inline UnicodeString& removeBetween(int32_t start,$/;"	p	class:UnicodeString	access:public	signature:(int32_t start, int32_t limit = (int32_t)INT32_MAX)
UnicodeString::removeBetween	unicode/unistr.h	/^UnicodeString::removeBetween(int32_t start,$/;"	f	class:UnicodeString	signature:(int32_t start, int32_t limit)
UnicodeString::removeRef	unicode/unistr.h	/^  int32_t removeRef(void);$/;"	p	class:UnicodeString	access:private	signature:(void)
UnicodeString::removeRef	unistr.cpp	/^UnicodeString::removeRef()$/;"	f	class:UnicodeString	signature:()
UnicodeString::replace	unicode/unistr.h	/^  UnicodeString& replace(int32_t start,$/;"	p	class:UnicodeString	access:public	signature:(int32_t start, int32_t length, const UChar *srcChars, int32_t srcStart, int32_t srcLength)
UnicodeString::replace	unicode/unistr.h	/^  UnicodeString& replace(int32_t start,$/;"	p	class:UnicodeString	access:public	signature:(int32_t start, int32_t length, const UnicodeString& srcText)
UnicodeString::replace	unicode/unistr.h	/^  UnicodeString& replace(int32_t start,$/;"	p	class:UnicodeString	access:public	signature:(int32_t start, int32_t length, const UnicodeString& srcText, int32_t srcStart, int32_t srcLength)
UnicodeString::replace	unicode/unistr.h	/^  inline UnicodeString& replace(int32_t start,$/;"	p	class:UnicodeString	access:public	signature:(int32_t start, int32_t length, UChar srcChar)
UnicodeString::replace	unicode/unistr.h	/^  inline UnicodeString& replace(int32_t start,$/;"	p	class:UnicodeString	access:public	signature:(int32_t start, int32_t length, UChar32 srcChar)
UnicodeString::replace	unicode/unistr.h	/^  inline UnicodeString& replace(int32_t start,$/;"	p	class:UnicodeString	access:public	signature:(int32_t start, int32_t length, const UChar *srcChars, int32_t srcLength)
UnicodeString::replace	unicode/unistr.h	/^UnicodeString::replace(int32_t start,$/;"	f	class:UnicodeString	signature:(int32_t start, int32_t _length, UChar srcChar)
UnicodeString::replace	unicode/unistr.h	/^UnicodeString::replace(int32_t start,$/;"	f	class:UnicodeString	signature:(int32_t start, int32_t _length, UChar32 srcChar)
UnicodeString::replace	unicode/unistr.h	/^UnicodeString::replace(int32_t start,$/;"	f	class:UnicodeString	signature:(int32_t start, int32_t _length, const UChar *srcChars, int32_t srcLength)
UnicodeString::replace	unicode/unistr.h	/^UnicodeString::replace(int32_t start,$/;"	f	class:UnicodeString	signature:(int32_t start, int32_t _length, const UChar *srcChars, int32_t srcStart, int32_t srcLength)
UnicodeString::replace	unicode/unistr.h	/^UnicodeString::replace(int32_t start,$/;"	f	class:UnicodeString	signature:(int32_t start, int32_t _length, const UnicodeString& srcText)
UnicodeString::replace	unicode/unistr.h	/^UnicodeString::replace(int32_t start,$/;"	f	class:UnicodeString	signature:(int32_t start, int32_t _length, const UnicodeString& srcText, int32_t srcStart, int32_t srcLength)
UnicodeString::replaceBetween	unicode/unistr.h	/^  inline UnicodeString& replaceBetween(int32_t start,$/;"	p	class:UnicodeString	access:public	signature:(int32_t start, int32_t limit, const UnicodeString& srcText)
UnicodeString::replaceBetween	unicode/unistr.h	/^  inline UnicodeString& replaceBetween(int32_t start,$/;"	p	class:UnicodeString	access:public	signature:(int32_t start, int32_t limit, const UnicodeString& srcText, int32_t srcStart, int32_t srcLimit)
UnicodeString::replaceBetween	unicode/unistr.h	/^UnicodeString::replaceBetween(int32_t start,$/;"	f	class:UnicodeString	signature:(int32_t start, int32_t limit, const UnicodeString& srcText)
UnicodeString::replaceBetween	unicode/unistr.h	/^UnicodeString::replaceBetween(int32_t start,$/;"	f	class:UnicodeString	signature:(int32_t start, int32_t limit, const UnicodeString& srcText, int32_t srcStart, int32_t srcLimit)
UnicodeString::retainBetween	unicode/unistr.h	/^  inline UnicodeString &retainBetween(int32_t start, int32_t limit = INT32_MAX);$/;"	p	class:UnicodeString	access:public	signature:(int32_t start, int32_t limit = INT32_MAX)
UnicodeString::retainBetween	unicode/unistr.h	/^UnicodeString::retainBetween(int32_t start, int32_t limit) {$/;"	f	class:UnicodeString	signature:(int32_t start, int32_t limit)
UnicodeString::reverse	unicode/unistr.h	/^  inline UnicodeString& reverse(int32_t start,$/;"	p	class:UnicodeString	access:public	signature:(int32_t start, int32_t length)
UnicodeString::reverse	unicode/unistr.h	/^  inline UnicodeString& reverse(void);$/;"	p	class:UnicodeString	access:public	signature:(void)
UnicodeString::reverse	unicode/unistr.h	/^UnicodeString::reverse()$/;"	f	class:UnicodeString	signature:()
UnicodeString::reverse	unicode/unistr.h	/^UnicodeString::reverse(int32_t start,$/;"	f	class:UnicodeString	signature:(int32_t start, int32_t _length)
UnicodeString::setArray	unicode/unistr.h	/^  inline void setArray(UChar *array, int32_t len, int32_t capacity); \/\/ does not set fFlags$/;"	p	class:UnicodeString	access:private	signature:(UChar *array, int32_t len, int32_t capacity)
UnicodeString::setArray	unicode/unistr.h	/^UnicodeString::setArray(UChar *array, int32_t len, int32_t capacity) {$/;"	f	class:UnicodeString	signature:(UChar *array, int32_t len, int32_t capacity)
UnicodeString::setCharAt	unicode/unistr.h	/^  UnicodeString& setCharAt(int32_t offset,$/;"	p	class:UnicodeString	access:public	signature:(int32_t offset, UChar ch)
UnicodeString::setCharAt	unistr.cpp	/^UnicodeString::setCharAt(int32_t offset,$/;"	f	class:UnicodeString	signature:(int32_t offset, UChar c)
UnicodeString::setLength	unicode/unistr.h	/^  inline void setLength(int32_t len);        \/\/ sets only fShortLength and fLength$/;"	p	class:UnicodeString	access:private	signature:(int32_t len)
UnicodeString::setLength	unicode/unistr.h	/^UnicodeString::setLength(int32_t len) {$/;"	f	class:UnicodeString	signature:(int32_t len)
UnicodeString::setTo	unicode/unistr.h	/^  UnicodeString &setTo(UBool isTerminated,$/;"	p	class:UnicodeString	access:public	signature:(UBool isTerminated, const UChar *text, int32_t textLength)
UnicodeString::setTo	unicode/unistr.h	/^  UnicodeString &setTo(UChar *buffer,$/;"	p	class:UnicodeString	access:public	signature:(UChar *buffer, int32_t buffLength, int32_t buffCapacity)
UnicodeString::setTo	unicode/unistr.h	/^  UnicodeString& setTo(UChar srcChar);$/;"	p	class:UnicodeString	access:public	signature:(UChar srcChar)
UnicodeString::setTo	unicode/unistr.h	/^  UnicodeString& setTo(UChar32 srcChar);$/;"	p	class:UnicodeString	access:public	signature:(UChar32 srcChar)
UnicodeString::setTo	unicode/unistr.h	/^  inline UnicodeString& setTo(const UChar *srcChars,$/;"	p	class:UnicodeString	access:public	signature:(const UChar *srcChars, int32_t srcLength)
UnicodeString::setTo	unicode/unistr.h	/^  inline UnicodeString& setTo(const UnicodeString& srcText);$/;"	p	class:UnicodeString	access:public	signature:(const UnicodeString& srcText)
UnicodeString::setTo	unicode/unistr.h	/^  inline UnicodeString& setTo(const UnicodeString& srcText,$/;"	p	class:UnicodeString	access:public	signature:(const UnicodeString& srcText, int32_t srcStart)
UnicodeString::setTo	unicode/unistr.h	/^  inline UnicodeString& setTo(const UnicodeString& srcText,$/;"	p	class:UnicodeString	access:public	signature:(const UnicodeString& srcText, int32_t srcStart, int32_t srcLength)
UnicodeString::setTo	unicode/unistr.h	/^UnicodeString::setTo(UChar srcChar)$/;"	f	class:UnicodeString	signature:(UChar srcChar)
UnicodeString::setTo	unicode/unistr.h	/^UnicodeString::setTo(UChar32 srcChar)$/;"	f	class:UnicodeString	signature:(UChar32 srcChar)
UnicodeString::setTo	unicode/unistr.h	/^UnicodeString::setTo(const UChar *srcChars,$/;"	f	class:UnicodeString	signature:(const UChar *srcChars, int32_t srcLength)
UnicodeString::setTo	unicode/unistr.h	/^UnicodeString::setTo(const UnicodeString& srcText)$/;"	f	class:UnicodeString	signature:(const UnicodeString& srcText)
UnicodeString::setTo	unicode/unistr.h	/^UnicodeString::setTo(const UnicodeString& srcText,$/;"	f	class:UnicodeString	signature:(const UnicodeString& srcText, int32_t srcStart)
UnicodeString::setTo	unicode/unistr.h	/^UnicodeString::setTo(const UnicodeString& srcText,$/;"	f	class:UnicodeString	signature:(const UnicodeString& srcText, int32_t srcStart, int32_t srcLength)
UnicodeString::setTo	unistr.cpp	/^UnicodeString::setTo(UBool isTerminated,$/;"	f	class:UnicodeString	signature:(UBool isTerminated, const UChar *text, int32_t textLength)
UnicodeString::setTo	unistr.cpp	/^UnicodeString::setTo(UChar *buffer,$/;"	f	class:UnicodeString	signature:(UChar *buffer, int32_t buffLength, int32_t buffCapacity)
UnicodeString::setToBogus	unicode/unistr.h	/^  void setToBogus();$/;"	p	class:UnicodeString	access:public	signature:()
UnicodeString::setToBogus	unistr.cpp	/^UnicodeString::setToBogus()$/;"	f	class:UnicodeString	signature:()
UnicodeString::setToEmpty	unicode/unistr.h	/^  inline void setToEmpty();                  \/\/ sets fFlags=kShortString$/;"	p	class:UnicodeString	access:private	signature:()
UnicodeString::setToEmpty	unicode/unistr.h	/^UnicodeString::setToEmpty() {$/;"	f	class:UnicodeString	signature:()
UnicodeString::setToUTF8	unicode/unistr.h	/^  UnicodeString &setToUTF8(const StringPiece &utf8);$/;"	p	class:UnicodeString	access:private	signature:(const StringPiece &utf8)
UnicodeString::setToUTF8	unistr.cpp	/^UnicodeString &UnicodeString::setToUTF8(const StringPiece &utf8) {$/;"	f	class:UnicodeString	signature:(const StringPiece &utf8)
UnicodeString::startsWith	unicode/unistr.h	/^  inline UBool startsWith(const UChar *srcChars,$/;"	p	class:UnicodeString	access:public	signature:(const UChar *srcChars, int32_t srcLength) const
UnicodeString::startsWith	unicode/unistr.h	/^  inline UBool startsWith(const UChar *srcChars,$/;"	p	class:UnicodeString	access:public	signature:(const UChar *srcChars, int32_t srcStart, int32_t srcLength) const
UnicodeString::startsWith	unicode/unistr.h	/^  inline UBool startsWith(const UnicodeString& srcText,$/;"	p	class:UnicodeString	access:public	signature:(const UnicodeString& srcText, int32_t srcStart, int32_t srcLength) const
UnicodeString::startsWith	unicode/unistr.h	/^  inline UBool startsWith(const UnicodeString& text) const;$/;"	p	class:UnicodeString	access:public	signature:(const UnicodeString& text) const
UnicodeString::startsWith	unicode/unistr.h	/^UnicodeString::startsWith(const UChar *srcChars,$/;"	f	class:UnicodeString	signature:(const UChar *srcChars, int32_t srcLength) const
UnicodeString::startsWith	unicode/unistr.h	/^UnicodeString::startsWith(const UChar *srcChars,$/;"	f	class:UnicodeString	signature:(const UChar *srcChars, int32_t srcStart, int32_t srcLength) const
UnicodeString::startsWith	unicode/unistr.h	/^UnicodeString::startsWith(const UnicodeString& srcText,$/;"	f	class:UnicodeString	signature:(const UnicodeString& srcText, int32_t srcStart, int32_t srcLength) const
UnicodeString::startsWith	unicode/unistr.h	/^UnicodeString::startsWith(const UnicodeString& text) const$/;"	f	class:UnicodeString	signature:(const UnicodeString& text) const
UnicodeString::tempSubString	unicode/unistr.h	/^  UnicodeString tempSubString(int32_t start=0, int32_t length=INT32_MAX) const;$/;"	p	class:UnicodeString	access:public	signature:(int32_t start=0, int32_t length=INT32_MAX) const
UnicodeString::tempSubString	unistr.cpp	/^UnicodeString::tempSubString(int32_t start, int32_t len) const {$/;"	f	class:UnicodeString	signature:(int32_t start, int32_t len) const
UnicodeString::tempSubStringBetween	unicode/unistr.h	/^  inline UnicodeString tempSubStringBetween(int32_t start, int32_t limit=INT32_MAX) const;$/;"	p	class:UnicodeString	access:public	signature:(int32_t start, int32_t limit=INT32_MAX) const
UnicodeString::tempSubStringBetween	unicode/unistr.h	/^UnicodeString::tempSubStringBetween(int32_t start, int32_t limit) const {$/;"	f	class:UnicodeString	signature:(int32_t start, int32_t limit) const
UnicodeString::toLower	unicode/unistr.h	/^  UnicodeString& toLower(const Locale& locale);$/;"	p	class:UnicodeString	access:public	signature:(const Locale& locale)
UnicodeString::toLower	unicode/unistr.h	/^  UnicodeString& toLower(void);$/;"	p	class:UnicodeString	access:public	signature:(void)
UnicodeString::toLower	unistr_case.cpp	/^UnicodeString::toLower() {$/;"	f	class:UnicodeString	signature:()
UnicodeString::toLower	unistr_case.cpp	/^UnicodeString::toLower(const Locale &locale) {$/;"	f	class:UnicodeString	signature:(const Locale &locale)
UnicodeString::toTitle	unicode/unistr.h	/^  UnicodeString &toTitle(BreakIterator *titleIter);$/;"	p	class:UnicodeString	access:public	signature:(BreakIterator *titleIter)
UnicodeString::toTitle	unicode/unistr.h	/^  UnicodeString &toTitle(BreakIterator *titleIter, const Locale &locale);$/;"	p	class:UnicodeString	access:public	signature:(BreakIterator *titleIter, const Locale &locale)
UnicodeString::toTitle	unicode/unistr.h	/^  UnicodeString &toTitle(BreakIterator *titleIter, const Locale &locale, uint32_t options);$/;"	p	class:UnicodeString	access:public	signature:(BreakIterator *titleIter, const Locale &locale, uint32_t options)
UnicodeString::toTitle	unistr_case.cpp	/^UnicodeString::toTitle(BreakIterator *titleIter) {$/;"	f	class:UnicodeString	signature:(BreakIterator *titleIter)
UnicodeString::toTitle	unistr_case.cpp	/^UnicodeString::toTitle(BreakIterator *titleIter, const Locale &locale) {$/;"	f	class:UnicodeString	signature:(BreakIterator *titleIter, const Locale &locale)
UnicodeString::toTitle	unistr_case.cpp	/^UnicodeString::toTitle(BreakIterator *titleIter, const Locale &locale, uint32_t options) {$/;"	f	class:UnicodeString	signature:(BreakIterator *titleIter, const Locale &locale, uint32_t options)
UnicodeString::toUTF32	unicode/unistr.h	/^  int32_t toUTF32(UChar32 *utf32, int32_t capacity, UErrorCode &errorCode) const;$/;"	p	class:UnicodeString	access:public	signature:(UChar32 *utf32, int32_t capacity, UErrorCode &errorCode) const
UnicodeString::toUTF32	unistr.cpp	/^UnicodeString::toUTF32(UChar32 *utf32, int32_t capacity, UErrorCode &errorCode) const {$/;"	f	class:UnicodeString	signature:(UChar32 *utf32, int32_t capacity, UErrorCode &errorCode) const
UnicodeString::toUTF8	unicode/unistr.h	/^  toUTF8(int32_t start, int32_t len,$/;"	p	class:UnicodeString	access:private	signature:(int32_t start, int32_t len, char *target, int32_t capacity) const
UnicodeString::toUTF8	unicode/unistr.h	/^  void toUTF8(ByteSink &sink) const;$/;"	p	class:UnicodeString	access:public	signature:(ByteSink &sink) const
UnicodeString::toUTF8	unistr.cpp	/^UnicodeString::toUTF8(ByteSink &sink) const {$/;"	f	class:UnicodeString	signature:(ByteSink &sink) const
UnicodeString::toUTF8	unistr.cpp	/^UnicodeString::toUTF8(int32_t start, int32_t len,$/;"	f	class:UnicodeString	signature:(int32_t start, int32_t len, char *target, int32_t capacity) const
UnicodeString::toUTF8String	unicode/unistr.h	/^  StringClass &toUTF8String(StringClass &result) const {$/;"	f	class:UnicodeString	access:public	signature:(StringClass &result) const
UnicodeString::toUpper	unicode/unistr.h	/^  UnicodeString& toUpper(const Locale& locale);$/;"	p	class:UnicodeString	access:public	signature:(const Locale& locale)
UnicodeString::toUpper	unicode/unistr.h	/^  UnicodeString& toUpper(void);$/;"	p	class:UnicodeString	access:public	signature:(void)
UnicodeString::toUpper	unistr_case.cpp	/^UnicodeString::toUpper() {$/;"	f	class:UnicodeString	signature:()
UnicodeString::toUpper	unistr_case.cpp	/^UnicodeString::toUpper(const Locale &locale) {$/;"	f	class:UnicodeString	signature:(const Locale &locale)
UnicodeString::trim	unicode/unistr.h	/^  UnicodeString& trim(void);$/;"	p	class:UnicodeString	access:public	signature:(void)
UnicodeString::trim	unistr_props.cpp	/^UnicodeString::trim()$/;"	f	class:UnicodeString	signature:()
UnicodeString::truncate	unicode/unistr.h	/^  inline UBool truncate(int32_t targetLength);$/;"	p	class:UnicodeString	access:public	signature:(int32_t targetLength)
UnicodeString::truncate	unicode/unistr.h	/^UnicodeString::truncate(int32_t targetLength)$/;"	f	class:UnicodeString	signature:(int32_t targetLength)
UnicodeString::unBogus	unicode/unistr.h	/^  void unBogus();$/;"	p	class:UnicodeString	access:private	signature:()
UnicodeString::unBogus	unistr.cpp	/^UnicodeString::unBogus() {$/;"	f	class:UnicodeString	signature:()
UnicodeString::unescape	unicode/unistr.h	/^  UnicodeString unescape() const;$/;"	p	class:UnicodeString	access:public	signature:() const
UnicodeString::unescape	unistr.cpp	/^UnicodeString UnicodeString::unescape() const {$/;"	f	class:UnicodeString	signature:() const
UnicodeString::unescapeAt	unicode/unistr.h	/^  UChar32 unescapeAt(int32_t &offset) const;$/;"	p	class:UnicodeString	access:public	signature:(int32_t &offset) const
UnicodeString::unescapeAt	unistr.cpp	/^UChar32 UnicodeString::unescapeAt(int32_t &offset) const {$/;"	f	class:UnicodeString	signature:(int32_t &offset) const
UnicodeString::~UnicodeString	unicode/unistr.h	/^  virtual ~UnicodeString();$/;"	p	class:UnicodeString	access:public	signature:()
UnicodeString::~UnicodeString	unistr.cpp	/^UnicodeString::~UnicodeString()$/;"	f	class:UnicodeString	signature:()
UnicodeString_charAt	unistr.cpp	/^UnicodeString_charAt(int32_t offset, void *context) {$/;"	f	file:	signature:(int32_t offset, void *context)
UppercaseTransliterator	unicode/urename.h	2215;"	d
Urs	ucnvscsu.c	/^    Urs=0xF2  \/* reserved *\/$/;"	e	enum:__anon152	file:
VALID_MAYBE_TERMINAL_2022	ucnv2022.c	/^        VALID_MAYBE_TERMINAL_2022 = 2 \/*so far matches one iso 2022 escape sequence, but by adding more characters might match another escape sequence*\/$/;"	e	enum:__anon69	file:
VALID_NON_TERMINAL_2022	ucnv2022.c	/^        VALID_NON_TERMINAL_2022 = 0, \/*so far corresponds to a valid iso 2022 escape sequence*\/$/;"	e	enum:__anon69	file:
VALID_TERMINAL_2022	ucnv2022.c	/^        VALID_TERMINAL_2022 = 1, \/*corresponds to a valid iso 2022 escape sequence*\/$/;"	e	enum:__anon69	file:
VALUES_BUF_SIZE	uresbund.c	2658;"	d	file:
VALUES_LIST_SIZE	uresbund.c	2659;"	d	file:
VALUE_STRING_LENGTH	ucnv_err.c	29;"	d	file:
VARIANT_MAP	uloc.c	/^static const VariantMap VARIANT_MAP[] = {$/;"	v	file:
VART	uloc_tag.c	1635;"	d	file:
VC_EXTRALEAN	putil.c	83;"	d	file:
VC_EXTRALEAN	ucln_imp.h	126;"	d
VC_EXTRALEAN	umapfile.c	27;"	d	file:
VC_EXTRALEAN	umutex.c	66;"	d	file:
VC_EXTRALEAN	wintz.c	25;"	d	file:
VOCALLIC_RR	ucnvisci.c	48;"	d	file:
VTZReader	unicode/urename.h	2216;"	d
VTZWriter	unicode/urename.h	2217;"	d
VTimeZone	unicode/urename.h	2218;"	d
V_TAB	ucnv2022.c	84;"	d	file:
ValueMap	propname.h	/^struct ValueMap {$/;"	s
ValueMap::enumToName_offset	propname.h	/^    Offset enumToName_offset;$/;"	m	struct:ValueMap	access:public
ValueMap::nameToEnum_offset	propname.h	/^    Offset nameToEnum_offset; \/*  Name=>enum data *\/$/;"	m	struct:ValueMap	access:public
ValueMap::ncEnumToName_offset	propname.h	/^    Offset ncEnumToName_offset;$/;"	m	struct:ValueMap	access:public
ValueRecord	unicode/urename.h	2219;"	d
ValueRuns	unicode/urename.h	2220;"	d
Variant2022	ucnv2022.c	/^} Variant2022;$/;"	t	typeref:enum:__anon70	file:
VariantListEntry	uloc_tag.c	/^typedef struct VariantListEntry {$/;"	s	file:
VariantListEntry	uloc_tag.c	/^} VariantListEntry;$/;"	t	typeref:struct:VariantListEntry	file:
VariantListEntry::next	uloc_tag.c	/^    struct VariantListEntry *next;$/;"	m	struct:VariantListEntry	typeref:struct:VariantListEntry::VariantListEntry	file:	access:public
VariantListEntry::variant	uloc_tag.c	/^    const char              *variant;$/;"	m	struct:VariantListEntry	file:	access:public
VariantMap	uloc.c	/^typedef struct VariantMap {$/;"	s	file:
VariantMap	uloc.c	/^} VariantMap;$/;"	t	typeref:struct:VariantMap	file:
VariantMap::keyword	uloc.c	/^    const char *keyword;     \/* keyword, or NULL if none *\/$/;"	m	struct:VariantMap	file:	access:public
VariantMap::value	uloc.c	/^    const char *value;       \/* keyword value, or NULL if kw==NULL *\/$/;"	m	struct:VariantMap	file:	access:public
VariantMap::variant	uloc.c	/^    const char *variant;          \/* input ID *\/$/;"	m	struct:VariantMap	file:	access:public
WIN32_LEAN_AND_MEAN	putil.c	82;"	d	file:
WIN32_LEAN_AND_MEAN	ucln_imp.h	125;"	d
WIN32_LEAN_AND_MEAN	umapfile.c	26;"	d	file:
WIN32_LEAN_AND_MEAN	umutex.c	65;"	d	file:
WIN32_LEAN_AND_MEAN	wintz.c	24;"	d	file:
WIN_2K_XP_TYPE	wintz.c	/^    WIN_2K_XP_TYPE = 3$/;"	e	enum:__anon2	file:
WIN_9X_ME_TYPE	wintz.c	/^    WIN_9X_ME_TYPE = 1,$/;"	e	enum:__anon2	file:
WIN_NT_TYPE	wintz.c	/^    WIN_NT_TYPE = 2,$/;"	e	enum:__anon2	file:
WIN_TYPE_PROBE_REGKEY	wintz.c	/^static const char* const WIN_TYPE_PROBE_REGKEY[] = {$/;"	v	file:
WJ	uprops.h	/^    WJ      =0x2060,$/;"	e	enum:__anon90
WRITE_CHAR	unames.c	236;"	d	file:
WRITE_TO_TARGET_FROM_U	ucnvisci.c	825;"	d	file:
WRITE_TO_TARGET_TO_U	ucnvisci.c	1113;"	d	file:
WS	ubidiimp.h	/^    WS= U_WHITE_SPACE_NEUTRAL,$/;"	e	enum:__anon82
XMutex	serv.cpp	/^    inline XMutex(UMTX *mutex, UBool reentering) $/;"	f	class:XMutex	access:public	signature:(UMTX *mutex, UBool reentering)
XMutex	serv.cpp	/^class XMutex : public UMemory {$/;"	c	file:	inherits:UMemory
XMutex::XMutex	serv.cpp	/^    inline XMutex(UMTX *mutex, UBool reentering) $/;"	f	class:XMutex	access:public	signature:(UMTX *mutex, UBool reentering)
XMutex::fActive	serv.cpp	/^    UBool fActive;$/;"	m	class:XMutex	file:	access:private
XMutex::fMutex	serv.cpp	/^    UMTX  *fMutex;$/;"	m	class:XMutex	file:	access:private
XMutex::~XMutex	serv.cpp	/^    inline ~XMutex() {$/;"	f	class:XMutex	access:public	signature:()
XP_CPLUSPLUS	unicode/umachine.h	68;"	d
XP_CPLUSPLUS	unicode/umachine.h	71;"	d
YEH_HAMZAFE_CHAR	ushape.c	65;"	d	file:
YEH_HAMZA_CHAR	ushape.c	64;"	d	file:
ZERO	ucnv_io.c	/^    ZERO,$/;"	e	enum:__anon129	file:
ZERO	ucnvisci.c	/^    ZERO =0x00$/;"	e	enum:__anon15	file:
ZSFCache	unicode/urename.h	2221;"	d
ZSFCacheEntry	unicode/urename.h	2222;"	d
ZSFStringPool	unicode/urename.h	2223;"	d
ZSFStringPoolChunk	unicode/urename.h	2224;"	d
ZWJ	ucnvisci.c	34;"	d	file:
ZWJ	uprops.h	/^    ZWJ     =0x200d,$/;"	e	enum:__anon90
ZWJ_CHAR	ubidiimp.h	/^    ZWJ_CHAR,$/;"	e	enum:__anon84
ZWNBSP	uprops.h	/^    ZWNBSP  =0xfeff$/;"	e	enum:__anon90
ZWNJ	ucnvisci.c	33;"	d	file:
ZWNJ	uprops.h	/^    ZWNJ    =0x200c,$/;"	e	enum:__anon90
ZWNJ_CHAR	ubidiimp.h	/^    ZWNJ_CHAR=0x200c,$/;"	e	enum:__anon84
ZoneMeta	unicode/urename.h	2225;"	d
ZoneStringFormat	unicode/urename.h	2226;"	d
ZoneStringInfo	unicode/urename.h	2227;"	d
ZoneStringSearchResultHandler	unicode/urename.h	2228;"	d
ZoneStrings	unicode/urename.h	2229;"	d
_2022FromGR94DBCS	ucnv2022.c	/^_2022FromGR94DBCS(uint32_t value) {$/;"	f	file:	signature:(uint32_t value)
_2022FromSJIS	ucnv2022.c	/^_2022FromSJIS(uint32_t value) {$/;"	f	file:	signature:(uint32_t value)
_2022ToSJIS	ucnv2022.c	/^_2022ToSJIS(uint8_t c1, uint8_t c2, char bytes[2]) {$/;"	f	file:	signature:(uint8_t c1, uint8_t c2, char bytes[2])
_ASCIIData	ucnv_cnv.h	/^    _HZData,_ISCIIData, _SCSUData, _ASCIIData,$/;"	x
_ASCIIData	ucnvlat1.c	/^const UConverterSharedData _ASCIIData={$/;"	v
_ASCIIData	unicode/urename.h	75;"	d
_ASCIIGetNextUChar	ucnvlat1.c	/^_ASCIIGetNextUChar(UConverterToUnicodeArgs *pArgs,$/;"	f	file:	signature:(UConverterToUnicodeArgs *pArgs, UErrorCode *pErrorCode)
_ASCIIGetUnicodeSet	ucnvlat1.c	/^_ASCIIGetUnicodeSet(const UConverter *cnv,$/;"	f	file:	signature:(const UConverter *cnv, const USetAdder *sa, UConverterUnicodeSet which, UErrorCode *pErrorCode)
_ASCIIImpl	ucnvlat1.c	/^static const UConverterImpl _ASCIIImpl={$/;"	v	file:
_ASCIIStaticData	ucnvlat1.c	/^static const UConverterStaticData _ASCIIStaticData={$/;"	v	file:
_ASCIIToUnicodeWithOffsets	ucnvlat1.c	/^_ASCIIToUnicodeWithOffsets(UConverterToUnicodeArgs *pArgs,$/;"	f	file:	signature:(UConverterToUnicodeArgs *pArgs, UErrorCode *pErrorCode)
_BUFFER_CAPACITY_MULTIPLIER	ustr_wcs.c	38;"	d	file:
_Bocu1Data	ucnv_cnv.h	/^    _UTF7Data, _Bocu1Data, _UTF16Data, _UTF32Data, _CESU8Data, _IMAPData;$/;"	x
_Bocu1Data	ucnvbocu.c	/^const UConverterSharedData _Bocu1Data={$/;"	v
_Bocu1Data	unicode/urename.h	76;"	d
_Bocu1FromUnicode	ucnvbocu.c	/^_Bocu1FromUnicode(UConverterFromUnicodeArgs *pArgs,$/;"	f	file:	signature:(UConverterFromUnicodeArgs *pArgs, UErrorCode *pErrorCode)
_Bocu1FromUnicodeWithOffsets	ucnvbocu.c	/^_Bocu1FromUnicodeWithOffsets(UConverterFromUnicodeArgs *pArgs,$/;"	f	file:	signature:(UConverterFromUnicodeArgs *pArgs, UErrorCode *pErrorCode)
_Bocu1Impl	ucnvbocu.c	/^static const UConverterImpl _Bocu1Impl={$/;"	v	file:
_Bocu1StaticData	ucnvbocu.c	/^static const UConverterStaticData _Bocu1StaticData={$/;"	v	file:
_Bocu1ToUnicode	ucnvbocu.c	/^_Bocu1ToUnicode(UConverterToUnicodeArgs *pArgs,$/;"	f	file:	signature:(UConverterToUnicodeArgs *pArgs, UErrorCode *pErrorCode)
_Bocu1ToUnicodeWithOffsets	ucnvbocu.c	/^_Bocu1ToUnicodeWithOffsets(UConverterToUnicodeArgs *pArgs,$/;"	f	file:	signature:(UConverterToUnicodeArgs *pArgs, UErrorCode *pErrorCode)
_CAPITAL_A	punycode.c	77;"	d	file:
_CAPITAL_Z	punycode.c	78;"	d	file:
_CESU8Data	ucnv_cnv.h	/^    _UTF7Data, _Bocu1Data, _UTF16Data, _UTF32Data, _CESU8Data, _IMAPData;$/;"	x
_CESU8Data	ucnv_u8.c	/^const UConverterSharedData _CESU8Data={$/;"	v
_CESU8Data	unicode/urename.h	77;"	d
_CESU8Impl	ucnv_u8.c	/^static const UConverterImpl _CESU8Impl={$/;"	v	file:
_CESU8StaticData	ucnv_u8.c	/^static const UConverterStaticData _CESU8StaticData={$/;"	v	file:
_COMPARE_EQUIV	unormcmp.cpp	139;"	d	file:
_Cc	uprops.h	264;"	d
_Cf	uprops.h	265;"	d
_Cn	uprops.h	249;"	d
_Co	uprops.h	266;"	d
_ConvertBCP47	uloc.c	534;"	d	file:
_Cs	uprops.h	267;"	d
_DBCSUTF8Impl	ucnvmbcs.c	/^static const UConverterImpl _DBCSUTF8Impl;$/;"	v	file:
_DBCSUTF8Impl	ucnvmbcs.c	/^static const UConverterImpl _DBCSUTF8Impl={$/;"	v	file:
_EBCDICSwapLFNL	ucnvmbcs.c	/^_EBCDICSwapLFNL(UConverterSharedData *sharedData, UErrorCode *pErrorCode) {$/;"	f	file:	signature:(UConverterSharedData *sharedData, UErrorCode *pErrorCode)
_EnumTypeCallback	uchar.c	/^struct _EnumTypeCallback {$/;"	s	file:
_EnumTypeCallback::context	uchar.c	/^    const void *context;$/;"	m	struct:_EnumTypeCallback	file:	access:public
_EnumTypeCallback::enumRange	uchar.c	/^    UCharEnumTypeRange *enumRange;$/;"	m	struct:_EnumTypeCallback	file:	access:public
_FOLD_CASE_OPTIONS_MASK	ucase.h	76;"	d
_HYPHEN	punycode.c	68;"	d	file:
_HZClose	ucnvhz.c	/^_HZClose(UConverter *cnv){$/;"	f	file:	signature:(UConverter *cnv)
_HZData	ucnv_cnv.h	/^    _HZData,_ISCIIData, _SCSUData, _ASCIIData,$/;"	x
_HZData	ucnvhz.c	/^const UConverterSharedData _HZData={$/;"	v
_HZData	unicode/urename.h	78;"	d
_HZImpl	ucnvhz.c	/^static const UConverterImpl _HZImpl={$/;"	v	file:
_HZOpen	ucnvhz.c	/^_HZOpen(UConverter *cnv, UConverterLoadArgs *pArgs, UErrorCode *errorCode){$/;"	f	file:	signature:(UConverter *cnv, UConverterLoadArgs *pArgs, UErrorCode *errorCode)
_HZReset	ucnvhz.c	/^_HZReset(UConverter *cnv, UConverterResetChoice choice){$/;"	f	file:	signature:(UConverter *cnv, UConverterResetChoice choice)
_HZStaticData	ucnvhz.c	/^static const UConverterStaticData _HZStaticData={$/;"	v	file:
_HZ_GetUnicodeSet	ucnvhz.c	/^_HZ_GetUnicodeSet(const UConverter *cnv,$/;"	f	file:	signature:(const UConverter *cnv, const USetAdder *sa, UConverterUnicodeSet which, UErrorCode *pErrorCode)
_HZ_SafeClone	ucnvhz.c	/^_HZ_SafeClone(const UConverter *cnv, $/;"	f	file:	signature:(const UConverter *cnv, void *stackBuffer, int32_t *pBufferSize, UErrorCode *status)
_HZ_WriteSub	ucnvhz.c	/^_HZ_WriteSub(UConverterFromUnicodeArgs *args, int32_t offsetIndex, UErrorCode *err) {$/;"	f	file:	signature:(UConverterFromUnicodeArgs *args, int32_t offsetIndex, UErrorCode *err)
_IMAPData	ucnv_cnv.h	/^    _UTF7Data, _Bocu1Data, _UTF16Data, _UTF32Data, _CESU8Data, _IMAPData;$/;"	x
_IMAPData	ucnv_u7.c	/^const UConverterSharedData _IMAPData={$/;"	v
_IMAPData	unicode/urename.h	79;"	d
_IMAPFromUnicodeWithOffsets	ucnv_u7.c	/^_IMAPFromUnicodeWithOffsets(UConverterFromUnicodeArgs *pArgs,$/;"	f	file:	signature:(UConverterFromUnicodeArgs *pArgs, UErrorCode *pErrorCode)
_IMAPImpl	ucnv_u7.c	/^static const UConverterImpl _IMAPImpl={$/;"	v	file:
_IMAPStaticData	ucnv_u7.c	/^static const UConverterStaticData _IMAPStaticData={$/;"	v	file:
_IMAPToUnicodeWithOffsets	ucnv_u7.c	/^_IMAPToUnicodeWithOffsets(UConverterToUnicodeArgs *pArgs,$/;"	f	file:	signature:(UConverterToUnicodeArgs *pArgs, UErrorCode *pErrorCode)
_ISCIIClose	ucnvisci.c	/^static void _ISCIIClose(UConverter *cnv) {$/;"	f	file:	signature:(UConverter *cnv)
_ISCIIData	ucnv_cnv.h	/^    _HZData,_ISCIIData, _SCSUData, _ASCIIData,$/;"	x
_ISCIIData	ucnvisci.c	/^const UConverterSharedData _ISCIIData={$/;"	v
_ISCIIData	unicode/urename.h	80;"	d
_ISCIIGetUnicodeSet	ucnvisci.c	/^_ISCIIGetUnicodeSet(const UConverter *cnv,$/;"	f	file:	signature:(const UConverter *cnv, const USetAdder *sa, UConverterUnicodeSet which, UErrorCode *pErrorCode)
_ISCIIImpl	ucnvisci.c	/^static const UConverterImpl _ISCIIImpl={$/;"	v	file:
_ISCIIOpen	ucnvisci.c	/^static void _ISCIIOpen(UConverter *cnv, UConverterLoadArgs *pArgs, UErrorCode *errorCode) {$/;"	f	file:	signature:(UConverter *cnv, UConverterLoadArgs *pArgs, UErrorCode *errorCode)
_ISCIIReset	ucnvisci.c	/^static void _ISCIIReset(UConverter *cnv, UConverterResetChoice choice) {$/;"	f	file:	signature:(UConverter *cnv, UConverterResetChoice choice)
_ISCIIStaticData	ucnvisci.c	/^static const UConverterStaticData _ISCIIStaticData={$/;"	v	file:
_ISCII_SafeClone	ucnvisci.c	/^_ISCII_SafeClone(const UConverter *cnv,$/;"	f	file:	signature:(const UConverter *cnv, void *stackBuffer, int32_t *pBufferSize, UErrorCode *status)
_ISCIIgetName	ucnvisci.c	/^static const char* _ISCIIgetName(const UConverter* cnv) {$/;"	f	file:	signature:(const UConverter* cnv)
_ISO2022CNData	ucnv2022.c	/^static const UConverterSharedData _ISO2022CNData;$/;"	v	file:
_ISO2022CNData	ucnv2022.c	/^static const UConverterSharedData _ISO2022CNData={$/;"	v	file:
_ISO2022CNImpl	ucnv2022.c	/^static const UConverterImpl _ISO2022CNImpl={$/;"	v	file:
_ISO2022CNStaticData	ucnv2022.c	/^static const UConverterStaticData _ISO2022CNStaticData={$/;"	v	file:
_ISO2022Close	ucnv2022.c	/^ _ISO2022Close(UConverter *converter);$/;"	p	file:	signature:(UConverter *converter)
_ISO2022Close	ucnv2022.c	/^_ISO2022Close(UConverter *converter) {$/;"	f	file:	signature:(UConverter *converter)
_ISO2022Data	ucnv2022.c	/^const UConverterSharedData _ISO2022Data={$/;"	v
_ISO2022Data	ucnv_cnv.h	/^    _ISO2022Data, $/;"	x
_ISO2022Data	unicode/urename.h	81;"	d
_ISO2022Impl	ucnv2022.c	/^static const UConverterImpl _ISO2022Impl={$/;"	v	file:
_ISO2022JPData	ucnv2022.c	/^static const UConverterSharedData _ISO2022JPData;$/;"	v	file:
_ISO2022JPData	ucnv2022.c	/^static const UConverterSharedData _ISO2022JPData={$/;"	v	file:
_ISO2022JPImpl	ucnv2022.c	/^static const UConverterImpl _ISO2022JPImpl={$/;"	v	file:
_ISO2022JPStaticData	ucnv2022.c	/^static const UConverterStaticData _ISO2022JPStaticData={$/;"	v	file:
_ISO2022KRData	ucnv2022.c	/^static const UConverterSharedData _ISO2022KRData;$/;"	v	file:
_ISO2022KRData	ucnv2022.c	/^static const UConverterSharedData _ISO2022KRData={$/;"	v	file:
_ISO2022KRImpl	ucnv2022.c	/^static const UConverterImpl _ISO2022KRImpl={$/;"	v	file:
_ISO2022KRStaticData	ucnv2022.c	/^static const UConverterStaticData _ISO2022KRStaticData={$/;"	v	file:
_ISO2022Open	ucnv2022.c	/^_ISO2022Open(UConverter *cnv, UConverterLoadArgs *pArgs, UErrorCode *errorCode);$/;"	p	file:	signature:(UConverter *cnv, UConverterLoadArgs *pArgs, UErrorCode *errorCode)
_ISO2022Open	ucnv2022.c	/^_ISO2022Open(UConverter *cnv, UConverterLoadArgs *pArgs, UErrorCode *errorCode){$/;"	f	file:	signature:(UConverter *cnv, UConverterLoadArgs *pArgs, UErrorCode *errorCode)
_ISO2022Reset	ucnv2022.c	/^_ISO2022Reset(UConverter *converter, UConverterResetChoice choice) {$/;"	f	file:	signature:(UConverter *converter, UConverterResetChoice choice)
_ISO2022Reset	ucnv2022.c	/^_ISO2022Reset(UConverter *converter, UConverterResetChoice choice);$/;"	p	file:	signature:(UConverter *converter, UConverterResetChoice choice)
_ISO2022StaticData	ucnv2022.c	/^static const UConverterStaticData _ISO2022StaticData={$/;"	v	file:
_ISO2022getName	ucnv2022.c	/^_ISO2022getName(const UConverter* cnv);$/;"	p	file:	signature:(const UConverter* cnv)
_ISO2022getName	ucnv2022.c	/^_ISO2022getName(const UConverter* cnv){$/;"	f	file:	signature:(const UConverter* cnv)
_ISO_2022_GetUnicodeSet	ucnv2022.c	/^_ISO_2022_GetUnicodeSet(const UConverter *cnv,$/;"	f	file:	signature:(const UConverter *cnv, const USetAdder *sa, UConverterUnicodeSet which, UErrorCode *pErrorCode)
_ISO_2022_SafeClone	ucnv2022.c	/^_ISO_2022_SafeClone($/;"	f	file:	signature:( const UConverter *cnv, void *stackBuffer, int32_t *pBufferSize, UErrorCode *status)
_ISO_2022_SafeClone	ucnv2022.c	/^_ISO_2022_SafeClone(const UConverter *cnv, void *stackBuffer, int32_t *pBufferSize, UErrorCode *status);$/;"	p	file:	signature:(const UConverter *cnv, void *stackBuffer, int32_t *pBufferSize, UErrorCode *status)
_ISO_2022_WriteSub	ucnv2022.c	/^_ISO_2022_WriteSub(UConverterFromUnicodeArgs *args, int32_t offsetIndex, UErrorCode *err) {$/;"	f	file:	signature:(UConverterFromUnicodeArgs *args, int32_t offsetIndex, UErrorCode *err)
_ISO_2022_WriteSub	ucnv2022.c	/^_ISO_2022_WriteSub(UConverterFromUnicodeArgs *args, int32_t offsetIndex, UErrorCode *err);$/;"	p	file:	signature:(UConverterFromUnicodeArgs *args, int32_t offsetIndex, UErrorCode *err)
_LMBCSClose	ucnv_lmb.c	/^_LMBCSClose(UConverter *   _this) $/;"	f	file:	signature:(UConverter * _this)
_LMBCSClose	ucnv_lmb.c	/^static void _LMBCSClose(UConverter * _this);$/;"	p	file:	signature:(UConverter * _this)
_LMBCSData1	ucnv_cnv.h	/^    _LMBCSData1,_LMBCSData2, _LMBCSData3, _LMBCSData4, _LMBCSData5, _LMBCSData6,$/;"	x
_LMBCSData1	unicode/urename.h	82;"	d
_LMBCSData11	ucnv_cnv.h	/^    _LMBCSData8,_LMBCSData11,_LMBCSData16,_LMBCSData17,_LMBCSData18,_LMBCSData19,$/;"	x
_LMBCSData11	unicode/urename.h	83;"	d
_LMBCSData16	ucnv_cnv.h	/^    _LMBCSData8,_LMBCSData11,_LMBCSData16,_LMBCSData17,_LMBCSData18,_LMBCSData19,$/;"	x
_LMBCSData16	unicode/urename.h	84;"	d
_LMBCSData17	ucnv_cnv.h	/^    _LMBCSData8,_LMBCSData11,_LMBCSData16,_LMBCSData17,_LMBCSData18,_LMBCSData19,$/;"	x
_LMBCSData17	unicode/urename.h	85;"	d
_LMBCSData18	ucnv_cnv.h	/^    _LMBCSData8,_LMBCSData11,_LMBCSData16,_LMBCSData17,_LMBCSData18,_LMBCSData19,$/;"	x
_LMBCSData18	unicode/urename.h	86;"	d
_LMBCSData19	ucnv_cnv.h	/^    _LMBCSData8,_LMBCSData11,_LMBCSData16,_LMBCSData17,_LMBCSData18,_LMBCSData19,$/;"	x
_LMBCSData19	unicode/urename.h	87;"	d
_LMBCSData2	ucnv_cnv.h	/^    _LMBCSData1,_LMBCSData2, _LMBCSData3, _LMBCSData4, _LMBCSData5, _LMBCSData6,$/;"	x
_LMBCSData2	unicode/urename.h	88;"	d
_LMBCSData3	ucnv_cnv.h	/^    _LMBCSData1,_LMBCSData2, _LMBCSData3, _LMBCSData4, _LMBCSData5, _LMBCSData6,$/;"	x
_LMBCSData3	unicode/urename.h	89;"	d
_LMBCSData4	ucnv_cnv.h	/^    _LMBCSData1,_LMBCSData2, _LMBCSData3, _LMBCSData4, _LMBCSData5, _LMBCSData6,$/;"	x
_LMBCSData4	unicode/urename.h	90;"	d
_LMBCSData5	ucnv_cnv.h	/^    _LMBCSData1,_LMBCSData2, _LMBCSData3, _LMBCSData4, _LMBCSData5, _LMBCSData6,$/;"	x
_LMBCSData5	unicode/urename.h	91;"	d
_LMBCSData6	ucnv_cnv.h	/^    _LMBCSData1,_LMBCSData2, _LMBCSData3, _LMBCSData4, _LMBCSData5, _LMBCSData6,$/;"	x
_LMBCSData6	unicode/urename.h	92;"	d
_LMBCSData8	ucnv_cnv.h	/^    _LMBCSData8,_LMBCSData11,_LMBCSData16,_LMBCSData17,_LMBCSData18,_LMBCSData19,$/;"	x
_LMBCSData8	unicode/urename.h	93;"	d
_LMBCSFromUnicode	ucnv_lmb.c	/^_LMBCSFromUnicode(UConverterFromUnicodeArgs*     args,$/;"	f	file:	signature:(UConverterFromUnicodeArgs* args, UErrorCode* err)
_LMBCSGetNextUCharWorker	ucnv_lmb.c	/^_LMBCSGetNextUCharWorker(UConverterToUnicodeArgs*   args,$/;"	f	file:	signature:(UConverterToUnicodeArgs* args, UErrorCode* err)
_LMBCSOpenWorker	ucnv_lmb.c	/^_LMBCSOpenWorker(UConverter*  _this,$/;"	f	file:	signature:(UConverter* _this, UConverterLoadArgs *pArgs, UErrorCode* err, ulmbcs_byte_t OptGroup)
_LMBCSSafeClone	ucnv_lmb.c	/^_LMBCSSafeClone(const UConverter *cnv, $/;"	f	file:	signature:(const UConverter *cnv, void *stackBuffer, int32_t *pBufferSize, UErrorCode *status)
_LMBCSToUnicodeWithOffsets	ucnv_lmb.c	/^_LMBCSToUnicodeWithOffsets(UConverterToUnicodeArgs*    args,$/;"	f	file:	signature:(UConverterToUnicodeArgs* args, UErrorCode* err)
_Latin1Data	ucnv_cnv.h	/^    _MBCSData, _Latin1Data,$/;"	x
_Latin1Data	ucnvlat1.c	/^const UConverterSharedData _Latin1Data={$/;"	v
_Latin1Data	unicode/urename.h	94;"	d
_Latin1FromUnicodeWithOffsets	ucnvlat1.c	/^_Latin1FromUnicodeWithOffsets(UConverterFromUnicodeArgs *pArgs,$/;"	f	file:	signature:(UConverterFromUnicodeArgs *pArgs, UErrorCode *pErrorCode)
_Latin1GetNextUChar	ucnvlat1.c	/^_Latin1GetNextUChar(UConverterToUnicodeArgs *pArgs,$/;"	f	file:	signature:(UConverterToUnicodeArgs *pArgs, UErrorCode *pErrorCode)
_Latin1GetUnicodeSet	ucnvlat1.c	/^_Latin1GetUnicodeSet(const UConverter *cnv,$/;"	f	file:	signature:(const UConverter *cnv, const USetAdder *sa, UConverterUnicodeSet which, UErrorCode *pErrorCode)
_Latin1Impl	ucnvlat1.c	/^static const UConverterImpl _Latin1Impl={$/;"	v	file:
_Latin1StaticData	ucnvlat1.c	/^static const UConverterStaticData _Latin1StaticData={$/;"	v	file:
_Latin1ToUnicodeWithOffsets	ucnvlat1.c	/^_Latin1ToUnicodeWithOffsets(UConverterToUnicodeArgs *pArgs,$/;"	f	file:	signature:(UConverterToUnicodeArgs *pArgs, UErrorCode *pErrorCode)
_Ll	uprops.h	251;"	d
_Lm	uprops.h	253;"	d
_LocaleLMBCSGrpMap	ucnv_lmb.c	/^static const struct _LocaleLMBCSGrpMap$/;"	s	file:
_LocaleLMBCSGrpMap::LocaleID	ucnv_lmb.c	/^   const char    *LocaleID;$/;"	m	struct:_LocaleLMBCSGrpMap	file:	access:public
_LocaleLMBCSGrpMap::OptGroup	ucnv_lmb.c	/^   const ulmbcs_byte_t OptGroup;$/;"	m	struct:_LocaleLMBCSGrpMap	file:	access:public
_Lt	uprops.h	252;"	d
_Lu	uprops.h	250;"	d
_MBCSData	ucnv_cnv.h	/^    _MBCSData, _Latin1Data,$/;"	x
_MBCSData	ucnvmbcs.c	/^const UConverterSharedData _MBCSData={$/;"	v
_MBCSData	unicode/urename.h	95;"	d
_MBCSHeader	ucnvmbcs.h	/^} _MBCSHeader;$/;"	t	typeref:struct:__anon81
_MBCSImpl	ucnvmbcs.c	/^static const UConverterImpl _MBCSImpl={$/;"	v	file:
_MBCSToUFallback	ucnvmbcs.h	/^} _MBCSToUFallback;$/;"	t	typeref:struct:__anon77
_MBCS_IS_LEAD_BYTE	ucnvmbcs.h	484;"	d
_MBCS_OPTION_GB18030	ucnvmbcs.c	399;"	d	file:
_MBCS_OPTION_JEF	ucnvmbcs.c	403;"	d	file:
_MBCS_OPTION_JIPS	ucnvmbcs.c	404;"	d	file:
_MBCS_OPTION_KEIS	ucnvmbcs.c	402;"	d	file:
_MBCS_SINGLE_SIMPLE_GET_NEXT_BMP	ucnvmbcs.h	473;"	d
_Mc	uprops.h	257;"	d
_Me	uprops.h	256;"	d
_Mn	uprops.h	255;"	d
_NINE	punycode.c	72;"	d	file:
_NORM_AUX_COMP_EX_MASK	unormimp.h	84;"	d
_NORM_AUX_COMP_EX_SHIFT	unormimp.h	/^    _NORM_AUX_COMP_EX_SHIFT=10,$/;"	e	enum:__anon33
_NORM_AUX_FNC_MASK	unormimp.h	83;"	d
_NORM_AUX_MAX_FNC	unormimp.h	81;"	d
_NORM_AUX_NFC_SKIPPABLE_F_SHIFT	unormimp.h	/^    _NORM_AUX_NFC_SKIPPABLE_F_SHIFT=12$/;"	e	enum:__anon33
_NORM_AUX_NFC_SKIP_F_MASK	unormimp.h	86;"	d
_NORM_AUX_UNSAFE_MASK	unormimp.h	85;"	d
_NORM_AUX_UNSAFE_SHIFT	unormimp.h	/^    _NORM_AUX_UNSAFE_SHIFT=11,$/;"	e	enum:__anon33
_NORM_CANON_SET_BMP_IS_INDEX	unormimp.h	112;"	d
_NORM_CANON_SET_BMP_MASK	unormimp.h	111;"	d
_NORM_CC_MASK	unormimp.h	/^    _NORM_CC_MASK=0xff00,$/;"	e	enum:__anon32
_NORM_CC_SHIFT	unormimp.h	/^    _NORM_CC_SHIFT=8,           \/* UnicodeData.txt combining class in bits 15..8 *\/$/;"	e	enum:__anon32
_NORM_COMBINES_ANY	unormimp.h	/^    _NORM_COMBINES_ANY=0xc0,$/;"	e	enum:__anon32
_NORM_COMBINES_BACK	unormimp.h	/^    _NORM_COMBINES_BACK=0x80,$/;"	e	enum:__anon32
_NORM_COMBINES_FWD	unormimp.h	/^    _NORM_COMBINES_FWD=0x40,$/;"	e	enum:__anon32
_NORM_DECOMP_FLAG_LENGTH_HAS_CC	unormimp.h	/^    _NORM_DECOMP_FLAG_LENGTH_HAS_CC=0x80,$/;"	e	enum:__anon37
_NORM_DECOMP_LENGTH_MASK	unormimp.h	/^    _NORM_DECOMP_LENGTH_MASK=0x7f$/;"	e	enum:__anon37
_NORM_EXTRA_HANGUL	unormimp.h	/^    _NORM_EXTRA_HANGUL=_NORM_EXTRA_SURROGATE_TOP,$/;"	e	enum:__anon32
_NORM_EXTRA_INDEX_TOP	unormimp.h	/^    _NORM_EXTRA_INDEX_TOP=0xfc00,       \/* start of surrogate specials after shift *\/$/;"	e	enum:__anon32
_NORM_EXTRA_JAMO_L	unormimp.h	/^    _NORM_EXTRA_JAMO_L,$/;"	e	enum:__anon32
_NORM_EXTRA_JAMO_T	unormimp.h	/^    _NORM_EXTRA_JAMO_T$/;"	e	enum:__anon32
_NORM_EXTRA_JAMO_V	unormimp.h	/^    _NORM_EXTRA_JAMO_V,$/;"	e	enum:__anon32
_NORM_EXTRA_SHIFT	unormimp.h	/^    _NORM_EXTRA_SHIFT=16,               \/* 16 bits for the index to UChars and other extra data *\/$/;"	e	enum:__anon32
_NORM_EXTRA_SURROGATE_MASK	unormimp.h	/^    _NORM_EXTRA_SURROGATE_MASK=0x3ff,$/;"	e	enum:__anon32
_NORM_EXTRA_SURROGATE_TOP	unormimp.h	/^    _NORM_EXTRA_SURROGATE_TOP=0x3f0,    \/* hangul etc. *\/$/;"	e	enum:__anon32
_NORM_INDEX_AUX_TRIE_SIZE	unormimp.h	/^    _NORM_INDEX_AUX_TRIE_SIZE,          \/* number of bytes in the auxiliary trie *\/$/;"	e	enum:__anon35
_NORM_INDEX_CANON_SET_COUNT	unormimp.h	/^    _NORM_INDEX_CANON_SET_COUNT,        \/* number of uint16_t in the array of serialized USet *\/$/;"	e	enum:__anon35
_NORM_INDEX_COMBINE_BACK_COUNT	unormimp.h	/^    _NORM_INDEX_COMBINE_BACK_COUNT,     \/* number of code points that combine backward *\/$/;"	e	enum:__anon35
_NORM_INDEX_COMBINE_BOTH_COUNT	unormimp.h	/^    _NORM_INDEX_COMBINE_BOTH_COUNT,     \/* number of code points that combine forward and backward *\/$/;"	e	enum:__anon35
_NORM_INDEX_COMBINE_DATA_COUNT	unormimp.h	/^    _NORM_INDEX_COMBINE_DATA_COUNT,     \/* number of uint16_t words for combining data *\/$/;"	e	enum:__anon35
_NORM_INDEX_COMBINE_FWD_COUNT	unormimp.h	/^    _NORM_INDEX_COMBINE_FWD_COUNT,      \/* number of code points that combine forward *\/$/;"	e	enum:__anon35
_NORM_INDEX_FCD_TRIE_SIZE	unormimp.h	/^    _NORM_INDEX_FCD_TRIE_SIZE,          \/* number of bytes in FCD trie *\/$/;"	e	enum:__anon35
_NORM_INDEX_MIN_NFC_NO_MAYBE	unormimp.h	/^    _NORM_INDEX_MIN_NFC_NO_MAYBE,       \/* first code point with quick check NFC NO\/MAYBE *\/$/;"	e	enum:__anon35
_NORM_INDEX_MIN_NFD_NO_MAYBE	unormimp.h	/^    _NORM_INDEX_MIN_NFD_NO_MAYBE,       \/* first code point with quick check NFD NO\/MAYBE *\/$/;"	e	enum:__anon35
_NORM_INDEX_MIN_NFKC_NO_MAYBE	unormimp.h	/^    _NORM_INDEX_MIN_NFKC_NO_MAYBE,      \/* first code point with quick check NFKC NO\/MAYBE *\/$/;"	e	enum:__anon35
_NORM_INDEX_MIN_NFKD_NO_MAYBE	unormimp.h	/^    _NORM_INDEX_MIN_NFKD_NO_MAYBE,      \/* first code point with quick check NFKD NO\/MAYBE *\/$/;"	e	enum:__anon35
_NORM_INDEX_TOP	unormimp.h	/^    _NORM_INDEX_TOP=32                  \/* changing this requires a new formatVersion *\/$/;"	e	enum:__anon35
_NORM_INDEX_TRIE_SIZE	unormimp.h	/^    _NORM_INDEX_TRIE_SIZE,              \/* number of bytes in normalization trie *\/$/;"	e	enum:__anon35
_NORM_INDEX_UCHAR_COUNT	unormimp.h	/^    _NORM_INDEX_UCHAR_COUNT,            \/* number of UChars in extra data *\/$/;"	e	enum:__anon35
_NORM_JAMO_V_TOP	unormimp.h	72;"	d
_NORM_MAX_CANON_SETS	unormimp.h	108;"	d
_NORM_MIN_HANGUL	unormimp.h	70;"	d
_NORM_MIN_JAMO_V	unormimp.h	71;"	d
_NORM_MIN_SPECIAL	unormimp.h	68;"	d
_NORM_MIN_WITH_LEAD_CC	unormimp.h	/^    _NORM_MIN_WITH_LEAD_CC=0x300$/;"	e	enum:__anon36
_NORM_QC_ANY_MAYBE	unormimp.h	/^    _NORM_QC_ANY_MAYBE=0x30,$/;"	e	enum:__anon32
_NORM_QC_ANY_NO	unormimp.h	/^    _NORM_QC_ANY_NO=0xf,$/;"	e	enum:__anon32
_NORM_QC_MASK	unormimp.h	/^    _NORM_QC_MASK=0x3f,$/;"	e	enum:__anon32
_NORM_QC_MAYBE	unormimp.h	/^    _NORM_QC_MAYBE=0x10,$/;"	e	enum:__anon32
_NORM_QC_NFC	unormimp.h	/^    _NORM_QC_NFC=0x11,          \/* no|maybe *\/$/;"	e	enum:__anon32
_NORM_QC_NFD	unormimp.h	/^    _NORM_QC_NFD=4,             \/* no *\/$/;"	e	enum:__anon32
_NORM_QC_NFKC	unormimp.h	/^    _NORM_QC_NFKC=0x22,         \/* no|maybe *\/$/;"	e	enum:__anon32
_NORM_QC_NFKD	unormimp.h	/^    _NORM_QC_NFKD=8,            \/* no *\/$/;"	e	enum:__anon32
_NORM_SET_INDEX_CANON_BMP_TABLE_LENGTH	unormimp.h	/^    _NORM_SET_INDEX_CANON_BMP_TABLE_LENGTH, \/* number of uint16_t in the BMP search table (contains pairs) *\/$/;"	e	enum:__anon34
_NORM_SET_INDEX_CANON_SETS_LENGTH	unormimp.h	/^    _NORM_SET_INDEX_CANON_SETS_LENGTH,      \/* number of uint16_t in canonical starter sets *\/$/;"	e	enum:__anon34
_NORM_SET_INDEX_CANON_SUPP_TABLE_LENGTH	unormimp.h	/^    _NORM_SET_INDEX_CANON_SUPP_TABLE_LENGTH,\/* number of uint16_t in the supplementary search table (contains triplets) *\/$/;"	e	enum:__anon34
_NORM_SET_INDEX_NX_CJK_COMPAT_OFFSET	unormimp.h	/^    _NORM_SET_INDEX_NX_CJK_COMPAT_OFFSET,   \/* uint16_t offset from canonStartSets[0] to the$/;"	e	enum:__anon34
_NORM_SET_INDEX_NX_RESERVED_OFFSET	unormimp.h	/^    _NORM_SET_INDEX_NX_RESERVED_OFFSET,     \/* uint16_t offset from canonStartSets[0] to the$/;"	e	enum:__anon34
_NORM_SET_INDEX_NX_UNICODE32_OFFSET	unormimp.h	/^    _NORM_SET_INDEX_NX_UNICODE32_OFFSET,    \/* uint16_t offset from canonStartSets[0] to the$/;"	e	enum:__anon34
_NORM_SET_INDEX_TOP	unormimp.h	/^    _NORM_SET_INDEX_TOP=32                  \/* changing this requires a new formatVersion *\/$/;"	e	enum:__anon34
_NORM_SURROGATES_TOP	unormimp.h	69;"	d
_NUL	normlzr.cpp	/^static const UChar _NUL=0;$/;"	v	file:
_Nd	uprops.h	258;"	d
_Nl	uprops.h	259;"	d
_No	uprops.h	260;"	d
_PLATFORM_H	unicode/platform.h	24;"	d
_POSIX	uloc_tag.c	/^static const char* _POSIX = "_POSIX";$/;"	v	file:
_PTYPES_H	unicode/ptypes.h	21;"	d
_Pd	uprops.h	268;"	d
_Pi	uprops.h	277;"	d
_Po	uprops.h	272;"	d
_Ps	uprops.h	269;"	d
_RULEITER_H_	ruleiter.h	12;"	d
_SBCSUTF8Impl	ucnvmbcs.c	/^static const UConverterImpl _SBCSUTF8Impl;$/;"	v	file:
_SBCSUTF8Impl	ucnvmbcs.c	/^static const UConverterImpl _SBCSUTF8Impl={$/;"	v	file:
_SCSUClose	ucnvscsu.c	/^_SCSUClose(UConverter *cnv) {$/;"	f	file:	signature:(UConverter *cnv)
_SCSUData	ucnv_cnv.h	/^    _HZData,_ISCIIData, _SCSUData, _ASCIIData,$/;"	x
_SCSUData	ucnvscsu.c	/^const UConverterSharedData _SCSUData={$/;"	v
_SCSUData	unicode/urename.h	96;"	d
_SCSUFromUnicode	ucnvscsu.c	/^_SCSUFromUnicode(UConverterFromUnicodeArgs *pArgs,$/;"	f	file:	signature:(UConverterFromUnicodeArgs *pArgs, UErrorCode *pErrorCode)
_SCSUFromUnicodeWithOffsets	ucnvscsu.c	/^_SCSUFromUnicodeWithOffsets(UConverterFromUnicodeArgs *pArgs,$/;"	f	file:	signature:(UConverterFromUnicodeArgs *pArgs, UErrorCode *pErrorCode)
_SCSUGetName	ucnvscsu.c	/^_SCSUGetName(const UConverter *cnv) {$/;"	f	file:	signature:(const UConverter *cnv)
_SCSUImpl	ucnvscsu.c	/^static const UConverterImpl _SCSUImpl={$/;"	v	file:
_SCSUOpen	ucnvscsu.c	/^_SCSUOpen(UConverter *cnv,$/;"	f	file:	signature:(UConverter *cnv, UConverterLoadArgs *pArgs, UErrorCode *pErrorCode)
_SCSUReset	ucnvscsu.c	/^_SCSUReset(UConverter *cnv, UConverterResetChoice choice) {$/;"	f	file:	signature:(UConverter *cnv, UConverterResetChoice choice)
_SCSUSafeClone	ucnvscsu.c	/^_SCSUSafeClone(const UConverter *cnv, $/;"	f	file:	signature:(const UConverter *cnv, void *stackBuffer, int32_t *pBufferSize, UErrorCode *status)
_SCSUStaticData	ucnvscsu.c	/^static const UConverterStaticData _SCSUStaticData={$/;"	v	file:
_SCSUToUnicode	ucnvscsu.c	/^_SCSUToUnicode(UConverterToUnicodeArgs *pArgs,$/;"	f	file:	signature:(UConverterToUnicodeArgs *pArgs, UErrorCode *pErrorCode)
_SCSUToUnicodeWithOffsets	ucnvscsu.c	/^_SCSUToUnicodeWithOffsets(UConverterToUnicodeArgs *pArgs,$/;"	f	file:	signature:(UConverterToUnicodeArgs *pArgs, UErrorCode *pErrorCode)
_SMALL_A	punycode.c	74;"	d	file:
_SMALL_Z	punycode.c	75;"	d	file:
_SPREP_CHECK_BIDI_ON	sprpimpl.h	/^    _SPREP_CHECK_BIDI_ON    = 0x0002$/;"	e	enum:__anon21
_SPREP_DATA_TYPE	sprpimpl.h	32;"	d
_SPREP_FOUR_UCHARS_MAPPING_INDEX_START	sprpimpl.h	/^    _SPREP_FOUR_UCHARS_MAPPING_INDEX_START  = 6, \/* The starting index of 4 UChars mapping index in the mapping data array *\/$/;"	e	enum:__anon23
_SPREP_INDEX_MAPPING_DATA_SIZE	sprpimpl.h	/^    _SPREP_INDEX_MAPPING_DATA_SIZE          = 1, \/* The array that contains the mapping   *\/$/;"	e	enum:__anon23
_SPREP_INDEX_TOP	sprpimpl.h	/^    _SPREP_INDEX_TOP=16                          \/* changing this requires a new formatVersion *\/$/;"	e	enum:__anon23
_SPREP_INDEX_TRIE_SIZE	sprpimpl.h	/^    _SPREP_INDEX_TRIE_SIZE                  = 0, \/* number of bytes in StringPrep trie *\/$/;"	e	enum:__anon23
_SPREP_MAX_INDEX_TOP_LENGTH	sprpimpl.h	/^    _SPREP_MAX_INDEX_TOP_LENGTH = 0x0003$/;"	e	enum:__anon22
_SPREP_MAX_INDEX_VALUE	sprpimpl.h	/^    _SPREP_MAX_INDEX_VALUE      = 0x3FBF,   \/*16139*\/ $/;"	e	enum:__anon22
_SPREP_NORMALIZATION_ON	sprpimpl.h	/^    _SPREP_NORMALIZATION_ON = 0x0001,$/;"	e	enum:__anon21
_SPREP_NORM_CORRECTNS_LAST_UNI_VERSION	sprpimpl.h	/^    _SPREP_NORM_CORRECTNS_LAST_UNI_VERSION  = 2, \/* The index of Unicode version of last entry in NormalizationCorrections.txt *\/ $/;"	e	enum:__anon23
_SPREP_ONE_UCHAR_MAPPING_INDEX_START	sprpimpl.h	/^    _SPREP_ONE_UCHAR_MAPPING_INDEX_START    = 3, \/* The starting index of 1 UChar mapping index in the mapping data array *\/$/;"	e	enum:__anon23
_SPREP_OPTIONS	sprpimpl.h	/^    _SPREP_OPTIONS                          = 7, \/* Bit set of options to turn on in the profile *\/$/;"	e	enum:__anon23
_SPREP_THREE_UCHARS_MAPPING_INDEX_START	sprpimpl.h	/^    _SPREP_THREE_UCHARS_MAPPING_INDEX_START = 5, \/* The starting index of 3 UChars mapping index in the mapping data array *\/$/;"	e	enum:__anon23
_SPREP_TWO_UCHARS_MAPPING_INDEX_START	sprpimpl.h	/^    _SPREP_TWO_UCHARS_MAPPING_INDEX_START   = 4, \/* The starting index of 2 UChars mapping index in the mapping data array *\/$/;"	e	enum:__anon23
_SPREP_TYPE_THRESHOLD	sprpimpl.h	/^    _SPREP_TYPE_THRESHOLD       = 0xFFF0,$/;"	e	enum:__anon22
_STACK_BUFFER_CAPACITY	ustr_wcs.c	37;"	d	file:
_STLP_OUTERMOST_HEADER_ID	msvcres.h	15;"	d
_STLP_WINCE	msvcres.h	16;"	d
_STRCASECMP_OPTIONS_MASK	ucase.h	68;"	d
_STRNCMP_STYLE	ustr_imp.h	43;"	d
_Sc	uprops.h	274;"	d
_Sk	uprops.h	275;"	d
_Sm	uprops.h	273;"	d
_So	uprops.h	276;"	d
_UEnumBuffer	uenum.c	/^} _UEnumBuffer;$/;"	t	typeref:struct:__anon96	file:
_ULOC_CANONICALIZE	uloc.c	1602;"	d	file:
_ULOC_STRIP_KEYWORDS	uloc.c	1601;"	d	file:
_USTRENUM_H_	ustrenum.h	12;"	d
_UTF16BEData	ucnv_cnv.h	/^    _UTF8Data, _UTF16BEData, _UTF16LEData, _UTF32BEData, _UTF32LEData,$/;"	x
_UTF16BEData	ucnv_u16.c	/^const UConverterSharedData _UTF16BEData={$/;"	v
_UTF16BEData	unicode/urename.h	97;"	d
_UTF16BEFromUnicodeWithOffsets	ucnv_u16.c	/^_UTF16BEFromUnicodeWithOffsets(UConverterFromUnicodeArgs *pArgs,$/;"	f	file:	signature:(UConverterFromUnicodeArgs *pArgs, UErrorCode *pErrorCode)
_UTF16BEGetName	ucnv_u16.c	/^_UTF16BEGetName(const UConverter *cnv) {$/;"	f	file:	signature:(const UConverter *cnv)
_UTF16BEGetNextUChar	ucnv_u16.c	/^_UTF16BEGetNextUChar(UConverterToUnicodeArgs *pArgs, UErrorCode *err) {$/;"	f	file:	signature:(UConverterToUnicodeArgs *pArgs, UErrorCode *err)
_UTF16BEImpl	ucnv_u16.c	/^static const UConverterImpl _UTF16BEImpl={$/;"	v	file:
_UTF16BEOpen	ucnv_u16.c	/^_UTF16BEOpen(UConverter *cnv,$/;"	f	file:	signature:(UConverter *cnv, UConverterLoadArgs *pArgs, UErrorCode *pErrorCode)
_UTF16BEReset	ucnv_u16.c	/^_UTF16BEReset(UConverter *cnv, UConverterResetChoice choice) {$/;"	f	file:	signature:(UConverter *cnv, UConverterResetChoice choice)
_UTF16BEStaticData	ucnv_u16.c	/^static const UConverterStaticData _UTF16BEStaticData={$/;"	v	file:
_UTF16BEToUnicodeWithOffsets	ucnv_u16.c	/^_UTF16BEToUnicodeWithOffsets(UConverterToUnicodeArgs *pArgs,$/;"	f	file:	signature:(UConverterToUnicodeArgs *pArgs, UErrorCode *pErrorCode)
_UTF16Data	ucnv_cnv.h	/^    _UTF7Data, _Bocu1Data, _UTF16Data, _UTF32Data, _CESU8Data, _IMAPData;$/;"	x
_UTF16Data	ucnv_u16.c	/^const UConverterSharedData _UTF16Data = {$/;"	v
_UTF16Data	ucnv_u16.c	/^const UConverterSharedData _UTF16Data;$/;"	v
_UTF16Data	unicode/urename.h	98;"	d
_UTF16GetName	ucnv_u16.c	/^_UTF16GetName(const UConverter *cnv) {$/;"	f	file:	signature:(const UConverter *cnv)
_UTF16GetNextUChar	ucnv_u16.c	/^_UTF16GetNextUChar(UConverterToUnicodeArgs *pArgs,$/;"	f	file:	signature:(UConverterToUnicodeArgs *pArgs, UErrorCode *pErrorCode)
_UTF16Impl	ucnv_u16.c	/^static const UConverterImpl _UTF16Impl = {$/;"	v	file:
_UTF16LEData	ucnv_cnv.h	/^    _UTF8Data, _UTF16BEData, _UTF16LEData, _UTF32BEData, _UTF32LEData,$/;"	x
_UTF16LEData	ucnv_u16.c	/^const UConverterSharedData _UTF16LEData={$/;"	v
_UTF16LEData	unicode/urename.h	99;"	d
_UTF16LEFromUnicodeWithOffsets	ucnv_u16.c	/^_UTF16LEFromUnicodeWithOffsets(UConverterFromUnicodeArgs *pArgs,$/;"	f	file:	signature:(UConverterFromUnicodeArgs *pArgs, UErrorCode *pErrorCode)
_UTF16LEGetName	ucnv_u16.c	/^_UTF16LEGetName(const UConverter *cnv) {$/;"	f	file:	signature:(const UConverter *cnv)
_UTF16LEGetNextUChar	ucnv_u16.c	/^_UTF16LEGetNextUChar(UConverterToUnicodeArgs *pArgs, UErrorCode *err) {$/;"	f	file:	signature:(UConverterToUnicodeArgs *pArgs, UErrorCode *err)
_UTF16LEImpl	ucnv_u16.c	/^static const UConverterImpl _UTF16LEImpl={$/;"	v	file:
_UTF16LEOpen	ucnv_u16.c	/^_UTF16LEOpen(UConverter *cnv,$/;"	f	file:	signature:(UConverter *cnv, UConverterLoadArgs *pArgs, UErrorCode *pErrorCode)
_UTF16LEReset	ucnv_u16.c	/^_UTF16LEReset(UConverter *cnv, UConverterResetChoice choice) {$/;"	f	file:	signature:(UConverter *cnv, UConverterResetChoice choice)
_UTF16LEStaticData	ucnv_u16.c	/^static const UConverterStaticData _UTF16LEStaticData={$/;"	v	file:
_UTF16LEToUnicodeWithOffsets	ucnv_u16.c	/^_UTF16LEToUnicodeWithOffsets(UConverterToUnicodeArgs *pArgs,$/;"	f	file:	signature:(UConverterToUnicodeArgs *pArgs, UErrorCode *pErrorCode)
_UTF16Open	ucnv_u16.c	/^_UTF16Open(UConverter *cnv,$/;"	f	file:	signature:(UConverter *cnv, UConverterLoadArgs *pArgs, UErrorCode *pErrorCode)
_UTF16PEFromUnicodeWithOffsets	ucnv_u16.c	41;"	d	file:
_UTF16PEFromUnicodeWithOffsets	ucnv_u16.c	43;"	d	file:
_UTF16Reset	ucnv_u16.c	/^_UTF16Reset(UConverter *cnv, UConverterResetChoice choice) {$/;"	f	file:	signature:(UConverter *cnv, UConverterResetChoice choice)
_UTF16StaticData	ucnv_u16.c	/^static const UConverterStaticData _UTF16StaticData = {$/;"	v	file:
_UTF16ToUnicodeWithOffsets	ucnv_u16.c	/^_UTF16ToUnicodeWithOffsets(UConverterToUnicodeArgs *pArgs,$/;"	f	file:	signature:(UConverterToUnicodeArgs *pArgs, UErrorCode *pErrorCode)
_UTF16ToUnicodeWithOffsets	ucnv_u16.c	/^_UTF16ToUnicodeWithOffsets(UConverterToUnicodeArgs *pArgs,$/;"	p	file:	signature:(UConverterToUnicodeArgs *pArgs, UErrorCode *pErrorCode)
_UTF16v2Data	ucnv_u16.c	/^static const UConverterSharedData _UTF16v2Data = {$/;"	v	file:
_UTF16v2Data	ucnv_u16.c	/^static const UConverterSharedData _UTF16v2Data;$/;"	v	file:
_UTF16v2Impl	ucnv_u16.c	/^static const UConverterImpl _UTF16v2Impl = {$/;"	v	file:
_UTF16v2StaticData	ucnv_u16.c	/^static const UConverterStaticData _UTF16v2StaticData = {$/;"	v	file:
_UTF32BEData	ucnv_cnv.h	/^    _UTF8Data, _UTF16BEData, _UTF16LEData, _UTF32BEData, _UTF32LEData,$/;"	x
_UTF32BEData	ucnv_u32.c	/^const UConverterSharedData _UTF32BEData = {$/;"	v
_UTF32BEData	unicode/urename.h	100;"	d
_UTF32BEImpl	ucnv_u32.c	/^static const UConverterImpl _UTF32BEImpl = {$/;"	v	file:
_UTF32BEStaticData	ucnv_u32.c	/^static const UConverterStaticData _UTF32BEStaticData = {$/;"	v	file:
_UTF32Data	ucnv_cnv.h	/^    _UTF7Data, _Bocu1Data, _UTF16Data, _UTF32Data, _CESU8Data, _IMAPData;$/;"	x
_UTF32Data	ucnv_u32.c	/^const UConverterSharedData _UTF32Data = {$/;"	v
_UTF32Data	unicode/urename.h	101;"	d
_UTF32GetNextUChar	ucnv_u32.c	/^_UTF32GetNextUChar(UConverterToUnicodeArgs *pArgs,$/;"	f	file:	signature:(UConverterToUnicodeArgs *pArgs, UErrorCode *pErrorCode)
_UTF32Impl	ucnv_u32.c	/^static const UConverterImpl _UTF32Impl = {$/;"	v	file:
_UTF32LEData	ucnv_cnv.h	/^    _UTF8Data, _UTF16BEData, _UTF16LEData, _UTF32BEData, _UTF32LEData,$/;"	x
_UTF32LEData	ucnv_u32.c	/^const UConverterSharedData _UTF32LEData = {$/;"	v
_UTF32LEData	unicode/urename.h	102;"	d
_UTF32LEImpl	ucnv_u32.c	/^static const UConverterImpl _UTF32LEImpl = {$/;"	v	file:
_UTF32LEStaticData	ucnv_u32.c	/^static const UConverterStaticData _UTF32LEStaticData = {$/;"	v	file:
_UTF32Open	ucnv_u32.c	/^_UTF32Open(UConverter *cnv,$/;"	f	file:	signature:(UConverter *cnv, UConverterLoadArgs *pArgs, UErrorCode *pErrorCode)
_UTF32Reset	ucnv_u32.c	/^_UTF32Reset(UConverter *cnv, UConverterResetChoice choice) {$/;"	f	file:	signature:(UConverter *cnv, UConverterResetChoice choice)
_UTF32StaticData	ucnv_u32.c	/^static const UConverterStaticData _UTF32StaticData = {$/;"	v	file:
_UTF32ToUnicodeWithOffsets	ucnv_u32.c	/^_UTF32ToUnicodeWithOffsets(UConverterToUnicodeArgs *pArgs,$/;"	f	file:	signature:(UConverterToUnicodeArgs *pArgs, UErrorCode *pErrorCode)
_UTF7Data	ucnv_cnv.h	/^    _UTF7Data, _Bocu1Data, _UTF16Data, _UTF32Data, _CESU8Data, _IMAPData;$/;"	x
_UTF7Data	ucnv_u7.c	/^const UConverterSharedData _UTF7Data={$/;"	v
_UTF7Data	unicode/urename.h	103;"	d
_UTF7FromUnicodeWithOffsets	ucnv_u7.c	/^_UTF7FromUnicodeWithOffsets(UConverterFromUnicodeArgs *pArgs,$/;"	f	file:	signature:(UConverterFromUnicodeArgs *pArgs, UErrorCode *pErrorCode)
_UTF7GetName	ucnv_u7.c	/^_UTF7GetName(const UConverter *cnv) {$/;"	f	file:	signature:(const UConverter *cnv)
_UTF7Impl	ucnv_u7.c	/^static const UConverterImpl _UTF7Impl={$/;"	v	file:
_UTF7Open	ucnv_u7.c	/^_UTF7Open(UConverter *cnv,$/;"	f	file:	signature:(UConverter *cnv, UConverterLoadArgs *pArgs, UErrorCode *pErrorCode)
_UTF7Reset	ucnv_u7.c	/^_UTF7Reset(UConverter *cnv, UConverterResetChoice choice) {$/;"	f	file:	signature:(UConverter *cnv, UConverterResetChoice choice)
_UTF7StaticData	ucnv_u7.c	/^static const UConverterStaticData _UTF7StaticData={$/;"	v	file:
_UTF7ToUnicodeWithOffsets	ucnv_u7.c	/^_UTF7ToUnicodeWithOffsets(UConverterToUnicodeArgs *pArgs,$/;"	f	file:	signature:(UConverterToUnicodeArgs *pArgs, UErrorCode *pErrorCode)
_UTF8Data	ucnv_cnv.h	/^    _UTF8Data, _UTF16BEData, _UTF16LEData, _UTF32BEData, _UTF32LEData,$/;"	x
_UTF8Data	ucnv_u8.c	/^const UConverterSharedData _UTF8Data={$/;"	v
_UTF8Data	unicode/urename.h	104;"	d
_UTF8Impl	ucnv_u8.c	/^static const UConverterImpl _UTF8Impl={$/;"	v	file:
_UTF8StaticData	ucnv_u8.c	/^static const UConverterStaticData _UTF8StaticData={$/;"	v	file:
_UTRIE2_GET	utrie2.h	907;"	d
_UTRIE2_GET_FROM_SUPP	utrie2.h	899;"	d
_UTRIE2_GET_FROM_U16_SINGLE_LEAD	utrie2.h	895;"	d
_UTRIE2_INDEX_FROM_BMP	utrie2.h	864;"	d
_UTRIE2_INDEX_FROM_CP	utrie2.h	881;"	d
_UTRIE2_INDEX_FROM_LSCP	utrie2.h	860;"	d
_UTRIE2_INDEX_FROM_SUPP	utrie2.h	869;"	d
_UTRIE2_INDEX_FROM_U16_SINGLE_LEAD	utrie2.h	857;"	d
_UTRIE2_INDEX_RAW	utrie2.h	851;"	d
_UTRIE2_U16_NEXT	utrie2.h	911;"	d
_UTRIE2_U16_PREV	utrie2.h	928;"	d
_UTRIE2_U8_NEXT	utrie2.h	943;"	d
_UTRIE2_U8_PREV	utrie2.h	978;"	d
_UTRIE_GET	utrie.h	207;"	d
_UTRIE_GET_FROM_BMP	utrie.h	199;"	d
_UTRIE_GET_FROM_PAIR	utrie.h	183;"	d
_UTRIE_GET_RAW	utrie.h	176;"	d
_UTRIE_NEXT	utrie.h	221;"	d
_UTRIE_PREVIOUS	utrie.h	237;"	d
_UniLMBCSGrpMap	ucnv_lmb.c	/^static const struct _UniLMBCSGrpMap  $/;"	s	file:
_UniLMBCSGrpMap::GrpType	ucnv_lmb.c	/^   const ulmbcs_byte_t  GrpType;$/;"	m	struct:_UniLMBCSGrpMap	file:	access:public
_UniLMBCSGrpMap::uniEndRange	ucnv_lmb.c	/^   const UChar uniEndRange;$/;"	m	struct:_UniLMBCSGrpMap	file:	access:public
_UniLMBCSGrpMap::uniStartRange	ucnv_lmb.c	/^   const UChar uniStartRange;$/;"	m	struct:_UniLMBCSGrpMap	file:	access:public
_XOPEN_SOURCE	putil.c	45;"	d	file:
_XOPEN_SOURCE	putil.c	47;"	d	file:
_XOPEN_SOURCE_EXTENDED	putil.c	56;"	d	file:
_XPG4_2	putil.c	116;"	d	file:
_ZERO_	punycode.c	71;"	d	file:
_Zl	uprops.h	262;"	d
_Zp	uprops.h	263;"	d
_Zs	uprops.h	261;"	d
__BMPSET_H__	bmpset.h	18;"	d
__BYTESTREAM_H__	unicode/bytestream.h	31;"	d
__CWCHAR_H__	cwchar.h	22;"	d
__DTINTRV_H__	unicode/dtintrv.h	13;"	d
__ERRORCODE_H__	unicode/errorcode.h	18;"	d
__ICU_DATA_VER_H__	unicode/icudataver.h	11;"	d
__ICU_UCNV_SEL_H__	unicode/ucnvsel.h	20;"	d
__IDNA_H__	unicode/idna.h	16;"	d
__LOCALPOINTER_H__	unicode/localpointer.h	18;"	d
__NORMALIZER2IMPL_H__	normalizer2impl.h	18;"	d
__NORMALIZER2_H__	unicode/normalizer2.h	18;"	d
__PUNYCODE_H__	punycode.h	26;"	d
__RBBIDATA_H__	rbbidata.h	33;"	d
__RESDATA_H__	uresdata.h	19;"	d
__STDC_CONSTANT_MACROS	unicode/pwin32.h	31;"	d
__STD_STRING_H__	unicode/std_string.h	18;"	d
__STRICT_ANSI__	putil.c	92;"	d	file:
__STRINGPIECE_H__	unicode/stringpiece.h	21;"	d
__SUSV3	putil.c	2087;"	d	file:
__TERMINATE_STRING	ustring.c	1421;"	d	file:
__UARRSORT_H__	uarrsort.h	20;"	d
__UBIDI_PROPS_H__	ubidi_props.h	20;"	d
__UCASEMAP_H__	unicode/ucasemap.h	20;"	d
__UCASE_H__	ucase.h	20;"	d
__UCLEAN_H__	unicode/uclean.h	18;"	d
__UCLN_CMN_H__	ucln_cmn.h	18;"	d
__UCLN_H__	ucln.h	18;"	d
__UCLN_IMP_H__	ucln_imp.h	19;"	d
__UCMNDATA_H__	ucmndata.h	26;"	d
__UCNVMBCS_H__	ucnvmbcs.h	18;"	d
__UCNV_EXT_H__	ucnv_ext.h	20;"	d
__UCOL_SWP_H__	ucol_swp.h	20;"	d
__UCONFIG_H__	unicode/uconfig.h	16;"	d
__UDATAMEM_H__	udatamem.h	20;"	d
__UDATASWP_H__	udataswp.h	22;"	d
__UDATA_H__	unicode/udata.h	18;"	d
__UENUMIMP_H	uenumimp.h	18;"	d
__UENUM_H	unicode/uenum.h	18;"	d
__UIDNA_H__	unicode/uidna.h	18;"	d
__UINVCHAR_H__	uinvchar.h	21;"	d
__UITER_H__	unicode/uiter.h	18;"	d
__UMACHINE_H__	unicode/umachine.h	24;"	d
__UMAPFILE_H__	umapfile.h	24;"	d
__UNISETSPAN_H__	unisetspan.h	18;"	d
__UNORM2_H__	unicode/unorm2.h	18;"	d
__UNORMIMP_H__	unormimp.h	18;"	d
__UNORM_IT_H__	unorm_it.h	18;"	d
__UOBJECT_H__	unicode/uobject.h	18;"	d
__UPROPSVEC_H__	propsvec.h	20;"	d
__UPROPS_H__	uprops.h	21;"	d
__UREP_H	unicode/urep.h	12;"	d
__URESLOCS_H__	ureslocs.h	9;"	d
__USET_H__	unicode/uset.h	28;"	d
__USET_IMP_H__	uset_imp.h	20;"	d
__USHAPE_H__	unicode/ushape.h	18;"	d
__USPREP_H__	unicode/usprep.h	18;"	d
__USTR_IMP_H__	ustr_imp.h	16;"	d
__UTEXT_H__	unicode/utext.h	18;"	d
__UTF16_H__	unicode/utf16.h	35;"	d
__UTF8_H__	unicode/utf8.h	35;"	d
__UTF_H__	unicode/utf.h	109;"	d
__UTF_OLD_H__	unicode/utf_old.h	147;"	d
__UTRACE_H__	unicode/utrace.h	21;"	d
__UTRACIMP_H__	utracimp.h	41;"	d
__UTRIE2_H__	utrie2.h	18;"	d
__UTRIE2_IMPL_H__	utrie2_impl.h	21;"	d
__UTRIE_H__	utrie.h	18;"	d
__WINTZ	wintz.h	13;"	d
__anon105::converter	unicode/ucnv_err.h	/^    UConverter *converter;      \/**< Pointer to the converter that is opened and to which this struct is passed as an argument. @stable ICU 2.0  *\/$/;"	m	struct:__anon105	access:public
__anon105::flush	unicode/ucnv_err.h	/^    UBool flush;                \/**< The internal state of converter will be reset and data flushed if set to TRUE. @stable ICU 2.0    *\/$/;"	m	struct:__anon105	access:public
__anon105::offsets	unicode/ucnv_err.h	/^    int32_t *offsets;           \/**< Pointer to the buffer that recieves the offsets. *offset = blah ; offset++;. @stable ICU 2.0  *\/$/;"	m	struct:__anon105	access:public
__anon105::size	unicode/ucnv_err.h	/^    uint16_t size;              \/**< The size of this struct. @stable ICU 2.0 *\/$/;"	m	struct:__anon105	access:public
__anon105::source	unicode/ucnv_err.h	/^    const UChar *source;        \/**< Pointer to the source source buffer. @stable ICU 2.0    *\/$/;"	m	struct:__anon105	access:public
__anon105::sourceLimit	unicode/ucnv_err.h	/^    const UChar *sourceLimit;   \/**< Pointer to the limit (end + 1) of source buffer. @stable ICU 2.0    *\/$/;"	m	struct:__anon105	access:public
__anon105::target	unicode/ucnv_err.h	/^    char *target;               \/**< Pointer to the target buffer. @stable ICU 2.0    *\/$/;"	m	struct:__anon105	access:public
__anon105::targetLimit	unicode/ucnv_err.h	/^    const char *targetLimit;    \/**< Pointer to the limit (end + 1) of target buffer. @stable ICU 2.0     *\/$/;"	m	struct:__anon105	access:public
__anon106::converter	unicode/ucnv_err.h	/^    UConverter *converter;      \/**< Pointer to the converter that is opened and to which this struct is passed as an argument. @stable ICU 2.0 *\/$/;"	m	struct:__anon106	access:public
__anon106::flush	unicode/ucnv_err.h	/^    UBool flush;                \/**< The internal state of converter will be reset and data flushed if set to TRUE. @stable ICU 2.0   *\/$/;"	m	struct:__anon106	access:public
__anon106::offsets	unicode/ucnv_err.h	/^    int32_t *offsets;           \/**< Pointer to the buffer that recieves the offsets. *offset = blah ; offset++;. @stable ICU 2.0  *\/$/;"	m	struct:__anon106	access:public
__anon106::size	unicode/ucnv_err.h	/^    uint16_t size;              \/**< The size of this struct   @stable ICU 2.0 *\/$/;"	m	struct:__anon106	access:public
__anon106::source	unicode/ucnv_err.h	/^    const char *source;         \/**< Pointer to the source source buffer. @stable ICU 2.0    *\/$/;"	m	struct:__anon106	access:public
__anon106::sourceLimit	unicode/ucnv_err.h	/^    const char *sourceLimit;    \/**< Pointer to the limit (end + 1) of source buffer. @stable ICU 2.0    *\/$/;"	m	struct:__anon106	access:public
__anon106::target	unicode/ucnv_err.h	/^    UChar *target;              \/**< Pointer to the target buffer. @stable ICU 2.0    *\/$/;"	m	struct:__anon106	access:public
__anon106::targetLimit	unicode/ucnv_err.h	/^    const UChar *targetLimit;   \/**< Pointer to the limit (end + 1) of target buffer. @stable ICU 2.0     *\/$/;"	m	struct:__anon106	access:public
__anon114::charsetFamily	unicode/udata.h	/^    uint8_t charsetFamily;$/;"	m	struct:__anon114	access:public
__anon114::dataFormat	unicode/udata.h	/^    uint8_t dataFormat[4];$/;"	m	struct:__anon114	access:public
__anon114::dataVersion	unicode/udata.h	/^    uint8_t dataVersion[4];$/;"	m	struct:__anon114	access:public
__anon114::formatVersion	unicode/udata.h	/^    uint8_t formatVersion[4];$/;"	m	struct:__anon114	access:public
__anon114::isBigEndian	unicode/udata.h	/^    uint8_t isBigEndian;$/;"	m	struct:__anon114	access:public
__anon114::reservedByte	unicode/udata.h	/^    uint8_t reservedByte;$/;"	m	struct:__anon114	access:public
__anon114::reservedWord	unicode/udata.h	/^    uint16_t reservedWord;$/;"	m	struct:__anon114	access:public
__anon114::size	unicode/udata.h	/^    uint16_t size;$/;"	m	struct:__anon114	access:public
__anon114::sizeofUChar	unicode/udata.h	/^    uint8_t sizeofUChar;$/;"	m	struct:__anon114	access:public
__anon12::data	uresdata.h	/^    UDataMemory *data;$/;"	m	struct:__anon12	access:public
__anon12::isPoolBundle	uresdata.h	/^    UBool isPoolBundle;$/;"	m	struct:__anon12	access:public
__anon12::localKeyLimit	uresdata.h	/^    int32_t localKeyLimit;$/;"	m	struct:__anon12	access:public
__anon12::noFallback	uresdata.h	/^    UBool noFallback; \/* see URES_ATT_NO_FALLBACK *\/$/;"	m	struct:__anon12	access:public
__anon12::p16BitUnits	uresdata.h	/^    const uint16_t *p16BitUnits;$/;"	m	struct:__anon12	access:public
__anon12::pRoot	uresdata.h	/^    const int32_t *pRoot;$/;"	m	struct:__anon12	access:public
__anon12::poolBundleKeys	uresdata.h	/^    const char *poolBundleKeys;$/;"	m	struct:__anon12	access:public
__anon12::rootRes	uresdata.h	/^    Resource rootRes;$/;"	m	struct:__anon12	access:public
__anon12::useNativeStrcmp	uresdata.h	/^    UBool useNativeStrcmp;$/;"	m	struct:__anon12	access:public
__anon12::usesPoolBundle	uresdata.h	/^    UBool usesPoolBundle;$/;"	m	struct:__anon12	access:public
__anon141::containsCnvOptionInfo	ucnv_io.h	/^    uint16_t containsCnvOptionInfo;$/;"	m	struct:__anon141	access:public
__anon141::stringNormalizationType	ucnv_io.h	/^    uint16_t stringNormalizationType;$/;"	m	struct:__anon141	access:public
__anon142::headerSize	ucmndata.h	/^    uint16_t    headerSize;$/;"	m	struct:__anon142	access:public
__anon142::magic1	ucmndata.h	/^    uint8_t     magic1;$/;"	m	struct:__anon142	access:public
__anon142::magic2	ucmndata.h	/^    uint8_t     magic2;$/;"	m	struct:__anon142	access:public
__anon143::dataHeader	ucmndata.h	/^    MappedData  dataHeader;$/;"	m	struct:__anon143	access:public
__anon143::info	ucmndata.h	/^    UDataInfo   info;$/;"	m	struct:__anon143	access:public
__anon144::dataOffset	ucmndata.h	/^    uint32_t dataOffset;$/;"	m	struct:__anon144	access:public
__anon144::nameOffset	ucmndata.h	/^    uint32_t nameOffset;$/;"	m	struct:__anon144	access:public
__anon145::count	ucmndata.h	/^    uint32_t count;$/;"	m	struct:__anon145	access:public
__anon145::entry	ucmndata.h	/^    UDataOffsetTOCEntry entry[2];    \/* Actual size of array is from count. *\/$/;"	m	struct:__anon145	access:public
__anon146::Lookup	ucmndata.h	/^    LookupFn      Lookup;$/;"	m	struct:__anon146	access:public
__anon146::NumEntries	ucmndata.h	/^    NumEntriesFn  NumEntries; $/;"	m	struct:__anon146	access:public
__anon151::cnvName	ucnv_imp.h	/^    char cnvName[UCNV_MAX_CONVERTER_NAME_LENGTH];$/;"	m	struct:__anon151	access:public
__anon151::locale	ucnv_imp.h	/^    char locale[ULOC_FULLNAME_CAPACITY];$/;"	m	struct:__anon151	access:public
__anon151::options	ucnv_imp.h	/^    uint32_t options;$/;"	m	struct:__anon151	access:public
__anon16::contextCharFromUnicode	ucnvisci.c	/^    UChar contextCharFromUnicode;       \/* previous Unicode codepoint for contextual analysis *\/$/;"	m	struct:__anon16	file:	access:public
__anon16::contextCharToUnicode	ucnvisci.c	/^    UChar contextCharToUnicode;         \/* previous Unicode codepoint for contextual analysis *\/$/;"	m	struct:__anon16	file:	access:public
__anon16::currentDeltaFromUnicode	ucnvisci.c	/^    uint16_t currentDeltaFromUnicode;   \/* current delta in Indic block *\/$/;"	m	struct:__anon16	file:	access:public
__anon16::currentDeltaToUnicode	ucnvisci.c	/^    uint16_t currentDeltaToUnicode;     \/* current delta in Indic block *\/$/;"	m	struct:__anon16	file:	access:public
__anon16::currentMaskFromUnicode	ucnvisci.c	/^    MaskEnum currentMaskFromUnicode;    \/* mask for current state in toUnicode *\/$/;"	m	struct:__anon16	file:	access:public
__anon16::currentMaskToUnicode	ucnvisci.c	/^    MaskEnum currentMaskToUnicode;      \/* mask for current state in toUnicode *\/$/;"	m	struct:__anon16	file:	access:public
__anon16::defDeltaToUnicode	ucnvisci.c	/^    uint16_t defDeltaToUnicode;         \/* delta for switching to default state when DEF is encountered  *\/$/;"	m	struct:__anon16	file:	access:public
__anon16::defMaskToUnicode	ucnvisci.c	/^    MaskEnum defMaskToUnicode;          \/* mask for default state in toUnicode *\/$/;"	m	struct:__anon16	file:	access:public
__anon16::isFirstBuffer	ucnvisci.c	/^    UBool isFirstBuffer;                \/* boolean for fromUnicode to see if we need to announce the first script *\/$/;"	m	struct:__anon16	file:	access:public
__anon16::name	ucnvisci.c	/^    char name[sizeof(ISCII_CNV_PREFIX) + 1];$/;"	m	struct:__anon16	file:	access:public
__anon16::prevToUnicodeStatus	ucnvisci.c	/^    UChar32 prevToUnicodeStatus;        \/* Hold the previous toUnicodeStatus. This is necessary because we may need to know the last two code points. *\/$/;"	m	struct:__anon16	file:	access:public
__anon16::resetToDefaultToUnicode	ucnvisci.c	/^    UBool resetToDefaultToUnicode;      \/* boolean for reseting to default delta and mask when a newline is encountered*\/$/;"	m	struct:__anon16	file:	access:public
__anon18::lastStrongRTL	ubidi.c	/^    int32_t lastStrongRTL;              \/* index of last found R or AL  *\/$/;"	m	struct:__anon18	file:	access:public
__anon18::pImpAct	ubidi.c	/^    const ImpAct * pImpAct;             \/* action map array             *\/$/;"	m	struct:__anon18	file:	access:public
__anon18::pImpTab	ubidi.c	/^    const ImpTab * pImpTab;             \/* level table pointer          *\/$/;"	m	struct:__anon18	file:	access:public
__anon18::runLevel	ubidi.c	/^    UBiDiLevel runLevel;                \/* run level before implicit solving *\/$/;"	m	struct:__anon18	file:	access:public
__anon18::startL2EN	ubidi.c	/^    int32_t startL2EN;                  \/* start of level 2 sequence    *\/$/;"	m	struct:__anon18	file:	access:public
__anon18::startON	ubidi.c	/^    int32_t startON;                    \/* start of ON sequence         *\/$/;"	m	struct:__anon18	file:	access:public
__anon18::state	ubidi.c	/^    int32_t state;                      \/* current state                *\/$/;"	m	struct:__anon18	file:	access:public
__anon1::bias	wintz.c	/^    int32_t bias;$/;"	m	struct:__anon1	file:	access:public
__anon1::daylightBias	wintz.c	/^    int32_t daylightBias;$/;"	m	struct:__anon1	file:	access:public
__anon1::daylightDate	wintz.c	/^    SYSTEMTIME daylightDate;$/;"	m	struct:__anon1	file:	access:public
__anon1::standardBias	wintz.c	/^    int32_t standardBias;$/;"	m	struct:__anon1	file:	access:public
__anon1::standardDate	wintz.c	/^    SYSTEMTIME standardDate;$/;"	m	struct:__anon1	file:	access:public
__anon25::OptGroup	ucnv_lmb.c	/^    uint8_t    OptGroup;                  \/* default Opt. grp. for this LMBCS session *\/$/;"	m	struct:__anon25	file:	access:public
__anon25::OptGrpConverter	ucnv_lmb.c	/^    UConverterSharedData *OptGrpConverter[ULMBCS_GRP_LAST+1];    \/* Converter per Opt. grp. *\/$/;"	m	struct:__anon25	file:	access:public
__anon25::localeConverterIndex	ucnv_lmb.c	/^    uint8_t    localeConverterIndex;      \/* reasonable locale match for index *\/$/;"	m	struct:__anon25	file:	access:public
__anon27::entryName	ucmndata.c	/^    const char       *entryName;$/;"	m	struct:__anon27	file:	access:public
__anon27::pHeader	ucmndata.c	/^    const DataHeader *pHeader;$/;"	m	struct:__anon27	file:	access:public
__anon28::count	ucmndata.c	/^    uint32_t          count;$/;"	m	struct:__anon28	file:	access:public
__anon28::entry	ucmndata.c	/^    PointerTOCEntry   entry[2];   \/* Actual size is from count. *\/$/;"	m	struct:__anon28	file:	access:public
__anon28::reserved	ucmndata.c	/^    uint32_t          reserved;$/;"	m	struct:__anon28	file:	access:public
__anon39::prop	uniset_props.cpp	/^    UProperty prop;$/;"	m	struct:__anon39	file:	access:public
__anon39::value	uniset_props.cpp	/^    int32_t value;$/;"	m	struct:__anon39	file:	access:public
__anon40::d64	putil.c	/^    double d64;$/;"	m	union:__anon40	file:	access:public
__anon40::i64	putil.c	/^    int64_t i64; \/* This must be defined first in order to allow the initialization to work. This is a C89 feature. *\/$/;"	m	union:__anon40	file:	access:public
__anon41::fileTime	putil.c	/^    FILETIME fileTime;$/;"	m	union:__anon41	file:	access:public
__anon41::int64	putil.c	/^    int64_t int64;$/;"	m	union:__anon41	file:	access:public
__anon42::date_region	putil.c	/^    int32_t date_region;$/;"	m	struct:__anon42	file:	access:public
__anon42::lang	putil.c	/^    int32_t lang;$/;"	m	struct:__anon42	file:	access:public
__anon42::posixID	putil.c	/^    const char* posixID;$/;"	m	struct:__anon42	file:	access:public
__anon42::region	putil.c	/^    int32_t region;$/;"	m	struct:__anon42	file:	access:public
__anon42::script	putil.c	/^    int32_t script;$/;"	m	struct:__anon42	file:	access:public
__anon43::name	ucnv_bld.c	/^  const char *name;$/;"	m	struct:__anon43	file:	access:public
__anon43::type	ucnv_bld.c	/^  const UConverterType type;$/;"	m	struct:__anon43	file:	access:public
__anon51::length	uresdata.c	/^    int32_t length;$/;"	m	struct:__anon51	file:	access:public
__anon51::nul	uresdata.c	/^    UChar nul;$/;"	m	struct:__anon51	file:	access:public
__anon51::pad	uresdata.c	/^    UChar pad;$/;"	m	struct:__anon51	file:	access:public
__anon61::gbConverter	ucnvhz.c	/^    UConverter* gbConverter;$/;"	m	struct:__anon61	file:	access:public
__anon61::isEmptySegment	ucnvhz.c	/^    UBool isEmptySegment;$/;"	m	struct:__anon61	file:	access:public
__anon61::isEscapeAppended	ucnvhz.c	/^    UBool isEscapeAppended;$/;"	m	struct:__anon61	file:	access:public
__anon61::isStateDBCS	ucnvhz.c	/^    UBool isStateDBCS;$/;"	m	struct:__anon61	file:	access:public
__anon61::isTargetUCharDBCS	ucnvhz.c	/^    UBool isTargetUCharDBCS;$/;"	m	struct:__anon61	file:	access:public
__anon61::sourceIndex	ucnvhz.c	/^    int32_t sourceIndex;$/;"	m	struct:__anon61	file:	access:public
__anon61::targetIndex	ucnvhz.c	/^    int32_t targetIndex;$/;"	m	struct:__anon61	file:	access:public
__anon68::currentConverter	ucnv2022.c	/^    UConverter *currentConverter;$/;"	m	struct:__anon68	file:	access:public
__anon68::currentType	ucnv2022.c	/^    Cnv2022Type currentType;$/;"	m	struct:__anon68	file:	access:public
__anon68::fromU2022State	ucnv2022.c	/^    ISO2022State toU2022State, fromU2022State;$/;"	m	struct:__anon68	file:	access:public
__anon68::isEmptySegment	ucnv2022.c	/^    UBool isEmptySegment;$/;"	m	struct:__anon68	file:	access:public
__anon68::isFirstBuffer	ucnv2022.c	/^    UBool isFirstBuffer;$/;"	m	struct:__anon68	file:	access:public
__anon68::key	ucnv2022.c	/^    uint32_t key;$/;"	m	struct:__anon68	file:	access:public
__anon68::locale	ucnv2022.c	/^    char locale[3];$/;"	m	struct:__anon68	file:	access:public
__anon68::myConverterArray	ucnv2022.c	/^    UConverterSharedData *myConverterArray[UCNV_2022_MAX_CONVERTERS];$/;"	m	struct:__anon68	file:	access:public
__anon68::name	ucnv2022.c	/^    char name[30];$/;"	m	struct:__anon68	file:	access:public
__anon68::toU2022State	ucnv2022.c	/^    ISO2022State toU2022State, fromU2022State;$/;"	m	struct:__anon68	file:	access:public
__anon68::version	ucnv2022.c	/^    uint32_t version;$/;"	m	struct:__anon68	file:	access:public
__anon71::keyword	uloc.c	/^    char keyword[ULOC_KEYWORD_BUFFER_LEN];$/;"	m	struct:__anon71	file:	access:public
__anon71::keywordLen	uloc.c	/^    int32_t keywordLen;$/;"	m	struct:__anon71	file:	access:public
__anon71::valueLen	uloc.c	/^    int32_t valueLen;$/;"	m	struct:__anon71	file:	access:public
__anon71::valueStart	uloc.c	/^    const char *valueStart;$/;"	m	struct:__anon71	file:	access:public
__anon72::dummy	uloc.c	/^    int32_t dummy;  \/* to avoid uninitialized memory copy from qsort *\/$/;"	m	struct:__anon72	file:	access:public
__anon72::locale	uloc.c	/^    char *locale;$/;"	m	struct:__anon72	file:	access:public
__anon72::q	uloc.c	/^    float q;$/;"	m	struct:__anon72	file:	access:public
__anon77::codePoint	ucnvmbcs.h	/^    UChar32 codePoint;$/;"	m	struct:__anon77	access:public
__anon77::offset	ucnvmbcs.h	/^    uint32_t offset;$/;"	m	struct:__anon77	access:public
__anon81::countStates	ucnvmbcs.h	/^    uint32_t countStates,$/;"	m	struct:__anon81	access:public
__anon81::countToUFallbacks	ucnvmbcs.h	/^             countToUFallbacks,$/;"	m	struct:__anon81	access:public
__anon81::flags	ucnvmbcs.h	/^             flags,$/;"	m	struct:__anon81	access:public
__anon81::fromUBytesLength	ucnvmbcs.h	/^             fromUBytesLength;$/;"	m	struct:__anon81	access:public
__anon81::fullStage2Length	ucnvmbcs.h	/^    uint32_t fullStage2Length;  \/* number of 32-bit units *\/$/;"	m	struct:__anon81	access:public
__anon81::offsetFromUBytes	ucnvmbcs.h	/^             offsetFromUBytes,$/;"	m	struct:__anon81	access:public
__anon81::offsetFromUTable	ucnvmbcs.h	/^             offsetFromUTable,$/;"	m	struct:__anon81	access:public
__anon81::offsetToUCodeUnits	ucnvmbcs.h	/^             offsetToUCodeUnits,$/;"	m	struct:__anon81	access:public
__anon81::options	ucnvmbcs.h	/^    uint32_t options;$/;"	m	struct:__anon81	access:public
__anon81::version	ucnvmbcs.h	/^    UVersionInfo version;$/;"	m	struct:__anon81	access:public
__anon85::dirPropsMemory	ubidiimp.h	/^    DirProp *dirPropsMemory;$/;"	m	union:__anon85	access:public
__anon85::levelsMemory	ubidiimp.h	/^    UBiDiLevel *levelsMemory;$/;"	m	union:__anon85	access:public
__anon85::parasMemory	ubidiimp.h	/^    Para *parasMemory;$/;"	m	union:__anon85	access:public
__anon85::runsMemory	ubidiimp.h	/^    Run *runsMemory;$/;"	m	union:__anon85	access:public
__anon91::t1	cmemory.h	/^    long    t1;$/;"	m	union:__anon91	access:public
__anon91::t2	cmemory.h	/^    double  t2;$/;"	m	union:__anon91	access:public
__anon91::t3	cmemory.h	/^    void   *t3;$/;"	m	union:__anon91	access:public
__anon93::end	unames.c	/^    uint32_t start, end;$/;"	m	struct:__anon93	file:	access:public
__anon93::size	unames.c	/^    uint16_t size;$/;"	m	struct:__anon93	file:	access:public
__anon93::start	unames.c	/^    uint32_t start, end;$/;"	m	struct:__anon93	file:	access:public
__anon93::type	unames.c	/^    uint8_t type, variant;$/;"	m	struct:__anon93	file:	access:public
__anon93::variant	unames.c	/^    uint8_t type, variant;$/;"	m	struct:__anon93	file:	access:public
__anon94::algNamesOffset	unames.c	/^    uint32_t tokenStringOffset, groupsOffset, groupStringOffset, algNamesOffset;$/;"	m	struct:__anon94	file:	access:public
__anon94::groupStringOffset	unames.c	/^    uint32_t tokenStringOffset, groupsOffset, groupStringOffset, algNamesOffset;$/;"	m	struct:__anon94	file:	access:public
__anon94::groupsOffset	unames.c	/^    uint32_t tokenStringOffset, groupsOffset, groupStringOffset, algNamesOffset;$/;"	m	struct:__anon94	file:	access:public
__anon94::tokenStringOffset	unames.c	/^    uint32_t tokenStringOffset, groupsOffset, groupStringOffset, algNamesOffset;$/;"	m	struct:__anon94	file:	access:public
__anon95::code	unames.c	/^    UChar32 code;$/;"	m	struct:__anon95	file:	access:public
__anon95::otherName	unames.c	/^    const char *otherName;$/;"	m	struct:__anon95	file:	access:public
__anon96::data	uenum.c	/^    char    data; \/* actual data starts here *\/$/;"	m	struct:__anon96	file:	access:public
__anon96::len	uenum.c	/^    int32_t len;  \/* number of bytes available starting at 'data' *\/$/;"	m	struct:__anon96	file:	access:public
__anon9::locale	ucnv_cnv.h	/^    const char *pkg, *name, *locale;$/;"	m	struct:__anon9	access:public
__anon9::name	ucnv_cnv.h	/^    const char *pkg, *name, *locale;$/;"	m	struct:__anon9	access:public
__anon9::nestedLoads	ucnv_cnv.h	/^    int32_t nestedLoads;        \/* count nested ucnv_load() calls *\/$/;"	m	struct:__anon9	access:public
__anon9::onlyTestIsLoadable	ucnv_cnv.h	/^    UBool onlyTestIsLoadable;   \/* input: don't actually load *\/$/;"	m	struct:__anon9	access:public
__anon9::options	ucnv_cnv.h	/^    uint32_t options;$/;"	m	struct:__anon9	access:public
__anon9::pkg	ucnv_cnv.h	/^    const char *pkg, *name, *locale;$/;"	m	struct:__anon9	access:public
__anon9::reserved	ucnv_cnv.h	/^    int16_t reserved;           \/* reserved - for good alignment of the pointers *\/$/;"	m	struct:__anon9	access:public
__anon9::reserved0	ucnv_cnv.h	/^    UBool reserved0;            \/* reserved - for good alignment of the pointers *\/$/;"	m	struct:__anon9	access:public
__anon9::size	ucnv_cnv.h	/^    int32_t size;               \/* sizeof(UConverterLoadArgs) *\/$/;"	m	struct:__anon9	access:public
__cxa_bad_cast	putil.c	/^__cxa_bad_cast (void)$/;"	f	signature:(void)
__cxa_bad_typeid	putil.c	/^__cxa_bad_typeid (void)$/;"	f	signature:(void)
__uint8_t	unicode/ptypes.h	46;"	d
_acceptLangItem	uloc.c	/^} _acceptLangItem;$/;"	t	typeref:struct:__anon72	file:
_add	unicode/uniset.h	/^    void _add(const UnicodeString& s);$/;"	p	class:UnicodeSet	access:private	signature:(const UnicodeString& s)
_add	uniset.cpp	/^void UnicodeSet::_add(const UnicodeString& s) {$/;"	f	class:UnicodeSet	signature:(const UnicodeString& s)
_addExtensionToList	uloc_tag.c	/^_addExtensionToList(ExtensionListEntry **first, ExtensionListEntry *ext, UBool localeToBCP) {$/;"	f	file:	signature:(ExtensionListEntry **first, ExtensionListEntry *ext, UBool localeToBCP)
_addVariantToList	uloc_tag.c	/^_addVariantToList(VariantListEntry **first, VariantListEntry *var) {$/;"	f	file:	signature:(VariantListEntry **first, VariantListEntry *var)
_advance	ruleiter.cpp	/^void RuleCharacterIterator::_advance(int32_t count) {$/;"	f	class:RuleCharacterIterator	signature:(int32_t count)
_advance	ruleiter.h	/^    void _advance(int32_t count);$/;"	p	class:RuleCharacterIterator	access:private	signature:(int32_t count)
_appendKeywords	uloc_tag.c	/^_appendKeywords(ULanguageTag* langtag, char* appendAt, int32_t capacity, UErrorCode* status) {$/;"	f	file:	signature:(ULanguageTag* langtag, char* appendAt, int32_t capacity, UErrorCode* status)
_appendKeywordsToLanguageTag	uloc_tag.c	/^_appendKeywordsToLanguageTag(const char* localeID, char* appendAt, int32_t capacity, UBool strict, UBool hadPosix, UErrorCode* status) {$/;"	f	file:	signature:(const char* localeID, char* appendAt, int32_t capacity, UBool strict, UBool hadPosix, UErrorCode* status)
_appendLDMLExtensionAsKeywords	uloc_tag.c	/^_appendLDMLExtensionAsKeywords(const char* ldmlext, ExtensionListEntry** appendTo, char* buf, int32_t bufSize, UBool *posixVariant, UErrorCode *status) {$/;"	f	file:	signature:(const char* ldmlext, ExtensionListEntry** appendTo, char* buf, int32_t bufSize, UBool *posixVariant, UErrorCode *status)
_appendLanguageToLanguageTag	uloc_tag.c	/^_appendLanguageToLanguageTag(const char* localeID, char* appendAt, int32_t capacity, UBool strict, UErrorCode* status) {$/;"	f	file:	signature:(const char* localeID, char* appendAt, int32_t capacity, UBool strict, UErrorCode* status)
_appendRegionToLanguageTag	uloc_tag.c	/^_appendRegionToLanguageTag(const char* localeID, char* appendAt, int32_t capacity, UBool strict, UErrorCode* status) {$/;"	f	file:	signature:(const char* localeID, char* appendAt, int32_t capacity, UBool strict, UErrorCode* status)
_appendScriptToLanguageTag	uloc_tag.c	/^_appendScriptToLanguageTag(const char* localeID, char* appendAt, int32_t capacity, UBool strict, UErrorCode* status) {$/;"	f	file:	signature:(const char* localeID, char* appendAt, int32_t capacity, UBool strict, UErrorCode* status)
_appendToPat	unicode/uniset.h	/^    static void _appendToPat(UnicodeString& buf, UChar32 c, UBool escapeUnprintable);$/;"	p	class:UnicodeSet	access:private	signature:(UnicodeString& buf, UChar32 c, UBool escapeUnprintable)
_appendToPat	unicode/uniset.h	/^    static void _appendToPat(UnicodeString& buf, const UnicodeString& s, UBool escapeUnprintable);$/;"	p	class:UnicodeSet	access:private	signature:(UnicodeString& buf, const UnicodeString& s, UBool escapeUnprintable)
_appendToPat	uniset.cpp	/^void UnicodeSet::_appendToPat(UnicodeString& buf, UChar32 c, UBool$/;"	f	class:UnicodeSet	signature:(UnicodeString& buf, UChar32 c, UBool escapeUnprintable)
_appendToPat	uniset.cpp	/^void UnicodeSet::_appendToPat(UnicodeString& buf, const UnicodeString& s, UBool$/;"	f	class:UnicodeSet	signature:(UnicodeString& buf, const UnicodeString& s, UBool escapeUnprintable)
_appendUChars	ustring.c	/^static void _appendUChars(UChar *dest, int32_t destCapacity,$/;"	f	file:	signature:(UChar *dest, int32_t destCapacity, const char *src, int32_t srcLen)
_appendUTF8	ustrtrns.c	/^_appendUTF8(uint8_t *pDest, UChar32 c) {$/;"	f	file:	signature:(uint8_t *pDest, UChar32 c)
_appendVariantsToLanguageTag	uloc_tag.c	/^_appendVariantsToLanguageTag(const char* localeID, char* appendAt, int32_t capacity, UBool strict, UBool *hadPosix, UErrorCode* status) {$/;"	f	file:	signature:(const char* localeID, char* appendAt, int32_t capacity, UBool strict, UBool *hadPosix, UErrorCode* status)
_bcp47ToLDMLKey	uloc_tag.c	/^_bcp47ToLDMLKey(const char* bcpKey, int32_t bcpKeyLen,$/;"	f	file:	signature:(const char* bcpKey, int32_t bcpKeyLen, char* key, int32_t keyCapacity, UErrorCode *status)
_bcp47ToLDMLType	uloc_tag.c	/^_bcp47ToLDMLType(const char* key, int32_t keyLen,$/;"	f	file:	signature:(const char* key, int32_t keyLen, const char* bcpType, int32_t bcpTypeLen, char* type, int32_t typeCapacity, UErrorCode *status)
_canonicalize	uloc.c	/^_canonicalize(const char* localeID,$/;"	f	file:	signature:(const char* localeID, char* result, int32_t resultCapacity, uint32_t options, UErrorCode* err)
_caseMap	ucasemap.c	/^_caseMap(const UCaseMap *csm, UCaseMapFull *map,$/;"	f	file:	signature:(const UCaseMap *csm, UCaseMapFull *map, uint8_t *dest, int32_t destCapacity, const uint8_t *src, UCaseContext *csc, int32_t srcStart, int32_t srcLimit, UErrorCode *pErrorCode)
_caseMap	ustrcase.c	/^_caseMap(const UCaseMap *csm, UCaseMapFull *map,$/;"	f	file:	signature:(const UCaseMap *csm, UCaseMapFull *map, UChar *dest, int32_t destCapacity, const UChar *src, UCaseContext *csc, int32_t srcStart, int32_t srcLimit, UErrorCode *pErrorCode)
_catkey	ucat.c	/^_catkey(char* buffer, int32_t set_num, int32_t msg_num) {$/;"	f	file:	signature:(char* buffer, int32_t set_num, int32_t msg_num)
_charPtr_charAt	ustring.c	/^_charPtr_charAt(int32_t offset, void *context) {$/;"	f	file:	signature:(int32_t offset, void *context)
_copyCount	uloc.c	/^_copyCount(char *dest, int32_t destCapacity, const char *src) {$/;"	f	file:	signature:(char *dest, int32_t destCapacity, const char *src)
_current	ruleiter.cpp	/^UChar32 RuleCharacterIterator::_current() const {$/;"	f	class:RuleCharacterIterator	signature:() const
_current	ruleiter.h	/^    UChar32 _current() const;$/;"	p	class:RuleCharacterIterator	access:private	signature:() const
_currentID	servloc.h	/^    UnicodeString _currentID;$/;"	m	class:LocaleKey	access:private
_dbgCount	uniset.cpp	/^static int32_t _dbgCount = 0;$/;"	v	file:
_dbgct	uniset.cpp	/^static inline void _dbgct(UnicodeSet* set) {$/;"	f	file:	signature:(UnicodeSet* set)
_dbgct	uniset.cpp	117;"	d	file:
_dbgct	uniset_props.cpp	317;"	d	file:
_dbgdt	uniset.cpp	/^static inline void _dbgdt(UnicodeSet* set) {$/;"	f	file:	signature:(UnicodeSet* set)
_dbgdt	uniset.cpp	118;"	d	file:
_deleteBuildNode	triedict.cpp	/^static void U_CALLCONV _deleteBuildNode(void *obj) {$/;"	f	file:	signature:(void *obj)
_deleteEngine	brkeng.cpp	/^static void U_CALLCONV _deleteEngine(void *obj) {$/;"	f	file:	signature:(void *obj)
_deleteFactory	rbbi.cpp	/^static void U_CALLCONV _deleteFactory(void *obj) {$/;"	f	file:	signature:(void *obj)
_deleteVariant	uloc.c	/^_deleteVariant(char* variants, int32_t variantsLen,$/;"	f	file:	signature:(char* variants, int32_t variantsLen, const char* toDelete, int32_t toDeleteLen)
_digit16	ustring.c	/^static int8_t _digit16(UChar c) {$/;"	f	file:	signature:(UChar c)
_digit8	ustring.c	/^static int8_t _digit8(UChar c) {$/;"	f	file:	signature:(UChar c)
_enumArray	propname.h	/^    EnumValue _enumArray; \/*  [array of count] *\/$/;"	m	class:NonContiguousEnumToOffset	access:private
_enumArray	propname.h	/^    EnumValue _enumArray; \/*  [array of count] EnumValues *\/$/;"	m	class:NameToEnum	access:private
_enumPropertyStartsRange	ubidi_props.c	/^_enumPropertyStartsRange(const void *context, UChar32 start, UChar32 end, uint32_t value) {$/;"	f	file:	signature:(const void *context, UChar32 start, UChar32 end, uint32_t value)
_enumPropertyStartsRange	ucase.c	/^_enumPropertyStartsRange(const void *context, UChar32 start, UChar32 end, uint32_t value) {$/;"	f	file:	signature:(const void *context, UChar32 start, UChar32 end, uint32_t value)
_enumPropertyStartsRange	uchar.c	/^_enumPropertyStartsRange(const void *context, UChar32 start, UChar32 end, uint32_t value) {$/;"	f	file:	signature:(const void *context, UChar32 start, UChar32 end, uint32_t value)
_enumTypeRange	uchar.c	/^_enumTypeRange(const void *context, UChar32 start, UChar32 end, uint32_t value) {$/;"	f	file:	signature:(const void *context, UChar32 start, UChar32 end, uint32_t value)
_enumTypeValue	uchar.c	/^_enumTypeValue(const void *context, uint32_t value) {$/;"	f	file:	signature:(const void *context, uint32_t value)
_extFromU	ucnvmbcs.c	/^_extFromU(UConverter *cnv, const UConverterSharedData *sharedData,$/;"	f	file:	signature:(UConverter *cnv, const UConverterSharedData *sharedData, UChar32 cp, const UChar **source, const UChar *sourceLimit, uint8_t **target, const uint8_t *targetLimit, int32_t **offsets, int32_t sourceIndex, UBool flush, UErrorCode *pErrorCode)
_extToU	ucnvmbcs.c	/^_extToU(UConverter *cnv, const UConverterSharedData *sharedData,$/;"	f	file:	signature:(UConverter *cnv, const UConverterSharedData *sharedData, int8_t length, const uint8_t **source, const uint8_t *sourceLimit, UChar **target, const UChar *targetLimit, int32_t **offsets, int32_t sourceIndex, UBool flush, UErrorCode *pErrorCode)
_fallbackID	servloc.h	/^    UnicodeString _fallbackID;$/;"	m	class:LocaleKey	access:private
_findIndex	uloc.c	/^static int16_t _findIndex(const char* const* list, const char* key)$/;"	f	file:	signature:(const char* const* list, const char* key)
_findRow	propsvec.c	/^_findRow(UPropsVectors *pv, UChar32 rangeStart) {$/;"	f	file:	signature:(UPropsVectors *pv, UChar32 rangeStart)
_findSameDataBlock	utrie.c	/^_findSameDataBlock(const uint32_t *data, int32_t dataLength,$/;"	f	file:	signature:(const uint32_t *data, int32_t dataLength, int32_t otherBlock, int32_t step)
_findSameIndexBlock	utrie.c	/^_findSameIndexBlock(const int32_t *idx, int32_t indexLength,$/;"	f	file:	signature:(const int32_t *idx, int32_t indexLength, int32_t otherBlock)
_findUnusedBlocks	utrie.c	/^_findUnusedBlocks(UNewTrie *trie) {$/;"	f	file:	signature:(UNewTrie *trie)
_fromUnicodeWithCallback	ucnv.c	/^_fromUnicodeWithCallback(UConverterFromUnicodeArgs *pArgs, UErrorCode *err) {$/;"	f	file:	signature:(UConverterFromUnicodeArgs *pArgs, UErrorCode *err)
_generatePattern	unicode/uniset.h	/^    UnicodeString& _generatePattern(UnicodeString& result,$/;"	p	class:UnicodeSet	access:private	signature:(UnicodeString& result, UBool escapeUnprintable) const
_generatePattern	uniset.cpp	/^UnicodeString& UnicodeSet::_generatePattern(UnicodeString& result,$/;"	f	class:UnicodeSet	signature:(UnicodeString& result, UBool escapeUnprintable) const
_getBuffer	uenum.c	/^static void* _getBuffer(UEnumeration* en, int32_t capacity) {$/;"	f	file:	signature:(UEnumeration* en, int32_t capacity)
_getDisplayNameForComponent	locdispnames.cpp	/^_getDisplayNameForComponent(const char *locale,$/;"	f	file:	signature:(const char *locale, const char *displayLocale, UChar *dest, int32_t destCapacity, UDisplayNameGetter *getter, const char *tag, UErrorCode *pErrorCode)
_getKeywords	uloc.c	/^_getKeywords(const char *localeID,$/;"	f	file:	signature:(const char *localeID, char prev, char *keywords, int32_t keywordCapacity, char *values, int32_t valuesCapacity, int32_t *valLen, UBool valuesToo, const char* addKeyword, const char* addValue, UErrorCode *status)
_getStringOrCopyKey	locdispnames.cpp	/^_getStringOrCopyKey(const char *path, const char *locale,$/;"	f	file:	signature:(const char *path, const char *locale, const char *tableKey, const char* subTableKey, const char *itemKey, const char *substitute, UChar *dest, int32_t destCapacity, UErrorCode *pErrorCode)
_getVariant	uloc.c	/^_getVariant(const char *localeID,$/;"	f	file:	signature:(const char *localeID, char prev, char *variant, int32_t variantCapacity)
_getVariantEx	uloc.c	/^_getVariantEx(const char *localeID,$/;"	f	file:	signature:(const char *localeID, char prev, char *variant, int32_t variantCapacity, UBool needSeparator)
_hasBCP47Extension	uloc.c	532;"	d	file:
_id	serv.h	/^  const UnicodeString _id;$/;"	m	class:ICUServiceKey	access:private
_ids	servls.cpp	/^    UVector _ids;$/;"	m	class:ServiceEnumeration	file:	access:private
_init	uvector.cpp	/^void UVector::_init(int32_t initialCapacity, UErrorCode &status) {$/;"	f	class:UVector	signature:(int32_t initialCapacity, UErrorCode &status)
_init	uvector.h	/^    void _init(int32_t initialCapacity, UErrorCode &status);$/;"	p	class:UVector	access:private	signature:(int32_t initialCapacity, UErrorCode &status)
_init	uvectr32.cpp	/^void UVector32::_init(int32_t initialCapacity, UErrorCode &status) {$/;"	f	class:UVector32	signature:(int32_t initialCapacity, UErrorCode &status)
_init	uvectr32.h	/^    void _init(int32_t initialCapacity, UErrorCode &status);$/;"	p	class:UVector32	access:private	signature:(int32_t initialCapacity, UErrorCode &status)
_init	uvectr64.cpp	/^void UVector64::_init(int32_t initialCapacity, UErrorCode &status) {$/;"	f	class:UVector64	signature:(int32_t initialCapacity, UErrorCode &status)
_init	uvectr64.h	/^    void _init(int32_t initialCapacity, UErrorCode &status);$/;"	p	class:UVector64	access:private	signature:(int32_t initialCapacity, UErrorCode &status)
_initializeULanguageTag	uloc_tag.c	/^_initializeULanguageTag(ULanguageTag* langtag) {$/;"	f	file:	signature:(ULanguageTag* langtag)
_installedLocales	locavailable.cpp	/^static char** _installedLocales = NULL;$/;"	v	file:
_installedLocalesCount	locavailable.cpp	/^static int32_t _installedLocalesCount = 0;$/;"	v	file:
_internal_toASCII	uidna.cpp	/^_internal_toASCII(const UChar* src, int32_t srcLength, $/;"	f	file:	signature:(const UChar* src, int32_t srcLength, UChar* dest, int32_t destCapacity, int32_t options, UStringPrepProfile* nameprep, UParseError* parseError, UErrorCode* status)
_internal_toUnicode	uidna.cpp	/^_internal_toUnicode(const UChar* src, int32_t srcLength,$/;"	f	file:	signature:(const UChar* src, int32_t srcLength, UChar* dest, int32_t destCapacity, int32_t options, UStringPrepProfile* nameprep, UParseError* parseError, UErrorCode* status)
_isAlphaNumericString	uloc_tag.c	/^_isAlphaNumericString(const char* s, int32_t len) {$/;"	f	file:	signature:(const char* s, int32_t len)
_isAlphaString	uloc_tag.c	/^_isAlphaString(const char* s, int32_t len) {$/;"	f	file:	signature:(const char* s, int32_t len)
_isExtensionSingleton	uloc_tag.c	/^_isExtensionSingleton(const char* s, int32_t len) {$/;"	f	file:	signature:(const char* s, int32_t len)
_isExtensionSubtag	uloc_tag.c	/^_isExtensionSubtag(const char* s, int32_t len) {$/;"	f	file:	signature:(const char* s, int32_t len)
_isExtensionSubtags	uloc_tag.c	/^_isExtensionSubtags(const char* s, int32_t len) {$/;"	f	file:	signature:(const char* s, int32_t len)
_isExtlangSubtag	uloc_tag.c	/^_isExtlangSubtag(const char* s, int32_t len) {$/;"	f	file:	signature:(const char* s, int32_t len)
_isIDPrefix	uloc.c	1119;"	d	file:
_isIDSeparator	ulocimp.h	39;"	d
_isLDMLKey	uloc_tag.c	/^_isLDMLKey(const char* s, int32_t len) {$/;"	f	file:	signature:(const char* s, int32_t len)
_isLDMLType	uloc_tag.c	/^_isLDMLType(const char* s, int32_t len) {$/;"	f	file:	signature:(const char* s, int32_t len)
_isLanguageSubtag	uloc_tag.c	/^_isLanguageSubtag(const char* s, int32_t len) {$/;"	f	file:	signature:(const char* s, int32_t len)
_isNumericString	uloc_tag.c	/^_isNumericString(const char* s, int32_t len) {$/;"	f	file:	signature:(const char* s, int32_t len)
_isPrefixLetter	uloc.c	1115;"	d	file:
_isPrivateuseValueSubtag	uloc_tag.c	/^_isPrivateuseValueSubtag(const char* s, int32_t len) {$/;"	f	file:	signature:(const char* s, int32_t len)
_isPrivateuseValueSubtags	uloc_tag.c	/^_isPrivateuseValueSubtags(const char* s, int32_t len) {$/;"	f	file:	signature:(const char* s, int32_t len)
_isRegionSubtag	uloc_tag.c	/^_isRegionSubtag(const char* s, int32_t len) {$/;"	f	file:	signature:(const char* s, int32_t len)
_isScriptSubtag	uloc_tag.c	/^_isScriptSubtag(const char* s, int32_t len) {$/;"	f	file:	signature:(const char* s, int32_t len)
_isTerminator	uloc.c	1124;"	d	file:
_isVariantSubtag	uloc_tag.c	/^_isVariantSubtag(const char* s, int32_t len) {$/;"	f	file:	signature:(const char* s, int32_t len)
_kCountries	locdispnames.cpp	/^static const char _kCountries[]       = "Countries";$/;"	v	file:
_kCurrencies	locdispnames.cpp	/^static const char _kCurrencies[]      = "Currencies";$/;"	v	file:
_kCurrency	locdispnames.cpp	/^static const char _kCurrency[]        = "currency";$/;"	v	file:
_kIndexLocaleName	locavailable.cpp	/^static const char _kIndexLocaleName[] = "res_index";$/;"	v	file:
_kIndexTag	locavailable.cpp	/^static const char _kIndexTag[]        = "InstalledLocales";$/;"	v	file:
_kKeys	locdispnames.cpp	/^static const char _kKeys[]            = "Keys";$/;"	v	file:
_kLanguages	locdispnames.cpp	/^static const char _kLanguages[]       = "Languages";$/;"	v	file:
_kLocaleDisplayPattern	locdispnames.cpp	/^static const char _kLocaleDisplayPattern[] = "localeDisplayPattern";$/;"	v	file:
_kPattern	locdispnames.cpp	/^static const char _kPattern[]         = "pattern";$/;"	v	file:
_kRootName	locdispnames.cpp	/^static const char _kRootName[]        = "root";$/;"	v	file:
_kScripts	locdispnames.cpp	/^static const char _kScripts[]         = "Scripts";$/;"	v	file:
_kSeparator	locdispnames.cpp	/^static const char _kSeparator[]       = "separator";$/;"	v	file:
_kTypes	locdispnames.cpp	/^static const char _kTypes[]           = "Types";$/;"	v	file:
_kVariants	locdispnames.cpp	/^static const char _kVariants[]        = "Variants";$/;"	v	file:
_kind	servloc.h	/^    int32_t _kind;$/;"	m	class:LocaleKey	access:private
_ldmlKeyToBCP47	uloc_tag.c	/^_ldmlKeyToBCP47(const char* key, int32_t keyLen,$/;"	f	file:	signature:(const char* key, int32_t keyLen, char* bcpKey, int32_t bcpKeyCapacity, UErrorCode *status)
_ldmlTypeToBCP47	uloc_tag.c	/^_ldmlTypeToBCP47(const char* key, int32_t keyLen,$/;"	f	file:	signature:(const char* key, int32_t keyLen, const char* type, int32_t typeLen, char* bcpType, int32_t bcpTypeCapacity, UErrorCode *status)
_load	propname.cpp	/^static UBool _load() {$/;"	f	file:	signature:()
_load_installedLocales	locavailable.cpp	/^static void _load_installedLocales()$/;"	f	file:	signature:()
_matchFromSet	ustring.c	/^_matchFromSet(const UChar *string, const UChar *matchSet, UBool polarity) {$/;"	f	file:	signature:(const UChar *string, const UChar *matchSet, UBool polarity)
_obj	serv.cpp	/^    UVector* _obj;$/;"	m	struct:UVectorDeleter	file:	access:public
_offsetArray	propname.h	/^    Offset _offsetArray; \/*  [array of enumLimit-enumStart] *\/$/;"	m	class:EnumToOffset	access:private
_pos	servls.cpp	/^    int32_t _pos;$/;"	m	class:ServiceEnumeration	file:	access:private
_primaryID	servloc.h	/^    UnicodeString _primaryID;$/;"	m	class:LocaleKey	access:private
_res_findTable32Item	uresdata.c	/^_res_findTable32Item(const ResourceData *pResData, const int32_t *keyOffsets, int32_t length,$/;"	f	file:	signature:(const ResourceData *pResData, const int32_t *keyOffsets, int32_t length, const char *key, const char **realKey)
_res_findTableItem	uresdata.c	/^_res_findTableItem(const ResourceData *pResData, const uint16_t *keyOffsets, int32_t length,$/;"	f	file:	signature:(const ResourceData *pResData, const uint16_t *keyOffsets, int32_t length, const char *key, const char **realKey)
_reset	ucnv.c	/^static void _reset(UConverter *converter, UConverterResetChoice choice,$/;"	f	file:	signature:(UConverter *converter, UConverterResetChoice choice, UBool callCallback)
_service	servls.cpp	/^    const ICULocaleService* _service;$/;"	m	class:ServiceEnumeration	file:	access:private
_set_add	uniset_props.cpp	/^_set_add(USet *set, UChar32 c) {$/;"	f	file:	signature:(USet *set, UChar32 c)
_set_addRange	uniset_props.cpp	/^_set_addRange(USet *set, UChar32 start, UChar32 end) {$/;"	f	file:	signature:(USet *set, UChar32 start, UChar32 end)
_set_addString	uniset_props.cpp	/^_set_addString(USet *set, const UChar *str, int32_t length) {$/;"	f	file:	signature:(USet *set, const UChar *str, int32_t length)
_shapeToArabicDigitsWithContext	ushape.c	/^_shapeToArabicDigitsWithContext(UChar *s, int32_t length,$/;"	f	file:	signature:(UChar *s, int32_t length, UChar digitBase, UBool isLogical, UBool lastStrongWasAL)
_sortBuildNodes	triedict.cpp	/^_sortBuildNodes(const void * \/*context*\/, const void *voidl, const void *voidr) {$/;"	f	file:	signature:(const void * , const void *voidl, const void *voidr)
_strFromWCS	ustr_wcs.c	/^_strFromWCS( UChar   *dest,$/;"	f	file:	signature:( UChar *dest, int32_t destCapacity, int32_t *pDestLength, const wchar_t *src, int32_t srcLength, UErrorCode *pErrorCode)
_strToWCS	ustr_wcs.c	/^_strToWCS(wchar_t *dest, $/;"	f	file:	signature:(wchar_t *dest, int32_t destCapacity, int32_t *pDestLength, const UChar *src, int32_t srcLength, UErrorCode *pErrorCode)
_strnchr	uloc.c	/^static char* _strnchr(const char* str, int32_t len, char c) {$/;"	f	file:	signature:(const char* str, int32_t len, char c)
_timestamp	servls.cpp	/^    int32_t _timestamp;$/;"	m	class:ServiceEnumeration	file:	access:private
_toPattern	unicode/uniset.h	/^    UnicodeString& _toPattern(UnicodeString& result,$/;"	p	class:UnicodeSet	access:private	signature:(UnicodeString& result, UBool escapeUnprintable) const
_toPattern	uniset.cpp	/^UnicodeString& UnicodeSet::_toPattern(UnicodeString& result,$/;"	f	class:UnicodeSet	signature:(UnicodeString& result, UBool escapeUnprintable) const
_toTitle	ucasemap.c	/^_toTitle(UCaseMap *csm,$/;"	f	file:	signature:(UCaseMap *csm, uint8_t *dest, int32_t destCapacity, const uint8_t *src, UCaseContext *csc, int32_t srcLength, UErrorCode *pErrorCode)
_toTitle	ustrcase.c	/^_toTitle(UCaseMap *csm,$/;"	f	file:	signature:(UCaseMap *csm, UChar *dest, int32_t destCapacity, const UChar *src, UCaseContext *csc, int32_t srcLength, UErrorCode *pErrorCode)
_toUnicodeWithCallback	ucnv.c	/^_toUnicodeWithCallback(UConverterToUnicodeArgs *pArgs, UErrorCode *err) {$/;"	f	file:	signature:(UConverterToUnicodeArgs *pArgs, UErrorCode *err)
_uBrkErrorName	utypes.c	/^_uBrkErrorName[U_BRK_ERROR_LIMIT - U_BRK_ERROR_START] = {$/;"	v	file:
_uErrorInfoName	utypes.c	/^_uErrorInfoName[U_ERROR_WARNING_LIMIT-U_ERROR_WARNING_START]={$/;"	v	file:
_uErrorName	utypes.c	/^_uErrorName[U_STANDARD_ERROR_LIMIT]={$/;"	v	file:
_uFmtErrorName	utypes.c	/^_uFmtErrorName[U_FMT_PARSE_ERROR_LIMIT - U_FMT_PARSE_ERROR_START] = {$/;"	v	file:
_uIDNAErrorName	utypes.c	/^_uIDNAErrorName[U_IDNA_ERROR_LIMIT - U_IDNA_ERROR_START] = {$/;"	v	file:
_uPluginErrorName	utypes.c	/^_uPluginErrorName[U_PLUGIN_ERROR_LIMIT - U_PLUGIN_ERROR_START] = {$/;"	v	file:
_uRegexErrorName	utypes.c	/^_uRegexErrorName[U_REGEX_ERROR_LIMIT - U_REGEX_ERROR_START] = {$/;"	v	file:
_uTransErrorName	utypes.c	/^_uTransErrorName[U_PARSE_ERROR_LIMIT - U_PARSE_ERROR_START]={$/;"	v	file:
_uhash_allocate	uhash.c	/^_uhash_allocate(UHashtable *hash,$/;"	f	file:	signature:(UHashtable *hash, int32_t primeIndex, UErrorCode *status)
_uhash_create	uhash.c	/^_uhash_create(UHashFunction *keyHash, $/;"	f	file:	signature:(UHashFunction *keyHash, UKeyComparator *keyComp, UValueComparator *valueComp, int32_t primeIndex, UErrorCode *status)
_uhash_find	uhash.c	/^_uhash_find(const UHashtable *hash, UHashTok key,$/;"	f	file:	signature:(const UHashtable *hash, UHashTok key, int32_t hashcode)
_uhash_init	uhash.c	/^_uhash_init(UHashtable *result,$/;"	f	file:	signature:(UHashtable *result, UHashFunction *keyHash, UKeyComparator *keyComp, UValueComparator *valueComp, int32_t primeIndex, UErrorCode *status)
_uhash_internalRemoveElement	uhash.c	/^_uhash_internalRemoveElement(UHashtable *hash, UHashElement* e) {$/;"	f	file:	signature:(UHashtable *hash, UHashElement* e)
_uhash_internalSetResizePolicy	uhash.c	/^_uhash_internalSetResizePolicy(UHashtable *hash, enum UHashResizePolicy policy) {$/;"	f	file:	signature:(UHashtable *hash, enum UHashResizePolicy policy)
_uhash_put	uhash.c	/^_uhash_put(UHashtable *hash,$/;"	f	file:	signature:(UHashtable *hash, UHashTok key, UHashTok value, int8_t hint, UErrorCode *status)
_uhash_rehash	uhash.c	/^_uhash_rehash(UHashtable *hash, UErrorCode *status) {$/;"	f	file:	signature:(UHashtable *hash, UErrorCode *status)
_uhash_remove	uhash.c	/^_uhash_remove(UHashtable *hash,$/;"	f	file:	signature:(UHashtable *hash, UHashTok key)
_uhash_setElement	uhash.c	/^_uhash_setElement(UHashtable *hash, UHashElement* e,$/;"	f	file:	signature:(UHashtable *hash, UHashElement* e, int32_t hashcode, UHashTok key, UHashTok value, int8_t hint)
_uloc_addLikelySubtags	loclikely.cpp	/^_uloc_addLikelySubtags(const char*    localeID,$/;"	f	file:	signature:(const char* localeID, char* maximizedLocaleID, int32_t maximizedLocaleIDCapacity, UErrorCode* err)
_uloc_getOrientationHelper	locresdata.cpp	/^_uloc_getOrientationHelper(const char* localeId,$/;"	f	file:	signature:(const char* localeId, const char* key, UErrorCode *status)
_uloc_minimizeSubtags	loclikely.cpp	/^_uloc_minimizeSubtags(const char*    localeID,$/;"	f	file:	signature:(const char* localeID, char* minimizedLocaleID, int32_t minimizedLocaleIDCapacity, UErrorCode* err)
_uloc_strtod	uloc.c	/^_uloc_strtod(const char *start, char **end) {$/;"	f	file:	signature:(const char *start, char **end)
_updateOffsets	ucnv.c	/^_updateOffsets(int32_t *offsets, int32_t length,$/;"	f	file:	signature:(int32_t *offsets, int32_t length, int32_t sourceIndex, int32_t errorInputLength)
a	unicode/utext.h	/^    int64_t         a;$/;"	m	struct:UText	access:public
aMutex	mutex.cpp	/^static Mutex *aMutex = 0;$/;"	v	file:
acceptMarked	dictbe.cpp	/^  int32_t   acceptMarked( UText *text );$/;"	p	class:PossibleWord	file:	access:public	signature:( UText *text )
acceptMarked	dictbe.cpp	/^PossibleWord::acceptMarked( UText *text ) {$/;"	f	class:PossibleWord	signature:( UText *text )
acceptsListener	serv.cpp	/^ICUService::acceptsListener(const EventListener& l) const $/;"	f	class:ICUService	signature:(const EventListener& l) const
access	unicode/utext.h	/^    UTextAccess *access;$/;"	m	struct:UTextFuncs	access:public
actual	locbased.h	/^    char* actual;$/;"	m	class:LocaleBased	access:private
actualDescriptor	serv.cpp	/^    UnicodeString actualDescriptor;$/;"	m	class:CacheEntry	file:	access:public
adaptBias	punycode.c	/^adaptBias(int32_t delta, int32_t length, UBool firstTime) {$/;"	f	file:	signature:(int32_t delta, int32_t length, UBool firstTime)
add	unicode/uniset.h	/^    UnicodeSet& add(UChar32 c);$/;"	p	class:UnicodeSet	access:public	signature:(UChar32 c)
add	unicode/uniset.h	/^    UnicodeSet& add(const UnicodeString& s);$/;"	p	class:UnicodeSet	access:public	signature:(const UnicodeString& s)
add	unicode/uniset.h	/^    virtual UnicodeSet& add(UChar32 start, UChar32 end);$/;"	p	class:UnicodeSet	access:public	signature:(UChar32 start, UChar32 end)
add	unicode/uniset.h	/^    void add(const UChar32* other, int32_t otherLen, int8_t polarity);$/;"	p	class:UnicodeSet	access:private	signature:(const UChar32* other, int32_t otherLen, int8_t polarity)
add	uniset.cpp	/^UnicodeSet& UnicodeSet::add(UChar32 c) {$/;"	f	class:UnicodeSet	signature:(UChar32 c)
add	uniset.cpp	/^UnicodeSet& UnicodeSet::add(UChar32 start, UChar32 end) {$/;"	f	class:UnicodeSet	signature:(UChar32 start, UChar32 end)
add	uniset.cpp	/^UnicodeSet& UnicodeSet::add(const UnicodeString& s) {$/;"	f	class:UnicodeSet	signature:(const UnicodeString& s)
add	uniset.cpp	/^void UnicodeSet::add(const UChar32* other, int32_t otherLen, int8_t polarity) {$/;"	f	class:UnicodeSet	signature:(const UChar32* other, int32_t otherLen, int8_t polarity)
add	uset_imp.h	/^    USetAdd *add;$/;"	m	struct:USetAdder	access:public
addAll	unicode/uniset.h	/^    UnicodeSet& addAll(const UnicodeString& s);$/;"	p	class:UnicodeSet	access:public	signature:(const UnicodeString& s)
addAll	unicode/uniset.h	/^    virtual UnicodeSet& addAll(const UnicodeSet& c);$/;"	p	class:UnicodeSet	access:public	signature:(const UnicodeSet& c)
addAll	uniset.cpp	/^UnicodeSet& UnicodeSet::addAll(const UnicodeSet& c) {$/;"	f	class:UnicodeSet	signature:(const UnicodeSet& c)
addAll	uniset.cpp	/^UnicodeSet& UnicodeSet::addAll(const UnicodeString& s) {$/;"	f	class:UnicodeSet	signature:(const UnicodeString& s)
addCanonIterPropertyStarts	normalizer2impl.cpp	/^Normalizer2Impl::addCanonIterPropertyStarts(const USetAdder *sa, UErrorCode &errorCode) const {$/;"	f	class:Normalizer2Impl	signature:(const USetAdder *sa, UErrorCode &errorCode) const
addCanonIterPropertyStarts	normalizer2impl.h	/^    void addCanonIterPropertyStarts(const USetAdder *sa, UErrorCode &errorCode) const;$/;"	p	class:Normalizer2Impl	access:public	signature:(const USetAdder *sa, UErrorCode &errorCode) const
addCaseMapping	uniset_props.cpp	/^addCaseMapping(UnicodeSet &set, int32_t result, const UChar *full, UnicodeString &str) {$/;"	f	file:	signature:(UnicodeSet &set, int32_t result, const UChar *full, UnicodeString &str)
addChar	triedict.cpp	/^    void addChar(UChar ch) {$/;"	f	class:BuildCompactTrieVerticalNode	access:public	signature:(UChar ch)
addComposites	normalizer2impl.cpp	/^void Normalizer2Impl::addComposites(const uint16_t *list, UnicodeSet &set) const {$/;"	f	class:Normalizer2Impl	signature:(const uint16_t *list, UnicodeSet &set) const
addComposites	normalizer2impl.h	/^    void addComposites(const uint16_t *list, UnicodeSet &set) const;$/;"	p	class:Normalizer2Impl	access:private	signature:(const uint16_t *list, UnicodeSet &set) const
addElement	uvector.cpp	/^void UVector::addElement(int32_t elem, UErrorCode &status) {$/;"	f	class:UVector	signature:(int32_t elem, UErrorCode &status)
addElement	uvector.cpp	/^void UVector::addElement(void* obj, UErrorCode &status) {$/;"	f	class:UVector	signature:(void* obj, UErrorCode &status)
addElement	uvector.h	/^    void addElement(int32_t elem, UErrorCode &status);$/;"	p	class:UVector	access:public	signature:(int32_t elem, UErrorCode &status)
addElement	uvector.h	/^    void addElement(void* obj, UErrorCode &status);$/;"	p	class:UVector	access:public	signature:(void* obj, UErrorCode &status)
addElement	uvectr32.h	/^    void addElement(int32_t elem, UErrorCode &status);$/;"	p	class:UVector32	access:public	signature:(int32_t elem, UErrorCode &status)
addElement	uvectr32.h	/^inline void UVector32::addElement(int32_t elem, UErrorCode &status) {$/;"	f	class:UVector32	signature:(int32_t elem, UErrorCode &status)
addElement	uvectr64.h	/^    void addElement(int64_t elem, UErrorCode &status);$/;"	p	class:UVector64	access:public	signature:(int64_t elem, UErrorCode &status)
addElement	uvectr64.h	/^inline void UVector64::addElement(int64_t elem, UErrorCode &status) {$/;"	f	class:UVector64	signature:(int64_t elem, UErrorCode &status)
addEntry	rbbirb.h	/^    virtual void      addEntry  (const UnicodeString &key, RBBINode *val, UErrorCode &err);$/;"	p	class:RBBISymbolTable	access:public	signature:(const UnicodeString &key, RBBINode *val, UErrorCode &err)
addEntry	rbbistbl.cpp	/^void            RBBISymbolTable::addEntry  (const UnicodeString &key, RBBINode *val, UErrorCode &err) {$/;"	f	class:RBBISymbolTable	signature:(const UnicodeString &key, RBBINode *val, UErrorCode &err)
addListener	servnotf.cpp	/^ICUNotifier::addListener(const EventListener* l, UErrorCode& status) $/;"	f	class:ICUNotifier	signature:(const EventListener* l, UErrorCode& status)
addMatchSetTo	unicode/unimatch.h	/^    virtual void addMatchSetTo(UnicodeSet& toUnionTo) const = 0;$/;"	p	class:UnicodeMatcher	access:public	signature:(UnicodeSet& toUnionTo) const
addMatchSetTo	unicode/uniset.h	/^    virtual void addMatchSetTo(UnicodeSet& toUnionTo) const;$/;"	p	class:UnicodeSet	access:public	signature:(UnicodeSet& toUnionTo) const
addMatchSetTo	uniset.cpp	/^void UnicodeSet::addMatchSetTo(UnicodeSet& toUnionTo) const {$/;"	f	class:UnicodeSet	signature:(UnicodeSet& toUnionTo) const
addNode	triedict.cpp	/^    void addNode(UChar ch, BuildCompactTrieNode *link, UErrorCode &status) {$/;"	f	class:BuildCompactTrieHorizontalNode	access:public	signature:(UChar ch, BuildCompactTrieNode *link, UErrorCode &status)
addOffset	unisetspan.cpp	/^    void addOffset(int32_t offset) {$/;"	f	class:OffsetList	access:public	signature:(int32_t offset)
addPoint	ubidi.c	/^addPoint(UBiDi *pBiDi, int32_t pos, int32_t flag)$/;"	f	file:	signature:(UBiDi *pBiDi, int32_t pos, int32_t flag)
addPropertyStarts	normalizer2impl.cpp	/^Normalizer2Impl::addPropertyStarts(const USetAdder *sa, UErrorCode & \/*errorCode*\/) const {$/;"	f	class:Normalizer2Impl	signature:(const USetAdder *sa, UErrorCode & ) const
addPropertyStarts	normalizer2impl.h	/^    void addPropertyStarts(const USetAdder *sa, UErrorCode &errorCode) const;$/;"	p	class:Normalizer2Impl	access:public	signature:(const USetAdder *sa, UErrorCode &errorCode) const
addRange	uset_imp.h	/^    USetAddRange *addRange;$/;"	m	struct:USetAdder	access:public
addRef	unicode/unistr.h	/^  void addRef(void);$/;"	p	class:UnicodeString	access:private	signature:(void)
addRef	unistr.cpp	/^UnicodeString::addRef()$/;"	f	class:UnicodeString	signature:()
addReference	rbbidata.cpp	/^RBBIDataWrapper *RBBIDataWrapper::addReference() {$/;"	f	class:RBBIDataWrapper	signature:()
addReference	rbbidata.h	/^    RBBIDataWrapper      *addReference();$/;"	p	class:RBBIDataWrapper	access:public	signature:()
addString	uset_imp.h	/^    USetAddString *addString;$/;"	m	struct:USetAdder	access:public
addToSpanNotSet	unisetspan.cpp	/^void UnicodeSetStringSpan::addToSpanNotSet(UChar32 c) {$/;"	f	class:UnicodeSetStringSpan	signature:(UChar32 c)
addToSpanNotSet	unisetspan.h	/^    void addToSpanNotSet(UChar32 c);$/;"	p	class:UnicodeSetStringSpan	access:private	signature:(UChar32 c)
addToStartSet	normalizer2impl.cpp	/^    void addToStartSet(UChar32 origin, UChar32 decompLead, UErrorCode &errorCode);$/;"	p	struct:CanonIterData	file:	access:public	signature:(UChar32 origin, UChar32 decompLead, UErrorCode &errorCode)
addToStartSet	normalizer2impl.cpp	/^void CanonIterData::addToStartSet(UChar32 origin, UChar32 decompLead, UErrorCode &errorCode) {$/;"	f	class:CanonIterData	signature:(UChar32 origin, UChar32 decompLead, UErrorCode &errorCode)
addValToSet	rbbisetb.cpp	/^void  RBBISetBuilder::addValToSet(RBBINode *usetNode, uint32_t val) {$/;"	f	class:RBBISetBuilder	signature:(RBBINode *usetNode, uint32_t val)
addValToSet	rbbisetb.h	/^    void     addValToSet (RBBINode *usetNode, uint32_t val);$/;"	p	class:RBBISetBuilder	access:public	signature:(RBBINode *usetNode, uint32_t val)
addValToSets	rbbisetb.cpp	/^void  RBBISetBuilder::addValToSets(UVector *sets, uint32_t val) {$/;"	f	class:RBBISetBuilder	signature:(UVector *sets, uint32_t val)
addValToSets	rbbisetb.h	/^    void     addValToSets(UVector *sets,      uint32_t val);$/;"	p	class:RBBISetBuilder	access:public	signature:(UVector *sets, uint32_t val)
addWord	triedict.cpp	/^MutableTrieDictionary::addWord( const UChar *word,$/;"	f	class:MutableTrieDictionary	signature:( const UChar *word, int32_t length, UErrorCode &status )
addWord	triedict.h	/^  virtual void addWord( const UChar *word,$/;"	p	class:MutableTrieDictionary	access:public	signature:( const UChar *word, int32_t length, UErrorCode &status)
adjustPointer	utext.cpp	/^static void adjustPointer(UText *dest, const void **destPtr, const UText *src) {$/;"	f	file:	signature:(UText *dest, const void **destPtr, const UText *src)
adjustWSLevels	ubidi.c	/^adjustWSLevels(UBiDi *pBiDi) {$/;"	f	file:	signature:(UBiDi *pBiDi)
adoptInstead	cmemory.h	/^    void adoptInstead(T *p) {$/;"	f	class:LocalMemory	access:public	signature:(T *p)
adoptInstead	unicode/localpointer.h	/^    void adoptInstead(T *p) {$/;"	f	class:LocalArray	access:public	signature:(T *p)
adoptInstead	unicode/localpointer.h	/^    void adoptInstead(T *p) {$/;"	f	class:LocalPointer	access:public	signature:(T *p)
adoptInstead	unicode/localpointer.h	/^    void adoptInstead(T *p) {$/;"	f	class:LocalPointerBase	access:public	signature:(T *p)
adoptText	rbbi.cpp	/^RuleBasedBreakIterator::adoptText(CharacterIterator* newText) {$/;"	f	class:RuleBasedBreakIterator	signature:(CharacterIterator* newText)
adoptText	unicode/brkiter.h	/^    virtual void  adoptText(CharacterIterator* it) = 0;$/;"	p	class:BreakIterator	access:public	signature:(CharacterIterator* it)
adoptText	unicode/rbbi.h	/^    virtual void adoptText(CharacterIterator* newText);$/;"	p	class:RuleBasedBreakIterator	access:public	signature:(CharacterIterator* newText)
algNamesOffset	unames.c	/^    uint32_t tokenStringOffset, groupsOffset, groupStringOffset, algNamesOffset;$/;"	m	struct:__anon94	file:	access:public
aliasInstead	cmemory.h	/^    void aliasInstead(H *otherMemory, int32_t otherCapacity) {$/;"	f	class:MaybeStackHeaderAndArray	access:public	signature:(H *otherMemory, int32_t otherCapacity)
aliasInstead	cmemory.h	/^    void aliasInstead(T *otherArray, int32_t otherCapacity) {$/;"	f	class:MaybeStackArray	access:public	signature:(T *otherArray, int32_t otherCapacity)
aliasList	ucnv_io.h	/^    const uint16_t *aliasList;$/;"	m	struct:UConverterAlias	access:public
aliasListIndex	ucnv_io.c	/^    aliasListIndex=3,$/;"	e	enum:__anon128	file:
aliasListSize	ucnv_io.h	/^    uint32_t aliasListSize;$/;"	m	struct:UConverterAlias	access:public
align	utext.cpp	/^    int32_t   align;$/;"	m	struct:UTF8Buf	file:	access:public
align8	rbbirb.cpp	/^static int32_t align8(int32_t i) {return (i+7) & 0xfffffff8;}$/;"	f	file:	signature:(int32_t i)
all	unisetspan.h	/^    UBool all;$/;"	m	class:UnicodeSetStringSpan	access:private
allocDataBlock	utrie2_builder.c	/^allocDataBlock(UNewTrie2 *trie, int32_t copyBlock) {$/;"	f	file:	signature:(UNewTrie2 *trie, int32_t copyBlock)
allocIndex2Block	utrie2_builder.c	/^allocIndex2Block(UNewTrie2 *trie) {$/;"	f	file:	signature:(UNewTrie2 *trie)
allocIndex2Block	utrie2_builder.c	/^allocIndex2Block(UNewTrie2 *trie);$/;"	p	file:	signature:(UNewTrie2 *trie)
allocate	unicode/unistr.h	/^  UBool allocate(int32_t capacity);$/;"	p	class:UnicodeString	access:private	signature:(int32_t capacity)
allocate	uniset_props.cpp	/^    inline UBool allocate() {$/;"	f	class:UnicodeSetPointer	access:public	signature:()
allocate	unistr.cpp	/^UnicodeString::allocate(int32_t capacity) {$/;"	f	class:UnicodeString	signature:(int32_t capacity)
allocateInsteadAndCopy	cmemory.h	/^    inline T *allocateInsteadAndCopy(int32_t newCapacity=1, int32_t length=0);$/;"	p	class:LocalMemory	access:public	signature:(int32_t newCapacity=1, int32_t length=0)
allocateInsteadAndCopy	cmemory.h	/^inline T *LocalMemory<T>::allocateInsteadAndCopy(int32_t newCapacity, int32_t length) {$/;"	f	class:LocalMemory	signature:(int32_t newCapacity, int32_t length)
allocateInsteadAndReset	cmemory.h	/^    inline T *allocateInsteadAndReset(int32_t newCapacity=1);$/;"	p	class:LocalMemory	access:public	signature:(int32_t newCapacity=1)
allocateInsteadAndReset	cmemory.h	/^inline T *LocalMemory<T>::allocateInsteadAndReset(int32_t newCapacity) {$/;"	f	class:LocalMemory	signature:(int32_t newCapacity)
allocateStrings	unicode/uniset.h	/^    UBool allocateStrings(UErrorCode &status);$/;"	p	class:UnicodeSet	access:private	signature:(UErrorCode &status)
allocateStrings	uniset.cpp	/^UBool UnicodeSet::allocateStrings(UErrorCode &status) {$/;"	f	class:UnicodeSet	signature:(UErrorCode &status)
allocated	uhash.h	/^    UBool       allocated; \/* Was this UHashtable allocated? *\/$/;"	m	struct:UHashtable	access:public
ambiguousConverters	ucnv.c	/^static const UAmbiguousConverter ambiguousConverters[]={$/;"	v	file:
api	unorm_it.c	/^    UCharIterator api;$/;"	m	struct:UNormIterator	file:	access:public
append	charstr.cpp	/^CharString &CharString::append(char c, UErrorCode &errorCode) {$/;"	f	class:CharString	signature:(char c, UErrorCode &errorCode)
append	charstr.cpp	/^CharString &CharString::append(const char *s, int32_t sLength, UErrorCode &errorCode) {$/;"	f	class:CharString	signature:(const char *s, int32_t sLength, UErrorCode &errorCode)
append	charstr.h	/^    CharString &append(char c, UErrorCode &errorCode);$/;"	p	class:CharString	access:public	signature:(char c, UErrorCode &errorCode)
append	charstr.h	/^    CharString &append(const CharString &s, UErrorCode &errorCode) {$/;"	f	class:CharString	access:public	signature:(const CharString &s, UErrorCode &errorCode)
append	charstr.h	/^    CharString &append(const StringPiece &s, UErrorCode &errorCode) {$/;"	f	class:CharString	access:public	signature:(const StringPiece &s, UErrorCode &errorCode)
append	charstr.h	/^    CharString &append(const char *s, int32_t sLength, UErrorCode &status);$/;"	p	class:CharString	access:public	signature:(const char *s, int32_t sLength, UErrorCode &status)
append	filterednormalizer2.cpp	/^FilteredNormalizer2::append(UnicodeString &first,$/;"	f	class:FilteredNormalizer2	signature:(UnicodeString &first, const UnicodeString &second, UErrorCode &errorCode) const
append	normalizer2.cpp	/^    append(UnicodeString &first,$/;"	f	class:NoopNormalizer2	file:	access:private	signature:(UnicodeString &first, const UnicodeString &second, UErrorCode &errorCode) const
append	normalizer2.cpp	/^    append(UnicodeString &first,$/;"	f	class:Normalizer2WithImpl	access:public	signature:(UnicodeString &first, const UnicodeString &second, UErrorCode &errorCode) const
append	normalizer2impl.cpp	/^UBool ReorderingBuffer::append(const UChar *s, int32_t length,$/;"	f	class:ReorderingBuffer	signature:(const UChar *s, int32_t length, uint8_t leadCC, uint8_t trailCC, UErrorCode &errorCode)
append	normalizer2impl.h	/^    UBool append(UChar32 c, uint8_t cc, UErrorCode &errorCode) {$/;"	f	class:ReorderingBuffer	access:public	signature:(UChar32 c, uint8_t cc, UErrorCode &errorCode)
append	normalizer2impl.h	/^    UBool append(const UChar *s, int32_t length,$/;"	p	class:ReorderingBuffer	access:public	signature:(const UChar *s, int32_t length, uint8_t leadCC, uint8_t trailCC, UErrorCode &errorCode)
append	unicode/normalizer2.h	/^    append(UnicodeString &first,$/;"	p	class:FilteredNormalizer2	access:public	signature:(UnicodeString &first, const UnicodeString &second, UErrorCode &errorCode) const
append	unicode/normalizer2.h	/^    append(UnicodeString &first,$/;"	p	class:Normalizer2	access:public	signature:(UnicodeString &first, const UnicodeString &second, UErrorCode &errorCode) const
append	unicode/unistr.h	/^  inline UnicodeString& append(UChar srcChar);$/;"	p	class:UnicodeString	access:public	signature:(UChar srcChar)
append	unicode/unistr.h	/^  inline UnicodeString& append(UChar32 srcChar);$/;"	p	class:UnicodeString	access:public	signature:(UChar32 srcChar)
append	unicode/unistr.h	/^  inline UnicodeString& append(const UChar *srcChars,$/;"	p	class:UnicodeString	access:public	signature:(const UChar *srcChars, int32_t srcLength)
append	unicode/unistr.h	/^  inline UnicodeString& append(const UChar *srcChars,$/;"	p	class:UnicodeString	access:public	signature:(const UChar *srcChars, int32_t srcStart, int32_t srcLength)
append	unicode/unistr.h	/^  inline UnicodeString& append(const UnicodeString& srcText);$/;"	p	class:UnicodeString	access:public	signature:(const UnicodeString& srcText)
append	unicode/unistr.h	/^  inline UnicodeString& append(const UnicodeString& srcText,$/;"	p	class:UnicodeString	access:public	signature:(const UnicodeString& srcText, int32_t srcStart, int32_t srcLength)
append	unicode/unistr.h	/^UnicodeString::append(UChar srcChar)$/;"	f	class:UnicodeString	signature:(UChar srcChar)
append	unicode/unistr.h	/^UnicodeString::append(UChar32 srcChar) {$/;"	f	class:UnicodeString	signature:(UChar32 srcChar)
append	unicode/unistr.h	/^UnicodeString::append(const UChar *srcChars,$/;"	f	class:UnicodeString	signature:(const UChar *srcChars, int32_t srcLength)
append	unicode/unistr.h	/^UnicodeString::append(const UChar *srcChars,$/;"	f	class:UnicodeString	signature:(const UChar *srcChars, int32_t srcStart, int32_t srcLength)
append	unicode/unistr.h	/^UnicodeString::append(const UnicodeString& srcText)$/;"	f	class:UnicodeString	signature:(const UnicodeString& srcText)
append	unicode/unistr.h	/^UnicodeString::append(const UnicodeString& srcText,$/;"	f	class:UnicodeString	signature:(const UnicodeString& srcText, int32_t srcStart, int32_t srcLength)
appendBMP	normalizer2impl.h	/^    UBool appendBMP(UChar c, uint8_t cc, UErrorCode &errorCode) {$/;"	f	class:ReorderingBuffer	access:public	signature:(UChar c, uint8_t cc, UErrorCode &errorCode)
appendInvariantChars	charstr.cpp	/^CharString &CharString::appendInvariantChars(const UnicodeString &s, UErrorCode &errorCode) {$/;"	f	class:CharString	signature:(const UnicodeString &s, UErrorCode &errorCode)
appendInvariantChars	charstr.h	/^    CharString &appendInvariantChars(const UnicodeString &s, UErrorCode &errorCode);$/;"	p	class:CharString	access:public	signature:(const UnicodeString &s, UErrorCode &errorCode)
appendNumber	util.cpp	/^UnicodeString& ICU_Utility::appendNumber(UnicodeString& result, int32_t n,$/;"	f	class:ICU_Utility	signature:(UnicodeString& result, int32_t n, int32_t radix, int32_t minDigits)
appendNumber	util.h	/^    static UnicodeString& appendNumber(UnicodeString& result, int32_t n,$/;"	p	class:ICU_Utility	access:public	signature:(UnicodeString& result, int32_t n, int32_t radix = 10, int32_t minDigits = 1)
appendResult	ucasemap.c	/^appendResult(uint8_t *dest, int32_t destIndex, int32_t destCapacity,$/;"	f	file:	signature:(uint8_t *dest, int32_t destIndex, int32_t destCapacity, int32_t result, const UChar *s)
appendResult	ustrcase.c	/^appendResult(UChar *dest, int32_t destIndex, int32_t destCapacity,$/;"	f	file:	signature:(UChar *dest, int32_t destIndex, int32_t destCapacity, int32_t result, const UChar *s)
appendSupplementary	normalizer2impl.cpp	/^UBool ReorderingBuffer::appendSupplementary(UChar32 c, uint8_t cc, UErrorCode &errorCode) {$/;"	f	class:ReorderingBuffer	signature:(UChar32 c, uint8_t cc, UErrorCode &errorCode)
appendSupplementary	normalizer2impl.h	/^    UBool appendSupplementary(UChar32 c, uint8_t cc, UErrorCode &errorCode);$/;"	p	class:ReorderingBuffer	access:private	signature:(UChar32 c, uint8_t cc, UErrorCode &errorCode)
appendTag	loclikely.cpp	/^appendTag($/;"	f	file:	signature:( const char* tag, int32_t tagLength, char* buffer, int32_t* bufferLength)
appendToRule	util.cpp	/^void ICU_Utility::appendToRule(UnicodeString& rule,$/;"	f	class:ICU_Utility	signature:(UnicodeString& rule, UChar32 c, UBool isLiteral, UBool escapeUnprintable, UnicodeString& quoteBuf)
appendToRule	util.cpp	/^void ICU_Utility::appendToRule(UnicodeString& rule,$/;"	f	class:ICU_Utility	signature:(UnicodeString& rule, const UnicodeMatcher* matcher, UBool escapeUnprintable, UnicodeString& quoteBuf)
appendToRule	util.cpp	/^void ICU_Utility::appendToRule(UnicodeString& rule,$/;"	f	class:ICU_Utility	signature:(UnicodeString& rule, const UnicodeString& text, UBool isLiteral, UBool escapeUnprintable, UnicodeString& quoteBuf)
appendToRule	util.h	/^    static void appendToRule(UnicodeString& rule,$/;"	p	class:ICU_Utility	access:public	signature:(UnicodeString& rule, UChar32 c, UBool isLiteral, UBool escapeUnprintable, UnicodeString& quoteBuf)
appendToRule	util.h	/^    static void appendToRule(UnicodeString& rule,$/;"	p	class:ICU_Utility	access:public	signature:(UnicodeString& rule, const UnicodeMatcher* matcher, UBool escapeUnprintable, UnicodeString& quoteBuf)
appendToRule	util.h	/^    static void appendToRule(UnicodeString& rule,$/;"	p	class:ICU_Utility	access:public	signature:(UnicodeString& rule, const UnicodeString& text, UBool isLiteral, UBool escapeUnprintable, UnicodeString& quoteBuf)
appendUTF8	unisetspan.cpp	/^appendUTF8(const UChar *s, int32_t length, uint8_t *t, int32_t capacity) {$/;"	f	file:	signature:(const UChar *s, int32_t length, uint8_t *t, int32_t capacity)
appendZeroCC	normalizer2impl.cpp	/^UBool ReorderingBuffer::appendZeroCC(UChar32 c, UErrorCode &errorCode) {$/;"	f	class:ReorderingBuffer	signature:(UChar32 c, UErrorCode &errorCode)
appendZeroCC	normalizer2impl.cpp	/^UBool ReorderingBuffer::appendZeroCC(const UChar *s, const UChar *sLimit, UErrorCode &errorCode) {$/;"	f	class:ReorderingBuffer	signature:(const UChar *s, const UChar *sLimit, UErrorCode &errorCode)
appendZeroCC	normalizer2impl.h	/^    UBool appendZeroCC(UChar32 c, UErrorCode &errorCode);$/;"	p	class:ReorderingBuffer	access:public	signature:(UChar32 c, UErrorCode &errorCode)
appendZeroCC	normalizer2impl.h	/^    UBool appendZeroCC(const UChar *s, const UChar *sLimit, UErrorCode &errorCode);$/;"	p	class:ReorderingBuffer	access:public	signature:(const UChar *s, const UChar *sLimit, UErrorCode &errorCode)
appended_	unicode/bytestream.h	/^  int32_t appended_;$/;"	m	class:CheckedArrayByteSink	access:private
applyFilter	unicode/uniset.h	/^    void applyFilter(Filter filter,$/;"	p	class:UnicodeSet	access:private	signature:(Filter filter, void* context, int32_t src, UErrorCode &status)
applyFilter	uniset_props.cpp	/^void UnicodeSet::applyFilter(UnicodeSet::Filter filter,$/;"	f	class:UnicodeSet	signature:(UnicodeSet::Filter filter, void* context, int32_t src, UErrorCode &status)
applyIntPropertyValue	unicode/uniset.h	/^    UnicodeSet& applyIntPropertyValue(UProperty prop,$/;"	p	class:UnicodeSet	access:public	signature:(UProperty prop, int32_t value, UErrorCode& ec)
applyIntPropertyValue	uniset_props.cpp	/^UnicodeSet::applyIntPropertyValue(UProperty prop, int32_t value, UErrorCode& ec) {$/;"	f	class:UnicodeSet	signature:(UProperty prop, int32_t value, UErrorCode& ec)
applyPattern	unicode/uniset.h	/^    UnicodeSet& applyPattern(const UnicodeString& pattern,$/;"	p	class:UnicodeSet	access:public	signature:(const UnicodeString& pattern, ParsePosition& pos, uint32_t options, const SymbolTable* symbols, UErrorCode& status)
applyPattern	unicode/uniset.h	/^    UnicodeSet& applyPattern(const UnicodeString& pattern,$/;"	p	class:UnicodeSet	access:public	signature:(const UnicodeString& pattern, UErrorCode& status)
applyPattern	unicode/uniset.h	/^    UnicodeSet& applyPattern(const UnicodeString& pattern,$/;"	p	class:UnicodeSet	access:public	signature:(const UnicodeString& pattern, uint32_t options, const SymbolTable* symbols, UErrorCode& status)
applyPattern	unicode/uniset.h	/^    void applyPattern(RuleCharacterIterator& chars,$/;"	p	class:UnicodeSet	access:private	signature:(RuleCharacterIterator& chars, const SymbolTable* symbols, UnicodeString& rebuiltPat, uint32_t options, UErrorCode& ec)
applyPattern	uniset_props.cpp	/^UnicodeSet& UnicodeSet::applyPattern(const UnicodeString& pattern,$/;"	f	class:UnicodeSet	signature:(const UnicodeString& pattern, ParsePosition& pos, uint32_t options, const SymbolTable* symbols, UErrorCode& status)
applyPattern	uniset_props.cpp	/^UnicodeSet& UnicodeSet::applyPattern(const UnicodeString& pattern,$/;"	f	class:UnicodeSet	signature:(const UnicodeString& pattern, UErrorCode& status)
applyPattern	uniset_props.cpp	/^UnicodeSet& UnicodeSet::applyPattern(const UnicodeString& pattern,$/;"	f	class:UnicodeSet	signature:(const UnicodeString& pattern, uint32_t options, const SymbolTable* symbols, UErrorCode& status)
applyPattern	uniset_props.cpp	/^void UnicodeSet::applyPattern(RuleCharacterIterator& chars,$/;"	f	class:UnicodeSet	signature:(RuleCharacterIterator& chars, const SymbolTable* symbols, UnicodeString& rebuiltPat, uint32_t options, UErrorCode& ec)
applyPropertyAlias	unicode/uniset.h	/^    UnicodeSet& applyPropertyAlias(const UnicodeString& prop,$/;"	p	class:UnicodeSet	access:public	signature:(const UnicodeString& prop, const UnicodeString& value, UErrorCode& ec)
applyPropertyAlias	uniset_props.cpp	/^UnicodeSet::applyPropertyAlias(const UnicodeString& prop,$/;"	f	class:UnicodeSet	signature:(const UnicodeString& prop, const UnicodeString& value, UErrorCode& ec)
applyPropertyPattern	unicode/uniset.h	/^    UnicodeSet& applyPropertyPattern(const UnicodeString& pattern,$/;"	p	class:UnicodeSet	access:private	signature:(const UnicodeString& pattern, ParsePosition& ppos, UErrorCode &ec)
applyPropertyPattern	unicode/uniset.h	/^    void applyPropertyPattern(RuleCharacterIterator& chars,$/;"	p	class:UnicodeSet	access:private	signature:(RuleCharacterIterator& chars, UnicodeString& rebuiltPat, UErrorCode& ec)
applyPropertyPattern	uniset_props.cpp	/^UnicodeSet& UnicodeSet::applyPropertyPattern(const UnicodeString& pattern,$/;"	f	class:UnicodeSet	signature:(const UnicodeString& pattern, ParsePosition& ppos, UErrorCode &ec)
applyPropertyPattern	uniset_props.cpp	/^void UnicodeSet::applyPropertyPattern(RuleCharacterIterator& chars,$/;"	f	class:UnicodeSet	signature:(RuleCharacterIterator& chars, UnicodeString& rebuiltPat, UErrorCode& ec)
araLink	ushape.c	/^static const UChar araLink[178]=$/;"	v	file:
array	unicode/uset.h	/^    const uint16_t *array;$/;"	m	struct:USerializedSet	access:public
asciiBytes	bmpset.h	/^    UBool asciiBytes[0xc0];$/;"	m	class:BMPSet	access:private
asciiCaseMap	punycode.c	/^asciiCaseMap(char b, UBool uppercase) {$/;"	f	file:	signature:(char b, UBool uppercase)
asciiData	uts46.cpp	/^static const int8_t asciiData[128]={$/;"	v	file:
asciiFromEbcdic	uinvchar.c	/^static const uint8_t asciiFromEbcdic[256]={$/;"	v	file:
asciiRoundtrips	ucnvmbcs.h	/^    uint32_t asciiRoundtrips;$/;"	m	struct:UConverterMBCSTable	access:public
asciiTypes	ucnv_io.c	/^static const uint8_t asciiTypes[128] = {$/;"	v	file:
assertSuccess	errorcode.cpp	/^void ErrorCode::assertSuccess() const {$/;"	f	class:ErrorCode	signature:() const
assertSuccess	unicode/errorcode.h	/^    void assertSuccess() const;$/;"	p	class:ErrorCode	access:public	signature:() const
assign	uvector.cpp	/^void UVector::assign(const UVector& other, UTokenAssigner *assign, UErrorCode &ec) {$/;"	f	class:UVector	signature:(const UVector& other, UTokenAssigner *assign, UErrorCode &ec)
assign	uvector.h	/^    void assign(const UVector& other, UTokenAssigner *assign, UErrorCode &ec);$/;"	p	class:UVector	access:public	signature:(const UVector& other, UTokenAssigner *assign, UErrorCode &ec)
assign	uvectr32.cpp	/^void UVector32::assign(const UVector32& other, UErrorCode &ec) {$/;"	f	class:UVector32	signature:(const UVector32& other, UErrorCode &ec)
assign	uvectr32.h	/^    void assign(const UVector32& other, UErrorCode &ec);$/;"	p	class:UVector32	access:public	signature:(const UVector32& other, UErrorCode &ec)
assign	uvectr64.cpp	/^void UVector64::assign(const UVector64& other, UErrorCode &ec) {$/;"	f	class:UVector64	signature:(const UVector64& other, UErrorCode &ec)
assign	uvectr64.h	/^    void assign(const UVector64& other, UErrorCode &ec);$/;"	p	class:UVector64	access:public	signature:(const UVector64& other, UErrorCode &ec)
atEnd	ruleiter.cpp	/^UBool RuleCharacterIterator::atEnd() const {$/;"	f	class:RuleCharacterIterator	signature:() const
atEnd	ruleiter.h	/^    UBool atEnd() const;$/;"	p	class:RuleCharacterIterator	access:public	signature:() const
auxTrie	unorm_props_data.c	/^static const UTrie2 auxTrie={$/;"	v	file:
auxTrie_index	unorm_props_data.c	/^static const uint16_t auxTrie_index[6664]={$/;"	v	file:
availableLocaleList	locavailable.cpp	/^static U_NAMESPACE_QUALIFIER Locale*  availableLocaleList = NULL;$/;"	v	file:
availableLocaleListCount	locavailable.cpp	/^static int32_t  availableLocaleListCount;$/;"	v	file:
awaitingLoad	icuplug.c	/^  UBool   awaitingLoad; \/**< TRUE if the plugin is awaiting a load call *\/$/;"	m	struct:UPlugData	file:	access:public
b	unicode/utext.h	/^    int32_t         b;$/;"	m	struct:UText	access:public
b1	ucase.h	/^    int8_t b1, b2, b3;$/;"	m	struct:UCaseContext	access:public
b2	ucase.h	/^    int8_t b1, b2, b3;$/;"	m	struct:UCaseContext	access:public
b3	ucase.h	/^    int8_t b1, b2, b3;$/;"	m	struct:UCaseContext	access:public
backUp	dictbe.cpp	/^  UBool     backUp( UText *text );$/;"	p	class:PossibleWord	file:	access:public	signature:( UText *text )
backUp	dictbe.cpp	/^PossibleWord::backUp( UText *text ) {$/;"	f	class:PossibleWord	signature:( UText *text )
baseContext	uenumimp.h	/^    void *baseContext;$/;"	m	struct:UEnumeration	access:public
baseName	unicode/locid.h	/^    char* baseName;$/;"	m	class:Locale	access:private
baseNameBuffer	unicode/locid.h	/^    char baseNameBuffer[ULOC_FULLNAME_CAPACITY];$/;"	m	class:Locale	access:private
baseSharedData	ucnvmbcs.h	/^    struct UConverterSharedData *baseSharedData;$/;"	m	struct:UConverterMBCSTable	typeref:struct:UConverterMBCSTable::UConverterSharedData	access:public
basename	udata.cpp	/^    const char *basename;                          \/* item's basename (icudt22e_mt.res)*\/$/;"	m	class:UDataPathIterator	file:	access:private
basenameLen	udata.cpp	/^    uint32_t    basenameLen;                       \/* length of basename *\/$/;"	m	class:UDataPathIterator	file:	access:private
basicToDigit	punycode.c	/^basicToDigit[256]={$/;"	v	file:
bdp	sprpimpl.h	/^    const UBiDiProps *bdp; \/* used only if checkBiDi is set *\/$/;"	m	struct:UStringPrepProfile	access:public
bdp	ubidiimp.h	/^    const UBiDiProps *bdp;$/;"	m	struct:UBiDi	access:public
begin	unicode/chariter.h	/^    int32_t  begin;$/;"	m	class:CharacterIterator	access:protected
beginIndex	unicode/umisc.h	/^  int32_t beginIndex;$/;"	m	struct:UFieldPosition	access:public
biDiGetMaxValue	uprops.cpp	/^static int32_t biDiGetMaxValue(const IntProperty &\/*prop*\/, UProperty which) {$/;"	f	file:	signature:(const IntProperty & , UProperty which)
bias	wintz.c	/^    int32_t bias;$/;"	m	struct:__anon1	file:	access:public
binProps	uprops.cpp	/^static const BinaryProperty binProps[UCHAR_BINARY_LIMIT]={$/;"	v	file:
bmpBlockBits	bmpset.h	/^    uint32_t bmpBlockBits[64];$/;"	m	class:BMPSet	access:private
bmpLength	unicode/uset.h	/^    int32_t bmpLength;$/;"	m	struct:USerializedSet	access:public
bmpSet	unicode/uniset.h	/^    BMPSet *bmpSet; \/\/ The set is frozen iff either bmpSet or stringSpan is not NULL.$/;"	m	class:UnicodeSet	access:private
bms_close	unicode/uintrnal.h	28;"	d
bms_close	unicode/urename.h	105;"	d
bms_close_4_6	unicode/uintrnal.h	139;"	d
bms_empty	unicode/uintrnal.h	29;"	d
bms_empty	unicode/urename.h	106;"	d
bms_empty_4_6	unicode/uintrnal.h	140;"	d
bms_getData	unicode/uintrnal.h	30;"	d
bms_getData	unicode/urename.h	107;"	d
bms_getData_4_6	unicode/uintrnal.h	141;"	d
bms_open	unicode/uintrnal.h	31;"	d
bms_open	unicode/urename.h	108;"	d
bms_open_4_6	unicode/uintrnal.h	142;"	d
bms_search	unicode/uintrnal.h	32;"	d
bms_search	unicode/urename.h	109;"	d
bms_search_4_6	unicode/uintrnal.h	143;"	d
bms_setTargetString	unicode/uintrnal.h	33;"	d
bms_setTargetString	unicode/urename.h	110;"	d
bms_setTargetString_4_6	unicode/uintrnal.h	144;"	d
bocu1ByteToTrail	ucnvbocu.c	/^bocu1ByteToTrail[BOCU1_MIN]={$/;"	v	file:
bocu1Prev	ucnvbocu.c	/^bocu1Prev(int32_t c) {$/;"	f	file:	signature:(int32_t c)
bocu1TrailToByte	ucnvbocu.c	/^bocu1TrailToByte[BOCU1_TRAIL_CONTROLS_COUNT]={$/;"	v	file:
bofFixup	rbbitblb.cpp	/^void RBBITableBuilder::bofFixup() {$/;"	f	class:RBBITableBuilder	signature:()
bofFixup	rbbitblb.h	/^    void     bofFixup();$/;"	p	class:RBBITableBuilder	access:private	signature:()
breakiterator_cleanup	brkiter.cpp	/^static UBool U_CALLCONV breakiterator_cleanup(void) {$/;"	f	file:	signature:(void)
breakiterator_cleanup_dict	rbbi.cpp	/^static UBool U_CALLCONV breakiterator_cleanup_dict(void) {$/;"	f	file:	signature:(void)
buf	ruleiter.h	/^        const UnicodeString* buf;$/;"	m	struct:RuleCharacterIterator::Pos	access:private
buf	ruleiter.h	/^    const UnicodeString* buf;$/;"	m	class:RuleCharacterIterator	access:private
buf	uloc_tag.c	/^    char                *buf;   \/* holding parsed subtags *\/$/;"	m	struct:ULanguageTag	file:	access:public
buf	utext.cpp	/^    UChar     buf[UTF8_TEXT_CHUNK_SIZE+4];           \/\/ The UChar buffer.  Requires one extra position beyond the$/;"	m	struct:UTF8Buf	file:	access:public
bufLimitIdx	utext.cpp	/^    int32_t   bufLimitIdx;                           \/\/ Limit of filled range in buf.$/;"	m	struct:UTF8Buf	file:	access:public
bufNILimit	utext.cpp	/^    int32_t   bufNILimit;                            \/\/ Limit of native indexing part of buf$/;"	m	struct:UTF8Buf	file:	access:public
bufNativeLimit	utext.cpp	/^    int32_t   bufNativeLimit;                        \/\/ Native index following last char in buf.$/;"	m	struct:UTF8Buf	file:	access:public
bufNativeStart	utext.cpp	/^    int32_t   bufNativeStart;                        \/\/ Native index of first char in UChar buf$/;"	m	struct:UTF8Buf	file:	access:public
bufPos	ruleiter.h	/^        int32_t bufPos;$/;"	m	struct:RuleCharacterIterator::Pos	access:private
bufPos	ruleiter.h	/^    int32_t bufPos;$/;"	m	class:RuleCharacterIterator	access:private
bufStartIdx	utext.cpp	/^    int32_t   bufStartIdx;                           \/\/ First filled position in buf.$/;"	m	struct:UTF8Buf	file:	access:public
buffer	charstr.h	/^    MaybeStackArray<char, 40> buffer;$/;"	m	class:CharString	access:private
buffer	unicode/caniter.h	/^    UnicodeString buffer;$/;"	m	class:CanonicalIterator	access:private
buffer	unicode/normlzr.h	/^  UnicodeString       buffer;$/;"	m	class:Normalizer	access:private
buffer	unicode/uniset.h	/^    UChar32* buffer; \/\/ internal buffer, may be NULL$/;"	m	class:UnicodeSet	access:private
bufferCapacity	unicode/uniset.h	/^    int32_t bufferCapacity; \/\/ capacity of buffer$/;"	m	class:UnicodeSet	access:private
bufferPos	unicode/normlzr.h	/^  int32_t         bufferPos;$/;"	m	class:Normalizer	access:private
build	rbbisetb.cpp	/^void RBBISetBuilder::build() {$/;"	f	class:RBBISetBuilder	signature:()
build	rbbisetb.h	/^    void     build();$/;"	p	class:RBBISetBuilder	access:public	signature:()
build	rbbitblb.cpp	/^void  RBBITableBuilder::build() {$/;"	f	class:RBBITableBuilder	signature:()
build	rbbitblb.h	/^    void     build();$/;"	p	class:RBBITableBuilder	access:public	signature:()
buildInstance	brkiter.cpp	/^BreakIterator::buildInstance(const Locale& loc, const char *type, int32_t kind, UErrorCode &status)$/;"	f	class:BreakIterator	signature:(const Locale& loc, const char *type, int32_t kind, UErrorCode &status)
buildStateTable	rbbitblb.cpp	/^void RBBITableBuilder::buildStateTable() {$/;"	f	class:RBBITableBuilder	signature:()
buildStateTable	rbbitblb.h	/^    void     buildStateTable();$/;"	p	class:RBBITableBuilder	access:private	signature:()
buildWSConfusableData	unicode/urename.h	111;"	d
bytesFromUTF8	ucnv_u8.c	/^static const int8_t bytesFromUTF8[256] = {$/;"	v	file:
c	unicode/utext.h	/^    int32_t         c;$/;"	m	struct:UText	access:public
c_includes	Android.mk	/^c_includes := \\$/;"	m
cache	normalizer2.cpp	/^static UHashtable *cache=NULL;$/;"	v	file:
cache	serv.cpp	/^    Hashtable cache;$/;"	m	class:DNCache	file:	access:public
cache	uresbund.c	/^static UHashtable *cache = NULL;$/;"	v	file:
cacheDeleter	serv.cpp	/^cacheDeleter(void* obj) {$/;"	f	file:	signature:(void* obj)
calcAlgNameSetsLengths	unames.c	/^calcAlgNameSetsLengths(int32_t maxNameLength) {$/;"	f	file:	signature:(int32_t maxNameLength)
calcChainedFollowPos	rbbitblb.cpp	/^void RBBITableBuilder::calcChainedFollowPos(RBBINode *tree) {$/;"	f	class:RBBITableBuilder	signature:(RBBINode *tree)
calcChainedFollowPos	rbbitblb.h	/^    void     calcChainedFollowPos(RBBINode *n);$/;"	p	class:RBBITableBuilder	access:private	signature:(RBBINode *n)
calcExtNameSetsLengths	unames.c	/^calcExtNameSetsLengths(int32_t maxNameLength) {$/;"	f	file:	signature:(int32_t maxNameLength)
calcFirstPos	rbbitblb.cpp	/^void RBBITableBuilder::calcFirstPos(RBBINode *n) {$/;"	f	class:RBBITableBuilder	signature:(RBBINode *n)
calcFirstPos	rbbitblb.h	/^    void     calcFirstPos(RBBINode *n);$/;"	p	class:RBBITableBuilder	access:private	signature:(RBBINode *n)
calcFollowPos	rbbitblb.cpp	/^void RBBITableBuilder::calcFollowPos(RBBINode *n) {$/;"	f	class:RBBITableBuilder	signature:(RBBINode *n)
calcFollowPos	rbbitblb.h	/^    void     calcFollowPos(RBBINode *n);$/;"	p	class:RBBITableBuilder	access:private	signature:(RBBINode *n)
calcGroupNameSetsLengths	unames.c	/^calcGroupNameSetsLengths(int32_t maxNameLength) {$/;"	f	file:	signature:(int32_t maxNameLength)
calcLastPos	rbbitblb.cpp	/^void RBBITableBuilder::calcLastPos(RBBINode *n) {$/;"	f	class:RBBITableBuilder	signature:(RBBINode *n)
calcLastPos	rbbitblb.h	/^    void     calcLastPos(RBBINode  *n);$/;"	p	class:RBBITableBuilder	access:private	signature:(RBBINode *n)
calcNameSetLength	unames.c	/^calcNameSetLength(const uint16_t *tokens, uint16_t tokenCount, const uint8_t *tokenStrings, int8_t *tokenLengths,$/;"	f	file:	signature:(const uint16_t *tokens, uint16_t tokenCount, const uint8_t *tokenStrings, int8_t *tokenLengths, uint32_t set[8], const uint8_t **pLine, const uint8_t *lineLimit)
calcNameSetsLengths	unames.c	/^calcNameSetsLengths(UErrorCode *pErrorCode) {$/;"	f	file:	signature:(UErrorCode *pErrorCode)
calcNullable	rbbitblb.cpp	/^void RBBITableBuilder::calcNullable(RBBINode *n) {$/;"	f	class:RBBITableBuilder	signature:(RBBINode *n)
calcNullable	rbbitblb.h	/^    void     calcNullable(RBBINode *n);$/;"	p	class:RBBITableBuilder	access:private	signature:(RBBINode *n)
calcStringSetLength	unames.c	/^calcStringSetLength(uint32_t set[8], const char *s) {$/;"	f	file:	signature:(uint32_t set[8], const char *s)
calculateSize	ushape.c	/^calculateSize(const UChar *source, int32_t sourceLength,$/;"	f	file:	signature:(const UChar *source, int32_t sourceLength, int32_t destSize,uint64_t options)
candidates	dictbe.cpp	/^  int       candidates( UText *text, const TrieWordDictionary *dict, int32_t rangeEnd );$/;"	p	class:PossibleWord	file:	access:public	signature:( UText *text, const TrieWordDictionary *dict, int32_t rangeEnd )
candidates	dictbe.cpp	/^PossibleWord::candidates( UText *text, const TrieWordDictionary *dict, int32_t rangeEnd ) {$/;"	f	class:PossibleWord	signature:( UText *text, const TrieWordDictionary *dict, int32_t rangeEnd )
canonIterDataSingleton	normalizer2impl.h	/^    SimpleSingleton canonIterDataSingleton;$/;"	m	class:Normalizer2Impl	access:private
canonStartSets	normalizer2impl.cpp	/^    UVector canonStartSets;  \/\/ contains UnicodeSet *$/;"	m	struct:CanonIterData	file:	access:public
canonStartSets	unorm_props_data.c	/^static const uint16_t canonStartSets[7742]={$/;"	v	file:
canonicalID	serv.cpp	/^ICUServiceKey::canonicalID(UnicodeString& result) const $/;"	f	class:ICUServiceKey	signature:(UnicodeString& result) const
canonicalID	serv.h	/^  virtual UnicodeString& canonicalID(UnicodeString& result) const;$/;"	p	class:ICUServiceKey	access:public	signature:(UnicodeString& result) const
canonicalID	servlk.cpp	/^LocaleKey::canonicalID(UnicodeString& result) const {$/;"	f	class:LocaleKey	signature:(UnicodeString& result) const
canonicalID	servloc.h	/^    virtual UnicodeString& canonicalID(UnicodeString& result) const;$/;"	p	class:LocaleKey	access:public	signature:(UnicodeString& result) const
canonicalID	uloc.c	/^    const char *canonicalID; \/* canonicalized output ID *\/$/;"	m	struct:CanonicalizationMap	file:	access:public
canonicalLocale	servlk.cpp	/^LocaleKey::canonicalLocale(Locale& result) const {$/;"	f	class:LocaleKey	signature:(Locale& result) const
canonicalLocale	servloc.h	/^    virtual Locale& canonicalLocale(Locale& result) const;$/;"	p	class:LocaleKey	access:public	signature:(Locale& result) const
canonicalLocaleString	locutil.cpp	/^LocaleUtility::canonicalLocaleString(const UnicodeString* id, UnicodeString& result)$/;"	f	class:LocaleUtility	signature:(const UnicodeString* id, UnicodeString& result)
canonicalLocaleString	locutil.h	/^  static UnicodeString& canonicalLocaleString(const UnicodeString* id, UnicodeString& result);$/;"	p	class:LocaleUtility	access:public	signature:(const UnicodeString* id, UnicodeString& result)
capacity	cmemory.h	/^    int32_t capacity;$/;"	m	class:MaybeStackArray	access:private
capacity	cmemory.h	/^    int32_t capacity;$/;"	m	class:MaybeStackHeaderAndArray	access:private
capacity	ubidiimp.h	/^    int32_t capacity;       \/* number of points allocated *\/$/;"	m	struct:InsertPoints	access:public
capacity	unicode/uniset.h	/^    int32_t capacity; \/\/ capacity of list$/;"	m	class:UnicodeSet	access:private
capacity	unisetspan.cpp	/^    int32_t capacity;$/;"	m	class:OffsetList	file:	access:private
capacity	unorm_it.c	/^    int32_t capacity;$/;"	m	struct:UNormIterator	file:	access:public
capacity	uvector.h	/^    int32_t capacity;$/;"	m	class:UVector	access:private
capacity	uvectr32.h	/^    int32_t   capacity;$/;"	m	class:UVector32	access:private
capacity	uvectr64.h	/^    int32_t   capacity;$/;"	m	class:UVector64	access:private
capacity_	unicode/bytestream.h	/^  const int32_t capacity_;$/;"	m	class:CheckedArrayByteSink	access:private
caseBinaryPropertyContains	uprops.cpp	/^static UBool caseBinaryPropertyContains(const BinaryProperty &\/*prop*\/, UChar32 c, UProperty which) {$/;"	f	file:	signature:(const BinaryProperty & , UChar32 c, UProperty which)
caseCompare	unicode/unistr.h	/^  inline int8_t caseCompare(const UChar *srcChars,$/;"	p	class:UnicodeString	access:public	signature:(const UChar *srcChars, int32_t srcLength, uint32_t options) const
caseCompare	unicode/unistr.h	/^  inline int8_t caseCompare(const UnicodeString& text, uint32_t options) const;$/;"	p	class:UnicodeString	access:public	signature:(const UnicodeString& text, uint32_t options) const
caseCompare	unicode/unistr.h	/^  inline int8_t caseCompare(int32_t start,$/;"	p	class:UnicodeString	access:public	signature:(int32_t start, int32_t length, const UChar *srcChars, int32_t srcStart, int32_t srcLength, uint32_t options) const
caseCompare	unicode/unistr.h	/^  inline int8_t caseCompare(int32_t start,$/;"	p	class:UnicodeString	access:public	signature:(int32_t start, int32_t length, const UChar *srcChars, uint32_t options) const
caseCompare	unicode/unistr.h	/^  inline int8_t caseCompare(int32_t start,$/;"	p	class:UnicodeString	access:public	signature:(int32_t start, int32_t length, const UnicodeString& srcText, int32_t srcStart, int32_t srcLength, uint32_t options) const
caseCompare	unicode/unistr.h	/^  inline int8_t caseCompare(int32_t start,$/;"	p	class:UnicodeString	access:public	signature:(int32_t start, int32_t length, const UnicodeString& srcText, uint32_t options) const
caseCompare	unicode/unistr.h	/^UnicodeString::caseCompare(const UChar *srcChars,$/;"	f	class:UnicodeString	signature:(const UChar *srcChars, int32_t srcLength, uint32_t options) const
caseCompare	unicode/unistr.h	/^UnicodeString::caseCompare(const UnicodeString &text, uint32_t options) const {$/;"	f	class:UnicodeString	signature:(const UnicodeString &text, uint32_t options) const
caseCompare	unicode/unistr.h	/^UnicodeString::caseCompare(int32_t start,$/;"	f	class:UnicodeString	signature:(int32_t start, int32_t _length, const UChar *srcChars, int32_t srcStart, int32_t srcLength, uint32_t options) const
caseCompare	unicode/unistr.h	/^UnicodeString::caseCompare(int32_t start,$/;"	f	class:UnicodeString	signature:(int32_t start, int32_t _length, const UChar *srcChars, uint32_t options) const
caseCompare	unicode/unistr.h	/^UnicodeString::caseCompare(int32_t start,$/;"	f	class:UnicodeString	signature:(int32_t start, int32_t _length, const UnicodeString &srcText, int32_t srcStart, int32_t srcLength, uint32_t options) const
caseCompare	unicode/unistr.h	/^UnicodeString::caseCompare(int32_t start,$/;"	f	class:UnicodeString	signature:(int32_t start, int32_t _length, const UnicodeString &srcText, uint32_t options) const
caseCompareBetween	unicode/unistr.h	/^  inline int8_t caseCompareBetween(int32_t start,$/;"	p	class:UnicodeString	access:public	signature:(int32_t start, int32_t limit, const UnicodeString& srcText, int32_t srcStart, int32_t srcLimit, uint32_t options) const
caseCompareBetween	unicode/unistr.h	/^UnicodeString::caseCompareBetween(int32_t start,$/;"	f	class:UnicodeString	signature:(int32_t start, int32_t limit, const UnicodeString &srcText, int32_t srcStart, int32_t srcLimit, uint32_t options) const
caseMap	ucasemap.c	/^caseMap(const UCaseMap *csm,$/;"	f	file:	signature:(const UCaseMap *csm, uint8_t *dest, int32_t destCapacity, const uint8_t *src, int32_t srcLength, int32_t toWhichCase, UErrorCode *pErrorCode)
caseMap	unicode/unistr.h	/^  caseMap(BreakIterator *titleIter,$/;"	p	class:UnicodeString	access:private	signature:(BreakIterator *titleIter, const char *locale, uint32_t options, int32_t toWhichCase)
caseMap	unistr_case.cpp	/^UnicodeString::caseMap(BreakIterator *titleIter,$/;"	f	class:UnicodeString	signature:(BreakIterator *titleIter, const char *locale, uint32_t options, int32_t toWhichCase)
caseMap	ustrcase.c	/^caseMap(const UCaseMap *csm,$/;"	f	file:	signature:(const UCaseMap *csm, UChar *dest, int32_t destCapacity, const UChar *src, int32_t srcLength, int32_t toWhichCase, UErrorCode *pErrorCode)
ch	triedict.cpp	/^    UChar       ch;         \/\/ UTF-16 code unit$/;"	m	struct:TernaryNode	file:	access:public
ch	triedict.cpp	/^    uint16_t        ch;             \/\/ UChar$/;"	m	struct:CompactTrieHorizontalEntry	file:	access:public
chApos	rbbiscan.cpp	/^static const UChar      chApos      = 0x27;      \/\/  single quote, for quoted chars.$/;"	v	file:
chBackSlash	rbbiscan.cpp	/^static const UChar      chBackSlash = 0x5c;      \/\/ '\\'  introduces a char escape$/;"	v	file:
chCR	rbbiscan.cpp	/^static const UChar      chCR        = 0x0d;      \/\/ New lines, for terminating comments.$/;"	v	file:
chLF	rbbiscan.cpp	/^static const UChar      chLF        = 0x0a;$/;"	v	file:
chLParen	rbbiscan.cpp	/^static const UChar      chLParen    = 0x28;$/;"	v	file:
chLS	rbbiscan.cpp	/^static const UChar      chLS        = 0x2028;    \/\/    Unicode Line Separator$/;"	v	file:
chNEL	rbbiscan.cpp	/^static const UChar      chNEL       = 0x85;      \/\/    NEL newline variant$/;"	v	file:
chPound	rbbiscan.cpp	/^static const UChar      chPound     = 0x23;      \/\/ '#', introduces a comment.$/;"	v	file:
chRParen	rbbiscan.cpp	/^static const UChar      chRParen    = 0x29;$/;"	v	file:
changeLamAlef	ushape.c	/^changeLamAlef(UChar ch) {$/;"	f	file:	signature:(UChar ch)
changeState_2022	ucnv2022.c	/^changeState_2022(UConverter* _this,$/;"	f	file:	signature:(UConverter* _this, const char** source, const char* sourceLimit, Variant2022 var, UErrorCode* err)
changesWhenCasefolded	uprops.cpp	/^static UBool changesWhenCasefolded(const BinaryProperty &, UChar32, UProperty) {$/;"	f	file:	signature:(const BinaryProperty &, UChar32, UProperty)
changesWhenCasefolded	uprops.cpp	/^static UBool changesWhenCasefolded(const BinaryProperty &\/*prop*\/, UChar32 c, UProperty \/*which*\/) {$/;"	f	file:	signature:(const BinaryProperty & , UChar32 c, UProperty )
changesWhenNFKC_Casefolded	uprops.cpp	/^static UBool changesWhenNFKC_Casefolded(const BinaryProperty &, UChar32, UProperty) {$/;"	f	file:	signature:(const BinaryProperty &, UChar32, UProperty)
changesWhenNFKC_Casefolded	uprops.cpp	/^static UBool changesWhenNFKC_Casefolded(const BinaryProperty &\/*prop*\/, UChar32 c, UProperty \/*which*\/) {$/;"	f	file:	signature:(const BinaryProperty & , UChar32 c, UProperty )
char16_t	unicode/umachine.h	/^    typedef __CHAR16_TYPE__ char16_t;$/;"	t
char32At	unicode/rep.h	/^    inline UChar32 char32At(int32_t offset) const;$/;"	p	class:Replaceable	access:public	signature:(int32_t offset) const
char32At	unicode/rep.h	/^Replaceable::char32At(int32_t offset) const {$/;"	f	class:Replaceable	signature:(int32_t offset) const
char32At	unicode/unistr.h	/^  inline UChar32 char32At(int32_t offset) const;$/;"	p	class:UnicodeString	access:public	signature:(int32_t offset) const
char32At	unicode/unistr.h	/^UnicodeString::char32At(int32_t offset) const$/;"	f	class:UnicodeString	signature:(int32_t offset) const
char32At	unicode/urep.h	/^    UChar32 (*char32At)(const UReplaceable* rep,$/;"	m	struct:UReplaceableCallbacks	access:public
charAt	unicode/rep.h	/^    inline UChar charAt(int32_t offset) const;$/;"	p	class:Replaceable	access:public	signature:(int32_t offset) const
charAt	unicode/rep.h	/^Replaceable::charAt(int32_t offset) const {$/;"	f	class:Replaceable	signature:(int32_t offset) const
charAt	unicode/uniset.h	/^    UChar32 charAt(int32_t index) const;$/;"	p	class:UnicodeSet	access:public	signature:(int32_t index) const
charAt	unicode/unistr.h	/^  inline UChar charAt(int32_t offset) const;$/;"	p	class:UnicodeString	access:public	signature:(int32_t offset) const
charAt	unicode/unistr.h	/^UnicodeString::charAt(int32_t offset) const$/;"	f	class:UnicodeString	signature:(int32_t offset) const
charAt	unicode/urep.h	/^    UChar   (*charAt)(const UReplaceable* rep,$/;"	m	struct:UReplaceableCallbacks	access:public
charAt	uniset.cpp	/^UChar32 UnicodeSet::charAt(int32_t index) const {$/;"	f	class:UnicodeSet	signature:(int32_t index) const
charCatNames	unames.c	/^static const char * const charCatNames[U_CHAR_EXTENDED_CATEGORY_COUNT] = {$/;"	v	file:
charErrorBuffer	ucnv_bld.h	/^    uint8_t charErrorBuffer[UCNV_ERROR_BUFFER_LENGTH];  \/* codepage output from Error functions *\/$/;"	m	struct:UConverter	access:public
charErrorBufferLength	ucnv_bld.h	/^    int8_t charErrorBufferLength;       \/* number of valid bytes in charErrorBuffer *\/$/;"	m	struct:UConverter	access:public
charIterFuncs	utext.cpp	/^static const struct UTextFuncs charIterFuncs = $/;"	v	typeref:struct:UTextFuncs	file:
charIterTextAccess	utext.cpp	/^charIterTextAccess(UText *ut, int64_t index, UBool  forward) {$/;"	f	file:	signature:(UText *ut, int64_t index, UBool forward)
charIterTextClone	utext.cpp	/^charIterTextClone(UText *dest, const UText *src, UBool deep, UErrorCode * status) {$/;"	f	file:	signature:(UText *dest, const UText *src, UBool deep, UErrorCode * status)
charIterTextClose	utext.cpp	/^charIterTextClose(UText *ut) {$/;"	f	file:	signature:(UText *ut)
charIterTextExtract	utext.cpp	/^charIterTextExtract(UText *ut,$/;"	f	file:	signature:(UText *ut, int64_t start, int64_t limit, UChar *dest, int32_t destCapacity, UErrorCode *status)
charIterTextLength	utext.cpp	/^charIterTextLength(UText *ut) {$/;"	f	file:	signature:(UText *ut)
charSetToUSet	unames.c	/^charSetToUSet(uint32_t cset[8], const USetAdder *sa) {$/;"	f	file:	signature:(uint32_t cset[8], const USetAdder *sa)
characterIteratorCurrent	uiter.cpp	/^characterIteratorCurrent(UCharIterator *iter) {$/;"	f	file:	signature:(UCharIterator *iter)
characterIteratorGetIndex	uiter.cpp	/^characterIteratorGetIndex(UCharIterator *iter, UCharIteratorOrigin origin) {$/;"	f	file:	signature:(UCharIterator *iter, UCharIteratorOrigin origin)
characterIteratorGetState	uiter.cpp	/^characterIteratorGetState(const UCharIterator *iter) {$/;"	f	file:	signature:(const UCharIterator *iter)
characterIteratorHasNext	uiter.cpp	/^characterIteratorHasNext(UCharIterator *iter) {$/;"	f	file:	signature:(UCharIterator *iter)
characterIteratorHasPrevious	uiter.cpp	/^characterIteratorHasPrevious(UCharIterator *iter) {$/;"	f	file:	signature:(UCharIterator *iter)
characterIteratorMove	uiter.cpp	/^characterIteratorMove(UCharIterator *iter, int32_t delta, UCharIteratorOrigin origin) {$/;"	f	file:	signature:(UCharIterator *iter, int32_t delta, UCharIteratorOrigin origin)
characterIteratorNext	uiter.cpp	/^characterIteratorNext(UCharIterator *iter) {$/;"	f	file:	signature:(UCharIterator *iter)
characterIteratorPrevious	uiter.cpp	/^characterIteratorPrevious(UCharIterator *iter) {$/;"	f	file:	signature:(UCharIterator *iter)
characterIteratorSetState	uiter.cpp	/^characterIteratorSetState(UCharIterator *iter, uint32_t state, UErrorCode *pErrorCode) {$/;"	f	file:	signature:(UCharIterator *iter, uint32_t state, UErrorCode *pErrorCode)
characterIteratorWrapper	uiter.cpp	/^static const UCharIterator characterIteratorWrapper={$/;"	v	file:
chars	propname.cpp	/^    const char *chars;$/;"	m	struct:CompareContext	file:	access:public
chars	triedict.cpp	/^    uint16_t        chars[1];       \/\/ Code units$/;"	m	struct:CompactTrieVerticalNode	file:	access:public
chars	ucnv_io.c	/^    const char *chars;$/;"	m	struct:TempAliasTable	file:	access:public
chars	unicode/strenum.h	/^    char *chars;$/;"	m	class:StringEnumeration	access:protected
chars	unorm_it.c	/^    UChar *chars;$/;"	m	struct:UNormIterator	file:	access:public
charsBuffer	unicode/strenum.h	/^    char charsBuffer[32];$/;"	m	class:StringEnumeration	access:protected
charsBuffer	unorm_it.c	/^    UChar charsBuffer[INITIAL_CAPACITY];$/;"	m	struct:UNormIterator	file:	access:public
charsCapacity	unicode/strenum.h	/^    int32_t charsCapacity;$/;"	m	class:StringEnumeration	access:protected
charsetFamily	unicode/udata.h	/^    uint8_t charsetFamily;$/;"	m	struct:__anon114	access:public
checkArgs	uts46.cpp	/^checkArgs(const void *label, int32_t length,$/;"	f	file:	signature:(const void *label, int32_t length, void *dest, int32_t capacity, UIDNAInfo *pInfo, UErrorCode *pErrorCode)
checkBiDi	sprpimpl.h	/^    UBool checkBiDi;$/;"	m	struct:UStringPrepProfile	access:public
checkDataItem	udata.cpp	/^checkDataItem$/;"	f	file:	signature:( const DataHeader *pHeader, UDataMemoryIsAcceptable *isAcceptable, void *context, const char *type, const char *name, UErrorCode *nonFatalErr, UErrorCode *fatalErr )
checkDictionary	rbbi.cpp	/^int32_t RuleBasedBreakIterator::checkDictionary(int32_t startPos,$/;"	f	class:RuleBasedBreakIterator	signature:(int32_t startPos, int32_t endPos, UBool reverse)
checkDictionary	unicode/rbbi.h	/^    int32_t checkDictionary(int32_t startPos, int32_t endPos, UBool reverse);$/;"	p	class:RuleBasedBreakIterator	access:protected	signature:(int32_t startPos, int32_t endPos, UBool reverse)
checkExplicitLevels	ubidi.c	/^checkExplicitLevels(UBiDi *pBiDi, UErrorCode *pErrorCode) {$/;"	f	file:	signature:(UBiDi *pBiDi, UErrorCode *pErrorCode)
checkLabelBiDi	uts46.cpp	/^    checkLabelBiDi(const UChar *label, int32_t labelLength, IDNAInfo &info) const;$/;"	p	class:UTS46	file:	access:private	signature:(const UChar *label, int32_t labelLength, IDNAInfo &info) const
checkLabelBiDi	uts46.cpp	/^UTS46::checkLabelBiDi(const UChar *label, int32_t labelLength, IDNAInfo &info) const {$/;"	f	class:UTS46	signature:(const UChar *label, int32_t labelLength, IDNAInfo &info) const
checkLastFour	udata.cpp	/^    UBool       checkLastFour;                     \/* if TRUE then allow paths such as '\/foo\/myapp.dat'$/;"	m	class:UDataPathIterator	file:	access:private
chooseNameInGroup	propname.cpp	/^PropertyAliases::chooseNameInGroup(Offset offset,$/;"	f	class:PropertyAliases	signature:(Offset offset, UPropertyNameChoice choice) const
chooseNameInGroup	propname.h	/^    const char* chooseNameInGroup(Offset offset,$/;"	p	class:PropertyAliases	access:private	signature:(Offset offset, UPropertyNameChoice choice) const
chopLocale	uresbund.c	/^static UBool chopLocale(char *name) {$/;"	f	file:	signature:(char *name)
chunkContents	unicode/utext.h	/^    const UChar    *chunkContents;$/;"	m	struct:UText	access:public
chunkLength	unicode/utext.h	/^    int32_t         chunkLength;$/;"	m	struct:UText	access:public
chunkNativeLimit	unicode/utext.h	/^    int64_t         chunkNativeLimit;$/;"	m	struct:UText	access:public
chunkNativeStart	unicode/utext.h	/^    int64_t         chunkNativeStart;$/;"	m	struct:UText	access:public
chunkOffset	unicode/utext.h	/^    int32_t         chunkOffset;$/;"	m	struct:UText	access:public
cleanPieces	caniter.cpp	/^void CanonicalIterator::cleanPieces() {$/;"	f	class:CanonicalIterator	signature:()
cleanPieces	unicode/caniter.h	/^    void cleanPieces();$/;"	p	class:CanonicalIterator	access:private	signature:()
cleanupFunc	ucln.h	/^typedef UBool U_CALLCONV cleanupFunc(void);$/;"	t
clear	charstr.h	/^    CharString &clear() { len=0; buffer[0]=0; return *this; }$/;"	f	class:CharString	access:public	signature:()
clear	unicode/stringpiece.h	/^  void clear() { ptr_ = NULL; length_ = 0; }$/;"	f	class:StringPiece	access:public	signature:()
clear	unicode/uniset.h	/^    virtual UnicodeSet& clear(void);$/;"	p	class:UnicodeSet	access:public	signature:(void)
clear	uniset.cpp	/^UnicodeSet& UnicodeSet::clear(void) {$/;"	f	class:UnicodeSet	signature:(void)
clear	unisetspan.cpp	/^    void clear() {$/;"	f	class:OffsetList	access:public	signature:()
clearBuffer	normlzr.cpp	/^void Normalizer::clearBuffer() {$/;"	f	class:Normalizer	signature:()
clearBuffer	unicode/normlzr.h	/^  void    clearBuffer(void);$/;"	p	class:Normalizer	access:private	signature:(void)
clearCaches	serv.cpp	/^ICUService::clearCaches() $/;"	f	class:ICUService	signature:()
clearServiceCache	serv.cpp	/^ICUService::clearServiceCache() $/;"	f	class:ICUService	signature:()
clone	dtintrv.cpp	/^DateInterval::clone() const {$/;"	f	class:DateInterval	signature:() const
clone	locid.cpp	/^    virtual StringEnumeration * clone() const$/;"	f	class:KeywordEnumeration	access:public	signature:() const
clone	locid.cpp	/^Locale::clone() const {$/;"	f	class:Locale	signature:() const
clone	normlzr.cpp	/^Normalizer::clone() const$/;"	f	class:Normalizer	signature:() const
clone	parsepos.cpp	/^ParsePosition::clone() const {$/;"	f	class:ParsePosition	signature:() const
clone	rbbi.cpp	/^RuleBasedBreakIterator::clone(void) const {$/;"	f	class:RuleBasedBreakIterator	signature:(void) const
clone	resbund.cpp	/^ResourceBundle::clone() const {$/;"	f	class:ResourceBundle	signature:() const
clone	schriter.cpp	/^StringCharacterIterator::clone() const {$/;"	f	class:StringCharacterIterator	signature:() const
clone	servls.cpp	/^    virtual StringEnumeration *clone() const {$/;"	f	class:ServiceEnumeration	access:public	signature:() const
clone	triedict.cpp	/^    virtual StringEnumeration *clone() const {$/;"	f	class:CompactTrieEnumeration	access:public	signature:() const
clone	triedict.cpp	/^    virtual StringEnumeration *clone() const {$/;"	f	class:MutableTrieEnumeration	access:public	signature:() const
clone	uchriter.cpp	/^UCharCharacterIterator::clone() const {$/;"	f	class:UCharCharacterIterator	signature:() const
clone	unicode/brkiter.h	/^    virtual BreakIterator* clone(void) const = 0;$/;"	p	class:BreakIterator	access:public	signature:(void) const
clone	unicode/chariter.h	/^    virtual CharacterIterator* clone(void) const = 0;$/;"	p	class:CharacterIterator	access:public	signature:(void) const
clone	unicode/dtintrv.h	/^     virtual DateInterval* clone() const;$/;"	p	class:DateInterval	access:public	signature:() const
clone	unicode/locid.h	/^    Locale *clone() const;$/;"	p	class:Locale	access:public	signature:() const
clone	unicode/normlzr.h	/^  Normalizer*        clone(void) const;$/;"	p	class:Normalizer	access:public	signature:(void) const
clone	unicode/parsepos.h	/^    ParsePosition *clone() const;$/;"	p	class:ParsePosition	access:public	signature:() const
clone	unicode/rbbi.h	/^    virtual BreakIterator* clone() const;$/;"	p	class:RuleBasedBreakIterator	access:public	signature:() const
clone	unicode/rep.h	/^    virtual Replaceable *clone() const;$/;"	p	class:Replaceable	access:public	signature:() const
clone	unicode/resbund.h	/^    ResourceBundle *clone() const;$/;"	p	class:ResourceBundle	access:public	signature:() const
clone	unicode/schriter.h	/^  virtual CharacterIterator* clone(void) const;$/;"	p	class:StringCharacterIterator	access:public	signature:(void) const
clone	unicode/strenum.h	/^    virtual StringEnumeration *clone() const;$/;"	p	class:StringEnumeration	access:public	signature:() const
clone	unicode/uchriter.h	/^  virtual CharacterIterator* clone(void) const;$/;"	p	class:UCharCharacterIterator	access:public	signature:(void) const
clone	unicode/unifunct.h	/^    virtual UnicodeFunctor* clone() const = 0;$/;"	p	class:UnicodeFunctor	access:public	signature:() const
clone	unicode/uniset.h	/^    virtual UnicodeFunctor* clone() const;$/;"	p	class:UnicodeSet	access:public	signature:() const
clone	unicode/unistr.h	/^  virtual Replaceable *clone() const;$/;"	p	class:UnicodeString	access:public	signature:() const
clone	unicode/utext.h	/^    UTextClone *clone;$/;"	m	struct:UTextFuncs	access:public
clone	uniset.cpp	/^UnicodeFunctor* UnicodeSet::clone() const {$/;"	f	class:UnicodeSet	signature:() const
clone	unistr.cpp	/^Replaceable::clone() const {$/;"	f	class:Replaceable	signature:() const
clone	unistr.cpp	/^UnicodeString::clone() const {$/;"	f	class:UnicodeString	signature:() const
clone	ustrenum.cpp	/^StringEnumeration::clone() const {$/;"	f	class:StringEnumeration	signature:() const
cloneArrayIfNeeded	unicode/unistr.h	/^  UBool cloneArrayIfNeeded(int32_t newCapacity = -1,$/;"	p	class:UnicodeString	access:private	signature:(int32_t newCapacity = -1, int32_t growCapacity = -1, UBool doCopyArray = TRUE, int32_t **pBufferToDelete = 0, UBool forceClone = FALSE)
cloneArrayIfNeeded	unistr.cpp	/^UnicodeString::cloneArrayIfNeeded(int32_t newCapacity,$/;"	f	class:UnicodeString	signature:(int32_t newCapacity, int32_t growCapacity, UBool doCopyArray, int32_t **pBufferToDelete, UBool forceClone)
cloneAsThawed	unicode/uniset.h	/^    UnicodeFunctor *cloneAsThawed() const;$/;"	p	class:UnicodeSet	access:public	signature:() const
cloneAsThawed	uniset.cpp	/^UnicodeFunctor *UnicodeSet::cloneAsThawed() const {$/;"	f	class:UnicodeSet	signature:() const
cloneBuilder	utrie2_builder.c	/^cloneBuilder(const UNewTrie2 *other) {$/;"	f	file:	signature:(const UNewTrie2 *other)
cloneHZStruct	ucnvhz.c	/^struct cloneHZStruct$/;"	s	file:
cloneHZStruct::cnv	ucnvhz.c	/^    UConverter cnv;$/;"	m	struct:cloneHZStruct	file:	access:public
cloneHZStruct::deadSpace	ucnvhz.c	/^    UAlignedMemory deadSpace;$/;"	m	struct:cloneHZStruct	file:	access:public
cloneHZStruct::mydata	ucnvhz.c	/^    UConverterDataHZ mydata;$/;"	m	struct:cloneHZStruct	file:	access:public
cloneHZStruct::subCnv	ucnvhz.c	/^    UConverter subCnv;$/;"	m	struct:cloneHZStruct	file:	access:public
cloneISCIIStruct	ucnvisci.c	/^struct cloneISCIIStruct {$/;"	s	file:
cloneISCIIStruct::cnv	ucnvisci.c	/^    UConverter cnv;$/;"	m	struct:cloneISCIIStruct	file:	access:public
cloneISCIIStruct::mydata	ucnvisci.c	/^    UConverterDataISCII mydata;$/;"	m	struct:cloneISCIIStruct	file:	access:public
cloneInstance	brkiter.cpp	/^    virtual UObject* cloneInstance(UObject* instance) const {$/;"	f	class:ICUBreakIteratorService	access:public	signature:(UObject* instance) const
cloneMutable	triedict.cpp	/^CompactTrieDictionary::cloneMutable( UErrorCode &status ) const {$/;"	f	class:CompactTrieDictionary	signature:( UErrorCode &status ) const
cloneMutable	triedict.h	/^  virtual MutableTrieDictionary *cloneMutable( UErrorCode &status ) const;$/;"	p	class:CompactTrieDictionary	access:public	signature:( UErrorCode &status ) const
cloneSCSUStruct	ucnvscsu.c	/^struct cloneSCSUStruct$/;"	s	file:
cloneSCSUStruct::cnv	ucnvscsu.c	/^    UConverter cnv;$/;"	m	struct:cloneSCSUStruct	file:	access:public
cloneSCSUStruct::mydata	ucnvscsu.c	/^    SCSUData mydata;$/;"	m	struct:cloneSCSUStruct	file:	access:public
cloneStruct	ucnv2022.c	/^struct cloneStruct$/;"	s	file:
cloneStruct::cnv	ucnv2022.c	/^    UConverter cnv;$/;"	m	struct:cloneStruct	file:	access:public
cloneStruct::currentConverter	ucnv2022.c	/^    UConverter currentConverter;$/;"	m	struct:cloneStruct	file:	access:public
cloneStruct::deadSpace	ucnv2022.c	/^    UAlignedMemory deadSpace;$/;"	m	struct:cloneStruct	file:	access:public
cloneStruct::mydata	ucnv2022.c	/^    UConverterDataISO2022 mydata;$/;"	m	struct:cloneStruct	file:	access:public
cloneTree	rbbinode.cpp	/^RBBINode *RBBINode::cloneTree() {$/;"	f	class:RBBINode	signature:()
cloneTree	rbbinode.h	/^        RBBINode    *cloneTree();$/;"	p	class:RBBINode	access:public	signature:()
cloneUnicodeString	uniset.cpp	/^static void U_CALLCONV cloneUnicodeString(UHashTok *dst, UHashTok *src) {$/;"	f	file:	signature:(UHashTok *dst, UHashTok *src)
close	ucnv_cnv.h	/^    UConverterClose close;$/;"	m	struct:UConverterImpl	access:public
close	uenumimp.h	/^    UEnumClose *close;$/;"	m	struct:UEnumeration	access:public
close	unicode/utext.h	/^    UTextClose  *close;$/;"	m	struct:UTextFuncs	access:public
closeOver	unicode/uniset.h	/^    UnicodeSet& closeOver(int32_t attribute);$/;"	p	class:UnicodeSet	access:public	signature:(int32_t attribute)
closeOver	uniset_props.cpp	/^UnicodeSet& UnicodeSet::closeOver(int32_t attribute) {$/;"	f	class:UnicodeSet	signature:(int32_t attribute)
cmemory_cleanup	cmemory.c	/^U_CFUNC UBool cmemory_cleanup(void) {$/;"	f	signature:(void)
cmemory_cleanup	cmemory.h	/^cmemory_cleanup(void);$/;"	p	signature:(void)
cmemory_cleanup	unicode/urename.h	112;"	d
cmemory_inUse	cmemory.c	/^U_CFUNC UBool cmemory_inUse() {$/;"	f
cmemory_inUse	cmemory.h	/^cmemory_inUse(void);$/;"	p	signature:(void)
cmemory_inUse	unicode/urename.h	113;"	d
cnv	ucnv2022.c	/^    UConverter cnv;$/;"	m	struct:cloneStruct	file:	access:public
cnv	ucnv_lmb.c	/^    UConverter cnv;$/;"	m	struct:LMBCSClone	file:	access:public
cnv	ucnvhz.c	/^    UConverter cnv;$/;"	m	struct:cloneHZStruct	file:	access:public
cnv	ucnvisci.c	/^    UConverter cnv;$/;"	m	struct:cloneISCIIStruct	file:	access:public
cnv	ucnvscsu.c	/^    UConverter cnv;$/;"	m	struct:cloneSCSUStruct	file:	access:public
cnvCacheMutex	ucnv_bld.c	/^static UMTX        cnvCacheMutex = NULL;  \/* Mutex for synchronizing cnv cache access. *\/$/;"	v	file:
cnvName	ucnv_imp.h	/^    char cnvName[UCNV_MAX_CONVERTER_NAME_LENGTH];$/;"	m	struct:__anon151	access:public
cnvNameType	ucnv_bld.c	/^} const cnvNameType[] = {$/;"	v	file:
coClassCallback	ubidiimp.h	/^    const void *coClassCallback;            \/* context pointer *\/$/;"	m	struct:UBiDi	access:public
coalesceDuplicates	triedict.cpp	/^static void coalesceDuplicates(UStack &nodes, UErrorCode &status) {$/;"	f	file:	signature:(UStack &nodes, UErrorCode &status)
code	unames.c	/^    UChar32 code;$/;"	m	struct:__anon95	file:	access:public
codePoint	ucnvmbcs.h	/^    UChar32 codePoint;$/;"	m	struct:__anon77	access:public
codePoint	utrie2.h	/^    UChar32 codePoint;$/;"	m	class:UTrie2StringIterator	access:public
codePointLimit	normalizer2impl.h	/^    UChar *codePointStart, *codePointLimit;$/;"	m	class:ReorderingBuffer	access:private
codePointLimit	utrie2.h	/^    const UChar *codePointStart, *codePointLimit;$/;"	m	class:UTrie2StringIterator	access:public
codePointStart	normalizer2impl.h	/^    UChar *codePointStart, *codePointLimit;$/;"	m	class:ReorderingBuffer	access:private
codePointStart	utrie2.h	/^    const UChar *codePointStart, *codePointLimit;$/;"	m	class:UTrie2StringIterator	access:public
codepage	ucnv_bld.h	/^    int32_t codepage;               \/* +64: 4 codepage # (now IBM-$codepage) *\/$/;"	m	struct:UConverterStaticData	access:public
codepoint	unicode/usetiter.h	/^    UChar32 codepoint;$/;"	m	class:UnicodeSetIterator	access:protected
codepointEnd	unicode/usetiter.h	/^    UChar32 codepointEnd;$/;"	m	class:UnicodeSetIterator	access:protected
collIterate	unicode/urename.h	2230;"	d
column	uprops.cpp	/^    int32_t column;  \/\/ SRC_PROPSVEC column, or "source" if mask==0$/;"	m	struct:BinaryProperty	file:	access:public
column	uprops.cpp	/^    int32_t column;  \/\/ SRC_PROPSVEC column, or "source" if mask==0$/;"	m	struct:IntProperty	file:	access:public
columns	propsvec.c	/^    int32_t columns;  \/* number of columns, plus two for start & limit values *\/$/;"	m	struct:UPropsVectors	file:	access:public
combine	normalizer2impl.cpp	/^int32_t Normalizer2Impl::combine(const uint16_t *list, UChar32 trail) {$/;"	f	class:Normalizer2Impl	signature:(const uint16_t *list, UChar32 trail)
combine	normalizer2impl.h	/^    static int32_t combine(const uint16_t *list, UChar32 trail);$/;"	p	class:Normalizer2Impl	access:private	signature:(const uint16_t *list, UChar32 trail)
commonDataFuncs	ucmndata.h	/^} commonDataFuncs;$/;"	t	typeref:struct:__anon146
comp	normalizer2.cpp	/^    ComposeNormalizer2 comp;$/;"	m	struct:Norm2AllModes	file:	access:public
compact	unicode/uniset.h	/^    virtual UnicodeSet& compact();$/;"	p	class:UnicodeSet	access:public	signature:()
compact	uniset.cpp	/^UnicodeSet& UnicodeSet::compact() {$/;"	f	class:UnicodeSet	signature:()
compactData	utrie2_builder.c	/^compactData(UNewTrie2 *trie) {$/;"	f	file:	signature:(UNewTrie2 *trie)
compactIndex2	utrie2_builder.c	/^compactIndex2(UNewTrie2 *trie) {$/;"	f	file:	signature:(UNewTrie2 *trie)
compactMutableTrieDictionary	triedict.cpp	/^CompactTrieDictionary::compactMutableTrieDictionary( const MutableTrieDictionary &dict,$/;"	f	class:CompactTrieDictionary	signature:( const MutableTrieDictionary &dict, UErrorCode &status )
compactMutableTrieDictionary	triedict.h	/^  static CompactTrieHeader *compactMutableTrieDictionary( const MutableTrieDictionary &dict,$/;"	p	class:CompactTrieDictionary	access:private	signature:( const MutableTrieDictionary &dict, UErrorCode &status )
compactOneNode	triedict.cpp	/^compactOneNode(const TernaryNode *node, UBool parentEndsWord, UStack &nodes, UErrorCode &status) {$/;"	f	file:	signature:(const TernaryNode *node, UBool parentEndsWord, UStack &nodes, UErrorCode &status)
compactTrie	utrie2_builder.c	/^compactTrie(UTrie2 *trie, UErrorCode *pErrorCode) {$/;"	f	file:	signature:(UTrie2 *trie, UErrorCode *pErrorCode)
compare	unicode/normlzr.h	/^  compare(const UnicodeString &s1, const UnicodeString &s2,$/;"	p	class:Normalizer	access:public	signature:(const UnicodeString &s1, const UnicodeString &s2, uint32_t options, UErrorCode &errorCode)
compare	unicode/normlzr.h	/^Normalizer::compare(const UnicodeString &s1, const UnicodeString &s2,$/;"	f	class:Normalizer	signature:(const UnicodeString &s1, const UnicodeString &s2, uint32_t options, UErrorCode &errorCode)
compare	unicode/unistr.h	/^   inline int8_t compare(int32_t start,$/;"	p	class:UnicodeString	access:public	signature:(int32_t start, int32_t length, const UnicodeString& srcText, int32_t srcStart, int32_t srcLength) const
compare	unicode/unistr.h	/^  inline int8_t compare(const UChar *srcChars,$/;"	p	class:UnicodeString	access:public	signature:(const UChar *srcChars, int32_t srcLength) const
compare	unicode/unistr.h	/^  inline int8_t compare(const UnicodeString& text) const;$/;"	p	class:UnicodeString	access:public	signature:(const UnicodeString& text) const
compare	unicode/unistr.h	/^  inline int8_t compare(int32_t start,$/;"	p	class:UnicodeString	access:public	signature:(int32_t start, int32_t length, const UChar *srcChars) const
compare	unicode/unistr.h	/^  inline int8_t compare(int32_t start,$/;"	p	class:UnicodeString	access:public	signature:(int32_t start, int32_t length, const UChar *srcChars, int32_t srcStart, int32_t srcLength) const
compare	unicode/unistr.h	/^  inline int8_t compare(int32_t start,$/;"	p	class:UnicodeString	access:public	signature:(int32_t start, int32_t length, const UnicodeString& text) const
compare	unicode/unistr.h	/^UnicodeString::compare(const UChar *srcChars,$/;"	f	class:UnicodeString	signature:(const UChar *srcChars, int32_t srcLength) const
compare	unicode/unistr.h	/^UnicodeString::compare(const UnicodeString& text) const$/;"	f	class:UnicodeString	signature:(const UnicodeString& text) const
compare	unicode/unistr.h	/^UnicodeString::compare(int32_t start,$/;"	f	class:UnicodeString	signature:(int32_t start, int32_t _length, const UChar *srcChars) const
compare	unicode/unistr.h	/^UnicodeString::compare(int32_t start,$/;"	f	class:UnicodeString	signature:(int32_t start, int32_t _length, const UChar *srcChars, int32_t srcStart, int32_t srcLength) const
compare	unicode/unistr.h	/^UnicodeString::compare(int32_t start,$/;"	f	class:UnicodeString	signature:(int32_t start, int32_t _length, const UnicodeString& srcText) const
compare	unicode/unistr.h	/^UnicodeString::compare(int32_t start,$/;"	f	class:UnicodeString	signature:(int32_t start, int32_t _length, const UnicodeString& srcText, int32_t srcStart, int32_t srcLength) const
compareBetween	unicode/unistr.h	/^  inline int8_t compareBetween(int32_t start,$/;"	p	class:UnicodeString	access:public	signature:(int32_t start, int32_t limit, const UnicodeString& srcText, int32_t srcStart, int32_t srcLimit) const
compareBetween	unicode/unistr.h	/^UnicodeString::compareBetween(int32_t start,$/;"	f	class:UnicodeString	signature:(int32_t start, int32_t limit, const UnicodeString& srcText, int32_t srcStart, int32_t srcLimit) const
compareBinaryFiles	putil.c	/^static UBool compareBinaryFiles(const char* defaultTZFileName, const char* TZFileName, DefaultTZInfo* tzInfo) {$/;"	f	file:	signature:(const char* defaultTZFileName, const char* TZFileName, DefaultTZInfo* tzInfo)
compareCaseInsensitiveASCII	uidna.cpp	/^compareCaseInsensitiveASCII(const UChar* s1, int32_t s1Len, $/;"	f	file:	signature:(const UChar* s1, int32_t s1Len, const UChar* s2, int32_t s2Len)
compareCodePointOrder	unicode/unistr.h	/^   inline int8_t compareCodePointOrder(int32_t start,$/;"	p	class:UnicodeString	access:public	signature:(int32_t start, int32_t length, const UnicodeString& srcText, int32_t srcStart, int32_t srcLength) const
compareCodePointOrder	unicode/unistr.h	/^  inline int8_t compareCodePointOrder(const UChar *srcChars,$/;"	p	class:UnicodeString	access:public	signature:(const UChar *srcChars, int32_t srcLength) const
compareCodePointOrder	unicode/unistr.h	/^  inline int8_t compareCodePointOrder(const UnicodeString& text) const;$/;"	p	class:UnicodeString	access:public	signature:(const UnicodeString& text) const
compareCodePointOrder	unicode/unistr.h	/^  inline int8_t compareCodePointOrder(int32_t start,$/;"	p	class:UnicodeString	access:public	signature:(int32_t start, int32_t length, const UChar *srcChars) const
compareCodePointOrder	unicode/unistr.h	/^  inline int8_t compareCodePointOrder(int32_t start,$/;"	p	class:UnicodeString	access:public	signature:(int32_t start, int32_t length, const UChar *srcChars, int32_t srcStart, int32_t srcLength) const
compareCodePointOrder	unicode/unistr.h	/^  inline int8_t compareCodePointOrder(int32_t start,$/;"	p	class:UnicodeString	access:public	signature:(int32_t start, int32_t length, const UnicodeString& srcText) const
compareCodePointOrder	unicode/unistr.h	/^UnicodeString::compareCodePointOrder(const UChar *srcChars,$/;"	f	class:UnicodeString	signature:(const UChar *srcChars, int32_t srcLength) const
compareCodePointOrder	unicode/unistr.h	/^UnicodeString::compareCodePointOrder(const UnicodeString& text) const$/;"	f	class:UnicodeString	signature:(const UnicodeString& text) const
compareCodePointOrder	unicode/unistr.h	/^UnicodeString::compareCodePointOrder(int32_t start,$/;"	f	class:UnicodeString	signature:(int32_t start, int32_t _length, const UChar *srcChars) const
compareCodePointOrder	unicode/unistr.h	/^UnicodeString::compareCodePointOrder(int32_t start,$/;"	f	class:UnicodeString	signature:(int32_t start, int32_t _length, const UChar *srcChars, int32_t srcStart, int32_t srcLength) const
compareCodePointOrder	unicode/unistr.h	/^UnicodeString::compareCodePointOrder(int32_t start,$/;"	f	class:UnicodeString	signature:(int32_t start, int32_t _length, const UnicodeString& srcText) const
compareCodePointOrder	unicode/unistr.h	/^UnicodeString::compareCodePointOrder(int32_t start,$/;"	f	class:UnicodeString	signature:(int32_t start, int32_t _length, const UnicodeString& srcText, int32_t srcStart, int32_t srcLength) const
compareCodePointOrderBetween	unicode/unistr.h	/^  inline int8_t compareCodePointOrderBetween(int32_t start,$/;"	p	class:UnicodeString	access:public	signature:(int32_t start, int32_t limit, const UnicodeString& srcText, int32_t srcStart, int32_t srcLimit) const
compareCodePointOrderBetween	unicode/unistr.h	/^UnicodeString::compareCodePointOrderBetween(int32_t start,$/;"	f	class:UnicodeString	signature:(int32_t start, int32_t limit, const UnicodeString& srcText, int32_t srcStart, int32_t srcLimit) const
compareEntries	uresbund.c	/^static UBool U_CALLCONV compareEntries(const UHashTok p1, const UHashTok p2) {$/;"	f	file:	signature:(const UHashTok p1, const UHashTok p2)
compareEntries	usprep.cpp	/^compareEntries(const UHashTok p1, const UHashTok p2) {$/;"	f	file:	signature:(const UHashTok p1, const UHashTok p2)
compareInvChars	udataswp.h	/^    UDataCompareInvChars *compareInvChars;$/;"	m	struct:UDataSwapper	access:public
compareKeywordStructs	uloc.c	/^compareKeywordStructs(const void *context, const void *left, const void *right) {$/;"	f	file:	signature:(const void *context, const void *left, const void *right)
compareName	unames.c	/^compareName(UCharNames *names,$/;"	f	file:	signature:(UCharNames *names, const uint8_t *name, uint16_t nameLength, UCharNameChoice nameChoice, const char *otherName)
compareUnicodeString	uniset.cpp	/^static int8_t U_CALLCONV compareUnicodeString(UHashTok t1, UHashTok t2) {$/;"	f	file:	signature:(UHashTok t1, UHashTok t2)
comparer	uvector.h	/^    UKeyComparator *comparer;$/;"	m	class:UVector	access:private
complement	unicode/uniset.h	/^    UnicodeSet& complement(UChar32 c);$/;"	p	class:UnicodeSet	access:public	signature:(UChar32 c)
complement	unicode/uniset.h	/^    UnicodeSet& complement(const UnicodeString& s);$/;"	p	class:UnicodeSet	access:public	signature:(const UnicodeString& s)
complement	unicode/uniset.h	/^    virtual UnicodeSet& complement(UChar32 start, UChar32 end);$/;"	p	class:UnicodeSet	access:public	signature:(UChar32 start, UChar32 end)
complement	unicode/uniset.h	/^    virtual UnicodeSet& complement(void);$/;"	p	class:UnicodeSet	access:public	signature:(void)
complement	uniset.cpp	/^UnicodeSet& UnicodeSet::complement(UChar32 c) {$/;"	f	class:UnicodeSet	signature:(UChar32 c)
complement	uniset.cpp	/^UnicodeSet& UnicodeSet::complement(UChar32 start, UChar32 end) {$/;"	f	class:UnicodeSet	signature:(UChar32 start, UChar32 end)
complement	uniset.cpp	/^UnicodeSet& UnicodeSet::complement(const UnicodeString& s) {$/;"	f	class:UnicodeSet	signature:(const UnicodeString& s)
complement	uniset.cpp	/^UnicodeSet& UnicodeSet::complement(void) {$/;"	f	class:UnicodeSet	signature:(void)
complementAll	unicode/uniset.h	/^    UnicodeSet& complementAll(const UnicodeString& s);$/;"	p	class:UnicodeSet	access:public	signature:(const UnicodeString& s)
complementAll	unicode/uniset.h	/^    virtual UnicodeSet& complementAll(const UnicodeSet& c);$/;"	p	class:UnicodeSet	access:public	signature:(const UnicodeSet& c)
complementAll	uniset.cpp	/^UnicodeSet& UnicodeSet::complementAll(const UnicodeSet& c) {$/;"	f	class:UnicodeSet	signature:(const UnicodeSet& c)
complementAll	uniset.cpp	/^UnicodeSet& UnicodeSet::complementAll(const UnicodeString& s) {$/;"	f	class:UnicodeSet	signature:(const UnicodeString& s)
compose	normalizer2impl.cpp	/^Normalizer2Impl::compose(const UChar *src, const UChar *limit,$/;"	f	class:Normalizer2Impl	signature:(const UChar *src, const UChar *limit, UBool onlyContiguous, UBool doCompose, ReorderingBuffer &buffer, UErrorCode &errorCode) const
compose	normalizer2impl.h	/^    UBool compose(const UChar *src, const UChar *limit,$/;"	p	class:Normalizer2Impl	access:public	signature:(const UChar *src, const UChar *limit, UBool onlyContiguous, UBool doCompose, ReorderingBuffer &buffer, UErrorCode &errorCode) const
compose	normlzr.cpp	/^Normalizer::compose(const UnicodeString& source, $/;"	f	class:Normalizer	signature:(const UnicodeString& source, UBool compat, int32_t options, UnicodeString& result, UErrorCode &status)
compose	unicode/normlzr.h	/^  static void U_EXPORT2 compose(const UnicodeString& source,$/;"	p	class:Normalizer	access:public	signature:(const UnicodeString& source, UBool compat, int32_t options, UnicodeString& result, UErrorCode &status)
composeAndAppend	normalizer2impl.cpp	/^void Normalizer2Impl::composeAndAppend(const UChar *src, const UChar *limit,$/;"	f	class:Normalizer2Impl	signature:(const UChar *src, const UChar *limit, UBool doCompose, UBool onlyContiguous, ReorderingBuffer &buffer, UErrorCode &errorCode) const
composeAndAppend	normalizer2impl.h	/^    void composeAndAppend(const UChar *src, const UChar *limit,$/;"	p	class:Normalizer2Impl	access:public	signature:(const UChar *src, const UChar *limit, UBool doCompose, UBool onlyContiguous, ReorderingBuffer &buffer, UErrorCode &errorCode) const
composeQuickCheck	normalizer2impl.cpp	/^Normalizer2Impl::composeQuickCheck(const UChar *src, const UChar *limit,$/;"	f	class:Normalizer2Impl	signature:(const UChar *src, const UChar *limit, UBool onlyContiguous, UNormalizationCheckResult *pQCResult) const
composeQuickCheck	normalizer2impl.h	/^    const UChar *composeQuickCheck(const UChar *src, const UChar *limit,$/;"	p	class:Normalizer2Impl	access:public	signature:(const UChar *src, const UChar *limit, UBool onlyContiguous, UNormalizationCheckResult *pQCResult) const
concatenate	normlzr.cpp	/^Normalizer::concatenate(UnicodeString &left, UnicodeString &right,$/;"	f	class:Normalizer	signature:(UnicodeString &left, UnicodeString &right, UnicodeString &result, UNormalizationMode mode, int32_t options, UErrorCode &errorCode)
concatenate	unicode/normlzr.h	/^  U_EXPORT2 concatenate(UnicodeString &left, UnicodeString &right,$/;"	p	class:Normalizer	access:public	signature:(UnicodeString &left, UnicodeString &right, UnicodeString &result, UNormalizationMode mode, int32_t options, UErrorCode &errorCode)
config	icuplug.c	/^  char config[UPLUG_NAME_MAX];     \/**< configuration data *\/$/;"	m	struct:UPlugData	file:	access:public
confirmed	ubidiimp.h	/^    int32_t confirmed;      \/* number of points confirmed *\/$/;"	m	struct:InsertPoints	access:public
constructForLocale	resbund_cnv.cpp	/^ResourceBundle::constructForLocale(const UnicodeString& path,$/;"	f	class:ResourceBundle	signature:(const UnicodeString& path, const Locale& locale, UErrorCode& error)
constructForLocale	unicode/resbund.h	/^    void constructForLocale(const UnicodeString& path, const Locale& locale, UErrorCode& error);$/;"	p	class:ResourceBundle	access:private	signature:(const UnicodeString& path, const Locale& locale, UErrorCode& error)
contains	bmpset.cpp	/^BMPSet::contains(UChar32 c) const {$/;"	f	class:BMPSet	signature:(UChar32 c) const
contains	bmpset.h	/^    virtual UBool contains(UChar32 c) const;$/;"	p	class:BMPSet	access:public	signature:(UChar32 c) const
contains	unicode/unifilt.h	/^    virtual UBool contains(UChar32 c) const = 0;$/;"	p	class:UnicodeFilter	access:public	signature:(UChar32 c) const
contains	unicode/uniset.h	/^    UBool contains(const UnicodeString& s) const;$/;"	p	class:UnicodeSet	access:public	signature:(const UnicodeString& s) const
contains	unicode/uniset.h	/^    virtual UBool contains(UChar32 c) const;$/;"	p	class:UnicodeSet	access:public	signature:(UChar32 c) const
contains	unicode/uniset.h	/^    virtual UBool contains(UChar32 start, UChar32 end) const;$/;"	p	class:UnicodeSet	access:public	signature:(UChar32 start, UChar32 end) const
contains	uniset.cpp	/^UBool UnicodeSet::contains(UChar32 c) const {$/;"	f	class:UnicodeSet	signature:(UChar32 c) const
contains	uniset.cpp	/^UBool UnicodeSet::contains(UChar32 start, UChar32 end) const {$/;"	f	class:UnicodeSet	signature:(UChar32 start, UChar32 end) const
contains	uniset.cpp	/^UBool UnicodeSet::contains(const UnicodeString& s) const {$/;"	f	class:UnicodeSet	signature:(const UnicodeString& s) const
contains	unisetspan.h	/^    inline UBool contains(UChar32 c) const;$/;"	p	class:UnicodeSetStringSpan	access:public	signature:(UChar32 c) const
contains	unisetspan.h	/^UBool UnicodeSetStringSpan::contains(UChar32 c) const {$/;"	f	class:UnicodeSetStringSpan	signature:(UChar32 c) const
contains	uprops.cpp	/^    BinaryPropertyContains *contains;$/;"	m	struct:BinaryProperty	file:	access:public
contains	uvector.h	/^    UBool contains(int32_t obj) const;$/;"	p	class:UVector	access:public	signature:(int32_t obj) const
contains	uvector.h	/^    UBool contains(void* obj) const;$/;"	p	class:UVector	access:public	signature:(void* obj) const
contains	uvector.h	/^inline UBool UVector::contains(int32_t obj) const {$/;"	f	class:UVector	signature:(int32_t obj) const
contains	uvector.h	/^inline UBool UVector::contains(void* obj) const {$/;"	f	class:UVector	signature:(void* obj) const
contains	uvectr32.h	/^    UBool contains(int32_t elem) const;$/;"	p	class:UVector32	access:public	signature:(int32_t elem) const
contains	uvectr32.h	/^inline UBool UVector32::contains(int32_t obj) const {$/;"	f	class:UVector32	signature:(int32_t obj) const
containsAll	unicode/uniset.h	/^    UBool containsAll(const UnicodeString& s) const;$/;"	p	class:UnicodeSet	access:public	signature:(const UnicodeString& s) const
containsAll	unicode/uniset.h	/^    virtual UBool containsAll(const UnicodeSet& c) const;$/;"	p	class:UnicodeSet	access:public	signature:(const UnicodeSet& c) const
containsAll	uniset.cpp	/^UBool UnicodeSet::containsAll(const UnicodeSet& c) const {$/;"	f	class:UnicodeSet	signature:(const UnicodeSet& c) const
containsAll	uniset.cpp	/^UBool UnicodeSet::containsAll(const UnicodeString& s) const {$/;"	f	class:UnicodeSet	signature:(const UnicodeString& s) const
containsAll	uvector.cpp	/^UBool UVector::containsAll(const UVector& other) const {$/;"	f	class:UVector	signature:(const UVector& other) const
containsAll	uvector.h	/^    UBool containsAll(const UVector& other) const;$/;"	p	class:UVector	access:public	signature:(const UVector& other) const
containsAll	uvectr32.cpp	/^UBool UVector32::containsAll(const UVector32& other) const {$/;"	f	class:UVector32	signature:(const UVector32& other) const
containsAll	uvectr32.h	/^    UBool containsAll(const UVector32& other) const;$/;"	p	class:UVector32	access:public	signature:(const UVector32& other) const
containsCnvOptionInfo	ucnv_io.h	/^    uint16_t containsCnvOptionInfo;$/;"	m	struct:__anon141	access:public
containsNone	unicode/uniset.h	/^    UBool containsNone(UChar32 start, UChar32 end) const;$/;"	p	class:UnicodeSet	access:public	signature:(UChar32 start, UChar32 end) const
containsNone	unicode/uniset.h	/^    UBool containsNone(const UnicodeSet& c) const;$/;"	p	class:UnicodeSet	access:public	signature:(const UnicodeSet& c) const
containsNone	unicode/uniset.h	/^    UBool containsNone(const UnicodeString& s) const;$/;"	p	class:UnicodeSet	access:public	signature:(const UnicodeString& s) const
containsNone	uniset.cpp	/^UBool UnicodeSet::containsNone(UChar32 start, UChar32 end) const {$/;"	f	class:UnicodeSet	signature:(UChar32 start, UChar32 end) const
containsNone	uniset.cpp	/^UBool UnicodeSet::containsNone(const UnicodeSet& c) const {$/;"	f	class:UnicodeSet	signature:(const UnicodeSet& c) const
containsNone	uniset.cpp	/^UBool UnicodeSet::containsNone(const UnicodeString& s) const {$/;"	f	class:UnicodeSet	signature:(const UnicodeString& s) const
containsNone	uvector.cpp	/^UBool UVector::containsNone(const UVector& other) const {$/;"	f	class:UVector	signature:(const UVector& other) const
containsNone	uvector.h	/^    UBool containsNone(const UVector& other) const;$/;"	p	class:UVector	access:public	signature:(const UVector& other) const
containsNone	uvectr32.cpp	/^UBool UVector32::containsNone(const UVector32& other) const {$/;"	f	class:UVector32	signature:(const UVector32& other) const
containsNone	uvectr32.h	/^    UBool containsNone(const UVector32& other) const;$/;"	p	class:UVector32	access:public	signature:(const UVector32& other) const
containsOffset	unisetspan.cpp	/^    UBool containsOffset(int32_t offset) const {$/;"	f	class:OffsetList	access:public	signature:(int32_t offset) const
containsSlow	bmpset.h	/^    inline UBool containsSlow(UChar32 c, int32_t lo, int32_t hi) const;$/;"	p	class:BMPSet	access:private	signature:(UChar32 c, int32_t lo, int32_t hi) const
containsSlow	bmpset.h	/^inline UBool BMPSet::containsSlow(UChar32 c, int32_t lo, int32_t hi) const {$/;"	f	class:BMPSet	signature:(UChar32 c, int32_t lo, int32_t hi) const
containsSome	unicode/uniset.h	/^    inline UBool containsSome(UChar32 start, UChar32 end) const;$/;"	p	class:UnicodeSet	access:public	signature:(UChar32 start, UChar32 end) const
containsSome	unicode/uniset.h	/^    inline UBool containsSome(const UnicodeSet& s) const;$/;"	p	class:UnicodeSet	access:public	signature:(const UnicodeSet& s) const
containsSome	unicode/uniset.h	/^    inline UBool containsSome(const UnicodeString& s) const;$/;"	p	class:UnicodeSet	access:public	signature:(const UnicodeString& s) const
containsSome	unicode/uniset.h	/^inline UBool UnicodeSet::containsSome(UChar32 start, UChar32 end) const {$/;"	f	class:UnicodeSet	signature:(UChar32 start, UChar32 end) const
containsSome	unicode/uniset.h	/^inline UBool UnicodeSet::containsSome(const UnicodeSet& s) const {$/;"	f	class:UnicodeSet	signature:(const UnicodeSet& s) const
containsSome	unicode/uniset.h	/^inline UBool UnicodeSet::containsSome(const UnicodeString& s) const {$/;"	f	class:UnicodeSet	signature:(const UnicodeString& s) const
context	icuplug.c	/^  void *context;          \/**< user context data *\/$/;"	m	struct:UPlugData	file:	access:public
context	uchar.c	/^    const void *context;$/;"	m	struct:_EnumTypeCallback	file:	access:public
context	uenumimp.h	/^    void *context;$/;"	m	struct:UEnumeration	access:public
context	unicode/uiter.h	/^    const void *context;$/;"	m	struct:UCharIterator	access:public
context	unicode/utext.h	/^    const void   *context;$/;"	m	struct:UText	access:public
contextCharFromUnicode	ucnvisci.c	/^    UChar contextCharFromUnicode;       \/* previous Unicode codepoint for contextual analysis *\/$/;"	m	struct:__anon16	file:	access:public
contextCharToUnicode	ucnvisci.c	/^    UChar contextCharToUnicode;         \/* previous Unicode codepoint for contextual analysis *\/$/;"	m	struct:__anon16	file:	access:public
controlCount	ubidiimp.h	/^    int32_t controlCount;$/;"	m	struct:UBiDi	access:public
conversionType	ucnv_bld.h	/^    int8_t conversionType;          \/* +69: 1 conversion type *\/$/;"	m	struct:UConverterStaticData	access:public
convertFBto06	ushape.c	/^static const UChar convertFBto06[] =$/;"	v	file:
convertFEto06	ushape.c	/^static const UChar convertFEto06[] =$/;"	v	file:
convertLamAlef	ushape.c	/^static const UChar convertLamAlef[] =$/;"	v	file:
converter	unicode/ucnv_err.h	/^    UConverter *converter;      \/**< Pointer to the converter that is opened and to which this struct is passed as an argument. @stable ICU 2.0  *\/$/;"	m	struct:__anon105	access:public
converter	unicode/ucnv_err.h	/^    UConverter *converter;      \/**< Pointer to the converter that is opened and to which this struct is passed as an argument. @stable ICU 2.0 *\/$/;"	m	struct:__anon106	access:public
converterData	ucnv_bld.c	/^converterData[UCNV_NUMBER_OF_SUPPORTED_CONVERTER_TYPES]={$/;"	v	file:
converterList	ucnv_io.h	/^    const uint16_t *converterList;$/;"	m	struct:UConverterAlias	access:public
converterListIndex	ucnv_io.c	/^    converterListIndex=1,$/;"	e	enum:__anon128	file:
converterListSize	ucnv_io.h	/^    uint32_t converterListSize;$/;"	m	struct:UConverterAlias	access:public
copy	unicode/rep.h	/^    virtual void copy(int32_t start, int32_t limit, int32_t dest) = 0;$/;"	p	class:Replaceable	access:public	signature:(int32_t start, int32_t limit, int32_t dest)
copy	unicode/unistr.h	/^  virtual void copy(int32_t start, int32_t limit, int32_t dest);$/;"	p	class:UnicodeString	access:public	signature:(int32_t start, int32_t limit, int32_t dest)
copy	unicode/urep.h	/^    void    (*copy)(UReplaceable* rep,$/;"	m	struct:UReplaceableCallbacks	access:public
copy	unicode/utext.h	/^    UTextCopy *copy;$/;"	m	struct:UTextFuncs	access:public
copy	unistr.cpp	/^UnicodeString::copy(int32_t start, int32_t limit, int32_t dest) {$/;"	f	class:UnicodeString	signature:(int32_t start, int32_t limit, int32_t dest)
copyEnumRange	utrie2_builder.c	/^copyEnumRange(const void *context, UChar32 start, UChar32 end, uint32_t value) {$/;"	f	file:	signature:(const void *context, UChar32 start, UChar32 end, uint32_t value)
copyFrom	charstr.cpp	/^CharString &CharString::copyFrom(const CharString &s, UErrorCode &errorCode) {$/;"	f	class:CharString	signature:(const CharString &s, UErrorCode &errorCode)
copyFrom	charstr.h	/^    CharString &copyFrom(const CharString &other, UErrorCode &errorCode);$/;"	p	class:CharString	access:public	signature:(const CharString &other, UErrorCode &errorCode)
copyFrom	unicode/unistr.h	/^  UnicodeString &copyFrom(const UnicodeString &src, UBool fastCopy=FALSE);$/;"	p	class:UnicodeString	access:private	signature:(const UnicodeString &src, UBool fastCopy=FALSE)
copyFrom	unistr.cpp	/^UnicodeString::copyFrom(const UnicodeString &src, UBool fastCopy) {$/;"	f	class:UnicodeString	signature:(const UnicodeString &src, UBool fastCopy)
copyLowPrefixFromNulTerminated	normalizer2impl.cpp	/^Normalizer2Impl::copyLowPrefixFromNulTerminated(const UChar *src,$/;"	f	class:Normalizer2Impl	signature:(const UChar *src, UChar32 minNeedDataCP, ReorderingBuffer *buffer, UErrorCode &errorCode) const
copyLowPrefixFromNulTerminated	normalizer2impl.h	/^    const UChar *copyLowPrefixFromNulTerminated(const UChar *src,$/;"	p	class:Normalizer2Impl	access:private	signature:(const UChar *src, UChar32 minNeedDataCP, ReorderingBuffer *buffer, UErrorCode &errorCode) const
copyright	putil.c	/^static const char copyright[] = U_COPYRIGHT_STRING;$/;"	v	file:
count	dictbe.cpp	/^  int       count;      \/\/ Count of candidates$/;"	m	class:PossibleWord	file:	access:private
count	hash.h	/^    int32_t count() const;$/;"	p	class:Hashtable	access:public	signature:() const
count	hash.h	/^inline int32_t Hashtable::count() const {$/;"	f	class:Hashtable	signature:() const
count	locid.cpp	/^    virtual int32_t count(UErrorCode &\/*status*\/) const {$/;"	f	class:KeywordEnumeration	access:public	signature:(UErrorCode & ) const
count	propname.h	/^    int32_t count;       \/*  number of entries *\/$/;"	m	class:NameToEnum	access:private
count	propname.h	/^    int32_t count;$/;"	m	class:NonContiguousEnumToOffset	access:private
count	servls.cpp	/^    virtual int32_t count(UErrorCode& status) const {$/;"	f	class:ServiceEnumeration	access:public	signature:(UErrorCode& status) const
count	triedict.cpp	/^    virtual int32_t count(UErrorCode &status) const {$/;"	f	class:CompactTrieEnumeration	access:public	signature:(UErrorCode &status) const
count	triedict.cpp	/^    virtual int32_t count(UErrorCode &status) const {$/;"	f	class:MutableTrieEnumeration	access:public	signature:(UErrorCode &status) const
count	ucmndata.c	/^    uint32_t          count;$/;"	m	struct:__anon28	file:	access:public
count	ucmndata.h	/^    uint32_t count;$/;"	m	struct:__anon145	access:public
count	uenumimp.h	/^    UEnumCount *count;$/;"	m	struct:UEnumeration	access:public
count	uhash.h	/^    int32_t     count;      \/* The number of key-value pairs in this table.$/;"	m	struct:UHashtable	access:public
count	unicode/strenum.h	/^    virtual int32_t count(UErrorCode& status) const = 0;$/;"	p	class:StringEnumeration	access:public	signature:(UErrorCode& status) const
count	ustrenum.cpp	/^    int32_t index, count;$/;"	m	struct:UCharStringEnumeration	file:	access:public
count	ustrenum.cpp	/^int32_t UStringEnumeration::count(UErrorCode& status) const {$/;"	f	class:UStringEnumeration	signature:(UErrorCode& status) const
count	ustrenum.h	/^    virtual int32_t count(UErrorCode& status) const;$/;"	p	class:UStringEnumeration	access:public	signature:(UErrorCode& status) const
count	uvector.h	/^    int32_t count;$/;"	m	class:UVector	access:private
count	uvectr32.h	/^    int32_t   count;$/;"	m	class:UVector32	access:private
count	uvectr64.h	/^    int32_t   count;$/;"	m	class:UVector64	access:private
countChar32	unicode/unistr.h	/^  countChar32(int32_t start=0, int32_t length=INT32_MAX) const;$/;"	p	class:UnicodeString	access:public	signature:(int32_t start=0, int32_t length=INT32_MAX) const
countChar32	unistr.cpp	/^UnicodeString::countChar32(int32_t start, int32_t length) const {$/;"	f	class:UnicodeString	signature:(int32_t start, int32_t length) const
countFactories	serv.cpp	/^ICUService::countFactories() const $/;"	f	class:ICUService	signature:() const
countOnes	ucnvsel.cpp	/^static int16_t countOnes(uint32_t* mask, int32_t len) {$/;"	f	file:	signature:(uint32_t* mask, int32_t len)
countPropsVectors	uchar_props_data.c	/^static const int32_t countPropsVectors=4614;$/;"	v	file:
countSpaces	ushape.c	/^countSpaces(UChar *dest,int32_t size,uint64_t options,int32_t *spacesCountl,int32_t *spacesCountr) {$/;"	f	file:	signature:(UChar *dest,int32_t size,uint64_t options,int32_t *spacesCountl,int32_t *spacesCountr)
countStates	ucnvmbcs.h	/^    uint32_t countStates,$/;"	m	struct:__anon81	access:public
countStates	ucnvmbcs.h	/^    uint8_t countStates, dbcsOnlyState, stateTableOwned;$/;"	m	struct:UConverterMBCSTable	access:public
countToUFallbacks	ucnvmbcs.h	/^             countToUFallbacks,$/;"	m	struct:__anon81	access:public
countToUFallbacks	ucnvmbcs.h	/^    uint32_t countToUFallbacks;$/;"	m	struct:UConverterMBCSTable	access:public
country	unicode/locid.h	/^    char country[ULOC_COUNTRY_CAPACITY];$/;"	m	class:Locale	access:private
cpLimit	ucase.h	/^    int32_t cpStart, cpLimit;$/;"	m	struct:UCaseContext	access:public
cpStart	ucase.h	/^    int32_t cpStart, cpLimit;$/;"	m	struct:UCaseContext	access:public
cpString	unicode/usetiter.h	/^    UnicodeString *cpString;$/;"	m	class:UnicodeSetIterator	access:protected
create	serv.cpp	/^SimpleFactory::create(const ICUServiceKey& key, const ICUService* service, UErrorCode& status) const $/;"	f	class:SimpleFactory	signature:(const ICUServiceKey& key, const ICUService* service, UErrorCode& status) const
create	serv.cpp	/^StringPair::create(const UnicodeString& displayName, $/;"	f	class:StringPair	signature:(const UnicodeString& displayName, const UnicodeString& id, UErrorCode& status)
create	servlkf.cpp	/^LocaleKeyFactory::create(const ICUServiceKey& key, const ICUService* service, UErrorCode& status) const {$/;"	f	class:LocaleKeyFactory	signature:(const ICUServiceKey& key, const ICUService* service, UErrorCode& status) const
create	servls.cpp	/^    static ServiceEnumeration* create(const ICULocaleService* service) {$/;"	f	class:ServiceEnumeration	access:public	signature:(const ICULocaleService* service)
create	servslkf.cpp	/^SimpleLocaleKeyFactory::create(const ICUServiceKey& key, const ICUService* service, UErrorCode& status) const$/;"	f	class:SimpleLocaleKeyFactory	signature:(const ICUServiceKey& key, const ICUService* service, UErrorCode& status) const
createBufferClone	rbbi.cpp	/^BreakIterator *  RuleBasedBreakIterator::createBufferClone(void *stackBuffer,$/;"	f	class:RuleBasedBreakIterator	signature:(void *stackBuffer, int32_t &bufferSize, UErrorCode &status)
createBufferClone	unicode/brkiter.h	/^    virtual BreakIterator *  createBufferClone(void *stackBuffer,$/;"	p	class:BreakIterator	access:public	signature:(void *stackBuffer, int32_t &BufferSize, UErrorCode &status)
createBufferClone	unicode/rbbi.h	/^    virtual BreakIterator *  createBufferClone(void *stackBuffer,$/;"	p	class:RuleBasedBreakIterator	access:public	signature:(void *stackBuffer, int32_t &BufferSize, UErrorCode &status)
createCanonical	locid.cpp	/^Locale::createCanonical(const char* name) {$/;"	f	class:Locale	signature:(const char* name)
createCanonical	unicode/locid.h	/^    static Locale U_EXPORT2 createCanonical(const char* name);$/;"	p	class:Locale	access:public	signature:(const char* name)
createCharacterInstance	brkiter.cpp	/^BreakIterator::createCharacterInstance(const Locale& key, UErrorCode& status)$/;"	f	class:BreakIterator	signature:(const Locale& key, UErrorCode& status)
createCharacterInstance	unicode/brkiter.h	/^    createCharacterInstance(const Locale& where, UErrorCode& status);$/;"	p	class:BreakIterator	access:public	signature:(const Locale& where, UErrorCode& status)
createConverterFromFile	ucnv_bld.c	/^static UConverterSharedData *createConverterFromFile(UConverterLoadArgs *pArgs, UErrorCode * err)$/;"	f	file:	signature:(UConverterLoadArgs *pArgs, UErrorCode * err)
createFrom	unicode/uniset.h	/^    static UnicodeSet* U_EXPORT2 createFrom(const UnicodeString& s);$/;"	p	class:UnicodeSet	access:public	signature:(const UnicodeString& s)
createFrom	uniset.cpp	/^UnicodeSet* U_EXPORT2 UnicodeSet::createFrom(const UnicodeString& s) {$/;"	f	class:UnicodeSet	signature:(const UnicodeString& s)
createFromAll	unicode/uniset.h	/^    static UnicodeSet* U_EXPORT2 createFromAll(const UnicodeString& s);$/;"	p	class:UnicodeSet	access:public	signature:(const UnicodeString& s)
createFromAll	uniset.cpp	/^UnicodeSet* U_EXPORT2 UnicodeSet::createFromAll(const UnicodeString& s) {$/;"	f	class:UnicodeSet	signature:(const UnicodeString& s)
createFromName	locid.cpp	/^Locale::createFromName (const char *name)$/;"	f	class:Locale	signature:(const char *name)
createFromName	unicode/locid.h	/^    static Locale U_EXPORT2 createFromName(const char *name);$/;"	p	class:Locale	access:public	signature:(const char *name)
createInstance	brkiter.cpp	/^BreakIterator::createInstance(const Locale& loc, int32_t kind, UErrorCode& status)$/;"	f	class:BreakIterator	signature:(const Locale& loc, int32_t kind, UErrorCode& status)
createInstance	normalizer2.cpp	/^    static Norm2AllModes *createInstance(const char *packageName,$/;"	p	struct:Norm2AllModes	file:	access:public	signature:(const char *packageName, const char *name, UErrorCode &errorCode)
createInstance	normalizer2.cpp	/^    static void *createInstance(const void *, UErrorCode &errorCode) {$/;"	f	class:Norm2Singleton	file:	access:private	signature:(const void *, UErrorCode &errorCode)
createInstance	normalizer2.cpp	/^    static void *createInstance(const void *context, UErrorCode &errorCode) {$/;"	f	class:Norm2AllModesSingleton	file:	access:private	signature:(const void *context, UErrorCode &errorCode)
createInstance	normalizer2.cpp	/^Norm2AllModes::createInstance(const char *packageName,$/;"	f	class:Norm2AllModes	signature:(const char *packageName, const char *name, UErrorCode &errorCode)
createInstance	normalizer2impl.cpp	/^    static void *createInstance(const void *context, UErrorCode &errorCode);$/;"	p	class:CanonIterDataSingleton	file:	access:public	signature:(const void *context, UErrorCode &errorCode)
createInstance	normalizer2impl.cpp	/^    static void *createInstance(const void *context, UErrorCode &errorCode);$/;"	p	class:FCDTrieSingleton	file:	access:public	signature:(const void *context, UErrorCode &errorCode)
createInstance	normalizer2impl.cpp	/^void *CanonIterDataSingleton::createInstance(const void *context, UErrorCode &errorCode) {$/;"	f	class:CanonIterDataSingleton	signature:(const void *context, UErrorCode &errorCode)
createInstance	normalizer2impl.cpp	/^void *FCDTrieSingleton::createInstance(const void *context, UErrorCode &errorCode) {$/;"	f	class:FCDTrieSingleton	signature:(const void *context, UErrorCode &errorCode)
createInstance	uniset_props.cpp	/^    static void *createInstance(const void *context, UErrorCode &errorCode) {$/;"	f	class:UnicodeSetSingleton	file:	access:private	signature:(const void *context, UErrorCode &errorCode)
createKey	serv.cpp	/^ICUService::createKey(const UnicodeString* id, UErrorCode& status) const $/;"	f	class:ICUService	signature:(const UnicodeString* id, UErrorCode& status) const
createKey	servls.cpp	/^ICULocaleService::createKey(const UnicodeString* id, UErrorCode& status) const$/;"	f	class:ICULocaleService	signature:(const UnicodeString* id, UErrorCode& status) const
createKey	servls.cpp	/^ICULocaleService::createKey(const UnicodeString* id, int32_t kind, UErrorCode& status) const$/;"	f	class:ICULocaleService	signature:(const UnicodeString* id, int32_t kind, UErrorCode& status) const
createKeywords	locid.cpp	/^Locale::createKeywords(UErrorCode &status) const$/;"	f	class:Locale	signature:(UErrorCode &status) const
createKeywords	unicode/locid.h	/^    StringEnumeration * createKeywords(UErrorCode &status) const;$/;"	p	class:Locale	access:public	signature:(UErrorCode &status) const
createLikelySubtagsString	loclikely.cpp	/^createLikelySubtagsString($/;"	f	file:	signature:( const char* lang, int32_t langLength, const char* script, int32_t scriptLength, const char* region, int32_t regionLength, const char* variants, int32_t variantsLength, char* tag, int32_t tagCapacity, UErrorCode* err)
createLineInstance	brkiter.cpp	/^BreakIterator::createLineInstance(const Locale& key, UErrorCode& status)$/;"	f	class:BreakIterator	signature:(const Locale& key, UErrorCode& status)
createLineInstance	unicode/brkiter.h	/^    createLineInstance(const Locale& where, UErrorCode& status);$/;"	p	class:BreakIterator	access:public	signature:(const Locale& where, UErrorCode& status)
createRuleBasedBreakIterator	rbbirb.cpp	/^RBBIRuleBuilder::createRuleBasedBreakIterator( const UnicodeString    &rules,$/;"	f	class:RBBIRuleBuilder	signature:( const UnicodeString &rules, UParseError *parseError, UErrorCode &status)
createRuleBasedBreakIterator	rbbirb.h	/^    static BreakIterator * createRuleBasedBreakIterator( const UnicodeString    &rules,$/;"	p	class:RBBIRuleBuilder	access:public	signature:( const UnicodeString &rules, UParseError *parseError, UErrorCode &status)
createSentenceInstance	brkiter.cpp	/^BreakIterator::createSentenceInstance(const Locale& key, UErrorCode& status)$/;"	f	class:BreakIterator	signature:(const Locale& key, UErrorCode& status)
createSentenceInstance	unicode/brkiter.h	/^    createSentenceInstance(const Locale& where, UErrorCode& status);$/;"	p	class:BreakIterator	access:public	signature:(const Locale& where, UErrorCode& status)
createSimpleFactory	serv.cpp	/^ICUService::createSimpleFactory(UObject* objToAdopt, const UnicodeString& id, UBool visible, UErrorCode& status)$/;"	f	class:ICUService	signature:(UObject* objToAdopt, const UnicodeString& id, UBool visible, UErrorCode& status)
createTagString	loclikely.cpp	/^createTagString($/;"	f	file:	signature:( const char* lang, int32_t langLength, const char* script, int32_t scriptLength, const char* region, int32_t regionLength, const char* trailing, int32_t trailingLength, char* tag, int32_t tagCapacity, UErrorCode* err)
createTagStringWithAlternates	loclikely.cpp	/^createTagStringWithAlternates($/;"	f	file:	signature:( const char* lang, int32_t langLength, const char* script, int32_t scriptLength, const char* region, int32_t regionLength, const char* trailing, int32_t trailingLength, const char* alternateTags, char* tag, int32_t tagCapacity, UErrorCode* err)
createTitleInstance	brkiter.cpp	/^BreakIterator::createTitleInstance(const Locale& key, UErrorCode& status)$/;"	f	class:BreakIterator	signature:(const Locale& key, UErrorCode& status)
createTitleInstance	unicode/brkiter.h	/^    createTitleInstance(const Locale& where, UErrorCode& status);$/;"	p	class:BreakIterator	access:public	signature:(const Locale& where, UErrorCode& status)
createUTS46Instance	unicode/idna.h	/^    createUTS46Instance(uint32_t options, UErrorCode &errorCode);$/;"	p	class:IDNA	access:public	signature:(uint32_t options, UErrorCode &errorCode)
createUTS46Instance	uts46.cpp	/^IDNA::createUTS46Instance(uint32_t options, UErrorCode &errorCode) {$/;"	f	class:IDNA	signature:(uint32_t options, UErrorCode &errorCode)
createWithCanonicalFallback	servlk.cpp	/^LocaleKey::createWithCanonicalFallback(const UnicodeString* primaryID,$/;"	f	class:LocaleKey	signature:(const UnicodeString* primaryID, const UnicodeString* canonicalFallbackID, UErrorCode& status)
createWithCanonicalFallback	servlk.cpp	/^LocaleKey::createWithCanonicalFallback(const UnicodeString* primaryID,$/;"	f	class:LocaleKey	signature:(const UnicodeString* primaryID, const UnicodeString* canonicalFallbackID, int32_t kind, UErrorCode& status)
createWithCanonicalFallback	servloc.h	/^    static LocaleKey* createWithCanonicalFallback(const UnicodeString* primaryID, $/;"	p	class:LocaleKey	access:public	signature:(const UnicodeString* primaryID, const UnicodeString* canonicalFallbackID, UErrorCode& status)
createWithCanonicalFallback	servloc.h	/^    static LocaleKey* createWithCanonicalFallback(const UnicodeString* primaryID, $/;"	p	class:LocaleKey	access:public	signature:(const UnicodeString* primaryID, const UnicodeString* canonicalFallbackID, int32_t kind, UErrorCode& status)
createWordInstance	brkiter.cpp	/^BreakIterator::createWordInstance(const Locale& key, UErrorCode& status)$/;"	f	class:BreakIterator	signature:(const Locale& key, UErrorCode& status)
createWordInstance	unicode/brkiter.h	/^    createWordInstance(const Locale& where, UErrorCode& status);$/;"	p	class:BreakIterator	access:public	signature:(const Locale& where, UErrorCode& status)
cs	ucnv2022.c	/^    int8_t cs[4];       \/* charset number for SI (G0)\/SO (G1)\/SS2 (G2)\/SS3 (G3) *\/$/;"	m	struct:ISO2022State	file:	access:public
csp	ustr_imp.h	/^    const UCaseProps *csp;$/;"	m	struct:UCaseMap	access:public
cur	ucnvsel.cpp	/^  int16_t cur;$/;"	m	struct:Enumerator	file:	access:public
curr	ulist.c	/^    UListNode *curr;$/;"	m	struct:UList	file:	access:public
curr	uresbund.c	/^    UResourceBundle curr;$/;"	m	struct:ULocalesContext	file:	access:public
currUSKey	locid.cpp	/^    UnicodeString currUSKey;$/;"	m	class:KeywordEnumeration	file:	access:private
current	dictbe.cpp	/^  int       current;    \/\/ The candidate we're currently looking at$/;"	m	class:PossibleWord	file:	access:private
current	locid.cpp	/^    char *current;$/;"	m	class:KeywordEnumeration	file:	access:private
current	normlzr.cpp	/^UChar32 Normalizer::current() {$/;"	f	class:Normalizer	signature:()
current	rbbi.cpp	/^int32_t RuleBasedBreakIterator::current(void) const {$/;"	f	class:RuleBasedBreakIterator	signature:(void) const
current	uchriter.cpp	/^UCharCharacterIterator::current() const {$/;"	f	class:UCharCharacterIterator	signature:() const
current	uloc.c	/^    char* current;$/;"	m	struct:UKeywordsContext	file:	access:public
current	unicode/brkiter.h	/^    virtual int32_t current(void) const = 0;$/;"	p	class:BreakIterator	access:public	signature:(void) const
current	unicode/caniter.h	/^    int32_t *current;$/;"	m	class:CanonicalIterator	access:private
current	unicode/chariter.h	/^    virtual UChar         current(void) const = 0;$/;"	p	class:CharacterIterator	access:public	signature:(void) const
current	unicode/normlzr.h	/^  UChar32              current(void);$/;"	p	class:Normalizer	access:public	signature:(void)
current	unicode/rbbi.h	/^    virtual int32_t current(void) const;$/;"	p	class:RuleBasedBreakIterator	access:public	signature:(void) const
current	unicode/uchriter.h	/^  virtual UChar         current(void) const;$/;"	p	class:UCharCharacterIterator	access:public	signature:(void) const
current	unicode/uiter.h	/^    UCharIteratorCurrent *current;$/;"	m	struct:UCharIterator	access:public
current32	uchriter.cpp	/^UCharCharacterIterator::current32() const {$/;"	f	class:UCharCharacterIterator	signature:() const
current32	unicode/chariter.h	/^    virtual UChar32       current32(void) const = 0;$/;"	p	class:CharacterIterator	access:public	signature:(void) const
current32	unicode/uchriter.h	/^  virtual UChar32       current32(void) const;$/;"	p	class:UCharCharacterIterator	access:public	signature:(void) const
currentConverter	ucnv2022.c	/^    UConverter *currentConverter;$/;"	m	struct:__anon68	file:	access:public
currentConverter	ucnv2022.c	/^    UConverter currentConverter;$/;"	m	struct:cloneStruct	file:	access:public
currentDeltaFromUnicode	ucnvisci.c	/^    uint16_t currentDeltaFromUnicode;   \/* current delta in Indic block *\/$/;"	m	struct:__anon16	file:	access:public
currentDeltaToUnicode	ucnvisci.c	/^    uint16_t currentDeltaToUnicode;     \/* current delta in Indic block *\/$/;"	m	struct:__anon16	file:	access:public
currentDescriptor	serv.cpp	/^ICUServiceKey::currentDescriptor(UnicodeString& result) const $/;"	f	class:ICUServiceKey	signature:(UnicodeString& result) const
currentDescriptor	serv.h	/^  virtual UnicodeString& currentDescriptor(UnicodeString& result) const;$/;"	p	class:ICUServiceKey	access:public	signature:(UnicodeString& result) const
currentDescriptor	servlk.cpp	/^LocaleKey::currentDescriptor(UnicodeString& result) const {$/;"	f	class:LocaleKey	signature:(UnicodeString& result) const
currentDescriptor	servloc.h	/^    virtual UnicodeString& currentDescriptor(UnicodeString& result) const;$/;"	p	class:LocaleKey	access:public	signature:(UnicodeString& result) const
currentID	serv.cpp	/^ICUServiceKey::currentID(UnicodeString& result) const $/;"	f	class:ICUServiceKey	signature:(UnicodeString& result) const
currentID	serv.h	/^  virtual UnicodeString& currentID(UnicodeString& result) const;$/;"	p	class:ICUServiceKey	access:public	signature:(UnicodeString& result) const
currentID	servlk.cpp	/^LocaleKey::currentID(UnicodeString& result) const {$/;"	f	class:LocaleKey	signature:(UnicodeString& result) const
currentID	servloc.h	/^    virtual UnicodeString& currentID(UnicodeString& result) const;$/;"	p	class:LocaleKey	access:public	signature:(UnicodeString& result) const
currentIndex	ulist.c	/^    int32_t currentIndex;$/;"	m	struct:UList	file:	access:public
currentIndex	unicode/normlzr.h	/^  int32_t         currentIndex, nextIndex;$/;"	m	class:Normalizer	access:private
currentLocale	servlk.cpp	/^LocaleKey::currentLocale(Locale& result) const {$/;"	f	class:LocaleKey	signature:(Locale& result) const
currentLocale	servloc.h	/^    virtual Locale& currentLocale(Locale& result) const;$/;"	p	class:LocaleKey	access:public	signature:(Locale& result) const
currentMaskFromUnicode	ucnvisci.c	/^    MaskEnum currentMaskFromUnicode;    \/* mask for current state in toUnicode *\/$/;"	m	struct:__anon16	file:	access:public
currentMaskToUnicode	ucnvisci.c	/^    MaskEnum currentMaskToUnicode;      \/* mask for current state in toUnicode *\/$/;"	m	struct:__anon16	file:	access:public
currentType	ucnv2022.c	/^    Cnv2022Type currentType;$/;"	m	struct:__anon68	file:	access:public
current_length	unicode/caniter.h	/^    int32_t current_length;$/;"	m	class:CanonicalIterator	access:private
d2utable	unicode/urename.h	114;"	d
d64	putil.c	/^    double d64;$/;"	m	union:__anon40	file:	access:public
data	charstr.h	/^    char *data() { return buffer.getAlias(); }$/;"	f	class:CharString	access:public	signature:()
data	charstr.h	/^    const char *data() const { return buffer.getAlias(); }$/;"	f	class:CharString	access:public	signature:() const
data	triedict.cpp	/^CompactTrieDictionary::data() const {$/;"	f	class:CompactTrieDictionary	signature:() const
data	triedict.h	/^  virtual const void *data() const;$/;"	p	class:CompactTrieDictionary	access:public	signature:() const
data	uenum.c	/^    char    data; \/* actual data starts here *\/$/;"	m	struct:__anon96	file:	access:public
data	ulist.c	/^    void *data;$/;"	m	struct:UListNode	file:	access:public
data	unicode/stringpiece.h	/^  const char* data() const { return ptr_; }$/;"	f	class:StringPiece	access:public	signature:() const
data	uresdata.h	/^    UDataMemory *data;$/;"	m	struct:__anon12	access:public
data	utrie.h	/^    uint32_t *data;$/;"	m	struct:UNewTrie	access:public
data	utrie2_impl.h	/^    uint32_t *data;$/;"	m	struct:UNewTrie2	access:public
data16	utrie2.h	/^    const uint16_t *data16;     \/* for fast UTF-8 ASCII access, if 16b data *\/$/;"	m	struct:UTrie2	access:public
data32	utrie.h	/^    const uint32_t *data32; \/* NULL if 16b data is used via index *\/$/;"	m	struct:UTrie	access:public
data32	utrie2.h	/^    const uint32_t *data32;     \/* NULL if 16b data is used via index *\/$/;"	m	struct:UTrie2	access:public
dataCapacity	utrie.h	/^    int32_t indexLength, dataCapacity, dataLength;$/;"	m	struct:UNewTrie	access:public
dataCapacity	utrie2_impl.h	/^    int32_t index2Length, dataCapacity, dataLength;$/;"	m	struct:UNewTrie2	access:public
dataFormat	unicode/udata.h	/^    uint8_t dataFormat[4];$/;"	m	struct:__anon114	access:public
dataHeader	ucmndata.h	/^    MappedData  dataHeader;$/;"	m	struct:__anon143	access:public
dataInfo	ucnvsel.cpp	/^static const UDataInfo dataInfo = {$/;"	v	file:
dataLength	utrie.h	/^    int32_t dataLength;$/;"	m	struct:UTrieHeader	access:public
dataLength	utrie.h	/^    int32_t indexLength, dataCapacity, dataLength;$/;"	m	struct:UNewTrie	access:public
dataLength	utrie.h	/^    int32_t indexLength, dataLength;$/;"	m	struct:UTrie	access:public
dataLength	utrie2.h	/^    int32_t indexLength, dataLength;$/;"	m	struct:UTrie2	access:public
dataLength	utrie2_impl.h	/^    int32_t index2Length, dataCapacity, dataLength;$/;"	m	struct:UNewTrie2	access:public
dataMemory	ucnv_bld.h	/^    const void *dataMemory;         \/* from udata_openChoice() - for cleanup *\/$/;"	m	struct:UConverterSharedData	access:public
dataNullOffset	utrie2.h	/^    uint16_t dataNullOffset;$/;"	m	struct:UTrie2	access:public
dataNullOffset	utrie2_impl.h	/^    int32_t index2NullOffset, dataNullOffset;$/;"	m	struct:UNewTrie2	access:public
dataNullOffset	utrie2_impl.h	/^    uint16_t index2NullOffset, dataNullOffset;$/;"	m	struct:UTrie2Header	access:public
dataOffset	ucmndata.h	/^    uint32_t dataOffset;$/;"	m	struct:__anon144	access:public
dataSize	triedict.cpp	/^CompactTrieDictionary::dataSize() const {$/;"	f	class:CompactTrieDictionary	signature:() const
dataSize	triedict.h	/^  virtual uint32_t dataSize() const;$/;"	p	class:CompactTrieDictionary	access:public	signature:() const
dataVersion	normalizer2impl.h	/^    UVersionInfo dataVersion;$/;"	m	class:Normalizer2Impl	access:private
dataVersion	uchar_props_data.c	/^static const UVersionInfo dataVersion={6,0,0,0};$/;"	v	file:
dataVersion	unicode/udata.h	/^    uint8_t dataVersion[4];$/;"	m	struct:__anon114	access:public
dataVersion	unorm_props_data.c	/^static const UVersionInfo dataVersion={ 5,2,0,0 };$/;"	v	file:
dataVersion	usprep.cpp	/^static UVersionInfo dataVersion={ 0, 0, 0, 0 };$/;"	v	file:
date_region	putil.c	/^    int32_t date_region;$/;"	m	struct:__anon42	file:	access:public
daylightBias	wintz.c	/^    int32_t daylightBias;$/;"	m	struct:__anon1	file:	access:public
daylightDate	wintz.c	/^    SYSTEMTIME daylightDate;$/;"	m	struct:__anon1	file:	access:public
daylightType	putil.c	/^    int32_t daylightType; \/* 1=daylight in June, 2=daylight in December*\/$/;"	m	struct:OffsetZoneMapping	file:	access:public
dbcsOnlyState	ucnvmbcs.h	/^    uint8_t countStates, dbcsOnlyState, stateTableOwned;$/;"	m	struct:UConverterMBCSTable	access:public
deShapeUnicode	ushape.c	/^deShapeUnicode(UChar *dest, int32_t sourceLength,$/;"	f	file:	signature:(UChar *dest, int32_t sourceLength, int32_t destSize,uint64_t options, UErrorCode *pErrorCode)
deadSpace	ucnv2022.c	/^    UAlignedMemory deadSpace;$/;"	m	struct:cloneStruct	file:	access:public
deadSpace	ucnvhz.c	/^    UAlignedMemory deadSpace;$/;"	m	struct:cloneHZStruct	file:	access:public
debug	serv.cpp	/^ICUServiceKey::debug(UnicodeString& result) const $/;"	f	class:ICUServiceKey	signature:(UnicodeString& result) const
debug	serv.cpp	/^SimpleFactory::debug(UnicodeString& toAppendTo) const $/;"	f	class:SimpleFactory	signature:(UnicodeString& toAppendTo) const
debug	servlk.cpp	/^LocaleKey::debug(UnicodeString& result) const$/;"	f	class:LocaleKey	signature:(UnicodeString& result) const
debug	servlkf.cpp	/^LocaleKeyFactory::debug(UnicodeString& result) const$/;"	f	class:LocaleKeyFactory	signature:(UnicodeString& result) const
debug	servrbf.cpp	/^ICUResourceBundleFactory::debug(UnicodeString& result) const$/;"	f	class:ICUResourceBundleFactory	signature:(UnicodeString& result) const
debug	servslkf.cpp	/^SimpleLocaleKeyFactory::debug(UnicodeString& result) const$/;"	f	class:SimpleLocaleKeyFactory	signature:(UnicodeString& result) const
debugClass	serv.cpp	/^ICUServiceKey::debugClass(UnicodeString& result) const $/;"	f	class:ICUServiceKey	signature:(UnicodeString& result) const
debugClass	serv.cpp	/^SimpleFactory::debugClass(UnicodeString& toAppendTo) const $/;"	f	class:SimpleFactory	signature:(UnicodeString& toAppendTo) const
debugClass	servlk.cpp	/^LocaleKey::debugClass(UnicodeString& result) const$/;"	f	class:LocaleKey	signature:(UnicodeString& result) const
debugClass	servlkf.cpp	/^LocaleKeyFactory::debugClass(UnicodeString& result) const$/;"	f	class:LocaleKeyFactory	signature:(UnicodeString& result) const
debugClass	servrbf.cpp	/^ICUResourceBundleFactory::debugClass(UnicodeString& result) const$/;"	f	class:ICUResourceBundleFactory	signature:(UnicodeString& result) const
debugClass	servslkf.cpp	/^SimpleLocaleKeyFactory::debugClass(UnicodeString& result) const$/;"	f	class:SimpleLocaleKeyFactory	signature:(UnicodeString& result) const
decodeBocu1LeadByte	ucnvbocu.c	/^decodeBocu1LeadByte(int32_t b) {$/;"	f	file:	signature:(int32_t b)
decodeBocu1TrailByte	ucnvbocu.c	/^decodeBocu1TrailByte(int32_t count, int32_t b) {$/;"	f	file:	signature:(int32_t count, int32_t b)
decomp	normalizer2.cpp	/^    DecomposeNormalizer2 decomp;$/;"	m	struct:Norm2AllModes	file:	access:public
decompose	normalizer2impl.cpp	/^Normalizer2Impl::decompose(const UChar *src, const UChar *limit,$/;"	f	class:Normalizer2Impl	signature:(const UChar *src, const UChar *limit, ReorderingBuffer *buffer, UErrorCode &errorCode) const
decompose	normalizer2impl.cpp	/^UBool Normalizer2Impl::decompose(UChar32 c, uint16_t norm16,$/;"	f	class:Normalizer2Impl	signature:(UChar32 c, uint16_t norm16, ReorderingBuffer &buffer, UErrorCode &errorCode) const
decompose	normalizer2impl.h	/^    UBool decompose(UChar32 c, uint16_t norm16,$/;"	p	class:Normalizer2Impl	access:private	signature:(UChar32 c, uint16_t norm16, ReorderingBuffer &buffer, UErrorCode &errorCode) const
decompose	normalizer2impl.h	/^    const UChar *decompose(const UChar *src, const UChar *limit,$/;"	p	class:Normalizer2Impl	access:public	signature:(const UChar *src, const UChar *limit, ReorderingBuffer *buffer, UErrorCode &errorCode) const
decompose	normalizer2impl.h	/^    static inline int32_t decompose(UChar32 c, UChar buffer[3]) {$/;"	f	class:Hangul	access:public	signature:(UChar32 c, UChar buffer[3])
decompose	normlzr.cpp	/^Normalizer::decompose(const UnicodeString& source, $/;"	f	class:Normalizer	signature:(const UnicodeString& source, UBool compat, int32_t options, UnicodeString& result, UErrorCode &status)
decompose	unicode/normlzr.h	/^  static void U_EXPORT2 decompose(const UnicodeString& source,$/;"	p	class:Normalizer	access:public	signature:(const UnicodeString& source, UBool compat, int32_t options, UnicodeString& result, UErrorCode &status)
decomposeAndAppend	normalizer2impl.cpp	/^void Normalizer2Impl::decomposeAndAppend(const UChar *src, const UChar *limit,$/;"	f	class:Normalizer2Impl	signature:(const UChar *src, const UChar *limit, UBool doDecompose, ReorderingBuffer &buffer, UErrorCode &errorCode) const
decomposeAndAppend	normalizer2impl.h	/^    void decomposeAndAppend(const UChar *src, const UChar *limit,$/;"	p	class:Normalizer2Impl	access:public	signature:(const UChar *src, const UChar *limit, UBool doDecompose, ReorderingBuffer &buffer, UErrorCode &errorCode) const
decomposeShort	normalizer2impl.cpp	/^UBool Normalizer2Impl::decomposeShort(const UChar *src, const UChar *limit,$/;"	f	class:Normalizer2Impl	signature:(const UChar *src, const UChar *limit, ReorderingBuffer &buffer, UErrorCode &errorCode) const
decomposeShort	normalizer2impl.h	/^    UBool decomposeShort(const UChar *src, const UChar *limit,$/;"	p	class:Normalizer2Impl	access:private	signature:(const UChar *src, const UChar *limit, ReorderingBuffer &buffer, UErrorCode &errorCode) const
defDeltaToUnicode	ucnvisci.c	/^    uint16_t defDeltaToUnicode;         \/* delta for switching to default state when DEF is encountered  *\/$/;"	m	struct:__anon16	file:	access:public
defMaskToUnicode	ucnvisci.c	/^    MaskEnum defMaskToUnicode;          \/* mask for default state in toUnicode *\/$/;"	m	struct:__anon16	file:	access:public
defaultContains	uprops.cpp	/^static UBool defaultContains(const BinaryProperty &prop, UChar32 c, UProperty \/*which*\/) {$/;"	f	file:	signature:(const BinaryProperty &prop, UChar32 c, UProperty )
defaultEncodings	ucnvsel.cpp	/^static const UEnumeration defaultEncodings = {$/;"	v	file:
defaultGetFoldedValue	utrie.c	/^defaultGetFoldedValue(UNewTrie *trie, UChar32 start, int32_t offset) {$/;"	f	file:	signature:(UNewTrie *trie, UChar32 start, int32_t offset)
defaultGetMaxValue	uprops.cpp	/^static int32_t defaultGetMaxValue(const IntProperty &prop, UProperty \/*which*\/) {$/;"	f	file:	signature:(const IntProperty &prop, UProperty )
defaultGetValue	uprops.cpp	/^static int32_t defaultGetValue(const IntProperty &prop, UChar32 c, UProperty \/*which*\/) {$/;"	f	file:	signature:(const IntProperty &prop, UChar32 c, UProperty )
defaultParaLevel	ubidiimp.h	/^    UBiDiLevel defaultParaLevel;$/;"	m	struct:UBiDi	access:public
defaultTZBuffer	putil.c	/^    char* defaultTZBuffer;$/;"	m	struct:DefaultTZInfo	file:	access:public
defaultTZFilePtr	putil.c	/^    FILE* defaultTZFilePtr;$/;"	m	struct:DefaultTZInfo	file:	access:public
defaultTZFileSize	putil.c	/^    int64_t defaultTZFileSize;$/;"	m	struct:DefaultTZInfo	file:	access:public
defaultTZPosition	putil.c	/^    int32_t defaultTZPosition;$/;"	m	struct:DefaultTZInfo	file:	access:public
defaultTZstatus	putil.c	/^    UBool defaultTZstatus;$/;"	m	struct:DefaultTZInfo	file:	access:public
defaultTableOptions	ucnv_io.c	/^static const UConverterAliasOptions defaultTableOptions = {$/;"	v	file:
defineOne	ucnvscsu.c	/^    defineOne$/;"	e	enum:__anon154	file:
definePairOne	ucnvscsu.c	/^    definePairOne,$/;"	e	enum:__anon154	file:
definePairTwo	ucnvscsu.c	/^    definePairTwo,$/;"	e	enum:__anon154	file:
deleteCEList	unicode/urename.h	115;"	d
deleteChars	unicode/urename.h	116;"	d
deleteCollDataCacheEntry	unicode/urename.h	117;"	d
deleteInstance	mutex.h	/^    void deleteInstance() {$/;"	f	class:SimpleSingletonWrapper	access:public	signature:()
deleteInstance	mutex.h	/^    void deleteInstance() {$/;"	f	class:TriStateSingletonWrapper	access:public	signature:()
deleteInstance	utrie2.h	/^    void deleteInstance() {$/;"	f	class:UTrie2Singleton	access:public	signature:()
deleteLocale	locid.cpp	/^deleteLocale(void *obj) {$/;"	f	file:	signature:(void *obj)
deleteNorm2AllModes	normalizer2.cpp	/^static void U_CALLCONV deleteNorm2AllModes(void *allModes) {$/;"	f	file:	signature:(void *allModes)
deleteStringList	unicode/urename.h	118;"	d
deleteUObject	serv.cpp	/^deleteUObject(void *obj) {$/;"	f	file:	signature:(void *obj)
deleteUnicodeStringKey	unicode/urename.h	119;"	d
deleter	uvector.h	/^    UObjectDeleter *deleter;$/;"	m	class:UVector	access:private
dest_	unicode/bytestream.h	/^  StringClass* dest_;$/;"	m	class:StringByteSink	access:private
detectWindowsType	wintz.c	/^static int32_t detectWindowsType()$/;"	f	file:
digitToBasic	punycode.c	/^digitToBasic(int32_t digit, UBool uppercase) {$/;"	f	file:	signature:(int32_t digit, UBool uppercase)
dir	ucase.h	/^    int8_t dir;$/;"	m	struct:UCaseContext	access:public
dirPropCount	ubidiimp.h	/^    dirPropCount$/;"	e	enum:__anon82
dirProps	ubidiimp.h	/^    const DirProp *dirProps;$/;"	m	struct:UBiDi	access:public
dirPropsMemory	ubidiimp.h	/^    DirProp *dirPropsMemory;$/;"	m	struct:UBiDi	access:public
dirPropsMemory	ubidiimp.h	/^    DirProp *dirPropsMemory;$/;"	m	union:__anon85	access:public
dirPropsSize	ubidiimp.h	/^    int32_t dirPropsSize, levelsSize, parasSize, runsSize;$/;"	m	struct:UBiDi	access:public
direction	ubidiimp.h	/^    UBiDiDirection direction;$/;"	m	struct:UBiDi	access:public
directionFromFlags	ubidi.c	/^directionFromFlags(UBiDi *pBiDi) {$/;"	f	file:	signature:(UBiDi *pBiDi)
divideUpDictionaryRange	dictbe.cpp	/^ThaiBreakEngine::divideUpDictionaryRange( UText *text,$/;"	f	class:ThaiBreakEngine	signature:( UText *text, int32_t rangeStart, int32_t rangeEnd, UStack &foundBreaks ) const
divideUpDictionaryRange	dictbe.h	/^  virtual int32_t divideUpDictionaryRange( UText *text,$/;"	p	class:DictionaryBreakEngine	access:protected	signature:( UText *text, int32_t rangeStart, int32_t rangeEnd, UStack &foundBreaks ) const
divideUpDictionaryRange	dictbe.h	/^  virtual int32_t divideUpDictionaryRange( UText *text,$/;"	p	class:ThaiBreakEngine	access:protected	signature:( UText *text, int32_t rangeStart, int32_t rangeEnd, UStack &foundBreaks ) const
doCaseCompare	unicode/unistr.h	/^  doCaseCompare(int32_t start,$/;"	p	class:UnicodeString	access:private	signature:(int32_t start, int32_t length, const UChar *srcChars, int32_t srcStart, int32_t srcLength, uint32_t options) const
doCaseCompare	unicode/unistr.h	/^  doCaseCompare(int32_t start,$/;"	p	class:UnicodeString	access:private	signature:(int32_t start, int32_t length, const UnicodeString &srcText, int32_t srcStart, int32_t srcLength, uint32_t options) const
doCaseCompare	unicode/unistr.h	/^UnicodeString::doCaseCompare(int32_t start,$/;"	f	class:UnicodeString	signature:(int32_t start, int32_t thisLength, const UnicodeString &srcText, int32_t srcStart, int32_t srcLength, uint32_t options) const
doCaseCompare	unistr_case.cpp	/^UnicodeString::doCaseCompare(int32_t start,$/;"	f	class:UnicodeString	signature:(int32_t start, int32_t length, const UChar *srcChars, int32_t srcStart, int32_t srcLength, uint32_t options) const
doCharAt	unicode/unistr.h	/^  inline UChar doCharAt(int32_t offset)  const;$/;"	p	class:UnicodeString	access:private	signature:(int32_t offset) const
doCharAt	unicode/unistr.h	/^UnicodeString::doCharAt(int32_t offset) const$/;"	f	class:UnicodeString	signature:(int32_t offset) const
doCheckVarDef	rbbirpt.h	/^    doCheckVarDef,$/;"	e	enum:RBBI_RuleParseAction
doCodepageCreate	unicode/unistr.h	/^  doCodepageCreate(const char *codepageData,$/;"	p	class:UnicodeString	access:private	signature:(const char *codepageData, int32_t dataLength, UConverter *converter, UErrorCode &status)
doCodepageCreate	unicode/unistr.h	/^  void doCodepageCreate(const char *codepageData,$/;"	p	class:UnicodeString	access:private	signature:(const char *codepageData, int32_t dataLength, const char *codepage)
doCodepageCreate	unistr_cnv.cpp	/^UnicodeString::doCodepageCreate(const char *codepageData,$/;"	f	class:UnicodeString	signature:(const char *codepageData, int32_t dataLength, UConverter *converter, UErrorCode &status)
doCodepageCreate	unistr_cnv.cpp	/^UnicodeString::doCodepageCreate(const char *codepageData,$/;"	f	class:UnicodeString	signature:(const char *codepageData, int32_t dataLength, const char *codepage)
doCompare	unicode/unistr.h	/^  doCompare(int32_t start,$/;"	p	class:UnicodeString	access:private	signature:(int32_t start, int32_t length, const UnicodeString& srcText, int32_t srcStart, int32_t srcLength) const
doCompare	unicode/unistr.h	/^  int8_t doCompare(int32_t start,$/;"	p	class:UnicodeString	access:private	signature:(int32_t start, int32_t length, const UChar *srcChars, int32_t srcStart, int32_t srcLength) const
doCompare	unicode/unistr.h	/^UnicodeString::doCompare(int32_t start,$/;"	f	class:UnicodeString	signature:(int32_t start, int32_t thisLength, const UnicodeString& srcText, int32_t srcStart, int32_t srcLength) const
doCompare	unistr.cpp	/^UnicodeString::doCompare( int32_t start,$/;"	f	class:UnicodeString	signature:( int32_t start, int32_t length, const UChar *srcChars, int32_t srcStart, int32_t srcLength) const
doCompareCodePointOrder	unicode/unistr.h	/^  doCompareCodePointOrder(int32_t start,$/;"	p	class:UnicodeString	access:private	signature:(int32_t start, int32_t length, const UnicodeString& srcText, int32_t srcStart, int32_t srcLength) const
doCompareCodePointOrder	unicode/unistr.h	/^  int8_t doCompareCodePointOrder(int32_t start,$/;"	p	class:UnicodeString	access:private	signature:(int32_t start, int32_t length, const UChar *srcChars, int32_t srcStart, int32_t srcLength) const
doCompareCodePointOrder	unicode/unistr.h	/^UnicodeString::doCompareCodePointOrder(int32_t start,$/;"	f	class:UnicodeString	signature:(int32_t start, int32_t thisLength, const UnicodeString& srcText, int32_t srcStart, int32_t srcLength) const
doCompareCodePointOrder	unistr.cpp	/^UnicodeString::doCompareCodePointOrder(int32_t start,$/;"	f	class:UnicodeString	signature:(int32_t start, int32_t length, const UChar *srcChars, int32_t srcStart, int32_t srcLength) const
doDotAny	rbbirpt.h	/^    doDotAny,$/;"	e	enum:RBBI_RuleParseAction
doEndAssign	rbbirpt.h	/^    doEndAssign,$/;"	e	enum:RBBI_RuleParseAction
doEndOfRule	rbbirpt.h	/^    doEndOfRule,$/;"	e	enum:RBBI_RuleParseAction
doEndVariableName	rbbirpt.h	/^    doEndVariableName,$/;"	e	enum:RBBI_RuleParseAction
doExit	rbbirpt.h	/^    doExit,$/;"	e	enum:RBBI_RuleParseAction
doExprCatOperator	rbbirpt.h	/^    doExprCatOperator,$/;"	e	enum:RBBI_RuleParseAction
doExprFinished	rbbirpt.h	/^    doExprFinished,$/;"	e	enum:RBBI_RuleParseAction
doExprOrOperator	rbbirpt.h	/^    doExprOrOperator,$/;"	e	enum:RBBI_RuleParseAction
doExprRParen	rbbirpt.h	/^    doExprRParen,$/;"	e	enum:RBBI_RuleParseAction
doExprStart	rbbirpt.h	/^    doExprStart,$/;"	e	enum:RBBI_RuleParseAction
doExtract	unicode/unistr.h	/^  inline void doExtract(int32_t start,$/;"	p	class:UnicodeString	access:private	signature:(int32_t start, int32_t length, UnicodeString& target) const
doExtract	unicode/unistr.h	/^  int32_t doExtract(int32_t start, int32_t length,$/;"	p	class:UnicodeString	access:private	signature:(int32_t start, int32_t length, char *dest, int32_t destCapacity, UConverter *cnv, UErrorCode &errorCode) const
doExtract	unicode/unistr.h	/^  void doExtract(int32_t start,$/;"	p	class:UnicodeString	access:private	signature:(int32_t start, int32_t length, UChar *dst, int32_t dstStart) const
doExtract	unicode/unistr.h	/^UnicodeString::doExtract(int32_t start,$/;"	f	class:UnicodeString	signature:(int32_t start, int32_t _length, UnicodeString& target) const
doExtract	unistr.cpp	/^UnicodeString::doExtract(int32_t start,$/;"	f	class:UnicodeString	signature:(int32_t start, int32_t length, UChar *dst, int32_t dstStart) const
doExtract	unistr_cnv.cpp	/^UnicodeString::doExtract(int32_t start, int32_t length,$/;"	f	class:UnicodeString	signature:(int32_t start, int32_t length, char *dest, int32_t destCapacity, UConverter *cnv, UErrorCode &errorCode) const
doHashCode	unicode/unistr.h	/^  int32_t doHashCode(void) const;$/;"	p	class:UnicodeString	access:private	signature:(void) const
doHashCode	unistr.cpp	/^UnicodeString::doHashCode() const$/;"	f	class:UnicodeString	signature:() const
doIndexOf	unicode/unistr.h	/^  int32_t doIndexOf(UChar c,$/;"	p	class:UnicodeString	access:private	signature:(UChar c, int32_t start, int32_t length) const
doIndexOf	unicode/unistr.h	/^  int32_t doIndexOf(UChar32 c,$/;"	p	class:UnicodeString	access:private	signature:(UChar32 c, int32_t start, int32_t length) const
doIndexOf	unistr.cpp	/^UnicodeString::doIndexOf(UChar c,$/;"	f	class:UnicodeString	signature:(UChar c, int32_t start, int32_t length) const
doIndexOf	unistr.cpp	/^UnicodeString::doIndexOf(UChar32 c,$/;"	f	class:UnicodeString	signature:(UChar32 c, int32_t start, int32_t length) const
doInsertionSort	uarrsort.c	/^doInsertionSort(char *array, int32_t start, int32_t limit, int32_t itemSize,$/;"	f	file:	signature:(char *array, int32_t start, int32_t limit, int32_t itemSize, UComparator *cmp, const void *context, void *pv)
doLParen	rbbirpt.h	/^    doLParen,$/;"	e	enum:RBBI_RuleParseAction
doLastIndexOf	unicode/unistr.h	/^  int32_t doLastIndexOf(UChar c,$/;"	p	class:UnicodeString	access:private	signature:(UChar c, int32_t start, int32_t length) const
doLastIndexOf	unicode/unistr.h	/^  int32_t doLastIndexOf(UChar32 c,$/;"	p	class:UnicodeString	access:private	signature:(UChar32 c, int32_t start, int32_t length) const
doLastIndexOf	unistr.cpp	/^UnicodeString::doLastIndexOf(UChar c,$/;"	f	class:UnicodeString	signature:(UChar c, int32_t start, int32_t length) const
doLastIndexOf	unistr.cpp	/^UnicodeString::doLastIndexOf(UChar32 c,$/;"	f	class:UnicodeString	signature:(UChar32 c, int32_t start, int32_t length) const
doLoadFromCommonData	udata.cpp	/^static UDataMemory *doLoadFromCommonData(UBool isICUData, const char * \/*pkgName*\/, $/;"	f	file:	signature:(UBool isICUData, const char * , const char * , const char * , const char *tocEntryName, const char *path, const char *type, const char *name, UDataMemoryIsAcceptable *isAcceptable, void *context, UErrorCode *subErrorCode, UErrorCode *pErrorCode)
doLoadFromIndividualFiles	udata.cpp	/^static UDataMemory *doLoadFromIndividualFiles(const char *pkgName, $/;"	f	file:	signature:(const char *pkgName, const char *dataPath, const char *tocEntryPathSuffix, const char *path, const char *type, const char *name, UDataMemoryIsAcceptable *isAcceptable, void *context, UErrorCode *subErrorCode, UErrorCode *pErrorCode)
doNFKC	sprpimpl.h	/^    UBool doNFKC;$/;"	m	struct:UStringPrepProfile	access:public
doNOP	rbbirpt.h	/^    doNOP,$/;"	e	enum:RBBI_RuleParseAction
doOpenChoice	udata.cpp	/^doOpenChoice(const char *path, const char *type, const char *name,$/;"	f	file:	signature:(const char *path, const char *type, const char *name, UDataMemoryIsAcceptable *isAcceptable, void *context, UErrorCode *pErrorCode)
doOptionEnd	rbbirpt.h	/^    doOptionEnd,$/;"	e	enum:RBBI_RuleParseAction
doOptionStart	rbbirpt.h	/^    doOptionStart,$/;"	e	enum:RBBI_RuleParseAction
doParseActions	rbbiscan.cpp	/^UBool RBBIRuleScanner::doParseActions(int32_t action)$/;"	f	class:RBBIRuleScanner	signature:(int32_t action)
doParseActions	rbbiscan.h	/^    UBool       doParseActions(int32_t a);$/;"	p	class:RBBIRuleScanner	access:private	signature:(int32_t a)
doReplace	unicode/unistr.h	/^  UnicodeString& doReplace(int32_t start,$/;"	p	class:UnicodeString	access:private	signature:(int32_t start, int32_t length, const UChar *srcChars, int32_t srcStart, int32_t srcLength)
doReplace	unicode/unistr.h	/^  UnicodeString& doReplace(int32_t start,$/;"	p	class:UnicodeString	access:private	signature:(int32_t start, int32_t length, const UnicodeString& srcText, int32_t srcStart, int32_t srcLength)
doReplace	unistr.cpp	/^UnicodeString::doReplace( int32_t start,$/;"	f	class:UnicodeString	signature:( int32_t start, int32_t length, const UnicodeString& src, int32_t srcStart, int32_t srcLength)
doReplace	unistr.cpp	/^UnicodeString::doReplace(int32_t start,$/;"	f	class:UnicodeString	signature:(int32_t start, int32_t length, const UChar *srcChars, int32_t srcStart, int32_t srcLength)
doReverse	unicode/unistr.h	/^  UnicodeString& doReverse(int32_t start,$/;"	p	class:UnicodeString	access:private	signature:(int32_t start, int32_t length)
doReverse	unistr.cpp	/^UnicodeString::doReverse(int32_t start, int32_t length) {$/;"	f	class:UnicodeString	signature:(int32_t start, int32_t length)
doReverseDir	rbbirpt.h	/^    doReverseDir,$/;"	e	enum:RBBI_RuleParseAction
doRuleChar	rbbirpt.h	/^    doRuleChar,$/;"	e	enum:RBBI_RuleParseAction
doRuleError	rbbirpt.h	/^    doRuleError,$/;"	e	enum:RBBI_RuleParseAction
doRuleErrorAssignExpr	rbbirpt.h	/^    doRuleErrorAssignExpr,$/;"	e	enum:RBBI_RuleParseAction
doScanUnicodeSet	rbbirpt.h	/^    doScanUnicodeSet,$/;"	e	enum:RBBI_RuleParseAction
doSlash	rbbirpt.h	/^    doSlash,$/;"	e	enum:RBBI_RuleParseAction
doStartAssign	rbbirpt.h	/^    doStartAssign,$/;"	e	enum:RBBI_RuleParseAction
doStartTagValue	rbbirpt.h	/^    doStartTagValue,$/;"	e	enum:RBBI_RuleParseAction
doStartVariableName	rbbirpt.h	/^    doStartVariableName,$/;"	e	enum:RBBI_RuleParseAction
doTagDigit	rbbirpt.h	/^    doTagDigit,$/;"	e	enum:RBBI_RuleParseAction
doTagExpectedError	rbbirpt.h	/^    doTagExpectedError,$/;"	e	enum:RBBI_RuleParseAction
doTagValue	rbbirpt.h	/^    doTagValue,$/;"	e	enum:RBBI_RuleParseAction
doUnaryOpPlus	rbbirpt.h	/^    doUnaryOpPlus,$/;"	e	enum:RBBI_RuleParseAction
doUnaryOpQuestion	rbbirpt.h	/^    doUnaryOpQuestion,$/;"	e	enum:RBBI_RuleParseAction
doUnaryOpStar	rbbirpt.h	/^    doUnaryOpStar,$/;"	e	enum:RBBI_RuleParseAction
doVariableNameExpectedErr	rbbirpt.h	/^    doVariableNameExpectedErr,$/;"	e	enum:RBBI_RuleParseAction
doWriteForward	ubidiwrt.c	/^doWriteForward(const UChar *src, int32_t srcLength,$/;"	f	file:	signature:(const UChar *src, int32_t srcLength, UChar *dest, int32_t destSize, uint16_t options, UErrorCode *pErrorCode)
doWriteReverse	ubidiwrt.c	/^doWriteReverse(const UChar *src, int32_t srcLength,$/;"	f	file:	signature:(const UChar *src, int32_t srcLength, UChar *dest, int32_t destSize, uint16_t options, UErrorCode *pErrorCode)
do_canonicalize	loclikely.cpp	/^do_canonicalize(const char*    localeID,$/;"	f	file:	signature:(const char* localeID, char* buffer, int32_t bufferCapacity, UErrorCode* err)
done	unicode/caniter.h	/^    UBool done;$/;"	m	class:CanonicalIterator	access:private
dontUnload	icuplug.c	/^  UBool   dontUnload; \/**< TRUE if plugin must stay resident (leak plugin and lib) *\/$/;"	m	struct:UPlugData	file:	access:public
dstID	putil.c	/^    const char *dstID;$/;"	m	struct:OffsetZoneMapping	file:	access:public
dummy	uloc.c	/^    int32_t dummy;  \/* to avoid uninitialized memory copy from qsort *\/$/;"	m	struct:__anon72	file:	access:public
dump	uniset.cpp	/^void dump(UChar32 c) {$/;"	f	signature:(UChar32 c)
dump	uniset.cpp	/^void dump(const UChar32* list, int32_t len) {$/;"	f	signature:(const UChar32* list, int32_t len)
eBOGUS	unicode/locid.h	/^        eBOGUS$/;"	e	enum:Locale::ELocaleType
eCANADA	locid.cpp	/^    eCANADA,$/;"	e	enum:ELocalePos	file:
eCANADA_FRENCH	locid.cpp	/^    eCANADA_FRENCH,$/;"	e	enum:ELocalePos	file:
eCHINA	locid.cpp	/^    eCHINA,      \/* Alias for PRC *\/$/;"	e	enum:ELocalePos	file:
eCHINESE	locid.cpp	/^    eCHINESE,$/;"	e	enum:ELocalePos	file:
eENGLISH	locid.cpp	/^    eENGLISH,$/;"	e	enum:ELocalePos	file:
eFRANCE	locid.cpp	/^    eFRANCE,$/;"	e	enum:ELocalePos	file:
eFRENCH	locid.cpp	/^    eFRENCH,$/;"	e	enum:ELocalePos	file:
eGERMAN	locid.cpp	/^    eGERMAN,$/;"	e	enum:ELocalePos	file:
eGERMANY	locid.cpp	/^    eGERMANY,$/;"	e	enum:ELocalePos	file:
eITALIAN	locid.cpp	/^    eITALIAN,$/;"	e	enum:ELocalePos	file:
eITALY	locid.cpp	/^    eITALY,$/;"	e	enum:ELocalePos	file:
eJAPAN	locid.cpp	/^    eJAPAN,$/;"	e	enum:ELocalePos	file:
eJAPANESE	locid.cpp	/^    eJAPANESE,$/;"	e	enum:ELocalePos	file:
eKOREA	locid.cpp	/^    eKOREA,$/;"	e	enum:ELocalePos	file:
eKOREAN	locid.cpp	/^    eKOREAN,$/;"	e	enum:ELocalePos	file:
eMAX_LOCALES	locid.cpp	/^    eMAX_LOCALES$/;"	e	enum:ELocalePos	file:
eROOT	locid.cpp	/^    eROOT,$/;"	e	enum:ELocalePos	file:
eTAIWAN	locid.cpp	/^    eTAIWAN,$/;"	e	enum:ELocalePos	file:
eUK	locid.cpp	/^    eUK,$/;"	e	enum:ELocalePos	file:
eUS	locid.cpp	/^    eUS,$/;"	e	enum:ELocalePos	file:
ebcdicFromAscii	uinvchar.c	/^static const uint8_t ebcdicFromAscii[256]={$/;"	v	file:
ebcdicTypes	ucnv_io.c	/^static const uint8_t ebcdicTypes[128] = {$/;"	v	file:
elementAt	uvector.cpp	/^void* UVector::elementAt(int32_t index) const {$/;"	f	class:UVector	signature:(int32_t index) const
elementAt	uvector.h	/^    void* elementAt(int32_t index) const;$/;"	p	class:UVector	access:public	signature:(int32_t index) const
elementAti	uvector.cpp	/^int32_t UVector::elementAti(int32_t index) const {$/;"	f	class:UVector	signature:(int32_t index) const
elementAti	uvector.h	/^    int32_t elementAti(int32_t index) const;$/;"	p	class:UVector	access:public	signature:(int32_t index) const
elementAti	uvectr32.h	/^    int32_t elementAti(int32_t index) const;$/;"	p	class:UVector32	access:public	signature:(int32_t index) const
elementAti	uvectr32.h	/^inline int32_t UVector32::elementAti(int32_t index) const {$/;"	f	class:UVector32	signature:(int32_t index) const
elementAti	uvectr64.h	/^    int64_t elementAti(int32_t index) const;$/;"	p	class:UVector64	access:public	signature:(int32_t index) const
elementAti	uvectr64.h	/^inline int64_t UVector64::elementAti(int32_t index) const {$/;"	f	class:UVector64	signature:(int32_t index) const
elements	uhash.h	/^    UHashElement *elements;$/;"	m	struct:UHashtable	access:public
elements	uvector.h	/^    UHashTok* elements;$/;"	m	class:UVector	access:private
elements	uvectr32.h	/^    int32_t*  elements;$/;"	m	class:UVector32	access:private
elements	uvectr64.h	/^    int64_t*  elements;$/;"	m	class:UVector64	access:private
empty	unicode/stringpiece.h	/^  UBool empty() const { return length_ == 0; }$/;"	f	class:StringPiece	access:public	signature:() const
empty	uvector.h	/^    UBool empty(void) const;$/;"	p	class:UStack	access:public	signature:(void) const
empty	uvector.h	/^inline UBool UStack::empty(void) const {$/;"	f	class:UStack	signature:(void) const
empty	uvectr32.h	/^    UBool empty(void) const;   \/\/ TODO:  redundant, same as empty().  Remove it?$/;"	p	class:UVector32	access:public	signature:(void) const
empty	uvectr32.h	/^inline UBool UVector32::empty(void) const {$/;"	f	class:UVector32	signature:(void) const
emptyText	utext.cpp	/^static const UText emptyText = UTEXT_INITIALIZER;$/;"	v	file:
encodeDirectlyMaximum	ucnv_u7.c	/^static const UBool encodeDirectlyMaximum[128]={$/;"	v	file:
encodeDirectlyRestricted	ucnv_u7.c	/^static const UBool encodeDirectlyRestricted[128]={$/;"	v	file:
encodingStrLength	ucnvsel.cpp	/^  int32_t encodingStrLength;$/;"	m	struct:UConverterSelector	file:	access:public
encodings	ucnvsel.cpp	/^  char** encodings;          \/\/ which encodings did user ask to use?$/;"	m	struct:UConverterSelector	file:	access:public
encodingsCount	ucnvsel.cpp	/^  int32_t encodingsCount;$/;"	m	struct:UConverterSelector	file:	access:public
end	unames.c	/^    uint32_t start, end;$/;"	m	struct:__anon93	file:	access:public
end	unicode/chariter.h	/^    int32_t  end;$/;"	m	class:CharacterIterator	access:protected
endElement	unicode/usetiter.h	/^    int32_t endElement;$/;"	m	class:UnicodeSetIterator	access:protected
endIndex	normlzr.cpp	/^int32_t Normalizer::endIndex() const {$/;"	f	class:Normalizer	signature:() const
endIndex	unicode/chariter.h	/^    inline int32_t       endIndex(void) const;$/;"	p	class:CharacterIterator	access:public	signature:(void) const
endIndex	unicode/chariter.h	/^CharacterIterator::endIndex(void) const {$/;"	f	class:CharacterIterator	signature:(void) const
endIndex	unicode/normlzr.h	/^  int32_t            endIndex(void) const;$/;"	p	class:Normalizer	access:public	signature:(void) const
endIndex	unicode/umisc.h	/^  int32_t endIndex;$/;"	m	struct:UFieldPosition	access:public
endMark	rbbinode.h	/^            endMark,$/;"	e	enum:RBBINode::NodeType
endRange	unicode/usetiter.h	/^    int32_t endRange;$/;"	m	class:UnicodeSetIterator	access:protected
endsWith	unicode/unistr.h	/^  inline UBool endsWith(const UChar *srcChars,$/;"	p	class:UnicodeString	access:public	signature:(const UChar *srcChars, int32_t srcLength) const
endsWith	unicode/unistr.h	/^  inline UBool endsWith(const UChar *srcChars,$/;"	p	class:UnicodeString	access:public	signature:(const UChar *srcChars, int32_t srcStart, int32_t srcLength) const
endsWith	unicode/unistr.h	/^  inline UBool endsWith(const UnicodeString& srcText,$/;"	p	class:UnicodeString	access:public	signature:(const UnicodeString& srcText, int32_t srcStart, int32_t srcLength) const
endsWith	unicode/unistr.h	/^  inline UBool endsWith(const UnicodeString& text) const;$/;"	p	class:UnicodeString	access:public	signature:(const UnicodeString& text) const
endsWith	unicode/unistr.h	/^UnicodeString::endsWith(const UChar *srcChars,$/;"	f	class:UnicodeString	signature:(const UChar *srcChars, int32_t srcLength) const
endsWith	unicode/unistr.h	/^UnicodeString::endsWith(const UChar *srcChars,$/;"	f	class:UnicodeString	signature:(const UChar *srcChars, int32_t srcStart, int32_t srcLength) const
endsWith	unicode/unistr.h	/^UnicodeString::endsWith(const UnicodeString& srcText,$/;"	f	class:UnicodeString	signature:(const UnicodeString& srcText, int32_t srcStart, int32_t srcLength) const
endsWith	unicode/unistr.h	/^UnicodeString::endsWith(const UnicodeString& text) const$/;"	f	class:UnicodeString	signature:(const UnicodeString& text) const
ensureBufferCapacity	unicode/uniset.h	/^    void ensureBufferCapacity(int32_t newLen, UErrorCode& ec);$/;"	p	class:UnicodeSet	access:private	signature:(int32_t newLen, UErrorCode& ec)
ensureBufferCapacity	uniset.cpp	/^void UnicodeSet::ensureBufferCapacity(int32_t newLen, UErrorCode& ec) {$/;"	f	class:UnicodeSet	signature:(int32_t newLen, UErrorCode& ec)
ensureCanonIterData	normalizer2impl.cpp	/^UBool Normalizer2Impl::ensureCanonIterData(UErrorCode &errorCode) const {$/;"	f	class:Normalizer2Impl	signature:(UErrorCode &errorCode) const
ensureCanonIterData	normalizer2impl.h	/^    UBool ensureCanonIterData(UErrorCode &errorCode) const;$/;"	p	class:Normalizer2Impl	access:public	signature:(UErrorCode &errorCode) const
ensureCapacity	charstr.cpp	/^UBool CharString::ensureCapacity(int32_t capacity,$/;"	f	class:CharString	signature:(int32_t capacity, int32_t desiredCapacityHint, UErrorCode &errorCode)
ensureCapacity	charstr.h	/^    UBool ensureCapacity(int32_t capacity, int32_t desiredCapacityHint, UErrorCode &errorCode);$/;"	p	class:CharString	access:private	signature:(int32_t capacity, int32_t desiredCapacityHint, UErrorCode &errorCode)
ensureCapacity	unicode/uniset.h	/^    void ensureCapacity(int32_t newLen, UErrorCode& ec);$/;"	p	class:UnicodeSet	access:private	signature:(int32_t newLen, UErrorCode& ec)
ensureCapacity	uniset.cpp	/^void UnicodeSet::ensureCapacity(int32_t newLen, UErrorCode& ec) {$/;"	f	class:UnicodeSet	signature:(int32_t newLen, UErrorCode& ec)
ensureCapacity	uvector.cpp	/^UBool UVector::ensureCapacity(int32_t minimumCapacity, UErrorCode &status) {$/;"	f	class:UVector	signature:(int32_t minimumCapacity, UErrorCode &status)
ensureCapacity	uvector.h	/^    UBool ensureCapacity(int32_t minimumCapacity, UErrorCode &status);$/;"	p	class:UVector	access:public	signature:(int32_t minimumCapacity, UErrorCode &status)
ensureCapacity	uvectr32.h	/^    inline UBool ensureCapacity(int32_t minimumCapacity, UErrorCode &status);$/;"	p	class:UVector32	access:public	signature:(int32_t minimumCapacity, UErrorCode &status)
ensureCapacity	uvectr32.h	/^inline UBool UVector32::ensureCapacity(int32_t minimumCapacity, UErrorCode &status) {$/;"	f	class:UVector32	signature:(int32_t minimumCapacity, UErrorCode &status)
ensureCapacity	uvectr64.h	/^    inline UBool ensureCapacity(int32_t minimumCapacity, UErrorCode &status);$/;"	p	class:UVector64	access:public	signature:(int32_t minimumCapacity, UErrorCode &status)
ensureCapacity	uvectr64.h	/^inline UBool UVector64::ensureCapacity(int32_t minimumCapacity, UErrorCode &status) {$/;"	f	class:UVector64	signature:(int32_t minimumCapacity, UErrorCode &status)
ensureCharsCapacity	unicode/strenum.h	/^    void ensureCharsCapacity(int32_t capacity, UErrorCode &status);$/;"	p	class:StringEnumeration	access:protected	signature:(int32_t capacity, UErrorCode &status)
ensureCharsCapacity	ustrenum.cpp	/^StringEnumeration::ensureCharsCapacity(int32_t capacity, UErrorCode &status) {$/;"	f	class:StringEnumeration	signature:(int32_t capacity, UErrorCode &status)
entries	triedict.cpp	/^    CompactTrieHorizontalEntry      entries[1];$/;"	m	struct:CompactTrieHorizontalNode	file:	access:public
entry	ucmndata.c	/^    PointerTOCEntry   entry[2];   \/* Actual size is from count. *\/$/;"	m	struct:__anon28	file:	access:public
entry	ucmndata.h	/^    UDataOffsetTOCEntry entry[2];    \/* Actual size of array is from count. *\/$/;"	m	struct:__anon145	access:public
entryClose	uresbund.c	/^static void entryClose(UResourceDataEntry *resB) {$/;"	f	file:	signature:(UResourceDataEntry *resB)
entryCloseInt	uresbund.c	/^static void entryCloseInt(UResourceDataEntry *resB) {$/;"	f	file:	signature:(UResourceDataEntry *resB)
entryIncrease	uresbund.c	/^static void entryIncrease(UResourceDataEntry *entry) {$/;"	f	file:	signature:(UResourceDataEntry *entry)
entryName	ucmndata.c	/^    const char       *entryName;$/;"	m	struct:__anon27	file:	access:public
entryOpen	uresbund.c	/^static UResourceDataEntry *entryOpen(const char* path, const char* localeID, UErrorCode* status) {$/;"	f	file:	signature:(const char* path, const char* localeID, UErrorCode* status)
entrypoint	icuplug.c	/^  UPlugEntrypoint  *entrypoint; \/**< plugin entrypoint *\/$/;"	m	struct:UPlugData	file:	access:public
enumAlgNames	unames.c	/^enumAlgNames(AlgorithmicRange *range,$/;"	f	file:	signature:(AlgorithmicRange *range, UChar32 start, UChar32 limit, UEnumCharNamesFn *fn, void *context, UCharNameChoice nameChoice)
enumCIDRangeHandler	normalizer2impl.cpp	/^enumCIDRangeHandler(const void *context, UChar32 start, UChar32 end, uint32_t value) {$/;"	f	file:	signature:(const void *context, UChar32 start, UChar32 end, uint32_t value)
enumEitherTrie	utrie2.cpp	/^enumEitherTrie(const UTrie2 *trie,$/;"	f	file:	signature:(const UTrie2 *trie, UChar32 start, UChar32 limit, UTrie2EnumValue *enumValue, UTrie2EnumRange *enumRange, const void *context)
enumExtNames	unames.c	/^enumExtNames(UChar32 start, UChar32 end,$/;"	f	file:	signature:(UChar32 start, UChar32 end, UEnumCharNamesFn *fn, void *context)
enumGroupNames	unames.c	/^enumGroupNames(UCharNames *names, const uint16_t *group,$/;"	f	file:	signature:(UCharNames *names, const uint16_t *group, UChar32 start, UChar32 end, UEnumCharNamesFn *fn, void *context, UCharNameChoice nameChoice)
enumLimit	propname.h	/^    EnumValue enumLimit;$/;"	m	class:EnumToOffset	access:private
enumNames	unames.c	/^enumNames(UCharNames *names,$/;"	f	file:	signature:(UCharNames *names, UChar32 start, UChar32 limit, UEnumCharNamesFn *fn, void *context, UCharNameChoice nameChoice)
enumPropertyStartsRange	normalizer2impl.cpp	/^enumPropertyStartsRange(const void *context, UChar32 start, UChar32 \/*end*\/, uint32_t \/*value*\/) {$/;"	f	file:	signature:(const void *context, UChar32 start, UChar32 , uint32_t )
enumRange	uchar.c	/^    UCharEnumTypeRange *enumRange;$/;"	m	struct:_EnumTypeCallback	file:	access:public
enumRangeHandler	normalizer2impl.cpp	/^enumRangeHandler(const void *context, UChar32 start, UChar32 end, uint32_t value) {$/;"	f	file:	signature:(const void *context, UChar32 start, UChar32 end, uint32_t value)
enumRangeOrValue	normalizer2impl.cpp	/^enumRangeOrValue(const void *context, UChar32 \/*start*\/, UChar32 \/*end*\/, uint32_t value) {$/;"	f	file:	signature:(const void *context, UChar32 , UChar32 , uint32_t value)
enumSameValue	utrie.c	/^enumSameValue(const void *context, uint32_t value) {$/;"	f	file:	signature:(const void *context, uint32_t value)
enumSameValue	utrie2.cpp	/^enumSameValue(const void * \/*context*\/, uint32_t value) {$/;"	f	file:	signature:(const void * , uint32_t value)
enumStart	propname.h	/^    EnumValue enumStart;$/;"	m	class:EnumToOffset	access:private
enumToName_offset	propname.h	/^    Offset enumToName_offset;$/;"	m	class:PropertyAliases	access:private
enumToName_offset	propname.h	/^    Offset enumToName_offset;$/;"	m	struct:ValueMap	access:public
enumToU	ucnvmbcs.c	/^enumToU(UConverterMBCSTable *mbcsTable, int8_t stateProps[],$/;"	f	file:	signature:(UConverterMBCSTable *mbcsTable, int8_t stateProps[], int32_t state, uint32_t offset, uint32_t value, UConverterEnumToUCallback *callback, const void *context, UErrorCode *pErrorCode)
enumToValue_offset	propname.h	/^    Offset enumToValue_offset;$/;"	m	class:PropertyAliases	access:private
equal	triedict.cpp	/^    TernaryNode *equal;     \/\/ Equal link$/;"	m	struct:TernaryNode	file:	access:public
equal	triedict.cpp	/^    uint16_t        equal;          \/\/ Equal link node index$/;"	m	struct:CompactTrieHorizontalEntry	file:	access:public
equal	triedict.cpp	/^    uint16_t        equal;          \/\/ Equal link node index$/;"	m	struct:CompactTrieVerticalNode	file:	access:public
equal_int32	utrie2_builder.c	/^equal_int32(const int32_t *s, const int32_t *t, int32_t length) {$/;"	f	file:	signature:(const int32_t *s, const int32_t *t, int32_t length)
equal_uint32	utrie.c	/^equal_uint32(const uint32_t *s, const uint32_t *t, int32_t length) {$/;"	f	file:	signature:(const uint32_t *s, const uint32_t *t, int32_t length)
equal_uint32	utrie2_builder.c	/^equal_uint32(const uint32_t *s, const uint32_t *t, int32_t length) {$/;"	f	file:	signature:(const uint32_t *s, const uint32_t *t, int32_t length)
equals	hash.h	/^    UBool equals(const Hashtable& that) const;$/;"	p	class:Hashtable	access:public	signature:(const Hashtable& that) const
equals	hash.h	/^inline UBool Hashtable::equals(const Hashtable& that)const{$/;"	f	class:Hashtable	signature:(const Hashtable& that) const
equals	normalizer2impl.cpp	/^UBool ReorderingBuffer::equals(const UChar *otherStart, const UChar *otherLimit) const {$/;"	f	class:ReorderingBuffer	signature:(const UChar *otherStart, const UChar *otherLimit) const
equals	normalizer2impl.h	/^    UBool equals(const UChar *start, const UChar *limit) const;$/;"	p	class:ReorderingBuffer	access:public	signature:(const UChar *start, const UChar *limit) const
equals	uvector.cpp	/^UBool   UVector::equals(const UVector &other) const {$/;"	f	class:UVector	signature:(const UVector &other) const
equals	uvector.h	/^    UBool equals(const UVector &other) const;$/;"	p	class:UVector	access:public	signature:(const UVector &other) const
equals	uvectr32.cpp	/^UBool   UVector32::equals(const UVector32 &other) const {$/;"	f	class:UVector32	signature:(const UVector32 &other) const
equals	uvectr32.h	/^    UBool equals(const UVector32 &other) const;$/;"	p	class:UVector32	access:public	signature:(const UVector32 &other) const
error	rbbiscan.cpp	/^void RBBIRuleScanner::error(UErrorCode e) {$/;"	f	class:RBBIRuleScanner	signature:(UErrorCode e)
error	rbbiscan.h	/^    void        error(UErrorCode e);                   \/\/ error reporting convenience function.$/;"	p	class:RBBIRuleScanner	access:private	signature:(UErrorCode e)
errorCode	normalizer2impl.cpp	/^    UErrorCode &errorCode;$/;"	m	class:CanonIterDataSingleton	file:	access:private
errorCode	normalizer2impl.cpp	/^    UErrorCode &errorCode;$/;"	m	class:FCDTrieSingleton	file:	access:public
errorCode	ubidiimp.h	/^    UErrorCode errorCode;   \/* for eventual memory shortage *\/$/;"	m	struct:InsertPoints	access:public
errorCode	unicode/errorcode.h	/^    UErrorCode errorCode;$/;"	m	class:ErrorCode	access:protected
errorCode	utrie2_builder.c	/^    UErrorCode errorCode;$/;"	m	struct:NewTrieAndStatus	file:	access:public
errorIndex	unicode/parsepos.h	/^    int32_t errorIndex;$/;"	m	class:ParsePosition	access:private
errorName	errorcode.cpp	/^const char* ErrorCode::errorName() const {$/;"	f	class:ErrorCode	signature:() const
errorName	unicode/errorcode.h	/^    const char* errorName() const;$/;"	p	class:ErrorCode	access:public	signature:() const
errorValue	propsvec.h	/^    int32_t errorValue;$/;"	m	struct:UPVecToUTrie2Context	access:public
errorValue	utrie2.h	/^    uint32_t errorValue;$/;"	m	struct:UTrie2	access:public
errorValue	utrie2_impl.h	/^    uint32_t initialValue, errorValue;$/;"	m	struct:UNewTrie2	access:public
errors	unicode/idna.h	/^    uint32_t errors, labelErrors;$/;"	m	class:IDNAInfo	access:private
errors	unicode/uidna.h	/^    uint32_t errors;$/;"	m	struct:UIDNAInfo	access:public
escSeqChars	ucnv2022.c	/^static const char escSeqChars[][6] ={$/;"	v	file:
escSeqCharsCN	ucnv2022.c	/^static const char* const escSeqCharsCN[10] ={$/;"	v	file:
escSeqCharsLen	ucnv2022.c	/^static  const int8_t escSeqCharsLen[] ={$/;"	v	file:
escSeqStateTable_Key_2022	ucnv2022.c	/^static const int32_t escSeqStateTable_Key_2022[MAX_STATES_2022] = {$/;"	v	file:
escSeqStateTable_Result_2022	ucnv2022.c	/^static const char* const escSeqStateTable_Result_2022[MAX_STATES_2022] = {$/;"	v	file:
escSeqStateTable_Value_2022	ucnv2022.c	/^static const int8_t escSeqStateTable_Value_2022[MAX_STATES_2022] = {$/;"	v	file:
escapeUnprintable	util.cpp	/^UBool ICU_Utility::escapeUnprintable(UnicodeString& result, UChar32 c) {$/;"	f	class:ICU_Utility	signature:(UnicodeString& result, UChar32 c)
escapeUnprintable	util.h	/^    static UBool escapeUnprintable(UnicodeString& result, UChar32 c);$/;"	p	class:ICU_Utility	access:public	signature:(UnicodeString& result, UChar32 c)
exceptions	ucase.c	/^    const uint16_t *exceptions;$/;"	m	struct:UCaseProps	file:	access:public
exclusiveLimit	utrie2_builder.c	/^    UBool exclusiveLimit;  \/* rather than inclusive range end *\/$/;"	m	struct:NewTrieAndStatus	file:	access:public
exclusiveOr	unicode/uniset.h	/^    void exclusiveOr(const UChar32* other, int32_t otherLen, int8_t polarity);$/;"	p	class:UnicodeSet	access:private	signature:(const UChar32* other, int32_t otherLen, int8_t polarity)
exclusiveOr	uniset.cpp	/^void UnicodeSet::exclusiveOr(const UChar32* other, int32_t otherLen, int8_t polarity) {$/;"	f	class:UnicodeSet	signature:(const UChar32* other, int32_t otherLen, int8_t polarity)
expandCapacity	uvectr32.cpp	/^UBool UVector32::expandCapacity(int32_t minimumCapacity, UErrorCode &status) {$/;"	f	class:UVector32	signature:(int32_t minimumCapacity, UErrorCode &status)
expandCapacity	uvectr32.h	/^    UBool expandCapacity(int32_t minimumCapacity, UErrorCode &status);$/;"	p	class:UVector32	access:public	signature:(int32_t minimumCapacity, UErrorCode &status)
expandCapacity	uvectr64.cpp	/^UBool UVector64::expandCapacity(int32_t minimumCapacity, UErrorCode &status) {$/;"	f	class:UVector64	signature:(int32_t minimumCapacity, UErrorCode &status)
expandCapacity	uvectr64.h	/^    UBool expandCapacity(int32_t minimumCapacity, UErrorCode &status);$/;"	p	class:UVector64	access:public	signature:(int32_t minimumCapacity, UErrorCode &status)
expandCompositChar	ushape.c	/^expandCompositChar(UChar *dest, int32_t sourceLength,$/;"	f	file:	signature:(UChar *dest, int32_t sourceLength, int32_t destSize,uint64_t options, UErrorCode *pErrorCode, int shapingMode)
expandCompositCharAtBegin	ushape.c	/^expandCompositCharAtBegin(UChar *dest, int32_t sourceLength, int32_t destSize,UErrorCode *pErrorCode) {$/;"	f	file:	signature:(UChar *dest, int32_t sourceLength, int32_t destSize,UErrorCode *pErrorCode)
expandCompositCharAtEnd	ushape.c	/^expandCompositCharAtEnd(UChar *dest, int32_t sourceLength, int32_t destSize,UErrorCode *pErrorCode) {$/;"	f	file:	signature:(UChar *dest, int32_t sourceLength, int32_t destSize,UErrorCode *pErrorCode)
expandCompositCharAtNear	ushape.c	/^expandCompositCharAtNear(UChar *dest, int32_t sourceLength, int32_t destSize,UErrorCode *pErrorCode,$/;"	f	file:	signature:(UChar *dest, int32_t sourceLength, int32_t destSize,UErrorCode *pErrorCode, int yehHamzaOption, int seenTailOption, int lamAlefOption)
expandGroupLengths	unames.c	/^expandGroupLengths(const uint8_t *s,$/;"	f	file:	signature:(const uint8_t *s, uint16_t offsets[LINES_PER_GROUP+1], uint16_t lengths[LINES_PER_GROUP+1])
expandGroupName	unames.c	/^expandGroupName(UCharNames *names, const uint16_t *group,$/;"	f	file:	signature:(UCharNames *names, const uint16_t *group, uint16_t lineNumber, UCharNameChoice nameChoice, char *buffer, uint16_t bufferLength)
expandName	unames.c	/^expandName(UCharNames *names,$/;"	f	file:	signature:(UCharNames *names, const uint8_t *name, uint16_t nameLength, UCharNameChoice nameChoice, char *buffer, uint16_t bufferLength)
exportTable	rbbitblb.cpp	/^void RBBITableBuilder::exportTable(void *where) {$/;"	f	class:RBBITableBuilder	signature:(void *where)
exportTable	rbbitblb.h	/^    void     exportTable(void *where);  \/\/ fill in the runtime state table.$/;"	p	class:RBBITableBuilder	access:public	signature:(void *where)
extIndexes	ucnvmbcs.h	/^    const int32_t *extIndexes;$/;"	m	struct:UConverterMBCSTable	access:public
extendICUData	udata.cpp	/^static UBool extendICUData(UErrorCode *pErr)$/;"	f	file:	signature:(UErrorCode *pErr)
extension	utext.cpp	/^    UAlignedMemory extension;$/;"	m	struct:ExtendedUText	file:	access:public
extensions	uloc_tag.c	/^    ExtensionListEntry  *extensions;$/;"	m	struct:ULanguageTag	file:	access:public
extlang	uloc_tag.c	/^    const char          *extlang[MAXEXTLANG];$/;"	m	struct:ULanguageTag	file:	access:public
extraData	normalizer2impl.h	/^    const uint16_t *extraData;  \/\/ mappings and\/or compositions for yesYes, yesNo & noNo characters$/;"	m	class:Normalizer2Impl	access:private
extraData	unorm_props_data.c	/^static const uint16_t extraData[16431]={$/;"	v	file:
extraInfo	ucnv_bld.h	/^    void *extraInfo;$/;"	m	struct:UConverter	access:public
extraSize	unicode/utext.h	/^    int32_t        extraSize;$/;"	m	struct:UText	access:public
extract	caniter.cpp	/^Hashtable *CanonicalIterator::extract(Hashtable *fillinResult, UChar32 comp, const UChar *segment, int32_t segLen, int32_t segmentPos, UErrorCode &status) {$/;"	f	class:CanonicalIterator	signature:(Hashtable *fillinResult, UChar32 comp, const UChar *segment, int32_t segLen, int32_t segmentPos, UErrorCode &status)
extract	unicode/caniter.h	/^    Hashtable *extract(Hashtable *fillinResult, UChar32 comp, const UChar *segment, int32_t segLen, int32_t segmentPos, UErrorCode &status);$/;"	p	class:CanonicalIterator	access:private	signature:(Hashtable *fillinResult, UChar32 comp, const UChar *segment, int32_t segLen, int32_t segmentPos, UErrorCode &status)
extract	unicode/unistr.h	/^  extract(UChar *dest, int32_t destCapacity,$/;"	p	class:UnicodeString	access:public	signature:(UChar *dest, int32_t destCapacity, UErrorCode &errorCode) const
extract	unicode/unistr.h	/^  inline int32_t extract(int32_t start,$/;"	p	class:UnicodeString	access:public	signature:(int32_t start, int32_t startLength, char *target, const char *codepage = 0) const
extract	unicode/unistr.h	/^  inline void extract(int32_t start,$/;"	p	class:UnicodeString	access:public	signature:(int32_t start, int32_t length, UChar *dst, int32_t dstStart = 0) const
extract	unicode/unistr.h	/^  inline void extract(int32_t start,$/;"	p	class:UnicodeString	access:public	signature:(int32_t start, int32_t length, UnicodeString& target) const
extract	unicode/unistr.h	/^  int32_t extract(char *dest, int32_t destCapacity,$/;"	p	class:UnicodeString	access:public	signature:(char *dest, int32_t destCapacity, UConverter *cnv, UErrorCode &errorCode) const
extract	unicode/unistr.h	/^  int32_t extract(int32_t start,$/;"	p	class:UnicodeString	access:public	signature:(int32_t start, int32_t startLength, char *target, int32_t targetCapacity, enum EInvariant inv) const
extract	unicode/unistr.h	/^  int32_t extract(int32_t start,$/;"	p	class:UnicodeString	access:public	signature:(int32_t start, int32_t startLength, char *target, uint32_t targetLength) const
extract	unicode/unistr.h	/^  int32_t extract(int32_t start,$/;"	p	class:UnicodeString	access:public	signature:(int32_t start, int32_t startLength, char *target, uint32_t targetLength, const char *codepage) const
extract	unicode/unistr.h	/^UnicodeString::extract(int32_t start,$/;"	f	class:UnicodeString	signature:(int32_t start, int32_t _length, UChar *target, int32_t targetStart) const
extract	unicode/unistr.h	/^UnicodeString::extract(int32_t start,$/;"	f	class:UnicodeString	signature:(int32_t start, int32_t _length, UnicodeString& target) const
extract	unicode/unistr.h	/^UnicodeString::extract(int32_t start,$/;"	f	class:UnicodeString	signature:(int32_t start, int32_t _length, char *dst, const char *codepage) const
extract	unicode/urep.h	/^    void    (*extract)(UReplaceable* rep,$/;"	m	struct:UReplaceableCallbacks	access:public
extract	unicode/utext.h	/^    UTextExtract *extract;$/;"	m	struct:UTextFuncs	access:public
extract	unistr.cpp	/^UnicodeString::extract(UChar *dest, int32_t destCapacity,$/;"	f	class:UnicodeString	signature:(UChar *dest, int32_t destCapacity, UErrorCode &errorCode) const
extract	unistr.cpp	/^UnicodeString::extract(int32_t start, int32_t len,$/;"	f	class:UnicodeString	signature:(int32_t start, int32_t len, char *target, uint32_t dstSize) const
extract	unistr.cpp	/^UnicodeString::extract(int32_t start,$/;"	f	class:UnicodeString	signature:(int32_t start, int32_t length, char *target, int32_t targetCapacity, enum EInvariant) const
extract	unistr_cnv.cpp	/^UnicodeString::extract(char *dest, int32_t destCapacity,$/;"	f	class:UnicodeString	signature:(char *dest, int32_t destCapacity, UConverter *cnv, UErrorCode &errorCode) const
extract	unistr_cnv.cpp	/^UnicodeString::extract(int32_t start,$/;"	f	class:UnicodeString	signature:(int32_t start, int32_t length, char *target, uint32_t dstSize) const
extract	unistr_cnv.cpp	/^UnicodeString::extract(int32_t start,$/;"	f	class:UnicodeString	signature:(int32_t start, int32_t length, char *target, uint32_t dstSize, const char *codepage) const
extractBetween	unicode/rep.h	/^    virtual void extractBetween(int32_t start,$/;"	p	class:Replaceable	access:public	signature:(int32_t start, int32_t limit, UnicodeString& target) const
extractBetween	unicode/unistr.h	/^  inline void extractBetween(int32_t start,$/;"	p	class:UnicodeString	access:public	signature:(int32_t start, int32_t limit, UChar *dst, int32_t dstStart = 0) const
extractBetween	unicode/unistr.h	/^  virtual void extractBetween(int32_t start,$/;"	p	class:UnicodeString	access:public	signature:(int32_t start, int32_t limit, UnicodeString& target) const
extractBetween	unicode/unistr.h	/^UnicodeString::extractBetween(int32_t start,$/;"	f	class:UnicodeString	signature:(int32_t start, int32_t limit, UChar *dst, int32_t dstStart) const
extractBetween	unistr.cpp	/^UnicodeString::extractBetween(int32_t start,$/;"	f	class:UnicodeString	signature:(int32_t start, int32_t limit, UnicodeString& target) const
fAccepting	rbbidata.h	/^    int16_t          fAccepting;    \/*  Non-zero if this row is for an accepting state.   *\/$/;"	m	struct:RBBIStateTableRow	access:public
fAccepting	rbbitblb.h	/^    int32_t          fAccepting;$/;"	m	class:RBBIStateDescriptor	access:public
fAction	rbbirpt.h	/^    RBBI_RuleParseAction          fAction;$/;"	m	struct:RBBIRuleTableEl	access:public
fActive	serv.cpp	/^    UBool fActive;$/;"	m	class:XMutex	file:	access:private
fAlias	uresimp.h	/^    UResourceDataEntry *fAlias;$/;"	m	struct:UResourceDataEntry	access:public
fArray	unicode/unistr.h	/^      UChar     *fArray;    \/\/ the Unicode data (aligned at 12B (32b pointers) or 16B (64b))$/;"	m	struct:UnicodeString::StackBufferOrFields::__anon118	access:public
fBeginWordSet	dictbe.h	/^  UnicodeSet                fBeginWordSet;$/;"	m	class:ThaiBreakEngine	access:private
fBogus	uresimp.h	/^    UErrorCode fBogus;$/;"	m	struct:UResourceDataEntry	access:public
fBranchStack	triedict.cpp	/^    UVector32   fBranchStack;   \/\/ Stack of which branch we are working on$/;"	m	class:MutableTrieEnumeration	file:	access:private
fBreakType	unicode/rbbi.h	/^    int32_t             fBreakType;$/;"	m	class:RuleBasedBreakIterator	access:protected
fC	rbbiscan.h	/^    RBBIRuleChar                  fC;                \/\/ Current char for parse state machine$/;"	m	class:RBBIRuleScanner	access:private
fCachedBreakPositions	unicode/rbbi.h	/^    int32_t*            fCachedBreakPositions;$/;"	m	class:RuleBasedBreakIterator	access:protected
fCachedSetLookup	rbbirb.h	/^    UnicodeSet              *fCachedSetLookup;$/;"	m	class:RBBISymbolTable	access:private
fCapacity	unicode/unistr.h	/^      int32_t   fCapacity;  \/\/ sizeof fArray$/;"	m	struct:UnicodeString::StackBufferOrFields::__anon118	access:public
fCatCount	rbbidata.h	/^    uint32_t         fCatCount;        \/*  Number of character categories.                         *\/$/;"	m	struct:RBBIDataHeader	access:public
fChainRules	rbbirb.h	/^    UBool                         fChainRules;       \/\/ True for chained Unicode TR style rules.$/;"	m	class:RBBIRuleBuilder	access:public
fChar	rbbiscan.h	/^        UChar32             fChar;$/;"	m	struct:RBBIRuleScanner::RBBIRuleChar	access:public
fCharClass	rbbirpt.h	/^    uint8_t                       fCharClass;       \/\/ 0-127:    an individual ASCII character$/;"	m	struct:RBBIRuleTableEl	access:public
fCharIter	unicode/rbbi.h	/^    CharacterIterator  *fCharIter;$/;"	m	class:RuleBasedBreakIterator	access:protected
fCharNum	rbbiscan.h	/^    int32_t                       fCharNum;          \/\/ Char position within the line.$/;"	m	class:RBBIRuleScanner	access:private
fChars	triedict.cpp	/^    UnicodeString   fChars;$/;"	m	class:BuildCompactTrieNode	file:	access:public
fCountExisting	uresimp.h	/^    uint32_t fCountExisting; \/* how much is this resource used *\/$/;"	m	struct:UResourceDataEntry	access:public
fDCharIter	unicode/rbbi.h	/^    UCharCharacterIterator *fDCharIter;$/;"	m	class:RuleBasedBreakIterator	access:protected
fDStates	rbbitblb.h	/^    UVector          *fDStates;            \/\/  D states (Aho's terminology)$/;"	m	class:RBBITableBuilder	access:private
fData	triedict.h	/^  const CompactTrieHeader   *fData;$/;"	m	class:CompactTrieDictionary	access:private
fData	unicode/rbbi.h	/^    RBBIDataWrapper    *fData;$/;"	m	class:RuleBasedBreakIterator	access:protected
fData	uresimp.h	/^    ResourceData fData; \/* data for low level access *\/$/;"	m	struct:UResourceDataEntry	access:public
fData	uresimp.h	/^    UResourceDataEntry *fData; \/*for low-level access*\/$/;"	m	struct:UResourceBundle	access:public
fDebugEnv	rbbirb.h	/^    char                          *fDebugEnv;        \/\/ controls debug trace output$/;"	m	class:RBBIRuleBuilder	access:public
fDefaultTree	rbbirb.h	/^    RBBINode                      **fDefaultTree;    \/\/ For rules not qualified with a !$/;"	m	class:RBBIRuleBuilder	access:public
fDictionary	dictbe.h	/^  const TrieWordDictionary  *fDictionary;$/;"	m	class:ThaiBreakEngine	access:private
fDictionaryCharCount	unicode/rbbi.h	/^    uint32_t            fDictionaryCharCount;$/;"	m	class:RuleBasedBreakIterator	access:protected
fDontFreeData	rbbidata.h	/^    UBool               fDontFreeData;$/;"	m	class:RBBIDataWrapper	access:private
fDtran	rbbitblb.h	/^    UVector          *fDtran;              \/\/ Transitions out of this state.$/;"	m	class:RBBIStateDescriptor	access:public
fEndChar	rbbisetb.h	/^    UChar32            fEndChar;        \/\/ End of range, unicode 32 bit value.$/;"	m	class:RangeDescriptor	access:public
fEndWordSet	dictbe.h	/^  UnicodeSet                fEndWordSet;$/;"	m	class:ThaiBreakEngine	access:private
fEngines	brkeng.h	/^  UStack    *fEngines;$/;"	m	class:ICULanguageBreakFactory	access:private
fEqual	triedict.cpp	/^    BuildCompactTrieNode    *fEqual;$/;"	m	class:BuildCompactTrieVerticalNode	file:	access:public
fErrorCode	mutex.h	/^    UErrorCode fErrorCode;$/;"	m	struct:TriStateSingleton	access:public
fEscaped	rbbiscan.h	/^        UBool               fEscaped;$/;"	m	struct:RBBIRuleScanner::RBBIRuleChar	access:public
fFTable	rbbidata.h	/^    uint32_t         fFTable;         \/*  forward state transition table. *\/$/;"	m	struct:RBBIDataHeader	access:public
fFTableLen	rbbidata.h	/^    uint32_t         fFTableLen;$/;"	m	struct:RBBIDataHeader	access:public
fFakeField	rbbirb.h	/^    int32_t fFakeField;$/;"	m	class:RBBISymbolTable	access:public
fFields	unicode/unistr.h	/^    } fFields;$/;"	m	union:UnicodeString::StackBufferOrFields	typeref:struct:UnicodeString::StackBufferOrFields::__anon118	access:public
fFilteredNorm2	unicode/normlzr.h	/^  FilteredNormalizer2*fFilteredNorm2;  \/\/ owned if not NULL$/;"	m	class:Normalizer	access:private
fFirstPos	rbbinode.h	/^        int           fFirstPos;            \/\/ Position in the rule source string of the$/;"	m	class:RBBINode	access:public
fFirstPosSet	rbbinode.h	/^        UVector       *fFirstPosSet;$/;"	m	class:RBBINode	access:public
fFlags	rbbidata.h	/^    uint32_t         fFlags;        \/*  Option Flags for this state table                 *\/$/;"	m	struct:RBBIStateTable	access:public
fFlags	unicode/uniset.h	/^    uint8_t fFlags;         \/\/ Bit flag (see constants above)$/;"	m	class:UnicodeSet	access:private
fFlags	unicode/unistr.h	/^  uint8_t   fFlags;         \/\/ bit flags: see constants above$/;"	m	class:UnicodeString	access:private
fFollowPos	rbbinode.h	/^        UVector       *fFollowPos;$/;"	m	class:RBBINode	access:public
fFormatVersion	rbbidata.h	/^    uint8_t          fFormatVersion[4]; \/* Data Format.  Same as the value in struct UDataInfo      *\/$/;"	m	struct:RBBIDataHeader	access:public
fForwardTable	rbbidata.h	/^    const RBBIStateTable     *fForwardTable;$/;"	m	class:RBBIDataWrapper	access:public
fForwardTables	rbbirb.h	/^    RBBITableBuilder              *fForwardTables;   \/\/ State transition tables$/;"	m	class:RBBIRuleBuilder	access:public
fForwardTree	rbbirb.h	/^    RBBINode                      *fForwardTree;     \/\/ The parse trees, generated by the scanner,$/;"	m	class:RBBIRuleBuilder	access:public
fGroupCount	rbbisetb.h	/^    int32_t               fGroupCount;$/;"	m	class:RBBISetBuilder	access:private
fHandled	brkeng.h	/^  UnicodeSet    *fHandled[4];$/;"	m	class:UnhandledEngine	access:private
fHasDuplicate	triedict.cpp	/^    UBool           fHasDuplicate;$/;"	m	class:BuildCompactTrieNode	file:	access:public
fHasFallback	uresimp.h	/^    UBool fHasFallback;$/;"	m	struct:UResourceBundle	access:public
fHashTable	rbbirb.h	/^    UHashtable               *fHashTable;$/;"	m	class:RBBISymbolTable	access:private
fHaveInstance	mutex.h	/^    int8_t fHaveInstance;$/;"	m	struct:TriStateSingleton	access:public
fHeader	rbbidata.h	/^    const RBBIDataHeader     *fHeader;$/;"	m	class:RBBIDataWrapper	access:public
fHeader	triedict.cpp	/^    const CompactTrieHeader *fHeader;       \/\/ Trie data$/;"	m	class:CompactTrieEnumeration	file:	access:private
fIncludesSets	rbbisetb.h	/^    UVector           *fIncludesSets;   \/\/ vector of the the original$/;"	m	class:RangeDescriptor	access:public
fIndex	uresimp.h	/^    int32_t fIndex;$/;"	m	struct:UResourceBundle	access:public
fIndexStack	triedict.cpp	/^    UVector32               fIndexStack;    \/\/ Stack of where in node we are$/;"	m	class:CompactTrieEnumeration	file:	access:private
fInputSet	rbbinode.h	/^        UnicodeSet    *fInputSet;           \/\/ For uset nodes only.$/;"	m	class:RBBINode	access:public
fInstance	mutex.h	/^    void *fInstance;$/;"	m	struct:SimpleSingleton	access:public
fInstance	mutex.h	/^    void *fInstance;$/;"	m	struct:TriStateSingleton	access:public
fIsBogus	unicode/locid.h	/^    UBool fIsBogus;$/;"	m	class:Locale	access:private
fIsTopLevel	uresimp.h	/^    UBool fIsTopLevel;$/;"	m	struct:UResourceBundle	access:public
fIter	triedict.h	/^  UText    *fIter;$/;"	m	class:MutableTrieDictionary	access:private
fKey	uresimp.h	/^    const char *fKey; \/*tag*\/$/;"	m	struct:UResourceBundle	access:public
fLBCMNoChain	rbbirb.h	/^    UBool                         fLBCMNoChain;      \/\/ True:  suppress chaining of rules on$/;"	m	class:RBBIRuleBuilder	access:public
fLanguageBreakEngines	unicode/rbbi.h	/^    UStack              *fLanguageBreakEngines;$/;"	m	class:RuleBasedBreakIterator	access:protected
fLastChar	rbbiscan.h	/^    UChar32                       fLastChar;         \/\/ Previous char, needed to count CR-LF$/;"	m	class:RBBIRuleScanner	access:private
fLastPos	rbbinode.h	/^        int           fLastPos;             \/\/  Last position in the rule source string$/;"	m	class:RBBINode	access:public
fLastPosSet	rbbinode.h	/^        UVector       *fLastPosSet;         \/\/ TODO: rename fFirstPos & fLastPos to avoid confusion.$/;"	m	class:RBBINode	access:public
fLastRuleStatusIndex	unicode/rbbi.h	/^    int32_t             fLastRuleStatusIndex;$/;"	m	class:RuleBasedBreakIterator	access:protected
fLastStatusIndexValid	unicode/rbbi.h	/^    UBool               fLastStatusIndexValid;$/;"	m	class:RuleBasedBreakIterator	access:protected
fLeftChild	rbbinode.h	/^        RBBINode      *fLeftChild;$/;"	m	class:RBBINode	access:public
fLength	rbbidata.h	/^    uint32_t         fLength;          \/*  Total length in bytes of this RBBI Data,                *\/$/;"	m	struct:RBBIDataHeader	access:public
fLength	unicode/unistr.h	/^      int32_t   fLength;    \/\/ number of characters in fArray if >127; else undefined$/;"	m	struct:UnicodeString::StackBufferOrFields::__anon118	access:public
fLineNum	rbbiscan.h	/^    int32_t                       fLineNum;          \/\/ Line number in input file.$/;"	m	class:RBBIRuleScanner	access:private
fLinks	triedict.cpp	/^    UStack          fLinks;$/;"	m	class:BuildCompactTrieHorizontalNode	file:	access:public
fLocale	unicode/resbund.h	/^    Locale *fLocale;$/;"	m	class:ResourceBundle	access:private
fLookAhead	rbbidata.h	/^    int16_t          fLookAhead;    \/*  Non-zero if this row is for a state that          *\/$/;"	m	struct:RBBIStateTableRow	access:public
fLookAhead	rbbitblb.h	/^    int32_t          fLookAhead;$/;"	m	class:RBBIStateDescriptor	access:public
fLookAheadEnd	rbbinode.h	/^        UBool         fLookAheadEnd;        \/\/ For endMark nodes, set TRUE if$/;"	m	class:RBBINode	access:public
fLookAheadHardBreak	rbbirb.h	/^    UBool                         fLookAheadHardBreak;  \/\/ True:  Look ahead matches cause an$/;"	m	class:RBBIRuleBuilder	access:public
fLookAheadRule	rbbiscan.h	/^    UBool                          fLookAheadRule;   \/\/ True if the rule includes a '\/'$/;"	m	class:RBBIRuleScanner	access:private
fMagic	rbbidata.h	/^    uint32_t         fMagic;           \/*  == 0xbla0                                               *\/$/;"	m	struct:RBBIDataHeader	access:public
fMagic1	uresimp.h	/^    uint32_t fMagic1;   \/* For determining if it's a stack object *\/$/;"	m	struct:UResourceBundle	access:public
fMagic2	uresimp.h	/^    uint32_t fMagic2;   \/* For determining if it's a stack object *\/$/;"	m	struct:UResourceBundle	access:public
fMarkSet	dictbe.h	/^  UnicodeSet                fMarkSet;$/;"	m	class:ThaiBreakEngine	access:private
fMarked	rbbitblb.h	/^    UBool            fMarked;$/;"	m	class:RBBIStateDescriptor	access:public
fMutex	mutex.h	/^  UMTX   *fMutex;$/;"	m	class:Mutex	access:private
fMutex	serv.cpp	/^    UMTX  *fMutex;$/;"	m	class:XMutex	file:	access:private
fName	uresimp.h	/^    char *fName; \/* name of the locale for bundle - still to decide whether it is original or fallback *\/$/;"	m	struct:UResourceDataEntry	access:public
fNameBuffer	uresimp.h	/^    char fNameBuffer[3]; \/* A small buffer of free space for fName. The free space is due to struct padding. *\/$/;"	m	struct:UResourceDataEntry	access:public
fNext	rbbisetb.h	/^    RangeDescriptor   *fNext;           \/\/ Next RangeDescriptor in the linked list.$/;"	m	class:RangeDescriptor	access:public
fNextChar	rbbirpt.h	/^    UBool                         fNextChar;$/;"	m	struct:RBBIRuleTableEl	access:public
fNextIndex	rbbiscan.h	/^    int32_t                       fNextIndex;        \/\/ Index of the next character, which$/;"	m	class:RBBIRuleScanner	access:private
fNextState	rbbidata.h	/^    uint16_t         fNextState[2]; \/*  Next State, indexed by char category.             *\/$/;"	m	struct:RBBIStateTableRow	access:public
fNextState	rbbirpt.h	/^    uint8_t                       fNextState;       \/\/ 0-250:    normal next-stat numbers$/;"	m	struct:RBBIRuleTableEl	access:public
fNodeID	triedict.cpp	/^    int32_t         fNodeID;$/;"	m	class:BuildCompactTrieNode	file:	access:public
fNodeStack	rbbiscan.h	/^    RBBINode                      *fNodeStack[kStackSize]; \/\/ Node stack, holds nodes created$/;"	m	class:RBBIRuleScanner	access:private
fNodeStack	triedict.cpp	/^    UStack      fNodeStack;     \/\/ Stack of nodes to process$/;"	m	class:MutableTrieEnumeration	file:	access:private
fNodeStack	triedict.cpp	/^    UVector32               fNodeStack;     \/\/ Stack of nodes to process$/;"	m	class:CompactTrieEnumeration	file:	access:private
fNodeStackPtr	rbbiscan.h	/^    int32_t                        fNodeStackPtr;$/;"	m	class:RBBIRuleScanner	access:private
fNorm2	unicode/normlzr.h	/^  const Normalizer2  *fNorm2;  \/\/ not owned; may be equal to fFilteredNorm2$/;"	m	class:Normalizer	access:private
fNullable	rbbinode.h	/^        UBool         fNullable;            \/\/ See Aho.$/;"	m	class:RBBINode	access:public
fNum	rbbisetb.h	/^    int32_t            fNum;            \/\/ runtime-mapped input value for this range.$/;"	m	class:RangeDescriptor	access:public
fNumCachedBreakPositions	unicode/rbbi.h	/^    int32_t             fNumCachedBreakPositions;$/;"	m	class:RuleBasedBreakIterator	access:protected
fNumStates	rbbidata.h	/^    uint32_t         fNumStates;    \/*  Number of states.                                 *\/$/;"	m	struct:RBBIStateTable	access:public
fOptionStart	rbbiscan.h	/^    int32_t                        fOptionStart;     \/\/ Input index of start of a !!option$/;"	m	class:RBBIRuleScanner	access:private
fOptions	unicode/normlzr.h	/^  int32_t             fOptions;$/;"	m	class:Normalizer	access:private
fOwnData	triedict.h	/^  UBool                     fOwnData;$/;"	m	class:CompactTrieDictionary	access:private
fPadding	unicode/unistr.h	/^      uint16_t  fPadding;   \/\/ align the following field at 8B (32b pointers) or 12B (64b)$/;"	m	struct:UnicodeString::StackBufferOrFields::__anon118	access:public
fParent	rbbinode.h	/^        RBBINode      *fParent;$/;"	m	class:RBBINode	access:public
fParent	uresimp.h	/^    UResourceDataEntry *fParent; \/*next resource in fallback chain*\/$/;"	m	struct:UResourceDataEntry	access:public
fParentEndsWord	triedict.cpp	/^    UBool           fParentEndsWord;$/;"	m	class:BuildCompactTrieNode	file:	access:public
fParseError	rbbirb.h	/^    UParseError                   *fParseError;      \/\/   here avoids passing it everywhere.$/;"	m	class:RBBIRuleBuilder	access:public
fPath	uresimp.h	/^    char *fPath; \/* path to bundle - used for distinguishing between resources with the same name *\/$/;"	m	struct:UResourceDataEntry	access:public
fPattern	uniset_props.cpp	/^    const char *fPattern;$/;"	m	class:UnicodeSetSingleton	file:	access:private
fPool	uresimp.h	/^    UResourceDataEntry *fPool;$/;"	m	struct:UResourceDataEntry	access:public
fPositionInCache	unicode/rbbi.h	/^    int32_t             fPositionInCache;$/;"	m	class:RuleBasedBreakIterator	access:protected
fPositions	rbbitblb.h	/^    UVector          *fPositions;          \/\/ Set of parse tree positions associated$/;"	m	class:RBBIStateDescriptor	access:public
fPrecedence	rbbinode.h	/^        OpPrecedence  fPrecedence;          \/\/ For binary ops only.$/;"	m	class:RBBINode	access:public
fPushState	rbbirpt.h	/^    uint8_t                       fPushState;$/;"	m	struct:RBBIRuleTableEl	access:public
fQuoteMode	rbbiscan.h	/^    UBool                         fQuoteMode;        \/\/ Scan is in a 'quoted region'$/;"	m	class:RBBIRuleScanner	access:private
fRB	rbbiscan.h	/^    RBBIRuleBuilder               *fRB;              \/\/ The rule builder that we are part of.$/;"	m	class:RBBIRuleScanner	access:private
fRB	rbbisetb.h	/^    RBBIRuleBuilder       *fRB;             \/\/ The RBBI Rule Compiler that owns us.$/;"	m	class:RBBISetBuilder	access:private
fRB	rbbitblb.h	/^    RBBIRuleBuilder  *fRB;$/;"	m	class:RBBITableBuilder	access:private
fRTable	rbbidata.h	/^    uint32_t         fRTable;         \/*  Offset to the reverse state transition table. *\/$/;"	m	struct:RBBIDataHeader	access:public
fRTableLen	rbbidata.h	/^    uint32_t         fRTableLen;$/;"	m	struct:RBBIDataHeader	access:public
fRangeList	rbbisetb.h	/^    RangeDescriptor       *fRangeList;      \/\/ Head of the linked list of RangeDescriptors$/;"	m	class:RBBISetBuilder	access:private
fRefCount	rbbidata.h	/^    int32_t             fRefCount;$/;"	m	class:RBBIDataWrapper	access:private
fRes	uresimp.h	/^    Resource fRes;$/;"	m	struct:UResourceBundle	access:public
fResBuf	uresimp.h	/^    char fResBuf[RES_BUFSIZE];$/;"	m	struct:UResourceBundle	access:public
fResData	uresimp.h	/^    ResourceData fResData;$/;"	m	struct:UResourceBundle	access:public
fResPath	uresimp.h	/^    char *fResPath; \/* full path to the resource: "zh_TW\/CollationElements\/Sequence" *\/$/;"	m	struct:UResourceBundle	access:public
fResPathLen	uresimp.h	/^    int32_t fResPathLen;$/;"	m	struct:UResourceBundle	access:public
fReserved	rbbidata.h	/^    int16_t          fReserved;$/;"	m	struct:RBBIStateTableRow	access:public
fReserved	rbbidata.h	/^    uint32_t         fReserved;     \/*  reserved                                          *\/$/;"	m	struct:RBBIStateTable	access:public
fReserved	rbbidata.h	/^    uint32_t         fReserved[6];    \/*  Reserved for expansion *\/$/;"	m	struct:RBBIDataHeader	access:public
fResource	unicode/resbund.h	/^    UResourceBundle *fResource;$/;"	m	class:ResourceBundle	access:private
fReverseRule	rbbiscan.h	/^    UBool                          fReverseRule;     \/\/ True if the rule currently being scanned$/;"	m	class:RBBIRuleScanner	access:private
fReverseTable	rbbidata.h	/^    const RBBIStateTable     *fReverseTable;$/;"	m	class:RBBIDataWrapper	access:public
fReverseTables	rbbirb.h	/^    RBBITableBuilder              *fReverseTables;$/;"	m	class:RBBIRuleBuilder	access:public
fReverseTree	rbbirb.h	/^    RBBINode                      *fReverseTree;     \/\/   then manipulated by subsequent steps.$/;"	m	class:RBBIRuleBuilder	access:public
fRightChild	rbbinode.h	/^        RBBINode      *fRightChild;$/;"	m	class:RBBINode	access:public
fRoot	triedict.cpp	/^    TernaryNode *fRoot;         \/\/ Root node$/;"	m	class:MutableTrieEnumeration	file:	access:private
fRowLen	rbbidata.h	/^    uint32_t         fRowLen;       \/*  Length of a state table row, in bytes.            *\/$/;"	m	struct:RBBIStateTable	access:public
fRuleNum	rbbiscan.h	/^    int32_t                        fRuleNum;         \/\/ Counts each rule as it is scanned.$/;"	m	class:RBBIRuleScanner	access:private
fRuleScanner	rbbirb.h	/^    RBBIRuleScanner          *fRuleScanner;$/;"	m	class:RBBISymbolTable	access:private
fRuleSets	rbbiscan.h	/^    UnicodeSet                     fRuleSets[10];    \/\/ Unicode Sets that are needed during$/;"	m	class:RBBIRuleScanner	access:private
fRuleSource	rbbidata.h	/^    const UChar              *fRuleSource;$/;"	m	class:RBBIDataWrapper	access:public
fRuleSource	rbbidata.h	/^    uint32_t         fRuleSource;     \/*  Offset to the source for for the break *\/$/;"	m	struct:RBBIDataHeader	access:public
fRuleSourceLen	rbbidata.h	/^    uint32_t         fRuleSourceLen;  \/*    rules.  Stored UChar *. *\/$/;"	m	struct:RBBIDataHeader	access:public
fRuleStatusTable	rbbidata.h	/^    const int32_t            *fRuleStatusTable; $/;"	m	class:RBBIDataWrapper	access:public
fRuleStatusVals	rbbirb.h	/^    UVector                       *fRuleStatusVals;  \/\/ The values that can be returned$/;"	m	class:RBBIRuleBuilder	access:public
fRuleString	rbbidata.h	/^    UnicodeString       fRuleString;$/;"	m	class:RBBIDataWrapper	access:private
fRules	rbbirb.h	/^    const UnicodeString           &fRules;           \/\/ The rule string that we are compiling$/;"	m	class:RBBIRuleBuilder	access:public
fRules	rbbirb.h	/^    const UnicodeString      &fRules;$/;"	m	class:RBBISymbolTable	access:private
fSCharIter	unicode/rbbi.h	/^    StringCharacterIterator *fSCharIter;$/;"	m	class:RuleBasedBreakIterator	access:protected
fSFTable	rbbidata.h	/^    uint32_t         fSFTable;        \/*  safe point forward transition table *\/$/;"	m	struct:RBBIDataHeader	access:public
fSFTableLen	rbbidata.h	/^    uint32_t         fSFTableLen;$/;"	m	struct:RBBIDataHeader	access:public
fSRTable	rbbidata.h	/^    uint32_t         fSRTable;        \/*  safe point reverse transition table *\/$/;"	m	struct:RBBIDataHeader	access:public
fSRTableLen	rbbidata.h	/^    uint32_t         fSRTableLen;$/;"	m	struct:RBBIDataHeader	access:public
fSafeFwdTable	rbbidata.h	/^    const RBBIStateTable     *fSafeFwdTable;$/;"	m	class:RBBIDataWrapper	access:public
fSafeFwdTables	rbbirb.h	/^    RBBITableBuilder              *fSafeFwdTables;$/;"	m	class:RBBIRuleBuilder	access:public
fSafeFwdTree	rbbirb.h	/^    RBBINode                      *fSafeFwdTree;$/;"	m	class:RBBIRuleBuilder	access:public
fSafeRevTable	rbbidata.h	/^    const RBBIStateTable     *fSafeRevTable;$/;"	m	class:RBBIDataWrapper	access:public
fSafeRevTables	rbbirb.h	/^    RBBITableBuilder              *fSafeRevTables;$/;"	m	class:RBBIRuleBuilder	access:public
fSafeRevTree	rbbirb.h	/^    RBBINode                      *fSafeRevTree;$/;"	m	class:RBBIRuleBuilder	access:public
fSawBOF	rbbisetb.h	/^    UBool                 fSawBOF;$/;"	m	class:RBBISetBuilder	access:private
fScanIndex	rbbiscan.h	/^    int32_t                       fScanIndex;        \/\/ Index of current character being processed$/;"	m	class:RBBIRuleScanner	access:private
fScanner	rbbirb.h	/^    RBBIRuleScanner               *fScanner;         \/\/ The scanner.$/;"	m	class:RBBIRuleBuilder	access:public
fSerialNum	rbbinode.h	/^        int           fSerialNum;           \/\/  Debugging aids.$/;"	m	class:RBBINode	access:private
fSet	dictbe.h	/^  UnicodeSet    fSet;$/;"	m	class:DictionaryBreakEngine	access:private
fSetBuilder	rbbirb.h	/^    RBBISetBuilder                *fSetBuilder;      \/\/ Set and Character Category builder.$/;"	m	class:RBBIRuleBuilder	access:public
fSetTable	rbbiscan.h	/^    UHashtable                    *fSetTable;        \/\/ UnicocodeSet hash table, holds indexes to$/;"	m	class:RBBIRuleScanner	access:private
fShortLength	unicode/unistr.h	/^  int8_t    fShortLength;   \/\/ 0..127: length  <0: real length is in fUnion.fFields.fLength$/;"	m	class:UnicodeString	access:private
fSize	uresimp.h	/^    int32_t fSize;$/;"	m	struct:UResourceBundle	access:public
fStack	rbbiscan.h	/^    uint16_t                      fStack[kStackSize];  \/\/ State stack, holds state pushes$/;"	m	class:RBBIRuleScanner	access:private
fStackBuffer	unicode/unistr.h	/^    UChar     fStackBuffer [US_STACKBUF_SIZE]; \/\/ buffer for small strings$/;"	m	union:UnicodeString::StackBufferOrFields	access:public
fStackPtr	rbbiscan.h	/^    int32_t                       fStackPtr;           \/\/  and pops as specified in the state$/;"	m	class:RBBIRuleScanner	access:private
fStartChar	rbbisetb.h	/^    UChar32            fStartChar;      \/\/ Start of range, unicode 32 bit value.$/;"	m	class:RangeDescriptor	access:public
fStateTable	rbbiscan.h	/^    RBBIRuleTableEl               **fStateTable;     \/\/ State Transition Table for RBBI Rule$/;"	m	class:RBBIRuleScanner	access:private
fStatus	rbbirb.h	/^    UErrorCode                    *fStatus;          \/\/ Error reporting.  Keeping status$/;"	m	class:RBBIRuleBuilder	access:public
fStatus	rbbisetb.h	/^    UErrorCode            *fStatus;$/;"	m	class:RBBISetBuilder	access:private
fStatus	rbbitblb.h	/^    UErrorCode       *fStatus;$/;"	m	class:RBBITableBuilder	access:private
fStatusMaxIdx	rbbidata.h	/^    int32_t             fStatusMaxIdx;$/;"	m	class:RBBIDataWrapper	access:public
fStatusTable	rbbidata.h	/^    uint32_t         fStatusTable;    \/* Offset to the table of rule status values *\/$/;"	m	struct:RBBIDataHeader	access:public
fStatusTableLen	rbbidata.h	/^    uint32_t         fStatusTableLen;$/;"	m	struct:RBBIDataHeader	access:public
fSuffixSet	dictbe.h	/^  UnicodeSet                fSuffixSet;$/;"	m	class:ThaiBreakEngine	access:private
fSymbolTable	rbbiscan.h	/^    RBBISymbolTable               *fSymbolTable;     \/\/ symbol table, holds definitions of$/;"	m	class:RBBIRuleScanner	access:private
fTableData	rbbidata.h	/^    char             fTableData[4]; \/*  First RBBIStateTableRow begins here.              *\/$/;"	m	struct:RBBIStateTable	access:public
fTagIdx	rbbidata.h	/^    int16_t          fTagIdx;       \/*  Non-zero if this row covers a {tagged} position   *\/$/;"	m	struct:RBBIStateTableRow	access:public
fTagVals	rbbitblb.h	/^    UVector          *fTagVals;$/;"	m	class:RBBIStateDescriptor	access:public
fTagsIdx	rbbitblb.h	/^    int32_t          fTagsIdx;$/;"	m	class:RBBIStateDescriptor	access:public
fText	rbbinode.h	/^        UnicodeString fText;                \/\/ Text corresponding to this node.$/;"	m	class:RBBINode	access:public
fText	unicode/rbbi.h	/^    UText  *fText;$/;"	m	class:RuleBasedBreakIterator	access:protected
fThaiWordSet	dictbe.h	/^  UnicodeSet                fThaiWordSet;$/;"	m	class:ThaiBreakEngine	access:private
fTopLevelData	uresimp.h	/^    UResourceDataEntry *fTopLevelData; \/* for getting the valid locale *\/$/;"	m	struct:UResourceBundle	access:public
fTrace	rbbi.cpp	/^static UBool fTrace = FALSE;$/;"	v	file:
fTree	rbbitblb.h	/^    RBBINode         *&fTree;              \/\/ The root node of the parse tree to build a$/;"	m	class:RBBITableBuilder	access:private
fTrie	rbbidata.h	/^    UTrie               fTrie;$/;"	m	class:RBBIDataWrapper	access:public
fTrie	rbbidata.h	/^    uint32_t         fTrie;           \/*  Offset to Trie data for character categories *\/$/;"	m	struct:RBBIDataHeader	access:public
fTrie	rbbisetb.h	/^    UNewTrie              *fTrie;           \/\/ The mapping TRIE that is the end result of processing$/;"	m	class:RBBISetBuilder	access:private
fTrie	triedict.h	/^  TernaryNode               *fTrie;$/;"	m	class:MutableTrieDictionary	access:private
fTrieLen	rbbidata.h	/^    uint32_t         fTrieLen;$/;"	m	struct:RBBIDataHeader	access:public
fTrieSize	rbbisetb.h	/^    uint32_t              fTrieSize;        \/\/  the Unicode Sets.$/;"	m	class:RBBISetBuilder	access:private
fType	rbbinode.h	/^        NodeType      fType;$/;"	m	class:RBBINode	access:public
fTypes	dictbe.h	/^  uint32_t      fTypes;$/;"	m	class:DictionaryBreakEngine	access:private
fUData	triedict.h	/^    UDataMemory              *fUData;$/;"	m	class:CompactTrieDictionary	access:private
fUDataMem	rbbidata.h	/^    UDataMemory        *fUDataMem;$/;"	m	class:RBBIDataWrapper	access:private
fUMode	unicode/normlzr.h	/^  UNormalizationMode  fUMode;$/;"	m	class:Normalizer	access:private
fUSetNodes	rbbirb.h	/^    UVector                       *fUSetNodes;       \/\/ Vector of all uset nodes.$/;"	m	class:RBBIRuleBuilder	access:public
fUnhandledBreakEngine	unicode/rbbi.h	/^    UnhandledEngine     *fUnhandledBreakEngine;$/;"	m	class:RuleBasedBreakIterator	access:protected
fUnion	unicode/unistr.h	/^  } fUnion;$/;"	m	class:UnicodeString	typeref:union:UnicodeString::StackBufferOrFields	access:private
fVal	rbbinode.h	/^        int32_t       fVal;                 \/\/ For leafChar nodes, the value.$/;"	m	class:RBBINode	access:public
fVarName	rbbiscan.h	/^    UnicodeString                 fVarName;          \/\/ $variableName, valid when we've just$/;"	m	class:RBBIRuleScanner	access:private
fVersion	uresimp.h	/^    char *fVersion;$/;"	m	struct:UResourceBundle	access:public
fVertical	triedict.cpp	/^    UBool           fVertical;$/;"	m	class:BuildCompactTrieNode	file:	access:public
fakeClockMutex	putil.c	/^static UMTX fakeClockMutex = NULL;$/;"	v	file:
fakeClock_dt	putil.c	/^UDate fakeClock_dt = 0; \/** Offset (fake time - real time) **\/$/;"	v
fakeClock_set	putil.c	/^UBool fakeClock_set = FALSE; \/** True if fake clock has spun up **\/$/;"	v
fakeClock_t0	putil.c	/^UDate fakeClock_t0 = 0; \/** Time to start the clock from **\/$/;"	v
fallback	serv.cpp	/^ICUServiceKey::fallback() $/;"	f	class:ICUServiceKey	signature:()
fallback	serv.h	/^  virtual UBool fallback();$/;"	p	class:ICUServiceKey	access:public	signature:()
fallback	servlk.cpp	/^LocaleKey::fallback() {$/;"	f	class:LocaleKey	signature:()
fallback	servloc.h	/^    virtual UBool fallback();$/;"	p	class:LocaleKey	access:public	signature:()
fastCopyFrom	unicode/unistr.h	/^  UnicodeString &fastCopyFrom(const UnicodeString &src);$/;"	p	class:UnicodeString	access:public	signature:(const UnicodeString &src)
fastCopyFrom	unistr.cpp	/^UnicodeString::fastCopyFrom(const UnicodeString &src) {$/;"	f	class:UnicodeString	signature:(const UnicodeString &src)
fcc	normalizer2.cpp	/^    ComposeNormalizer2 fcc;$/;"	m	struct:Norm2AllModes	file:	access:public
fcd	normalizer2.cpp	/^    FCDNormalizer2 fcd;$/;"	m	struct:Norm2AllModes	file:	access:public
fcdTrie	normalizer2impl.h	/^    const UTrie2 *fcdTrie() const { return (const UTrie2 *)fcdTrieSingleton.fInstance; }$/;"	f	class:Normalizer2Impl	access:private	signature:() const
fcdTrieSingleton	normalizer2impl.h	/^    SimpleSingleton fcdTrieSingleton;$/;"	m	class:Normalizer2Impl	access:private
ffffString	rbbirb.h	/^    const UnicodeString      ffffString;      \/\/ = "\/uffff"$/;"	m	class:RBBISymbolTable	access:private
fgClassID	locid.cpp	/^    static const char fgClassID;\/* Warning this is used beyond the typical RTTI usage. *\/$/;"	m	class:KeywordEnumeration	file:	access:private
fgClassID	locid.cpp	/^const char KeywordEnumeration::fgClassID = '\\0';$/;"	m	class:KeywordEnumeration	file:
field	unicode/umisc.h	/^  int32_t field;$/;"	m	struct:UFieldPosition	access:public
fileTime	putil.c	/^    FILETIME fileTime;$/;"	m	union:__anon41	file:	access:public
fillBlock	utrie2_builder.c	/^fillBlock(uint32_t *block, UChar32 start, UChar32 limit,$/;"	f	file:	signature:(uint32_t *block, UChar32 start, UChar32 limit, uint32_t value, uint32_t initialValue, UBool overwrite)
find	hash.h	/^    const UHashElement* find(const UnicodeString& key) const;$/;"	p	class:Hashtable	access:public	signature:(const UnicodeString& key) const
find	hash.h	/^inline const UHashElement* Hashtable::find(const UnicodeString& key) const {$/;"	f	class:Hashtable	signature:(const UnicodeString& key) const
findAlgName	unames.c	/^findAlgName(AlgorithmicRange *range, UCharNameChoice nameChoice, const char *otherName) {$/;"	f	file:	signature:(AlgorithmicRange *range, UCharNameChoice nameChoice, const char *otherName)
findAndReplace	unicode/unistr.h	/^  UnicodeString& findAndReplace(int32_t start,$/;"	p	class:UnicodeString	access:public	signature:(int32_t start, int32_t length, const UnicodeString& oldText, int32_t oldStart, int32_t oldLength, const UnicodeString& newText, int32_t newStart, int32_t newLength)
findAndReplace	unicode/unistr.h	/^  inline UnicodeString& findAndReplace(const UnicodeString& oldText,$/;"	p	class:UnicodeString	access:public	signature:(const UnicodeString& oldText, const UnicodeString& newText)
findAndReplace	unicode/unistr.h	/^  inline UnicodeString& findAndReplace(int32_t start,$/;"	p	class:UnicodeString	access:public	signature:(int32_t start, int32_t length, const UnicodeString& oldText, const UnicodeString& newText)
findAndReplace	unicode/unistr.h	/^UnicodeString::findAndReplace(const UnicodeString& oldText,$/;"	f	class:UnicodeString	signature:(const UnicodeString& oldText, const UnicodeString& newText)
findAndReplace	unicode/unistr.h	/^UnicodeString::findAndReplace(int32_t start,$/;"	f	class:UnicodeString	signature:(int32_t start, int32_t _length, const UnicodeString& oldText, const UnicodeString& newText)
findAndReplace	unistr.cpp	/^UnicodeString::findAndReplace(int32_t start,$/;"	f	class:UnicodeString	signature:(int32_t start, int32_t length, const UnicodeString& oldText, int32_t oldStart, int32_t oldLength, const UnicodeString& newText, int32_t newStart, int32_t newLength)
findBasename	udata.cpp	/^findBasename(const char *path) {$/;"	f	file:	signature:(const char *path)
findBreaks	brkeng.cpp	/^UnhandledEngine::findBreaks( UText *text,$/;"	f	class:UnhandledEngine	signature:( UText *text, int32_t startPos, int32_t endPos, UBool reverse, int32_t breakType, UStack & ) const
findBreaks	brkeng.h	/^  virtual int32_t findBreaks( UText *text,$/;"	p	class:LanguageBreakEngine	access:public	signature:( UText *text, int32_t startPos, int32_t endPos, UBool reverse, int32_t breakType, UStack &foundBreaks ) const
findBreaks	brkeng.h	/^  virtual int32_t findBreaks( UText *text,$/;"	p	class:UnhandledEngine	access:public	signature:( UText *text, int32_t startPos, int32_t endPos, UBool reverse, int32_t breakType, UStack &foundBreaks ) const
findBreaks	dictbe.cpp	/^DictionaryBreakEngine::findBreaks( UText *text,$/;"	f	class:DictionaryBreakEngine	signature:( UText *text, int32_t startPos, int32_t endPos, UBool reverse, int32_t breakType, UStack &foundBreaks ) const
findBreaks	dictbe.h	/^  virtual int32_t findBreaks( UText *text,$/;"	p	class:DictionaryBreakEngine	access:public	signature:( UText *text, int32_t startPos, int32_t endPos, UBool reverse, int32_t breakType, UStack &foundBreaks ) const
findCodePoint	bmpset.cpp	/^int32_t BMPSet::findCodePoint(UChar32 c, int32_t lo, int32_t hi) const {$/;"	f	class:BMPSet	signature:(UChar32 c, int32_t lo, int32_t hi) const
findCodePoint	bmpset.h	/^    int32_t findCodePoint(UChar32 c, int32_t lo, int32_t hi) const;$/;"	p	class:BMPSet	access:private	signature:(UChar32 c, int32_t lo, int32_t hi) const
findCodePoint	unicode/uniset.h	/^    int32_t findCodePoint(UChar32 c) const;$/;"	p	class:UnicodeSet	access:private	signature:(UChar32 c) const
findCodePoint	uniset.cpp	/^int32_t UnicodeSet::findCodePoint(UChar32 c) const {$/;"	f	class:UnicodeSet	signature:(UChar32 c) const
findConverter	ucnv_io.c	/^findConverter(const char *alias, UBool *containsOption, UErrorCode *pErrorCode) {$/;"	f	file:	signature:(const char *alias, UBool *containsOption, UErrorCode *pErrorCode)
findFirstExisting	uresbund.c	/^static UResourceDataEntry *findFirstExisting(const char* path, char* name, UBool *isRoot, UBool *hasChopped, UBool *isDefault, UErrorCode* status) {$/;"	f	file:	signature:(const char* path, char* name, UBool *isRoot, UBool *hasChopped, UBool *isDefault, UErrorCode* status)
findHighStart	utrie2_builder.c	/^findHighStart(UNewTrie2 *trie, uint32_t highValue) {$/;"	f	file:	signature:(UNewTrie2 *trie, uint32_t highValue)
findLikelySubtags	loclikely.cpp	/^findLikelySubtags(const char* localeID,$/;"	f	file:	signature:(const char* localeID, char* buffer, int32_t bufferLength, UErrorCode* err)
findNextCompBoundary	normalizer2impl.cpp	/^const UChar *Normalizer2Impl::findNextCompBoundary(const UChar *p, const UChar *limit) const {$/;"	f	class:Normalizer2Impl	signature:(const UChar *p, const UChar *limit) const
findNextCompBoundary	normalizer2impl.h	/^    const UChar *findNextCompBoundary(const UChar *p, const UChar *limit) const;$/;"	p	class:Normalizer2Impl	access:private	signature:(const UChar *p, const UChar *limit) const
findNextFCDBoundary	normalizer2impl.cpp	/^const UChar *Normalizer2Impl::findNextFCDBoundary(const UChar *p, const UChar *limit) const {$/;"	f	class:Normalizer2Impl	signature:(const UChar *p, const UChar *limit) const
findNextFCDBoundary	normalizer2impl.h	/^    const UChar *findNextFCDBoundary(const UChar *p, const UChar *limit) const;$/;"	p	class:Normalizer2Impl	access:private	signature:(const UChar *p, const UChar *limit) const
findNodes	rbbinode.cpp	/^void   RBBINode::findNodes(UVector *dest, RBBINode::NodeType kind, UErrorCode &status) {$/;"	f	class:RBBINode	signature:(UVector *dest, RBBINode::NodeType kind, UErrorCode &status)
findNodes	rbbinode.h	/^        void         findNodes(UVector *dest, RBBINode::NodeType kind, UErrorCode &status);$/;"	p	class:RBBINode	access:public	signature:(UVector *dest, RBBINode::NodeType kind, UErrorCode &status)
findPreviousCompBoundary	normalizer2impl.cpp	/^const UChar *Normalizer2Impl::findPreviousCompBoundary(const UChar *start, const UChar *p) const {$/;"	f	class:Normalizer2Impl	signature:(const UChar *start, const UChar *p) const
findPreviousCompBoundary	normalizer2impl.h	/^    const UChar *findPreviousCompBoundary(const UChar *start, const UChar *p) const;$/;"	p	class:Normalizer2Impl	access:private	signature:(const UChar *start, const UChar *p) const
findPreviousFCDBoundary	normalizer2impl.cpp	/^const UChar *Normalizer2Impl::findPreviousFCDBoundary(const UChar *start, const UChar *p) const {$/;"	f	class:Normalizer2Impl	signature:(const UChar *start, const UChar *p) const
findPreviousFCDBoundary	normalizer2impl.h	/^    const UChar *findPreviousFCDBoundary(const UChar *start, const UChar *p) const;$/;"	p	class:Normalizer2Impl	access:private	signature:(const UChar *start, const UChar *p) const
findSameDataBlock	utrie2_builder.c	/^findSameDataBlock(const uint32_t *data, int32_t dataLength, int32_t otherBlock, int32_t blockLength) {$/;"	f	file:	signature:(const uint32_t *data, int32_t dataLength, int32_t otherBlock, int32_t blockLength)
findSameIndex2Block	utrie2_builder.c	/^findSameIndex2Block(const int32_t *idx, int32_t index2Length, int32_t otherBlock) {$/;"	f	file:	signature:(const int32_t *idx, int32_t index2Length, int32_t otherBlock)
findSetFor	rbbiscan.cpp	/^void RBBIRuleScanner::findSetFor(const UnicodeString &s, RBBINode *node, UnicodeSet *setToAdopt) {$/;"	f	class:RBBIRuleScanner	signature:(const UnicodeString &s, RBBINode *node, UnicodeSet *setToAdopt)
findSetFor	rbbiscan.h	/^    void        findSetFor(const UnicodeString &s, RBBINode *node, UnicodeSet *setToAdopt = NULL);$/;"	p	class:RBBIRuleScanner	access:private	signature:(const UnicodeString &s, RBBINode *node, UnicodeSet *setToAdopt = NULL)
findTaggedAliasListsOffset	ucnv_io.c	/^findTaggedAliasListsOffset(const char *alias, const char *standard, UErrorCode *pErrorCode) {$/;"	f	file:	signature:(const char *alias, const char *standard, UErrorCode *pErrorCode)
findTaggedConverterNum	ucnv_io.c	/^findTaggedConverterNum(const char *alias, const char *standard, UErrorCode *pErrorCode) {$/;"	f	file:	signature:(const char *alias, const char *standard, UErrorCode *pErrorCode)
first	normlzr.cpp	/^UChar32 Normalizer::first() {$/;"	f	class:Normalizer	signature:()
first	rbbi.cpp	/^int32_t RuleBasedBreakIterator::first(void) {$/;"	f	class:RuleBasedBreakIterator	signature:(void)
first	uchriter.cpp	/^UCharCharacterIterator::first() {$/;"	f	class:UCharCharacterIterator	signature:()
first	unicode/brkiter.h	/^    virtual int32_t first(void) = 0;$/;"	p	class:BreakIterator	access:public	signature:(void)
first	unicode/chariter.h	/^    virtual UChar         first(void) = 0;$/;"	p	class:CharacterIterator	access:public	signature:(void)
first	unicode/normlzr.h	/^  UChar32              first(void);$/;"	p	class:Normalizer	access:public	signature:(void)
first	unicode/rbbi.h	/^    virtual int32_t first(void);$/;"	p	class:RuleBasedBreakIterator	access:public	signature:(void)
first	unicode/uchriter.h	/^  virtual UChar         first(void);$/;"	p	class:UCharCharacterIterator	access:public	signature:(void)
first32	uchriter.cpp	/^UCharCharacterIterator::first32() {$/;"	f	class:UCharCharacterIterator	signature:()
first32	unicode/chariter.h	/^    virtual UChar32       first32(void) = 0;$/;"	p	class:CharacterIterator	access:public	signature:(void)
first32	unicode/uchriter.h	/^  virtual UChar32       first32(void);$/;"	p	class:UCharCharacterIterator	access:public	signature:(void)
first32PostInc	chariter.cpp	/^CharacterIterator::first32PostInc(void) {$/;"	f	class:CharacterIterator	signature:(void)
first32PostInc	uchriter.cpp	/^UCharCharacterIterator::first32PostInc() {$/;"	f	class:UCharCharacterIterator	signature:()
first32PostInc	unicode/chariter.h	/^    virtual UChar32       first32PostInc(void);$/;"	p	class:CharacterIterator	access:public	signature:(void)
first32PostInc	unicode/uchriter.h	/^  virtual UChar32       first32PostInc(void);$/;"	p	class:UCharCharacterIterator	access:public	signature:(void)
firstElement	uvector.h	/^    void* firstElement(void) const;$/;"	p	class:UVector	access:public	signature:(void) const
firstElement	uvector.h	/^inline void* UVector::firstElement(void) const {$/;"	f	class:UVector	signature:(void) const
firstFreeBlock	utrie2_impl.h	/^    int32_t firstFreeBlock;$/;"	m	struct:UNewTrie2	access:public
firstPostInc	chariter.cpp	/^CharacterIterator::firstPostInc(void) {$/;"	f	class:CharacterIterator	signature:(void)
firstPostInc	uchriter.cpp	/^UCharCharacterIterator::firstPostInc() {$/;"	f	class:UCharCharacterIterator	signature:()
firstPostInc	unicode/chariter.h	/^    virtual UChar         firstPostInc(void);$/;"	p	class:CharacterIterator	access:public	signature:(void)
firstPostInc	unicode/uchriter.h	/^  virtual UChar         firstPostInc(void);$/;"	p	class:UCharCharacterIterator	access:public	signature:(void)
fixOpStack	rbbiscan.cpp	/^void RBBIRuleScanner::fixOpStack(RBBINode::OpPrecedence p) {$/;"	f	class:RBBIRuleScanner	signature:(RBBINode::OpPrecedence p)
fixOpStack	rbbiscan.h	/^    void        fixOpStack(RBBINode::OpPrecedence p);$/;"	p	class:RBBIRuleScanner	access:private	signature:(RBBINode::OpPrecedence p)
fixedOffsets	ucnvscsu.c	/^static const uint32_t fixedOffsets[]={$/;"	v	file:
fixedThreshold	ucnvscsu.c	/^    fixedThreshold=0xF9$/;"	e	enum:__anon153	file:
fixup	usc_impl.c	/^static void fixup(UScriptRun *scriptRun, UScriptCode scriptCode)$/;"	f	file:	signature:(UScriptRun *scriptRun, UScriptCode scriptCode)
fixupCount	usc_impl.c	/^    int32_t fixupCount;$/;"	m	struct:UScriptRun	file:	access:public
flag	ubidiimp.h	/^    int32_t flag;           \/* flag for LRM\/RLM, before\/after *\/$/;"	m	struct:Point	access:public
flagAcceptingStates	rbbitblb.cpp	/^void     RBBITableBuilder::flagAcceptingStates() {$/;"	f	class:RBBITableBuilder	signature:()
flagAcceptingStates	rbbitblb.h	/^    void     flagAcceptingStates();$/;"	p	class:RBBITableBuilder	access:private	signature:()
flagE	ubidi.c	/^static const Flags flagE[2]={ DIRPROP_FLAG(LRE), DIRPROP_FLAG(RLE) };$/;"	v	file:
flagLR	ubidi.c	/^static const Flags flagLR[2]={ DIRPROP_FLAG(L), DIRPROP_FLAG(R) };$/;"	v	file:
flagLookAheadStates	rbbitblb.cpp	/^void     RBBITableBuilder::flagLookAheadStates() {$/;"	f	class:RBBITableBuilder	signature:()
flagLookAheadStates	rbbitblb.h	/^    void     flagLookAheadStates();$/;"	p	class:RBBITableBuilder	access:private	signature:()
flagO	ubidi.c	/^static const Flags flagO[2]={ DIRPROP_FLAG(LRO), DIRPROP_FLAG(RLO) };$/;"	v	file:
flagTaggedStates	rbbitblb.cpp	/^void     RBBITableBuilder::flagTaggedStates() {$/;"	f	class:RBBITableBuilder	signature:()
flagTaggedStates	rbbitblb.h	/^    void     flagTaggedStates();$/;"	p	class:RBBITableBuilder	access:private	signature:()
flags	triedict.cpp	/^    uint16_t    flags;      \/\/ Flag word$/;"	m	struct:TernaryNode	file:	access:public
flags	ubidiimp.h	/^    Flags flags;$/;"	m	struct:UBiDi	access:public
flags	ucnvmbcs.h	/^             flags,$/;"	m	struct:__anon81	access:public
flags	unicode/utext.h	/^    int32_t        flags;$/;"	m	struct:UText	access:public
flagsOffset	ucase.c	/^static const uint8_t flagsOffset[256]={$/;"	v	file:
flagscount	triedict.cpp	/^    uint16_t        flagscount;     \/\/ Count of sub-entries, plus flags$/;"	m	struct:CompactTrieHorizontalNode	file:	access:public
flagscount	triedict.cpp	/^    uint16_t        flagscount;     \/\/ Count of sub-entries, plus flags$/;"	m	struct:CompactTrieNode	file:	access:public
flagscount	triedict.cpp	/^    uint16_t        flagscount;     \/\/ Count of sub-entries, plus flags$/;"	m	struct:CompactTrieVerticalNode	file:	access:public
flattenData	rbbirb.cpp	/^RBBIDataHeader *RBBIRuleBuilder::flattenData() {$/;"	f	class:RBBIRuleBuilder	signature:()
flattenData	rbbirb.h	/^    RBBIDataHeader                *flattenData();    \/\/ Create the flattened (runtime format)$/;"	p	class:RBBIRuleBuilder	access:public	signature:()
flattenSets	rbbinode.cpp	/^void RBBINode::flattenSets() {$/;"	f	class:RBBINode	signature:()
flattenSets	rbbinode.h	/^        void         flattenSets();$/;"	p	class:RBBINode	access:public	signature:()
flattenVariables	rbbinode.cpp	/^RBBINode *RBBINode::flattenVariables() {$/;"	f	class:RBBINode	signature:()
flattenVariables	rbbinode.h	/^        RBBINode    *flattenVariables();$/;"	p	class:RBBINode	access:public	signature:()
flush	unicode/ucnv_err.h	/^    UBool flush;                \/**< The internal state of converter will be reset and data flushed if set to TRUE. @stable ICU 2.0    *\/$/;"	m	struct:__anon105	access:public
flush	unicode/ucnv_err.h	/^    UBool flush;                \/**< The internal state of converter will be reset and data flushed if set to TRUE. @stable ICU 2.0   *\/$/;"	m	struct:__anon106	access:public
fnClassCallback	ubidiimp.h	/^    UBiDiClassCallback *fnClassCallback;    \/* action pointer *\/$/;"	m	struct:UBiDi	access:public
foldCase	unicode/unistr.h	/^  UnicodeString &foldCase(uint32_t options=0 \/*U_FOLD_CASE_DEFAULT*\/);$/;"	p	class:UnicodeString	access:public	signature:(uint32_t options=0 )
foldCase	unistr_case.cpp	/^UnicodeString::foldCase(uint32_t options) {$/;"	f	class:UnicodeString	signature:(uint32_t options)
following	rbbi.cpp	/^int32_t RuleBasedBreakIterator::following(int32_t offset) {$/;"	f	class:RuleBasedBreakIterator	signature:(int32_t offset)
following	unicode/brkiter.h	/^    virtual int32_t following(int32_t offset) = 0;$/;"	p	class:BreakIterator	access:public	signature:(int32_t offset)
following	unicode/rbbi.h	/^    virtual int32_t following(int32_t offset);$/;"	p	class:RuleBasedBreakIterator	access:public	signature:(int32_t offset)
forceDelete	ulist.c	/^    UBool forceDelete;$/;"	m	struct:UListNode	file:	access:public
formatVersion	ubidi_props.c	/^    uint8_t formatVersion[4];$/;"	m	struct:UBiDiProps	file:	access:public
formatVersion	ucase.c	/^    uint8_t formatVersion[4];$/;"	m	struct:UCaseProps	file:	access:public
formatVersion	unicode/udata.h	/^    uint8_t formatVersion[4];$/;"	m	struct:__anon114	access:public
formatVersion	usprep.cpp	/^static uint8_t formatVersion[4]={ 0, 0, 0, 0 };$/;"	v	file:
free_entry	uresbund.c	/^free_entry(UResourceDataEntry *entry) {$/;"	f	file:	signature:(UResourceDataEntry *entry)
freeze	unicode/uniset.h	/^    UnicodeFunctor *freeze();$/;"	p	class:UnicodeSet	access:public	signature:()
freeze	uniset.cpp	/^UnicodeFunctor *UnicodeSet::freeze() {$/;"	f	class:UnicodeSet	signature:()
fromBase64	ucnv_u7.c	/^fromBase64[128]={$/;"	v	file:
fromCharErrorBehaviour	ucnv_bld.h	/^    void (U_EXPORT2 *fromCharErrorBehaviour) (const void *context,$/;"	m	struct:UConverter	access:public
fromDate	unicode/dtintrv.h	/^    UDate fromDate;$/;"	m	class:DateInterval	access:private
fromU2022State	ucnv2022.c	/^    ISO2022State toU2022State, fromU2022State;$/;"	m	struct:__anon68	file:	access:public
fromUBytesLength	ucnvmbcs.h	/^             fromUBytesLength;$/;"	m	struct:__anon81	access:public
fromUBytesLength	ucnvmbcs.h	/^    uint32_t fromUBytesLength;$/;"	m	struct:UConverterMBCSTable	access:public
fromUChar32	ucnv_bld.h	/^    UChar32 fromUChar32;$/;"	m	struct:UConverter	access:public
fromUCharErrorBehaviour	ucnv_bld.h	/^    void (U_EXPORT2 *fromUCharErrorBehaviour) (const void *context,$/;"	m	struct:UConverter	access:public
fromUContext	ucnv_bld.h	/^    const void *fromUContext;$/;"	m	struct:UConverter	access:public
fromUDynamicOffsets	ucnvscsu.c	/^    uint32_t fromUDynamicOffsets[8];$/;"	m	struct:SCSUData	file:	access:public
fromUDynamicWindow	ucnvscsu.c	/^    int8_t fromUDynamicWindow;$/;"	m	struct:SCSUData	file:	access:public
fromUIsSingleByteMode	ucnvscsu.c	/^    UBool fromUIsSingleByteMode;$/;"	m	struct:SCSUData	file:	access:public
fromUSet	unicode/uniset.h	/^    inline static UnicodeSet *fromUSet(USet *uset);$/;"	p	class:UnicodeSet	access:public	signature:(USet *uset)
fromUSet	unicode/uniset.h	/^    inline static const UnicodeSet *fromUSet(const USet *uset);$/;"	p	class:UnicodeSet	access:public	signature:(const USet *uset)
fromUSet	unicode/uniset.h	/^inline UnicodeSet *UnicodeSet::fromUSet(USet *uset) {$/;"	f	class:UnicodeSet	signature:(USet *uset)
fromUSet	unicode/uniset.h	/^inline const UnicodeSet *UnicodeSet::fromUSet(const USet *uset) {$/;"	f	class:UnicodeSet	signature:(const USet *uset)
fromUTF32	unicode/unistr.h	/^  static UnicodeString fromUTF32(const UChar32 *utf32, int32_t length);$/;"	p	class:UnicodeString	access:public	signature:(const UChar32 *utf32, int32_t length)
fromUTF32	unistr.cpp	/^UnicodeString UnicodeString::fromUTF32(const UChar32 *utf32, int32_t length) {$/;"	f	class:UnicodeString	signature:(const UChar32 *utf32, int32_t length)
fromUTF8	ucnv_cnv.h	/^    UConverterConvert fromUTF8;$/;"	m	struct:UConverterImpl	access:public
fromUTF8	unicode/unistr.h	/^  static UnicodeString fromUTF8(const StringPiece &utf8);$/;"	p	class:UnicodeString	access:public	signature:(const StringPiece &utf8)
fromUTF8	unistr.cpp	/^UnicodeString UnicodeString::fromUTF8(const StringPiece &utf8) {$/;"	f	class:UnicodeString	signature:(const StringPiece &utf8)
fromUWriteUInt8	ucnv2022.c	/^fromUWriteUInt8(UConverter *cnv,$/;"	f	file:	signature:(UConverter *cnv, const char *bytes, int32_t length, uint8_t **target, const char *targetLimit, int32_t **offsets, int32_t sourceIndex, UErrorCode *pErrorCode)
fromUnicode	ucnv_cnv.h	/^    UConverterFromUnicode fromUnicode;$/;"	m	struct:UConverterImpl	access:public
fromUnicodeBytes	ucnvmbcs.h	/^    const uint8_t *fromUnicodeBytes;$/;"	m	struct:UConverterMBCSTable	access:public
fromUnicodeStatus	ucnv_bld.h	/^    uint32_t fromUnicodeStatus;$/;"	m	struct:UConverter	access:public
fromUnicodeTable	ucnvisci.c	/^static const uint16_t fromUnicodeTable[128]={$/;"	v	file:
fromUnicodeTable	ucnvmbcs.h	/^    const uint16_t *fromUnicodeTable;$/;"	m	struct:UConverterMBCSTable	access:public
fromUnicodeWithOffsets	ucnv_cnv.h	/^    UConverterFromUnicode fromUnicodeWithOffsets;$/;"	m	struct:UConverterImpl	access:public
fullName	unicode/locid.h	/^    char* fullName;$/;"	m	class:Locale	access:private
fullNameBuffer	unicode/locid.h	/^    char fullNameBuffer[ULOC_FULLNAME_CAPACITY];$/;"	m	class:Locale	access:private
fullStage2Length	ucnvmbcs.h	/^    uint32_t fullStage2Length;  \/* number of 32-bit units *\/$/;"	m	struct:__anon81	access:public
g	ucnv2022.c	/^    int8_t g;           \/* 0..3 for G0..G3 (SI\/SO\/SS2\/SS3) *\/$/;"	m	struct:ISO2022State	file:	access:public
gAliasData	ucnv_io.c	/^static UDataMemory *gAliasData=NULL;$/;"	v	file:
gAutoCleanRegistered	ucln_imp.h	/^static UBool gAutoCleanRegistered = FALSE;$/;"	v
gAvailableConverterCount	ucnv_bld.c	/^static uint16_t gAvailableConverterCount = 0;$/;"	v	file:
gAvailableConverters	ucnv_bld.c	/^static const char **gAvailableConverters = NULL;$/;"	v	file:
gCollationBinKey	uresdata.c	/^static const UChar gCollationBinKey[]={$/;"	v	file:
gCommonCleanupFunctions	ucln_cmn.c	/^static cleanupFunc *gCommonCleanupFunctions[UCLN_COMMON_COUNT];$/;"	v	file:
gCommonDataCache	udata.cpp	/^static UHashtable  *gCommonDataCache = NULL;  \/* Global hash table of opened ICU data files.  *\/$/;"	v	file:
gCommonICUDataArray	udata.cpp	/^static UDataMemory *gCommonICUDataArray[10] = { NULL };$/;"	v	file:
gCorrectedPOSIXLocale	putil.c	/^ static char *gCorrectedPOSIXLocale = NULL; \/* Heap allocated *\/$/;"	v	file:
gDataDirectory	putil.c	/^static char *gDataDirectory = NULL;$/;"	v	file:
gDataFileAccess	udata.cpp	/^static UDataFileAccess  gDataFileAccess = UDATA_DEFAULT_ACCESS;$/;"	v	file:
gDecimal	uloc.c	/^static char gDecimal = 0;$/;"	v	file:
gDefaultAlgorithmicSharedData	ucnv_bld.c	/^static const UConverterSharedData *gDefaultAlgorithmicSharedData = NULL;$/;"	v	file:
gDefaultConverter	ustr_cnv.c	/^static UConverter *gDefaultConverter = NULL;$/;"	v	file:
gDefaultConverterContainsOption	ucnv_bld.c	/^static UBool gDefaultConverterContainsOption;$/;"	v	file:
gDefaultConverterName	ucnv_bld.c	/^static const char *gDefaultConverterName = NULL;$/;"	v	file:
gDefaultConverterNameBuffer	ucnv_bld.c	/^static char gDefaultConverterNameBuffer[UCNV_MAX_CONVERTER_NAME_LENGTH + 1]; \/* +1 for NULL *\/$/;"	v	file:
gDefaultLocale	locid.cpp	/^static U_NAMESPACE_QUALIFIER Locale *gDefaultLocale       = NULL;$/;"	v	file:
gDefaultLocalesHashT	locid.cpp	/^static UHashtable                   *gDefaultLocalesHashT = NULL;$/;"	v	file:
gEmpty16	uresdata.c	/^static const uint16_t gEmpty16=0;$/;"	v	file:
gEmpty32	uresdata.c	/^static const int32_t gEmpty32=0;$/;"	v	file:
gEmptyString	uresdata.c	/^} gEmptyString={ 0, 0, 0 };$/;"	v	typeref:struct:__anon51	file:
gEmptyString	utext.cpp	/^static const char gEmptyString[] = {0};$/;"	v	file:
gEmptyUString	utext.cpp	/^static const UChar gEmptyUString[] = {0};$/;"	v	file:
gEnumAliases	ucnv_io.c	/^static const UEnumeration gEnumAliases = {$/;"	v	file:
gEnumAllConverters	ucnv_io.c	/^static const UEnumeration gEnumAllConverters = {$/;"	v	file:
gExitFmt	utrace.c	/^static const char gExitFmt[]             = "Returns.";$/;"	v	file:
gExitFmtPtrStatus	utrace.c	/^static const char gExitFmtPtrStatus[]    = "Returns %d.  Status = %p.";$/;"	v	file:
gExitFmtStatus	utrace.c	/^static const char gExitFmtStatus[]       = "Returns.  Status = %d.";$/;"	v	file:
gExitFmtValue	utrace.c	/^static const char gExitFmtValue[]        = "Returns %d.";$/;"	v	file:
gExitFmtValueStatus	utrace.c	/^static const char gExitFmtValueStatus[]  = "Returns %d.  Status = %d.";$/;"	v	file:
gHaveTriedToLoadCommonData	udata.cpp	/^static UBool gHaveTriedToLoadCommonData = FALSE;  \/* See extendICUData(). *\/$/;"	v	file:
gHeapInUse	cmemory.c	/^static UBool   gHeapInUse;$/;"	v	file:
gICUInitMutex	uinit.c	/^static UMTX  gICUInitMutex   = NULL;$/;"	v	file:
gICUInitialized	uinit.c	/^static UBool gICUInitialized = FALSE;$/;"	v	file:
gIncDecContext	umutex.c	/^static const void *gIncDecContext  = NULL;$/;"	v	file:
gIncDecMutex	umutex.c	/^static UMTX    gIncDecMutex = NULL;$/;"	v	file:
gInf	putil.c	/^static const BitPatternConversion gInf = { (int64_t) INT64_C(0x7FF0000000000000) };$/;"	v	file:
gKeywordsEnum	uloc.c	/^static const UEnumeration gKeywordsEnum = {$/;"	v	file:
gLanguageBreakFactories	rbbi.cpp	/^static U_NAMESPACE_QUALIFIER UStack *gLanguageBreakFactories = NULL;$/;"	v	file:
gLastSerial	rbbinode.cpp	/^static int  gLastSerial = 0;$/;"	v	file:
gLibCleanupFunctions	ucln_cmn.c	/^static cleanupFunc *gLibCleanupFunctions[UCLN_COMMON];$/;"	v	file:
gLoadErrorCode	unames.c	/^static UErrorCode gLoadErrorCode=U_ZERO_ERROR;$/;"	v	file:
gLocaleCache	locid.cpp	/^static U_NAMESPACE_QUALIFIER Locale *gLocaleCache         = NULL;$/;"	v	file:
gLocaleCount	locmap.c	/^static const uint32_t gLocaleCount = sizeof(gPosixIDmap)\/sizeof(ILcidPosixMap);$/;"	v	file:
gLocalesEnum	uresbund.c	/^static const UEnumeration gLocalesEnum = {$/;"	v	file:
gMainTable	ucnv_io.c	/^static UConverterAlias gMainTable;$/;"	v	file:
gMaxNameLength	unames.c	/^static int32_t gMaxNameLength=0;$/;"	v	file:
gMutexContext	umutex.c	/^static const void    *gMutexContext   = NULL;$/;"	v	file:
gNameSet	unames.c	/^static uint32_t gNameSet[8]={ 0 };$/;"	v	file:
gNan	putil.c	/^static const BitPatternConversion gNan = { (int64_t) INT64_C(0x7FF8000000000000) };$/;"	v	file:
gPosixFromLCID	locmap.c	/^static char gPosixFromLCID[ULOC_FULLNAME_CAPACITY];$/;"	v	file:
gPosixIDmap	locmap.c	/^static const ILcidPosixMap gPosixIDmap[] = {$/;"	v	file:
gPublicTypes	uresdata.c	/^static const int8_t gPublicTypes[URES_LIMIT] = {$/;"	v	file:
gRuleParseStateTable	rbbirpt.h	/^static const struct RBBIRuleTableEl gRuleParseStateTable[] = {$/;"	v	typeref:struct:RBBIRuleTableEl
gRuleSet_digit_char_pattern	rbbiscan.cpp	/^static const UChar gRuleSet_digit_char_pattern[] = {$/;"	v	file:
gRuleSet_name_char	rbbiscan.h	/^    UnicodeSet *gRuleSet_name_char;$/;"	m	class:RBBIRuleScanner	access:private
gRuleSet_name_char_pattern	rbbiscan.cpp	/^static const UChar gRuleSet_name_char_pattern[]       = {$/;"	v	file:
gRuleSet_name_start_char	rbbiscan.h	/^    UnicodeSet *gRuleSet_name_start_char;$/;"	m	class:RBBIRuleScanner	access:private
gRuleSet_name_start_char_pattern	rbbiscan.cpp	/^static const UChar gRuleSet_name_start_char_pattern[] = {$/;"	v	file:
gRuleSet_rule_char	rbbiscan.h	/^    UnicodeSet *gRuleSet_rule_char;$/;"	m	class:RBBIRuleScanner	access:private
gRuleSet_rule_char_pattern	rbbiscan.cpp	/^static const UChar gRuleSet_rule_char_pattern[]       = {$/;"	v	file:
gRuleSet_white_space	rbbiscan.h	/^    UnicodeSet *gRuleSet_white_space;$/;"	m	class:RBBIRuleScanner	access:private
gService	brkiter.cpp	/^static U_NAMESPACE_QUALIFIER ICULocaleService* gService = NULL;$/;"	v	file:
gTimeZoneBuffer	putil.c	/^static char gTimeZoneBuffer[PATH_MAX];$/;"	v	file:
gTimeZoneBufferPtr	putil.c	/^static char *gTimeZoneBufferPtr = NULL;$/;"	v	file:
gTraceContext	utrace.c	/^static const void      *gTraceContext   = NULL;$/;"	v	file:
gUnknownKey	uresdata.c	/^static const char *const gUnknownKey="";$/;"	v	file:
gWinType	wintz.c	/^static int32_t gWinType = 0;$/;"	v	file:
gapOffset	ucnvscsu.c	/^    gapOffset=0xAC00,$/;"	e	enum:__anon153	file:
gapThreshold	ucnvscsu.c	/^    gapThreshold=0x68,$/;"	e	enum:__anon153	file:
gb18030Ranges	ucnvmbcs.c	/^gb18030Ranges[13][4]={$/;"	v	file:
gbConverter	ucnvhz.c	/^    UConverter* gbConverter;$/;"	m	struct:__anon61	file:	access:public
gcbToHst	uprops.cpp	/^static const UHangulSyllableType gcbToHst[]={$/;"	v	file:
generalCategoryMaskFilter	uniset_props.cpp	/^static UBool generalCategoryMaskFilter(UChar32 ch, void* context) {$/;"	f	file:	signature:(UChar32 ch, void* context)
generateSelectorData	ucnvsel.cpp	/^static void generateSelectorData(UConverterSelector* result,$/;"	f	file:	signature:(UConverterSelector* result, UPropsVectors *upvec, const USet* excludedCodePoints, const UConverterUnicodeSet whichSet, UErrorCode* status)
get	hash.h	/^    void* get(const UnicodeString& key) const;$/;"	p	class:Hashtable	access:public	signature:(const UnicodeString& key) const
get	hash.h	/^inline void* Hashtable::get(const UnicodeString& key) const {$/;"	f	class:Hashtable	signature:(const UnicodeString& key) const
get	resbund.cpp	/^ResourceBundle ResourceBundle::get(const char* key, UErrorCode& status) const {$/;"	f	class:ResourceBundle	signature:(const char* key, UErrorCode& status) const
get	resbund.cpp	/^ResourceBundle ResourceBundle::get(int32_t indexR, UErrorCode& status) const {$/;"	f	class:ResourceBundle	signature:(int32_t indexR, UErrorCode& status) const
get	serv.cpp	/^ICUService::get(const UnicodeString& descriptor, UErrorCode& status) const $/;"	f	class:ICUService	signature:(const UnicodeString& descriptor, UErrorCode& status) const
get	serv.cpp	/^ICUService::get(const UnicodeString& descriptor, UnicodeString* actualReturn, UErrorCode& status) const $/;"	f	class:ICUService	signature:(const UnicodeString& descriptor, UnicodeString* actualReturn, UErrorCode& status) const
get	servls.cpp	/^ICULocaleService::get(const Locale& locale, Locale* actualReturn, UErrorCode& status) const$/;"	f	class:ICULocaleService	signature:(const Locale& locale, Locale* actualReturn, UErrorCode& status) const
get	servls.cpp	/^ICULocaleService::get(const Locale& locale, UErrorCode& status) const$/;"	f	class:ICULocaleService	signature:(const Locale& locale, UErrorCode& status) const
get	servls.cpp	/^ICULocaleService::get(const Locale& locale, int32_t kind, Locale* actualReturn, UErrorCode& status) const$/;"	f	class:ICULocaleService	signature:(const Locale& locale, int32_t kind, Locale* actualReturn, UErrorCode& status) const
get	servls.cpp	/^ICULocaleService::get(const Locale& locale, int32_t kind, UErrorCode& status) const$/;"	f	class:ICULocaleService	signature:(const Locale& locale, int32_t kind, UErrorCode& status) const
get	unicode/errorcode.h	/^    UErrorCode get() const { return errorCode; }$/;"	f	class:ErrorCode	access:public	signature:() const
get	unicode/resbund.h	/^      get(const char* key,$/;"	p	class:ResourceBundle	access:public	signature:(const char* key, UErrorCode& status) const
get	unicode/resbund.h	/^      get(int32_t index,$/;"	p	class:ResourceBundle	access:public	signature:(int32_t index, UErrorCode& status) const
get32	utrie2.cpp	/^get32(const UNewTrie2 *trie, UChar32 c, UBool fromLSCP) {$/;"	f	file:	signature:(const UNewTrie2 *trie, UChar32 c, UBool fromLSCP)
getASCIIPropertyNameChar	propname.cpp	/^getASCIIPropertyNameChar(const char *name) {$/;"	f	file:	signature:(const char *name)
getAlgName	unames.c	/^getAlgName(AlgorithmicRange *range, uint32_t code, UCharNameChoice nameChoice,$/;"	f	file:	signature:(AlgorithmicRange *range, uint32_t code, UCharNameChoice nameChoice, char *buffer, uint16_t bufferLength)
getAlgorithmicTypeFromName	ucnv_bld.c	/^getAlgorithmicTypeFromName(const char *realName)$/;"	f	file:	signature:(const char *realName)
getAlias	cmemory.h	/^    H *getAlias() const { return ptr; }$/;"	f	class:MaybeStackHeaderAndArray	access:public	signature:() const
getAlias	cmemory.h	/^    T *getAlias() const { return ptr; }$/;"	f	class:MaybeStackArray	access:public	signature:() const
getAlias	unicode/localpointer.h	/^    T *getAlias() const { return ptr; }$/;"	f	class:LocalPointerBase	access:public	signature:() const
getAppendBuffer	charstr.cpp	/^char *CharString::getAppendBuffer(int32_t minCapacity,$/;"	f	class:CharString	signature:(int32_t minCapacity, int32_t desiredCapacityHint, int32_t &resultCapacity, UErrorCode &errorCode)
getAppendBuffer	charstr.h	/^    char *getAppendBuffer(int32_t minCapacity,$/;"	p	class:CharString	access:public	signature:(int32_t minCapacity, int32_t desiredCapacityHint, int32_t &resultCapacity, UErrorCode &errorCode)
getArrayLimit	cmemory.h	/^    T *getArrayLimit() const { return getAlias()+capacity; }$/;"	f	class:MaybeStackArray	access:public	signature:() const
getArrayLimit	cmemory.h	/^    T *getArrayLimit() const { return getArrayStart()+capacity; }$/;"	f	class:MaybeStackHeaderAndArray	access:public	signature:() const
getArrayStart	cmemory.h	/^    T *getArrayStart() const { return reinterpret_cast<T *>(getAlias()+1); }$/;"	f	class:MaybeStackHeaderAndArray	access:public	signature:() const
getArrayStart	unicode/unistr.h	/^  inline UChar* getArrayStart(void);$/;"	p	class:UnicodeString	access:private	signature:(void)
getArrayStart	unicode/unistr.h	/^  inline const UChar* getArrayStart(void) const;$/;"	p	class:UnicodeString	access:private	signature:(void) const
getArrayStart	unicode/unistr.h	/^UnicodeString::getArrayStart() const$/;"	f	class:UnicodeString	signature:() const
getArrayStart	unicode/unistr.h	/^UnicodeString::getArrayStart()$/;"	f	class:UnicodeString	signature:()
getAvailableLocaleNames	locutil.cpp	/^LocaleUtility::getAvailableLocaleNames(const UnicodeString& bundleID)$/;"	f	class:LocaleUtility	signature:(const UnicodeString& bundleID)
getAvailableLocaleNames	locutil.h	/^  static const Hashtable* getAvailableLocaleNames(const UnicodeString& bundleID);$/;"	p	class:LocaleUtility	access:public	signature:(const UnicodeString& bundleID)
getAvailableLocales	brkiter.cpp	/^BreakIterator::getAvailableLocales(int32_t& count)$/;"	f	class:BreakIterator	signature:(int32_t& count)
getAvailableLocales	brkiter.cpp	/^BreakIterator::getAvailableLocales(void)$/;"	f	class:BreakIterator	signature:(void)
getAvailableLocales	locavailable.cpp	/^Locale::getAvailableLocales(int32_t& count)$/;"	f	class:Locale	signature:(int32_t& count)
getAvailableLocales	servls.cpp	/^ICULocaleService::getAvailableLocales(void) const$/;"	f	class:ICULocaleService	signature:(void) const
getAvailableLocales	unicode/brkiter.h	/^    static const Locale* U_EXPORT2 getAvailableLocales(int32_t& count);$/;"	p	class:BreakIterator	access:public	signature:(int32_t& count)
getAvailableLocales	unicode/locid.h	/^    static const Locale* U_EXPORT2 getAvailableLocales(int32_t& count);$/;"	p	class:Locale	access:public	signature:(int32_t& count)
getBaseName	locid.cpp	/^Locale::getBaseName() const$/;"	f	class:Locale	signature:() const
getBaseName	unicode/locid.h	/^    const char * getBaseName() const;$/;"	p	class:Locale	access:public	signature:() const
getBiDiClass	uprops.cpp	/^static int32_t getBiDiClass(const IntProperty &\/*prop*\/, UChar32 c, UProperty \/*which*\/) {$/;"	f	file:	signature:(const IntProperty & , UChar32 c, UProperty )
getBinary	resbund.cpp	/^const uint8_t *ResourceBundle::getBinary(int32_t& len, UErrorCode& status) const {$/;"	f	class:ResourceBundle	signature:(int32_t& len, UErrorCode& status) const
getBinary	unicode/resbund.h	/^      getBinary(int32_t& len, UErrorCode& status) const;$/;"	p	class:ResourceBundle	access:public	signature:(int32_t& len, UErrorCode& status) const
getBinaryRules	rbbi.cpp	/^const uint8_t  *RuleBasedBreakIterator::getBinaryRules(uint32_t &length) {$/;"	f	class:RuleBasedBreakIterator	signature:(uint32_t &length)
getBinaryRules	unicode/rbbi.h	/^    virtual const uint8_t *getBinaryRules(uint32_t &length);$/;"	p	class:RuleBasedBreakIterator	access:public	signature:(uint32_t &length)
getBuffer	unicode/unistr.h	/^  UChar *getBuffer(int32_t minCapacity);$/;"	p	class:UnicodeString	access:public	signature:(int32_t minCapacity)
getBuffer	unicode/unistr.h	/^  inline const UChar *getBuffer() const;$/;"	p	class:UnicodeString	access:public	signature:() const
getBuffer	unicode/unistr.h	/^UnicodeString::getBuffer() const {$/;"	f	class:UnicodeString	signature:() const
getBuffer	unistr.cpp	/^UnicodeString::getBuffer(int32_t minCapacity) {$/;"	f	class:UnicodeString	signature:(int32_t minCapacity)
getBuffer	uvectr32.h	/^    int32_t *getBuffer() const;$/;"	p	class:UVector32	access:public	signature:() const
getBuffer	uvectr32.h	/^inline int32_t *UVector32::getBuffer() const {$/;"	f	class:UVector32	signature:() const
getBuffer	uvectr64.h	/^    int64_t *getBuffer() const;$/;"	p	class:UVector64	access:public	signature:() const
getBuffer	uvectr64.h	/^inline int64_t *UVector64::getBuffer() const {$/;"	f	class:UVector64	signature:() const
getCC	normalizer2impl.h	/^    uint8_t getCC(uint16_t norm16) const {$/;"	f	class:Normalizer2Impl	access:public	signature:(uint16_t norm16) const
getCCFromNoNo	normalizer2impl.h	/^    uint8_t getCCFromNoNo(uint16_t norm16) const {$/;"	f	class:Normalizer2Impl	access:private	signature:(uint16_t norm16) const
getCCFromYesOrMaybe	normalizer2impl.h	/^    static uint8_t getCCFromYesOrMaybe(uint16_t norm16) {$/;"	f	class:Normalizer2Impl	access:public	signature:(uint16_t norm16)
getCanada	locid.cpp	/^Locale::getCanada(void)$/;"	f	class:Locale	signature:(void)
getCanada	unicode/locid.h	/^    static const Locale &U_EXPORT2 getCanada(void);$/;"	p	class:Locale	access:public	signature:(void)
getCanadaFrench	locid.cpp	/^Locale::getCanadaFrench(void)$/;"	f	class:Locale	signature:(void)
getCanadaFrench	unicode/locid.h	/^    static const Locale &U_EXPORT2 getCanadaFrench(void);$/;"	p	class:Locale	access:public	signature:(void)
getCanonStartSet	normalizer2impl.cpp	/^UBool Normalizer2Impl::getCanonStartSet(UChar32 c, UnicodeSet &set) const {$/;"	f	class:Normalizer2Impl	signature:(UChar32 c, UnicodeSet &set) const
getCanonStartSet	normalizer2impl.cpp	/^const UnicodeSet &Normalizer2Impl::getCanonStartSet(int32_t n) const {$/;"	f	class:Normalizer2Impl	signature:(int32_t n) const
getCanonStartSet	normalizer2impl.h	/^    UBool getCanonStartSet(UChar32 c, UnicodeSet &set) const;$/;"	p	class:Normalizer2Impl	access:public	signature:(UChar32 c, UnicodeSet &set) const
getCanonStartSet	normalizer2impl.h	/^    const UnicodeSet &getCanonStartSet(int32_t n) const;$/;"	p	class:Normalizer2Impl	access:private	signature:(int32_t n) const
getCanonValue	normalizer2impl.cpp	/^int32_t Normalizer2Impl::getCanonValue(UChar32 c) const {$/;"	f	class:Normalizer2Impl	signature:(UChar32 c) const
getCanonValue	normalizer2impl.h	/^    int32_t getCanonValue(UChar32 c) const;$/;"	p	class:Normalizer2Impl	access:private	signature:(UChar32 c) const
getCapacity	cmemory.h	/^    int32_t getCapacity() const { return capacity; }$/;"	f	class:MaybeStackArray	access:public	signature:() const
getCapacity	cmemory.h	/^    int32_t getCapacity() const { return capacity; }$/;"	f	class:MaybeStackHeaderAndArray	access:public	signature:() const
getCapacity	unicode/unistr.h	/^  inline int32_t getCapacity(void) const;$/;"	p	class:UnicodeString	access:public	signature:(void) const
getCapacity	unicode/unistr.h	/^UnicodeString::getCapacity() const$/;"	f	class:UnicodeString	signature:() const
getChar32At	unicode/rep.h	/^    virtual UChar32 getChar32At(int32_t offset) const = 0;$/;"	p	class:Replaceable	access:protected	signature:(int32_t offset) const
getChar32At	unicode/unistr.h	/^  virtual UChar32 getChar32At(int32_t offset) const;$/;"	p	class:UnicodeString	access:protected	signature:(int32_t offset) const
getChar32At	unistr.cpp	/^UnicodeString::getChar32At(int32_t offset) const {$/;"	f	class:UnicodeString	signature:(int32_t offset) const
getChar32Limit	unicode/unistr.h	/^  inline int32_t getChar32Limit(int32_t offset) const;$/;"	p	class:UnicodeString	access:public	signature:(int32_t offset) const
getChar32Limit	unicode/unistr.h	/^UnicodeString::getChar32Limit(int32_t offset) const {$/;"	f	class:UnicodeString	signature:(int32_t offset) const
getChar32Start	unicode/unistr.h	/^  inline int32_t getChar32Start(int32_t offset) const;$/;"	p	class:UnicodeString	access:public	signature:(int32_t offset) const
getChar32Start	unicode/unistr.h	/^UnicodeString::getChar32Start(int32_t offset) const {$/;"	f	class:UnicodeString	signature:(int32_t offset) const
getCharAt	unicode/rep.h	/^    virtual UChar getCharAt(int32_t offset) const = 0;$/;"	p	class:Replaceable	access:protected	signature:(int32_t offset) const
getCharAt	unicode/unistr.h	/^  virtual UChar getCharAt(int32_t offset) const;$/;"	p	class:UnicodeString	access:protected	signature:(int32_t offset) const
getCharAt	unistr.cpp	/^UnicodeString::getCharAt(int32_t offset) const {$/;"	f	class:UnicodeString	signature:(int32_t offset) const
getCharCat	unames.c	/^static uint8_t getCharCat(UChar32 cp) {$/;"	f	file:	signature:(UChar32 cp)
getCharCatName	unames.c	/^static const char *getCharCatName(UChar32 cp) {$/;"	f	file:	signature:(UChar32 cp)
getChina	locid.cpp	/^Locale::getChina(void)$/;"	f	class:Locale	signature:(void)
getChina	unicode/locid.h	/^    static const Locale &U_EXPORT2 getChina(void);$/;"	p	class:Locale	access:public	signature:(void)
getChinese	locid.cpp	/^Locale::getChinese(void)$/;"	f	class:Locale	signature:(void)
getChinese	unicode/locid.h	/^    static const Locale &U_EXPORT2 getChinese(void);$/;"	p	class:Locale	access:public	signature:(void)
getCodepageFromPOSIXID	putil.c	/^getCodepageFromPOSIXID(const char *localeName, char * buffer, int32_t buffCapacity)$/;"	f	file:	signature:(const char *localeName, char * buffer, int32_t buffCapacity)
getCodepoint	unicode/usetiter.h	/^    inline UChar32 getCodepoint() const;$/;"	p	class:UnicodeSetIterator	access:public	signature:() const
getCodepoint	unicode/usetiter.h	/^inline UChar32 UnicodeSetIterator::getCodepoint() const {$/;"	f	class:UnicodeSetIterator	signature:() const
getCodepointEnd	unicode/usetiter.h	/^    inline UChar32 getCodepointEnd() const;$/;"	p	class:UnicodeSetIterator	access:public	signature:() const
getCodepointEnd	unicode/usetiter.h	/^inline UChar32 UnicodeSetIterator::getCodepointEnd() const {$/;"	f	class:UnicodeSetIterator	signature:() const
getCombiningClass	uprops.cpp	/^static int32_t getCombiningClass(const IntProperty &, UChar32, UProperty) {$/;"	f	file:	signature:(const IntProperty &, UChar32, UProperty)
getCombiningClass	uprops.cpp	/^static int32_t getCombiningClass(const IntProperty &\/*prop*\/, UChar32 c, UProperty \/*which*\/) {$/;"	f	file:	signature:(const IntProperty & , UChar32 c, UProperty )
getCompQuickCheck	normalizer2impl.h	/^    UNormalizationCheckResult getCompQuickCheck(uint16_t norm16) const {$/;"	f	class:Normalizer2Impl	access:public	signature:(uint16_t norm16) const
getCompactNode	triedict.cpp	/^getCompactNode(const CompactTrieHeader *header, uint16_t node) {$/;"	f	file:	signature:(const CompactTrieHeader *header, uint16_t node)
getCompositionsList	normalizer2impl.h	/^    const uint16_t *getCompositionsList(uint16_t norm16) const {$/;"	f	class:Normalizer2Impl	access:private	signature:(uint16_t norm16) const
getCompositionsListForComposite	normalizer2impl.h	/^    const uint16_t *getCompositionsListForComposite(uint16_t norm16) const {$/;"	f	class:Normalizer2Impl	access:private	signature:(uint16_t norm16) const
getCompositionsListForDecompYes	normalizer2impl.h	/^    const uint16_t *getCompositionsListForDecompYes(uint16_t norm16) const {$/;"	f	class:Normalizer2Impl	access:private	signature:(uint16_t norm16) const
getCountry	unicode/locid.h	/^    inline const char *  getCountry( ) const;$/;"	p	class:Locale	access:public	signature:( ) const
getCountry	unicode/locid.h	/^Locale::getCountry() const$/;"	f	class:Locale	signature:() const
getDataBlock	utrie2_builder.c	/^getDataBlock(UNewTrie2 *trie, UChar32 c, UBool forLSCP) {$/;"	f	file:	signature:(UNewTrie2 *trie, UChar32 c, UBool forLSCP)
getDecomposition	filterednormalizer2.cpp	/^FilteredNormalizer2::getDecomposition(UChar32 c, UnicodeString &decomposition) const {$/;"	f	class:FilteredNormalizer2	signature:(UChar32 c, UnicodeString &decomposition) const
getDecomposition	normalizer2.cpp	/^    getDecomposition(UChar32 c, UnicodeString &decomposition) const {$/;"	f	class:Normalizer2WithImpl	access:public	signature:(UChar32 c, UnicodeString &decomposition) const
getDecomposition	normalizer2.cpp	/^    getDecomposition(UChar32, UnicodeString &) const {$/;"	f	class:NoopNormalizer2	file:	access:private	signature:(UChar32, UnicodeString &) const
getDecomposition	normalizer2impl.cpp	/^Normalizer2Impl::getDecomposition(UChar32 c, UChar buffer[4], int32_t &length) const {$/;"	f	class:Normalizer2Impl	signature:(UChar32 c, UChar buffer[4], int32_t &length) const
getDecomposition	normalizer2impl.h	/^    const UChar *getDecomposition(UChar32 c, UChar buffer[4], int32_t &length) const;$/;"	p	class:Normalizer2Impl	access:public	signature:(UChar32 c, UChar buffer[4], int32_t &length) const
getDecomposition	unicode/normalizer2.h	/^    getDecomposition(UChar32 c, UnicodeString &decomposition) const = 0;$/;"	p	class:Normalizer2	access:public	signature:(UChar32 c, UnicodeString &decomposition) const
getDecomposition	unicode/normalizer2.h	/^    getDecomposition(UChar32 c, UnicodeString &decomposition) const;$/;"	p	class:FilteredNormalizer2	access:public	signature:(UChar32 c, UnicodeString &decomposition) const
getDefault	locid.cpp	/^Locale::getDefault()$/;"	f	class:Locale	signature:()
getDefault	unicode/locid.h	/^    static const Locale& U_EXPORT2 getDefault(void);$/;"	p	class:Locale	access:public	signature:(void)
getDirProps	ubidi.c	/^getDirProps(UBiDi *pBiDi) {$/;"	f	file:	signature:(UBiDi *pBiDi)
getDirPropsMemory	ubidiimp.h	354;"	d
getDisplayCountry	locdispnames.cpp	/^Locale::getDisplayCountry(UnicodeString& dispCntry) const$/;"	f	class:Locale	signature:(UnicodeString& dispCntry) const
getDisplayCountry	locdispnames.cpp	/^Locale::getDisplayCountry(const Locale &displayLocale,$/;"	f	class:Locale	signature:(const Locale &displayLocale, UnicodeString &result) const
getDisplayCountry	unicode/locid.h	/^    UnicodeString&  getDisplayCountry(          UnicodeString& dispCountry) const;$/;"	p	class:Locale	access:public	signature:( UnicodeString& dispCountry) const
getDisplayCountry	unicode/locid.h	/^    UnicodeString&  getDisplayCountry(  const   Locale&         displayLocale,$/;"	p	class:Locale	access:public	signature:( const Locale& displayLocale, UnicodeString& dispCountry) const
getDisplayLanguage	locdispnames.cpp	/^Locale::getDisplayLanguage(UnicodeString& dispLang) const$/;"	f	class:Locale	signature:(UnicodeString& dispLang) const
getDisplayLanguage	locdispnames.cpp	/^Locale::getDisplayLanguage(const Locale &displayLocale,$/;"	f	class:Locale	signature:(const Locale &displayLocale, UnicodeString &result) const
getDisplayLanguage	unicode/locid.h	/^    UnicodeString&  getDisplayLanguage( const   Locale&         displayLocale,$/;"	p	class:Locale	access:public	signature:( const Locale& displayLocale, UnicodeString& dispLang) const
getDisplayLanguage	unicode/locid.h	/^    UnicodeString&  getDisplayLanguage(UnicodeString&   dispLang) const;$/;"	p	class:Locale	access:public	signature:(UnicodeString& dispLang) const
getDisplayName	locdispnames.cpp	/^BreakIterator::getDisplayName(const Locale& objectLocale,$/;"	f	class:BreakIterator	signature:(const Locale& objectLocale, UnicodeString& name)
getDisplayName	locdispnames.cpp	/^BreakIterator::getDisplayName(const Locale& objectLocale,$/;"	f	class:BreakIterator	signature:(const Locale& objectLocale, const Locale& displayLocale, UnicodeString& name)
getDisplayName	locdispnames.cpp	/^Locale::getDisplayName( UnicodeString& name ) const$/;"	f	class:Locale	signature:( UnicodeString& name ) const
getDisplayName	locdispnames.cpp	/^Locale::getDisplayName(const Locale &displayLocale,$/;"	f	class:Locale	signature:(const Locale &displayLocale, UnicodeString &result) const
getDisplayName	serv.cpp	/^ICUService::getDisplayName(const UnicodeString& id, UnicodeString& result) const $/;"	f	class:ICUService	signature:(const UnicodeString& id, UnicodeString& result) const
getDisplayName	serv.cpp	/^ICUService::getDisplayName(const UnicodeString& id, UnicodeString& result, const Locale& locale) const $/;"	f	class:ICUService	signature:(const UnicodeString& id, UnicodeString& result, const Locale& locale) const
getDisplayName	serv.cpp	/^SimpleFactory::getDisplayName(const UnicodeString& id, const Locale& \/* locale *\/, UnicodeString& result) const $/;"	f	class:SimpleFactory	signature:(const UnicodeString& id, const Locale& , UnicodeString& result) const
getDisplayName	servlkf.cpp	/^LocaleKeyFactory::getDisplayName(const UnicodeString& id, const Locale& locale, UnicodeString& result) const {$/;"	f	class:LocaleKeyFactory	signature:(const UnicodeString& id, const Locale& locale, UnicodeString& result) const
getDisplayName	unicode/brkiter.h	/^    static UnicodeString& U_EXPORT2 getDisplayName(const Locale& objectLocale,$/;"	p	class:BreakIterator	access:public	signature:(const Locale& objectLocale, UnicodeString& name)
getDisplayName	unicode/brkiter.h	/^    static UnicodeString& U_EXPORT2 getDisplayName(const Locale& objectLocale,$/;"	p	class:BreakIterator	access:public	signature:(const Locale& objectLocale, const Locale& displayLocale, UnicodeString& name)
getDisplayName	unicode/locid.h	/^    UnicodeString&  getDisplayName(         UnicodeString&  name) const;$/;"	p	class:Locale	access:public	signature:( UnicodeString& name) const
getDisplayName	unicode/locid.h	/^    UnicodeString&  getDisplayName( const   Locale&         displayLocale,$/;"	p	class:Locale	access:public	signature:( const Locale& displayLocale, UnicodeString& name) const
getDisplayNames	serv.cpp	/^ICUService::getDisplayNames(UVector& result, $/;"	f	class:ICUService	signature:(UVector& result, const Locale& locale, const UnicodeString* matchID, UErrorCode& status) const
getDisplayNames	serv.cpp	/^ICUService::getDisplayNames(UVector& result, UErrorCode& status) const $/;"	f	class:ICUService	signature:(UVector& result, UErrorCode& status) const
getDisplayNames	serv.cpp	/^ICUService::getDisplayNames(UVector& result, const Locale& locale, UErrorCode& status) const $/;"	f	class:ICUService	signature:(UVector& result, const Locale& locale, UErrorCode& status) const
getDisplayScript	locdispnames.cpp	/^Locale::getDisplayScript(UnicodeString& dispScript) const$/;"	f	class:Locale	signature:(UnicodeString& dispScript) const
getDisplayScript	locdispnames.cpp	/^Locale::getDisplayScript(const Locale &displayLocale,$/;"	f	class:Locale	signature:(const Locale &displayLocale, UnicodeString &result) const
getDisplayScript	unicode/locid.h	/^    UnicodeString&  getDisplayScript(          UnicodeString& dispScript) const;$/;"	p	class:Locale	access:public	signature:( UnicodeString& dispScript) const
getDisplayScript	unicode/locid.h	/^    UnicodeString&  getDisplayScript(  const   Locale&         displayLocale,$/;"	p	class:Locale	access:public	signature:( const Locale& displayLocale, UnicodeString& dispScript) const
getDisplayVariant	locdispnames.cpp	/^Locale::getDisplayVariant(UnicodeString& dispVar) const$/;"	f	class:Locale	signature:(UnicodeString& dispVar) const
getDisplayVariant	locdispnames.cpp	/^Locale::getDisplayVariant(const Locale &displayLocale,$/;"	f	class:Locale	signature:(const Locale &displayLocale, UnicodeString &result) const
getDisplayVariant	unicode/locid.h	/^    UnicodeString&  getDisplayVariant(      UnicodeString& dispVar) const;$/;"	p	class:Locale	access:public	signature:( UnicodeString& dispVar) const
getDisplayVariant	unicode/locid.h	/^    UnicodeString&  getDisplayVariant(  const   Locale&         displayLocale,$/;"	p	class:Locale	access:public	signature:( const Locale& displayLocale, UnicodeString& dispVar) const
getDotType	ucase.c	/^getDotType(const UCaseProps *csp, UChar32 c) {$/;"	f	file:	signature:(const UCaseProps *csp, UChar32 c)
getDynamicClassID	locid.cpp	/^    virtual UClassID getDynamicClassID(void) const { return getStaticClassID(); }$/;"	f	class:KeywordEnumeration	access:public	signature:(void) const
getDynamicClassID	serv.h	/^  virtual UClassID getDynamicClassID() const;$/;"	p	class:ICUServiceKey	access:public	signature:() const
getDynamicClassID	servloc.h	/^    virtual UClassID getDynamicClassID() const;$/;"	p	class:LocaleKey	access:public	signature:() const
getDynamicClassID	servls.cpp	/^    virtual UClassID getDynamicClassID(void) const;$/;"	p	class:ServiceEnumeration	file:	access:public	signature:(void) const
getDynamicClassID	servnotf.h	/^    virtual UClassID getDynamicClassID() const;$/;"	p	class:EventListener	access:public	signature:() const
getDynamicClassID	triedict.cpp	/^    virtual UClassID getDynamicClassID(void) const;$/;"	p	class:CompactTrieEnumeration	file:	access:public	signature:(void) const
getDynamicClassID	triedict.cpp	/^    virtual UClassID getDynamicClassID(void) const;$/;"	p	class:MutableTrieEnumeration	file:	access:public	signature:(void) const
getDynamicClassID	unicode/brkiter.h	/^    virtual UClassID getDynamicClassID(void) const = 0;$/;"	p	class:BreakIterator	access:public	signature:(void) const
getDynamicClassID	unicode/caniter.h	/^    virtual UClassID getDynamicClassID() const;$/;"	p	class:CanonicalIterator	access:public	signature:() const
getDynamicClassID	unicode/chariter.h	/^    virtual UClassID getDynamicClassID(void) const = 0;$/;"	p	class:ForwardCharacterIterator	access:public	signature:(void) const
getDynamicClassID	unicode/dtintrv.h	/^    virtual UClassID getDynamicClassID(void) const;$/;"	p	class:DateInterval	access:public	signature:(void) const
getDynamicClassID	unicode/idna.h	/^    virtual UClassID getDynamicClassID() const;$/;"	p	class:IDNA	access:private	signature:() const
getDynamicClassID	unicode/locid.h	/^    virtual UClassID getDynamicClassID() const;$/;"	p	class:Locale	access:public	signature:() const
getDynamicClassID	unicode/normalizer2.h	/^    virtual UClassID getDynamicClassID() const;$/;"	p	class:Normalizer2	access:private	signature:() const
getDynamicClassID	unicode/normlzr.h	/^  virtual UClassID getDynamicClassID() const;$/;"	p	class:Normalizer	access:public	signature:() const
getDynamicClassID	unicode/parsepos.h	/^    virtual UClassID getDynamicClassID() const;$/;"	p	class:ParsePosition	access:public	signature:() const
getDynamicClassID	unicode/rbbi.h	/^    virtual UClassID getDynamicClassID(void) const;$/;"	p	class:RuleBasedBreakIterator	access:public	signature:(void) const
getDynamicClassID	unicode/resbund.h	/^    virtual UClassID getDynamicClassID() const;$/;"	p	class:ResourceBundle	access:public	signature:() const
getDynamicClassID	unicode/schriter.h	/^  virtual UClassID         getDynamicClassID(void) const;$/;"	p	class:StringCharacterIterator	access:public	signature:(void) const
getDynamicClassID	unicode/uchriter.h	/^  virtual UClassID        getDynamicClassID(void) const;$/;"	p	class:UCharCharacterIterator	access:public	signature:(void) const
getDynamicClassID	unicode/unifunct.h	/^    virtual UClassID getDynamicClassID(void) const = 0;$/;"	p	class:UnicodeFunctor	access:public	signature:(void) const
getDynamicClassID	unicode/uniset.h	/^    virtual UClassID getDynamicClassID(void) const;$/;"	p	class:UnicodeSet	access:public	signature:(void) const
getDynamicClassID	unicode/unistr.h	/^  virtual UClassID getDynamicClassID() const;$/;"	p	class:UnicodeString	access:public	signature:() const
getDynamicClassID	unicode/uobject.h	/^    virtual UClassID getDynamicClassID() const = 0;$/;"	p	class:UObject	access:public	signature:() const
getDynamicClassID	unicode/usetiter.h	/^    virtual UClassID getDynamicClassID() const;$/;"	p	class:UnicodeSetIterator	access:public	signature:() const
getDynamicClassID	ustrenum.h	/^    virtual UClassID getDynamicClassID() const;$/;"	p	class:UStringEnumeration	access:public	signature:() const
getDynamicClassID	uvector.h	/^    virtual UClassID getDynamicClassID() const;$/;"	p	class:UStack	access:public	signature:() const
getDynamicClassID	uvector.h	/^    virtual UClassID getDynamicClassID() const;$/;"	p	class:UVector	access:public	signature:() const
getDynamicClassID	uvectr32.h	/^    virtual UClassID getDynamicClassID() const;$/;"	p	class:UVector32	access:public	signature:() const
getDynamicClassID	uvectr64.h	/^    virtual UClassID getDynamicClassID() const;$/;"	p	class:UVector64	access:public	signature:() const
getDynamicOffset	ucnvscsu.c	/^getDynamicOffset(uint32_t c, uint32_t *pOffset) {$/;"	f	file:	signature:(uint32_t c, uint32_t *pOffset)
getEBCDICPropertyNameChar	propname.cpp	/^getEBCDICPropertyNameChar(const char *name) {$/;"	f	file:	signature:(const char *name)
getEndOfBuffer_2022	ucnv2022.c	/^getEndOfBuffer_2022(const char** source,$/;"	f	file:	signature:(const char** source, const char* sourceLimit, UBool flush)
getEngineFor	brkeng.cpp	/^ICULanguageBreakFactory::getEngineFor(UChar32 c, int32_t breakType) {$/;"	f	class:ICULanguageBreakFactory	signature:(UChar32 c, int32_t breakType)
getEngineFor	brkeng.h	/^  virtual const LanguageBreakEngine *getEngineFor(UChar32 c, int32_t breakType) = 0;$/;"	p	class:LanguageBreakFactory	access:public	signature:(UChar32 c, int32_t breakType)
getEngineFor	brkeng.h	/^  virtual const LanguageBreakEngine *getEngineFor(UChar32 c, int32_t breakType);$/;"	p	class:ICULanguageBreakFactory	access:public	signature:(UChar32 c, int32_t breakType)
getEnglish	locid.cpp	/^Locale::getEnglish(void)$/;"	f	class:Locale	signature:(void)
getEnglish	unicode/locid.h	/^    static const Locale &U_EXPORT2 getEnglish(void);$/;"	p	class:Locale	access:public	signature:(void)
getEnum	propname.h	/^    EnumValue getEnum(const char* alias, const PropertyAliases& data) const {$/;"	f	class:NameToEnum	access:public	signature:(const char* alias, const PropertyAliases& data) const
getEnumArray	propname.h	/^    EnumValue* getEnumArray() {$/;"	f	class:NameToEnum	access:private	signature:()
getEnumArray	propname.h	/^    EnumValue* getEnumArray() {$/;"	f	class:NonContiguousEnumToOffset	access:private	signature:()
getEnumArray	propname.h	/^    const EnumValue* getEnumArray() const {$/;"	f	class:NameToEnum	access:private	signature:() const
getEnumArray	propname.h	/^    const EnumValue* getEnumArray() const {$/;"	f	class:NonContiguousEnumToOffset	access:private	signature:() const
getEquivalents	caniter.cpp	/^UnicodeString* CanonicalIterator::getEquivalents(const UnicodeString &segment, int32_t &result_len, UErrorCode &status) {$/;"	f	class:CanonicalIterator	signature:(const UnicodeString &segment, int32_t &result_len, UErrorCode &status)
getEquivalents	unicode/caniter.h	/^    UnicodeString *getEquivalents(const UnicodeString &segment, int32_t &result_len, UErrorCode &status); \/\/private String[] getEquivalents(String segment)$/;"	p	class:CanonicalIterator	access:private	signature:(const UnicodeString &segment, int32_t &result_len, UErrorCode &status)
getEquivalents2	caniter.cpp	/^Hashtable *CanonicalIterator::getEquivalents2(Hashtable *fillinResult, const UChar *segment, int32_t segLen, UErrorCode &status) {$/;"	f	class:CanonicalIterator	signature:(Hashtable *fillinResult, const UChar *segment, int32_t segLen, UErrorCode &status)
getEquivalents2	unicode/caniter.h	/^    Hashtable *getEquivalents2(Hashtable *fillinResult, const UChar *segment, int32_t segLen, UErrorCode &status);$/;"	p	class:CanonicalIterator	access:private	signature:(Hashtable *fillinResult, const UChar *segment, int32_t segLen, UErrorCode &status)
getErrorIndex	unicode/parsepos.h	/^    int32_t getErrorIndex(void) const;$/;"	p	class:ParsePosition	access:public	signature:(void) const
getErrorIndex	unicode/parsepos.h	/^ParsePosition::getErrorIndex() const$/;"	f	class:ParsePosition	signature:() const
getErrors	unicode/idna.h	/^    uint32_t getErrors() const { return errors; }$/;"	f	class:IDNAInfo	access:public	signature:() const
getExtName	unames.c	/^static uint16_t getExtName(uint32_t code, char *buffer, uint16_t bufferLength) {$/;"	f	file:	signature:(uint32_t code, char *buffer, uint16_t bufferLength)
getFCCInstance	normalizer2.cpp	/^const Normalizer2 *Normalizer2Factory::getFCCInstance(UErrorCode &errorCode) {$/;"	f	class:Normalizer2Factory	signature:(UErrorCode &errorCode)
getFCCInstance	normalizer2impl.h	/^    static const Normalizer2 *getFCCInstance(UErrorCode &errorCode);$/;"	p	class:Normalizer2Factory	access:public	signature:(UErrorCode &errorCode)
getFCD16	normalizer2impl.h	/^    uint16_t getFCD16(UChar32 c) const { return UTRIE2_GET16(fcdTrie(), c); }$/;"	f	class:Normalizer2Impl	access:public	signature:(UChar32 c) const
getFCD16	uprops.cpp	/^getFCD16(UChar32 c) {$/;"	f	file:	signature:(UChar32 c)
getFCD16FromSingleLead	normalizer2impl.h	/^    uint16_t getFCD16FromSingleLead(UChar c) const {$/;"	f	class:Normalizer2Impl	access:public	signature:(UChar c) const
getFCD16FromSupplementary	normalizer2impl.h	/^    uint16_t getFCD16FromSupplementary(UChar32 c) const {$/;"	f	class:Normalizer2Impl	access:public	signature:(UChar32 c) const
getFCD16FromSurrogatePair	normalizer2impl.h	/^    uint16_t getFCD16FromSurrogatePair(UChar c, UChar c2) const {$/;"	f	class:Normalizer2Impl	access:public	signature:(UChar c, UChar c2) const
getFCDInstance	normalizer2.cpp	/^const Normalizer2 *Normalizer2Factory::getFCDInstance(UErrorCode &errorCode) {$/;"	f	class:Normalizer2Factory	signature:(UErrorCode &errorCode)
getFCDInstance	normalizer2impl.h	/^    static const Normalizer2 *getFCDInstance(UErrorCode &errorCode);$/;"	p	class:Normalizer2Factory	access:public	signature:(UErrorCode &errorCode)
getFCDTrie	normalizer2.cpp	/^Normalizer2Factory::getFCDTrie(UErrorCode &errorCode) {$/;"	f	class:Normalizer2Factory	signature:(UErrorCode &errorCode)
getFCDTrie	normalizer2impl.cpp	/^const UTrie2 *Normalizer2Impl::getFCDTrie(UErrorCode &errorCode) const {$/;"	f	class:Normalizer2Impl	signature:(UErrorCode &errorCode) const
getFCDTrie	normalizer2impl.h	/^    const UTrie2 *getFCDTrie(UErrorCode &errorCode) const ;$/;"	p	class:Normalizer2Impl	access:public	signature:(UErrorCode &errorCode) const
getFCDTrie	normalizer2impl.h	/^    static const UTrie2 *getFCDTrie(UErrorCode &errorCode);$/;"	p	class:Normalizer2Factory	access:public	signature:(UErrorCode &errorCode)
getFallbackData	uresbund.c	/^static const ResourceData *getFallbackData(const UResourceBundle* resBundle, const char* * resTag, UResourceDataEntry* *realData, Resource *res, UErrorCode *status) {$/;"	f	file:	signature:(const UResourceBundle* resBundle, const char* * resTag, UResourceDataEntry* *realData, Resource *res, UErrorCode *status)
getFirstChar	rbbisetb.cpp	/^UChar32  RBBISetBuilder::getFirstChar(int32_t category) const {$/;"	f	class:RBBISetBuilder	signature:(int32_t category) const
getFirstChar	rbbisetb.h	/^    UChar32  getFirstChar(int32_t  val) const;$/;"	p	class:RBBISetBuilder	access:public	signature:(int32_t val) const
getFoldedRBBIValue	rbbisetb.cpp	/^getFoldedRBBIValue(UNewTrie *trie, UChar32 start, int32_t offset) {$/;"	f	file:	signature:(UNewTrie *trie, UChar32 start, int32_t offset)
getFoldingOffset	rbbidata.cpp	/^getFoldingOffset(uint32_t data) {$/;"	f	file:	signature:(uint32_t data)
getFoldingOffset	utrie.h	/^    UTrieGetFoldingOffset *getFoldingOffset;$/;"	m	struct:UTrie	access:public
getFrance	locid.cpp	/^Locale::getFrance(void)$/;"	f	class:Locale	signature:(void)
getFrance	unicode/locid.h	/^    static const Locale &U_EXPORT2 getFrance(void);$/;"	p	class:Locale	access:public	signature:(void)
getFrench	locid.cpp	/^Locale::getFrench(void)$/;"	f	class:Locale	signature:(void)
getFrench	unicode/locid.h	/^    static const Locale &U_EXPORT2 getFrench(void);$/;"	p	class:Locale	access:public	signature:(void)
getFromDate	unicode/dtintrv.h	/^    UDate getFromDate() const;$/;"	p	class:DateInterval	access:public	signature:() const
getFromDate	unicode/dtintrv.h	/^DateInterval::getFromDate() const { $/;"	f	class:DateInterval	signature:() const
getGeneralCategory	uprops.cpp	/^static int32_t getGeneralCategory(const IntProperty &\/*prop*\/, UChar32 c, UProperty \/*which*\/) {$/;"	f	file:	signature:(const IntProperty & , UChar32 c, UProperty )
getGerman	locid.cpp	/^Locale::getGerman(void)$/;"	f	class:Locale	signature:(void)
getGerman	unicode/locid.h	/^    static const Locale &U_EXPORT2 getGerman(void);$/;"	p	class:Locale	access:public	signature:(void)
getGermany	locid.cpp	/^Locale::getGermany(void)$/;"	f	class:Locale	signature:(void)
getGermany	unicode/locid.h	/^    static const Locale &U_EXPORT2 getGermany(void);$/;"	p	class:Locale	access:public	signature:(void)
getGroup	unames.c	/^getGroup(UCharNames *names, uint32_t code) {$/;"	f	file:	signature:(UCharNames *names, uint32_t code)
getHangulSyllableType	uprops.cpp	/^static int32_t getHangulSyllableType(const IntProperty &\/*prop*\/, UChar32 c, UProperty \/*which*\/) {$/;"	f	file:	signature:(const IntProperty & , UChar32 c, UProperty )
getHostID	locmap.c	/^getHostID(const ILcidPosixMap *this_0, const char* posixID, UErrorCode* status)$/;"	f	file:	signature:(const ILcidPosixMap *this_0, const char* posixID, UErrorCode* status)
getID	serv.cpp	/^ICUServiceKey::getID() const $/;"	f	class:ICUServiceKey	signature:() const
getID	serv.h	/^  virtual const UnicodeString& getID() const;$/;"	p	class:ICUServiceKey	access:public	signature:() const
getISO3Country	locid.cpp	/^Locale::getISO3Country() const$/;"	f	class:Locale	signature:() const
getISO3Country	unicode/locid.h	/^    const char * getISO3Country() const;$/;"	p	class:Locale	access:public	signature:() const
getISO3Language	locid.cpp	/^Locale::getISO3Language() const$/;"	f	class:Locale	signature:() const
getISO3Language	unicode/locid.h	/^    const char * getISO3Language() const;$/;"	p	class:Locale	access:public	signature:() const
getISOCountries	locid.cpp	/^const char* const* U_EXPORT2 Locale::getISOCountries()$/;"	f	class:Locale	signature:()
getISOCountries	unicode/locid.h	/^    static const char* const* U_EXPORT2 getISOCountries();$/;"	p	class:Locale	access:public	signature:()
getISOLanguages	locid.cpp	/^const char* const* U_EXPORT2 Locale::getISOLanguages()$/;"	f	class:Locale	signature:()
getISOLanguages	unicode/locid.h	/^    static const char* const* U_EXPORT2 getISOLanguages();$/;"	p	class:Locale	access:public	signature:()
getImpl	normalizer2.cpp	/^Normalizer2Factory::getImpl(const Normalizer2 *norm2) {$/;"	f	class:Normalizer2Factory	signature:(const Normalizer2 *norm2)
getImpl	normalizer2impl.h	/^    static const Normalizer2Impl *getImpl(const Normalizer2 *norm2);$/;"	p	class:Normalizer2Factory	access:public	signature:(const Normalizer2 *norm2)
getInclusions	unicode/uniset.h	/^    static const UnicodeSet* getInclusions(int32_t src, UErrorCode &status);$/;"	p	class:UnicodeSet	access:private	signature:(int32_t src, UErrorCode &status)
getInclusions	uniset_props.cpp	/^const UnicodeSet* UnicodeSet::getInclusions(int32_t src, UErrorCode &status) {$/;"	f	class:UnicodeSet	signature:(int32_t src, UErrorCode &status)
getIndex	normlzr.cpp	/^int32_t Normalizer::getIndex() const {$/;"	f	class:Normalizer	signature:() const
getIndex	unicode/chariter.h	/^    inline int32_t       getIndex(void) const;$/;"	p	class:CharacterIterator	access:public	signature:(void) const
getIndex	unicode/chariter.h	/^CharacterIterator::getIndex(void) const {$/;"	f	class:CharacterIterator	signature:(void) const
getIndex	unicode/normlzr.h	/^  int32_t            getIndex(void) const;$/;"	p	class:Normalizer	access:public	signature:(void) const
getIndex	unicode/parsepos.h	/^    int32_t getIndex(void) const;$/;"	p	class:ParsePosition	access:public	signature:(void) const
getIndex	unicode/parsepos.h	/^ParsePosition::getIndex() const$/;"	f	class:ParsePosition	signature:() const
getIndex	unicode/uiter.h	/^    UCharIteratorGetIndex *getIndex;$/;"	m	struct:UCharIterator	access:public
getIndex2Block	utrie2_builder.c	/^getIndex2Block(UNewTrie2 *trie, UChar32 c, UBool forLSCP) {$/;"	f	file:	signature:(UNewTrie2 *trie, UChar32 c, UBool forLSCP)
getInitialDirPropsMemory	ubidiimp.h	367;"	d
getInitialLevelsMemory	ubidiimp.h	371;"	d
getInitialParasMemory	ubidiimp.h	375;"	d
getInitialRunsMemory	ubidiimp.h	379;"	d
getInstance	mutex.cpp	/^void *SimpleSingleton::getInstance(InstantiatorFn *instantiator, const void *context,$/;"	f	class:SimpleSingleton	signature:(InstantiatorFn *instantiator, const void *context, void *&duplicate, UErrorCode &errorCode)
getInstance	mutex.cpp	/^void *TriStateSingleton::getInstance(InstantiatorFn *instantiator, const void *context,$/;"	f	class:TriStateSingleton	signature:(InstantiatorFn *instantiator, const void *context, void *&duplicate, UErrorCode &errorCode)
getInstance	mutex.h	/^    T *getInstance(InstantiatorFn *instantiator, const void *context,$/;"	f	class:SimpleSingletonWrapper	access:public	signature:(InstantiatorFn *instantiator, const void *context, UErrorCode &errorCode)
getInstance	mutex.h	/^    T *getInstance(InstantiatorFn *instantiator, const void *context,$/;"	f	class:TriStateSingletonWrapper	access:public	signature:(InstantiatorFn *instantiator, const void *context, UErrorCode &errorCode)
getInstance	mutex.h	/^    void *getInstance(InstantiatorFn *instantiator, const void *context,$/;"	p	struct:SimpleSingleton	access:public	signature:(InstantiatorFn *instantiator, const void *context, void *&duplicate, UErrorCode &errorCode)
getInstance	mutex.h	/^    void *getInstance(InstantiatorFn *instantiator, const void *context,$/;"	p	struct:TriStateSingleton	access:public	signature:(InstantiatorFn *instantiator, const void *context, void *&duplicate, UErrorCode &errorCode)
getInstance	normalizer2.cpp	/^    Norm2AllModes *getInstance(UErrorCode &errorCode) {$/;"	f	class:Norm2AllModesSingleton	access:public	signature:(UErrorCode &errorCode)
getInstance	normalizer2.cpp	/^    Normalizer2 *getInstance(UErrorCode &errorCode) {$/;"	f	class:Norm2Singleton	access:public	signature:(UErrorCode &errorCode)
getInstance	normalizer2.cpp	/^Normalizer2::getInstance(const char *packageName,$/;"	f	class:Normalizer2	signature:(const char *packageName, const char *name, UNormalization2Mode mode, UErrorCode &errorCode)
getInstance	normalizer2.cpp	/^Normalizer2Factory::getInstance(UNormalizationMode mode, UErrorCode &errorCode) {$/;"	f	class:Normalizer2Factory	signature:(UNormalizationMode mode, UErrorCode &errorCode)
getInstance	normalizer2impl.cpp	/^    CanonIterData *getInstance(UErrorCode &errorCode) {$/;"	f	class:CanonIterDataSingleton	access:public	signature:(UErrorCode &errorCode)
getInstance	normalizer2impl.cpp	/^    UTrie2 *getInstance(UErrorCode &errorCode) {$/;"	f	class:FCDTrieSingleton	access:public	signature:(UErrorCode &errorCode)
getInstance	normalizer2impl.h	/^    static const Normalizer2 *getInstance(UNormalizationMode mode, UErrorCode &errorCode);$/;"	p	class:Normalizer2Factory	access:public	signature:(UNormalizationMode mode, UErrorCode &errorCode)
getInstance	unicode/normalizer2.h	/^    getInstance(const char *packageName,$/;"	p	class:Normalizer2	access:public	signature:(const char *packageName, const char *name, UNormalization2Mode mode, UErrorCode &errorCode)
getInstance	uniset_props.cpp	/^    UnicodeSet *getInstance(UErrorCode &errorCode) {$/;"	f	class:UnicodeSetSingleton	access:public	signature:(UErrorCode &errorCode)
getInstance	utrie2.cpp	/^UTrie2 *UTrie2Singleton::getInstance(InstantiatorFn *instantiator, const void *context,$/;"	f	class:UTrie2Singleton	signature:(InstantiatorFn *instantiator, const void *context, UErrorCode &errorCode)
getInstance	utrie2.h	/^    UTrie2 *getInstance(InstantiatorFn *instantiator, const void *context,$/;"	p	class:UTrie2Singleton	access:public	signature:(InstantiatorFn *instantiator, const void *context, UErrorCode &errorCode)
getInt	resbund.cpp	/^int32_t ResourceBundle::getInt(UErrorCode& status) const {$/;"	f	class:ResourceBundle	signature:(UErrorCode& status) const
getInt	unicode/resbund.h	/^      getInt(UErrorCode& status) const;$/;"	p	class:ResourceBundle	access:public	signature:(UErrorCode& status) const
getIntVector	resbund.cpp	/^const int32_t *ResourceBundle::getIntVector(int32_t& len, UErrorCode& status) const {$/;"	f	class:ResourceBundle	signature:(int32_t& len, UErrorCode& status) const
getIntVector	unicode/resbund.h	/^      getIntVector(int32_t& len, UErrorCode& status) const;$/;"	p	class:ResourceBundle	access:public	signature:(int32_t& len, UErrorCode& status) const
getItalian	locid.cpp	/^Locale::getItalian(void)$/;"	f	class:Locale	signature:(void)
getItalian	unicode/locid.h	/^    static const Locale &U_EXPORT2 getItalian(void);$/;"	p	class:Locale	access:public	signature:(void)
getItaly	locid.cpp	/^Locale::getItaly(void)$/;"	f	class:Locale	signature:(void)
getItaly	unicode/locid.h	/^    static const Locale &U_EXPORT2 getItaly(void);$/;"	p	class:Locale	access:public	signature:(void)
getJapan	locid.cpp	/^Locale::getJapan(void)$/;"	f	class:Locale	signature:(void)
getJapan	unicode/locid.h	/^    static const Locale &U_EXPORT2 getJapan(void);$/;"	p	class:Locale	access:public	signature:(void)
getJapanese	locid.cpp	/^Locale::getJapanese(void)$/;"	f	class:Locale	signature:(void)
getJapanese	unicode/locid.h	/^    static const Locale &U_EXPORT2 getJapanese(void);$/;"	p	class:Locale	access:public	signature:(void)
getJoiningGroup	uprops.cpp	/^static int32_t getJoiningGroup(const IntProperty &\/*prop*\/, UChar32 c, UProperty \/*which*\/) {$/;"	f	file:	signature:(const IntProperty & , UChar32 c, UProperty )
getJoiningType	uprops.cpp	/^static int32_t getJoiningType(const IntProperty &\/*prop*\/, UChar32 c, UProperty \/*which*\/) {$/;"	f	file:	signature:(const IntProperty & , UChar32 c, UProperty )
getKey	resbund.cpp	/^const char *ResourceBundle::getKey(void) const {$/;"	f	class:ResourceBundle	signature:(void) const
getKey	serv.cpp	/^ICUService::getKey(ICUServiceKey& key, UErrorCode& status) const $/;"	f	class:ICUService	signature:(ICUServiceKey& key, UErrorCode& status) const
getKey	serv.cpp	/^ICUService::getKey(ICUServiceKey& key, UnicodeString* actualReturn, UErrorCode& status) const $/;"	f	class:ICUService	signature:(ICUServiceKey& key, UnicodeString* actualReturn, UErrorCode& status) const
getKey	serv.cpp	/^ICUService::getKey(ICUServiceKey& key, UnicodeString* actualReturn, const ICUServiceFactory* factory, UErrorCode& status) const $/;"	f	class:ICUService	signature:(ICUServiceKey& key, UnicodeString* actualReturn, const ICUServiceFactory* factory, UErrorCode& status) const
getKey	unicode/resbund.h	/^      getKey(void) const;$/;"	p	class:ResourceBundle	access:public	signature:(void) const
getKey_2022	ucnv2022.c	/^getKey_2022(char c,int32_t* key,int32_t* offset){$/;"	f	file:	signature:(char c,int32_t* key,int32_t* offset)
getKeywordValue	locid.cpp	/^Locale::getKeywordValue(const char* keywordName, char *buffer, int32_t bufLen, UErrorCode &status) const$/;"	f	class:Locale	signature:(const char* keywordName, char *buffer, int32_t bufLen, UErrorCode &status) const
getKeywordValue	unicode/locid.h	/^    int32_t getKeywordValue(const char* keywordName, char *buffer, int32_t bufferCapacity, UErrorCode &status) const;$/;"	p	class:Locale	access:public	signature:(const char* keywordName, char *buffer, int32_t bufferCapacity, UErrorCode &status) const
getKorea	locid.cpp	/^Locale::getKorea(void)$/;"	f	class:Locale	signature:(void)
getKorea	unicode/locid.h	/^    static const Locale &U_EXPORT2 getKorea(void);$/;"	p	class:Locale	access:public	signature:(void)
getKorean	locid.cpp	/^Locale::getKorean(void)$/;"	f	class:Locale	signature:(void)
getKorean	unicode/locid.h	/^    static const Locale &U_EXPORT2 getKorean(void);$/;"	p	class:Locale	access:public	signature:(void)
getLCID	locid.cpp	/^Locale::getLCID() const$/;"	f	class:Locale	signature:() const
getLCID	unicode/locid.h	/^    uint32_t        getLCID(void) const;$/;"	p	class:Locale	access:public	signature:(void) const
getLanguage	unicode/locid.h	/^    inline const char *  getLanguage( ) const;$/;"	p	class:Locale	access:public	signature:( ) const
getLanguage	unicode/locid.h	/^Locale::getLanguage() const$/;"	f	class:Locale	signature:() const
getLanguageBreakEngine	rbbi.cpp	/^RuleBasedBreakIterator::getLanguageBreakEngine(UChar32 c) {$/;"	f	class:RuleBasedBreakIterator	signature:(UChar32 c)
getLanguageBreakEngine	unicode/rbbi.h	/^    const LanguageBreakEngine *getLanguageBreakEngine(UChar32 c);$/;"	p	class:RuleBasedBreakIterator	access:private	signature:(UChar32 c)
getLanguageBreakEngineFromFactory	rbbi.cpp	/^getLanguageBreakEngineFromFactory(UChar32 c, int32_t breakType)$/;"	f	file:	signature:(UChar32 c, int32_t breakType)
getLastCC	normalizer2impl.h	/^    uint8_t getLastCC() const { return lastCC; }$/;"	f	class:ReorderingBuffer	access:public	signature:() const
getLeadCombiningClass	uprops.cpp	/^static int32_t getLeadCombiningClass(const IntProperty &, UChar32, UProperty) {$/;"	f	file:	signature:(const IntProperty &, UChar32, UProperty)
getLeadCombiningClass	uprops.cpp	/^static int32_t getLeadCombiningClass(const IntProperty &\/*prop*\/, UChar32 c, UProperty \/*which*\/) {$/;"	f	file:	signature:(const IntProperty & , UChar32 c, UProperty )
getLength	unicode/chariter.h	/^    inline int32_t           getLength() const;$/;"	p	class:CharacterIterator	access:public	signature:() const
getLength	unicode/chariter.h	/^CharacterIterator::getLength(void) const {$/;"	f	class:CharacterIterator	signature:(void) const
getLength	unicode/rep.h	/^    virtual int32_t getLength() const = 0;$/;"	p	class:Replaceable	access:protected	signature:() const
getLength	unicode/unistr.h	/^  virtual int32_t getLength() const;$/;"	p	class:UnicodeString	access:protected	signature:() const
getLength	unistr.cpp	/^UnicodeString::getLength() const {$/;"	f	class:UnicodeString	signature:() const
getLevelsMemory	ubidiimp.h	358;"	d
getLimit	normalizer2impl.h	/^    UChar *getLimit() { return limit; }$/;"	f	class:ReorderingBuffer	access:public	signature:()
getLink	ushape.c	/^getLink(UChar ch) {$/;"	f	file:	signature:(UChar ch)
getLocale	brkiter.cpp	/^BreakIterator::getLocale(ULocDataLocaleType type, UErrorCode& status) const {$/;"	f	class:BreakIterator	signature:(ULocDataLocaleType type, UErrorCode& status) const
getLocale	locbased.cpp	/^Locale LocaleBased::getLocale(ULocDataLocaleType type, UErrorCode& status) const {$/;"	f	class:LocaleBased	signature:(ULocDataLocaleType type, UErrorCode& status) const
getLocale	locbased.h	/^    Locale getLocale(ULocDataLocaleType type, UErrorCode& status) const;$/;"	p	class:LocaleBased	access:public	signature:(ULocDataLocaleType type, UErrorCode& status) const
getLocale	locid.cpp	/^Locale::getLocale(int locid)$/;"	f	class:Locale	signature:(int locid)
getLocale	resbund.cpp	/^const Locale &ResourceBundle::getLocale(void) const$/;"	f	class:ResourceBundle	signature:(void) const
getLocale	resbund.cpp	/^const Locale ResourceBundle::getLocale(ULocDataLocaleType type, UErrorCode &status) const$/;"	f	class:ResourceBundle	signature:(ULocDataLocaleType type, UErrorCode &status) const
getLocale	unicode/locid.h	/^    static const Locale &getLocale(int locid);$/;"	p	class:Locale	access:private	signature:(int locid)
getLocale	unicode/resbund.h	/^      getLocale(ULocDataLocaleType type, UErrorCode &status) const;$/;"	p	class:ResourceBundle	access:public	signature:(ULocDataLocaleType type, UErrorCode &status) const
getLocale	unicode/resbund.h	/^      getLocale(void) const;$/;"	p	class:ResourceBundle	access:public	signature:(void) const
getLocaleCache	locid.cpp	/^Locale::getLocaleCache(void)$/;"	f	class:Locale	signature:(void)
getLocaleCache	unicode/locid.h	/^    static Locale *getLocaleCache(void);$/;"	p	class:Locale	access:private	signature:(void)
getLocaleID	brkiter.cpp	/^BreakIterator::getLocaleID(ULocDataLocaleType type, UErrorCode& status) const {$/;"	f	class:BreakIterator	signature:(ULocDataLocaleType type, UErrorCode& status) const
getLocaleID	locbased.cpp	/^const char* LocaleBased::getLocaleID(ULocDataLocaleType type, UErrorCode& status) const {$/;"	f	class:LocaleBased	signature:(ULocDataLocaleType type, UErrorCode& status) const
getLocaleID	locbased.h	/^    const char* getLocaleID(ULocDataLocaleType type, UErrorCode& status) const;$/;"	p	class:LocaleBased	access:public	signature:(ULocDataLocaleType type, UErrorCode& status) const
getMapping	normalizer2impl.h	/^    const uint16_t *getMapping(uint16_t norm16) const { return extraData+norm16; }$/;"	f	class:Normalizer2Impl	access:private	signature:(uint16_t norm16) const
getMaxValue	uprops.cpp	/^    IntPropertyGetMaxValue *getMaxValue;$/;"	m	struct:IntProperty	file:	access:public
getMaxValueFromShift	uprops.cpp	/^static int32_t getMaxValueFromShift(const IntProperty &prop, UProperty \/*which*\/) {$/;"	f	file:	signature:(const IntProperty &prop, UProperty )
getNFCImpl	normalizer2.cpp	/^Normalizer2Factory::getNFCImpl(UErrorCode &errorCode) {$/;"	f	class:Normalizer2Factory	signature:(UErrorCode &errorCode)
getNFCImpl	normalizer2impl.h	/^    static const Normalizer2Impl *getNFCImpl(UErrorCode &errorCode);$/;"	p	class:Normalizer2Factory	access:public	signature:(UErrorCode &errorCode)
getNFCInstance	normalizer2.cpp	/^const Normalizer2 *Normalizer2Factory::getNFCInstance(UErrorCode &errorCode) {$/;"	f	class:Normalizer2Factory	signature:(UErrorCode &errorCode)
getNFCInstance	normalizer2impl.h	/^    static const Normalizer2 *getNFCInstance(UErrorCode &errorCode);$/;"	p	class:Normalizer2Factory	access:public	signature:(UErrorCode &errorCode)
getNFDInstance	normalizer2.cpp	/^const Normalizer2 *Normalizer2Factory::getNFDInstance(UErrorCode &errorCode) {$/;"	f	class:Normalizer2Factory	signature:(UErrorCode &errorCode)
getNFDInstance	normalizer2impl.h	/^    static const Normalizer2 *getNFDInstance(UErrorCode &errorCode);$/;"	p	class:Normalizer2Factory	access:public	signature:(UErrorCode &errorCode)
getNFKCImpl	normalizer2.cpp	/^Normalizer2Factory::getNFKCImpl(UErrorCode &errorCode) {$/;"	f	class:Normalizer2Factory	signature:(UErrorCode &errorCode)
getNFKCImpl	normalizer2impl.h	/^    static const Normalizer2Impl *getNFKCImpl(UErrorCode &errorCode);$/;"	p	class:Normalizer2Factory	access:public	signature:(UErrorCode &errorCode)
getNFKCInstance	normalizer2.cpp	/^const Normalizer2 *Normalizer2Factory::getNFKCInstance(UErrorCode &errorCode) {$/;"	f	class:Normalizer2Factory	signature:(UErrorCode &errorCode)
getNFKCInstance	normalizer2impl.h	/^    static const Normalizer2 *getNFKCInstance(UErrorCode &errorCode);$/;"	p	class:Normalizer2Factory	access:public	signature:(UErrorCode &errorCode)
getNFKC_CFImpl	normalizer2.cpp	/^Normalizer2Factory::getNFKC_CFImpl(UErrorCode &errorCode) {$/;"	f	class:Normalizer2Factory	signature:(UErrorCode &errorCode)
getNFKC_CFImpl	normalizer2impl.h	/^    static const Normalizer2Impl *getNFKC_CFImpl(UErrorCode &errorCode);$/;"	p	class:Normalizer2Factory	access:public	signature:(UErrorCode &errorCode)
getNFKC_CFInstance	normalizer2.cpp	/^const Normalizer2 *Normalizer2Factory::getNFKC_CFInstance(UErrorCode &errorCode) {$/;"	f	class:Normalizer2Factory	signature:(UErrorCode &errorCode)
getNFKC_CFInstance	normalizer2impl.h	/^    static const Normalizer2 *getNFKC_CFInstance(UErrorCode &errorCode);$/;"	p	class:Normalizer2Factory	access:public	signature:(UErrorCode &errorCode)
getNFKDInstance	normalizer2.cpp	/^const Normalizer2 *Normalizer2Factory::getNFKDInstance(UErrorCode &errorCode) {$/;"	f	class:Normalizer2Factory	signature:(UErrorCode &errorCode)
getNFKDInstance	normalizer2impl.h	/^    static const Normalizer2 *getNFKDInstance(UErrorCode &errorCode);$/;"	p	class:Normalizer2Factory	access:public	signature:(UErrorCode &errorCode)
getName	resbund.cpp	/^const char *ResourceBundle::getName(void) const {$/;"	f	class:ResourceBundle	signature:(void) const
getName	serv.cpp	/^ICUService::getName(UnicodeString& result) const $/;"	f	class:ICUService	signature:(UnicodeString& result) const
getName	ucnv_cnv.h	/^    UConverterGetName getName;$/;"	m	struct:UConverterImpl	access:public
getName	unames.c	/^getName(UCharNames *names, uint32_t code, UCharNameChoice nameChoice,$/;"	f	file:	signature:(UCharNames *names, uint32_t code, UCharNameChoice nameChoice, char *buffer, uint16_t bufferLength)
getName	unicode/locid.h	/^    inline const char * getName() const;$/;"	p	class:Locale	access:public	signature:() const
getName	unicode/locid.h	/^Locale::getName() const$/;"	f	class:Locale	signature:() const
getName	unicode/resbund.h	/^      getName(void) const;$/;"	p	class:ResourceBundle	access:public	signature:(void) const
getNameArray	propname.h	/^    Offset* getNameArray() {$/;"	f	class:NameToEnum	access:private	signature:()
getNameArray	propname.h	/^    const Offset* getNameArray() const {$/;"	f	class:NameToEnum	access:private	signature:() const
getNext	resbund.cpp	/^ResourceBundle ResourceBundle::getNext(UErrorCode& status) {$/;"	f	class:ResourceBundle	signature:(UErrorCode& status)
getNext	unicode/resbund.h	/^      getNext(UErrorCode& status);$/;"	p	class:ResourceBundle	access:public	signature:(UErrorCode& status)
getNextDynamicWindow	ucnvscsu.c	/^getNextDynamicWindow(SCSUData *scsu) {$/;"	f	file:	signature:(SCSUData *scsu)
getNextSeparator	uidna.cpp	/^getNextSeparator(UChar *src, int32_t srcLength,$/;"	f	file:	signature:(UChar *src, int32_t srcLength, UChar **limit, UBool *done)
getNextString	resbund.cpp	/^UnicodeString ResourceBundle::getNextString(UErrorCode& status) {$/;"	f	class:ResourceBundle	signature:(UErrorCode& status)
getNextString	resbund.cpp	/^UnicodeString ResourceBundle::getNextString(const char ** key, UErrorCode& status) {$/;"	f	class:ResourceBundle	signature:(const char ** key, UErrorCode& status)
getNextString	unicode/resbund.h	/^      getNextString(UErrorCode& status);$/;"	p	class:ResourceBundle	access:public	signature:(UErrorCode& status)
getNextString	unicode/resbund.h	/^      getNextString(const char ** key,$/;"	p	class:ResourceBundle	access:public	signature:(const char ** key, UErrorCode& status)
getNextUChar	ucnv_cnv.h	/^    UConverterGetNextUChar getNextUChar;$/;"	m	struct:UConverterImpl	access:public
getNoopInstance	normalizer2.cpp	/^const Normalizer2 *Normalizer2Factory::getNoopInstance(UErrorCode &errorCode) {$/;"	f	class:Normalizer2Factory	signature:(UErrorCode &errorCode)
getNoopInstance	normalizer2impl.h	/^    static const Normalizer2 *getNoopInstance(UErrorCode &errorCode);$/;"	p	class:Normalizer2Factory	access:public	signature:(UErrorCode &errorCode)
getNorm16	normalizer2impl.h	/^    uint16_t getNorm16(UChar32 c) const { return UTRIE2_GET16(normTrie, c); }$/;"	f	class:Normalizer2Impl	access:public	signature:(UChar32 c) const
getNormQuickCheck	uprops.cpp	/^static int32_t getNormQuickCheck(const IntProperty &, UChar32, UProperty) {$/;"	f	file:	signature:(const IntProperty &, UChar32, UProperty)
getNormQuickCheck	uprops.cpp	/^static int32_t getNormQuickCheck(const IntProperty &\/*prop*\/, UChar32 c, UProperty which) {$/;"	f	file:	signature:(const IntProperty & , UChar32 c, UProperty which)
getNormTrie	normalizer2impl.h	/^    const UTrie2 *getNormTrie() const { return normTrie; }$/;"	f	class:Normalizer2Impl	access:public	signature:() const
getNumCharCategories	rbbisetb.cpp	/^int32_t  RBBISetBuilder::getNumCharCategories() const {$/;"	f	class:RBBISetBuilder	signature:() const
getNumCharCategories	rbbisetb.h	/^    int32_t  getNumCharCategories() const;   \/\/ CharCategories are the same as input symbol set to the$/;"	p	class:RBBISetBuilder	access:public	signature:() const
getNumericType	uprops.cpp	/^static int32_t getNumericType(const IntProperty &\/*prop*\/, UChar32 c, UProperty \/*which*\/) {$/;"	f	file:	signature:(const IntProperty & , UChar32 c, UProperty )
getOffset	propname.h	/^    Offset getOffset(EnumValue enumProbe) const {$/;"	f	class:EnumToOffset	access:public	signature:(EnumValue enumProbe) const
getOffset	propname.h	/^    Offset getOffset(EnumValue enumProbe) const {$/;"	f	class:NonContiguousEnumToOffset	access:public	signature:(EnumValue enumProbe) const
getOffsetArray	propname.h	/^    Offset* getOffsetArray() {$/;"	f	class:EnumToOffset	access:private	signature:()
getOffsetArray	propname.h	/^    Offset* getOffsetArray() {$/;"	f	class:NonContiguousEnumToOffset	access:private	signature:()
getOffsetArray	propname.h	/^    const Offset* getOffsetArray() const {$/;"	f	class:EnumToOffset	access:private	signature:() const
getOffsetArray	propname.h	/^    const Offset* getOffsetArray() const {$/;"	f	class:NonContiguousEnumToOffset	access:private	signature:() const
getOption	normlzr.cpp	/^Normalizer::getOption(int32_t option) const$/;"	f	class:Normalizer	signature:(int32_t option) const
getOption	unicode/normlzr.h	/^  UBool getOption(int32_t option) const;$/;"	p	class:Normalizer	access:public	signature:(int32_t option) const
getPRC	locid.cpp	/^Locale::getPRC(void)$/;"	f	class:Locale	signature:(void)
getPRC	unicode/locid.h	/^    static const Locale &U_EXPORT2 getPRC(void);$/;"	p	class:Locale	access:public	signature:(void)
getPairIndex	usc_impl.c	/^getPairIndex(UChar32 ch)$/;"	f	file:	signature:(UChar32 ch)
getPointer	propname.h	/^    inline const int8_t* getPointer(Offset o) const {$/;"	f	class:PropertyAliases	access:public	signature:(Offset o) const
getPointerNull	propname.h	/^    inline const int8_t* getPointerNull(Offset o) const {$/;"	f	class:PropertyAliases	access:public	signature:(Offset o) const
getPoolEntry	uresbund.c	/^getPoolEntry(const char *path, UErrorCode *status) {$/;"	f	file:	signature:(const char *path, UErrorCode *status)
getPoolEntry	uresbund.c	/^getPoolEntry(const char *path, UErrorCode *status);$/;"	p	file:	signature:(const char *path, UErrorCode *status)
getPos	ruleiter.cpp	/^void RuleCharacterIterator::getPos(RuleCharacterIterator::Pos& p) const {$/;"	f	class:RuleCharacterIterator	signature:(RuleCharacterIterator::Pos& p) const
getPos	ruleiter.h	/^    void getPos(Pos& p) const;$/;"	p	class:RuleCharacterIterator	access:public	signature:(Pos& p) const
getPosixID	locmap.c	/^getPosixID(const ILcidPosixMap *this_0, uint32_t hostID)$/;"	f	file:	signature:(const ILcidPosixMap *this_0, uint32_t hostID)
getPropertyEnum	propname.cpp	/^PropertyAliases::getPropertyEnum(const char* alias) const {$/;"	f	class:PropertyAliases	signature:(const char* alias) const
getPropertyEnum	propname.h	/^    inline EnumValue getPropertyEnum(const char* alias) const;$/;"	p	class:PropertyAliases	access:public	signature:(const char* alias) const
getPropertyName	propname.cpp	/^PropertyAliases::getPropertyName(EnumValue prop,$/;"	f	class:PropertyAliases	signature:(EnumValue prop, UPropertyNameChoice choice) const
getPropertyName	propname.h	/^    inline const char* getPropertyName(EnumValue prop,$/;"	p	class:PropertyAliases	access:public	signature:(EnumValue prop, UPropertyNameChoice choice) const
getPropertyValueEnum	propname.cpp	/^PropertyAliases::getPropertyValueEnum(EnumValue prop,$/;"	f	class:PropertyAliases	signature:(EnumValue prop, const char* alias) const
getPropertyValueEnum	propname.h	/^    inline EnumValue getPropertyValueEnum(EnumValue prop,$/;"	p	class:PropertyAliases	access:public	signature:(EnumValue prop, const char* alias) const
getPropertyValueName	propname.cpp	/^PropertyAliases::getPropertyValueName(EnumValue prop,$/;"	f	class:PropertyAliases	signature:(EnumValue prop, EnumValue value, UPropertyNameChoice choice) const
getPropertyValueName	propname.h	/^    inline const char* getPropertyValueName(EnumValue prop, EnumValue value,$/;"	p	class:PropertyAliases	access:public	signature:(EnumValue prop, EnumValue value, UPropertyNameChoice choice) const
getQuickCheck	normalizer2.cpp	/^    virtual UNormalizationCheckResult getQuickCheck(UChar32 c) const {$/;"	f	class:ComposeNormalizer2	file:	access:private	signature:(UChar32 c) const
getQuickCheck	normalizer2.cpp	/^    virtual UNormalizationCheckResult getQuickCheck(UChar32 c) const {$/;"	f	class:DecomposeNormalizer2	file:	access:private	signature:(UChar32 c) const
getQuickCheck	normalizer2.cpp	/^    virtual UNormalizationCheckResult getQuickCheck(UChar32) const {$/;"	f	class:Normalizer2WithImpl	access:public	signature:(UChar32) const
getRangeCount	unicode/uniset.h	/^    virtual int32_t getRangeCount(void) const;$/;"	p	class:UnicodeSet	access:public	signature:(void) const
getRangeCount	uniset.cpp	/^int32_t UnicodeSet::getRangeCount() const {$/;"	f	class:UnicodeSet	signature:() const
getRangeEnd	unicode/uniset.h	/^    virtual UChar32 getRangeEnd(int32_t index) const;$/;"	p	class:UnicodeSet	access:public	signature:(int32_t index) const
getRangeEnd	uniset.cpp	/^UChar32 UnicodeSet::getRangeEnd(int32_t index) const {$/;"	f	class:UnicodeSet	signature:(int32_t index) const
getRangeStart	unicode/uniset.h	/^    virtual UChar32 getRangeStart(int32_t index) const;$/;"	p	class:UnicodeSet	access:public	signature:(int32_t index) const
getRangeStart	uniset.cpp	/^UChar32 UnicodeSet::getRangeStart(int32_t index) const {$/;"	f	class:UnicodeSet	signature:(int32_t index) const
getRoot	locid.cpp	/^Locale::getRoot(void)$/;"	f	class:Locale	signature:(void)
getRoot	unicode/locid.h	/^    static const Locale &U_EXPORT2 getRoot(void);$/;"	p	class:Locale	access:public	signature:(void)
getRuleSourceString	rbbidata.cpp	/^const UnicodeString &RBBIDataWrapper::getRuleSourceString() const {$/;"	f	class:RBBIDataWrapper	signature:() const
getRuleSourceString	rbbidata.h	/^    const UnicodeString  &getRuleSourceString() const;$/;"	p	class:RBBIDataWrapper	access:public	signature:() const
getRuleStatus	rbbi.cpp	/^int32_t  RuleBasedBreakIterator::getRuleStatus() const {$/;"	f	class:RuleBasedBreakIterator	signature:() const
getRuleStatus	unicode/rbbi.h	/^    virtual int32_t getRuleStatus() const;$/;"	p	class:RuleBasedBreakIterator	access:public	signature:() const
getRuleStatusVec	rbbi.cpp	/^int32_t RuleBasedBreakIterator::getRuleStatusVec($/;"	f	class:RuleBasedBreakIterator	signature:( int32_t *fillInVec, int32_t capacity, UErrorCode &status)
getRuleStatusVec	unicode/rbbi.h	/^    virtual int32_t getRuleStatusVec(int32_t *fillInVec, int32_t capacity, UErrorCode &status);$/;"	p	class:RuleBasedBreakIterator	access:public	signature:(int32_t *fillInVec, int32_t capacity, UErrorCode &status)
getRules	rbbi.cpp	/^RuleBasedBreakIterator::getRules() const {$/;"	f	class:RuleBasedBreakIterator	signature:() const
getRules	unicode/rbbi.h	/^    virtual const UnicodeString& getRules(void) const;$/;"	p	class:RuleBasedBreakIterator	access:public	signature:(void) const
getRunFromLogicalIndex	ubidiln.c	/^static int32_t getRunFromLogicalIndex(UBiDi *pBiDi, int32_t logicalIndex, UErrorCode *pErrorCode) {$/;"	f	file:	signature:(UBiDi *pBiDi, int32_t logicalIndex, UErrorCode *pErrorCode)
getRunsMemory	ubidiimp.h	362;"	d
getSISOBytes	ucnvmbcs.c	/^static int32_t getSISOBytes(SISO_Option option, uint32_t cnvOption, uint8_t *value) {$/;"	f	file:	signature:(SISO_Option option, uint32_t cnvOption, uint8_t *value)
getSPrepFoldingOffset	usprep.cpp	/^getSPrepFoldingOffset(uint32_t data) {$/;"	f	file:	signature:(uint32_t data)
getScript	unicode/locid.h	/^    inline const char *  getScript( ) const;$/;"	p	class:Locale	access:public	signature:( ) const
getScript	unicode/locid.h	/^Locale::getScript() const$/;"	f	class:Locale	signature:() const
getScript	uprops.cpp	/^static int32_t getScript(const IntProperty &\/*prop*\/, UChar32 c, UProperty \/*which*\/) {$/;"	f	file:	signature:(const IntProperty & , UChar32 c, UProperty )
getService	brkiter.cpp	/^getService(void)$/;"	f	file:	signature:(void)
getShortestSubtagLength	uloc.c	/^static int32_t getShortestSubtagLength(const char *localeID) {$/;"	f	file:	signature:(const char *localeID)
getSimplifiedChinese	locid.cpp	/^Locale::getSimplifiedChinese(void)$/;"	f	class:Locale	signature:(void)
getSimplifiedChinese	unicode/locid.h	/^    static const Locale &U_EXPORT2 getSimplifiedChinese(void);$/;"	p	class:Locale	access:public	signature:(void)
getSingleCP	unicode/uniset.h	/^    static int32_t getSingleCP(const UnicodeString& s);$/;"	p	class:UnicodeSet	access:private	signature:(const UnicodeString& s)
getSingleCP	uniset.cpp	/^int32_t UnicodeSet::getSingleCP(const UnicodeString& s) {$/;"	f	class:UnicodeSet	signature:(const UnicodeString& s)
getSingleRun	ubidiln.c	/^getSingleRun(UBiDi *pBiDi, UBiDiLevel level) {$/;"	f	file:	signature:(UBiDi *pBiDi, UBiDiLevel level)
getSize	propname.h	/^    int32_t getSize() {$/;"	f	class:EnumToOffset	access:private	signature:()
getSize	propname.h	/^    int32_t getSize() {$/;"	f	class:NameToEnum	access:private	signature:()
getSize	propname.h	/^    int32_t getSize() {$/;"	f	class:NonContiguousEnumToOffset	access:private	signature:()
getSize	propname.h	/^    static int32_t getSize(int32_t n) {$/;"	f	class:EnumToOffset	access:private	signature:(int32_t n)
getSize	propname.h	/^    static int32_t getSize(int32_t n) {$/;"	f	class:NameToEnum	access:private	signature:(int32_t n)
getSize	propname.h	/^    static int32_t getSize(int32_t n) {$/;"	f	class:NonContiguousEnumToOffset	access:private	signature:(int32_t n)
getSize	resbund.cpp	/^int32_t ResourceBundle::getSize(void) const {$/;"	f	class:ResourceBundle	signature:(void) const
getSize	unicode/resbund.h	/^      getSize(void) const;$/;"	p	class:ResourceBundle	access:public	signature:(void) const
getSource	caniter.cpp	/^UnicodeString CanonicalIterator::getSource() {$/;"	f	class:CanonicalIterator	signature:()
getSource	unicode/caniter.h	/^    UnicodeString getSource();$/;"	p	class:CanonicalIterator	access:public	signature:()
getStart	normalizer2impl.h	/^    UChar *getStart() { return start; }$/;"	f	class:ReorderingBuffer	access:public	signature:()
getStarters	ucnv_cnv.h	/^    UConverterGetStarters getStarters;$/;"	m	struct:UConverterImpl	access:public
getState	unicode/uiter.h	/^    UCharIteratorGetState *getState;$/;"	m	struct:UCharIterator	access:public
getStateProp	ucnvmbcs.c	/^getStateProp(const int32_t (*stateTable)[256], int8_t stateProps[], int state) {$/;"	f	file:	signature:(const int32_t (stateTable)[256], int8_t stateProps[], int state)
getStaticClassID	locid.cpp	/^    static UClassID U_EXPORT2 getStaticClassID(void) { return (UClassID)&fgClassID; }$/;"	f	class:KeywordEnumeration	access:public	signature:(void)
getStaticClassID	serv.h	/^  static UClassID U_EXPORT2 getStaticClassID();$/;"	p	class:ICUServiceKey	access:public	signature:()
getStaticClassID	servloc.h	/^    static UClassID U_EXPORT2 getStaticClassID();$/;"	p	class:LocaleKey	access:public	signature:()
getStaticClassID	servls.cpp	/^    static UClassID U_EXPORT2 getStaticClassID(void);$/;"	p	class:ServiceEnumeration	file:	access:public	signature:(void)
getStaticClassID	servnotf.h	/^    static UClassID U_EXPORT2 getStaticClassID();$/;"	p	class:EventListener	access:public	signature:()
getStaticClassID	triedict.cpp	/^    static UClassID U_EXPORT2 getStaticClassID(void);$/;"	p	class:CompactTrieEnumeration	file:	access:public	signature:(void)
getStaticClassID	triedict.cpp	/^    static UClassID U_EXPORT2 getStaticClassID(void);$/;"	p	class:MutableTrieEnumeration	file:	access:public	signature:(void)
getStaticClassID	unicode/caniter.h	/^    static UClassID U_EXPORT2 getStaticClassID();$/;"	p	class:CanonicalIterator	access:public	signature:()
getStaticClassID	unicode/dtintrv.h	/^    static UClassID U_EXPORT2 getStaticClassID(void);$/;"	p	class:DateInterval	access:public	signature:(void)
getStaticClassID	unicode/locid.h	/^    static UClassID U_EXPORT2 getStaticClassID();$/;"	p	class:Locale	access:public	signature:()
getStaticClassID	unicode/normlzr.h	/^  static UClassID U_EXPORT2 getStaticClassID();$/;"	p	class:Normalizer	access:public	signature:()
getStaticClassID	unicode/parsepos.h	/^    static UClassID U_EXPORT2 getStaticClassID();$/;"	p	class:ParsePosition	access:public	signature:()
getStaticClassID	unicode/rbbi.h	/^    static UClassID U_EXPORT2 getStaticClassID(void);$/;"	p	class:RuleBasedBreakIterator	access:public	signature:(void)
getStaticClassID	unicode/resbund.h	/^    static UClassID U_EXPORT2 getStaticClassID();$/;"	p	class:ResourceBundle	access:public	signature:()
getStaticClassID	unicode/schriter.h	/^  static UClassID   U_EXPORT2 getStaticClassID(void);$/;"	p	class:StringCharacterIterator	access:public	signature:(void)
getStaticClassID	unicode/uchriter.h	/^  static UClassID         U_EXPORT2 getStaticClassID(void);$/;"	p	class:UCharCharacterIterator	access:public	signature:(void)
getStaticClassID	unicode/unifilt.h	/^    static UClassID U_EXPORT2 getStaticClassID();$/;"	p	class:UnicodeFilter	access:public	signature:()
getStaticClassID	unicode/unifunct.h	/^    static UClassID U_EXPORT2 getStaticClassID(void);$/;"	p	class:UnicodeFunctor	access:public	signature:(void)
getStaticClassID	unicode/uniset.h	/^    static UClassID U_EXPORT2 getStaticClassID(void);$/;"	p	class:UnicodeSet	access:public	signature:(void)
getStaticClassID	unicode/unistr.h	/^  static UClassID U_EXPORT2 getStaticClassID();$/;"	p	class:UnicodeString	access:public	signature:()
getStaticClassID	unicode/usetiter.h	/^    static UClassID U_EXPORT2 getStaticClassID();$/;"	p	class:UnicodeSetIterator	access:public	signature:()
getStaticClassID	ustrenum.h	/^    static UClassID U_EXPORT2 getStaticClassID();$/;"	p	class:UStringEnumeration	access:public	signature:()
getStaticClassID	uvector.h	/^    static UClassID U_EXPORT2 getStaticClassID();$/;"	p	class:UStack	access:public	signature:()
getStaticClassID	uvector.h	/^    static UClassID U_EXPORT2 getStaticClassID();$/;"	p	class:UVector	access:public	signature:()
getStaticClassID	uvectr32.h	/^    static UClassID U_EXPORT2 getStaticClassID();$/;"	p	class:UVector32	access:public	signature:()
getStaticClassID	uvectr64.h	/^    static UClassID U_EXPORT2 getStaticClassID();$/;"	p	class:UVector64	access:public	signature:()
getString	resbund.cpp	/^UnicodeString ResourceBundle::getString(UErrorCode& status) const {$/;"	f	class:ResourceBundle	signature:(UErrorCode& status) const
getString	unicode/resbund.h	/^      getString(UErrorCode& status) const;$/;"	p	class:ResourceBundle	access:public	signature:(UErrorCode& status) const
getString	unicode/uniset.h	/^    const UnicodeString* getString(int32_t index) const;$/;"	p	class:UnicodeSet	access:private	signature:(int32_t index) const
getString	unicode/usetiter.h	/^    const UnicodeString& getString();$/;"	p	class:UnicodeSetIterator	access:public	signature:()
getString	uniset.cpp	/^const UnicodeString* UnicodeSet::getString(int32_t index) const {$/;"	f	class:UnicodeSet	signature:(int32_t index) const
getString	uset.cpp	/^    inline static const UnicodeString* getString(const UnicodeSet& set,$/;"	f	class:USetAccess	access:public	signature:(const UnicodeSet& set, int32_t i)
getString	usetiter.cpp	/^const UnicodeString& UnicodeSetIterator::getString()  {$/;"	f	class:UnicodeSetIterator	signature:()
getStringCount	unicode/uniset.h	/^    int32_t getStringCount() const;$/;"	p	class:UnicodeSet	access:private	signature:() const
getStringCount	uniset.cpp	/^int32_t UnicodeSet::getStringCount() const {$/;"	f	class:UnicodeSet	signature:() const
getStringCount	uset.cpp	/^    inline static int32_t getStringCount(const UnicodeSet& set) {$/;"	f	class:USetAccess	access:public	signature:(const UnicodeSet& set)
getStringEx	resbund.cpp	/^UnicodeString ResourceBundle::getStringEx(const char* key, UErrorCode& status) const {$/;"	f	class:ResourceBundle	signature:(const char* key, UErrorCode& status) const
getStringEx	resbund.cpp	/^UnicodeString ResourceBundle::getStringEx(int32_t indexS, UErrorCode& status) const {$/;"	f	class:ResourceBundle	signature:(int32_t indexS, UErrorCode& status) const
getStringEx	unicode/resbund.h	/^      getStringEx(const char* key,$/;"	p	class:ResourceBundle	access:public	signature:(const char* key, UErrorCode& status) const
getStringEx	unicode/resbund.h	/^      getStringEx(int32_t index,$/;"	p	class:ResourceBundle	access:public	signature:(int32_t index, UErrorCode& status) const
getSupportedIDs	servlkf.cpp	/^LocaleKeyFactory::getSupportedIDs(UErrorCode& \/* status *\/) const {$/;"	f	class:LocaleKeyFactory	signature:(UErrorCode& ) const
getSupportedIDs	servrbf.cpp	/^ICUResourceBundleFactory::getSupportedIDs(UErrorCode& status) const$/;"	f	class:ICUResourceBundleFactory	signature:(UErrorCode& status) const
getTZI	wintz.c	/^static LONG getTZI(const char *winid, TZI *tzi)$/;"	f	file:	signature:(const char *winid, TZI *tzi)
getTableSize	rbbitblb.cpp	/^int32_t  RBBITableBuilder::getTableSize() const {$/;"	f	class:RBBITableBuilder	signature:() const
getTableSize	rbbitblb.h	/^    int32_t  getTableSize() const;      \/\/ Return the runtime size in bytes of$/;"	p	class:RBBITableBuilder	access:public	signature:() const
getTagNumber	ucnv_io.c	/^static uint32_t getTagNumber(const char *tagname) {$/;"	f	file:	signature:(const char *tagname)
getTaiwan	locid.cpp	/^Locale::getTaiwan(void)$/;"	f	class:Locale	signature:(void)
getTaiwan	unicode/locid.h	/^    static const Locale &U_EXPORT2 getTaiwan(void);$/;"	p	class:Locale	access:public	signature:(void)
getTerminatedBuffer	unicode/unistr.h	/^  inline const UChar *getTerminatedBuffer();$/;"	p	class:UnicodeString	access:public	signature:()
getTerminatedBuffer	unicode/unistr.h	/^UnicodeString::getTerminatedBuffer() {$/;"	f	class:UnicodeString	signature:()
getText	normlzr.cpp	/^Normalizer::getText(UnicodeString&  result) $/;"	f	class:Normalizer	signature:(UnicodeString& result)
getText	rbbi.cpp	/^RuleBasedBreakIterator::getText() const {$/;"	f	class:RuleBasedBreakIterator	signature:() const
getText	schriter.cpp	/^StringCharacterIterator::getText(UnicodeString& result) {$/;"	f	class:StringCharacterIterator	signature:(UnicodeString& result)
getText	uchriter.cpp	/^UCharCharacterIterator::getText(UnicodeString& result) {$/;"	f	class:UCharCharacterIterator	signature:(UnicodeString& result)
getText	unicode/brkiter.h	/^    virtual CharacterIterator& getText(void) const = 0;$/;"	p	class:BreakIterator	access:public	signature:(void) const
getText	unicode/chariter.h	/^    virtual void            getText(UnicodeString&  result) = 0;$/;"	p	class:CharacterIterator	access:public	signature:(UnicodeString& result)
getText	unicode/normlzr.h	/^  void            getText(UnicodeString&  result);$/;"	p	class:Normalizer	access:public	signature:(UnicodeString& result)
getText	unicode/rbbi.h	/^    virtual  CharacterIterator& getText(void) const;$/;"	p	class:RuleBasedBreakIterator	access:public	signature:(void) const
getText	unicode/schriter.h	/^  virtual void            getText(UnicodeString& result);$/;"	p	class:StringCharacterIterator	access:public	signature:(UnicodeString& result)
getText	unicode/uchriter.h	/^  virtual void            getText(UnicodeString& result);$/;"	p	class:UCharCharacterIterator	access:public	signature:(UnicodeString& result)
getTimestamp	serv.cpp	/^ICUService::getTimestamp() const$/;"	f	class:ICUService	signature:() const
getToDate	unicode/dtintrv.h	/^    UDate getToDate() const;$/;"	p	class:DateInterval	access:public	signature:() const
getToDate	unicode/dtintrv.h	/^DateInterval::getToDate() const { $/;"	f	class:DateInterval	signature:() const
getTraditionalChinese	locid.cpp	/^Locale::getTraditionalChinese(void)$/;"	f	class:Locale	signature:(void)
getTraditionalChinese	unicode/locid.h	/^    static const Locale &U_EXPORT2 getTraditionalChinese(void);$/;"	p	class:Locale	access:public	signature:(void)
getTrailCCFromCompYesAndZeroCC	normalizer2impl.cpp	/^uint8_t Normalizer2Impl::getTrailCCFromCompYesAndZeroCC(const UChar *cpStart, const UChar *cpLimit) const {$/;"	f	class:Normalizer2Impl	signature:(const UChar *cpStart, const UChar *cpLimit) const
getTrailCCFromCompYesAndZeroCC	normalizer2impl.h	/^    uint8_t getTrailCCFromCompYesAndZeroCC(const UChar *cpStart, const UChar *cpLimit) const;$/;"	p	class:Normalizer2Impl	access:private	signature:(const UChar *cpStart, const UChar *cpLimit) const
getTrailCombiningClass	uprops.cpp	/^static int32_t getTrailCombiningClass(const IntProperty &, UChar32, UProperty) {$/;"	f	file:	signature:(const IntProperty &, UChar32, UProperty)
getTrailCombiningClass	uprops.cpp	/^static int32_t getTrailCombiningClass(const IntProperty &\/*prop*\/, UChar32 c, UProperty \/*which*\/) {$/;"	f	file:	signature:(const IntProperty & , UChar32 c, UProperty )
getTrieSize	rbbisetb.cpp	/^int32_t RBBISetBuilder::getTrieSize() \/*const*\/ {$/;"	f	class:RBBISetBuilder	signature:()
getTrieSize	rbbisetb.h	/^    int32_t  getTrieSize() \/*const*\/;        \/\/ Size in bytes of the serialized Trie.$/;"	p	class:RBBISetBuilder	access:public	signature:()
getType	resbund.cpp	/^UResType ResourceBundle::getType(void) const {$/;"	f	class:ResourceBundle	signature:(void) const
getType	unicode/resbund.h	/^      getType(void) const;$/;"	p	class:ResourceBundle	access:public	signature:(void) const
getUInt	resbund.cpp	/^uint32_t ResourceBundle::getUInt(UErrorCode& status) const {$/;"	f	class:ResourceBundle	signature:(UErrorCode& status) const
getUInt	unicode/resbund.h	/^      getUInt(UErrorCode& status) const;$/;"	p	class:ResourceBundle	access:public	signature:(UErrorCode& status) const
getUK	locid.cpp	/^Locale::getUK(void)$/;"	f	class:Locale	signature:(void)
getUK	unicode/locid.h	/^    static const Locale &U_EXPORT2 getUK(void);$/;"	p	class:Locale	access:public	signature:(void)
getUMode	normlzr.cpp	/^Normalizer::getUMode() const$/;"	f	class:Normalizer	signature:() const
getUMode	unicode/normlzr.h	/^  UNormalizationMode getUMode(void) const;$/;"	p	class:Normalizer	access:public	signature:(void) const
getUS	locid.cpp	/^Locale::getUS(void)$/;"	f	class:Locale	signature:(void)
getUS	unicode/locid.h	/^    static const Locale &U_EXPORT2 getUS(void);$/;"	p	class:Locale	access:public	signature:(void)
getUTCtime_fake	putil.c	/^static UDate getUTCtime_fake() {$/;"	f	file:
getUTCtime_real	putil.c	/^static UDate getUTCtime_real() {$/;"	f	file:
getUTF8Length	unisetspan.cpp	/^getUTF8Length(const UChar *s, int32_t length) {$/;"	f	file:	signature:(const UChar *s, int32_t length)
getUText	rbbi.cpp	/^UText *RuleBasedBreakIterator::getUText(UText *fillIn, UErrorCode &status) const {$/;"	f	class:RuleBasedBreakIterator	signature:(UText *fillIn, UErrorCode &status) const
getUText	unicode/brkiter.h	/^     virtual UText *getUText(UText *fillIn, UErrorCode &status) const = 0;$/;"	p	class:BreakIterator	access:public	signature:(UText *fillIn, UErrorCode &status) const
getUText	unicode/rbbi.h	/^     virtual UText *getUText(UText *fillIn, UErrorCode &status) const;$/;"	p	class:RuleBasedBreakIterator	access:public	signature:(UText *fillIn, UErrorCode &status) const
getUnicodeSet	ucnv_cnv.h	/^    UConverterGetUnicodeSet getUnicodeSet;$/;"	m	struct:UConverterImpl	access:public
getValue	uprops.cpp	/^    IntPropertyGetValue *getValue;$/;"	m	struct:IntProperty	file:	access:public
getValueMap	propname.cpp	/^PropertyAliases::getValueMap(EnumValue prop) const {$/;"	f	class:PropertyAliases	signature:(EnumValue prop) const
getValueMap	propname.h	/^    const ValueMap* getValueMap(EnumValue prop) const;$/;"	p	class:PropertyAliases	access:private	signature:(EnumValue prop) const
getValues	usprep.cpp	/^getValues(uint16_t trieWord, int16_t& value, UBool& isIndex){$/;"	f	file:	signature:(uint16_t trieWord, int16_t& value, UBool& isIndex)
getVariant	unicode/locid.h	/^    inline const char *  getVariant( ) const;$/;"	p	class:Locale	access:public	signature:( ) const
getVariant	unicode/locid.h	/^Locale::getVariant() const$/;"	f	class:Locale	signature:() const
getVersion	resbund.cpp	/^void ResourceBundle::getVersion(UVersionInfo versionInfo) const {$/;"	f	class:ResourceBundle	signature:(UVersionInfo versionInfo) const
getVersion	unicode/resbund.h	/^      getVersion(UVersionInfo versionInfo) const;$/;"	p	class:ResourceBundle	access:public	signature:(UVersionInfo versionInfo) const
getVersionNumber	resbund.cpp	/^ResourceBundle::getVersionNumber()  const$/;"	f	class:ResourceBundle	signature:() const
getVersionNumber	unicode/resbund.h	/^      getVersionNumber(void) const;$/;"	p	class:ResourceBundle	access:public	signature:(void) const
getVisibleIDMap	serv.cpp	/^ICUService::getVisibleIDMap(UErrorCode& status) const {$/;"	f	class:ICUService	signature:(UErrorCode& status) const
getVisibleIDs	serv.cpp	/^ICUService::getVisibleIDs(UVector& result, UErrorCode& status) const {$/;"	f	class:ICUService	signature:(UVector& result, UErrorCode& status) const
getVisibleIDs	serv.cpp	/^ICUService::getVisibleIDs(UVector& result, const UnicodeString* matchID, UErrorCode& status) const $/;"	f	class:ICUService	signature:(UVector& result, const UnicodeString* matchID, UErrorCode& status) const
getWindow	ucnvscsu.c	/^getWindow(const uint32_t offsets[8], uint32_t c) {$/;"	f	file:	signature:(const uint32_t offsets[8], uint32_t c)
getWithFallback	resbund.cpp	/^ResourceBundle ResourceBundle::getWithFallback(const char* key, UErrorCode& status){$/;"	f	class:ResourceBundle	signature:(const char* key, UErrorCode& status)
getWithFallback	unicode/resbund.h	/^        getWithFallback(const char* key, UErrorCode& status);$/;"	p	class:ResourceBundle	access:public	signature:(const char* key, UErrorCode& status)
geti	hash.h	/^    int32_t geti(const UnicodeString& key) const;$/;"	p	class:Hashtable	access:public	signature:(const UnicodeString& key) const
geti	hash.h	/^inline int32_t Hashtable::geti(const UnicodeString& key) const {$/;"	f	class:Hashtable	signature:(const UnicodeString& key) const
globalMutex	umutex.c	/^static ICUMutex globalMutex = {&globalUMTX, FALSE, NULL, 0, PLATFORM_MUTEX_INITIALIZER, NULL};$/;"	v	file:
globalUMTX	umutex.c	/^static UMTX  globalUMTX = &globalMutex;$/;"	v	file:
globalUMTX	umutex.c	/^static UMTX  globalUMTX = NULL;$/;"	v	file:
globalUMTX	umutex.c	/^static UMTX  globalUMTX;$/;"	v	file:
grandfathered	uloc_tag.c	/^    const char          *grandfathered;$/;"	m	struct:ULanguageTag	file:	access:public
groupProp	ubidi.c	/^static const uint8_t groupProp[] =          \/* dirProp regrouped *\/$/;"	v	file:
groupStringOffset	unames.c	/^    uint32_t tokenStringOffset, groupsOffset, groupStringOffset, algNamesOffset;$/;"	m	struct:__anon94	file:	access:public
groupsOffset	unames.c	/^    uint32_t tokenStringOffset, groupsOffset, groupStringOffset, algNamesOffset;$/;"	m	struct:__anon94	file:	access:public
handleCharacter	brkeng.cpp	/^UnhandledEngine::handleCharacter(UChar32 c, int32_t breakType) {$/;"	f	class:UnhandledEngine	signature:(UChar32 c, int32_t breakType)
handleCharacter	brkeng.h	/^  virtual void handleCharacter(UChar32 c, int32_t breakType);$/;"	p	class:UnhandledEngine	access:public	signature:(UChar32 c, int32_t breakType)
handleCreate	brkiter.cpp	/^    virtual UObject* handleCreate(const Locale& loc, int32_t kind, const ICUService* \/*service*\/, UErrorCode& status) const {$/;"	f	class:ICUBreakIteratorFactory	access:protected	signature:(const Locale& loc, int32_t kind, const ICUService* , UErrorCode& status) const
handleCreate	servlkf.cpp	/^LocaleKeyFactory::handleCreate(const Locale& \/* loc *\/, $/;"	f	class:LocaleKeyFactory	signature:(const Locale& , int32_t , const ICUService* , UErrorCode& ) const
handleCreate	servrbf.cpp	/^ICUResourceBundleFactory::handleCreate(const Locale& loc, int32_t \/* kind *\/, const ICUService* \/* service *\/, UErrorCode& status) const$/;"	f	class:ICUResourceBundleFactory	signature:(const Locale& loc, int32_t , const ICUService* , UErrorCode& status) const
handleDefault	brkiter.cpp	/^    virtual UObject* handleDefault(const ICUServiceKey& key, UnicodeString* \/*actualID*\/, UErrorCode& status) const {$/;"	f	class:ICUBreakIteratorService	access:public	signature:(const ICUServiceKey& key, UnicodeString* , UErrorCode& status) const
handleDefault	serv.cpp	/^ICUService::handleDefault(const ICUServiceKey& \/* key *\/, UnicodeString* \/* actualIDReturn *\/, UErrorCode& \/* status *\/) const $/;"	f	class:ICUService	signature:(const ICUServiceKey& , UnicodeString* , UErrorCode& ) const
handleFailure	unicode/errorcode.h	/^    virtual void handleFailure() const {}$/;"	f	class:ErrorCode	access:protected	signature:() const
handleGeneratedSpaces	ushape.c	/^handleGeneratedSpaces(UChar *dest, int32_t sourceLength,$/;"	f	file:	signature:(UChar *dest, int32_t sourceLength, int32_t destSize, uint64_t options, UErrorCode *pErrorCode )
handleNext	rbbi.cpp	/^int32_t RuleBasedBreakIterator::handleNext(const RBBIStateTable *statetable) {$/;"	f	class:RuleBasedBreakIterator	signature:(const RBBIStateTable *statetable)
handleNext	unicode/rbbi.h	/^    int32_t handleNext(const RBBIStateTable *statetable);$/;"	p	class:RuleBasedBreakIterator	access:private	signature:(const RBBIStateTable *statetable)
handlePrevious	rbbi.cpp	/^int32_t RuleBasedBreakIterator::handlePrevious(const RBBIStateTable *statetable) {$/;"	f	class:RuleBasedBreakIterator	signature:(const RBBIStateTable *statetable)
handlePrevious	unicode/rbbi.h	/^    int32_t handlePrevious(const RBBIStateTable *statetable);$/;"	p	class:RuleBasedBreakIterator	access:private	signature:(const RBBIStateTable *statetable)
handleReplaceBetween	unicode/rep.h	/^    virtual void handleReplaceBetween(int32_t start,$/;"	p	class:Replaceable	access:public	signature:(int32_t start, int32_t limit, const UnicodeString& text)
handleReplaceBetween	unicode/unistr.h	/^  virtual void handleReplaceBetween(int32_t start,$/;"	p	class:UnicodeString	access:public	signature:(int32_t start, int32_t limit, const UnicodeString& text)
handleReplaceBetween	unistr.cpp	/^UnicodeString::handleReplaceBetween(int32_t start,$/;"	f	class:UnicodeString	signature:(int32_t start, int32_t limit, const UnicodeString& text)
handleTashkeelWithTatweel	ushape.c	/^handleTashkeelWithTatweel(UChar *dest, int32_t sourceLength,$/;"	f	file:	signature:(UChar *dest, int32_t sourceLength, int32_t destSize,uint64_t options, UErrorCode *pErrorCode)
handles	brkeng.cpp	/^UnhandledEngine::handles(UChar32 c, int32_t breakType) const {$/;"	f	class:UnhandledEngine	signature:(UChar32 c, int32_t breakType) const
handles	brkeng.h	/^  virtual UBool handles(UChar32 c, int32_t breakType) const = 0;$/;"	p	class:LanguageBreakEngine	access:public	signature:(UChar32 c, int32_t breakType) const
handles	brkeng.h	/^  virtual UBool handles(UChar32 c, int32_t breakType) const;$/;"	p	class:UnhandledEngine	access:public	signature:(UChar32 c, int32_t breakType) const
handles	dictbe.cpp	/^DictionaryBreakEngine::handles(UChar32 c, int32_t breakType) const {$/;"	f	class:DictionaryBreakEngine	signature:(UChar32 c, int32_t breakType) const
handles	dictbe.h	/^  virtual UBool handles( UChar32 c, int32_t breakType ) const;$/;"	p	class:DictionaryBreakEngine	access:public	signature:( UChar32 c, int32_t breakType ) const
handlesKey	servlkf.cpp	/^LocaleKeyFactory::handlesKey(const ICUServiceKey& key, UErrorCode& status) const {$/;"	f	class:LocaleKeyFactory	signature:(const ICUServiceKey& key, UErrorCode& status) const
hasBoundaryAfter	filterednormalizer2.cpp	/^FilteredNormalizer2::hasBoundaryAfter(UChar32 c) const {$/;"	f	class:FilteredNormalizer2	signature:(UChar32 c) const
hasBoundaryAfter	normalizer2.cpp	/^    virtual UBool hasBoundaryAfter(UChar32 c) const { return impl.hasDecompBoundary(c, FALSE); }$/;"	f	class:DecomposeNormalizer2	file:	access:private	signature:(UChar32 c) const
hasBoundaryAfter	normalizer2.cpp	/^    virtual UBool hasBoundaryAfter(UChar32 c) const { return impl.hasFCDBoundaryAfter(c); }$/;"	f	class:FCDNormalizer2	file:	access:private	signature:(UChar32 c) const
hasBoundaryAfter	normalizer2.cpp	/^    virtual UBool hasBoundaryAfter(UChar32 c) const {$/;"	f	class:ComposeNormalizer2	file:	access:private	signature:(UChar32 c) const
hasBoundaryAfter	normalizer2.cpp	/^    virtual UBool hasBoundaryAfter(UChar32) const { return TRUE; }$/;"	f	class:NoopNormalizer2	file:	access:private	signature:(UChar32) const
hasBoundaryAfter	unicode/normalizer2.h	/^    virtual UBool hasBoundaryAfter(UChar32 c) const = 0;$/;"	p	class:Normalizer2	access:public	signature:(UChar32 c) const
hasBoundaryAfter	unicode/normalizer2.h	/^    virtual UBool hasBoundaryAfter(UChar32 c) const;$/;"	p	class:FilteredNormalizer2	access:public	signature:(UChar32 c) const
hasBoundaryBefore	filterednormalizer2.cpp	/^FilteredNormalizer2::hasBoundaryBefore(UChar32 c) const {$/;"	f	class:FilteredNormalizer2	signature:(UChar32 c) const
hasBoundaryBefore	normalizer2.cpp	/^    virtual UBool hasBoundaryBefore(UChar32 c) const { return impl.hasDecompBoundary(c, TRUE); }$/;"	f	class:DecomposeNormalizer2	file:	access:private	signature:(UChar32 c) const
hasBoundaryBefore	normalizer2.cpp	/^    virtual UBool hasBoundaryBefore(UChar32 c) const { return impl.hasFCDBoundaryBefore(c); }$/;"	f	class:FCDNormalizer2	file:	access:private	signature:(UChar32 c) const
hasBoundaryBefore	normalizer2.cpp	/^    virtual UBool hasBoundaryBefore(UChar32 c) const {$/;"	f	class:ComposeNormalizer2	file:	access:private	signature:(UChar32 c) const
hasBoundaryBefore	normalizer2.cpp	/^    virtual UBool hasBoundaryBefore(UChar32) const { return TRUE; }$/;"	f	class:NoopNormalizer2	file:	access:private	signature:(UChar32) const
hasBoundaryBefore	unicode/normalizer2.h	/^    virtual UBool hasBoundaryBefore(UChar32 c) const = 0;$/;"	p	class:Normalizer2	access:public	signature:(UChar32 c) const
hasBoundaryBefore	unicode/normalizer2.h	/^    virtual UBool hasBoundaryBefore(UChar32 c) const;$/;"	p	class:FilteredNormalizer2	access:public	signature:(UChar32 c) const
hasCompBoundaryAfter	normalizer2impl.cpp	/^UBool Normalizer2Impl::hasCompBoundaryAfter(UChar32 c, UBool onlyContiguous, UBool testInert) const {$/;"	f	class:Normalizer2Impl	signature:(UChar32 c, UBool onlyContiguous, UBool testInert) const
hasCompBoundaryAfter	normalizer2impl.h	/^    UBool hasCompBoundaryAfter(UChar32 c, UBool onlyContiguous, UBool testInert) const;$/;"	p	class:Normalizer2Impl	access:public	signature:(UChar32 c, UBool onlyContiguous, UBool testInert) const
hasCompBoundaryBefore	normalizer2impl.cpp	/^UBool Normalizer2Impl::hasCompBoundaryBefore(UChar32 c, uint16_t norm16) const {$/;"	f	class:Normalizer2Impl	signature:(UChar32 c, uint16_t norm16) const
hasCompBoundaryBefore	normalizer2impl.h	/^    UBool hasCompBoundaryBefore(UChar32 c) const {$/;"	f	class:Normalizer2Impl	access:public	signature:(UChar32 c) const
hasCompBoundaryBefore	normalizer2impl.h	/^    UBool hasCompBoundaryBefore(UChar32 c, uint16_t norm16) const;$/;"	p	class:Normalizer2Impl	access:private	signature:(UChar32 c, uint16_t norm16) const
hasDecompBoundary	normalizer2impl.cpp	/^UBool Normalizer2Impl::hasDecompBoundary(UChar32 c, UBool before) const {$/;"	f	class:Normalizer2Impl	signature:(UChar32 c, UBool before) const
hasDecompBoundary	normalizer2impl.h	/^    UBool hasDecompBoundary(UChar32 c, UBool before) const;$/;"	p	class:Normalizer2Impl	access:public	signature:(UChar32 c, UBool before) const
hasErrors	unicode/idna.h	/^    UBool hasErrors() const { return errors!=0; }$/;"	f	class:IDNAInfo	access:public	signature:() const
hasFCDBoundaryAfter	normalizer2impl.h	/^    UBool hasFCDBoundaryAfter(UChar32 c) const {$/;"	f	class:Normalizer2Impl	access:public	signature:(UChar32 c) const
hasFCDBoundaryBefore	normalizer2impl.h	/^    UBool hasFCDBoundaryBefore(UChar32 c) const { return c<MIN_CCC_LCCC_CP || getFCD16(c)<=0xff; }$/;"	f	class:Normalizer2Impl	access:public	signature:(UChar32 c) const
hasFromUnicodeFallback	ucnv_bld.h	/^    uint8_t hasFromUnicodeFallback; \/* +78: 1 *\/$/;"	m	struct:UConverterStaticData	access:public
hasFullCompositionExclusion	uprops.cpp	/^static UBool hasFullCompositionExclusion(const BinaryProperty &, UChar32, UProperty) {$/;"	f	file:	signature:(const BinaryProperty &, UChar32, UProperty)
hasFullCompositionExclusion	uprops.cpp	/^static UBool hasFullCompositionExclusion(const BinaryProperty &\/*prop*\/, UChar32 c, UProperty \/*which*\/) {$/;"	f	file:	signature:(const BinaryProperty & , UChar32 c, UProperty )
hasICUSTDBundle	icudataver.c	/^static UBool hasICUSTDBundle() {$/;"	f	file:
hasICUSTDBundle	icudataver.c	/^static UBool hasICUSTDBundle();$/;"	p	file:
hasMetaData	unicode/rep.h	/^    virtual UBool hasMetaData() const;$/;"	p	class:Replaceable	access:public	signature:() const
hasMetaData	unicode/unistr.h	/^  virtual UBool hasMetaData() const;$/;"	p	class:UnicodeString	access:public	signature:() const
hasMetaData	unistr.cpp	/^UBool Replaceable::hasMetaData() const {$/;"	f	class:Replaceable	signature:() const
hasMetaData	unistr.cpp	/^UBool UnicodeString::hasMetaData() const {$/;"	f	class:UnicodeString	signature:() const
hasMoreChar32Than	unicode/unistr.h	/^  hasMoreChar32Than(int32_t start, int32_t length, int32_t number) const;$/;"	p	class:UnicodeString	access:public	signature:(int32_t start, int32_t length, int32_t number) const
hasMoreChar32Than	unistr.cpp	/^UnicodeString::hasMoreChar32Than(int32_t start, int32_t length, int32_t number) const {$/;"	f	class:UnicodeString	signature:(int32_t start, int32_t length, int32_t number) const
hasNext	resbund.cpp	/^UBool ResourceBundle::hasNext(void) const {$/;"	f	class:ResourceBundle	signature:(void) const
hasNext	uchriter.cpp	/^UCharCharacterIterator::hasNext() {$/;"	f	class:UCharCharacterIterator	signature:()
hasNext	unicode/chariter.h	/^    virtual UBool        hasNext() = 0;$/;"	p	class:ForwardCharacterIterator	access:public	signature:()
hasNext	unicode/resbund.h	/^      hasNext(void) const;$/;"	p	class:ResourceBundle	access:public	signature:(void) const
hasNext	unicode/uchriter.h	/^  virtual UBool        hasNext();$/;"	p	class:UCharCharacterIterator	access:public	signature:()
hasNext	unicode/uiter.h	/^    UCharIteratorHasNext *hasNext;$/;"	m	struct:UCharIterator	access:public
hasNext	unorm_it.c	/^    UBool hasPrevious, hasNext, isStackAllocated;$/;"	m	struct:UNormIterator	file:	access:public
hasPrevious	uchriter.cpp	/^UCharCharacterIterator::hasPrevious() {$/;"	f	class:UCharCharacterIterator	signature:()
hasPrevious	unicode/chariter.h	/^    virtual UBool        hasPrevious() = 0;$/;"	p	class:CharacterIterator	access:public	signature:()
hasPrevious	unicode/uchriter.h	/^  virtual UBool        hasPrevious();$/;"	p	class:UCharCharacterIterator	access:public	signature:()
hasPrevious	unicode/uiter.h	/^    UCharIteratorHasPrevious *hasPrevious;$/;"	m	struct:UCharIterator	access:public
hasPrevious	unorm_it.c	/^    UBool hasPrevious, hasNext, isStackAllocated;$/;"	m	struct:UNormIterator	file:	access:public
hasService	brkiter.cpp	/^hasService(void)$/;"	f	file:	signature:(void)
hasToUnicodeFallback	ucnv_bld.h	/^    uint8_t hasToUnicodeFallback;   \/* +77: 1 UBool needs to be changed to UBool to be consistent across platform *\/$/;"	m	struct:UConverterStaticData	access:public
hasValidTrailBytes	ucnvmbcs.c	/^hasValidTrailBytes(const int32_t (*stateTable)[256], uint8_t state) {$/;"	f	file:	signature:(const int32_t (stateTable)[256], uint8_t state)
hash	hash.h	/^    UHashtable* hash;$/;"	m	class:Hashtable	access:private
hashCode	locid.cpp	/^Locale::hashCode() const$/;"	f	class:Locale	signature:() const
hashCode	normlzr.cpp	/^int32_t Normalizer::hashCode() const$/;"	f	class:Normalizer	signature:() const
hashCode	rbbi.cpp	/^RuleBasedBreakIterator::hashCode(void) const {$/;"	f	class:RuleBasedBreakIterator	signature:(void) const
hashCode	rbbidata.cpp	/^int32_t  RBBIDataWrapper::hashCode() {$/;"	f	class:RBBIDataWrapper	signature:()
hashCode	rbbidata.h	/^    int32_t               hashCode();$/;"	p	class:RBBIDataWrapper	access:public	signature:()
hashCode	uchriter.cpp	/^UCharCharacterIterator::hashCode() const {$/;"	f	class:UCharCharacterIterator	signature:() const
hashCode	unicode/chariter.h	/^    virtual int32_t hashCode(void) const = 0;$/;"	p	class:ForwardCharacterIterator	access:public	signature:(void) const
hashCode	unicode/locid.h	/^    int32_t         hashCode(void) const;$/;"	p	class:Locale	access:public	signature:(void) const
hashCode	unicode/normlzr.h	/^  int32_t                hashCode(void) const;$/;"	p	class:Normalizer	access:public	signature:(void) const
hashCode	unicode/rbbi.h	/^    virtual int32_t hashCode(void) const;$/;"	p	class:RuleBasedBreakIterator	access:public	signature:(void) const
hashCode	unicode/uchriter.h	/^  virtual int32_t         hashCode(void) const;$/;"	p	class:UCharCharacterIterator	access:public	signature:(void) const
hashCode	unicode/uniset.h	/^    virtual int32_t hashCode(void) const;$/;"	p	class:UnicodeSet	access:public	signature:(void) const
hashCode	unicode/unistr.h	/^  inline int32_t hashCode(void) const;$/;"	p	class:UnicodeString	access:public	signature:(void) const
hashCode	unicode/unistr.h	/^UnicodeString::hashCode() const$/;"	f	class:UnicodeString	signature:() const
hashCode	uniset.cpp	/^int32_t UnicodeSet::hashCode(void) const {$/;"	f	class:UnicodeSet	signature:(void) const
hashEntry	uresbund.c	/^static int32_t U_CALLCONV hashEntry(const UHashTok parm) {$/;"	f	file:	signature:(const UHashTok parm)
hashEntry	usprep.cpp	/^hashEntry(const UHashTok parm) {$/;"	f	file:	signature:(const UHashTok parm)
hashObj	hash.h	/^    UHashtable hashObj;$/;"	m	class:Hashtable	access:private
hashcode	uhash.h	/^    int32_t  hashcode;$/;"	m	struct:UHashElement	access:public
haveAliasData	ucnv_io.c	/^haveAliasData(UErrorCode *pErrorCode) {$/;"	f	file:	signature:(UErrorCode *pErrorCode)
haveAvailableConverterList	ucnv_bld.c	/^static UBool haveAvailableConverterList(UErrorCode *pErrorCode) {$/;"	f	file:	signature:(UErrorCode *pErrorCode)
head	ulist.c	/^    UListNode *head;$/;"	m	struct:UList	file:	access:public
headerSize	ucmndata.h	/^    uint16_t    headerSize;$/;"	m	struct:__anon142	access:public
heapAllocated	udatamem.h	/^    UBool             heapAllocated;  \/* True if this UDataMemory Object is on the    *\/$/;"	m	struct:UDataMemory	access:public
heapAllocated	umutex.c	/^    UBool        heapAllocated;     \/* Set if this ICUMutex is heap allocated, and    *\/$/;"	m	struct:ICUMutex	file:	access:public
high	triedict.cpp	/^    TernaryNode *high;      \/\/ Greater-than link$/;"	m	struct:TernaryNode	file:	access:public
highBit	usc_impl.c	/^highBit(int32_t value)$/;"	f	file:	signature:(int32_t value)
highBit	usc_impl.c	/^static int8_t highBit(int32_t value);$/;"	p	file:	signature:(int32_t value)
highStart	utrie2.h	/^    UChar32 highStart;$/;"	m	struct:UTrie2	access:public
highStart	utrie2_impl.h	/^    UChar32 highStart;$/;"	m	struct:UNewTrie2	access:public
highValueIndex	utrie2.h	/^    int32_t highValueIndex;$/;"	m	struct:UTrie2	access:public
highWaterMark	uhash.h	/^    int32_t     highWaterMark;  \/* If count > highWaterMark, rehash *\/$/;"	m	struct:UHashtable	access:public
highWaterRatio	uhash.h	/^    float       highWaterRatio; \/* 0..1; high water as a fraction of length *\/$/;"	m	struct:UHashtable	access:public
hostID	locmap.c	/^    const uint32_t hostID;$/;"	m	struct:ILcidPosixElement	file:	access:public
hwkana_fb	ucnv2022.c	/^static const uint16_t hwkana_fb[HWKANA_END - HWKANA_START + 1] = {$/;"	v	file:
i64	putil.c	/^    int64_t i64; \/* This must be defined first in order to allow the initialization to work. This is a C89 feature. *\/$/;"	m	union:__anon40	file:	access:public
iDot	ucase.c	/^static const UChar iDot[2] = { 0x69, 0x307 };$/;"	v	file:
iDotAcute	ucase.c	/^static const UChar iDotAcute[3] = { 0x69, 0x307, 0x301 };$/;"	v	file:
iDotGrave	ucase.c	/^static const UChar iDotGrave[3] = { 0x69, 0x307, 0x300 };$/;"	v	file:
iDotTilde	ucase.c	/^static const UChar iDotTilde[3] = { 0x69, 0x307, 0x303 };$/;"	v	file:
iOgonekDot	ucase.c	/^static const UChar iOgonekDot[3] = { 0x12f, 0x307 };$/;"	v	file:
i_default	uloc.c	/^static const char i_default[] = {'i', '-', 'd', 'e', 'f', 'a', 'u', 'l', 't'};$/;"	v	file:
id	uloc.c	/^    const char *id;          \/* input ID *\/$/;"	m	struct:CanonicalizationMap	file:	access:public
idCmp	locmap.c	/^idCmp(const char* id1, const char* id2)$/;"	f	file:	signature:(const char* id1, const char* id2)
idnaInfoToStruct	uts46.cpp	/^idnaInfoToStruct(IDNAInfo &info, UIDNAInfo *pInfo) {$/;"	f	file:	signature:(IDNAInfo &info, UIDNAInfo *pInfo)
impAct0	ubidi.c	/^static const ImpAct impAct0 = {0,1,2,3,4,5,6};$/;"	v	file:
impAct1	ubidi.c	/^static const ImpAct impAct1 = {0,1,11,12};$/;"	v	file:
impAct2	ubidi.c	/^static const ImpAct impAct2 = {0,1,7,8,9,10};$/;"	v	file:
impTabL_DEFAULT	ubidi.c	/^static const ImpTab impTabL_DEFAULT =   \/* Even paragraph level *\/$/;"	v	file:
impTabL_GROUP_NUMBERS_WITH_R	ubidi.c	/^static const ImpTab impTabL_GROUP_NUMBERS_WITH_R =$/;"	v	file:
impTabL_INVERSE_FOR_NUMBERS_SPECIAL_WITH_MARKS	ubidi.c	/^static const ImpTab impTabL_INVERSE_FOR_NUMBERS_SPECIAL_WITH_MARKS =$/;"	v	file:
impTabL_INVERSE_LIKE_DIRECT_WITH_MARKS	ubidi.c	/^static const ImpTab impTabL_INVERSE_LIKE_DIRECT_WITH_MARKS =$/;"	v	file:
impTabL_INVERSE_NUMBERS_AS_L	ubidi.c	/^static const ImpTab impTabL_INVERSE_NUMBERS_AS_L =$/;"	v	file:
impTabL_NUMBERS_SPECIAL	ubidi.c	/^static const ImpTab impTabL_NUMBERS_SPECIAL =   \/* Even paragraph level *\/$/;"	v	file:
impTabProps	ubidi.c	/^static const uint8_t impTabProps[][IMPTABPROPS_COLUMNS] =$/;"	v	file:
impTabR_DEFAULT	ubidi.c	/^static const ImpTab impTabR_DEFAULT =   \/* Odd  paragraph level *\/$/;"	v	file:
impTabR_GROUP_NUMBERS_WITH_R	ubidi.c	/^static const ImpTab impTabR_GROUP_NUMBERS_WITH_R =$/;"	v	file:
impTabR_INVERSE_LIKE_DIRECT	ubidi.c	/^static const ImpTab impTabR_INVERSE_LIKE_DIRECT =   \/* Odd  paragraph level *\/$/;"	v	file:
impTabR_INVERSE_LIKE_DIRECT_WITH_MARKS	ubidi.c	/^static const ImpTab impTabR_INVERSE_LIKE_DIRECT_WITH_MARKS =$/;"	v	file:
impTabR_INVERSE_NUMBERS_AS_L	ubidi.c	/^static const ImpTab impTabR_INVERSE_NUMBERS_AS_L =$/;"	v	file:
impTab_DEFAULT	ubidi.c	/^static const ImpTabPair impTab_DEFAULT = {{&impTabL_DEFAULT,$/;"	v	file:
impTab_GROUP_NUMBERS_WITH_R	ubidi.c	/^static const ImpTabPair impTab_GROUP_NUMBERS_WITH_R = {$/;"	v	file:
impTab_INVERSE_FOR_NUMBERS_SPECIAL	ubidi.c	/^static const ImpTabPair impTab_INVERSE_FOR_NUMBERS_SPECIAL = {$/;"	v	file:
impTab_INVERSE_FOR_NUMBERS_SPECIAL_WITH_MARKS	ubidi.c	/^static const ImpTabPair impTab_INVERSE_FOR_NUMBERS_SPECIAL_WITH_MARKS = {$/;"	v	file:
impTab_INVERSE_LIKE_DIRECT	ubidi.c	/^static const ImpTabPair impTab_INVERSE_LIKE_DIRECT = {$/;"	v	file:
impTab_INVERSE_LIKE_DIRECT_WITH_MARKS	ubidi.c	/^static const ImpTabPair impTab_INVERSE_LIKE_DIRECT_WITH_MARKS = {$/;"	v	file:
impTab_INVERSE_NUMBERS_AS_L	ubidi.c	/^static const ImpTabPair impTab_INVERSE_NUMBERS_AS_L = {$/;"	v	file:
impTab_NUMBERS_SPECIAL	ubidi.c	/^static const ImpTabPair impTab_NUMBERS_SPECIAL = {{&impTabL_NUMBERS_SPECIAL,$/;"	v	file:
impl	normalizer2.cpp	/^    Normalizer2Impl impl;$/;"	m	struct:Norm2AllModes	file:	access:public
impl	normalizer2.cpp	/^    const Normalizer2Impl &impl;$/;"	m	class:Normalizer2WithImpl	file:	access:public
impl	normalizer2impl.cpp	/^    Normalizer2Impl &impl;$/;"	m	class:CanonIterDataSingleton	file:	access:private
impl	normalizer2impl.cpp	/^    Normalizer2Impl &impl;$/;"	m	class:FCDTrieSingleton	file:	access:public
impl	normalizer2impl.h	/^    const Normalizer2Impl &impl;$/;"	m	class:ReorderingBuffer	access:private
impl	ucnv_bld.h	/^    const UConverterImpl *impl;     \/* vtable-style struct of mostly function pointers *\/$/;"	m	struct:UConverterSharedData	access:public
inCharset	udataswp.h	/^    uint8_t inCharset;$/;"	m	struct:UDataSwapper	access:public
inIsBigEndian	udataswp.h	/^    UBool inIsBigEndian;$/;"	m	struct:UDataSwapper	access:public
inSetD	ucnv_u7.c	69;"	d	file:
inSetDIMAP	ucnv_u7.c	840;"	d	file:
inSetO	ucnv_u7.c	77;"	d	file:
inVariable	ruleiter.h	/^    inline UBool inVariable() const;$/;"	p	class:RuleCharacterIterator	access:public	signature:() const
inVariable	ruleiter.h	/^inline UBool RuleCharacterIterator::inVariable() const {$/;"	f	class:RuleCharacterIterator	signature:() const
index	propname.cpp	/^    Offset name, index;$/;"	m	struct:NameAndIndex	file:	access:public
index	ucase.h	/^    int32_t start, index, limit;$/;"	m	struct:UCaseContext	access:public
index	ucnvsel.cpp	/^  int16_t* index;$/;"	m	struct:Enumerator	file:	access:public
index	unicode/parsepos.h	/^    int32_t index;$/;"	m	class:ParsePosition	access:private
index	unicode/uiter.h	/^    int32_t index;$/;"	m	struct:UCharIterator	access:public
index	ustrenum.cpp	/^    int32_t index, count;$/;"	m	struct:UCharStringEnumeration	file:	access:public
index	utrie.h	/^    const uint16_t *index;$/;"	m	struct:UTrie	access:public
index	utrie.h	/^    int32_t index[UTRIE_MAX_INDEX_LENGTH];$/;"	m	struct:UNewTrie	access:public
index	utrie2.h	/^    const uint16_t *index;$/;"	m	struct:UTrie2	access:public
index1	utrie2_impl.h	/^    int32_t index1[UNEWTRIE2_INDEX_1_LENGTH];$/;"	m	struct:UNewTrie2	access:public
index2	utrie2_impl.h	/^    int32_t index2[UNEWTRIE2_MAX_INDEX_2_LENGTH];$/;"	m	struct:UNewTrie2	access:public
index2Length	utrie2_impl.h	/^    int32_t index2Length, dataCapacity, dataLength;$/;"	m	struct:UNewTrie2	access:public
index2NullOffset	utrie2.h	/^    uint16_t index2NullOffset;  \/* 0xffff if there is no dedicated index-2 null block *\/$/;"	m	struct:UTrie2	access:public
index2NullOffset	utrie2_impl.h	/^    int32_t index2NullOffset, dataNullOffset;$/;"	m	struct:UNewTrie2	access:public
index2NullOffset	utrie2_impl.h	/^    uint16_t index2NullOffset, dataNullOffset;$/;"	m	struct:UTrie2Header	access:public
indexLength	utrie.h	/^    int32_t indexLength, dataCapacity, dataLength;$/;"	m	struct:UNewTrie	access:public
indexLength	utrie.h	/^    int32_t indexLength, dataLength;$/;"	m	struct:UTrie	access:public
indexLength	utrie.h	/^    int32_t indexLength;$/;"	m	struct:UTrieHeader	access:public
indexLength	utrie2.h	/^    int32_t indexLength, dataLength;$/;"	m	struct:UTrie2	access:public
indexLength	utrie2_impl.h	/^    uint16_t indexLength;$/;"	m	struct:UTrie2Header	access:public
indexOf	unicode/uniset.h	/^    int32_t indexOf(UChar32 c) const;$/;"	p	class:UnicodeSet	access:public	signature:(UChar32 c) const
indexOf	unicode/unistr.h	/^  inline int32_t indexOf(UChar c) const;$/;"	p	class:UnicodeString	access:public	signature:(UChar c) const
indexOf	unicode/unistr.h	/^  inline int32_t indexOf(UChar c,$/;"	p	class:UnicodeString	access:public	signature:(UChar c, int32_t start) const
indexOf	unicode/unistr.h	/^  inline int32_t indexOf(UChar c,$/;"	p	class:UnicodeString	access:public	signature:(UChar c, int32_t start, int32_t length) const
indexOf	unicode/unistr.h	/^  inline int32_t indexOf(UChar32 c) const;$/;"	p	class:UnicodeString	access:public	signature:(UChar32 c) const
indexOf	unicode/unistr.h	/^  inline int32_t indexOf(UChar32 c,$/;"	p	class:UnicodeString	access:public	signature:(UChar32 c, int32_t start) const
indexOf	unicode/unistr.h	/^  inline int32_t indexOf(UChar32 c,$/;"	p	class:UnicodeString	access:public	signature:(UChar32 c, int32_t start, int32_t length) const
indexOf	unicode/unistr.h	/^  inline int32_t indexOf(const UChar *srcChars,$/;"	p	class:UnicodeString	access:public	signature:(const UChar *srcChars, int32_t srcLength, int32_t start) const
indexOf	unicode/unistr.h	/^  inline int32_t indexOf(const UChar *srcChars,$/;"	p	class:UnicodeString	access:public	signature:(const UChar *srcChars, int32_t srcLength, int32_t start, int32_t length) const
indexOf	unicode/unistr.h	/^  inline int32_t indexOf(const UnicodeString& srcText,$/;"	p	class:UnicodeString	access:public	signature:(const UnicodeString& srcText, int32_t srcStart, int32_t srcLength, int32_t start, int32_t length) const
indexOf	unicode/unistr.h	/^  inline int32_t indexOf(const UnicodeString& text) const;$/;"	p	class:UnicodeString	access:public	signature:(const UnicodeString& text) const
indexOf	unicode/unistr.h	/^  inline int32_t indexOf(const UnicodeString& text,$/;"	p	class:UnicodeString	access:public	signature:(const UnicodeString& text, int32_t start) const
indexOf	unicode/unistr.h	/^  inline int32_t indexOf(const UnicodeString& text,$/;"	p	class:UnicodeString	access:public	signature:(const UnicodeString& text, int32_t start, int32_t length) const
indexOf	unicode/unistr.h	/^  int32_t indexOf(const UChar *srcChars,$/;"	p	class:UnicodeString	access:public	signature:(const UChar *srcChars, int32_t srcStart, int32_t srcLength, int32_t start, int32_t length) const
indexOf	unicode/unistr.h	/^UnicodeString::indexOf(UChar c) const$/;"	f	class:UnicodeString	signature:(UChar c) const
indexOf	unicode/unistr.h	/^UnicodeString::indexOf(UChar c,$/;"	f	class:UnicodeString	signature:(UChar c, int32_t start) const
indexOf	unicode/unistr.h	/^UnicodeString::indexOf(UChar c,$/;"	f	class:UnicodeString	signature:(UChar c, int32_t start, int32_t _length) const
indexOf	unicode/unistr.h	/^UnicodeString::indexOf(UChar32 c) const$/;"	f	class:UnicodeString	signature:(UChar32 c) const
indexOf	unicode/unistr.h	/^UnicodeString::indexOf(UChar32 c,$/;"	f	class:UnicodeString	signature:(UChar32 c, int32_t start) const
indexOf	unicode/unistr.h	/^UnicodeString::indexOf(UChar32 c,$/;"	f	class:UnicodeString	signature:(UChar32 c, int32_t start, int32_t _length) const
indexOf	unicode/unistr.h	/^UnicodeString::indexOf(const UChar *srcChars,$/;"	f	class:UnicodeString	signature:(const UChar *srcChars, int32_t srcLength, int32_t start) const
indexOf	unicode/unistr.h	/^UnicodeString::indexOf(const UChar *srcChars,$/;"	f	class:UnicodeString	signature:(const UChar *srcChars, int32_t srcLength, int32_t start, int32_t _length) const
indexOf	unicode/unistr.h	/^UnicodeString::indexOf(const UnicodeString& srcText,$/;"	f	class:UnicodeString	signature:(const UnicodeString& srcText, int32_t srcStart, int32_t srcLength, int32_t start, int32_t _length) const
indexOf	unicode/unistr.h	/^UnicodeString::indexOf(const UnicodeString& text) const$/;"	f	class:UnicodeString	signature:(const UnicodeString& text) const
indexOf	unicode/unistr.h	/^UnicodeString::indexOf(const UnicodeString& text,$/;"	f	class:UnicodeString	signature:(const UnicodeString& text, int32_t start) const
indexOf	unicode/unistr.h	/^UnicodeString::indexOf(const UnicodeString& text,$/;"	f	class:UnicodeString	signature:(const UnicodeString& text, int32_t start, int32_t _length) const
indexOf	uniset.cpp	/^int32_t UnicodeSet::indexOf(UChar32 c) const {$/;"	f	class:UnicodeSet	signature:(UChar32 c) const
indexOf	unistr.cpp	/^UnicodeString::indexOf(const UChar *srcChars,$/;"	f	class:UnicodeString	signature:(const UChar *srcChars, int32_t srcStart, int32_t srcLength, int32_t start, int32_t length) const
indexOf	uvector.cpp	/^int32_t UVector::indexOf(UHashTok key, int32_t startIndex, int8_t hint) const {$/;"	f	class:UVector	signature:(UHashTok key, int32_t startIndex, int8_t hint) const
indexOf	uvector.cpp	/^int32_t UVector::indexOf(int32_t obj, int32_t startIndex) const {$/;"	f	class:UVector	signature:(int32_t obj, int32_t startIndex) const
indexOf	uvector.cpp	/^int32_t UVector::indexOf(void* obj, int32_t startIndex) const {$/;"	f	class:UVector	signature:(void* obj, int32_t startIndex) const
indexOf	uvector.h	/^    int32_t indexOf(UHashTok key, int32_t startIndex = 0, int8_t hint = 0) const;$/;"	p	class:UVector	access:private	signature:(UHashTok key, int32_t startIndex = 0, int8_t hint = 0) const
indexOf	uvector.h	/^    int32_t indexOf(int32_t obj, int32_t startIndex = 0) const;$/;"	p	class:UVector	access:public	signature:(int32_t obj, int32_t startIndex = 0) const
indexOf	uvector.h	/^    int32_t indexOf(void* obj, int32_t startIndex = 0) const;$/;"	p	class:UVector	access:public	signature:(void* obj, int32_t startIndex = 0) const
indexOf	uvectr32.cpp	/^int32_t UVector32::indexOf(int32_t key, int32_t startIndex) const {$/;"	f	class:UVector32	signature:(int32_t key, int32_t startIndex) const
indexOf	uvectr32.h	/^    int32_t indexOf(int32_t elem, int32_t startIndex = 0) const;$/;"	p	class:UVector32	access:public	signature:(int32_t elem, int32_t startIndex = 0) const
indexes	sprpimpl.h	/^    int32_t indexes[_SPREP_INDEX_TOP];$/;"	m	struct:UStringPrepProfile	access:public
indexes	ubidi_props.c	/^    const int32_t *indexes;$/;"	m	struct:UBiDiProps	file:	access:public
indexes	ucase.c	/^    const int32_t *indexes;$/;"	m	struct:UCaseProps	file:	access:public
indexes	uchar_props_data.c	/^static const int32_t indexes[UPROPS_INDEX_COUNT]={0x21ae,0x21ae,0x21ae,0x21ae,0x4d66,3,0x5f6c,0x5f80,0x5f80,0x5f80,0xad192,0x2473171,0,0,0,0};$/;"	v	file:
indexes	unorm_props_data.c	/^static const int32_t indexes[_NORM_INDEX_TOP]={$/;"	v	file:
info	ucmndata.h	/^    UDataInfo   info;$/;"	m	struct:__anon143	access:public
init	hash.h	/^    inline void init(UHashFunction *keyHash, UKeyComparator *keyComp, UValueComparator *valueComp, UErrorCode& status);$/;"	p	class:Hashtable	access:private	signature:(UHashFunction *keyHash, UKeyComparator *keyComp, UValueComparator *valueComp, UErrorCode& status)
init	hash.h	/^inline void Hashtable::init(UHashFunction *keyHash, UKeyComparator *keyComp, $/;"	f	class:Hashtable	signature:(UHashFunction *keyHash, UKeyComparator *keyComp, UValueComparator *valueComp, UErrorCode& status)
init	locid.cpp	/^Locale& Locale::init(const char* localeID, UBool canonicalize)$/;"	f	class:Locale	signature:(const char* localeID, UBool canonicalize)
init	normalizer2impl.cpp	/^UBool ReorderingBuffer::init(int32_t destCapacity, UErrorCode &errorCode) {$/;"	f	class:ReorderingBuffer	signature:(int32_t destCapacity, UErrorCode &errorCode)
init	normalizer2impl.h	/^    UBool init(int32_t destCapacity, UErrorCode &errorCode);$/;"	p	class:ReorderingBuffer	access:public	signature:(int32_t destCapacity, UErrorCode &errorCode)
init	normlzr.cpp	/^Normalizer::init() {$/;"	f	class:Normalizer	signature:()
init	rbbi.cpp	/^void RuleBasedBreakIterator::init() {$/;"	f	class:RuleBasedBreakIterator	signature:()
init	rbbidata.cpp	/^void RBBIDataWrapper::init(const RBBIDataHeader *data, UErrorCode &status) {$/;"	f	class:RBBIDataWrapper	signature:(const RBBIDataHeader *data, UErrorCode &status)
init	rbbidata.h	/^    void                  init(const RBBIDataHeader *data, UErrorCode &status);$/;"	p	class:RBBIDataWrapper	access:public	signature:(const RBBIDataHeader *data, UErrorCode &status)
init	unicode/locid.h	/^    Locale& init(const char* cLocaleID, UBool canonicalize);$/;"	p	class:Locale	access:private	signature:(const char* cLocaleID, UBool canonicalize)
init	unicode/normlzr.h	/^  void    init();$/;"	p	class:Normalizer	access:private	signature:()
init	unicode/rbbi.h	/^    void init();$/;"	p	class:RuleBasedBreakIterator	access:protected	signature:()
initBits	bmpset.cpp	/^void BMPSet::initBits() {$/;"	f	class:BMPSet	signature:()
initBits	bmpset.h	/^    void initBits();$/;"	p	class:BMPSet	access:private	signature:()
initCache	uresbund.c	/^static void initCache(UErrorCode *status) {$/;"	f	file:	signature:(UErrorCode *status)
initCache	usprep.cpp	/^initCache(UErrorCode *status) {$/;"	f	file:	signature:(UErrorCode *status)
initIndexes	unorm_it.c	/^initIndexes(UNormIterator *uni, UCharIterator *iter) {$/;"	f	file:	signature:(UNormIterator *uni, UCharIterator *iter)
initLocaleFromName	locutil.cpp	/^LocaleUtility::initLocaleFromName(const UnicodeString& id, Locale& result)$/;"	f	class:LocaleUtility	signature:(const UnicodeString& id, Locale& result)
initLocaleFromName	locutil.h	/^  static Locale& initLocaleFromName(const UnicodeString& id, Locale& result);$/;"	p	class:LocaleUtility	access:public	signature:(const UnicodeString& id, Locale& result)
initNameFromLocale	locutil.cpp	/^LocaleUtility::initNameFromLocale(const Locale& locale, UnicodeString& result)$/;"	f	class:LocaleUtility	signature:(const Locale& locale, UnicodeString& result)
initNameFromLocale	locutil.h	/^  static UnicodeString& initNameFromLocale(const Locale& locale, UnicodeString& result);$/;"	p	class:LocaleUtility	access:public	signature:(const Locale& locale, UnicodeString& result)
init_entry	uresbund.c	/^static UResourceDataEntry *init_entry(const char *localeID, const char *path, UErrorCode *status) {$/;"	f	file:	signature:(const char *localeID, const char *path, UErrorCode *status)
init_resb_result	uresbund.c	/^static UResourceBundle *init_resb_result(const ResourceData *rdata, Resource r, $/;"	f	file:	signature:(const ResourceData *rdata, Resource r, const char *key, int32_t idx, UResourceDataEntry *realData, const UResourceBundle *parent, int32_t noAlias, UResourceBundle *resB, UErrorCode *status)
initialDynamicOffsets	ucnvscsu.c	/^static const uint32_t initialDynamicOffsets[8]={$/;"	v	file:
initialValue	propsvec.h	/^    int32_t initialValue;$/;"	m	struct:UPVecToUTrie2Context	access:public
initialValue	utrie.h	/^    uint32_t initialValue;$/;"	m	struct:UTrie	access:public
initialValue	utrie2.h	/^    uint32_t initialValue;$/;"	m	struct:UTrie2	access:public
initialValue	utrie2_impl.h	/^    uint32_t initialValue, errorValue;$/;"	m	struct:UNewTrie2	access:public
initialWindowUse	ucnvscsu.c	/^static const int8_t initialWindowUse[8]={ 7, 0, 3, 2, 4, 5, 6, 1 };$/;"	v	file:
initialWindowUse_ja	ucnvscsu.c	/^static const int8_t initialWindowUse_ja[8]={ 3, 2, 4, 1, 0, 7, 5, 6 };$/;"	v	file:
initializeSets	ucnvisci.c	/^static void initializeSets() {$/;"	f	file:
inline	umutex.c	35;"	d	file:
inline	umutex.c	40;"	d	file:
insert	normalizer2impl.cpp	/^void ReorderingBuffer::insert(UChar32 c, uint8_t cc) {$/;"	f	class:ReorderingBuffer	signature:(UChar32 c, uint8_t cc)
insert	normalizer2impl.h	/^    void insert(UChar32 c, uint8_t cc);$/;"	p	class:ReorderingBuffer	access:private	signature:(UChar32 c, uint8_t cc)
insert	unicode/unistr.h	/^  inline UnicodeString& insert(int32_t start,$/;"	p	class:UnicodeString	access:public	signature:(int32_t start, UChar srcChar)
insert	unicode/unistr.h	/^  inline UnicodeString& insert(int32_t start,$/;"	p	class:UnicodeString	access:public	signature:(int32_t start, UChar32 srcChar)
insert	unicode/unistr.h	/^  inline UnicodeString& insert(int32_t start,$/;"	p	class:UnicodeString	access:public	signature:(int32_t start, const UChar *srcChars, int32_t srcLength)
insert	unicode/unistr.h	/^  inline UnicodeString& insert(int32_t start,$/;"	p	class:UnicodeString	access:public	signature:(int32_t start, const UChar *srcChars, int32_t srcStart, int32_t srcLength)
insert	unicode/unistr.h	/^  inline UnicodeString& insert(int32_t start,$/;"	p	class:UnicodeString	access:public	signature:(int32_t start, const UnicodeString& srcText)
insert	unicode/unistr.h	/^  inline UnicodeString& insert(int32_t start,$/;"	p	class:UnicodeString	access:public	signature:(int32_t start, const UnicodeString& srcText, int32_t srcStart, int32_t srcLength)
insert	unicode/unistr.h	/^UnicodeString::insert(int32_t start,$/;"	f	class:UnicodeString	signature:(int32_t start, UChar srcChar)
insert	unicode/unistr.h	/^UnicodeString::insert(int32_t start,$/;"	f	class:UnicodeString	signature:(int32_t start, UChar32 srcChar)
insert	unicode/unistr.h	/^UnicodeString::insert(int32_t start,$/;"	f	class:UnicodeString	signature:(int32_t start, const UChar *srcChars, int32_t srcLength)
insert	unicode/unistr.h	/^UnicodeString::insert(int32_t start,$/;"	f	class:UnicodeString	signature:(int32_t start, const UChar *srcChars, int32_t srcStart, int32_t srcLength)
insert	unicode/unistr.h	/^UnicodeString::insert(int32_t start,$/;"	f	class:UnicodeString	signature:(int32_t start, const UnicodeString& srcText)
insert	unicode/unistr.h	/^UnicodeString::insert(int32_t start,$/;"	f	class:UnicodeString	signature:(int32_t start, const UnicodeString& srcText, int32_t srcStart, int32_t srcLength)
insertElementAt	uvector.cpp	/^void UVector::insertElementAt(int32_t elem, int32_t index, UErrorCode &status) {$/;"	f	class:UVector	signature:(int32_t elem, int32_t index, UErrorCode &status)
insertElementAt	uvector.cpp	/^void UVector::insertElementAt(void* obj, int32_t index, UErrorCode &status) {$/;"	f	class:UVector	signature:(void* obj, int32_t index, UErrorCode &status)
insertElementAt	uvector.h	/^    void insertElementAt(int32_t elem, int32_t index, UErrorCode &status);$/;"	p	class:UVector	access:public	signature:(int32_t elem, int32_t index, UErrorCode &status)
insertElementAt	uvector.h	/^    void insertElementAt(void* obj, int32_t index, UErrorCode &status);$/;"	p	class:UVector	access:public	signature:(void* obj, int32_t index, UErrorCode &status)
insertElementAt	uvectr32.cpp	/^void UVector32::insertElementAt(int32_t elem, int32_t index, UErrorCode &status) {$/;"	f	class:UVector32	signature:(int32_t elem, int32_t index, UErrorCode &status)
insertElementAt	uvectr32.h	/^    void insertElementAt(int32_t elem, int32_t index, UErrorCode &status);$/;"	p	class:UVector32	access:public	signature:(int32_t elem, int32_t index, UErrorCode &status)
insertElementAt	uvectr64.cpp	/^void UVector64::insertElementAt(int64_t elem, int32_t index, UErrorCode &status) {$/;"	f	class:UVector64	signature:(int64_t elem, int32_t index, UErrorCode &status)
insertElementAt	uvectr64.h	/^    void insertElementAt(int64_t elem, int32_t index, UErrorCode &status);$/;"	p	class:UVector64	access:public	signature:(int64_t elem, int32_t index, UErrorCode &status)
insertPoints	ubidiimp.h	/^    InsertPoints insertPoints;$/;"	m	struct:UBiDi	access:public
insertRemove	ubidiimp.h	/^            insertRemove;   \/* if >0, flags for inserting LRM\/RLM before\/after run,$/;"	m	struct:Run	access:public
insertionSort	uarrsort.c	/^insertionSort(char *array, int32_t length, int32_t itemSize,$/;"	f	file:	signature:(char *array, int32_t length, int32_t itemSize, UComparator *cmp, const void *context, UErrorCode *pErrorCode)
installed	uresbund.c	/^    UResourceBundle installed;$/;"	m	struct:ULocalesContext	file:	access:public
int16_t	unicode/ppalmos.h	/^typedef signed short int16_t;$/;"	t
int16_t	unicode/ptypes.h	/^typedef signed short int16_t;$/;"	t
int16_t	unicode/pwin32.h	/^typedef signed short int16_t;$/;"	t
int32_t	unicode/ppalmos.h	/^typedef signed int int32_t;$/;"	t
int32_t	unicode/ptypes.h	/^typedef signed int int32_t;$/;"	t
int32_t	unicode/pwin32.h	/^typedef signed int int32_t;$/;"	t
int64	putil.c	/^    int64_t int64;$/;"	m	union:__anon41	file:	access:public
int64_t	unicode/ppalmos.h	/^    typedef signed __int64 int64_t;$/;"	t
int64_t	unicode/ppalmos.h	/^    typedef signed long long int64_t;$/;"	t
int64_t	unicode/ptypes.h	/^    typedef signed long long int64_t;$/;"	t
int64_t	unicode/pwin32.h	/^    typedef signed __int64 int64_t;$/;"	t
int64_t	unicode/pwin32.h	/^    typedef signed long long int64_t;$/;"	t
int8_t	unicode/ppalmos.h	/^typedef signed char int8_t;$/;"	t
int8_t	unicode/ptypes.h	/^typedef signed char int8_t;$/;"	t
int8_t	unicode/pwin32.h	/^typedef signed char int8_t;$/;"	t
intPropertyFilter	uniset_props.cpp	/^static UBool intPropertyFilter(UChar32 ch, void* context) {$/;"	f	file:	signature:(UChar32 ch, void* context)
intProps	uprops.cpp	/^static const IntProperty intProps[UCHAR_INT_LIMIT-UCHAR_INT_START]={$/;"	v	file:
int_getDefaultCodepage	putil.c	/^int_getDefaultCodepage()$/;"	f	file:
integer	uhash.h	/^    int32_t integer;$/;"	m	union:UHashTok	access:public
internalSetName	ucnv_bld.c	/^internalSetName(const char *name, UErrorCode *status) {$/;"	f	file:	signature:(const char *name, UErrorCode *status)
intersectMasks	ucnvsel.cpp	/^static UBool intersectMasks(uint32_t* dest, const uint32_t* source1, int32_t len) {$/;"	f	file:	signature:(uint32_t* dest, const uint32_t* source1, int32_t len)
invalidCharBuffer	ucnv_bld.h	/^    char invalidCharBuffer[UCNV_MAX_CHAR_LEN];          \/* bytes from last error\/callback situation *\/$/;"	m	struct:UConverter	access:public
invalidCharLength	ucnv_bld.h	/^    int8_t invalidCharLength;$/;"	m	struct:UConverter	access:public
invalidUCharBuffer	ucnv_bld.h	/^    UChar invalidUCharBuffer[U16_MAX_LENGTH];           \/* UChars from last error\/callback situation *\/$/;"	m	struct:UConverter	access:public
invalidUCharLength	ucnv_bld.h	/^    int8_t invalidUCharLength;$/;"	m	struct:UConverter	access:public
invalidateChunk	utext.cpp	/^invalidateChunk(UText *ut) {$/;"	f	file:	signature:(UText *ut)
invariantChars	uinvchar.c	/^static const uint32_t invariantChars[4]={$/;"	v	file:
invertBuffer	ushape.c	/^invertBuffer(UChar *buffer,int32_t size,uint64_t options,int32_t lowlimit,int32_t highlimit) {$/;"	f	file:	signature:(UChar *buffer,int32_t size,uint64_t options,int32_t lowlimit,int32_t highlimit)
io_compareRows	ucnv_io.c	/^io_compareRows(const void *context, const void *left, const void *right) {$/;"	f	file:	signature:(const void *context, const void *left, const void *right)
isASCIIOkBiDi	uts46.cpp	/^isASCIIOkBiDi(const UChar *s, int32_t length) {$/;"	f	file:	signature:(const UChar *s, int32_t length)
isASCIIOkBiDi	uts46.cpp	/^isASCIIOkBiDi(const UChar *s, int32_t length);$/;"	p	file:	signature:(const UChar *s, int32_t length)
isASCIIOkBiDi	uts46.cpp	/^isASCIIOkBiDi(const char *s, int32_t length) {$/;"	f	file:	signature:(const char *s, int32_t length)
isASCIIOkBiDi	uts46.cpp	/^isASCIIOkBiDi(const char *s, int32_t length);$/;"	p	file:	signature:(const char *s, int32_t length)
isASCIIString	uts46.cpp	/^isASCIIString(const UnicodeString &dest) {$/;"	f	file:	signature:(const UnicodeString &dest)
isAcceptable	normalizer2impl.cpp	/^Normalizer2Impl::isAcceptable(void *context,$/;"	f	class:Normalizer2Impl	signature:(void *context, const char * , const char * , const UDataInfo *pInfo)
isAcceptable	normalizer2impl.h	/^    isAcceptable(void *context, const char *type, const char *name, const UDataInfo *pInfo);$/;"	p	class:Normalizer2Impl	access:private	signature:(void *context, const char *type, const char *name, const UDataInfo *pInfo)
isAcceptable	ucnv_io.c	/^isAcceptable(void *context,$/;"	f	file:	signature:(void *context, const char *type, const char *name, const UDataInfo *pInfo)
isAcceptable	unames.c	/^isAcceptable(void *context,$/;"	f	file:	signature:(void *context, const char *type, const char *name, const UDataInfo *pInfo)
isAcceptable	uresdata.c	/^isAcceptable(void *context,$/;"	f	file:	signature:(void *context, const char *type, const char *name, const UDataInfo *pInfo)
isAlefChar	ushape.c	/^isAlefChar(UChar ch) {$/;"	f	file:	signature:(UChar ch)
isAlefMaksouraChar	ushape.c	/^isAlefMaksouraChar(UChar ch) {$/;"	f	file:	signature:(UChar ch)
isAlias	ucnv_io.c	/^isAlias(const char *alias, UErrorCode *pErrorCode) {$/;"	f	file:	signature:(const char *alias, UErrorCode *pErrorCode)
isAliasInList	ucnv_io.c	/^isAliasInList(const char *alias, uint32_t listOffset) {$/;"	f	file:	signature:(const char *alias, uint32_t listOffset)
isAllocated	utrie.h	/^    UBool isAllocated, isDataAllocated;$/;"	m	struct:UNewTrie	access:public
isBiDi	unicode/idna.h	/^    UBool isBiDi;$/;"	m	class:IDNAInfo	access:private
isBidiControl	uprops.cpp	/^static UBool isBidiControl(const BinaryProperty &\/*prop*\/, UChar32 c, UProperty \/*which*\/) {$/;"	f	file:	signature:(const BinaryProperty & , UChar32 c, UProperty )
isBigEndian	unicode/udata.h	/^    uint8_t isBigEndian;$/;"	m	struct:__anon114	access:public
isBogus	serv.cpp	/^StringPair::isBogus() const {$/;"	f	class:StringPair	signature:() const
isBogus	unicode/locid.h	/^    UBool isBogus(void) const;$/;"	p	class:Locale	access:public	signature:(void) const
isBogus	unicode/locid.h	/^Locale::isBogus(void) const {$/;"	f	class:Locale	signature:(void) const
isBogus	unicode/uniset.h	/^    inline UBool isBogus(void) const;$/;"	p	class:UnicodeSet	access:public	signature:(void) const
isBogus	unicode/uniset.h	/^inline UBool UnicodeSet::isBogus() const {$/;"	f	class:UnicodeSet	signature:() const
isBogus	unicode/unistr.h	/^  inline UBool isBogus(void) const;$/;"	p	class:UnicodeString	access:public	signature:(void) const
isBogus	unicode/unistr.h	/^UnicodeString::isBogus() const$/;"	f	class:UnicodeString	signature:() const
isBoundary	rbbi.cpp	/^UBool RuleBasedBreakIterator::isBoundary(int32_t offset) {$/;"	f	class:RuleBasedBreakIterator	signature:(int32_t offset)
isBoundary	unicode/brkiter.h	/^    virtual UBool isBoundary(int32_t offset) = 0;$/;"	p	class:BreakIterator	access:public	signature:(int32_t offset)
isBoundary	unicode/rbbi.h	/^    virtual UBool isBoundary(int32_t offset);$/;"	p	class:RuleBasedBreakIterator	access:public	signature:(int32_t offset)
isBufferClone	unicode/brkiter.h	/^    inline UBool isBufferClone(void);$/;"	p	class:BreakIterator	access:public	signature:(void)
isBufferWritable	unicode/unistr.h	/^  inline UBool isBufferWritable() const;$/;"	p	class:UnicodeString	access:private	signature:() const
isBufferWritable	unicode/unistr.h	/^UnicodeString::isBufferWritable() const$/;"	f	class:UnicodeString	signature:() const
isCRLFSPTAB	ucnv_u7.c	86;"	d	file:
isCRLFTAB	ucnv_u7.c	85;"	d	file:
isCanonSegmentStarter	normalizer2impl.cpp	/^UBool Normalizer2Impl::isCanonSegmentStarter(UChar32 c) const {$/;"	f	class:Normalizer2Impl	signature:(UChar32 c) const
isCanonSegmentStarter	normalizer2impl.h	/^    UBool isCanonSegmentStarter(UChar32 c) const;$/;"	p	class:Normalizer2Impl	access:public	signature:(UChar32 c) const
isCanonSegmentStarter	uprops.cpp	/^static UBool isCanonSegmentStarter(const BinaryProperty &, UChar32, UProperty) {$/;"	f	file:	signature:(const BinaryProperty &, UChar32, UProperty)
isCanonSegmentStarter	uprops.cpp	/^static UBool isCanonSegmentStarter(const BinaryProperty &\/*prop*\/, UChar32 c, UProperty \/*which*\/) {$/;"	f	file:	signature:(const BinaryProperty & , UChar32 c, UProperty )
isCnvAcceptable	ucnv_bld.c	/^isCnvAcceptable(void *context,$/;"	f	file:	signature:(void *context, const char *type, const char *name, const UDataInfo *pInfo)
isCompNo	normalizer2impl.h	/^    UBool isCompNo(uint16_t norm16) const { return minNoNo<=norm16 && norm16<minMaybeYes; }$/;"	f	class:Normalizer2Impl	access:public	signature:(uint16_t norm16) const
isCompYesAndZeroCC	normalizer2impl.h	/^    UBool isCompYesAndZeroCC(uint16_t norm16) const { return norm16<minNoNo; }$/;"	f	class:Normalizer2Impl	access:private	signature:(uint16_t norm16) const
isCompacted	propsvec.c	/^    UBool isCompacted;$/;"	m	struct:UPropsVectors	file:	access:public
isCompacted	utrie.h	/^    UBool isLatin1Linear, isCompacted;$/;"	m	struct:UNewTrie	access:public
isCompacted	utrie2_impl.h	/^    UBool isCompacted;$/;"	m	struct:UNewTrie2	access:public
isCopyLocal	ucnv_bld.h	/^    UBool isCopyLocal;  \/* TRUE if UConverter is not owned and not released in ucnv_close() (stack-allocated, safeClone(), etc.) *\/$/;"	m	struct:UConverter	access:public
isDataAllocated	utrie.h	/^    UBool isAllocated, isDataAllocated;$/;"	m	struct:UNewTrie	access:public
isDataLoaded	sprpimpl.h	/^    UBool isDataLoaded;$/;"	m	struct:UStringPrepProfile	access:public
isDataLoaded	unames.c	/^isDataLoaded(UErrorCode *pErrorCode) {$/;"	f	file:	signature:(UErrorCode *pErrorCode)
isDecompInert	normalizer2impl.h	/^    UBool isDecompInert(UChar32 c) const { return isDecompYesAndZeroCC(getNorm16(c)); }$/;"	f	class:Normalizer2Impl	access:public	signature:(UChar32 c) const
isDecompNoAlgorithmic	normalizer2impl.h	/^    UBool isDecompNoAlgorithmic(uint16_t norm16) const { return norm16>=limitNoNo; }$/;"	f	class:Normalizer2Impl	access:private	signature:(uint16_t norm16) const
isDecompYes	normalizer2impl.h	/^    UBool isDecompYes(uint16_t norm16) const { return norm16<minYesNo || minMaybeYes<=norm16; }$/;"	f	class:Normalizer2Impl	access:public	signature:(uint16_t norm16) const
isDecompYesAndZeroCC	normalizer2impl.h	/^    UBool isDecompYesAndZeroCC(uint16_t norm16) const {$/;"	f	class:Normalizer2Impl	access:private	signature:(uint16_t norm16) const
isDefault	brkiter.cpp	/^    virtual UBool isDefault() const {$/;"	f	class:ICUBreakIteratorService	access:public	signature:() const
isDefault	serv.cpp	/^ICUService::isDefault() const $/;"	f	class:ICUService	signature:() const
isEmpty	charstr.h	/^    UBool isEmpty() { return len==0; }$/;"	f	class:CharString	access:public	signature:()
isEmpty	normalizer2impl.h	/^    UBool isEmpty() const { return start==limit; }$/;"	f	class:ReorderingBuffer	access:public	signature:() const
isEmpty	unicode/uniset.h	/^    virtual UBool isEmpty(void) const;$/;"	p	class:UnicodeSet	access:public	signature:(void) const
isEmpty	unicode/unistr.h	/^  inline UBool isEmpty(void) const;$/;"	p	class:UnicodeString	access:public	signature:(void) const
isEmpty	unicode/unistr.h	/^UnicodeString::isEmpty() const {$/;"	f	class:UnicodeString	signature:() const
isEmpty	uniset.cpp	/^UBool UnicodeSet::isEmpty(void) const {$/;"	f	class:UnicodeSet	signature:(void) const
isEmpty	unisetspan.cpp	/^    UBool isEmpty() const {$/;"	f	class:OffsetList	access:public	signature:() const
isEmpty	uvector.h	/^    UBool isEmpty(void) const;$/;"	p	class:UVector	access:public	signature:(void) const
isEmpty	uvector.h	/^inline UBool UVector::isEmpty(void) const {$/;"	f	class:UVector	signature:(void) const
isEmpty	uvectr32.h	/^    UBool isEmpty(void) const;$/;"	p	class:UVector32	access:public	signature:(void) const
isEmpty	uvectr32.h	/^inline UBool UVector32::isEmpty(void) const {$/;"	f	class:UVector32	signature:(void) const
isEmptySegment	ucnv2022.c	/^    UBool isEmptySegment;$/;"	m	struct:__anon68	file:	access:public
isEmptySegment	ucnvhz.c	/^    UBool isEmptySegment;$/;"	m	struct:__anon61	file:	access:public
isEscapeAppended	ucnvhz.c	/^    UBool isEscapeAppended;$/;"	m	struct:__anon61	file:	access:public
isExtraLocal	ucnv_bld.h	/^    UBool isExtraLocal; \/* TRUE if extraInfo is not owned and not released in ucnv_close() (stack-allocated, safeClone(), etc.) *\/$/;"	m	struct:UConverter	access:public
isFCDInert	normalizer2impl.h	/^    UBool isFCDInert(UChar32 c) const { return getFCD16(c)<=1; }$/;"	f	class:Normalizer2Impl	access:public	signature:(UChar32 c) const
isFailure	unicode/errorcode.h	/^    UBool isFailure() const { return U_FAILURE(errorCode); }$/;"	f	class:ErrorCode	access:public	signature:() const
isFallbackOf	locutil.cpp	/^LocaleUtility::isFallbackOf(const UnicodeString& root, const UnicodeString& child)$/;"	f	class:LocaleUtility	signature:(const UnicodeString& root, const UnicodeString& child)
isFallbackOf	locutil.h	/^  static UBool isFallbackOf(const UnicodeString& root, const UnicodeString& child);$/;"	p	class:LocaleUtility	access:public	signature:(const UnicodeString& root, const UnicodeString& child)
isFallbackOf	serv.cpp	/^ICUServiceKey::isFallbackOf(const UnicodeString& id) const $/;"	f	class:ICUServiceKey	signature:(const UnicodeString& id) const
isFallbackOf	serv.h	/^  virtual UBool isFallbackOf(const UnicodeString& id) const;$/;"	p	class:ICUServiceKey	access:public	signature:(const UnicodeString& id) const
isFallbackOf	servlk.cpp	/^LocaleKey::isFallbackOf(const UnicodeString& id) const {$/;"	f	class:LocaleKey	signature:(const UnicodeString& id) const
isFallbackOf	servloc.h	/^    virtual UBool isFallbackOf(const UnicodeString& id) const;$/;"	p	class:LocaleKey	access:public	signature:(const UnicodeString& id) const
isFirstBuffer	ucnv2022.c	/^    UBool isFirstBuffer;$/;"	m	struct:__anon68	file:	access:public
isFirstBuffer	ucnvisci.c	/^    UBool isFirstBuffer;                \/* boolean for fromUnicode to see if we need to announce the first script *\/$/;"	m	struct:__anon16	file:	access:public
isFollowedByCasedLetter	ucase.c	/^isFollowedByCasedLetter(const UCaseProps *csp, UCaseContextIterator *iter, void *context, int8_t dir) {$/;"	f	file:	signature:(const UCaseProps *csp, UCaseContextIterator *iter, void *context, int8_t dir)
isFollowedByDotAbove	ucase.c	/^isFollowedByDotAbove(const UCaseProps *csp, UCaseContextIterator *iter, void *context) {$/;"	f	file:	signature:(const UCaseProps *csp, UCaseContextIterator *iter, void *context)
isFollowedByMoreAbove	ucase.c	/^isFollowedByMoreAbove(const UCaseProps *csp, UCaseContextIterator *iter, void *context) {$/;"	f	file:	signature:(const UCaseProps *csp, UCaseContextIterator *iter, void *context)
isFrozen	unicode/uniset.h	/^    inline UBool isFrozen() const;$/;"	p	class:UnicodeSet	access:public	signature:() const
isFrozen	unicode/uniset.h	/^inline UBool UnicodeSet::isFrozen() const {$/;"	f	class:UnicodeSet	signature:() const
isHangul	normalizer2impl.h	/^    UBool isHangul(uint16_t norm16) const { return norm16==minYesNo; }$/;"	f	class:Normalizer2Impl	access:private	signature:(uint16_t norm16) const
isHangul	normalizer2impl.h	/^    static inline UBool isHangul(UChar32 c) {$/;"	f	class:Hangul	access:public	signature:(UChar32 c)
isHangulWithoutJamoT	normalizer2impl.h	/^    isHangulWithoutJamoT(UChar c) {$/;"	f	class:Hangul	access:public	signature:(UChar c)
isInNullBlock	utrie2_builder.c	/^isInNullBlock(UNewTrie2 *trie, UChar32 c, UBool forLSCP) {$/;"	f	file:	signature:(UNewTrie2 *trie, UChar32 c, UBool forLSCP)
isInOffsetWindowOrDirect	ucnvscsu.c	/^isInOffsetWindowOrDirect(uint32_t offset, uint32_t c) {$/;"	f	file:	signature:(uint32_t offset, uint32_t c)
isInert	filterednormalizer2.cpp	/^FilteredNormalizer2::isInert(UChar32 c) const {$/;"	f	class:FilteredNormalizer2	signature:(UChar32 c) const
isInert	normalizer2.cpp	/^    virtual UBool isInert(UChar32 c) const { return impl.isDecompInert(c); }$/;"	f	class:DecomposeNormalizer2	file:	access:private	signature:(UChar32 c) const
isInert	normalizer2.cpp	/^    virtual UBool isInert(UChar32 c) const { return impl.isFCDInert(c); }$/;"	f	class:FCDNormalizer2	file:	access:private	signature:(UChar32 c) const
isInert	normalizer2.cpp	/^    virtual UBool isInert(UChar32 c) const {$/;"	f	class:ComposeNormalizer2	file:	access:private	signature:(UChar32 c) const
isInert	normalizer2.cpp	/^    virtual UBool isInert(UChar32) const { return TRUE; }$/;"	f	class:NoopNormalizer2	file:	access:private	signature:(UChar32) const
isInert	normalizer2impl.h	/^    static UBool isInert(uint16_t norm16) { return norm16==0; }$/;"	f	class:Normalizer2Impl	access:private	signature:(uint16_t norm16)
isInert	unicode/normalizer2.h	/^    virtual UBool isInert(UChar32 c) const = 0;$/;"	p	class:Normalizer2	access:public	signature:(UChar32 c) const
isInert	unicode/normalizer2.h	/^    virtual UBool isInert(UChar32 c) const;$/;"	p	class:FilteredNormalizer2	access:public	signature:(UChar32 c) const
isInverse	ubidiimp.h	/^    UBool isInverse;$/;"	m	struct:UBiDi	access:public
isIsolatedTashkeelChar	ushape.c	/^isIsolatedTashkeelChar(UChar ch){$/;"	f	file:	signature:(UChar ch)
isJamoL	normalizer2impl.h	/^    static inline UBool isJamoL(UChar32 c) {$/;"	f	class:Hangul	access:public	signature:(UChar32 c)
isJamoV	normalizer2impl.h	/^    static inline UBool isJamoV(UChar32 c) {$/;"	f	class:Hangul	access:public	signature:(UChar32 c)
isJamoVT	normalizer2impl.h	/^    static UBool isJamoVT(uint16_t norm16) { return norm16==JAMO_VT; }$/;"	f	class:Normalizer2Impl	access:private	signature:(uint16_t norm16)
isJoinControl	uprops.cpp	/^static UBool isJoinControl(const BinaryProperty &\/*prop*\/, UChar32 c, UProperty \/*which*\/) {$/;"	f	file:	signature:(const BinaryProperty & , UChar32 c, UProperty )
isLDHChar	uidna.cpp	/^static inline UBool isLDHChar(UChar ch){$/;"	f	file:	signature:(UChar ch)
isLabelOkContextJ	uts46.cpp	/^    isLabelOkContextJ(const UChar *label, int32_t labelLength) const;$/;"	p	class:UTS46	file:	access:private	signature:(const UChar *label, int32_t labelLength) const
isLabelOkContextJ	uts46.cpp	/^UTS46::isLabelOkContextJ(const UChar *label, int32_t labelLength) const {$/;"	f	class:UTS46	signature:(const UChar *label, int32_t labelLength) const
isLabelSeparator	uidna.cpp	/^static inline UBool isLabelSeparator(UChar ch){$/;"	f	file:	signature:(UChar ch)
isLamAlefChar	ushape.c	/^isLamAlefChar(UChar ch) {$/;"	f	file:	signature:(UChar ch)
isLatin1Linear	utrie.h	/^    UBool isLatin1Linear, isCompacted;$/;"	m	struct:UNewTrie	access:public
isLatin1Linear	utrie.h	/^    UBool isLatin1Linear;$/;"	m	struct:UTrie	access:public
isLegalIMAP	ucnv_u7.c	837;"	d	file:
isLegalUTF7	ucnv_u7.c	94;"	d	file:
isLocaleInList	uresbund.c	/^static UBool isLocaleInList(UEnumeration *locEnum, const char *locToSearch, UErrorCode *status) {$/;"	f	file:	signature:(UEnumeration *locEnum, const char *locToSearch, UErrorCode *status)
isMatchAtCPBoundary	ustring.c	/^isMatchAtCPBoundary(const UChar *start, const UChar *match, const UChar *matchLimit, const UChar *limit) {$/;"	f	file:	signature:(const UChar *start, const UChar *match, const UChar *matchLimit, const UChar *limit)
isMaybe	normalizer2impl.h	/^    UBool isMaybe(uint16_t norm16) const { return minMaybeYes<=norm16 && norm16<=JAMO_VT; }$/;"	f	class:Normalizer2Impl	access:private	signature:(uint16_t norm16) const
isMaybeOrNonZeroCC	normalizer2impl.h	/^    UBool isMaybeOrNonZeroCC(uint16_t norm16) const { return norm16>=minMaybeYes; }$/;"	f	class:Normalizer2Impl	access:private	signature:(uint16_t norm16) const
isMemoryOwned	utrie2.h	/^    UBool isMemoryOwned;    \/* TRUE if the trie owns the memory *\/$/;"	m	struct:UTrie2	access:public
isMirrored	uprops.cpp	/^static UBool isMirrored(const BinaryProperty &\/*prop*\/, UChar32 c, UProperty \/*which*\/) {$/;"	f	file:	signature:(const BinaryProperty & , UChar32 c, UProperty )
isMostDecompYesAndZeroCC	normalizer2impl.h	/^    UBool isMostDecompYesAndZeroCC(uint16_t norm16) const {$/;"	f	class:Normalizer2Impl	access:private	signature:(uint16_t norm16) const
isNameOpen	uniset_props.cpp	/^isNameOpen(const UnicodeString &pattern, int32_t pos) {$/;"	f	file:	signature:(const UnicodeString &pattern, int32_t pos)
isNonASCIIDisallowedSTD3Valid	uts46.cpp	/^isNonASCIIDisallowedSTD3Valid(UChar32 c) {$/;"	f	file:	signature:(UChar32 c)
isNonDigit	putil.c	676;"	d	file:
isNormInert	uprops.cpp	/^static UBool isNormInert(const BinaryProperty &, UChar32, UProperty) {$/;"	f	file:	signature:(const BinaryProperty &, UChar32, UProperty)
isNormInert	uprops.cpp	/^static UBool isNormInert(const BinaryProperty &\/*prop*\/, UChar32 c, UProperty which) {$/;"	f	file:	signature:(const BinaryProperty & , UChar32 c, UProperty which)
isNormalized	filterednormalizer2.cpp	/^FilteredNormalizer2::isNormalized(const UnicodeString &s, UErrorCode &errorCode) const {$/;"	f	class:FilteredNormalizer2	signature:(const UnicodeString &s, UErrorCode &errorCode) const
isNormalized	normalizer2.cpp	/^    isNormalized(const UnicodeString &, UErrorCode &) const {$/;"	f	class:NoopNormalizer2	file:	access:private	signature:(const UnicodeString &, UErrorCode &) const
isNormalized	normalizer2.cpp	/^    isNormalized(const UnicodeString &s, UErrorCode &errorCode) const {$/;"	f	class:ComposeNormalizer2	file:	access:private	signature:(const UnicodeString &s, UErrorCode &errorCode) const
isNormalized	normalizer2.cpp	/^    isNormalized(const UnicodeString &s, UErrorCode &errorCode) const {$/;"	f	class:Normalizer2WithImpl	access:public	signature:(const UnicodeString &s, UErrorCode &errorCode) const
isNormalized	normlzr.cpp	/^Normalizer::isNormalized(const UnicodeString& source,$/;"	f	class:Normalizer	signature:(const UnicodeString& source, UNormalizationMode mode, int32_t options, UErrorCode &status)
isNormalized	unicode/normalizer2.h	/^    isNormalized(const UnicodeString &s, UErrorCode &errorCode) const = 0;$/;"	p	class:Normalizer2	access:public	signature:(const UnicodeString &s, UErrorCode &errorCode) const
isNormalized	unicode/normalizer2.h	/^    isNormalized(const UnicodeString &s, UErrorCode &errorCode) const;$/;"	p	class:FilteredNormalizer2	access:public	signature:(const UnicodeString &s, UErrorCode &errorCode) const
isNormalized	unicode/normlzr.h	/^  isNormalized(const UnicodeString &src, UNormalizationMode mode, UErrorCode &errorCode);$/;"	p	class:Normalizer	access:public	signature:(const UnicodeString &src, UNormalizationMode mode, UErrorCode &errorCode)
isNormalized	unicode/normlzr.h	/^  isNormalized(const UnicodeString &src, UNormalizationMode mode, int32_t options, UErrorCode &errorCode);$/;"	p	class:Normalizer	access:public	signature:(const UnicodeString &src, UNormalizationMode mode, int32_t options, UErrorCode &errorCode)
isNormalized	unicode/normlzr.h	/^Normalizer::isNormalized(const UnicodeString& source,$/;"	f	class:Normalizer	signature:(const UnicodeString& source, UNormalizationMode mode, UErrorCode &status)
isNull	unicode/localpointer.h	/^    UBool isNull() const { return ptr==NULL; }$/;"	f	class:LocalPointerBase	access:public	signature:() const
isOkBiDi	unicode/idna.h	/^    UBool isOkBiDi;$/;"	m	class:IDNAInfo	access:private
isPNameAcceptable	propname.cpp	/^isPNameAcceptable(void* \/*context*\/,$/;"	f	file:	signature:(void* , const char* , const char* , const UDataInfo* info)
isPOSIXOpen	uniset_props.cpp	/^isPOSIXOpen(const UnicodeString &pattern, int32_t pos) {$/;"	f	file:	signature:(const UnicodeString &pattern, int32_t pos)
isPOSIX_alnum	uprops.cpp	/^static UBool isPOSIX_alnum(const BinaryProperty &\/*prop*\/, UChar32 c, UProperty \/*which*\/) {$/;"	f	file:	signature:(const BinaryProperty & , UChar32 c, UProperty )
isPOSIX_blank	uprops.cpp	/^static UBool isPOSIX_blank(const BinaryProperty &\/*prop*\/, UChar32 c, UProperty \/*which*\/) {$/;"	f	file:	signature:(const BinaryProperty & , UChar32 c, UProperty )
isPOSIX_graph	uprops.cpp	/^static UBool isPOSIX_graph(const BinaryProperty &\/*prop*\/, UChar32 c, UProperty \/*which*\/) {$/;"	f	file:	signature:(const BinaryProperty & , UChar32 c, UProperty )
isPOSIX_print	uprops.cpp	/^static UBool isPOSIX_print(const BinaryProperty &\/*prop*\/, UChar32 c, UProperty \/*which*\/) {$/;"	f	file:	signature:(const BinaryProperty & , UChar32 c, UProperty )
isPOSIX_xdigit	uprops.cpp	/^static UBool isPOSIX_xdigit(const BinaryProperty &\/*prop*\/, UChar32 c, UProperty \/*which*\/) {$/;"	f	file:	signature:(const BinaryProperty & , UChar32 c, UProperty )
isPerlOpen	uniset_props.cpp	/^isPerlOpen(const UnicodeString &pattern, int32_t pos) {$/;"	f	file:	signature:(const UnicodeString &pattern, int32_t pos)
isPoolBundle	uresdata.h	/^    UBool isPoolBundle;$/;"	m	struct:__anon12	access:public
isPrecededBySoftDotted	ucase.c	/^isPrecededBySoftDotted(const UCaseProps *csp, UCaseContextIterator *iter, void *context) {$/;"	f	file:	signature:(const UCaseProps *csp, UCaseContextIterator *iter, void *context)
isPrecededBy_I	ucase.c	/^isPrecededBy_I(const UCaseProps *csp, UCaseContextIterator *iter, void *context) {$/;"	f	file:	signature:(const UCaseProps *csp, UCaseContextIterator *iter, void *context)
isSPrepAcceptable	usprep.cpp	/^isSPrepAcceptable(void * \/* context *\/,$/;"	f	file:	signature:(void * , const char * , const char * , const UDataInfo *pInfo)
isSeenFamilyChar	ushape.c	/^isSeenFamilyChar(UChar  ch){$/;"	f	file:	signature:(UChar ch)
isSeenTailFamilyChar	ushape.c	/^isSeenTailFamilyChar(UChar ch) {$/;"	f	file:	signature:(UChar ch)
isShared	serv.cpp	/^    UBool isShared() const {$/;"	f	class:CacheEntry	access:public	signature:() const
isSingleOrLead	ucnvmbcs.c	/^isSingleOrLead(const int32_t (*stateTable)[256], uint8_t state, UBool isDBCSOnly, uint8_t b) {$/;"	f	file:	signature:(const int32_t (stateTable)[256], uint8_t state, UBool isDBCSOnly, uint8_t b)
isStackAllocated	unorm_it.c	/^    UBool hasPrevious, hasNext, isStackAllocated;$/;"	m	struct:UNormIterator	file:	access:public
isStateDBCS	ucnvhz.c	/^    UBool isStateDBCS;$/;"	m	struct:__anon61	file:	access:public
isString	unicode/usetiter.h	/^    inline UBool isString() const;$/;"	p	class:UnicodeSetIterator	access:public	signature:() const
isString	unicode/usetiter.h	/^inline UBool UnicodeSetIterator::isString() const {$/;"	f	class:UnicodeSetIterator	signature:() const
isSuccess	unicode/errorcode.h	/^    UBool isSuccess() const { return U_SUCCESS(errorCode); }$/;"	f	class:ErrorCode	access:public	signature:() const
isTailChar	ushape.c	/^isTailChar(UChar ch) {$/;"	f	file:	signature:(UChar ch)
isTargetUCharDBCS	ucnvhz.c	/^    UBool isTargetUCharDBCS;$/;"	m	struct:__anon61	file:	access:public
isTashkeelChar	ushape.c	/^isTashkeelChar(UChar ch) {$/;"	f	file:	signature:(UChar ch)
isTashkeelCharFE	ushape.c	/^isTashkeelCharFE(UChar ch) {$/;"	f	file:	signature:(UChar ch)
isTashkeelOnTatweelChar	ushape.c	/^isTashkeelOnTatweelChar(UChar ch){$/;"	f	file:	signature:(UChar ch)
isTransDiff	unicode/idna.h	/^    UBool isTransDiff;$/;"	m	class:IDNAInfo	access:private
isTransitionalDifferent	unicode/idna.h	/^    UBool isTransitionalDifferent() const { return isTransDiff; }$/;"	f	class:IDNAInfo	access:public	signature:() const
isTransitionalDifferent	unicode/uidna.h	/^    UBool isTransitionalDifferent;$/;"	m	struct:UIDNAInfo	access:public
isUnprintable	util.cpp	/^UBool ICU_Utility::isUnprintable(UChar32 c) {$/;"	f	class:ICU_Utility	signature:(UChar32 c)
isUnprintable	util.h	/^    static UBool isUnprintable(UChar32 c);$/;"	p	class:ICU_Utility	access:public	signature:(UChar32 c)
isValid	unicode/localpointer.h	/^    UBool isValid() const { return ptr!=NULL; }$/;"	f	class:LocalPointerBase	access:public	signature:() const
isValidOlsonID	putil.c	/^static UBool isValidOlsonID(const char *id) {$/;"	f	file:	signature:(const char *id)
isWritable	unicode/unistr.h	/^  inline UBool isWritable() const;$/;"	p	class:UnicodeString	access:private	signature:() const
isWritable	unicode/unistr.h	/^UnicodeString::isWritable() const$/;"	f	class:UnicodeString	signature:() const
isWritableBlock	utrie2_builder.c	/^isWritableBlock(UNewTrie2 *trie, int32_t block) {$/;"	f	file:	signature:(UNewTrie2 *trie, int32_t block)
isYehHamzaChar	ushape.c	/^isYehHamzaChar(UChar ch) {$/;"	f	file:	signature:(UChar ch)
is_a	ucase.c	520;"	d	file:
is_d	ucase.c	521;"	d	file:
is_e	ucase.c	522;"	d	file:
is_i	ucase.c	523;"	d	file:
is_l	ucase.c	524;"	d	file:
is_n	ucase.c	525;"	d	file:
is_r	ucase.c	526;"	d	file:
is_sep	ucase.c	532;"	d	file:
is_t	ucase.c	527;"	d	file:
is_u	ucase.c	528;"	d	file:
is_z	ucase.c	529;"	d	file:
isciiLang	ucnvisci.c	/^    ISCIILang isciiLang;$/;"	m	struct:LookupDataStruct	file:	access:public
item	udata.cpp	/^    UDataMemory   *item;$/;"	m	struct:DataCacheElement	file:	access:public
itemPath	udata.cpp	/^    CharString  itemPath;                          \/* path passed in with item name *\/$/;"	m	class:UDataPathIterator	file:	access:private
iter	unorm_it.c	/^    UCharIterator *iter;$/;"	m	struct:UNormIterator	file:	access:public
iter	ustr_imp.h	/^    UBreakIterator *iter;  \/* We adopt the iterator, so we own it. *\/$/;"	m	struct:UCaseMap	access:public
izrule_clone	unicode/urename.h	120;"	d
izrule_close	unicode/urename.h	121;"	d
izrule_equals	unicode/urename.h	122;"	d
izrule_getDSTSavings	unicode/urename.h	123;"	d
izrule_getDynamicClassID	unicode/urename.h	124;"	d
izrule_getFinalStart	unicode/urename.h	125;"	d
izrule_getFirstStart	unicode/urename.h	126;"	d
izrule_getName	unicode/urename.h	127;"	d
izrule_getNextStart	unicode/urename.h	128;"	d
izrule_getPreviousStart	unicode/urename.h	129;"	d
izrule_getRawOffset	unicode/urename.h	130;"	d
izrule_getStaticClassID	unicode/urename.h	131;"	d
izrule_isEquivalentTo	unicode/urename.h	132;"	d
izrule_open	unicode/urename.h	133;"	d
jDot	ucase.c	/^static const UChar jDot[2] = { 0x6a, 0x307 };$/;"	v	file:
jgArray	ubidi_props.c	/^    const uint8_t *jgArray;$/;"	m	struct:UBiDiProps	file:	access:public
jisx201FromU	ucnv2022.c	/^jisx201FromU(uint32_t value) {$/;"	f	file:	signature:(uint32_t value)
jisx201ToU	ucnv2022.c	/^jisx201ToU(uint32_t value) {$/;"	f	file:	signature:(uint32_t value)
jpCharsetMasks	ucnv2022.c	/^static const uint16_t jpCharsetMasks[MAX_JA_VERSION+1]={$/;"	v	file:
jpCharsetPref	ucnv2022.c	/^static const StateEnum jpCharsetPref[]={$/;"	v	file:
jumpahead	ruleiter.cpp	/^void RuleCharacterIterator::jumpahead(int32_t count) {$/;"	f	class:RuleCharacterIterator	signature:(int32_t count)
jumpahead	ruleiter.h	/^    void jumpahead(int32_t count);$/;"	p	class:RuleCharacterIterator	access:public	signature:(int32_t count)
kAny	rbbiscan.cpp	/^static const UChar kAny[] = {0x61, 0x6e, 0x79, 0x00};  \/\/ "any"$/;"	v	file:
kBufferIsReadonly	unicode/unistr.h	/^    kBufferIsReadonly=8,\/\/ do not write to this buffer$/;"	e	enum:UnicodeString::__anon117
kCountMask	triedict.cpp	/^    kCountMask      = 0x0FFF,       \/\/ The count portion of flagscount$/;"	e	enum:CompactTrieNodeFlags	file:
kCurrent	unicode/chariter.h	/^    enum EOrigin { kStart, kCurrent, kEnd };$/;"	e	enum:CharacterIterator::EOrigin
kDefaultMinorVersion	uresimp.h	23;"	d
kDone	triedict.cpp	/^        kDone$/;"	e	enum:MutableTrieEnumeration::StackBranch	file:
kDontAdopt	rbbidata.h	/^        kDontAdopt$/;"	e	enum:RBBIDataWrapper::EDontAdopt
kDontAdopt	unicode/rbbi.h	/^        kDontAdopt$/;"	e	enum:RuleBasedBreakIterator::EDontAdopt
kEmptyHashCode	unicode/unistr.h	/^    kEmptyHashCode=1, \/\/ hash code for empty string$/;"	e	enum:UnicodeString::__anon117
kEnd	unicode/chariter.h	/^    enum EOrigin { kStart, kCurrent, kEnd };$/;"	e	enum:CharacterIterator::EOrigin
kEndsWord	triedict.cpp	/^    kEndsWord = 0x0001      \/\/ This node marks the end of a valid word$/;"	e	enum:MutableTrieNodeFlags	file:
kEqual	triedict.cpp	/^        kEqual,$/;"	e	enum:MutableTrieEnumeration::StackBranch	file:
kFlagMask	triedict.cpp	/^    kFlagMask       = 0xF000        \/\/ The flags portion of flagscount$/;"	e	enum:CompactTrieNodeFlags	file:
kGreaterThan	triedict.cpp	/^        kGreaterThan,$/;"	e	enum:MutableTrieEnumeration::StackBranch	file:
kGrowSize	unicode/unistr.h	/^    kGrowSize=128, \/\/ grow size for this buffer$/;"	e	enum:UnicodeString::__anon117
kInvalidHashCode	unicode/unistr.h	/^    kInvalidHashCode=0, \/\/ invalid hash code$/;"	e	enum:UnicodeString::__anon117
kInvalidUChar	unicode/unistr.h	/^    kInvalidUChar=0xffff, \/\/ invalid UChar index$/;"	e	enum:UnicodeString::__anon117
kInvariant	unicode/unistr.h	/^    kInvariant$/;"	e	enum:UnicodeString::EInvariant
kIsBogus	unicode/uniset.h	/^        kIsBogus = 1       \/\/ This set is bogus (i.e. not valid)$/;"	e	enum:UnicodeSet::__anon98
kIsBogus	unicode/unistr.h	/^    kIsBogus=1,         \/\/ this string is bogus, i.e., not valid or NULL$/;"	e	enum:UnicodeString::__anon117
kLessThan	triedict.cpp	/^        kLessThan,$/;"	e	enum:MutableTrieEnumeration::StackBranch	file:
kLocaleScript	uscript.c	/^static const char kLocaleScript[] = "LocaleScript";$/;"	v	file:
kLongString	unicode/unistr.h	/^    kLongString=kRefCounted,$/;"	e	enum:UnicodeString::__anon117
kOpenGetBuffer	unicode/unistr.h	/^    kOpenGetBuffer=16,  \/\/ getBuffer(minCapacity) was called (is "open"),$/;"	e	enum:UnicodeString::__anon117
kParentEndsWord	triedict.cpp	/^    kParentEndsWord = 0x2000,       \/\/ The node whose equal link points to this ends a word$/;"	e	enum:CompactTrieNodeFlags	file:
kPoolBundleName	uresimp.h	16;"	d
kReadonlyAlias	unicode/unistr.h	/^    kReadonlyAlias=kBufferIsReadonly,$/;"	e	enum:UnicodeString::__anon117
kRefCounted	unicode/unistr.h	/^    kRefCounted=4,      \/\/ there is a refCount field before the characters in fArray$/;"	e	enum:UnicodeString::__anon117
kReservedFlag1	triedict.cpp	/^    kReservedFlag1  = 0x4000,$/;"	e	enum:CompactTrieNodeFlags	file:
kReservedFlag2	triedict.cpp	/^    kReservedFlag2  = 0x8000,$/;"	e	enum:CompactTrieNodeFlags	file:
kRootLocaleName	uresimp.h	15;"	d
kRuleSet_digit_char	rbbirpt.h	/^    static const uint8_t kRuleSet_digit_char = 128;$/;"	v
kRuleSet_name_char	rbbirpt.h	/^    static const uint8_t kRuleSet_name_char = 129;$/;"	v
kRuleSet_name_start_char	rbbirpt.h	/^    static const uint8_t kRuleSet_name_start_char = 130;$/;"	v
kRuleSet_rule_char	rbbirpt.h	/^    static const uint8_t kRuleSet_rule_char = 131;$/;"	v
kRuleSet_white_space	rbbirpt.h	/^    static const uint8_t kRuleSet_white_space = 132;$/;"	v
kShortString	unicode/unistr.h	/^    kShortString=kUsingStackBuffer,$/;"	e	enum:UnicodeString::__anon117
kStackSize	rbbiscan.h	/^        kStackSize = 100            \/\/ The size of the state stack for$/;"	e	enum:RBBIRuleScanner::__anon44
kStart	unicode/chariter.h	/^    enum EOrigin { kStart, kCurrent, kEnd };$/;"	e	enum:CharacterIterator::EOrigin
kUsingStackBuffer	unicode/unistr.h	/^    kUsingStackBuffer=2,\/\/ fArray==fStackBuffer$/;"	e	enum:UnicodeString::__anon117
kVersionSeparator	uresimp.h	24;"	d
kVersionTag	uresimp.h	25;"	d
kVerticalNode	triedict.cpp	/^    kVerticalNode   = 0x1000,       \/\/ This is a vertical node$/;"	e	enum:CompactTrieNodeFlags	file:
kWritableAlias	unicode/unistr.h	/^    kWritableAlias=0$/;"	e	enum:UnicodeString::__anon117
key	rbbirb.h	/^    UnicodeString          key;$/;"	m	class:RBBISymbolTableEntry	access:public
key	rbbirb.h	/^    UnicodeString *key;$/;"	m	struct:RBBISetTableEl	access:public
key	ucnv2022.c	/^    uint32_t key;$/;"	m	struct:__anon68	file:	access:public
key	uhash.h	/^    UHashTok key;$/;"	m	struct:UHashElement	access:public
key	uloc_tag.c	/^    const char                  *key;$/;"	m	struct:ExtensionListEntry	file:	access:public
keyChars	uresdata.c	/^    const char *keyChars;$/;"	m	struct:TempTable	file:	access:public
keyComparator	uhash.h	/^    UKeyComparator *keyComparator; \/* Compares keys for equality.$/;"	m	struct:UHashtable	access:public
keyDeleter	uhash.h	/^    UObjectDeleter *keyDeleter;    \/* Deletes keys when required.$/;"	m	struct:UHashtable	access:public
keyHasher	uhash.h	/^    UHashFunction *keyHasher;      \/* Computes hash from key.$/;"	m	struct:UHashtable	access:public
keyIndex	uresdata.c	/^    int32_t keyIndex, sortIndex;$/;"	m	struct:Row	file:	access:public
keyword	uloc.c	/^    char keyword[ULOC_KEYWORD_BUFFER_LEN];$/;"	m	struct:__anon71	file:	access:public
keyword	uloc.c	/^    const char *keyword;     \/* keyword, or NULL if none *\/$/;"	m	struct:CanonicalizationMap	file:	access:public
keyword	uloc.c	/^    const char *keyword;     \/* keyword, or NULL if none *\/$/;"	m	struct:VariantMap	file:	access:public
keywordLen	uloc.c	/^    int32_t keywordLen;$/;"	m	struct:__anon71	file:	access:public
keywords	locid.cpp	/^    char *keywords;$/;"	m	class:KeywordEnumeration	file:	access:private
keywords	uloc.c	/^    char* keywords;$/;"	m	struct:UKeywordsContext	file:	access:public
kind	servlk.cpp	/^LocaleKey::kind() const {$/;"	f	class:LocaleKey	signature:() const
kind	servloc.h	/^    virtual int32_t kind() const;$/;"	p	class:LocaleKey	access:public	signature:() const
lGeneric	ucnvscsu.c	/^    lGeneric, l_ja$/;"	e	enum:__anon155	file:
l_ja	ucnvscsu.c	/^    lGeneric, l_ja$/;"	e	enum:__anon155	file:
labelErrors	unicode/idna.h	/^    uint32_t errors, labelErrors;$/;"	m	class:IDNAInfo	access:private
labelToASCII	unicode/idna.h	/^    labelToASCII(const UnicodeString &label, UnicodeString &dest,$/;"	p	class:IDNA	access:public	signature:(const UnicodeString &label, UnicodeString &dest, IDNAInfo &info, UErrorCode &errorCode) const
labelToASCII	uts46.cpp	/^    labelToASCII(const UnicodeString &label, UnicodeString &dest,$/;"	p	class:UTS46	file:	access:public	signature:(const UnicodeString &label, UnicodeString &dest, IDNAInfo &info, UErrorCode &errorCode) const
labelToASCII	uts46.cpp	/^UTS46::labelToASCII(const UnicodeString &label, UnicodeString &dest,$/;"	f	class:UTS46	signature:(const UnicodeString &label, UnicodeString &dest, IDNAInfo &info, UErrorCode &errorCode) const
labelToASCII_UTF8	unicode/idna.h	/^    labelToASCII_UTF8(const StringPiece &label, ByteSink &dest,$/;"	p	class:IDNA	access:public	signature:(const StringPiece &label, ByteSink &dest, IDNAInfo &info, UErrorCode &errorCode) const
labelToASCII_UTF8	uts46.cpp	/^    labelToASCII_UTF8(const StringPiece &label, ByteSink &dest,$/;"	p	class:UTS46	file:	access:public	signature:(const StringPiece &label, ByteSink &dest, IDNAInfo &info, UErrorCode &errorCode) const
labelToASCII_UTF8	uts46.cpp	/^IDNA::labelToASCII_UTF8(const StringPiece &label, ByteSink &dest,$/;"	f	class:IDNA	signature:(const StringPiece &label, ByteSink &dest, IDNAInfo &info, UErrorCode &errorCode) const
labelToASCII_UTF8	uts46.cpp	/^UTS46::labelToASCII_UTF8(const StringPiece &label, ByteSink &dest,$/;"	f	class:UTS46	signature:(const StringPiece &label, ByteSink &dest, IDNAInfo &info, UErrorCode &errorCode) const
labelToUnicode	unicode/idna.h	/^    labelToUnicode(const UnicodeString &label, UnicodeString &dest,$/;"	p	class:IDNA	access:public	signature:(const UnicodeString &label, UnicodeString &dest, IDNAInfo &info, UErrorCode &errorCode) const
labelToUnicode	uts46.cpp	/^    labelToUnicode(const UnicodeString &label, UnicodeString &dest,$/;"	p	class:UTS46	file:	access:public	signature:(const UnicodeString &label, UnicodeString &dest, IDNAInfo &info, UErrorCode &errorCode) const
labelToUnicode	uts46.cpp	/^UTS46::labelToUnicode(const UnicodeString &label, UnicodeString &dest,$/;"	f	class:UTS46	signature:(const UnicodeString &label, UnicodeString &dest, IDNAInfo &info, UErrorCode &errorCode) const
labelToUnicodeUTF8	unicode/idna.h	/^    labelToUnicodeUTF8(const StringPiece &label, ByteSink &dest,$/;"	p	class:IDNA	access:public	signature:(const StringPiece &label, ByteSink &dest, IDNAInfo &info, UErrorCode &errorCode) const
labelToUnicodeUTF8	uts46.cpp	/^    labelToUnicodeUTF8(const StringPiece &label, ByteSink &dest,$/;"	p	class:UTS46	file:	access:public	signature:(const StringPiece &label, ByteSink &dest, IDNAInfo &info, UErrorCode &errorCode) const
labelToUnicodeUTF8	uts46.cpp	/^IDNA::labelToUnicodeUTF8(const StringPiece &label, ByteSink &dest,$/;"	f	class:IDNA	signature:(const StringPiece &label, ByteSink &dest, IDNAInfo &info, UErrorCode &errorCode) const
labelToUnicodeUTF8	uts46.cpp	/^UTS46::labelToUnicodeUTF8(const StringPiece &label, ByteSink &dest,$/;"	f	class:UTS46	signature:(const StringPiece &label, ByteSink &dest, IDNAInfo &info, UErrorCode &errorCode) const
lang	putil.c	/^    int32_t lang;$/;"	m	struct:__anon42	file:	access:public
language	uloc_tag.c	/^    const char          *language;$/;"	m	struct:ULanguageTag	file:	access:public
language	unicode/locid.h	/^    char language[ULOC_LANG_CAPACITY];$/;"	m	class:Locale	access:private
last	normlzr.cpp	/^UChar32 Normalizer::last() {$/;"	f	class:Normalizer	signature:()
last	rbbi.cpp	/^int32_t RuleBasedBreakIterator::last(void) {$/;"	f	class:RuleBasedBreakIterator	signature:(void)
last	uchriter.cpp	/^UCharCharacterIterator::last() {$/;"	f	class:UCharCharacterIterator	signature:()
last	unicode/brkiter.h	/^    virtual int32_t last(void) = 0;$/;"	p	class:BreakIterator	access:public	signature:(void)
last	unicode/chariter.h	/^    virtual UChar         last(void) = 0;$/;"	p	class:CharacterIterator	access:public	signature:(void)
last	unicode/normlzr.h	/^  UChar32              last(void);$/;"	p	class:Normalizer	access:public	signature:(void)
last	unicode/rbbi.h	/^    virtual int32_t last(void);$/;"	p	class:RuleBasedBreakIterator	access:public	signature:(void)
last	unicode/uchriter.h	/^  virtual UChar         last(void);$/;"	p	class:UCharCharacterIterator	access:public	signature:(void)
last32	uchriter.cpp	/^UCharCharacterIterator::last32() {$/;"	f	class:UCharCharacterIterator	signature:()
last32	unicode/chariter.h	/^    virtual UChar32       last32(void) = 0;$/;"	p	class:CharacterIterator	access:public	signature:(void)
last32	unicode/uchriter.h	/^  virtual UChar32       last32(void);$/;"	p	class:UCharCharacterIterator	access:public	signature:(void)
lastArabicPos	ubidiimp.h	/^    int32_t lastArabicPos;$/;"	m	struct:UBiDi	access:public
lastCC	normalizer2impl.h	/^    uint8_t lastCC;$/;"	m	class:ReorderingBuffer	access:private
lastElement	uvector.h	/^    void* lastElement(void) const;$/;"	p	class:UVector	access:public	signature:(void) const
lastElement	uvector.h	/^inline void* UVector::lastElement(void) const {$/;"	f	class:UVector	signature:(void) const
lastElementi	uvector.h	/^    int32_t lastElementi(void) const;$/;"	p	class:UVector	access:public	signature:(void) const
lastElementi	uvector.h	/^inline int32_t UVector::lastElementi(void) const {$/;"	f	class:UVector	signature:(void) const
lastElementi	uvectr32.h	/^    int32_t lastElementi(void) const;$/;"	p	class:UVector32	access:public	signature:(void) const
lastElementi	uvectr32.h	/^inline int32_t UVector32::lastElementi(void) const {$/;"	f	class:UVector32	signature:(void) const
lastElementi	uvectr64.h	/^    int64_t lastElementi(void) const;$/;"	p	class:UVector64	access:public	signature:(void) const
lastElementi	uvectr64.h	/^inline int64_t UVector64::lastElementi(void) const {$/;"	f	class:UVector64	signature:(void) const
lastIndexOf	unicode/unistr.h	/^  inline int32_t lastIndexOf(UChar c) const;$/;"	p	class:UnicodeString	access:public	signature:(UChar c) const
lastIndexOf	unicode/unistr.h	/^  inline int32_t lastIndexOf(UChar c,$/;"	p	class:UnicodeString	access:public	signature:(UChar c, int32_t start) const
lastIndexOf	unicode/unistr.h	/^  inline int32_t lastIndexOf(UChar c,$/;"	p	class:UnicodeString	access:public	signature:(UChar c, int32_t start, int32_t length) const
lastIndexOf	unicode/unistr.h	/^  inline int32_t lastIndexOf(UChar32 c) const;$/;"	p	class:UnicodeString	access:public	signature:(UChar32 c) const
lastIndexOf	unicode/unistr.h	/^  inline int32_t lastIndexOf(UChar32 c,$/;"	p	class:UnicodeString	access:public	signature:(UChar32 c, int32_t start) const
lastIndexOf	unicode/unistr.h	/^  inline int32_t lastIndexOf(UChar32 c,$/;"	p	class:UnicodeString	access:public	signature:(UChar32 c, int32_t start, int32_t length) const
lastIndexOf	unicode/unistr.h	/^  inline int32_t lastIndexOf(const UChar *srcChars,$/;"	p	class:UnicodeString	access:public	signature:(const UChar *srcChars, int32_t srcLength, int32_t start) const
lastIndexOf	unicode/unistr.h	/^  inline int32_t lastIndexOf(const UChar *srcChars,$/;"	p	class:UnicodeString	access:public	signature:(const UChar *srcChars, int32_t srcLength, int32_t start, int32_t length) const
lastIndexOf	unicode/unistr.h	/^  inline int32_t lastIndexOf(const UnicodeString& srcText,$/;"	p	class:UnicodeString	access:public	signature:(const UnicodeString& srcText, int32_t srcStart, int32_t srcLength, int32_t start, int32_t length) const
lastIndexOf	unicode/unistr.h	/^  inline int32_t lastIndexOf(const UnicodeString& text) const;$/;"	p	class:UnicodeString	access:public	signature:(const UnicodeString& text) const
lastIndexOf	unicode/unistr.h	/^  inline int32_t lastIndexOf(const UnicodeString& text,$/;"	p	class:UnicodeString	access:public	signature:(const UnicodeString& text, int32_t start) const
lastIndexOf	unicode/unistr.h	/^  inline int32_t lastIndexOf(const UnicodeString& text,$/;"	p	class:UnicodeString	access:public	signature:(const UnicodeString& text, int32_t start, int32_t length) const
lastIndexOf	unicode/unistr.h	/^  int32_t lastIndexOf(const UChar *srcChars,$/;"	p	class:UnicodeString	access:public	signature:(const UChar *srcChars, int32_t srcStart, int32_t srcLength, int32_t start, int32_t length) const
lastIndexOf	unicode/unistr.h	/^UnicodeString::lastIndexOf(UChar c) const$/;"	f	class:UnicodeString	signature:(UChar c) const
lastIndexOf	unicode/unistr.h	/^UnicodeString::lastIndexOf(UChar c,$/;"	f	class:UnicodeString	signature:(UChar c, int32_t start) const
lastIndexOf	unicode/unistr.h	/^UnicodeString::lastIndexOf(UChar c,$/;"	f	class:UnicodeString	signature:(UChar c, int32_t start, int32_t _length) const
lastIndexOf	unicode/unistr.h	/^UnicodeString::lastIndexOf(UChar32 c) const {$/;"	f	class:UnicodeString	signature:(UChar32 c) const
lastIndexOf	unicode/unistr.h	/^UnicodeString::lastIndexOf(UChar32 c,$/;"	f	class:UnicodeString	signature:(UChar32 c, int32_t start) const
lastIndexOf	unicode/unistr.h	/^UnicodeString::lastIndexOf(UChar32 c,$/;"	f	class:UnicodeString	signature:(UChar32 c, int32_t start, int32_t _length) const
lastIndexOf	unicode/unistr.h	/^UnicodeString::lastIndexOf(const UChar *srcChars,$/;"	f	class:UnicodeString	signature:(const UChar *srcChars, int32_t srcLength, int32_t start) const
lastIndexOf	unicode/unistr.h	/^UnicodeString::lastIndexOf(const UChar *srcChars,$/;"	f	class:UnicodeString	signature:(const UChar *srcChars, int32_t srcLength, int32_t start, int32_t _length) const
lastIndexOf	unicode/unistr.h	/^UnicodeString::lastIndexOf(const UnicodeString& srcText,$/;"	f	class:UnicodeString	signature:(const UnicodeString& srcText, int32_t srcStart, int32_t srcLength, int32_t start, int32_t _length) const
lastIndexOf	unicode/unistr.h	/^UnicodeString::lastIndexOf(const UnicodeString& text) const$/;"	f	class:UnicodeString	signature:(const UnicodeString& text) const
lastIndexOf	unicode/unistr.h	/^UnicodeString::lastIndexOf(const UnicodeString& text,$/;"	f	class:UnicodeString	signature:(const UnicodeString& text, int32_t start) const
lastIndexOf	unicode/unistr.h	/^UnicodeString::lastIndexOf(const UnicodeString& text,$/;"	f	class:UnicodeString	signature:(const UnicodeString& text, int32_t start, int32_t _length) const
lastIndexOf	unistr.cpp	/^UnicodeString::lastIndexOf(const UChar *srcChars,$/;"	f	class:UnicodeString	signature:(const UChar *srcChars, int32_t srcStart, int32_t srcLength, int32_t start, int32_t length) const
lastStrongRTL	ubidi.c	/^    int32_t lastStrongRTL;              \/* index of last found R or AL  *\/$/;"	m	struct:__anon18	file:	access:public
le_close	unicode/urename.h	134;"	d
le_create	unicode/urename.h	135;"	d
le_getCharIndices	unicode/urename.h	136;"	d
le_getCharIndicesWithBase	unicode/urename.h	137;"	d
le_getGlyphCount	unicode/urename.h	138;"	d
le_getGlyphPosition	unicode/urename.h	139;"	d
le_getGlyphPositions	unicode/urename.h	140;"	d
le_getGlyphs	unicode/urename.h	141;"	d
le_layoutChars	unicode/urename.h	142;"	d
le_reset	unicode/urename.h	143;"	d
leadUnitValue	utrie.h	/^    uint32_t leadUnitValue;$/;"	m	struct:UNewTrie	access:public
leafChar	rbbinode.h	/^            leafChar,$/;"	e	enum:RBBINode::NodeType
len	charstr.h	/^    int32_t len;$/;"	m	class:CharString	access:private
len	uenum.c	/^    int32_t len;  \/* number of bytes available starting at 'data' *\/$/;"	m	struct:__anon96	file:	access:public
len	unicode/uniset.h	/^    int32_t len; \/\/ length of list used; 0 <= len <= capacity$/;"	m	class:UnicodeSet	access:private
length	charstr.h	/^    int32_t length() const { return len; }$/;"	f	class:CharString	access:public	signature:() const
length	locid.cpp	/^    int32_t length;$/;"	m	class:KeywordEnumeration	file:	access:private
length	normalizer2impl.h	/^    int32_t length() const { return (int32_t)(limit-start); }$/;"	f	class:ReorderingBuffer	access:public	signature:() const
length	ubidiimp.h	/^    int32_t length;$/;"	m	struct:UBiDi	access:public
length	ucnvsel.cpp	/^  int16_t length;$/;"	m	struct:Enumerator	file:	access:public
length	udatamem.h	/^    int32_t           length;      \/* Length of the data in bytes; -1 if unknown.     *\/$/;"	m	struct:UDataMemory	access:public
length	uhash.h	/^    int32_t     length;     \/* The physical size of the arrays hashes, keys$/;"	m	struct:UHashtable	access:public
length	unicode/rep.h	/^    inline int32_t length() const;$/;"	p	class:Replaceable	access:public	signature:() const
length	unicode/rep.h	/^Replaceable::length() const {$/;"	f	class:Replaceable	signature:() const
length	unicode/stringpiece.h	/^  int32_t length() const { return length_; }$/;"	f	class:StringPiece	access:public	signature:() const
length	unicode/uiter.h	/^    int32_t length;$/;"	m	struct:UCharIterator	access:public
length	unicode/unistr.h	/^  inline int32_t length(void) const;$/;"	p	class:UnicodeString	access:public	signature:(void) const
length	unicode/unistr.h	/^UnicodeString::length() const$/;"	f	class:UnicodeString	signature:() const
length	unicode/urep.h	/^    int32_t (*length)(const UReplaceable* rep);$/;"	m	struct:UReplaceableCallbacks	access:public
length	unicode/uset.h	/^    int32_t length;$/;"	m	struct:USerializedSet	access:public
length	unisetspan.cpp	/^    int32_t length;$/;"	m	class:OffsetList	file:	access:private
length	uresdata.c	/^    int32_t length;$/;"	m	struct:__anon51	file:	access:public
length	utrie2.h	/^    int32_t length;         \/* number of serialized bytes at memory; 0 if not frozen yet *\/$/;"	m	struct:UTrie2	access:public
length_	unicode/stringpiece.h	/^  int32_t       length_;$/;"	m	class:StringPiece	access:private
lengths	dictbe.cpp	/^  int32_t   lengths[POSSIBLE_WORD_LIST_MAX];$/;"	m	class:PossibleWord	file:	access:private
level	icuplug.c	/^  UPlugLevel  level; \/**< level of plugin *\/$/;"	m	struct:UPlugData	file:	access:public
levels	ubidiimp.h	/^    UBiDiLevel *levels;$/;"	m	struct:UBiDi	access:public
levelsMemory	ubidiimp.h	/^    UBiDiLevel *levelsMemory;$/;"	m	struct:UBiDi	access:public
levelsMemory	ubidiimp.h	/^    UBiDiLevel *levelsMemory;$/;"	m	union:__anon85	access:public
levelsSize	ubidiimp.h	/^    int32_t dirPropsSize, levelsSize, parasSize, runsSize;$/;"	m	struct:UBiDi	access:public
lib	icuplug.c	/^  void *lib;                           \/**< library ptr *\/$/;"	m	struct:UPlugLibrary	file:	access:public
lib	icuplug.c	/^  void *lib;              \/**< plugin library, or NULL *\/$/;"	m	struct:UPlugData	file:	access:public
libName	icuplug.c	/^  char libName[UPLUG_NAME_MAX];   \/**< library name *\/$/;"	m	struct:UPlugData	file:	access:public
libraryCount	icuplug.c	/^static int32_t libraryCount = 0;$/;"	v	file:
libraryList	icuplug.c	/^static UPlugLibrary * libraryList = staticLibraryList;$/;"	v	file:
libraryMax	icuplug.c	/^static int32_t libraryMax = UPLUG_LIBRARY_INITIAL_COUNT;$/;"	v	file:
limit	normalizer2impl.h	/^    UChar *start, *reorderStart, *limit;$/;"	m	class:ReorderingBuffer	access:private
limit	ucase.h	/^    int32_t start, index, limit;$/;"	m	struct:UCaseContext	access:public
limit	unicode/uiter.h	/^    int32_t limit;$/;"	m	struct:UCharIterator	access:public
limit	unormcmp.cpp	/^    const UChar *start, *s, *limit;$/;"	m	struct:CmpEquivLevel	file:	access:public
limit	ustrcase.c	/^    const UChar *start, *s, *limit;$/;"	m	struct:CmpEquivLevel	file:	access:public
limit	utrie2.h	/^    const UChar *limit;$/;"	m	class:ForwardUTrie2StringIterator	access:public
limitNoNo	normalizer2impl.h	/^    uint16_t limitNoNo;$/;"	m	class:Normalizer2Impl	access:private
line	unicode/parseerr.h	/^    int32_t        line;$/;"	m	struct:UParseError	access:public
line_loop	rbbicst.pl	/^line_loop: while (<>) {$/;"	l
list	bmpset.h	/^    const int32_t *list;$/;"	m	class:BMPSet	access:private
list	unicode/uniset.h	/^    UChar32* list; \/\/ MUST be terminated with HIGH$/;"	m	class:UnicodeSet	access:private
list	unisetspan.cpp	/^    UBool *list;$/;"	m	class:OffsetList	file:	access:private
list4kStarts	bmpset.h	/^    int32_t list4kStarts[18];$/;"	m	class:BMPSet	access:private
listIdx	ucnv_io.c	/^    uint32_t listIdx;$/;"	m	struct:UAliasContext	file:	access:public
listLength	bmpset.h	/^    int32_t listLength;$/;"	m	class:BMPSet	access:private
listOffset	ucnv_io.c	/^    uint32_t listOffset;$/;"	m	struct:UAliasContext	file:	access:public
lmbcs	ucnv_lmb.c	/^    UConverterDataLMBCS lmbcs;$/;"	m	struct:LMBCSClone	file:	access:public
load	normalizer2impl.cpp	/^Normalizer2Impl::load(const char *packageName, const char *name, UErrorCode &errorCode) {$/;"	f	class:Normalizer2Impl	signature:(const char *packageName, const char *name, UErrorCode &errorCode)
load	normalizer2impl.h	/^    void load(const char *packageName, const char *name, UErrorCode &errorCode);$/;"	p	class:Normalizer2Impl	access:public	signature:(const char *packageName, const char *name, UErrorCode &errorCode)
load	propname.cpp	/^static inline UBool load() {$/;"	f	file:	signature:()
load	ucnv_cnv.h	/^    UConverterLoad load;$/;"	m	struct:UConverterImpl	access:public
loadData	usprep.cpp	/^loadData(UStringPrepProfile* profile, $/;"	f	file:	signature:(UStringPrepProfile* profile, const char* path, const char* name, const char* type, UErrorCode* errorCode)
loadDictionaryFor	brkeng.cpp	/^ICULanguageBreakFactory::loadDictionaryFor(UScriptCode script, int32_t \/*breakType*\/) {$/;"	f	class:ICULanguageBreakFactory	signature:(UScriptCode script, int32_t )
loadDictionaryFor	brkeng.h	/^  virtual const CompactTrieDictionary *loadDictionaryFor(UScriptCode script, int32_t breakType);$/;"	p	class:ICULanguageBreakFactory	access:protected	signature:(UScriptCode script, int32_t breakType)
loadEngineFor	brkeng.cpp	/^ICULanguageBreakFactory::loadEngineFor(UChar32 c, int32_t breakType) {$/;"	f	class:ICULanguageBreakFactory	signature:(UChar32 c, int32_t breakType)
loadEngineFor	brkeng.h	/^  virtual const LanguageBreakEngine *loadEngineFor(UChar32 c, int32_t breakType);$/;"	p	class:ICULanguageBreakFactory	access:protected	signature:(UChar32 c, int32_t breakType)
loadRange	unicode/usetiter.h	/^    virtual void loadRange(int32_t range);$/;"	p	class:UnicodeSetIterator	access:protected	signature:(int32_t range)
loadRange	usetiter.cpp	/^void UnicodeSetIterator::loadRange(int32_t iRange) {$/;"	f	class:UnicodeSetIterator	signature:(int32_t iRange)
locCache	ustr_imp.h	/^    int32_t locCache;$/;"	m	struct:UCaseMap	access:public
localKeyLimit	uresdata.c	/^    int32_t localKeyLimit;$/;"	m	struct:TempTable	file:	access:public
localKeyLimit	uresdata.h	/^    int32_t localKeyLimit;$/;"	m	struct:__anon12	access:public
local_cflags	Android.mk	/^local_cflags := '-DICU_DATA_DIR_PREFIX_ENV_VAR="ANDROID_ROOT"'$/;"	m
local_ldlibs	Android.mk	/^local_ldlibs := -lpthread -lm$/;"	m
locale	serv.cpp	/^    const Locale locale;$/;"	m	class:DNCache	file:	access:public
locale	ucnv2022.c	/^    char locale[3];$/;"	m	struct:__anon68	file:	access:public
locale	ucnv_cnv.h	/^    const char *pkg, *name, *locale;$/;"	m	struct:__anon9	access:public
locale	ucnv_imp.h	/^    char locale[ULOC_FULLNAME_CAPACITY];$/;"	m	struct:__anon151	access:public
locale	ucnvscsu.c	/^    uint8_t locale;$/;"	m	struct:SCSUData	file:	access:public
locale	uloc.c	/^    char *locale;$/;"	m	struct:__anon72	file:	access:public
locale	ustr_imp.h	/^    char locale[32];$/;"	m	struct:UCaseMap	access:public
localeConverterIndex	ucnv_lmb.c	/^    uint8_t    localeConverterIndex;      \/* reasonable locale match for index *\/$/;"	m	struct:__anon25	file:	access:public
locale_available_cleanup	locavailable.cpp	/^static UBool U_CALLCONV locale_available_cleanup(void)$/;"	f	file:	signature:(void)
locale_canonKeywordName	uloc.c	/^static int32_t locale_canonKeywordName(char *buf, const char *keywordName, UErrorCode *status)$/;"	f	file:	signature:(char *buf, const char *keywordName, UErrorCode *status)
locale_cleanup	locid.cpp	/^static UBool U_CALLCONV locale_cleanup(void)$/;"	f	file:	signature:(void)
locale_getKeywords	locid.cpp	/^U_CFUNC int32_t locale_getKeywords(const char *localeID,$/;"	p	file:	signature:(const char *localeID, char prev, char *keywords, int32_t keywordCapacity, char *values, int32_t valuesCapacity, int32_t *valLen, UBool valuesToo, UErrorCode *status)
locale_getKeywords	uloc.c	/^locale_getKeywords(const char *localeID,$/;"	f	signature:(const char *localeID, char prev, char *keywords, int32_t keywordCapacity, char *values, int32_t valuesCapacity, int32_t *valLen, UBool valuesToo, UErrorCode *status)
locale_getKeywords	uloc.c	/^locale_getKeywords(const char *localeID,$/;"	p	file:	signature:(const char *localeID, char prev, char *keywords, int32_t keywordCapacity, char *values, int32_t valuesCapacity, int32_t *valLen, UBool valuesToo, UErrorCode *status)
locale_getKeywords	unicode/urename.h	144;"	d
locale_getKeywordsStart	uloc.c	/^locale_getKeywordsStart(const char *localeID) {$/;"	f	signature:(const char *localeID)
locale_getKeywordsStart	ulocimp.h	/^locale_getKeywordsStart(const char *localeID);$/;"	p	signature:(const char *localeID)
locale_getKeywordsStart	unicode/urename.h	145;"	d
locale_get_default	locid.cpp	/^locale_get_default(void)$/;"	f	signature:(void)
locale_get_default	uloc.c	/^U_CFUNC const char *locale_get_default(void);$/;"	p	file:	signature:(void)
locale_get_default	unicode/urename.h	146;"	d
locale_set_default	locid.cpp	/^locale_set_default(const char *id)$/;"	f	signature:(const char *id)
locale_set_default	uloc.c	/^U_CFUNC void locale_set_default(const char *id);$/;"	p	file:	signature:(const char *id)
locale_set_default	unicode/urename.h	147;"	d
locale_set_default_internal	locid.cpp	/^void locale_set_default_internal(const char *id)$/;"	f	signature:(const char *id)
locale_set_default_internal	unicode/locid.h	/^    friend void locale_set_default_internal(const char *);$/;"	p	class:Locale	access:friend	signature:(const char *)
locale_set_default_internal	unicode/urename.h	2231;"	d
logicalStart	ubidiimp.h	/^    int32_t logicalStart,   \/* first character of the run; b31 indicates even\/odd level *\/$/;"	m	struct:Run	access:public
longestPrefix	dictbe.cpp	/^  int32_t   longestPrefix();$/;"	p	class:PossibleWord	file:	access:public	signature:()
longestPrefix	dictbe.cpp	/^PossibleWord::longestPrefix() {$/;"	f	class:PossibleWord	signature:()
lookAhead	rbbinode.h	/^            lookAhead,$/;"	e	enum:RBBINode::NodeType
lookahead	ruleiter.cpp	/^UnicodeString& RuleCharacterIterator::lookahead(UnicodeString& result, int32_t maxLookAhead) const {$/;"	f	class:RuleCharacterIterator	signature:(UnicodeString& result, int32_t maxLookAhead) const
lookahead	ruleiter.h	/^    UnicodeString& lookahead(UnicodeString& result, int32_t maxLookAhead = -1) const;$/;"	p	class:RuleCharacterIterator	access:public	signature:(UnicodeString& result, int32_t maxLookAhead = -1) const
lookup	rbbirb.h	/^    virtual const UnicodeString*  lookup(const UnicodeString& s) const;$/;"	p	class:RBBISymbolTable	access:public	signature:(const UnicodeString& s) const
lookup	rbbistbl.cpp	/^const UnicodeString  *RBBISymbolTable::lookup(const UnicodeString& s) const$/;"	f	class:RBBISymbolTable	signature:(const UnicodeString& s) const
lookup	unicode/symtable.h	/^    virtual const UnicodeString* lookup(const UnicodeString& s) const = 0;$/;"	p	class:SymbolTable	access:public	signature:(const UnicodeString& s) const
lookupInitialData	ucnvisci.c	/^static const LookupDataStruct lookupInitialData[]={$/;"	v	file:
lookupMatcher	rbbirb.h	/^    virtual const UnicodeFunctor* lookupMatcher(UChar32 ch) const;$/;"	p	class:RBBISymbolTable	access:public	signature:(UChar32 ch) const
lookupMatcher	rbbistbl.cpp	/^const UnicodeFunctor *RBBISymbolTable::lookupMatcher(UChar32 ch) const$/;"	f	class:RBBISymbolTable	signature:(UChar32 ch) const
lookupMatcher	unicode/symtable.h	/^    virtual const UnicodeFunctor* lookupMatcher(UChar32 ch) const = 0;$/;"	p	class:SymbolTable	access:public	signature:(UChar32 ch) const
lookupNode	rbbirb.h	/^    virtual RBBINode *lookupNode(const UnicodeString &key) const;$/;"	p	class:RBBISymbolTable	access:public	signature:(const UnicodeString &key) const
lookupNode	rbbistbl.cpp	/^RBBINode       *RBBISymbolTable::lookupNode(const UnicodeString &key) const{$/;"	f	class:RBBISymbolTable	signature:(const UnicodeString &key) const
lookupTable	ucnvisci.c	/^static const uint16_t lookupTable[][2]={$/;"	v	file:
low	triedict.cpp	/^    TernaryNode *low;       \/\/ Less-than link$/;"	m	struct:TernaryNode	file:	access:public
lowWaterMark	uhash.h	/^    int32_t     lowWaterMark;   \/* If count < lowWaterMark, rehash *\/$/;"	m	struct:UHashtable	access:public
lowWaterRatio	uhash.h	/^    float       lowWaterRatio;  \/* 0..1; low water as a fraction of length *\/$/;"	m	struct:UHashtable	access:public
mac_lc_rec	putil.c	/^} mac_lc_rec;$/;"	t	typeref:struct:__anon42	file:
mac_lc_recs	putil.c	/^static const mac_lc_rec mac_lc_recs[] = {$/;"	v	file:
magic	triedict.cpp	/^    uint32_t        magic;          \/\/ Magic number (including version)$/;"	m	struct:CompactTrieHeader	file:	access:public
magic	unicode/utext.h	/^    uint32_t       magic;$/;"	m	struct:UText	access:public
magic1	ucmndata.h	/^    uint8_t     magic1;$/;"	m	struct:__anon142	access:public
magic2	ucmndata.h	/^    uint8_t     magic2;$/;"	m	struct:__anon142	access:public
majorFormatVersion	uresdata.c	/^    uint8_t majorFormatVersion;$/;"	m	struct:TempTable	file:	access:public
makeCanonIterDataFromNorm16	normalizer2impl.cpp	/^void Normalizer2Impl::makeCanonIterDataFromNorm16(UChar32 start, UChar32 end, uint16_t norm16,$/;"	f	class:Normalizer2Impl	signature:(UChar32 start, UChar32 end, uint16_t norm16, CanonIterData &newData, UErrorCode &errorCode) const
makeCanonIterDataFromNorm16	normalizer2impl.h	/^    void makeCanonIterDataFromNorm16(UChar32 start, UChar32 end, uint16_t norm16,$/;"	p	class:Normalizer2Impl	access:public	signature:(UChar32 start, UChar32 end, uint16_t norm16, CanonIterData &newData, UErrorCode &errorCode) const
makeFCD	normalizer2impl.cpp	/^Normalizer2Impl::makeFCD(const UChar *src, const UChar *limit,$/;"	f	class:Normalizer2Impl	signature:(const UChar *src, const UChar *limit, ReorderingBuffer *buffer, UErrorCode &errorCode) const
makeFCD	normalizer2impl.h	/^    const UChar *makeFCD(const UChar *src, const UChar *limit,$/;"	p	class:Normalizer2Impl	access:public	signature:(const UChar *src, const UChar *limit, ReorderingBuffer *buffer, UErrorCode &errorCode) const
makeFCDAndAppend	normalizer2impl.cpp	/^void Normalizer2Impl::makeFCDAndAppend(const UChar *src, const UChar *limit,$/;"	f	class:Normalizer2Impl	signature:(const UChar *src, const UChar *limit, UBool doMakeFCD, ReorderingBuffer &buffer, UErrorCode &errorCode) const
makeFCDAndAppend	normalizer2impl.h	/^    void makeFCDAndAppend(const UChar *src, const UChar *limit,$/;"	p	class:Normalizer2Impl	access:public	signature:(const UChar *src, const UChar *limit, UBool doMakeFCD, ReorderingBuffer &buffer, UErrorCode &errorCode) const
makeInstance	brkiter.cpp	/^BreakIterator::makeInstance(const Locale& loc, int32_t kind, UErrorCode& status)$/;"	f	class:BreakIterator	signature:(const Locale& loc, int32_t kind, UErrorCode& status)
makeRuleStatusValid	rbbi.cpp	/^void RuleBasedBreakIterator::makeRuleStatusValid() {$/;"	f	class:RuleBasedBreakIterator	signature:()
makeRuleStatusValid	unicode/rbbi.h	/^    void makeRuleStatusValid();$/;"	p	class:RuleBasedBreakIterator	access:private	signature:()
makeSpanLengthByte	unisetspan.cpp	/^makeSpanLengthByte(int32_t spanLength) {$/;"	f	file:	signature:(int32_t spanLength)
makeTokenMap	unames.c	/^makeTokenMap(const UDataSwapper *ds,$/;"	f	file:	signature:(const UDataSwapper *ds, int16_t tokens[], uint16_t tokenCount, uint8_t map[256], UErrorCode *pErrorCode)
map	udatamem.h	/^    void             *map;         \/* Handle, or other data, OS dependent.            *\/$/;"	m	struct:UDataMemory	access:public
map	utrie.h	/^    int32_t map[UTRIE_MAX_BUILD_TIME_DATA_LENGTH>>UTRIE_SHIFT];$/;"	m	struct:UNewTrie	access:public
map	utrie2_impl.h	/^    int32_t map[UNEWTRIE2_MAX_DATA_LENGTH>>UTRIE2_SHIFT_2];$/;"	m	struct:UNewTrie2	access:public
mapAddr	udatamem.h	/^    void             *mapAddr;     \/* For mapped or allocated memory, the start addr. *\/$/;"	m	struct:UDataMemory	access:public
mapAlgorithmic	normalizer2impl.h	/^    UChar32 mapAlgorithmic(UChar32 c, uint16_t norm16) const {$/;"	f	class:Normalizer2Impl	access:private	signature:(UChar32 c, uint16_t norm16) const
mapDevChars	uts46.cpp	/^    mapDevChars(UnicodeString &dest, int32_t labelStart, int32_t mappingStart,$/;"	p	class:UTS46	file:	access:private	signature:(UnicodeString &dest, int32_t labelStart, int32_t mappingStart, UErrorCode &errorCode) const
mapDevChars	uts46.cpp	/^UTS46::mapDevChars(UnicodeString &dest, int32_t labelStart, int32_t mappingStart,$/;"	f	class:UTS46	signature:(UnicodeString &dest, int32_t labelStart, int32_t mappingStart, UErrorCode &errorCode) const
mapNativeIndexToUTF16	unicode/utext.h	/^    UTextMapNativeIndexToUTF16 *mapNativeIndexToUTF16;$/;"	m	struct:UTextFuncs	access:public
mapOffsetToNative	unicode/utext.h	/^    UTextMapOffsetToNative *mapOffsetToNative;$/;"	m	struct:UTextFuncs	access:public
mapToNative	utext.cpp	/^    uint8_t   mapToNative[UTF8_TEXT_CHUNK_SIZE+4];   \/\/ map UChar index in buf to$/;"	m	struct:UTF8Buf	file:	access:public
mapToUChars	utext.cpp	/^    uint8_t   mapToUChars[UTF8_TEXT_CHUNK_SIZE*3+6]; \/\/ Map native offset from bufNativeStart to$/;"	m	struct:UTF8Buf	file:	access:public
mappingData	sprpimpl.h	/^    const uint16_t* mappingData;$/;"	m	struct:UStringPrepProfile	access:public
mark	dictbe.cpp	/^  int       mark;       \/\/ The preferred candidate's offset$/;"	m	class:PossibleWord	file:	access:private
markBadACELabel	uts46.cpp	/^    markBadACELabel(UnicodeString &dest,$/;"	p	class:UTS46	file:	access:private	signature:(UnicodeString &dest, int32_t labelStart, int32_t labelLength, UBool toASCII, IDNAInfo &info) const
markBadACELabel	uts46.cpp	/^UTS46::markBadACELabel(UnicodeString &dest,$/;"	f	class:UTS46	signature:(UnicodeString &dest, int32_t labelStart, int32_t labelLength, UBool toASCII, IDNAInfo &info) const
markCurrent	dictbe.cpp	/^  void      markCurrent();$/;"	p	class:PossibleWord	file:	access:public	signature:()
markCurrent	dictbe.cpp	/^PossibleWord::markCurrent() {$/;"	f	class:PossibleWord	signature:()
mask	uprops.cpp	/^    uint32_t mask;$/;"	m	struct:BinaryProperty	file:	access:public
mask	uprops.cpp	/^    uint32_t mask;$/;"	m	struct:IntProperty	file:	access:public
maskEnum	ucnvisci.c	/^    MaskEnum maskEnum;$/;"	m	struct:LookupDataStruct	file:	access:public
matchRest	unicode/uniset.h	/^    static int32_t matchRest(const Replaceable& text,$/;"	p	class:UnicodeSet	access:private	signature:(const Replaceable& text, int32_t start, int32_t limit, const UnicodeString& s)
matchRest	uniset.cpp	/^int32_t UnicodeSet::matchRest(const Replaceable& text,$/;"	f	class:UnicodeSet	signature:(const Replaceable& text, int32_t start, int32_t limit, const UnicodeString& s)
matches	triedict.cpp	/^CompactTrieDictionary::matches( UText *text,$/;"	f	class:CompactTrieDictionary	signature:( UText *text, int32_t maxLength, int32_t *lengths, int &count, int limit ) const
matches	triedict.cpp	/^MutableTrieDictionary::matches( UText *text,$/;"	f	class:MutableTrieDictionary	signature:( UText *text, int32_t maxLength, int32_t *lengths, int &count, int limit ) const
matches	triedict.h	/^  virtual int32_t matches( UText *text,$/;"	p	class:CompactTrieDictionary	access:public	signature:( UText *text, int32_t rangeEnd, int32_t *lengths, int &count, int limit ) const
matches	triedict.h	/^  virtual int32_t matches( UText *text,$/;"	p	class:MutableTrieDictionary	access:public	signature:( UText *text, int32_t maxLength, int32_t *lengths, int &count, int limit ) const
matches	triedict.h	/^  virtual int32_t matches( UText *text,$/;"	p	class:TrieWordDictionary	access:public	signature:( UText *text, int32_t maxLength, int32_t *lengths, int &count, int limit ) const
matches	unicode/unifilt.h	/^    virtual UMatchDegree matches(const Replaceable& text,$/;"	p	class:UnicodeFilter	access:public	signature:(const Replaceable& text, int32_t& offset, int32_t limit, UBool incremental)
matches	unicode/unimatch.h	/^    virtual UMatchDegree matches(const Replaceable& text,$/;"	p	class:UnicodeMatcher	access:public	signature:(const Replaceable& text, int32_t& offset, int32_t limit, UBool incremental)
matches	unicode/uniset.h	/^    virtual UMatchDegree matches(const Replaceable& text,$/;"	p	class:UnicodeSet	access:public	signature:(const Replaceable& text, int32_t& offset, int32_t limit, UBool incremental)
matches	unifilt.cpp	/^UMatchDegree UnicodeFilter::matches(const Replaceable& text,$/;"	f	class:UnicodeFilter	signature:(const Replaceable& text, int32_t& offset, int32_t limit, UBool incremental)
matches	uniset.cpp	/^UMatchDegree UnicodeSet::matches(const Replaceable& text,$/;"	f	class:UnicodeSet	signature:(const Replaceable& text, int32_t& offset, int32_t limit, UBool incremental)
matches16	unisetspan.cpp	/^matches16(const UChar *s, const UChar *t, int32_t length) {$/;"	f	file:	signature:(const UChar *s, const UChar *t, int32_t length)
matches16CPB	unisetspan.cpp	/^matches16CPB(const UChar *s, int32_t start, int32_t limit, const UChar *t, int32_t length) {$/;"	f	file:	signature:(const UChar *s, int32_t start, int32_t limit, const UChar *t, int32_t length)
matches8	unisetspan.cpp	/^matches8(const uint8_t *s, const uint8_t *t, int32_t length) {$/;"	f	file:	signature:(const uint8_t *s, const uint8_t *t, int32_t length)
matchesIndexValue	unicode/unimatch.h	/^    virtual UBool matchesIndexValue(uint8_t v) const = 0;$/;"	p	class:UnicodeMatcher	access:public	signature:(uint8_t v) const
matchesIndexValue	unicode/uniset.h	/^    virtual UBool matchesIndexValue(uint8_t v) const;$/;"	p	class:UnicodeSet	access:private	signature:(uint8_t v) const
matchesIndexValue	uniset.cpp	/^UBool UnicodeSet::matchesIndexValue(uint8_t v) const {$/;"	f	class:UnicodeSet	signature:(uint8_t v) const
max	uniset.cpp	/^static inline UChar32 max(UChar32 a, UChar32 b) {$/;"	f	file:	signature:(UChar32 a, UChar32 b)
maxBytesPerChar	ucnv_bld.h	/^    int8_t maxBytesPerChar;         \/* +71: 1 Maximum # bytes output per UChar in this codepage *\/$/;"	m	struct:UConverterStaticData	access:public
maxBytesPerUChar	ucnv_bld.h	/^    int8_t maxBytesPerUChar;$/;"	m	struct:UConverter	access:public
maxCapacity	uvectr32.h	/^    int32_t   maxCapacity;   \/\/ Limit beyond which capacity is not permitted to grow.$/;"	m	class:UVector32	access:private
maxCapacity	uvectr64.h	/^    int32_t   maxCapacity;   \/\/ Limit beyond which capacity is not permitted to grow.$/;"	m	class:UVector64	access:private
maxFastUChar	ucnvmbcs.h	/^    UChar maxFastUChar;                     \/* for utf8Friendly data *\/$/;"	m	struct:UConverterMBCSTable	access:public
maxLength16	unisetspan.h	/^    int32_t maxLength16;$/;"	m	class:UnicodeSetStringSpan	access:private
maxLength8	unisetspan.h	/^    int32_t maxLength8;$/;"	m	class:UnicodeSetStringSpan	access:private
maxRows	propsvec.c	/^    int32_t maxRows;$/;"	m	struct:UPropsVectors	file:	access:public
maxValue	propsvec.h	/^    int32_t maxValue;$/;"	m	struct:UPVecToUTrie2Context	access:public
mayAllocateRuns	ubidiimp.h	/^    UBool mayAllocateText, mayAllocateRuns;$/;"	m	struct:UBiDi	access:public
mayAllocateText	ubidiimp.h	/^    UBool mayAllocateText, mayAllocateRuns;$/;"	m	struct:UBiDi	access:public
maybeYesCompositions	normalizer2impl.h	/^    const uint16_t *maybeYesCompositions;$/;"	m	class:Normalizer2Impl	access:private
mbcs	ucnv_bld.h	/^    UConverterMBCSTable mbcs;$/;"	m	struct:UConverterSharedData	access:public
mbcs	ucnv_bld.h	/^    UConverterMBCSTable mbcs;$/;"	m	union:UConverterTable	access:public
mbcsIndex	ucnvmbcs.h	/^    const uint16_t *mbcsIndex;              \/* for fast conversion from most of BMP to MBCS (utf8Friendly data) *\/$/;"	m	struct:UConverterMBCSTable	access:public
mem	ubidi_props.c	/^    UDataMemory *mem;$/;"	m	struct:UBiDiProps	file:	access:public
mem	ucase.c	/^    UDataMemory *mem;$/;"	m	struct:UCaseProps	file:	access:public
memory	normalizer2impl.h	/^    UDataMemory *memory;$/;"	m	class:Normalizer2Impl	access:private
memory	utrie2.h	/^    void *memory;           \/* serialized bytes; NULL if not frozen yet *\/$/;"	m	struct:UTrie2	access:public
mergeRuleStatusVals	rbbitblb.cpp	/^void  RBBITableBuilder::mergeRuleStatusVals() {$/;"	f	class:RBBITableBuilder	signature:()
mergeRuleStatusVals	rbbitblb.h	/^    void     mergeRuleStatusVals();$/;"	p	class:RBBITableBuilder	access:private	signature:()
minBytesPerChar	ucnv_bld.h	/^    int8_t minBytesPerChar;         \/* +70: 1 Minimum # bytes per char in this codepage *\/$/;"	m	struct:UConverterStaticData	access:public
minCompNoMaybeCP	normalizer2impl.h	/^    UChar32 minCompNoMaybeCP;$/;"	m	class:Normalizer2Impl	access:private
minDecompNoCP	normalizer2impl.h	/^    UChar32 minDecompNoCP;$/;"	m	class:Normalizer2Impl	access:private
minMaybeYes	normalizer2impl.h	/^    uint16_t minMaybeYes;$/;"	m	class:Normalizer2Impl	access:private
minNoNo	normalizer2impl.h	/^    uint16_t minNoNo;$/;"	m	class:Normalizer2Impl	access:private
minTocLength	ucnv_io.c	/^    minTocLength=8 \/* min. tocLength in the file, does not count the tocLengthIndex! *\/$/;"	e	enum:__anon128	file:
minYesNo	normalizer2impl.h	/^    uint16_t minYesNo;$/;"	m	class:Normalizer2Impl	access:private
mirrors	ubidi_props.c	/^    const uint32_t *mirrors;$/;"	m	struct:UBiDiProps	file:	access:public
missingCharMarker	ucnv_cnv.h	32;"	d
mode	ucnv_bld.h	/^    int32_t mode;$/;"	m	struct:UConverter	access:public
mode	unorm_it.c	/^    UNormalizationMode mode;$/;"	m	struct:UNormIterator	file:	access:public
move	uchriter.cpp	/^UCharCharacterIterator::move(int32_t delta, CharacterIterator::EOrigin origin) {$/;"	f	class:UCharCharacterIterator	signature:(int32_t delta, CharacterIterator::EOrigin origin)
move	unicode/chariter.h	/^    virtual int32_t      move(int32_t delta, EOrigin origin) = 0;$/;"	p	class:CharacterIterator	access:public	signature:(int32_t delta, EOrigin origin)
move	unicode/uchriter.h	/^  virtual int32_t      move(int32_t delta, EOrigin origin);$/;"	p	class:UCharCharacterIterator	access:public	signature:(int32_t delta, EOrigin origin)
move	unicode/uiter.h	/^    UCharIteratorMove *move;$/;"	m	struct:UCharIterator	access:public
move32	uchriter.cpp	/^UCharCharacterIterator::move32(int32_t delta, CharacterIterator::EOrigin origin) {$/;"	f	class:UCharCharacterIterator	signature:(int32_t delta, CharacterIterator::EOrigin origin)
move32	unicode/chariter.h	/^    virtual int32_t      move32(int32_t delta, EOrigin origin) = 0;$/;"	p	class:CharacterIterator	access:public	signature:(int32_t delta, EOrigin origin)
move32	unicode/uchriter.h	/^  virtual int32_t      move32(int32_t delta, EOrigin origin);$/;"	p	class:UCharCharacterIterator	access:public	signature:(int32_t delta, EOrigin origin)
moveContentsTowardEnd	unorm_it.c	/^moveContentsTowardEnd(UCharIterator *api, UChar chars[], uint32_t states[], int32_t delta) {$/;"	f	file:	signature:(UCharIterator *api, UChar chars[], uint32_t states[], int32_t delta)
moveContentsTowardStart	unorm_it.c	/^moveContentsTowardStart(UCharIterator *api, UChar chars[], uint32_t states[], int32_t delta) {$/;"	f	file:	signature:(UCharIterator *api, UChar chars[], uint32_t states[], int32_t delta)
moveIndex32	unicode/unistr.h	/^  int32_t moveIndex32(int32_t index, int32_t delta) const;$/;"	p	class:UnicodeString	access:public	signature:(int32_t index, int32_t delta) const
moveIndex32	unistr.cpp	/^UnicodeString::moveIndex32(int32_t index, int32_t delta) const {$/;"	f	class:UnicodeString	signature:(int32_t index, int32_t delta) const
mungeCharName	uniset_props.cpp	/^static UBool mungeCharName(char* dst, const char* src, int32_t dstCapacity) {$/;"	f	file:	signature:(char* dst, const char* src, int32_t dstCapacity)
mutexListHead	umutex.c	/^static ICUMutex *mutexListHead;$/;"	v	file:
mutexed_compare_and_swap	umutex.c	/^static void *mutexed_compare_and_swap(void **dest, void *newval, void *oldval) {$/;"	f	file:	signature:(void **dest, void *newval, void *oldval)
mutexed_compare_and_swap	umutex.c	/^static void *mutexed_compare_and_swap(void **dest, void *newval, void *oldval);$/;"	p	file:	signature:(void **dest, void *newval, void *oldval)
myConverterArray	ucnv2022.c	/^    UConverterSharedData *myConverterArray[UCNV_2022_MAX_CONVERTERS];$/;"	m	struct:__anon68	file:	access:public
mydata	ucnv2022.c	/^    UConverterDataISO2022 mydata;$/;"	m	struct:cloneStruct	file:	access:public
mydata	ucnvhz.c	/^    UConverterDataHZ mydata;$/;"	m	struct:cloneHZStruct	file:	access:public
mydata	ucnvisci.c	/^    UConverterDataISCII mydata;$/;"	m	struct:cloneISCIIStruct	file:	access:public
mydata	ucnvscsu.c	/^    SCSUData mydata;$/;"	m	struct:cloneSCSUStruct	file:	access:public
name	icuplug.c	/^  char name[UPLUG_NAME_MAX];   \/**< name of plugin *\/$/;"	m	struct:UPlugData	file:	access:public
name	icuplug.c	/^  char name[UPLUG_NAME_MAX]; \/**< library name *\/$/;"	m	struct:UPlugLibrary	file:	access:public
name	normalizer2.cpp	/^    const char *name;$/;"	m	class:Norm2AllModesSingleton	file:	access:private
name	propname.cpp	/^    Offset name, index;$/;"	m	struct:NameAndIndex	file:	access:public
name	sprpimpl.h	/^    char* name;$/;"	m	struct:UStringPrepKey	access:public
name	ucnv.c	/^    const char *name;$/;"	m	struct:UAmbiguousConverter	file:	access:public
name	ucnv2022.c	/^    char name[30];$/;"	m	struct:__anon68	file:	access:public
name	ucnv_bld.c	/^  const char *name;$/;"	m	struct:__anon43	file:	access:public
name	ucnv_bld.h	/^    char name $/;"	m	struct:UConverterStaticData	access:public
name	ucnv_cnv.h	/^    const char *pkg, *name, *locale;$/;"	m	struct:__anon9	access:public
name	ucnvisci.c	/^    char name[sizeof(ISCII_CNV_PREFIX) + 1];$/;"	m	struct:__anon16	file:	access:public
name	udata.cpp	/^    char          *name;$/;"	m	struct:DataCacheElement	file:	access:public
nameGroupPool_count	propname.h	/^    int16_t nameGroupPool_count; \/*  number of entries (not groups) *\/$/;"	m	class:PropertyAliases	access:private
nameGroupPool_offset	propname.h	/^    Offset nameGroupPool_offset; \/*  offset to start of array *\/$/;"	m	class:PropertyAliases	access:private
nameOffset	ucmndata.h	/^    uint32_t nameOffset;$/;"	m	struct:__anon144	access:public
nameToASCII	unicode/idna.h	/^    nameToASCII(const UnicodeString &name, UnicodeString &dest,$/;"	p	class:IDNA	access:public	signature:(const UnicodeString &name, UnicodeString &dest, IDNAInfo &info, UErrorCode &errorCode) const
nameToASCII	uts46.cpp	/^    nameToASCII(const UnicodeString &name, UnicodeString &dest,$/;"	p	class:UTS46	file:	access:public	signature:(const UnicodeString &name, UnicodeString &dest, IDNAInfo &info, UErrorCode &errorCode) const
nameToASCII	uts46.cpp	/^UTS46::nameToASCII(const UnicodeString &name, UnicodeString &dest,$/;"	f	class:UTS46	signature:(const UnicodeString &name, UnicodeString &dest, IDNAInfo &info, UErrorCode &errorCode) const
nameToASCII_UTF8	unicode/idna.h	/^    nameToASCII_UTF8(const StringPiece &name, ByteSink &dest,$/;"	p	class:IDNA	access:public	signature:(const StringPiece &name, ByteSink &dest, IDNAInfo &info, UErrorCode &errorCode) const
nameToASCII_UTF8	uts46.cpp	/^    nameToASCII_UTF8(const StringPiece &name, ByteSink &dest,$/;"	p	class:UTS46	file:	access:public	signature:(const StringPiece &name, ByteSink &dest, IDNAInfo &info, UErrorCode &errorCode) const
nameToASCII_UTF8	uts46.cpp	/^IDNA::nameToASCII_UTF8(const StringPiece &name, ByteSink &dest,$/;"	f	class:IDNA	signature:(const StringPiece &name, ByteSink &dest, IDNAInfo &info, UErrorCode &errorCode) const
nameToASCII_UTF8	uts46.cpp	/^UTS46::nameToASCII_UTF8(const StringPiece &name, ByteSink &dest,$/;"	f	class:UTS46	signature:(const StringPiece &name, ByteSink &dest, IDNAInfo &info, UErrorCode &errorCode) const
nameToEnum_offset	propname.h	/^    Offset nameToEnum_offset; \/*  Name=>enum data *\/$/;"	m	struct:ValueMap	access:public
nameToEnum_offset	propname.h	/^    Offset nameToEnum_offset;$/;"	m	class:PropertyAliases	access:private
nameToUnicode	unicode/idna.h	/^    nameToUnicode(const UnicodeString &name, UnicodeString &dest,$/;"	p	class:IDNA	access:public	signature:(const UnicodeString &name, UnicodeString &dest, IDNAInfo &info, UErrorCode &errorCode) const
nameToUnicode	uts46.cpp	/^    nameToUnicode(const UnicodeString &name, UnicodeString &dest,$/;"	p	class:UTS46	file:	access:public	signature:(const UnicodeString &name, UnicodeString &dest, IDNAInfo &info, UErrorCode &errorCode) const
nameToUnicode	uts46.cpp	/^UTS46::nameToUnicode(const UnicodeString &name, UnicodeString &dest,$/;"	f	class:UTS46	signature:(const UnicodeString &name, UnicodeString &dest, IDNAInfo &info, UErrorCode &errorCode) const
nameToUnicodeUTF8	unicode/idna.h	/^    nameToUnicodeUTF8(const StringPiece &name, ByteSink &dest,$/;"	p	class:IDNA	access:public	signature:(const StringPiece &name, ByteSink &dest, IDNAInfo &info, UErrorCode &errorCode) const
nameToUnicodeUTF8	uts46.cpp	/^    nameToUnicodeUTF8(const StringPiece &name, ByteSink &dest,$/;"	p	class:UTS46	file:	access:public	signature:(const StringPiece &name, ByteSink &dest, IDNAInfo &info, UErrorCode &errorCode) const
nameToUnicodeUTF8	uts46.cpp	/^IDNA::nameToUnicodeUTF8(const StringPiece &name, ByteSink &dest,$/;"	f	class:IDNA	signature:(const StringPiece &name, ByteSink &dest, IDNAInfo &info, UErrorCode &errorCode) const
nameToUnicodeUTF8	uts46.cpp	/^UTS46::nameToUnicodeUTF8(const StringPiece &name, ByteSink &dest,$/;"	f	class:UTS46	signature:(const StringPiece &name, ByteSink &dest, IDNAInfo &info, UErrorCode &errorCode) const
nativeIndexingLimit	unicode/utext.h	/^    int32_t         nativeIndexingLimit;$/;"	m	struct:UText	access:public
nativeLength	unicode/utext.h	/^    UTextNativeLength *nativeLength;$/;"	m	struct:UTextFuncs	access:public
ncEnumToName_offset	propname.h	/^    Offset ncEnumToName_offset;$/;"	m	struct:ValueMap	access:public
needToRelease	cmemory.h	/^    UBool needToRelease;$/;"	m	class:MaybeStackArray	access:private
needToRelease	cmemory.h	/^    UBool needToRelease;$/;"	m	class:MaybeStackHeaderAndArray	access:private
needsStringSpanUTF16	unisetspan.h	/^    inline UBool needsStringSpanUTF16();$/;"	p	class:UnicodeSetStringSpan	access:public	signature:()
needsStringSpanUTF16	unisetspan.h	/^UBool UnicodeSetStringSpan::needsStringSpanUTF16() {$/;"	f	class:UnicodeSetStringSpan	signature:()
needsStringSpanUTF8	unisetspan.h	/^    inline UBool needsStringSpanUTF8();$/;"	p	class:UnicodeSetStringSpan	access:public	signature:()
needsStringSpanUTF8	unisetspan.h	/^UBool UnicodeSetStringSpan::needsStringSpanUTF8() {$/;"	f	class:UnicodeSetStringSpan	signature:()
nestedLoads	ucnv_cnv.h	/^    int32_t nestedLoads;        \/* count nested ucnv_load() calls *\/$/;"	m	struct:__anon9	access:public
newData	normalizer2impl.cpp	/^    CanonIterData *newData;$/;"	m	class:CanonIterDataSingleton	file:	access:private
newFCDTrie	normalizer2impl.cpp	/^    UTrie2 *newFCDTrie;$/;"	m	class:FCDTrieSingleton	file:	access:public
newTrie	utrie2.h	/^    UNewTrie2 *newTrie;     \/* builder object; NULL when frozen *\/$/;"	m	struct:UTrie2	access:public
next	caniter.cpp	/^UnicodeString CanonicalIterator::next() {$/;"	f	class:CanonicalIterator	signature:()
next	locid.cpp	/^    virtual const char* next(int32_t* resultLength, UErrorCode& status) {$/;"	f	class:KeywordEnumeration	access:public	signature:(int32_t* resultLength, UErrorCode& status)
next	normlzr.cpp	/^UChar32 Normalizer::next() {$/;"	f	class:Normalizer	signature:()
next	rbbi.cpp	/^int32_t RuleBasedBreakIterator::next(int32_t n) {$/;"	f	class:RuleBasedBreakIterator	signature:(int32_t n)
next	rbbi.cpp	/^int32_t RuleBasedBreakIterator::next(void) {$/;"	f	class:RuleBasedBreakIterator	signature:(void)
next	ruleiter.cpp	/^UChar32 RuleCharacterIterator::next(int32_t options, UBool& isEscaped, UErrorCode& ec) {$/;"	f	class:RuleCharacterIterator	signature:(int32_t options, UBool& isEscaped, UErrorCode& ec)
next	ruleiter.h	/^    UChar32 next(int32_t options, UBool& isEscaped, UErrorCode& ec);$/;"	p	class:RuleCharacterIterator	access:public	signature:(int32_t options, UBool& isEscaped, UErrorCode& ec)
next	uchriter.cpp	/^UCharCharacterIterator::next() {$/;"	f	class:UCharCharacterIterator	signature:()
next	udata.cpp	/^    const char *next(UErrorCode *pErrorCode);$/;"	p	class:UDataPathIterator	file:	access:public	signature:(UErrorCode *pErrorCode)
next	udata.cpp	/^const char *UDataPathIterator::next(UErrorCode *pErrorCode)$/;"	f	class:UDataPathIterator	signature:(UErrorCode *pErrorCode)
next	uenumimp.h	/^    UEnumNext  *next;$/;"	m	struct:UEnumeration	access:public
next	ulist.c	/^    UListNode *next;$/;"	m	struct:UListNode	file:	access:public
next	uloc_tag.c	/^    struct ExtensionListEntry   *next;$/;"	m	struct:ExtensionListEntry	typeref:struct:ExtensionListEntry::ExtensionListEntry	file:	access:public
next	uloc_tag.c	/^    struct VariantListEntry *next;$/;"	m	struct:VariantListEntry	typeref:struct:VariantListEntry::VariantListEntry	file:	access:public
next	umutex.c	/^    ICUMutex    *next;              \/* All ICUMutexes are chained into a list so that  *\/$/;"	m	struct:ICUMutex	file:	access:public
next	unicode/brkiter.h	/^    virtual int32_t next(int32_t n) = 0;$/;"	p	class:BreakIterator	access:public	signature:(int32_t n)
next	unicode/brkiter.h	/^    virtual int32_t next(void) = 0;$/;"	p	class:BreakIterator	access:public	signature:(void)
next	unicode/caniter.h	/^    UnicodeString next();$/;"	p	class:CanonicalIterator	access:public	signature:()
next	unicode/chariter.h	/^    virtual UChar         next(void) = 0;$/;"	p	class:CharacterIterator	access:public	signature:(void)
next	unicode/normlzr.h	/^  UChar32              next(void);$/;"	p	class:Normalizer	access:public	signature:(void)
next	unicode/rbbi.h	/^    virtual int32_t next(int32_t n);$/;"	p	class:RuleBasedBreakIterator	access:public	signature:(int32_t n)
next	unicode/rbbi.h	/^    virtual int32_t next(void);$/;"	p	class:RuleBasedBreakIterator	access:public	signature:(void)
next	unicode/strenum.h	/^    virtual const char* next(int32_t *resultLength, UErrorCode& status);$/;"	p	class:StringEnumeration	access:public	signature:(int32_t *resultLength, UErrorCode& status)
next	unicode/uchriter.h	/^  virtual UChar         next(void);$/;"	p	class:UCharCharacterIterator	access:public	signature:(void)
next	unicode/uiter.h	/^    UCharIteratorNext *next;$/;"	m	struct:UCharIterator	access:public
next	unicode/usetiter.h	/^    UBool next();$/;"	p	class:UnicodeSetIterator	access:public	signature:()
next	usetiter.cpp	/^UBool UnicodeSetIterator::next() {$/;"	f	class:UnicodeSetIterator	signature:()
next	ustrenum.cpp	/^StringEnumeration::next(int32_t *resultLength, UErrorCode &status) {$/;"	f	class:StringEnumeration	signature:(int32_t *resultLength, UErrorCode &status)
next16	utrie2.cpp	/^uint16_t ForwardUTrie2StringIterator::next16() {$/;"	f	class:ForwardUTrie2StringIterator	signature:()
next16	utrie2.h	/^    uint16_t next16();$/;"	p	class:ForwardUTrie2StringIterator	access:public	signature:()
next32	uchriter.cpp	/^UCharCharacterIterator::next32() {$/;"	f	class:UCharCharacterIterator	signature:()
next32	unicode/chariter.h	/^    virtual UChar32       next32(void) = 0;$/;"	p	class:CharacterIterator	access:public	signature:(void)
next32	unicode/uchriter.h	/^  virtual UChar32       next32(void);$/;"	p	class:UCharCharacterIterator	access:public	signature:(void)
next32PostInc	uchriter.cpp	/^UCharCharacterIterator::next32PostInc() {$/;"	f	class:UCharCharacterIterator	signature:()
next32PostInc	unicode/chariter.h	/^    virtual UChar32       next32PostInc(void) = 0;$/;"	p	class:ForwardCharacterIterator	access:public	signature:(void)
next32PostInc	unicode/uchriter.h	/^  virtual UChar32       next32PostInc(void);$/;"	p	class:UCharCharacterIterator	access:public	signature:(void)
nextChar	rbbiscan.cpp	/^void RBBIRuleScanner::nextChar(RBBIRuleChar &c) {$/;"	f	class:RBBIRuleScanner	signature:(RBBIRuleChar &c)
nextChar	rbbiscan.h	/^    void        nextChar(RBBIRuleChar &c);          \/\/ Get the next char from the input stream.$/;"	p	class:RBBIRuleScanner	access:public	signature:(RBBIRuleChar &c)
nextCharLL	rbbiscan.cpp	/^UChar32  RBBIRuleScanner::nextCharLL() {$/;"	f	class:RBBIRuleScanner	signature:()
nextCharLL	rbbiscan.h	/^    UChar32     nextCharLL();$/;"	p	class:RBBIRuleScanner	access:private	signature:()
nextElement	hash.h	/^    const UHashElement* nextElement(int32_t& pos) const;$/;"	p	class:Hashtable	access:public	signature:(int32_t& pos) const
nextElement	hash.h	/^inline const UHashElement* Hashtable::nextElement(int32_t& pos) const {$/;"	f	class:Hashtable	signature:(int32_t& pos) const
nextElement	unicode/usetiter.h	/^    int32_t nextElement;$/;"	m	class:UnicodeSetIterator	access:protected
nextIndex	unicode/normlzr.h	/^  int32_t         currentIndex, nextIndex;$/;"	m	class:Normalizer	access:private
nextNormalize	normlzr.cpp	/^Normalizer::nextNormalize() {$/;"	f	class:Normalizer	signature:()
nextNormalize	unicode/normlzr.h	/^  UBool nextNormalize();$/;"	p	class:Normalizer	access:private	signature:()
nextPath	udata.cpp	/^    const char *nextPath;                          \/* path following this one *\/$/;"	m	class:UDataPathIterator	file:	access:private
nextPostInc	uchriter.cpp	/^UCharCharacterIterator::nextPostInc() {$/;"	f	class:UCharCharacterIterator	signature:()
nextPostInc	unicode/chariter.h	/^    virtual UChar         nextPostInc(void) = 0;$/;"	p	class:ForwardCharacterIterator	access:public	signature:(void)
nextPostInc	unicode/uchriter.h	/^  virtual UChar         nextPostInc(void);$/;"	p	class:UCharCharacterIterator	access:public	signature:(void)
nextRange	unicode/usetiter.h	/^    UBool nextRange();$/;"	p	class:UnicodeSetIterator	access:public	signature:()
nextRange	usetiter.cpp	/^UBool UnicodeSetIterator::nextRange() {$/;"	f	class:UnicodeSetIterator	signature:()
nextStateToUnicodeCN	ucnv2022.c	/^static const int8_t nextStateToUnicodeCN[MAX_STATES_2022]= {$/;"	v	file:
nextStateToUnicodeJP	ucnv2022.c	/^static const int8_t nextStateToUnicodeJP[MAX_STATES_2022]= {$/;"	v	file:
nextString	unicode/usetiter.h	/^    int32_t nextString;$/;"	m	class:UnicodeSetIterator	access:protected
nextWindowUseIndex	ucnvscsu.c	/^    int8_t nextWindowUseIndex;$/;"	m	struct:SCSUData	file:	access:public
nfcImpl	unicode/caniter.h	/^    const Normalizer2Impl &nfcImpl;$/;"	m	class:CanonicalIterator	access:private
nfcSingleton	normalizer2.cpp	/^STATIC_TRI_STATE_SINGLETON(nfcSingleton);$/;"	v
nfd	unicode/caniter.h	/^    const Normalizer2 &nfd;$/;"	m	class:CanonicalIterator	access:private
nfkcSingleton	normalizer2.cpp	/^STATIC_TRI_STATE_SINGLETON(nfkcSingleton);$/;"	v
nfkc_cfSingleton	normalizer2.cpp	/^STATIC_TRI_STATE_SINGLETON(nfkc_cfSingleton);$/;"	v
noFallback	uresdata.h	/^    UBool noFallback; \/* see URES_ATT_NO_FALLBACK *\/$/;"	m	struct:__anon12	access:public
nodeCount	triedict.cpp	/^    uint16_t        nodeCount;      \/\/ Number of entries in offsets[]$/;"	m	struct:CompactTrieHeader	file:	access:public
noopCurrent	uiter.cpp	/^noopCurrent(UCharIterator * \/*iter*\/) {$/;"	f	file:	signature:(UCharIterator * )
noopGetIndex	uiter.cpp	/^noopGetIndex(UCharIterator * \/*iter*\/, UCharIteratorOrigin \/*origin*\/) {$/;"	f	file:	signature:(UCharIterator * , UCharIteratorOrigin )
noopGetState	uiter.cpp	/^noopGetState(const UCharIterator * \/*iter*\/) {$/;"	f	file:	signature:(const UCharIterator * )
noopHasNext	uiter.cpp	/^noopHasNext(UCharIterator * \/*iter*\/) {$/;"	f	file:	signature:(UCharIterator * )
noopIterator	uiter.cpp	/^static const UCharIterator noopIterator={$/;"	v	file:
noopMove	uiter.cpp	/^noopMove(UCharIterator * \/*iter*\/, int32_t \/*delta*\/, UCharIteratorOrigin \/*origin*\/) {$/;"	f	file:	signature:(UCharIterator * , int32_t , UCharIteratorOrigin )
noopSetState	uiter.cpp	/^noopSetState(UCharIterator * \/*iter*\/, uint32_t \/*state*\/, UErrorCode *pErrorCode) {$/;"	f	file:	signature:(UCharIterator * , uint32_t , UErrorCode *pErrorCode)
noopSingleton	normalizer2.cpp	/^STATIC_SIMPLE_SINGLETON(noopSingleton);$/;"	v
norm2	unicode/normalizer2.h	/^    const Normalizer2 &norm2;$/;"	m	class:FilteredNormalizer2	access:private
normTrie	normalizer2impl.h	/^    UTrie2 *normTrie;$/;"	m	class:Normalizer2Impl	access:private
normalize	filterednormalizer2.cpp	/^FilteredNormalizer2::normalize(const UnicodeString &src,$/;"	f	class:FilteredNormalizer2	signature:(const UnicodeString &src, UnicodeString &dest, UErrorCode &errorCode) const
normalize	filterednormalizer2.cpp	/^FilteredNormalizer2::normalize(const UnicodeString &src,$/;"	f	class:FilteredNormalizer2	signature:(const UnicodeString &src, UnicodeString &dest, USetSpanCondition spanCondition, UErrorCode &errorCode) const
normalize	normalizer2.cpp	/^    normalize(const UChar *src, const UChar *limit,$/;"	f	class:ComposeNormalizer2	file:	access:private	signature:(const UChar *src, const UChar *limit, ReorderingBuffer &buffer, UErrorCode &errorCode) const
normalize	normalizer2.cpp	/^    normalize(const UChar *src, const UChar *limit,$/;"	f	class:DecomposeNormalizer2	file:	access:private	signature:(const UChar *src, const UChar *limit, ReorderingBuffer &buffer, UErrorCode &errorCode) const
normalize	normalizer2.cpp	/^    normalize(const UChar *src, const UChar *limit,$/;"	f	class:FCDNormalizer2	file:	access:private	signature:(const UChar *src, const UChar *limit, ReorderingBuffer &buffer, UErrorCode &errorCode) const
normalize	normalizer2.cpp	/^    normalize(const UChar *src, const UChar *limit,$/;"	p	class:Normalizer2WithImpl	file:	access:public	signature:(const UChar *src, const UChar *limit, ReorderingBuffer &buffer, UErrorCode &errorCode) const
normalize	normalizer2.cpp	/^    normalize(const UnicodeString &src,$/;"	f	class:NoopNormalizer2	file:	access:private	signature:(const UnicodeString &src, UnicodeString &dest, UErrorCode &errorCode) const
normalize	normalizer2.cpp	/^    normalize(const UnicodeString &src,$/;"	f	class:Normalizer2WithImpl	access:public	signature:(const UnicodeString &src, UnicodeString &dest, UErrorCode &errorCode) const
normalize	normlzr.cpp	/^Normalizer::normalize(const UnicodeString& source, $/;"	f	class:Normalizer	signature:(const UnicodeString& source, UNormalizationMode mode, int32_t options, UnicodeString& result, UErrorCode &status)
normalize	unicode/normalizer2.h	/^    normalize(const UnicodeString &src, UErrorCode &errorCode) const {$/;"	f	class:Normalizer2	access:public	signature:(const UnicodeString &src, UErrorCode &errorCode) const
normalize	unicode/normalizer2.h	/^    normalize(const UnicodeString &src,$/;"	p	class:FilteredNormalizer2	access:private	signature:(const UnicodeString &src, UnicodeString &dest, USetSpanCondition spanCondition, UErrorCode &errorCode) const
normalize	unicode/normalizer2.h	/^    normalize(const UnicodeString &src,$/;"	p	class:FilteredNormalizer2	access:public	signature:(const UnicodeString &src, UnicodeString &dest, UErrorCode &errorCode) const
normalize	unicode/normalizer2.h	/^    normalize(const UnicodeString &src,$/;"	p	class:Normalizer2	access:public	signature:(const UnicodeString &src, UnicodeString &dest, UErrorCode &errorCode) const
normalize	unicode/normlzr.h	/^  static void U_EXPORT2 normalize(const UnicodeString& source,$/;"	p	class:Normalizer	access:public	signature:(const UnicodeString& source, UNormalizationMode mode, int32_t options, UnicodeString& result, UErrorCode &status)
normalizeAndAppend	normalizer2.cpp	/^    normalizeAndAppend(const UChar *src, const UChar *limit, UBool doNormalize,$/;"	f	class:ComposeNormalizer2	file:	access:private	signature:(const UChar *src, const UChar *limit, UBool doNormalize, ReorderingBuffer &buffer, UErrorCode &errorCode) const
normalizeAndAppend	normalizer2.cpp	/^    normalizeAndAppend(const UChar *src, const UChar *limit, UBool doNormalize,$/;"	f	class:DecomposeNormalizer2	file:	access:private	signature:(const UChar *src, const UChar *limit, UBool doNormalize, ReorderingBuffer &buffer, UErrorCode &errorCode) const
normalizeAndAppend	normalizer2.cpp	/^    normalizeAndAppend(const UChar *src, const UChar *limit, UBool doNormalize,$/;"	f	class:FCDNormalizer2	file:	access:private	signature:(const UChar *src, const UChar *limit, UBool doNormalize, ReorderingBuffer &buffer, UErrorCode &errorCode) const
normalizeAndAppend	normalizer2.cpp	/^    normalizeAndAppend(const UChar *src, const UChar *limit, UBool doNormalize,$/;"	p	class:Normalizer2WithImpl	file:	access:public	signature:(const UChar *src, const UChar *limit, UBool doNormalize, ReorderingBuffer &buffer, UErrorCode &errorCode) const
normalizeSecondAndAppend	filterednormalizer2.cpp	/^FilteredNormalizer2::normalizeSecondAndAppend(UnicodeString &first,$/;"	f	class:FilteredNormalizer2	signature:(UnicodeString &first, const UnicodeString &second, UBool doNormalize, UErrorCode &errorCode) const
normalizeSecondAndAppend	filterednormalizer2.cpp	/^FilteredNormalizer2::normalizeSecondAndAppend(UnicodeString &first,$/;"	f	class:FilteredNormalizer2	signature:(UnicodeString &first, const UnicodeString &second, UErrorCode &errorCode) const
normalizeSecondAndAppend	normalizer2.cpp	/^    normalizeSecondAndAppend(UnicodeString &first,$/;"	f	class:NoopNormalizer2	file:	access:private	signature:(UnicodeString &first, const UnicodeString &second, UErrorCode &errorCode) const
normalizeSecondAndAppend	normalizer2.cpp	/^    normalizeSecondAndAppend(UnicodeString &first,$/;"	f	class:Normalizer2WithImpl	access:public	signature:(UnicodeString &first, const UnicodeString &second, UBool doNormalize, UErrorCode &errorCode) const
normalizeSecondAndAppend	normalizer2.cpp	/^    normalizeSecondAndAppend(UnicodeString &first,$/;"	f	class:Normalizer2WithImpl	access:public	signature:(UnicodeString &first, const UnicodeString &second, UErrorCode &errorCode) const
normalizeSecondAndAppend	normalizer2.cpp	/^normalizeSecondAndAppend(const UNormalizer2 *norm2,$/;"	f	file:	signature:(const UNormalizer2 *norm2, UChar *first, int32_t firstLength, int32_t firstCapacity, const UChar *second, int32_t secondLength, UBool doNormalize, UErrorCode *pErrorCode)
normalizeSecondAndAppend	unicode/normalizer2.h	/^    normalizeSecondAndAppend(UnicodeString &first,$/;"	p	class:FilteredNormalizer2	access:private	signature:(UnicodeString &first, const UnicodeString &second, UBool doNormalize, UErrorCode &errorCode) const
normalizeSecondAndAppend	unicode/normalizer2.h	/^    normalizeSecondAndAppend(UnicodeString &first,$/;"	p	class:FilteredNormalizer2	access:public	signature:(UnicodeString &first, const UnicodeString &second, UErrorCode &errorCode) const
normalizeSecondAndAppend	unicode/normalizer2.h	/^    normalizeSecondAndAppend(UnicodeString &first,$/;"	p	class:Normalizer2	access:public	signature:(UnicodeString &first, const UnicodeString &second, UErrorCode &errorCode) const
normalize_esq_chars_2022	ucnv2022.c	/^static const int8_t normalize_esq_chars_2022[256] = {$/;"	v	file:
normalizedStringTable	ucnv_io.h	/^    const uint16_t *normalizedStringTable;$/;"	m	struct:UConverterAlias	access:public
normalizedStringTableIndex	ucnv_io.c	/^    normalizedStringTableIndex=9,$/;"	e	enum:__anon128	file:
normalizedStringTableSize	ucnv_io.h	/^    uint32_t normalizedStringTableSize;$/;"	m	struct:UConverterAlias	access:public
notifyChanged	servnotf.cpp	/^ICUNotifier::notifyChanged(void) $/;"	f	class:ICUNotifier	signature:(void)
notifyListener	serv.cpp	/^ICUService::notifyListener(EventListener& l) const $/;"	f	class:ICUService	signature:(EventListener& l) const
npos	stringpiece.cpp	/^const int32_t StringPiece::npos;$/;"	m	class:StringPiece	file:
npos	unicode/stringpiece.h	/^  static const int32_t npos = 0x7fffffff;$/;"	m	class:StringPiece	access:public
nuktaSpecialCases	ucnvisci.c	/^static const uint16_t nuktaSpecialCases[][2]={$/;"	v	file:
nul	uresdata.c	/^    UChar nul;$/;"	m	struct:__anon51	file:	access:public
numRegions	locmap.c	/^    const uint32_t numRegions;$/;"	m	struct:ILcidPosixMap	file:	access:public
numberSets	rbbisetb.h	/^    void           numberSets();$/;"	p	class:RBBISetBuilder	access:private	signature:()
numericValueFilter	uniset_props.cpp	/^static UBool numericValueFilter(UChar32 ch, void* context) {$/;"	f	file:	signature:(UChar32 ch, void* context)
offset	dictbe.cpp	/^  int32_t   offset;     \/\/ Offset in the text of these candidates$/;"	m	class:PossibleWord	file:	access:private
offset	ucnvmbcs.h	/^    uint32_t offset;$/;"	m	struct:__anon77	access:public
offset	unicode/parseerr.h	/^    int32_t        offset;$/;"	m	struct:UParseError	access:public
offsetFromUBytes	ucnvmbcs.h	/^             offsetFromUBytes,$/;"	m	struct:__anon81	access:public
offsetFromUTable	ucnvmbcs.h	/^             offsetFromUTable,$/;"	m	struct:__anon81	access:public
offsetSeconds	putil.c	/^    int32_t offsetSeconds;$/;"	m	struct:OffsetZoneMapping	file:	access:public
offsetTOCEntryCount	ucmndata.c	/^static uint32_t offsetTOCEntryCount(const UDataMemory *pData) {$/;"	f	file:	signature:(const UDataMemory *pData)
offsetTOCLookupFn	ucmndata.c	/^offsetTOCLookupFn(const UDataMemory *pData,$/;"	f	file:	signature:(const UDataMemory *pData, const char *tocEntryName, int32_t *pLength, UErrorCode *pErrorCode)
offsetToUCodeUnits	ucnvmbcs.h	/^             offsetToUCodeUnits,$/;"	m	struct:__anon81	access:public
offsets	triedict.cpp	/^    uint32_t        offsets[1];      \/\/ Offsets to nodes from start of data$/;"	m	struct:CompactTrieHeader	file:	access:public
offsets	unicode/ucnv_err.h	/^    int32_t *offsets;           \/**< Pointer to the buffer that recieves the offsets. *offset = blah ; offset++;. @stable ICU 2.0  *\/$/;"	m	struct:__anon105	access:public
offsets	unicode/ucnv_err.h	/^    int32_t *offsets;           \/**< Pointer to the buffer that recieves the offsets. *offset = blah ; offset++;. @stable ICU 2.0  *\/$/;"	m	struct:__anon106	access:public
offsetsCount	ucnv_io.c	/^    offsetsCount,    \/* length of the swapper's temporary offsets[] *\/$/;"	e	enum:__anon128	file:
offsetsFromUTF8	ucnv_u8.c	/^static const uint32_t offsetsFromUTF8[7] = {0,$/;"	v	file:
olsonID	putil.c	/^    const char *olsonID;$/;"	m	struct:OffsetZoneMapping	file:	access:public
onlyContiguous	normalizer2.cpp	/^    const UBool onlyContiguous;$/;"	m	class:ComposeNormalizer2	file:	access:private
onlyTestIsLoadable	ucnv_cnv.h	/^    UBool onlyTestIsLoadable;   \/* input: don't actually load *\/$/;"	m	struct:__anon9	access:public
opBreak	rbbinode.h	/^            opBreak,$/;"	e	enum:RBBINode::NodeType
opCat	rbbinode.h	/^            opCat,$/;"	e	enum:RBBINode::NodeType
opLParen	rbbinode.h	/^            opLParen$/;"	e	enum:RBBINode::NodeType
opOr	rbbinode.h	/^            opOr,$/;"	e	enum:RBBINode::NodeType
opPlus	rbbinode.h	/^            opPlus,$/;"	e	enum:RBBINode::NodeType
opQuestion	rbbinode.h	/^            opQuestion,$/;"	e	enum:RBBINode::NodeType
opReverse	rbbinode.h	/^            opReverse,$/;"	e	enum:RBBINode::NodeType
opStar	rbbinode.h	/^            opStar,$/;"	e	enum:RBBINode::NodeType
opStart	rbbinode.h	/^            opStart,$/;"	e	enum:RBBINode::NodeType
open	ucnv_cnv.h	/^    UConverterOpen open;$/;"	m	struct:UConverterImpl	access:public
openCommonData	udata.cpp	/^openCommonData(const char *path,          \/*  Path from OpenChoice?          *\/$/;"	f	file:	signature:(const char *path, int32_t commonDataIndex, UErrorCode *pErrorCode)
openTZRegKey	wintz.c	/^static LONG openTZRegKey(HKEY *hkey, const char *winid)$/;"	f	file:	signature:(HKEY *hkey, const char *winid)
openWords	triedict.cpp	/^CompactTrieDictionary::openWords( UErrorCode &status ) const {$/;"	f	class:CompactTrieDictionary	signature:( UErrorCode &status ) const
openWords	triedict.cpp	/^MutableTrieDictionary::openWords( UErrorCode &status ) const {$/;"	f	class:MutableTrieDictionary	signature:( UErrorCode &status ) const
openWords	triedict.h	/^  virtual StringEnumeration *openWords( UErrorCode &status ) const = 0;$/;"	p	class:TrieWordDictionary	access:public	signature:( UErrorCode &status ) const
openWords	triedict.h	/^  virtual StringEnumeration *openWords( UErrorCode &status ) const;$/;"	p	class:CompactTrieDictionary	access:public	signature:( UErrorCode &status ) const
openWords	triedict.h	/^  virtual StringEnumeration *openWords( UErrorCode &status ) const;$/;"	p	class:MutableTrieDictionary	access:public	signature:( UErrorCode &status ) const
operator !=	cmemory.h	/^    bool operator!=(const MaybeStackArray & \/*other*\/) {return TRUE;};$/;"	f	class:MaybeStackArray	access:private	signature:(const MaybeStackArray & )
operator !=	cmemory.h	/^    bool operator!=(const MaybeStackHeaderAndArray & \/*other*\/) {return TRUE;};$/;"	f	class:MaybeStackHeaderAndArray	access:private	signature:(const MaybeStackHeaderAndArray & )
operator !=	unicode/brkiter.h	/^    UBool operator!=(const BreakIterator& rhs) const { return !operator==(rhs); }$/;"	f	class:BreakIterator	access:public	signature:(const BreakIterator& rhs) const
operator !=	unicode/chariter.h	/^    inline UBool operator!=(const ForwardCharacterIterator& that) const;$/;"	p	class:ForwardCharacterIterator	access:public	signature:(const ForwardCharacterIterator& that) const
operator !=	unicode/chariter.h	/^ForwardCharacterIterator::operator!=(const ForwardCharacterIterator& that) const {$/;"	f	class:ForwardCharacterIterator	signature:(const ForwardCharacterIterator& that) const
operator !=	unicode/dtintrv.h	/^    UBool operator!=(const DateInterval& other) const;$/;"	p	class:DateInterval	access:public	signature:(const DateInterval& other) const
operator !=	unicode/dtintrv.h	/^DateInterval::operator!=(const DateInterval& other) const { $/;"	f	class:DateInterval	signature:(const DateInterval& other) const
operator !=	unicode/localpointer.h	/^    bool operator!=(const LocalPointerBase &other);$/;"	p	class:LocalPointerBase	access:private	signature:(const LocalPointerBase &other)
operator !=	unicode/localpointer.h	/^    bool operator!=(const T *other) const { return ptr!=other; }$/;"	f	class:LocalPointerBase	access:public	signature:(const T *other) const
operator !=	unicode/locid.h	/^    UBool   operator!=(const    Locale&     other) const;$/;"	p	class:Locale	access:public	signature:(const Locale& other) const
operator !=	unicode/locid.h	/^Locale::operator!=(const    Locale&     other) const$/;"	f	class:Locale	signature:(const Locale& other) const
operator !=	unicode/normlzr.h	/^  inline UBool        operator!=(const Normalizer& that) const;$/;"	p	class:Normalizer	access:public	signature:(const Normalizer& that) const
operator !=	unicode/normlzr.h	/^Normalizer::operator!= (const Normalizer& other) const$/;"	f	class:Normalizer	signature:(const Normalizer& other) const
operator !=	unicode/parsepos.h	/^    UBool              operator!=(const ParsePosition& that) const;$/;"	p	class:ParsePosition	access:public	signature:(const ParsePosition& that) const
operator !=	unicode/parsepos.h	/^ParsePosition::operator!=(const ParsePosition& copy) const$/;"	f	class:ParsePosition	signature:(const ParsePosition& copy) const
operator !=	unicode/rbbi.h	/^    UBool operator!=(const BreakIterator& that) const;$/;"	p	class:RuleBasedBreakIterator	access:public	signature:(const BreakIterator& that) const
operator !=	unicode/rbbi.h	/^inline UBool RuleBasedBreakIterator::operator!=(const BreakIterator& that) const {$/;"	f	class:RuleBasedBreakIterator	signature:(const BreakIterator& that) const
operator !=	unicode/strenum.h	/^    virtual UBool operator!=(const StringEnumeration& that)const;$/;"	p	class:StringEnumeration	access:public	signature:(const StringEnumeration& that) const
operator !=	unicode/stringpiece.h	/^inline UBool operator!=(const StringPiece& x, const StringPiece& y) {$/;"	f	signature:(const StringPiece& x, const StringPiece& y)
operator !=	unicode/uniset.h	/^    UBool operator!=(const UnicodeSet& o) const;$/;"	p	class:UnicodeSet	access:public	signature:(const UnicodeSet& o) const
operator !=	unicode/uniset.h	/^inline UBool UnicodeSet::operator!=(const UnicodeSet& o) const {$/;"	f	class:UnicodeSet	signature:(const UnicodeSet& o) const
operator !=	unicode/unistr.h	/^  inline UBool operator!= (const UnicodeString& text) const;$/;"	p	class:UnicodeString	access:public	signature:(const UnicodeString& text) const
operator !=	unicode/unistr.h	/^UnicodeString::operator!= (const UnicodeString& text) const$/;"	f	class:UnicodeString	signature:(const UnicodeString& text) const
operator !=	ustrenum.cpp	/^StringEnumeration::operator!=(const StringEnumeration& that)const {$/;"	f	class:StringEnumeration	signature:(const StringEnumeration& that) const
operator !=	uvector.h	/^    inline UBool operator!=(const UVector& other);$/;"	p	class:UVector	access:public	signature:(const UVector& other)
operator !=	uvector.h	/^inline UBool UVector::operator!=(const UVector& other) {$/;"	f	class:UVector	signature:(const UVector& other)
operator !=	uvectr32.h	/^    inline UBool operator!=(const UVector32& other);$/;"	p	class:UVector32	access:public	signature:(const UVector32& other)
operator !=	uvectr32.h	/^inline UBool UVector32::operator!=(const UVector32& other) {$/;"	f	class:UVector32	signature:(const UVector32& other)
operator !=	uvectr64.h	/^    inline UBool operator!=(const UVector64& other);$/;"	p	class:UVector64	access:public	signature:(const UVector64& other)
operator !=	uvectr64.h	/^inline UBool UVector64::operator!=(const UVector64& other) {$/;"	f	class:UVector64	signature:(const UVector64& other)
operator *	unicode/localpointer.h	/^    T &operator*() const { return *ptr; }$/;"	f	class:LocalPointerBase	access:public	signature:() const
operator +	unicode/unistr.h	/^operator+ (const UnicodeString &s1, const UnicodeString &s2);$/;"	p	signature:(const UnicodeString &s1, const UnicodeString &s2)
operator +	unistr.cpp	/^operator+ (const UnicodeString &s1, const UnicodeString &s2) {$/;"	f	signature:(const UnicodeString &s1, const UnicodeString &s2)
operator +=	unicode/unistr.h	/^  inline UnicodeString& operator+= (const UnicodeString& srcText);$/;"	p	class:UnicodeString	access:public	signature:(const UnicodeString& srcText)
operator +=	unicode/unistr.h	/^ inline  UnicodeString& operator+= (UChar ch);$/;"	p	class:UnicodeString	access:public	signature:(UChar ch)
operator +=	unicode/unistr.h	/^ inline  UnicodeString& operator+= (UChar32 ch);$/;"	p	class:UnicodeString	access:public	signature:(UChar32 ch)
operator +=	unicode/unistr.h	/^UnicodeString::operator+= (UChar ch)$/;"	f	class:UnicodeString	signature:(UChar ch)
operator +=	unicode/unistr.h	/^UnicodeString::operator+= (UChar32 ch) {$/;"	f	class:UnicodeString	signature:(UChar32 ch)
operator +=	unicode/unistr.h	/^UnicodeString::operator+= (const UnicodeString& srcText)$/;"	f	class:UnicodeString	signature:(const UnicodeString& srcText)
operator ->	unicode/localpointer.h	/^    T *operator->() const { return ptr; }$/;"	f	class:LocalPointerBase	access:public	signature:() const
operator <	unicode/unistr.h	/^  inline UBool operator< (const UnicodeString& text) const;$/;"	p	class:UnicodeString	access:public	signature:(const UnicodeString& text) const
operator <	unicode/unistr.h	/^UnicodeString::operator< (const UnicodeString& text) const$/;"	f	class:UnicodeString	signature:(const UnicodeString& text) const
operator <=	unicode/unistr.h	/^  inline UBool operator<= (const UnicodeString& text) const;$/;"	p	class:UnicodeString	access:public	signature:(const UnicodeString& text) const
operator <=	unicode/unistr.h	/^UnicodeString::operator<= (const UnicodeString& text) const$/;"	f	class:UnicodeString	signature:(const UnicodeString& text) const
operator =	chariter.cpp	/^CharacterIterator::operator=(const CharacterIterator &that) {$/;"	f	class:CharacterIterator	signature:(const CharacterIterator &that)
operator =	charstr.h	/^    CharString &operator=(const CharString &other); \/\/ forbid copying of this class$/;"	p	class:CharString	access:private	signature:(const CharString &other)
operator =	cmemory.h	/^    void operator=(const MaybeStackArray & \/*other*\/) {};$/;"	f	class:MaybeStackArray	access:private	signature:(const MaybeStackArray & )
operator =	cmemory.h	/^    void operator=(const MaybeStackHeaderAndArray & \/*other*\/) {};$/;"	f	class:MaybeStackHeaderAndArray	access:private	signature:(const MaybeStackHeaderAndArray & )
operator =	dtintrv.cpp	/^DateInterval::operator=(const DateInterval& other) {$/;"	f	class:DateInterval	signature:(const DateInterval& other)
operator =	hash.h	/^    Hashtable &operator=(const Hashtable &other); \/\/ forbid copying of this class$/;"	p	class:Hashtable	access:private	signature:(const Hashtable &other)
operator =	locid.cpp	/^Locale &Locale::operator=(const Locale &other)$/;"	f	class:Locale	signature:(const Locale &other)
operator =	mutex.h	/^  Mutex &operator=(const Mutex &other); \/\/ forbid copying of this class$/;"	p	class:Mutex	access:private	signature:(const Mutex &other)
operator =	rbbi.cpp	/^RuleBasedBreakIterator::operator=(const RuleBasedBreakIterator& that) {$/;"	f	class:RuleBasedBreakIterator	signature:(const RuleBasedBreakIterator& that)
operator =	rbbidata.h	/^    RBBIDataWrapper &operator=(const RBBIDataWrapper &other); \/*  forbid copying of this class *\/$/;"	p	class:RBBIDataWrapper	access:private	signature:(const RBBIDataWrapper &other)
operator =	rbbinode.h	/^        RBBINode &operator = (const RBBINode &other); \/\/ No defs.$/;"	p	class:RBBINode	access:private	signature:(const RBBINode &other)
operator =	rbbirb.h	/^    RBBIRuleBuilder &operator=(const RBBIRuleBuilder &other); \/\/ forbid copying of this class$/;"	p	class:RBBIRuleBuilder	access:private	signature:(const RBBIRuleBuilder &other)
operator =	rbbirb.h	/^    RBBISymbolTable &operator=(const RBBISymbolTable &other); \/\/ forbid copying of this class$/;"	p	class:RBBISymbolTable	access:private	signature:(const RBBISymbolTable &other)
operator =	rbbirb.h	/^    RBBISymbolTableEntry &operator=(const RBBISymbolTableEntry &other); \/\/ forbid copying of this class$/;"	p	class:RBBISymbolTableEntry	access:private	signature:(const RBBISymbolTableEntry &other)
operator =	rbbiscan.h	/^    RBBIRuleScanner &operator=(const RBBIRuleScanner &other); \/\/ forbid copying of this class$/;"	p	class:RBBIRuleScanner	access:private	signature:(const RBBIRuleScanner &other)
operator =	rbbisetb.h	/^    RBBISetBuilder &operator=(const RBBISetBuilder &other); \/\/ forbid copying of this class$/;"	p	class:RBBISetBuilder	access:private	signature:(const RBBISetBuilder &other)
operator =	rbbisetb.h	/^    RangeDescriptor &operator=(const RangeDescriptor &other); \/\/ forbid copying of this class$/;"	p	class:RangeDescriptor	access:private	signature:(const RangeDescriptor &other)
operator =	rbbitblb.h	/^    RBBIStateDescriptor &operator=(const RBBIStateDescriptor &other); \/\/ forbid copying of this class$/;"	p	class:RBBIStateDescriptor	access:private	signature:(const RBBIStateDescriptor &other)
operator =	rbbitblb.h	/^    RBBITableBuilder &operator=(const RBBITableBuilder &other); \/\/ forbid copying of this class$/;"	p	class:RBBITableBuilder	access:private	signature:(const RBBITableBuilder &other)
operator =	resbund.cpp	/^ResourceBundle& ResourceBundle::operator=(const ResourceBundle& other)$/;"	f	class:ResourceBundle	signature:(const ResourceBundle& other)
operator =	schriter.cpp	/^StringCharacterIterator::operator=(const StringCharacterIterator& that) {$/;"	f	class:StringCharacterIterator	signature:(const StringCharacterIterator& that)
operator =	uchriter.cpp	/^UCharCharacterIterator::operator=(const UCharCharacterIterator& that) {$/;"	f	class:UCharCharacterIterator	signature:(const UCharCharacterIterator& that)
operator =	unicode/bytestream.h	/^  ByteSink &operator=(const ByteSink &); \/\/ assignment operator not implemented$/;"	p	class:ByteSink	access:private	signature:(const ByteSink &)
operator =	unicode/bytestream.h	/^  CheckedArrayByteSink &operator=(const CheckedArrayByteSink &); \/\/\/< assignment operator not implemented$/;"	p	class:CheckedArrayByteSink	access:private	signature:(const CheckedArrayByteSink &)
operator =	unicode/bytestream.h	/^  StringByteSink &operator=(const StringByteSink &); \/\/\/< assignment operator not implemented$/;"	p	class:StringByteSink	access:private	signature:(const StringByteSink &)
operator =	unicode/caniter.h	/^    CanonicalIterator& operator=(const CanonicalIterator& other);$/;"	p	class:CanonicalIterator	access:private	signature:(const CanonicalIterator& other)
operator =	unicode/chariter.h	/^    CharacterIterator &operator=(const CharacterIterator &that);$/;"	p	class:CharacterIterator	access:protected	signature:(const CharacterIterator &that)
operator =	unicode/chariter.h	/^    ForwardCharacterIterator &operator=(const ForwardCharacterIterator&) { return *this; }$/;"	f	class:ForwardCharacterIterator	access:protected	signature:(const ForwardCharacterIterator&)
operator =	unicode/dtintrv.h	/^    DateInterval& operator=(const DateInterval&);$/;"	p	class:DateInterval	access:public	signature:(const DateInterval&)
operator =	unicode/idna.h	/^    IDNAInfo &operator=(const IDNAInfo &other);  \/\/ no copying$/;"	p	class:IDNAInfo	access:private	signature:(const IDNAInfo &other)
operator =	unicode/localpointer.h	/^    void operator=(const LocalPointerBase &other);$/;"	p	class:LocalPointerBase	access:private	signature:(const LocalPointerBase &other)
operator =	unicode/locid.h	/^    Locale& operator=(const Locale& other);$/;"	p	class:Locale	access:public	signature:(const Locale& other)
operator =	unicode/normlzr.h	/^  Normalizer &operator=(const Normalizer &that); \/\/ assignment operator not implemented$/;"	p	class:Normalizer	access:private	signature:(const Normalizer &that)
operator =	unicode/parsepos.h	/^    ParsePosition&      operator=(const ParsePosition& copy);$/;"	p	class:ParsePosition	access:public	signature:(const ParsePosition& copy)
operator =	unicode/parsepos.h	/^ParsePosition::operator=(const ParsePosition& copy)$/;"	f	class:ParsePosition	signature:(const ParsePosition& copy)
operator =	unicode/rbbi.h	/^    RuleBasedBreakIterator& operator=(const RuleBasedBreakIterator& that);$/;"	p	class:RuleBasedBreakIterator	access:public	signature:(const RuleBasedBreakIterator& that)
operator =	unicode/resbund.h	/^      operator=(const ResourceBundle& other);$/;"	p	class:ResourceBundle	access:public	signature:(const ResourceBundle& other)
operator =	unicode/schriter.h	/^  operator=(const StringCharacterIterator&    that);$/;"	p	class:StringCharacterIterator	access:public	signature:(const StringCharacterIterator& that)
operator =	unicode/uchriter.h	/^  operator=(const UCharCharacterIterator&    that);$/;"	p	class:UCharCharacterIterator	access:public	signature:(const UCharCharacterIterator& that)
operator =	unicode/uniset.h	/^    UnicodeSet& operator=(const UnicodeSet& o);$/;"	p	class:UnicodeSet	access:public	signature:(const UnicodeSet& o)
operator =	unicode/unistr.h	/^  UnicodeString &operator=(const UnicodeString &srcText);$/;"	p	class:UnicodeString	access:public	signature:(const UnicodeString &srcText)
operator =	unicode/unistr.h	/^  inline UnicodeString& operator= (UChar ch);$/;"	p	class:UnicodeString	access:public	signature:(UChar ch)
operator =	unicode/unistr.h	/^  inline UnicodeString& operator= (UChar32 ch);$/;"	p	class:UnicodeString	access:public	signature:(UChar32 ch)
operator =	unicode/unistr.h	/^UnicodeString::operator= (UChar ch)$/;"	f	class:UnicodeString	signature:(UChar ch)
operator =	unicode/unistr.h	/^UnicodeString::operator= (UChar32 ch)$/;"	f	class:UnicodeString	signature:(UChar32 ch)
operator =	unicode/usetiter.h	/^    UnicodeSetIterator& operator=(const UnicodeSetIterator&); \/\/ disallow$/;"	p	class:UnicodeSetIterator	access:protected	signature:(const UnicodeSetIterator&)
operator =	uniset.cpp	/^UnicodeSet& UnicodeSet::operator=(const UnicodeSet& o) {$/;"	f	class:UnicodeSet	signature:(const UnicodeSet& o)
operator =	unistr.cpp	/^UnicodeString::operator=(const UnicodeString &src) {$/;"	f	class:UnicodeString	signature:(const UnicodeString &src)
operator =	uvector.h	/^    UStack& operator=(const UStack&);$/;"	p	class:UStack	access:private	signature:(const UStack&)
operator =	uvector.h	/^    UVector& operator=(const UVector&);$/;"	p	class:UVector	access:private	signature:(const UVector&)
operator =	uvectr32.h	/^    UVector32& operator=(const UVector32&);$/;"	p	class:UVector32	access:private	signature:(const UVector32&)
operator =	uvectr64.h	/^    UVector64& operator=(const UVector64&);$/;"	p	class:UVector64	access:private	signature:(const UVector64&)
operator ==	cmemory.h	/^    bool operator==(const MaybeStackArray & \/*other*\/) {return FALSE;};$/;"	f	class:MaybeStackArray	access:private	signature:(const MaybeStackArray & )
operator ==	cmemory.h	/^    bool operator==(const MaybeStackHeaderAndArray & \/*other*\/) {return FALSE;};$/;"	f	class:MaybeStackHeaderAndArray	access:private	signature:(const MaybeStackHeaderAndArray & )
operator ==	dtintrv.cpp	/^DateInterval::operator==(const DateInterval& other) const { $/;"	f	class:DateInterval	signature:(const DateInterval& other) const
operator ==	locid.cpp	/^Locale::operator==( const   Locale& other) const$/;"	f	class:Locale	signature:( const Locale& other) const
operator ==	normlzr.cpp	/^UBool Normalizer::operator==(const Normalizer& that) const$/;"	f	class:Normalizer	signature:(const Normalizer& that) const
operator ==	rbbi.cpp	/^RuleBasedBreakIterator::operator==(const BreakIterator& that) const {$/;"	f	class:RuleBasedBreakIterator	signature:(const BreakIterator& that) const
operator ==	rbbidata.cpp	/^UBool RBBIDataWrapper::operator ==(const RBBIDataWrapper &other) const {$/;"	f	class:RBBIDataWrapper	signature:(const RBBIDataWrapper &other) const
operator ==	rbbidata.h	/^    UBool                 operator ==(const RBBIDataWrapper &other) const;$/;"	p	class:RBBIDataWrapper	access:public	signature:(const RBBIDataWrapper &other) const
operator ==	rbbinode.h	/^        UBool operator == (const RBBINode &other);    \/\/ Private, so these functions won't accidently be used.$/;"	p	class:RBBINode	access:private	signature:(const RBBINode &other)
operator ==	schriter.cpp	/^StringCharacterIterator::operator==(const ForwardCharacterIterator& that) const {$/;"	f	class:StringCharacterIterator	signature:(const ForwardCharacterIterator& that) const
operator ==	stringpiece.cpp	/^operator==(const StringPiece& x, const StringPiece& y) {$/;"	f	signature:(const StringPiece& x, const StringPiece& y)
operator ==	uchriter.cpp	/^UCharCharacterIterator::operator==(const ForwardCharacterIterator& that) const {$/;"	f	class:UCharCharacterIterator	signature:(const ForwardCharacterIterator& that) const
operator ==	unicode/brkiter.h	/^    virtual UBool operator==(const BreakIterator&) const = 0;$/;"	p	class:BreakIterator	access:public	signature:(const BreakIterator&) const
operator ==	unicode/chariter.h	/^    virtual UBool operator==(const ForwardCharacterIterator& that) const = 0;$/;"	p	class:ForwardCharacterIterator	access:public	signature:(const ForwardCharacterIterator& that) const
operator ==	unicode/dtintrv.h	/^    virtual UBool operator==(const DateInterval& other) const;$/;"	p	class:DateInterval	access:public	signature:(const DateInterval& other) const
operator ==	unicode/localpointer.h	/^    bool operator==(const LocalPointerBase &other);$/;"	p	class:LocalPointerBase	access:private	signature:(const LocalPointerBase &other)
operator ==	unicode/localpointer.h	/^    bool operator==(const T *other) const { return ptr==other; }$/;"	f	class:LocalPointerBase	access:public	signature:(const T *other) const
operator ==	unicode/locid.h	/^    UBool   operator==(const    Locale&     other) const;$/;"	p	class:Locale	access:public	signature:(const Locale& other) const
operator ==	unicode/normlzr.h	/^  UBool        operator==(const Normalizer& that) const;$/;"	p	class:Normalizer	access:public	signature:(const Normalizer& that) const
operator ==	unicode/parsepos.h	/^    UBool              operator==(const ParsePosition& that) const;$/;"	p	class:ParsePosition	access:public	signature:(const ParsePosition& that) const
operator ==	unicode/parsepos.h	/^ParsePosition::operator==(const ParsePosition& copy) const$/;"	f	class:ParsePosition	signature:(const ParsePosition& copy) const
operator ==	unicode/rbbi.h	/^    virtual UBool operator==(const BreakIterator& that) const;$/;"	p	class:RuleBasedBreakIterator	access:public	signature:(const BreakIterator& that) const
operator ==	unicode/schriter.h	/^  virtual UBool          operator==(const ForwardCharacterIterator& that) const;$/;"	p	class:StringCharacterIterator	access:public	signature:(const ForwardCharacterIterator& that) const
operator ==	unicode/strenum.h	/^    virtual UBool operator==(const StringEnumeration& that)const;$/;"	p	class:StringEnumeration	access:public	signature:(const StringEnumeration& that) const
operator ==	unicode/stringpiece.h	/^operator==(const StringPiece& x, const StringPiece& y);$/;"	p	signature:(const StringPiece& x, const StringPiece& y)
operator ==	unicode/uchriter.h	/^  virtual UBool          operator==(const ForwardCharacterIterator& that) const;$/;"	p	class:UCharCharacterIterator	access:public	signature:(const ForwardCharacterIterator& that) const
operator ==	unicode/uniset.h	/^    virtual UBool operator==(const UnicodeSet& o) const;$/;"	p	class:UnicodeSet	access:public	signature:(const UnicodeSet& o) const
operator ==	unicode/unistr.h	/^  inline UBool operator== (const UnicodeString& text) const;$/;"	p	class:UnicodeString	access:public	signature:(const UnicodeString& text) const
operator ==	unicode/unistr.h	/^UnicodeString::operator== (const UnicodeString& text) const$/;"	f	class:UnicodeString	signature:(const UnicodeString& text) const
operator ==	uniset.cpp	/^UBool UnicodeSet::operator==(const UnicodeSet& o) const {$/;"	f	class:UnicodeSet	signature:(const UnicodeSet& o) const
operator ==	ustrenum.cpp	/^StringEnumeration::operator==(const StringEnumeration& that)const {$/;"	f	class:StringEnumeration	signature:(const StringEnumeration& that) const
operator ==	uvector.cpp	/^UBool UVector::operator==(const UVector& other) {$/;"	f	class:UVector	signature:(const UVector& other)
operator ==	uvector.h	/^    UBool operator==(const UVector& other);$/;"	p	class:UVector	access:public	signature:(const UVector& other)
operator ==	uvectr32.cpp	/^UBool UVector32::operator==(const UVector32& other) {$/;"	f	class:UVector32	signature:(const UVector32& other)
operator ==	uvectr32.h	/^    UBool operator==(const UVector32& other);$/;"	p	class:UVector32	access:public	signature:(const UVector32& other)
operator ==	uvectr64.cpp	/^UBool UVector64::operator==(const UVector64& other) {$/;"	f	class:UVector64	signature:(const UVector64& other)
operator ==	uvectr64.h	/^    UBool operator==(const UVector64& other);$/;"	p	class:UVector64	access:public	signature:(const UVector64& other)
operator >	unicode/unistr.h	/^  inline UBool operator> (const UnicodeString& text) const;$/;"	p	class:UnicodeString	access:public	signature:(const UnicodeString& text) const
operator >	unicode/unistr.h	/^UnicodeString::operator> (const UnicodeString& text) const$/;"	f	class:UnicodeString	signature:(const UnicodeString& text) const
operator >=	unicode/unistr.h	/^  inline UBool operator>= (const UnicodeString& text) const;$/;"	p	class:UnicodeString	access:public	signature:(const UnicodeString& text) const
operator >=	unicode/unistr.h	/^UnicodeString::operator>= (const UnicodeString& text) const$/;"	f	class:UnicodeString	signature:(const UnicodeString& text) const
operator H *	cmemory.h	/^    operator H *() const { return ptr; }$/;"	f	class:MaybeStackHeaderAndArray	access:public	signature:() const
operator T *	cmemory.h	/^    operator T *() const { return ptr; }$/;"	f	class:MaybeStackArray	access:public	signature:() const
operator UErrorCode &	unicode/errorcode.h	/^    operator UErrorCode & () { return errorCode; }$/;"	f	class:ErrorCode	access:public	signature:()
operator UErrorCode *	unicode/errorcode.h	/^    operator UErrorCode * () { return &errorCode; }$/;"	f	class:ErrorCode	access:public	signature:()
operator []	charstr.h	/^    char operator[] (int32_t index) const { return buffer[index]; }$/;"	f	class:CharString	access:public	signature:(int32_t index) const
operator []	cmemory.h	/^    T &operator[](ptrdiff_t i) const { return LocalPointerBase<T>::ptr[i]; }$/;"	f	class:LocalMemory	access:public	signature:(ptrdiff_t i) const
operator []	cmemory.h	/^    T &operator[](ptrdiff_t i) { return getArrayStart()[i]; }$/;"	f	class:MaybeStackHeaderAndArray	access:public	signature:(ptrdiff_t i)
operator []	cmemory.h	/^    T &operator[](ptrdiff_t i) { return ptr[i]; }$/;"	f	class:MaybeStackArray	access:public	signature:(ptrdiff_t i)
operator []	unicode/localpointer.h	/^    T &operator[](ptrdiff_t i) const { return LocalPointerBase<T>::ptr[i]; }$/;"	f	class:LocalArray	access:public	signature:(ptrdiff_t i) const
operator []	unicode/unistr.h	/^  inline UChar operator[] (int32_t offset) const;$/;"	p	class:UnicodeString	access:public	signature:(int32_t offset) const
operator []	unicode/unistr.h	/^UnicodeString::operator[] (int32_t offset) const$/;"	f	class:UnicodeString	signature:(int32_t offset) const
operator []	uvector.h	/^    void* operator[](int32_t index) const;$/;"	p	class:UVector	access:public	signature:(int32_t index) const
operator []	uvector.h	/^inline void* UVector::operator[](int32_t index) const {$/;"	f	class:UVector	signature:(int32_t index) const
operator delete	unicode/utypes.h	/^operator delete(void * \/*p*\/) {$/;"	f	signature:(void * )
operator delete[]	unicode/utypes.h	/^operator delete[](void * \/*p*\/) {$/;"	f	signature:(void * )
operator new	unicode/localpointer.h	/^    static void * U_EXPORT2 operator new(size_t size);$/;"	p	class:LocalPointerBase	access:private	signature:(size_t size)
operator new	unicode/localpointer.h	/^    static void * U_EXPORT2 operator new(size_t, void *ptr);$/;"	p	class:LocalPointerBase	access:private	signature:(size_t, void *ptr)
operator new	unicode/utypes.h	/^operator new(size_t \/*size*\/) {$/;"	f	signature:(size_t )
operator new[]	unicode/localpointer.h	/^    static void * U_EXPORT2 operator new[](size_t size);$/;"	p	class:LocalPointerBase	access:private	signature:(size_t size)
operator new[]	unicode/utypes.h	/^operator new[](size_t \/*size*\/) {$/;"	f	signature:(size_t )
optionTable	ucnv_io.h	/^    const UConverterAliasOptions *optionTable;$/;"	m	struct:UConverterAlias	access:public
optionTableSize	ucnv_io.h	/^    uint32_t optionTableSize;$/;"	m	struct:UConverterAlias	access:public
options	ucnv_bld.h	/^    uint32_t options; \/* options flags from UConverterOpen, may contain additional bits *\/$/;"	m	struct:UConverter	access:public
options	ucnv_cnv.h	/^    uint32_t options;$/;"	m	struct:__anon9	access:public
options	ucnv_imp.h	/^    uint32_t options;$/;"	m	struct:__anon151	access:public
options	ucnvmbcs.h	/^    uint32_t options;$/;"	m	struct:__anon81	access:public
options	ustr_imp.h	/^    uint32_t options;$/;"	m	struct:UCaseMap	access:public
options	utrie.h	/^    uint32_t options;$/;"	m	struct:UTrieHeader	access:public
options	utrie2_impl.h	/^    uint16_t options;$/;"	m	struct:UTrie2Header	access:public
options	uts46.cpp	/^    uint32_t options;$/;"	m	class:UTS46	file:	access:private
orderParagraphsLTR	ubidiimp.h	/^    UBool orderParagraphsLTR;$/;"	m	struct:UBiDi	access:public
originalLength	ubidiimp.h	/^    int32_t originalLength;$/;"	m	struct:UBiDi	access:public
orphan	unicode/localpointer.h	/^    T *orphan() {$/;"	f	class:LocalPointerBase	access:public	signature:()
orphanElementAt	uvector.cpp	/^void* UVector::orphanElementAt(int32_t index) {$/;"	f	class:UVector	signature:(int32_t index)
orphanElementAt	uvector.h	/^    void* orphanElementAt(int32_t index);$/;"	p	class:UVector	access:public	signature:(int32_t index)
orphanOrClone	cmemory.h	/^    inline H *orphanOrClone(int32_t length, int32_t &resultCapacity);$/;"	p	class:MaybeStackHeaderAndArray	access:public	signature:(int32_t length, int32_t &resultCapacity)
orphanOrClone	cmemory.h	/^    inline T *orphanOrClone(int32_t length, int32_t &resultCapacity);$/;"	p	class:MaybeStackArray	access:public	signature:(int32_t length, int32_t &resultCapacity)
orphanOrClone	cmemory.h	/^inline H *MaybeStackHeaderAndArray<H, T, stackCapacity>::orphanOrClone(int32_t length,$/;"	f	class:MaybeStackHeaderAndArray	signature:(int32_t length, int32_t &resultCapacity)
orphanOrClone	cmemory.h	/^inline T *MaybeStackArray<T, stackCapacity>::orphanOrClone(int32_t length, int32_t &resultCapacity) {$/;"	f	class:MaybeStackArray	signature:(int32_t length, int32_t &resultCapacity)
otherName	unames.c	/^    const char *otherName;$/;"	m	struct:__anon95	file:	access:public
outCharset	udataswp.h	/^    uint8_t outCharset;$/;"	m	struct:UDataSwapper	access:public
outIsBigEndian	udataswp.h	/^    UBool outIsBigEndian;$/;"	m	struct:UDataSwapper	access:public
outbuf_	unicode/bytestream.h	/^  char* outbuf_;$/;"	m	class:CheckedArrayByteSink	access:private
outputChar	utrace.c	/^static void outputChar(char c, char *outBuf, int32_t *outIx, int32_t capacity, int32_t indent) {$/;"	f	file:	signature:(char c, char *outBuf, int32_t *outIx, int32_t capacity, int32_t indent)
outputHexBytes	utrace.c	/^static void outputHexBytes(int64_t val, int32_t charsToOutput,$/;"	f	file:	signature:(int64_t val, int32_t charsToOutput, char *outBuf, int32_t *outIx, int32_t capacity)
outputPtrBytes	utrace.c	/^static void outputPtrBytes(void *val, char *outBuf, int32_t *outIx, int32_t capacity) {$/;"	f	file:	signature:(void *val, char *outBuf, int32_t *outIx, int32_t capacity)
outputString	utrace.c	/^static void outputString(const char *s, char *outBuf, int32_t *outIx, int32_t capacity, int32_t indent) {$/;"	f	file:	signature:(const char *s, char *outBuf, int32_t *outIx, int32_t capacity, int32_t indent)
outputType	ucnvmbcs.h	/^    uint8_t outputType, unicodeMask;$/;"	m	struct:UConverterMBCSTable	access:public
outputUString	utrace.c	/^static void outputUString(const UChar *s, int32_t len, $/;"	f	file:	signature:(const UChar *s, int32_t len, char *outBuf, int32_t *outIx, int32_t capacity, int32_t indent)
overflowed_	unicode/bytestream.h	/^  UBool overflowed_;$/;"	m	class:CheckedArrayByteSink	access:private
overrideIllegal	bmpset.cpp	/^void BMPSet::overrideIllegal() {$/;"	f	class:BMPSet	signature:()
overrideIllegal	bmpset.h	/^    void overrideIllegal();$/;"	p	class:BMPSet	access:private	signature:()
ownEncodingStrings	ucnvsel.cpp	/^  UBool ownPv, ownEncodingStrings;$/;"	m	struct:UConverterSelector	file:	access:public
ownPv	ucnvsel.cpp	/^  UBool ownPv, ownEncodingStrings;$/;"	m	struct:UConverterSelector	file:	access:public
owner	umutex.c	/^    UMTX        *owner;             \/* Points back to the UMTX corrsponding to this   *\/$/;"	m	struct:ICUMutex	file:	access:public
p	ucase.h	/^    void *p;$/;"	m	struct:UCaseContext	access:public
p	unicode/utext.h	/^    const void     *p; $/;"	m	struct:UText	access:public
p	uniset_props.cpp	/^    UnicodeSet* p;$/;"	m	class:UnicodeSetPointer	file:	access:private
p16BitUnits	uresdata.h	/^    const uint16_t *p16BitUnits;$/;"	m	struct:__anon12	access:public
pAlloc	cmemory.c	/^static UMemAllocFn    *pAlloc;$/;"	v	file:
pContext	cmemory.c	/^static const void     *pContext;$/;"	v	file:
pDecFn	umutex.c	/^static UMtxAtomicFn  *pDecFn = NULL;$/;"	v	file:
pExtra	unicode/utext.h	/^    void          *pExtra;$/;"	m	struct:UText	access:public
pFree	cmemory.c	/^static UMemFreeFn     *pFree;$/;"	v	file:
pFuncs	unicode/utext.h	/^    const UTextFuncs     *pFuncs;$/;"	m	struct:UText	access:public
pHeader	ucmndata.c	/^    const DataHeader *pHeader;$/;"	m	struct:__anon27	file:	access:public
pHeader	udatamem.h	/^    const DataHeader *pHeader;     \/* Header of the memory being described by this    *\/$/;"	m	struct:UDataMemory	access:public
pImpAct	ubidi.c	/^    const ImpAct * pImpAct;             \/* action map array             *\/$/;"	m	struct:__anon18	file:	access:public
pImpAct	ubidi.c	/^    const void * pImpAct[2];$/;"	m	struct:ImpTabPair	file:	access:public
pImpTab	ubidi.c	/^    const ImpTab * pImpTab;             \/* level table pointer          *\/$/;"	m	struct:__anon18	file:	access:public
pImpTab	ubidi.c	/^    const void * pImpTab[2];$/;"	m	struct:ImpTabPair	file:	access:public
pImpTabPair	ubidiimp.h	/^    const struct ImpTabPair * pImpTabPair;  \/* pointer to levels state table pair *\/$/;"	m	struct:UBiDi	typeref:struct:UBiDi::ImpTabPair	access:public
pIncFn	umutex.c	/^static UMtxAtomicFn  *pIncFn = NULL;$/;"	v	file:
pMutexDestroyFn	umutex.c	/^static UMtxFn        *pMutexDestroyFn = NULL;$/;"	v	file:
pMutexInitFn	umutex.c	/^static UMtxInitFn    *pMutexInitFn    = NULL;$/;"	v	file:
pMutexLockFn	umutex.c	/^static UMtxFn        *pMutexLockFn    = NULL;$/;"	v	file:
pMutexUnlockFn	umutex.c	/^static UMtxFn        *pMutexUnlockFn  = NULL;$/;"	v	file:
pParaBiDi	ubidiimp.h	/^    const UBiDi * pParaBiDi;$/;"	m	struct:UBiDi	access:public
pRealloc	cmemory.c	/^static UMemReallocFn  *pRealloc;$/;"	v	file:
pRoot	uresdata.h	/^    const int32_t *pRoot;$/;"	m	struct:__anon12	access:public
pSpanNotSet	unisetspan.h	/^    UnicodeSet *pSpanNotSet;$/;"	m	class:UnicodeSetStringSpan	access:private
pTraceDataFunc	utrace.c	/^static UTraceData      *pTraceDataFunc  = NULL;$/;"	v	file:
pTraceEntryFunc	utrace.c	/^static UTraceEntry     *pTraceEntryFunc = NULL;$/;"	v	file:
pTraceExitFunc	utrace.c	/^static UTraceExit      *pTraceExitFunc  = NULL;$/;"	v	file:
packDiff	ucnvbocu.c	/^packDiff(int32_t diff) {$/;"	f	file:	signature:(int32_t diff)
packageNameFromPath	udata.cpp	/^packageNameFromPath(const char *path)$/;"	f	file:	signature:(const char *path)
packageStub	udata.cpp	/^    CharString  packageStub;                       \/* example:  "\/icudt28b". Will ignore that leaf in set paths. *\/$/;"	m	class:UDataPathIterator	file:	access:private
pad	uresdata.c	/^    UChar pad;$/;"	m	struct:__anon51	file:	access:public
padLeading	unicode/unistr.h	/^  UBool padLeading(int32_t targetLength,$/;"	p	class:UnicodeString	access:public	signature:(int32_t targetLength, UChar padChar = 0x0020)
padLeading	unistr.cpp	/^UnicodeString::padLeading(int32_t targetLength,$/;"	f	class:UnicodeString	signature:(int32_t targetLength, UChar padChar)
padTrailing	unicode/unistr.h	/^  UBool padTrailing(int32_t targetLength,$/;"	p	class:UnicodeString	access:public	signature:(int32_t targetLength, UChar padChar = 0x0020)
padTrailing	unistr.cpp	/^UnicodeString::padTrailing(int32_t targetLength,$/;"	f	class:UnicodeString	signature:(int32_t targetLength, UChar padChar)
padding1	utrie2.h	/^    UBool padding1;$/;"	m	struct:UTrie2	access:public
padding2	utrie2.h	/^    int16_t padding2;$/;"	m	struct:UTrie2	access:public
pairIndex	usc_impl.c	/^    int32_t pairIndex;$/;"	m	struct:ParenStackEntry	file:	access:public
pairedChars	usc_impl.c	/^static const UChar32 pairedChars[] = {$/;"	v	file:
paraCount	ubidiimp.h	/^    int32_t paraCount;                  \/* set in getDirProps() *\/$/;"	m	struct:UBiDi	access:public
paraLevel	ubidiimp.h	/^    UBiDiLevel paraLevel;$/;"	m	struct:UBiDi	access:public
paras	ubidiimp.h	/^    Para *paras;                        \/* limits of paragraphs, filled in$/;"	m	struct:UBiDi	access:public
parasMemory	ubidiimp.h	/^    Para *parasMemory;$/;"	m	struct:UBiDi	access:public
parasMemory	ubidiimp.h	/^    Para *parasMemory;$/;"	m	union:__anon85	access:public
parasSize	ubidiimp.h	/^    int32_t dirPropsSize, levelsSize, parasSize, runsSize;$/;"	m	struct:UBiDi	access:public
parenSP	usc_impl.c	/^    int32_t parenSP;$/;"	m	struct:UScriptRun	file:	access:public
parenStack	usc_impl.c	/^    struct ParenStackEntry parenStack[PAREN_STACK_DEPTH];$/;"	m	struct:UScriptRun	typeref:struct:UScriptRun::ParenStackEntry	file:	access:public
parse	rbbiscan.cpp	/^void RBBIRuleScanner::parse() {$/;"	f	class:RBBIRuleScanner	signature:()
parse	rbbiscan.h	/^    void        parse();                            \/\/ Parse the rules, generating two parse$/;"	p	class:RBBIRuleScanner	access:public	signature:()
parseChar	util.cpp	/^UBool ICU_Utility::parseChar(const UnicodeString& id, int32_t& pos, UChar ch) {$/;"	f	class:ICU_Utility	signature:(const UnicodeString& id, int32_t& pos, UChar ch)
parseChar	util.h	/^    static UBool parseChar(const UnicodeString& id, int32_t& pos, UChar ch);$/;"	p	class:ICU_Utility	access:public	signature:(const UnicodeString& id, int32_t& pos, UChar ch)
parseConverterOptions	ucnv_bld.c	/^parseConverterOptions(const char *inName,$/;"	f	file:	signature:(const char *inName, UConverterNamePieces *pPieces, UConverterLoadArgs *pArgs, UErrorCode *err)
parseInteger	util.h	/^    static int32_t parseInteger(const UnicodeString& rule, int32_t& pos, int32_t limit);$/;"	p	class:ICU_Utility	access:public	signature:(const UnicodeString& rule, int32_t& pos, int32_t limit)
parseInteger	util_props.cpp	/^int32_t ICU_Utility::parseInteger(const UnicodeString& rule, int32_t& pos, int32_t limit) {$/;"	f	class:ICU_Utility	signature:(const UnicodeString& rule, int32_t& pos, int32_t limit)
parseNumber	util.h	/^    static int32_t parseNumber(const UnicodeString& text,$/;"	p	class:ICU_Utility	access:public	signature:(const UnicodeString& text, int32_t& pos, int8_t radix)
parseNumber	util_props.cpp	/^int32_t ICU_Utility::parseNumber(const UnicodeString& text,$/;"	f	class:ICU_Utility	signature:(const UnicodeString& text, int32_t& pos, int8_t radix)
parsePattern	util.cpp	/^int32_t ICU_Utility::parsePattern(const UnicodeString& pat,$/;"	f	class:ICU_Utility	signature:(const UnicodeString& pat, const Replaceable& text, int32_t index, int32_t limit)
parsePattern	util.h	/^    static int32_t parsePattern(const UnicodeString& pat,$/;"	p	class:ICU_Utility	access:public	signature:(const UnicodeString& pat, const Replaceable& text, int32_t index, int32_t limit)
parsePattern	util.h	/^    static int32_t parsePattern(const UnicodeString& rule, int32_t pos, int32_t limit,$/;"	p	class:ICU_Utility	access:public	signature:(const UnicodeString& rule, int32_t pos, int32_t limit, const UnicodeString& pattern, int32_t* parsedInts)
parsePattern	util_props.cpp	/^int32_t ICU_Utility::parsePattern(const UnicodeString& rule, int32_t pos, int32_t limit,$/;"	f	class:ICU_Utility	signature:(const UnicodeString& rule, int32_t pos, int32_t limit, const UnicodeString& pattern, int32_t* parsedInts)
parsePrefix	serv.cpp	/^ICUServiceKey::parsePrefix(UnicodeString& result) $/;"	f	class:ICUServiceKey	signature:(UnicodeString& result)
parsePrefix	serv.h	/^  static UnicodeString& parsePrefix(UnicodeString& result);$/;"	p	class:ICUServiceKey	access:public	signature:(UnicodeString& result)
parseReference	rbbirb.h	/^    virtual UnicodeString parseReference(const UnicodeString& text,$/;"	p	class:RBBISymbolTable	access:public	signature:(const UnicodeString& text, ParsePosition& pos, int32_t limit) const
parseReference	rbbistbl.cpp	/^UnicodeString   RBBISymbolTable::parseReference(const UnicodeString& text,$/;"	f	class:RBBISymbolTable	signature:(const UnicodeString& text, ParsePosition& pos, int32_t limit) const
parseReference	unicode/symtable.h	/^    virtual UnicodeString parseReference(const UnicodeString& text,$/;"	p	class:SymbolTable	access:public	signature:(const UnicodeString& text, ParsePosition& pos, int32_t limit) const
parseSuffix	serv.cpp	/^ICUServiceKey::parseSuffix(UnicodeString& result) $/;"	f	class:ICUServiceKey	signature:(UnicodeString& result)
parseSuffix	serv.h	/^  static UnicodeString& parseSuffix(UnicodeString& result);$/;"	p	class:ICUServiceKey	access:public	signature:(UnicodeString& result)
parseTagString	loclikely.cpp	/^parseTagString($/;"	f	file:	signature:( const char* localeID, char* lang, int32_t* langLength, char* script, int32_t* scriptLength, char* region, int32_t* regionLength, UErrorCode* err)
parseUnicodeIdentifier	util.h	/^    static UnicodeString parseUnicodeIdentifier(const UnicodeString& str, int32_t& pos);$/;"	p	class:ICU_Utility	access:public	signature:(const UnicodeString& str, int32_t& pos)
parseUnicodeIdentifier	util_props.cpp	/^UnicodeString ICU_Utility::parseUnicodeIdentifier(const UnicodeString& str, int32_t& pos) {$/;"	f	class:ICU_Utility	signature:(const UnicodeString& str, int32_t& pos)
pat	unicode/uniset.h	/^    UChar *pat;$/;"	m	class:UnicodeSet	access:private
patLen	unicode/uniset.h	/^    int32_t patLen;$/;"	m	class:UnicodeSet	access:private
path	sprpimpl.h	/^    char* path;$/;"	m	struct:UStringPrepKey	access:public
path	udata.cpp	/^    const char *path;                              \/* working path (u_icudata_Dir) *\/$/;"	m	class:UDataPathIterator	file:	access:private
pathBuffer	udata.cpp	/^    CharString  pathBuffer;                        \/* output path for this it'ion *\/$/;"	m	class:UDataPathIterator	file:	access:private
peek	uvector.h	/^    void* peek(void) const;$/;"	p	class:UStack	access:public	signature:(void) const
peek	uvector.h	/^inline void* UStack::peek(void) const {$/;"	f	class:UStack	signature:(void) const
peeki	uvector.h	/^    int32_t peeki(void) const;$/;"	p	class:UStack	access:public	signature:(void) const
peeki	uvector.h	/^inline int32_t UStack::peeki(void) const {$/;"	f	class:UStack	signature:(void) const
peeki	uvectr32.h	/^    int32_t peeki(void) const;$/;"	p	class:UVector32	access:public	signature:(void) const
peeki	uvectr32.h	/^inline int32_t UVector32::peeki(void) const {$/;"	f	class:UVector32	signature:(void) const
permute	caniter.cpp	/^void U_EXPORT2 CanonicalIterator::permute(UnicodeString &source, UBool skipZeros, Hashtable *result, UErrorCode &status) {$/;"	f	class:CanonicalIterator	signature:(UnicodeString &source, UBool skipZeros, Hashtable *result, UErrorCode &status)
permute	unicode/caniter.h	/^    static void U_EXPORT2 permute(UnicodeString &source, UBool skipZeros, Hashtable *result, UErrorCode &status);$/;"	p	class:CanonicalIterator	access:public	signature:(UnicodeString &source, UBool skipZeros, Hashtable *result, UErrorCode &status)
pieces	unicode/caniter.h	/^    UnicodeString **pieces;$/;"	m	class:CanonicalIterator	access:private
pieces_length	unicode/caniter.h	/^    int32_t pieces_length;$/;"	m	class:CanonicalIterator	access:private
pieces_lengths	unicode/caniter.h	/^    int32_t *pieces_lengths;$/;"	m	class:CanonicalIterator	access:private
pinCodePoint	uniset.cpp	/^static inline UChar32 pinCodePoint(UChar32& c) {$/;"	f	file:	signature:(UChar32& c)
pinIndex	unicode/unistr.h	/^  inline void pinIndex(int32_t& start) const;$/;"	p	class:UnicodeString	access:private	signature:(int32_t& start) const
pinIndex	unicode/unistr.h	/^UnicodeString::pinIndex(int32_t& start) const$/;"	f	class:UnicodeString	signature:(int32_t& start) const
pinIndex	utext.cpp	/^pinIndex(int64_t &index, int64_t limit) {$/;"	f	file:	signature:(int64_t &index, int64_t limit)
pinIndices	unicode/unistr.h	/^  inline void pinIndices(int32_t& start,$/;"	p	class:UnicodeString	access:private	signature:(int32_t& start, int32_t& length) const
pinIndices	unicode/unistr.h	/^UnicodeString::pinIndices(int32_t& start,$/;"	f	class:UnicodeString	signature:(int32_t& start, int32_t& _length) const
pkg	ucnv_cnv.h	/^    const char *pkg, *name, *locale;$/;"	m	struct:__anon9	access:public
pl_addFontRun	unicode/uintrnal.h	34;"	d
pl_addFontRun	unicode/urename.h	148;"	d
pl_addFontRun_4_6	unicode/uintrnal.h	145;"	d
pl_addLocaleRun	unicode/uintrnal.h	35;"	d
pl_addLocaleRun	unicode/urename.h	149;"	d
pl_addLocaleRun_4_6	unicode/uintrnal.h	146;"	d
pl_addValueRun	unicode/uintrnal.h	36;"	d
pl_addValueRun	unicode/urename.h	150;"	d
pl_addValueRun_4_6	unicode/uintrnal.h	147;"	d
pl_close	unicode/uintrnal.h	37;"	d
pl_close	unicode/urename.h	151;"	d
pl_closeFontRuns	unicode/uintrnal.h	38;"	d
pl_closeFontRuns	unicode/urename.h	152;"	d
pl_closeFontRuns_4_6	unicode/uintrnal.h	149;"	d
pl_closeLine	unicode/uintrnal.h	39;"	d
pl_closeLine	unicode/urename.h	153;"	d
pl_closeLine_4_6	unicode/uintrnal.h	150;"	d
pl_closeLocaleRuns	unicode/uintrnal.h	40;"	d
pl_closeLocaleRuns	unicode/urename.h	154;"	d
pl_closeLocaleRuns_4_6	unicode/uintrnal.h	151;"	d
pl_closeValueRuns	unicode/uintrnal.h	41;"	d
pl_closeValueRuns	unicode/urename.h	155;"	d
pl_closeValueRuns_4_6	unicode/uintrnal.h	152;"	d
pl_close_4_6	unicode/uintrnal.h	148;"	d
pl_countLineRuns	unicode/uintrnal.h	42;"	d
pl_countLineRuns	unicode/urename.h	156;"	d
pl_countLineRuns_4_6	unicode/uintrnal.h	153;"	d
pl_create	unicode/urename.h	157;"	d
pl_getAscent	unicode/uintrnal.h	43;"	d
pl_getAscent	unicode/urename.h	158;"	d
pl_getAscent_4_6	unicode/uintrnal.h	154;"	d
pl_getDescent	unicode/uintrnal.h	44;"	d
pl_getDescent	unicode/urename.h	159;"	d
pl_getDescent_4_6	unicode/uintrnal.h	155;"	d
pl_getFontRunCount	unicode/uintrnal.h	45;"	d
pl_getFontRunCount	unicode/urename.h	160;"	d
pl_getFontRunCount_4_6	unicode/uintrnal.h	156;"	d
pl_getFontRunFont	unicode/uintrnal.h	46;"	d
pl_getFontRunFont	unicode/urename.h	161;"	d
pl_getFontRunFont_4_6	unicode/uintrnal.h	157;"	d
pl_getFontRunLastLimit	unicode/uintrnal.h	47;"	d
pl_getFontRunLastLimit	unicode/urename.h	162;"	d
pl_getFontRunLastLimit_4_6	unicode/uintrnal.h	158;"	d
pl_getFontRunLimit	unicode/uintrnal.h	48;"	d
pl_getFontRunLimit	unicode/urename.h	163;"	d
pl_getFontRunLimit_4_6	unicode/uintrnal.h	159;"	d
pl_getLeading	unicode/uintrnal.h	49;"	d
pl_getLeading	unicode/urename.h	164;"	d
pl_getLeading_4_6	unicode/uintrnal.h	160;"	d
pl_getLineAscent	unicode/uintrnal.h	50;"	d
pl_getLineAscent	unicode/urename.h	165;"	d
pl_getLineAscent_4_6	unicode/uintrnal.h	161;"	d
pl_getLineDescent	unicode/uintrnal.h	51;"	d
pl_getLineDescent	unicode/urename.h	166;"	d
pl_getLineDescent_4_6	unicode/uintrnal.h	162;"	d
pl_getLineLeading	unicode/uintrnal.h	52;"	d
pl_getLineLeading	unicode/urename.h	167;"	d
pl_getLineLeading_4_6	unicode/uintrnal.h	163;"	d
pl_getLineVisualRun	unicode/uintrnal.h	53;"	d
pl_getLineVisualRun	unicode/urename.h	168;"	d
pl_getLineVisualRun_4_6	unicode/uintrnal.h	164;"	d
pl_getLineWidth	unicode/uintrnal.h	54;"	d
pl_getLineWidth	unicode/urename.h	169;"	d
pl_getLineWidth_4_6	unicode/uintrnal.h	165;"	d
pl_getLocaleRunCount	unicode/uintrnal.h	55;"	d
pl_getLocaleRunCount	unicode/urename.h	170;"	d
pl_getLocaleRunCount_4_6	unicode/uintrnal.h	166;"	d
pl_getLocaleRunLastLimit	unicode/uintrnal.h	56;"	d
pl_getLocaleRunLastLimit	unicode/urename.h	171;"	d
pl_getLocaleRunLastLimit_4_6	unicode/uintrnal.h	167;"	d
pl_getLocaleRunLimit	unicode/uintrnal.h	57;"	d
pl_getLocaleRunLimit	unicode/urename.h	172;"	d
pl_getLocaleRunLimit_4_6	unicode/uintrnal.h	168;"	d
pl_getLocaleRunLocale	unicode/uintrnal.h	58;"	d
pl_getLocaleRunLocale	unicode/urename.h	173;"	d
pl_getLocaleRunLocale_4_6	unicode/uintrnal.h	169;"	d
pl_getParagraphLevel	unicode/uintrnal.h	59;"	d
pl_getParagraphLevel	unicode/urename.h	174;"	d
pl_getParagraphLevel_4_6	unicode/uintrnal.h	170;"	d
pl_getTextDirection	unicode/uintrnal.h	60;"	d
pl_getTextDirection	unicode/urename.h	175;"	d
pl_getTextDirection_4_6	unicode/uintrnal.h	171;"	d
pl_getValueRunCount	unicode/uintrnal.h	61;"	d
pl_getValueRunCount	unicode/urename.h	176;"	d
pl_getValueRunCount_4_6	unicode/uintrnal.h	172;"	d
pl_getValueRunLastLimit	unicode/uintrnal.h	62;"	d
pl_getValueRunLastLimit	unicode/urename.h	177;"	d
pl_getValueRunLastLimit_4_6	unicode/uintrnal.h	173;"	d
pl_getValueRunLimit	unicode/uintrnal.h	63;"	d
pl_getValueRunLimit	unicode/urename.h	178;"	d
pl_getValueRunLimit_4_6	unicode/uintrnal.h	174;"	d
pl_getValueRunValue	unicode/uintrnal.h	64;"	d
pl_getValueRunValue	unicode/urename.h	179;"	d
pl_getValueRunValue_4_6	unicode/uintrnal.h	175;"	d
pl_getVisualRunAscent	unicode/uintrnal.h	65;"	d
pl_getVisualRunAscent	unicode/urename.h	180;"	d
pl_getVisualRunAscent_4_6	unicode/uintrnal.h	176;"	d
pl_getVisualRunDescent	unicode/uintrnal.h	66;"	d
pl_getVisualRunDescent	unicode/urename.h	181;"	d
pl_getVisualRunDescent_4_6	unicode/uintrnal.h	177;"	d
pl_getVisualRunDirection	unicode/uintrnal.h	67;"	d
pl_getVisualRunDirection	unicode/urename.h	182;"	d
pl_getVisualRunDirection_4_6	unicode/uintrnal.h	178;"	d
pl_getVisualRunFont	unicode/uintrnal.h	68;"	d
pl_getVisualRunFont	unicode/urename.h	183;"	d
pl_getVisualRunFont_4_6	unicode/uintrnal.h	179;"	d
pl_getVisualRunGlyphCount	unicode/uintrnal.h	69;"	d
pl_getVisualRunGlyphCount	unicode/urename.h	184;"	d
pl_getVisualRunGlyphCount_4_6	unicode/uintrnal.h	180;"	d
pl_getVisualRunGlyphToCharMap	unicode/uintrnal.h	70;"	d
pl_getVisualRunGlyphToCharMap	unicode/urename.h	185;"	d
pl_getVisualRunGlyphToCharMap_4_6	unicode/uintrnal.h	181;"	d
pl_getVisualRunGlyphs	unicode/uintrnal.h	71;"	d
pl_getVisualRunGlyphs	unicode/urename.h	186;"	d
pl_getVisualRunGlyphs_4_6	unicode/uintrnal.h	182;"	d
pl_getVisualRunLeading	unicode/uintrnal.h	72;"	d
pl_getVisualRunLeading	unicode/urename.h	187;"	d
pl_getVisualRunLeading_4_6	unicode/uintrnal.h	183;"	d
pl_getVisualRunPositions	unicode/uintrnal.h	73;"	d
pl_getVisualRunPositions	unicode/urename.h	188;"	d
pl_getVisualRunPositions_4_6	unicode/uintrnal.h	184;"	d
pl_isComplex	unicode/urename.h	189;"	d
pl_line	unicode/uintrnal.h	74;"	d
pl_line_4_6	unicode/uintrnal.h	185;"	d
pl_nextLine	unicode/uintrnal.h	75;"	d
pl_nextLine	unicode/urename.h	190;"	d
pl_nextLine_4_6	unicode/uintrnal.h	186;"	d
pl_openEmptyFontRuns	unicode/uintrnal.h	76;"	d
pl_openEmptyFontRuns	unicode/urename.h	191;"	d
pl_openEmptyFontRuns_4_6	unicode/uintrnal.h	187;"	d
pl_openEmptyLocaleRuns	unicode/uintrnal.h	77;"	d
pl_openEmptyLocaleRuns	unicode/urename.h	192;"	d
pl_openEmptyLocaleRuns_4_6	unicode/uintrnal.h	188;"	d
pl_openEmptyValueRuns	unicode/uintrnal.h	78;"	d
pl_openEmptyValueRuns	unicode/urename.h	193;"	d
pl_openEmptyValueRuns_4_6	unicode/uintrnal.h	189;"	d
pl_openFontRuns	unicode/uintrnal.h	79;"	d
pl_openFontRuns	unicode/urename.h	194;"	d
pl_openFontRuns_4_6	unicode/uintrnal.h	190;"	d
pl_openLocaleRuns	unicode/uintrnal.h	80;"	d
pl_openLocaleRuns	unicode/urename.h	195;"	d
pl_openLocaleRuns_4_6	unicode/uintrnal.h	191;"	d
pl_openValueRuns	unicode/uintrnal.h	81;"	d
pl_openValueRuns	unicode/urename.h	196;"	d
pl_openValueRuns_4_6	unicode/uintrnal.h	192;"	d
pl_paragraph	unicode/uintrnal.h	82;"	d
pl_paragraph_4_6	unicode/uintrnal.h	193;"	d
pl_reflow	unicode/uintrnal.h	83;"	d
pl_reflow	unicode/urename.h	197;"	d
pl_reflow_4_6	unicode/uintrnal.h	194;"	d
pl_resetFontRuns	unicode/uintrnal.h	84;"	d
pl_resetFontRuns	unicode/urename.h	198;"	d
pl_resetFontRuns_4_6	unicode/uintrnal.h	195;"	d
pl_resetLocaleRuns	unicode/uintrnal.h	85;"	d
pl_resetLocaleRuns	unicode/urename.h	199;"	d
pl_resetLocaleRuns_4_6	unicode/uintrnal.h	196;"	d
pl_resetValueRuns	unicode/uintrnal.h	86;"	d
pl_resetValueRuns	unicode/urename.h	200;"	d
pl_resetValueRuns_4_6	unicode/uintrnal.h	197;"	d
pl_visualRun	unicode/uintrnal.h	87;"	d
pl_visualRun_4_6	unicode/uintrnal.h	198;"	d
platform	ucnv_bld.h	/^    int8_t platform;                \/* +68: 1 platform of the converter (only IBM now) *\/$/;"	m	struct:UConverterStaticData	access:public
platformMutex	umutex.c	/^    MUTEX_TYPE   platformMutex;     \/* The underlying OS mutex being wrapped.          *\/$/;"	m	struct:ICUMutex	file:	access:public
pluginCount	icuplug.c	/^static int32_t pluginCount = 0;$/;"	v	file:
pluginList	icuplug.c	/^static UPlugData pluginList[UPLUG_PLUGIN_INITIAL_COUNT];$/;"	v	file:
pluginStatus	icuplug.c	/^  UErrorCode pluginStatus; \/**< status code of plugin *\/$/;"	m	struct:UPlugData	file:	access:public
plugin_file	icuplug.c	/^static char plugin_file[2048] = "";$/;"	v	file:
pname_cleanup	propname.cpp	/^static UBool U_CALLCONV pname_cleanup(void) {$/;"	f	file:	signature:(void)
pointer	uhash.h	/^    void*   pointer;$/;"	m	union:UHashTok	access:public
pointer	uniset_props.cpp	/^    inline UnicodeSet* pointer() { return p; }$/;"	f	class:UnicodeSetPointer	access:public	signature:()
pointerTOCEntryCount	ucmndata.c	/^static uint32_t pointerTOCEntryCount(const UDataMemory *pData) {$/;"	f	file:	signature:(const UDataMemory *pData)
pointerTOCLookupFn	ucmndata.c	/^static const DataHeader *pointerTOCLookupFn(const UDataMemory *pData,$/;"	f	file:	signature:(const UDataMemory *pData, const char *name, int32_t *pLength, UErrorCode *pErrorCode)
points	ubidiimp.h	/^    Point *points;          \/* pointer to array of points *\/$/;"	m	struct:InsertPoints	access:public
poolBundleKeys	uresdata.h	/^    const char *poolBundleKeys;$/;"	m	struct:__anon12	access:public
pop	usc_impl.c	/^static void pop(UScriptRun *scriptRun)$/;"	f	file:	signature:(UScriptRun *scriptRun)
pop	ustack.cpp	/^void* UStack::pop(void) {$/;"	f	class:UStack	signature:(void)
pop	uvector.h	/^    void* pop(void);$/;"	p	class:UStack	access:public	signature:(void)
popFrame	uvectr32.h	/^    int32_t *popFrame(int32_t size);$/;"	p	class:UVector32	access:public	signature:(int32_t size)
popFrame	uvectr32.h	/^inline int32_t *UVector32::popFrame(int32_t size) {$/;"	f	class:UVector32	signature:(int32_t size)
popFrame	uvectr64.h	/^    int64_t *popFrame(int32_t size);$/;"	p	class:UVector64	access:public	signature:(int32_t size)
popFrame	uvectr64.h	/^inline int64_t *UVector64::popFrame(int32_t size) {$/;"	f	class:UVector64	signature:(int32_t size)
popMinimum	unisetspan.cpp	/^    int32_t popMinimum() {$/;"	f	class:OffsetList	access:public	signature:()
popi	ustack.cpp	/^int32_t UStack::popi(void) {$/;"	f	class:UStack	signature:(void)
popi	uvector.h	/^    int32_t popi(void);$/;"	p	class:UStack	access:public	signature:(void)
popi	uvectr32.h	/^    int32_t popi(void);$/;"	p	class:UVector32	access:public	signature:(void)
popi	uvectr32.h	/^inline int32_t UVector32::popi(void) {$/;"	f	class:UVector32	signature:(void)
popi	uvectr64.h	/^    int64_t popi(void);$/;"	p	class:UVector64	access:public	signature:(void)
popi	uvectr64.h	/^inline int64_t UVector64::popi(void) {$/;"	f	class:UVector64	signature:(void)
pos	ruleiter.h	/^        int32_t pos;$/;"	m	struct:RuleCharacterIterator::Pos	access:private
pos	ruleiter.h	/^    ParsePosition& pos;$/;"	m	class:RuleCharacterIterator	access:private
pos	ubidiimp.h	/^    int32_t pos;            \/* position in text *\/$/;"	m	struct:Point	access:public
pos	unicode/chariter.h	/^    int32_t  pos;$/;"	m	class:CharacterIterator	access:protected
posixID	locmap.c	/^    const char * const posixID;$/;"	m	struct:ILcidPosixElement	file:	access:public
posixID	putil.c	/^    const char* posixID;$/;"	m	struct:__anon42	file:	access:public
postContext	unicode/parseerr.h	/^    UChar          postContext[U_PARSE_CONTEXT_LEN];$/;"	m	struct:UParseError	access:public
preContext	unicode/parseerr.h	/^    UChar          preContext[U_PARSE_CONTEXT_LEN];$/;"	m	struct:UParseError	access:public
preFromU	ucnv_bld.h	/^    UChar preFromU[UCNV_EXT_MAX_UCHARS];$/;"	m	struct:UConverter	access:public
preFromUFirstCP	ucnv_bld.h	/^    UChar32 preFromUFirstCP;                \/* >=0: partial match *\/$/;"	m	struct:UConverter	access:public
preFromULength	ucnv_bld.h	/^    int8_t preFromULength, preToULength;    \/* negative: replay *\/$/;"	m	struct:UConverter	access:public
preToU	ucnv_bld.h	/^    char preToU[UCNV_EXT_MAX_BYTES];$/;"	m	struct:UConverter	access:public
preToUFirstLength	ucnv_bld.h	/^    int8_t preToUFirstLength;               \/* length of first character *\/$/;"	m	struct:UConverter	access:public
preToULength	ucnv_bld.h	/^    int8_t preFromULength, preToULength;    \/* negative: replay *\/$/;"	m	struct:UConverter	access:public
precLParen	rbbinode.h	/^            precLParen,$/;"	e	enum:RBBINode::OpPrecedence
precOpCat	rbbinode.h	/^            precOpCat$/;"	e	enum:RBBINode::OpPrecedence
precOpOr	rbbinode.h	/^            precOpOr,$/;"	e	enum:RBBINode::OpPrecedence
precStart	rbbinode.h	/^            precStart,$/;"	e	enum:RBBINode::OpPrecedence
precZero	rbbinode.h	/^            precZero,$/;"	e	enum:RBBINode::OpPrecedence
preceding	rbbi.cpp	/^int32_t RuleBasedBreakIterator::preceding(int32_t offset) {$/;"	f	class:RuleBasedBreakIterator	signature:(int32_t offset)
preceding	unicode/brkiter.h	/^    virtual int32_t preceding(int32_t offset) = 0;$/;"	p	class:BreakIterator	access:public	signature:(int32_t offset)
preceding	unicode/rbbi.h	/^    virtual int32_t preceding(int32_t offset);$/;"	p	class:RuleBasedBreakIterator	access:public	signature:(int32_t offset)
prefix	dictbe.cpp	/^  int32_t   prefix;     \/\/ The longest match with a dictionary word$/;"	m	class:PossibleWord	file:	access:private
prefix	serv.cpp	/^ICUServiceKey::prefix(UnicodeString& result) const $/;"	f	class:ICUServiceKey	signature:(UnicodeString& result) const
prefix	serv.h	/^  virtual UnicodeString& prefix(UnicodeString& result) const;$/;"	p	class:ICUServiceKey	access:public	signature:(UnicodeString& result) const
prefix	servlk.cpp	/^LocaleKey::prefix(UnicodeString& result) const {$/;"	f	class:LocaleKey	signature:(UnicodeString& result) const
prefix	servloc.h	/^    virtual UnicodeString& prefix(UnicodeString& result) const;$/;"	p	class:LocaleKey	access:public	signature:(UnicodeString& result) const
prepareReorder	ubidiln.c	/^prepareReorder(const UBiDiLevel *levels, int32_t length,$/;"	f	file:	signature:(const UBiDiLevel *levels, int32_t length, int32_t *indexMap, UBiDiLevel *pMinLevel, UBiDiLevel *pMaxLevel)
presALink	ushape.c	/^static const uint8_t presALink[] = {$/;"	v	file:
presBLink	ushape.c	/^static const uint8_t presBLink[]=$/;"	v	file:
prevG	ucnv2022.c	/^    int8_t prevG;       \/* g before single shift (SS2 or SS3) *\/$/;"	m	struct:ISO2022State	file:	access:public
prevRow	propsvec.c	/^    int32_t prevRow;  \/* search optimization: remember last row seen *\/$/;"	m	struct:UPropsVectors	file:	access:public
prevToUnicodeStatus	ucnvisci.c	/^    UChar32 prevToUnicodeStatus;        \/* Hold the previous toUnicodeStatus. This is necessary because we may need to know the last two code points. *\/$/;"	m	struct:__anon16	file:	access:public
previous	normlzr.cpp	/^UChar32 Normalizer::previous() {$/;"	f	class:Normalizer	signature:()
previous	rbbi.cpp	/^int32_t RuleBasedBreakIterator::previous(void) {$/;"	f	class:RuleBasedBreakIterator	signature:(void)
previous	uchriter.cpp	/^UCharCharacterIterator::previous() {$/;"	f	class:UCharCharacterIterator	signature:()
previous	ulist.c	/^    UListNode *previous;$/;"	m	struct:UListNode	file:	access:public
previous	unicode/brkiter.h	/^    virtual int32_t previous(void) = 0;$/;"	p	class:BreakIterator	access:public	signature:(void)
previous	unicode/chariter.h	/^    virtual UChar         previous(void) = 0;$/;"	p	class:CharacterIterator	access:public	signature:(void)
previous	unicode/normlzr.h	/^  UChar32              previous(void);$/;"	p	class:Normalizer	access:public	signature:(void)
previous	unicode/rbbi.h	/^    virtual int32_t previous(void);$/;"	p	class:RuleBasedBreakIterator	access:public	signature:(void)
previous	unicode/uchriter.h	/^  virtual UChar         previous(void);$/;"	p	class:UCharCharacterIterator	access:public	signature:(void)
previous	unicode/uiter.h	/^    UCharIteratorPrevious *previous;$/;"	m	struct:UCharIterator	access:public
previous16	utrie2.cpp	/^uint16_t BackwardUTrie2StringIterator::previous16() {$/;"	f	class:BackwardUTrie2StringIterator	signature:()
previous16	utrie2.h	/^    uint16_t previous16();$/;"	p	class:BackwardUTrie2StringIterator	access:public	signature:()
previous32	uchriter.cpp	/^UCharCharacterIterator::previous32() {$/;"	f	class:UCharCharacterIterator	signature:()
previous32	unicode/chariter.h	/^    virtual UChar32       previous32(void) = 0;$/;"	p	class:CharacterIterator	access:public	signature:(void)
previous32	unicode/uchriter.h	/^  virtual UChar32       previous32(void);$/;"	p	class:UCharCharacterIterator	access:public	signature:(void)
previousCC	normalizer2impl.cpp	/^uint8_t ReorderingBuffer::previousCC() {$/;"	f	class:ReorderingBuffer	signature:()
previousCC	normalizer2impl.h	/^    uint8_t previousCC();  \/\/ Returns 0 if there is no previous character.$/;"	p	class:ReorderingBuffer	access:private	signature:()
previousNormalize	normlzr.cpp	/^Normalizer::previousNormalize() {$/;"	f	class:Normalizer	signature:()
previousNormalize	unicode/normlzr.h	/^  UBool previousNormalize();$/;"	p	class:Normalizer	access:private	signature:()
primeIndex	uhash.h	/^    int8_t      primeIndex;     \/* Index into our prime table for length.$/;"	m	struct:UHashtable	access:public
printData	rbbidata.cpp	/^void  RBBIDataWrapper::printData() {$/;"	f	class:RBBIDataWrapper	signature:()
printData	rbbidata.h	/^    void                  printData();$/;"	p	class:RBBIDataWrapper	access:public	signature:()
printData	rbbidata.h	162;"	d
printError	udataswp.h	/^    UDataPrintError *printError;$/;"	m	struct:UDataSwapper	access:public
printErrorContext	udataswp.h	/^    void *printErrorContext;$/;"	m	struct:UDataSwapper	access:public
printNode	rbbinode.cpp	/^void RBBINode::printNode() {$/;"	f	class:RBBINode	signature:()
printNode	rbbinode.h	/^        void        printNode();$/;"	p	class:RBBINode	access:public	signature:()
printNodeStack	rbbiscan.cpp	/^void RBBIRuleScanner::printNodeStack(const char *title) {$/;"	f	class:RBBIRuleScanner	signature:(const char *title)
printNodeStack	rbbiscan.h	/^    void        printNodeStack(const char *title);$/;"	p	class:RBBIRuleScanner	access:private	signature:(const char *title)
printPosSets	rbbitblb.cpp	/^void RBBITableBuilder::printPosSets(RBBINode *n) {$/;"	f	class:RBBITableBuilder	signature:(RBBINode *n)
printPosSets	rbbitblb.h	/^    void     printPosSets(RBBINode *n \/* = NULL*\/);$/;"	p	class:RBBITableBuilder	access:public	signature:(RBBINode *n )
printPosSets	rbbitblb.h	77;"	d
printRangeGroups	rbbisetb.cpp	/^void RBBISetBuilder::printRangeGroups() {$/;"	f	class:RBBISetBuilder	signature:()
printRangeGroups	rbbisetb.h	/^    void     printRangeGroups();$/;"	p	class:RBBISetBuilder	access:public	signature:()
printRangeGroups	rbbisetb.h	99;"	d
printRanges	rbbisetb.cpp	/^void RBBISetBuilder::printRanges() {$/;"	f	class:RBBISetBuilder	signature:()
printRanges	rbbisetb.h	/^    void     printRanges();$/;"	p	class:RBBISetBuilder	access:public	signature:()
printRanges	rbbisetb.h	98;"	d
printRuleStatusTable	rbbitblb.cpp	/^void RBBITableBuilder::printRuleStatusTable() {$/;"	f	class:RBBITableBuilder	signature:()
printRuleStatusTable	rbbitblb.h	/^    void     printRuleStatusTable();$/;"	p	class:RBBITableBuilder	access:public	signature:()
printRuleStatusTable	rbbitblb.h	79;"	d
printSet	rbbitblb.cpp	/^void RBBITableBuilder::printSet(UVector *s) {$/;"	f	class:RBBITableBuilder	signature:(UVector *s)
printSet	rbbitblb.h	/^    void     printSet(UVector *s);$/;"	p	class:RBBITableBuilder	access:public	signature:(UVector *s)
printSet	rbbitblb.h	76;"	d
printSets	rbbisetb.cpp	/^void RBBISetBuilder::printSets() {$/;"	f	class:RBBISetBuilder	signature:()
printSets	rbbisetb.h	/^    void     printSets();$/;"	p	class:RBBISetBuilder	access:public	signature:()
printSets	rbbisetb.h	97;"	d
printStates	rbbitblb.cpp	/^void RBBITableBuilder::printStates() {$/;"	f	class:RBBITableBuilder	signature:()
printStates	rbbitblb.h	/^    void     printStates();$/;"	p	class:RBBITableBuilder	access:public	signature:()
printStates	rbbitblb.h	78;"	d
printTable	rbbidata.cpp	/^void  RBBIDataWrapper::printTable(const char *heading, const RBBIStateTable *table) {$/;"	f	class:RBBIDataWrapper	signature:(const char *heading, const RBBIStateTable *table)
printTable	rbbidata.h	/^    void                  printTable(const char *heading, const RBBIStateTable *table);$/;"	p	class:RBBIDataWrapper	access:public	signature:(const char *heading, const RBBIStateTable *table)
printTable	rbbidata.h	163;"	d
printTree	rbbinode.cpp	/^void RBBINode::printTree(UBool printHeading) {$/;"	f	class:RBBINode	signature:(UBool printHeading)
printTree	rbbinode.h	/^        void        printTree(UBool withHeading);$/;"	p	class:RBBINode	access:public	signature:(UBool withHeading)
privA	unicode/utext.h	/^    int64_t         privA;$/;"	m	struct:UText	access:public
privB	unicode/utext.h	/^    int32_t         privB;$/;"	m	struct:UText	access:public
privC	unicode/utext.h	/^    int32_t         privC;$/;"	m	struct:UText	access:public
privP	unicode/utext.h	/^    void           *privP;$/;"	m	struct:UText	access:public
privateuse	uloc_tag.c	/^    const char          *privateuse;$/;"	m	struct:ULanguageTag	file:	access:public
process	uts46.cpp	/^    process(const UnicodeString &src,$/;"	p	class:UTS46	file:	access:private	signature:(const UnicodeString &src, UBool isLabel, UBool toASCII, UnicodeString &dest, IDNAInfo &info, UErrorCode &errorCode) const
process	uts46.cpp	/^UTS46::process(const UnicodeString &src,$/;"	f	class:UTS46	signature:(const UnicodeString &src, UBool isLabel, UBool toASCII, UnicodeString &dest, IDNAInfo &info, UErrorCode &errorCode) const
processLabel	uts46.cpp	/^    processLabel(UnicodeString &dest,$/;"	p	class:UTS46	file:	access:private	signature:(UnicodeString &dest, int32_t labelStart, int32_t labelLength, UBool toASCII, IDNAInfo &info, UErrorCode &errorCode) const
processLabel	uts46.cpp	/^UTS46::processLabel(UnicodeString &dest,$/;"	f	class:UTS46	signature:(UnicodeString &dest, int32_t labelStart, int32_t labelLength, UBool toASCII, IDNAInfo &info, UErrorCode &errorCode) const
processPropertySeq	ubidi.c	/^processPropertySeq(UBiDi *pBiDi, LevState *pLevState, uint8_t _prop,$/;"	f	file:	signature:(UBiDi *pBiDi, LevState *pLevState, uint8_t _prop, int32_t start, int32_t limit)
processUTF8	uts46.cpp	/^    processUTF8(const StringPiece &src,$/;"	p	class:UTS46	file:	access:private	signature:(const StringPiece &src, UBool isLabel, UBool toASCII, ByteSink &dest, IDNAInfo &info, UErrorCode &errorCode) const
processUTF8	uts46.cpp	/^UTS46::processUTF8(const StringPiece &src,$/;"	f	class:UTS46	signature:(const StringPiece &src, UBool isLabel, UBool toASCII, ByteSink &dest, IDNAInfo &info, UErrorCode &errorCode) const
processUnicode	uts46.cpp	/^    processUnicode(const UnicodeString &src,$/;"	p	class:UTS46	file:	access:private	signature:(const UnicodeString &src, int32_t labelStart, int32_t mappingStart, UBool isLabel, UBool toASCII, UnicodeString &dest, IDNAInfo &info, UErrorCode &errorCode) const
processUnicode	uts46.cpp	/^UTS46::processUnicode(const UnicodeString &src,$/;"	f	class:UTS46	signature:(const UnicodeString &src, int32_t labelStart, int32_t mappingStart, UBool isLabel, UBool toASCII, UnicodeString &dest, IDNAInfo &info, UErrorCode &errorCode) const
prop	uniset_props.cpp	/^    UProperty prop;$/;"	m	struct:__anon39	file:	access:public
propCompare	propname.cpp	/^    PropNameCompareFn *propCompare;$/;"	m	struct:CompareContext	file:	access:public
propsTrie	uchar_props_data.c	/^static const UTrie2 propsTrie={$/;"	v	file:
propsTrie_index	uchar_props_data.c	/^static const uint16_t propsTrie_index[17204]={$/;"	v	file:
propsVectors	uchar_props_data.c	/^static const uint32_t propsVectors[4614]={$/;"	v	file:
propsVectorsColumns	uchar_props_data.c	/^static const int32_t propsVectorsColumns=3;$/;"	v	file:
propsVectorsTrie	uchar_props_data.c	/^static const UTrie2 propsVectorsTrie={$/;"	v	file:
propsVectorsTrie_index	uchar_props_data.c	/^static const uint16_t propsVectorsTrie_index[22376]={$/;"	v	file:
providerProperties	unicode/utext.h	/^    int32_t         providerProperties;$/;"	m	struct:UText	access:public
ptr	cmemory.h	/^    H *ptr;$/;"	m	class:MaybeStackHeaderAndArray	access:private
ptr	cmemory.h	/^    T *ptr;$/;"	m	class:MaybeStackArray	access:private
ptr	unicode/localpointer.h	/^    T *ptr;$/;"	m	class:LocalPointerBase	access:protected
ptr_	unicode/stringpiece.h	/^  const char*   ptr_;$/;"	m	class:StringPiece	access:private
push	rbbiscan.h	/^    UBool       push(const RBBIRuleChar &c);        \/\/ Push (unget) one character.$/;"	p	class:RBBIRuleScanner	access:public	signature:(const RBBIRuleChar &c)
push	usc_impl.c	/^static void push(UScriptRun *scriptRun, int32_t pairIndex, UScriptCode scriptCode)$/;"	f	file:	signature:(UScriptRun *scriptRun, int32_t pairIndex, UScriptCode scriptCode)
push	uvector.h	/^    int32_t push(int32_t i, UErrorCode &status);$/;"	p	class:UStack	access:public	signature:(int32_t i, UErrorCode &status)
push	uvector.h	/^    void* push(void* obj, UErrorCode &status);$/;"	p	class:UStack	access:public	signature:(void* obj, UErrorCode &status)
push	uvector.h	/^inline int32_t UStack::push(int32_t i, UErrorCode &status) {$/;"	f	class:UStack	signature:(int32_t i, UErrorCode &status)
push	uvector.h	/^inline void* UStack::push(void* obj, UErrorCode &status) {$/;"	f	class:UStack	signature:(void* obj, UErrorCode &status)
push	uvectr32.h	/^    int32_t push(int32_t i, UErrorCode &status);$/;"	p	class:UVector32	access:public	signature:(int32_t i, UErrorCode &status)
push	uvectr32.h	/^inline int32_t UVector32::push(int32_t i, UErrorCode &status) {$/;"	f	class:UVector32	signature:(int32_t i, UErrorCode &status)
push	uvectr64.h	/^    int64_t push(int64_t i, UErrorCode &status);$/;"	p	class:UVector64	access:public	signature:(int64_t i, UErrorCode &status)
push	uvectr64.h	/^inline int64_t UVector64::push(int64_t i, UErrorCode &status) {$/;"	f	class:UVector64	signature:(int64_t i, UErrorCode &status)
pushCount	usc_impl.c	/^    int32_t pushCount;$/;"	m	struct:UScriptRun	file:	access:public
pushNewNode	rbbiscan.cpp	/^RBBINode  *RBBIRuleScanner::pushNewNode(RBBINode::NodeType  t) {$/;"	f	class:RBBIRuleScanner	signature:(RBBINode::NodeType t)
pushNewNode	rbbiscan.h	/^    RBBINode    *pushNewNode(RBBINode::NodeType  t);$/;"	p	class:RBBIRuleScanner	access:private	signature:(RBBINode::NodeType t)
put	hash.h	/^    void* put(const UnicodeString& key, void* value, UErrorCode& status);$/;"	p	class:Hashtable	access:public	signature:(const UnicodeString& key, void* value, UErrorCode& status)
put	hash.h	/^inline void* Hashtable::put(const UnicodeString& key, void* value, UErrorCode& status) {$/;"	f	class:Hashtable	signature:(const UnicodeString& key, void* value, UErrorCode& status)
puti	hash.h	/^    int32_t puti(const UnicodeString& key, int32_t value, UErrorCode& status);$/;"	p	class:Hashtable	access:public	signature:(const UnicodeString& key, int32_t value, UErrorCode& status)
puti	hash.h	/^inline int32_t Hashtable::puti(const UnicodeString& key, int32_t value, UErrorCode& status) {$/;"	f	class:Hashtable	signature:(const UnicodeString& key, int32_t value, UErrorCode& status)
putil_cleanup	putil.c	/^static UBool U_CALLCONV putil_cleanup(void)$/;"	f	file:	signature:(void)
pv	ucnvsel.cpp	/^  uint32_t* pv;              \/\/ table of bits!$/;"	m	struct:UConverterSelector	file:	access:public
pvCount	ucnvsel.cpp	/^  int32_t pvCount;$/;"	m	struct:UConverterSelector	file:	access:public
q	uloc.c	/^    float q;$/;"	m	struct:__anon72	file:	access:public
q	unicode/utext.h	/^    const void     *q;$/;"	m	struct:UText	access:public
quickCheck	filterednormalizer2.cpp	/^FilteredNormalizer2::quickCheck(const UnicodeString &s, UErrorCode &errorCode) const {$/;"	f	class:FilteredNormalizer2	signature:(const UnicodeString &s, UErrorCode &errorCode) const
quickCheck	normalizer2.cpp	/^    quickCheck(const UnicodeString &, UErrorCode &) const {$/;"	f	class:NoopNormalizer2	file:	access:private	signature:(const UnicodeString &, UErrorCode &) const
quickCheck	normalizer2.cpp	/^    quickCheck(const UnicodeString &s, UErrorCode &errorCode) const {$/;"	f	class:ComposeNormalizer2	file:	access:private	signature:(const UnicodeString &s, UErrorCode &errorCode) const
quickCheck	normalizer2.cpp	/^    quickCheck(const UnicodeString &s, UErrorCode &errorCode) const {$/;"	f	class:Normalizer2WithImpl	access:public	signature:(const UnicodeString &s, UErrorCode &errorCode) const
quickCheck	normlzr.cpp	/^Normalizer::quickCheck(const UnicodeString& source,$/;"	f	class:Normalizer	signature:(const UnicodeString& source, UNormalizationMode mode, int32_t options, UErrorCode &status)
quickCheck	unicode/normalizer2.h	/^    quickCheck(const UnicodeString &s, UErrorCode &errorCode) const = 0;$/;"	p	class:Normalizer2	access:public	signature:(const UnicodeString &s, UErrorCode &errorCode) const
quickCheck	unicode/normalizer2.h	/^    quickCheck(const UnicodeString &s, UErrorCode &errorCode) const;$/;"	p	class:FilteredNormalizer2	access:public	signature:(const UnicodeString &s, UErrorCode &errorCode) const
quickCheck	unicode/normlzr.h	/^  quickCheck(const UnicodeString &source, UNormalizationMode mode, UErrorCode &status);$/;"	p	class:Normalizer	access:public	signature:(const UnicodeString &source, UNormalizationMode mode, UErrorCode &status)
quickCheck	unicode/normlzr.h	/^  quickCheck(const UnicodeString &source, UNormalizationMode mode, int32_t options, UErrorCode &status);$/;"	p	class:Normalizer	access:public	signature:(const UnicodeString &source, UNormalizationMode mode, int32_t options, UErrorCode &status)
quickCheck	unicode/normlzr.h	/^Normalizer::quickCheck(const UnicodeString& source,$/;"	f	class:Normalizer	signature:(const UnicodeString& source, UNormalizationMode mode, UErrorCode &status)
quickSort	uarrsort.c	/^quickSort(char *array, int32_t length, int32_t itemSize,$/;"	f	file:	signature:(char *array, int32_t length, int32_t itemSize, UComparator *cmp, const void *context, UErrorCode *pErrorCode)
quoteOne	ucnvscsu.c	/^    quoteOne,$/;"	e	enum:__anon154	file:
quotePairOne	ucnvscsu.c	/^    quotePairOne,$/;"	e	enum:__anon154	file:
quotePairTwo	ucnvscsu.c	/^    quotePairTwo,$/;"	e	enum:__anon154	file:
r	unicode/utext.h	/^    const void     *r;$/;"	m	struct:UText	access:public
range	unicode/usetiter.h	/^    int32_t range;$/;"	m	class:UnicodeSetIterator	access:protected
rangeHandler	normalizer2impl.cpp	/^    UBool rangeHandler(UChar32 start, UChar32 end, uint32_t value) {$/;"	f	class:CanonIterDataSingleton	access:public	signature:(UChar32 start, UChar32 end, uint32_t value)
rangeHandler	normalizer2impl.cpp	/^    UBool rangeHandler(UChar32 start, UChar32 end, uint32_t value) {$/;"	f	class:FCDTrieSingleton	access:public	signature:(UChar32 start, UChar32 end, uint32_t value)
rbbiLastAction	rbbirpt.h	/^    rbbiLastAction};$/;"	e	enum:RBBI_RuleParseAction
rbbiSymtablePrint	rbbirb.h	/^    virtual void      rbbiSymtablePrint() const;$/;"	p	class:RBBISymbolTable	access:public	signature:() const
rbbiSymtablePrint	rbbirb.h	88;"	d
rbbiSymtablePrint	rbbistbl.cpp	/^void RBBISymbolTable::rbbiSymtablePrint() const {$/;"	f	class:RBBISymbolTable	signature:() const
reInitializeFactories	serv.cpp	/^ICUService::reInitializeFactories() $/;"	f	class:ICUService	signature:()
readCommand	ucnvscsu.c	/^    readCommand,$/;"	e	enum:__anon154	file:
readNext	unorm_it.c	/^readNext(UNormIterator *uni, UCharIterator *iter) {$/;"	f	file:	signature:(UNormIterator *uni, UCharIterator *iter)
readPrevious	unorm_it.c	/^readPrevious(UNormIterator *uni, UCharIterator *iter) {$/;"	f	file:	signature:(UNormIterator *uni, UCharIterator *iter)
readUInt16	udataswp.h	/^    UDataReadUInt16 *readUInt16;$/;"	m	struct:UDataSwapper	access:public
readUInt32	udataswp.h	/^    UDataReadUInt32 *readUInt32;$/;"	m	struct:UDataSwapper	access:public
reallocArrays	unorm_it.c	/^reallocArrays(UNormIterator *uni, int32_t capacity, UBool addAtStart) {$/;"	f	file:	signature:(UNormIterator *uni, int32_t capacity, UBool addAtStart)
recompose	normalizer2impl.cpp	/^void Normalizer2Impl::recompose(ReorderingBuffer &buffer, int32_t recomposeStartIndex,$/;"	f	class:Normalizer2Impl	signature:(ReorderingBuffer &buffer, int32_t recomposeStartIndex, UBool onlyContiguous) const
recompose	normalizer2impl.h	/^    void recompose(ReorderingBuffer &buffer, int32_t recomposeStartIndex,$/;"	p	class:Normalizer2Impl	access:private	signature:(ReorderingBuffer &buffer, int32_t recomposeStartIndex, UBool onlyContiguous) const
reconstituteData	ucnvmbcs.c	/^reconstituteData(UConverterMBCSTable *mbcsTable,$/;"	f	file:	signature:(UConverterMBCSTable *mbcsTable, uint32_t stage1Length, uint32_t stage2Length, uint32_t fullStage2Length, UErrorCode *pErrorCode)
reconstitutedData	ucnvmbcs.h	/^    uint8_t *reconstitutedData;$/;"	m	struct:UConverterMBCSTable	access:public
recursionCount	umutex.c	/^    int32_t      recursionCount;    \/* For debugging, detect recursive mutex locks.    *\/$/;"	m	struct:ICUMutex	file:	access:public
ref	icuplug.c	/^  uint32_t ref;                        \/**< reference count *\/$/;"	m	struct:UPlugLibrary	file:	access:public
ref	serv.cpp	/^    CacheEntry* ref() {$/;"	f	class:CacheEntry	access:public	signature:()
refCount	sprpimpl.h	/^    int32_t refCount;$/;"	m	struct:UStringPrepProfile	access:public
refCount	unicode/unistr.h	/^  int32_t refCount(void) const;$/;"	p	class:UnicodeString	access:private	signature:(void) const
refCount	unistr.cpp	/^UnicodeString::refCount() const $/;"	f	class:UnicodeString	signature:() const
refcount	serv.cpp	/^    int32_t refcount;$/;"	m	class:CacheEntry	file:	access:private
referenceCounter	ucnv_bld.h	/^    uint32_t referenceCounter;      \/* used to count number of clients, 0xffffffff for static SharedData *\/$/;"	m	struct:UConverterSharedData	access:public
region	putil.c	/^    int32_t region;$/;"	m	struct:__anon42	file:	access:public
region	uloc_tag.c	/^    const char          *region;$/;"	m	struct:ULanguageTag	file:	access:public
regionMaps	locmap.c	/^    const struct ILcidPosixElement* const regionMaps;$/;"	m	struct:ILcidPosixMap	file:	access:public
registerFactory	serv.cpp	/^ICUService::registerFactory(ICUServiceFactory* factoryToAdopt, UErrorCode& status) $/;"	f	class:ICUService	signature:(ICUServiceFactory* factoryToAdopt, UErrorCode& status)
registerInstance	brkiter.cpp	/^BreakIterator::registerInstance(BreakIterator* toAdopt, const Locale& locale, UBreakIteratorType kind, UErrorCode& status)$/;"	f	class:BreakIterator	signature:(BreakIterator* toAdopt, const Locale& locale, UBreakIteratorType kind, UErrorCode& status)
registerInstance	serv.cpp	/^ICUService::registerInstance(UObject* objToAdopt, const UnicodeString& id, UBool visible, UErrorCode& status) $/;"	f	class:ICUService	signature:(UObject* objToAdopt, const UnicodeString& id, UBool visible, UErrorCode& status)
registerInstance	serv.cpp	/^ICUService::registerInstance(UObject* objToAdopt, const UnicodeString& id, UErrorCode& status) $/;"	f	class:ICUService	signature:(UObject* objToAdopt, const UnicodeString& id, UErrorCode& status)
registerInstance	servls.cpp	/^ICULocaleService::registerInstance(UObject* objToAdopt, const Locale& locale, UErrorCode& status)$/;"	f	class:ICULocaleService	signature:(UObject* objToAdopt, const Locale& locale, UErrorCode& status)
registerInstance	servls.cpp	/^ICULocaleService::registerInstance(UObject* objToAdopt, const Locale& locale, int32_t kind, UErrorCode& status)$/;"	f	class:ICULocaleService	signature:(UObject* objToAdopt, const Locale& locale, int32_t kind, UErrorCode& status)
registerInstance	servls.cpp	/^ICULocaleService::registerInstance(UObject* objToAdopt, const Locale& locale, int32_t kind, int32_t coverage, UErrorCode& status)$/;"	f	class:ICULocaleService	signature:(UObject* objToAdopt, const Locale& locale, int32_t kind, int32_t coverage, UErrorCode& status)
registerInstance	servls.cpp	/^ICULocaleService::registerInstance(UObject* objToAdopt, const UnicodeString& locale, $/;"	f	class:ICULocaleService	signature:(UObject* objToAdopt, const UnicodeString& locale, UBool visible, UErrorCode& status)
releaseArray	cmemory.h	/^    void releaseArray() {$/;"	f	class:MaybeStackArray	access:private	signature:()
releaseArray	unicode/unistr.h	/^  void releaseArray(void);$/;"	p	class:UnicodeString	access:private	signature:(void)
releaseArray	unistr.cpp	/^UnicodeString::releaseArray() {$/;"	f	class:UnicodeString	signature:()
releaseBuffer	unicode/unistr.h	/^  void releaseBuffer(int32_t newLength=-1);$/;"	p	class:UnicodeString	access:public	signature:(int32_t newLength=-1)
releaseBuffer	unistr.cpp	/^UnicodeString::releaseBuffer(int32_t newLength) {$/;"	f	class:UnicodeString	signature:(int32_t newLength)
releaseDataBlock	utrie2_builder.c	/^releaseDataBlock(UNewTrie2 *trie, int32_t block) {$/;"	f	file:	signature:(UNewTrie2 *trie, int32_t block)
releaseMemory	cmemory.h	/^    void releaseMemory() {$/;"	f	class:MaybeStackHeaderAndArray	access:private	signature:()
releasePattern	unicode/uniset.h	/^    void releasePattern();$/;"	p	class:UnicodeSet	access:private	signature:()
releasePattern	uniset.cpp	/^void UnicodeSet::releasePattern() {$/;"	f	class:UnicodeSet	signature:()
remainingCapacity	normalizer2impl.h	/^    int32_t remainingCapacity;$/;"	m	class:ReorderingBuffer	access:private
remapPlatformDependentCodepage	putil.c	/^remapPlatformDependentCodepage(const char *locale, const char *name) {$/;"	f	file:	signature:(const char *locale, const char *name)
remapShortTimeZone	putil.c	/^static const char* remapShortTimeZone(const char *stdID, const char *dstID, int32_t daylightType, int32_t offset)$/;"	f	file:	signature:(const char *stdID, const char *dstID, int32_t daylightType, int32_t offset)
remove	hash.h	/^    void* remove(const UnicodeString& key);$/;"	p	class:Hashtable	access:public	signature:(const UnicodeString& key)
remove	hash.h	/^inline void* Hashtable::remove(const UnicodeString& key) {$/;"	f	class:Hashtable	signature:(const UnicodeString& key)
remove	normalizer2impl.cpp	/^void ReorderingBuffer::remove() {$/;"	f	class:ReorderingBuffer	signature:()
remove	normalizer2impl.h	/^    void remove();$/;"	p	class:ReorderingBuffer	access:public	signature:()
remove	unicode/uniset.h	/^    UnicodeSet& remove(UChar32 c);$/;"	p	class:UnicodeSet	access:public	signature:(UChar32 c)
remove	unicode/uniset.h	/^    UnicodeSet& remove(const UnicodeString& s);$/;"	p	class:UnicodeSet	access:public	signature:(const UnicodeString& s)
remove	unicode/uniset.h	/^    virtual UnicodeSet& remove(UChar32 start, UChar32 end);$/;"	p	class:UnicodeSet	access:public	signature:(UChar32 start, UChar32 end)
remove	unicode/unistr.h	/^  inline UnicodeString& remove(int32_t start,$/;"	p	class:UnicodeString	access:public	signature:(int32_t start, int32_t length = (int32_t)INT32_MAX)
remove	unicode/unistr.h	/^  inline UnicodeString& remove(void);$/;"	p	class:UnicodeString	access:public	signature:(void)
remove	unicode/unistr.h	/^UnicodeString::remove()$/;"	f	class:UnicodeString	signature:()
remove	unicode/unistr.h	/^UnicodeString::remove(int32_t start,$/;"	f	class:UnicodeString	signature:(int32_t start, int32_t _length)
remove	uniset.cpp	/^UnicodeSet& UnicodeSet::remove(UChar32 c) {$/;"	f	class:UnicodeSet	signature:(UChar32 c)
remove	uniset.cpp	/^UnicodeSet& UnicodeSet::remove(UChar32 start, UChar32 end) {$/;"	f	class:UnicodeSet	signature:(UChar32 start, UChar32 end)
remove	uniset.cpp	/^UnicodeSet& UnicodeSet::remove(const UnicodeString& s) {$/;"	f	class:UnicodeSet	signature:(const UnicodeString& s)
remove	uset_imp.h	/^    USetRemove *remove;$/;"	m	struct:USetAdder	access:public
removeAll	hash.h	/^    void removeAll(void);$/;"	p	class:Hashtable	access:public	signature:(void)
removeAll	hash.h	/^inline void Hashtable::removeAll(void) {$/;"	f	class:Hashtable	signature:(void)
removeAll	unicode/uniset.h	/^    UnicodeSet& removeAll(const UnicodeString& s);$/;"	p	class:UnicodeSet	access:public	signature:(const UnicodeString& s)
removeAll	unicode/uniset.h	/^    virtual UnicodeSet& removeAll(const UnicodeSet& c);$/;"	p	class:UnicodeSet	access:public	signature:(const UnicodeSet& c)
removeAll	uniset.cpp	/^UnicodeSet& UnicodeSet::removeAll(const UnicodeSet& c) {$/;"	f	class:UnicodeSet	signature:(const UnicodeSet& c)
removeAll	uniset.cpp	/^UnicodeSet& UnicodeSet::removeAll(const UnicodeString& s) {$/;"	f	class:UnicodeSet	signature:(const UnicodeString& s)
removeAll	uvector.cpp	/^UBool UVector::removeAll(const UVector& other) {$/;"	f	class:UVector	signature:(const UVector& other)
removeAll	uvector.h	/^    UBool removeAll(const UVector& other);$/;"	p	class:UVector	access:public	signature:(const UVector& other)
removeAll	uvectr32.cpp	/^UBool UVector32::removeAll(const UVector32& other) {$/;"	f	class:UVector32	signature:(const UVector32& other)
removeAll	uvectr32.h	/^    UBool removeAll(const UVector32& other);$/;"	p	class:UVector32	access:public	signature:(const UVector32& other)
removeAllElements	uvector.cpp	/^void UVector::removeAllElements(void) {$/;"	f	class:UVector	signature:(void)
removeAllElements	uvector.h	/^    void removeAllElements();$/;"	p	class:UVector	access:public	signature:()
removeAllElements	uvectr32.cpp	/^void UVector32::removeAllElements(void) {$/;"	f	class:UVector32	signature:(void)
removeAllElements	uvectr32.h	/^    void removeAllElements();$/;"	p	class:UVector32	access:public	signature:()
removeAllElements	uvectr64.cpp	/^void UVector64::removeAllElements(void) {$/;"	f	class:UVector64	signature:(void)
removeAllElements	uvectr64.h	/^    void removeAllElements();$/;"	p	class:UVector64	access:public	signature:()
removeAllStrings	unicode/uniset.h	/^    virtual UnicodeSet &removeAllStrings();$/;"	p	class:UnicodeSet	access:public	signature:()
removeAllStrings	uniset.cpp	/^UnicodeSet& UnicodeSet::removeAllStrings() {$/;"	f	class:UnicodeSet	signature:()
removeBetween	unicode/unistr.h	/^  inline UnicodeString& removeBetween(int32_t start,$/;"	p	class:UnicodeString	access:public	signature:(int32_t start, int32_t limit = (int32_t)INT32_MAX)
removeBetween	unicode/unistr.h	/^UnicodeString::removeBetween(int32_t start,$/;"	f	class:UnicodeString	signature:(int32_t start, int32_t limit)
removeElement	uvector.cpp	/^UBool UVector::removeElement(void* obj) {$/;"	f	class:UVector	signature:(void* obj)
removeElement	uvector.h	/^    UBool removeElement(void* obj);$/;"	p	class:UVector	access:public	signature:(void* obj)
removeElementAt	uvector.cpp	/^void UVector::removeElementAt(int32_t index) {$/;"	f	class:UVector	signature:(int32_t index)
removeElementAt	uvector.h	/^    void removeElementAt(int32_t index);$/;"	p	class:UVector	access:public	signature:(int32_t index)
removeElementAt	uvectr32.cpp	/^void UVector32::removeElementAt(int32_t index) {$/;"	f	class:UVector32	signature:(int32_t index)
removeElementAt	uvectr32.h	/^    void removeElementAt(int32_t index);$/;"	p	class:UVector32	access:public	signature:(int32_t index)
removeListener	servnotf.cpp	/^ICUNotifier::removeListener(const EventListener *l, UErrorCode& status) $/;"	f	class:ICUNotifier	signature:(const EventListener *l, UErrorCode& status)
removeRange	uset_imp.h	/^    USetRemoveRange *removeRange;$/;"	m	struct:USetAdder	access:public
removeRef	unicode/unistr.h	/^  int32_t removeRef(void);$/;"	p	class:UnicodeString	access:private	signature:(void)
removeRef	unistr.cpp	/^UnicodeString::removeRef()$/;"	f	class:UnicodeString	signature:()
removeReference	rbbidata.cpp	/^void RBBIDataWrapper::removeReference() {$/;"	f	class:RBBIDataWrapper	signature:()
removeReference	rbbidata.h	/^    void                  removeReference();$/;"	p	class:RBBIDataWrapper	access:public	signature:()
removeSuffix	normalizer2impl.cpp	/^void ReorderingBuffer::removeSuffix(int32_t suffixLength) {$/;"	f	class:ReorderingBuffer	signature:(int32_t suffixLength)
removeSuffix	normalizer2impl.h	/^    void removeSuffix(int32_t suffixLength);$/;"	p	class:ReorderingBuffer	access:public	signature:(int32_t suffixLength)
remove_prefix	unicode/stringpiece.h	/^  void remove_prefix(int32_t n) {$/;"	f	class:StringPiece	access:public	signature:(int32_t n)
remove_suffix	unicode/stringpiece.h	/^  void remove_suffix(int32_t n) {$/;"	f	class:StringPiece	access:public	signature:(int32_t n)
removei	hash.h	/^    int32_t removei(const UnicodeString& key);$/;"	p	class:Hashtable	access:public	signature:(const UnicodeString& key)
removei	hash.h	/^inline int32_t Hashtable::removei(const UnicodeString& key) {$/;"	f	class:Hashtable	signature:(const UnicodeString& key)
reorderLine	ubidiln.c	/^reorderLine(UBiDi *pBiDi, UBiDiLevel minLevel, UBiDiLevel maxLevel) {$/;"	f	file:	signature:(UBiDi *pBiDi, UBiDiLevel minLevel, UBiDiLevel maxLevel)
reorderStart	normalizer2impl.h	/^    UChar *start, *reorderStart, *limit;$/;"	m	class:ReorderingBuffer	access:private
reorderingMode	ubidiimp.h	/^    UBiDiReorderingMode reorderingMode;$/;"	m	struct:UBiDi	access:public
reorderingOptions	ubidiimp.h	/^    uint32_t reorderingOptions;$/;"	m	struct:UBiDi	access:public
repFuncs	utext.cpp	/^static const struct UTextFuncs repFuncs = $/;"	v	typeref:struct:UTextFuncs	file:
repTextAccess	utext.cpp	/^repTextAccess(UText *ut, int64_t index, UBool forward) {$/;"	f	file:	signature:(UText *ut, int64_t index, UBool forward)
repTextClone	utext.cpp	/^repTextClone(UText *dest, const UText *src, UBool deep, UErrorCode *status) {$/;"	f	file:	signature:(UText *dest, const UText *src, UBool deep, UErrorCode *status)
repTextClose	utext.cpp	/^repTextClose(UText *ut) {$/;"	f	file:	signature:(UText *ut)
repTextCopy	utext.cpp	/^repTextCopy(UText *ut,$/;"	f	file:	signature:(UText *ut, int64_t start, int64_t limit, int64_t destIndex, UBool move, UErrorCode *status)
repTextExtract	utext.cpp	/^repTextExtract(UText *ut,$/;"	f	file:	signature:(UText *ut, int64_t start, int64_t limit, UChar *dest, int32_t destCapacity, UErrorCode *status)
repTextLength	utext.cpp	/^repTextLength(UText *ut) {$/;"	f	file:	signature:(UText *ut)
repTextReplace	utext.cpp	/^repTextReplace(UText *ut,$/;"	f	file:	signature:(UText *ut, int64_t start, int64_t limit, const UChar *src, int32_t length, UErrorCode *status)
replace	unicode/unistr.h	/^  UnicodeString& replace(int32_t start,$/;"	p	class:UnicodeString	access:public	signature:(int32_t start, int32_t length, const UChar *srcChars, int32_t srcStart, int32_t srcLength)
replace	unicode/unistr.h	/^  UnicodeString& replace(int32_t start,$/;"	p	class:UnicodeString	access:public	signature:(int32_t start, int32_t length, const UnicodeString& srcText)
replace	unicode/unistr.h	/^  UnicodeString& replace(int32_t start,$/;"	p	class:UnicodeString	access:public	signature:(int32_t start, int32_t length, const UnicodeString& srcText, int32_t srcStart, int32_t srcLength)
replace	unicode/unistr.h	/^  inline UnicodeString& replace(int32_t start,$/;"	p	class:UnicodeString	access:public	signature:(int32_t start, int32_t length, UChar srcChar)
replace	unicode/unistr.h	/^  inline UnicodeString& replace(int32_t start,$/;"	p	class:UnicodeString	access:public	signature:(int32_t start, int32_t length, UChar32 srcChar)
replace	unicode/unistr.h	/^  inline UnicodeString& replace(int32_t start,$/;"	p	class:UnicodeString	access:public	signature:(int32_t start, int32_t length, const UChar *srcChars, int32_t srcLength)
replace	unicode/unistr.h	/^UnicodeString::replace(int32_t start,$/;"	f	class:UnicodeString	signature:(int32_t start, int32_t _length, UChar srcChar)
replace	unicode/unistr.h	/^UnicodeString::replace(int32_t start,$/;"	f	class:UnicodeString	signature:(int32_t start, int32_t _length, UChar32 srcChar)
replace	unicode/unistr.h	/^UnicodeString::replace(int32_t start,$/;"	f	class:UnicodeString	signature:(int32_t start, int32_t _length, const UChar *srcChars, int32_t srcLength)
replace	unicode/unistr.h	/^UnicodeString::replace(int32_t start,$/;"	f	class:UnicodeString	signature:(int32_t start, int32_t _length, const UChar *srcChars, int32_t srcStart, int32_t srcLength)
replace	unicode/unistr.h	/^UnicodeString::replace(int32_t start,$/;"	f	class:UnicodeString	signature:(int32_t start, int32_t _length, const UnicodeString& srcText)
replace	unicode/unistr.h	/^UnicodeString::replace(int32_t start,$/;"	f	class:UnicodeString	signature:(int32_t start, int32_t _length, const UnicodeString& srcText, int32_t srcStart, int32_t srcLength)
replace	unicode/urep.h	/^    void    (*replace)(UReplaceable* rep,$/;"	m	struct:UReplaceableCallbacks	access:public
replace	unicode/utext.h	/^    UTextReplace *replace;$/;"	m	struct:UTextFuncs	access:public
replaceBetween	unicode/unistr.h	/^  inline UnicodeString& replaceBetween(int32_t start,$/;"	p	class:UnicodeString	access:public	signature:(int32_t start, int32_t limit, const UnicodeString& srcText)
replaceBetween	unicode/unistr.h	/^  inline UnicodeString& replaceBetween(int32_t start,$/;"	p	class:UnicodeString	access:public	signature:(int32_t start, int32_t limit, const UnicodeString& srcText, int32_t srcStart, int32_t srcLimit)
replaceBetween	unicode/unistr.h	/^UnicodeString::replaceBetween(int32_t start,$/;"	f	class:UnicodeString	signature:(int32_t start, int32_t limit, const UnicodeString& srcText)
replaceBetween	unicode/unistr.h	/^UnicodeString::replaceBetween(int32_t start,$/;"	f	class:UnicodeString	signature:(int32_t start, int32_t limit, const UnicodeString& srcText, int32_t srcStart, int32_t srcLimit)
replaceLabel	uts46.cpp	/^replaceLabel(UnicodeString &dest, int32_t destLabelStart, int32_t destLabelLength,$/;"	f	file:	signature:(UnicodeString &dest, int32_t destLabelStart, int32_t destLabelLength, const UnicodeString &label, int32_t labelLength)
replaceableIterator	uiter.cpp	/^static const UCharIterator replaceableIterator={$/;"	v	file:
replaceableIteratorCurrent	uiter.cpp	/^replaceableIteratorCurrent(UCharIterator *iter) {$/;"	f	file:	signature:(UCharIterator *iter)
replaceableIteratorNext	uiter.cpp	/^replaceableIteratorNext(UCharIterator *iter) {$/;"	f	file:	signature:(UCharIterator *iter)
replaceableIteratorPrevious	uiter.cpp	/^replaceableIteratorPrevious(UCharIterator *iter) {$/;"	f	file:	signature:(UCharIterator *iter)
resFlags	uresdata.c	/^    uint32_t *resFlags;$/;"	m	struct:TempTable	file:	access:public
res_countArrayItems	unicode/urename.h	201;"	d
res_countArrayItems	uresdata.c	/^res_countArrayItems(const ResourceData *pResData, Resource res) {$/;"	f	signature:(const ResourceData *pResData, Resource res)
res_countArrayItems	uresdata.h	/^res_countArrayItems(const ResourceData *pResData, Resource res);$/;"	p	signature:(const ResourceData *pResData, Resource res)
res_findResource	unicode/urename.h	202;"	d
res_findResource	uresdata.c	/^res_findResource(const ResourceData *pResData, Resource r, char** path, const char** key) {$/;"	f	signature:(const ResourceData *pResData, Resource r, char** path, const char** key)
res_findResource	uresdata.h	/^U_CFUNC Resource res_findResource(const ResourceData *pResData, Resource r, char** path, const char** key);$/;"	p	signature:(const ResourceData *pResData, Resource r, char** path, const char** key)
res_getAlias	unicode/urename.h	203;"	d
res_getAlias	uresdata.c	/^res_getAlias(const ResourceData *pResData, Resource res, int32_t *pLength) {$/;"	f	signature:(const ResourceData *pResData, Resource res, int32_t *pLength)
res_getAlias	uresdata.h	/^res_getAlias(const ResourceData *pResData, Resource res, int32_t *pLength);$/;"	p	signature:(const ResourceData *pResData, Resource res, int32_t *pLength)
res_getArrayItem	unicode/urename.h	204;"	d
res_getArrayItem	uresdata.c	/^res_getArrayItem(const ResourceData *pResData, Resource array, int32_t indexR) {$/;"	f	signature:(const ResourceData *pResData, Resource array, int32_t indexR)
res_getArrayItem	uresdata.h	/^res_getArrayItem(const ResourceData *pResData, Resource array, int32_t indexS);$/;"	p	signature:(const ResourceData *pResData, Resource array, int32_t indexS)
res_getBinary	unicode/urename.h	205;"	d
res_getBinary	uresdata.c	/^res_getBinary(const ResourceData *pResData, Resource res, int32_t *pLength) {$/;"	f	signature:(const ResourceData *pResData, Resource res, int32_t *pLength)
res_getBinary	uresdata.h	/^res_getBinary(const ResourceData *pResData, Resource res, int32_t *pLength);$/;"	p	signature:(const ResourceData *pResData, Resource res, int32_t *pLength)
res_getIntVector	unicode/urename.h	206;"	d
res_getIntVector	uresdata.c	/^res_getIntVector(const ResourceData *pResData, Resource res, int32_t *pLength) {$/;"	f	signature:(const ResourceData *pResData, Resource res, int32_t *pLength)
res_getIntVector	uresdata.h	/^res_getIntVector(const ResourceData *pResData, Resource res, int32_t *pLength);$/;"	p	signature:(const ResourceData *pResData, Resource res, int32_t *pLength)
res_getPublicType	unicode/urename.h	207;"	d
res_getPublicType	uresdata.c	/^res_getPublicType(Resource res) {$/;"	f	signature:(Resource res)
res_getPublicType	uresdata.h	/^res_getPublicType(Resource res);$/;"	p	signature:(Resource res)
res_getResource	unicode/urename.h	208;"	d
res_getResource	uresdata.c	/^res_getResource(const ResourceData *pResData, const char *key) {$/;"	f	signature:(const ResourceData *pResData, const char *key)
res_getResource	uresdata.h	/^res_getResource(const ResourceData *pResData, const char *key);$/;"	p	signature:(const ResourceData *pResData, const char *key)
res_getString	unicode/urename.h	209;"	d
res_getString	uresdata.c	/^res_getString(const ResourceData *pResData, Resource res, int32_t *pLength) {$/;"	f	signature:(const ResourceData *pResData, Resource res, int32_t *pLength)
res_getString	uresdata.h	/^res_getString(const ResourceData *pResData, Resource res, int32_t *pLength);$/;"	p	signature:(const ResourceData *pResData, Resource res, int32_t *pLength)
res_getTableItemByIndex	unicode/urename.h	210;"	d
res_getTableItemByIndex	uresdata.c	/^res_getTableItemByIndex(const ResourceData *pResData, Resource table,$/;"	f	signature:(const ResourceData *pResData, Resource table, int32_t indexR, const char **key)
res_getTableItemByIndex	uresdata.h	/^res_getTableItemByIndex(const ResourceData *pResData, Resource table, int32_t indexS, const char ** key);$/;"	p	signature:(const ResourceData *pResData, Resource table, int32_t indexS, const char ** key)
res_getTableItemByKey	unicode/urename.h	211;"	d
res_getTableItemByKey	uresdata.c	/^res_getTableItemByKey(const ResourceData *pResData, Resource table,$/;"	f	signature:(const ResourceData *pResData, Resource table, int32_t *indexR, const char **key)
res_getTableItemByKey	uresdata.h	/^res_getTableItemByKey(const ResourceData *pResData, Resource table, int32_t *indexS, const char* * key);$/;"	p	signature:(const ResourceData *pResData, Resource table, int32_t *indexS, const char* * key)
res_init	uresdata.c	/^res_init(ResourceData *pResData,$/;"	f	file:	signature:(ResourceData *pResData, UVersionInfo formatVersion, const void *inBytes, int32_t length, UErrorCode *errorCode)
res_load	unicode/urename.h	212;"	d
res_load	uresdata.c	/^res_load(ResourceData *pResData,$/;"	f	signature:(ResourceData *pResData, const char *path, const char *name, UErrorCode *errorCode)
res_load	uresdata.h	/^res_load(ResourceData *pResData,$/;"	p	signature:(ResourceData *pResData, const char *path, const char *name, UErrorCode *errorCode)
res_read	unicode/urename.h	213;"	d
res_read	uresdata.c	/^res_read(ResourceData *pResData,$/;"	f	signature:(ResourceData *pResData, const UDataInfo *pInfo, const void *inBytes, int32_t length, UErrorCode *errorCode)
res_read	uresdata.h	/^res_read(ResourceData *pResData,$/;"	p	signature:(ResourceData *pResData, const UDataInfo *pInfo, const void *inBytes, int32_t length, UErrorCode *errorCode)
res_unload	unicode/urename.h	214;"	d
res_unload	uresdata.c	/^res_unload(ResourceData *pResData) {$/;"	f	signature:(ResourceData *pResData)
res_unload	uresdata.h	/^res_unload(ResourceData *pResData);$/;"	p	signature:(ResourceData *pResData)
resbMutex	uresbund.c	/^static UMTX resbMutex = NULL;$/;"	v	file:
resemblesPattern	unicode/uniset.h	/^    static UBool resemblesPattern(const UnicodeString& pattern,$/;"	p	class:UnicodeSet	access:public	signature:(const UnicodeString& pattern, int32_t pos)
resemblesPattern	uniset_props.cpp	/^UBool UnicodeSet::resemblesPattern(const UnicodeString& pattern, int32_t pos) {$/;"	f	class:UnicodeSet	signature:(const UnicodeString& pattern, int32_t pos)
resemblesPropertyPattern	unicode/uniset.h	/^    static UBool resemblesPropertyPattern(RuleCharacterIterator& chars,$/;"	p	class:UnicodeSet	access:private	signature:(RuleCharacterIterator& chars, int32_t iterOpts)
resemblesPropertyPattern	unicode/uniset.h	/^    static UBool resemblesPropertyPattern(const UnicodeString& pattern,$/;"	p	class:UnicodeSet	access:private	signature:(const UnicodeString& pattern, int32_t pos)
resemblesPropertyPattern	uniset_props.cpp	/^UBool UnicodeSet::resemblesPropertyPattern(RuleCharacterIterator& chars,$/;"	f	class:UnicodeSet	signature:(RuleCharacterIterator& chars, int32_t iterOpts)
resemblesPropertyPattern	uniset_props.cpp	/^UBool UnicodeSet::resemblesPropertyPattern(const UnicodeString& pattern,$/;"	f	class:UnicodeSet	signature:(const UnicodeString& pattern, int32_t pos)
reserveBlock	uvectr32.h	/^    int32_t *reserveBlock(int32_t size, UErrorCode &status);$/;"	p	class:UVector32	access:public	signature:(int32_t size, UErrorCode &status)
reserveBlock	uvectr32.h	/^inline int32_t *UVector32::reserveBlock(int32_t size, UErrorCode &status) {$/;"	f	class:UVector32	signature:(int32_t size, UErrorCode &status)
reserveBlock	uvectr64.h	/^    int64_t *reserveBlock(int32_t size, UErrorCode &status);$/;"	p	class:UVector64	access:public	signature:(int32_t size, UErrorCode &status)
reserveBlock	uvectr64.h	/^inline int64_t *UVector64::reserveBlock(int32_t size, UErrorCode &status) {$/;"	f	class:UVector64	signature:(int32_t size, UErrorCode &status)
reserved	ucmndata.c	/^    uint32_t          reserved;$/;"	m	struct:__anon28	file:	access:public
reserved	ucnv_bld.h	/^    uint8_t reserved[19];           \/* +81: 19 to round out the structure *\/$/;"	m	struct:UConverterStaticData	access:public
reserved	ucnv_cnv.h	/^    int16_t reserved;           \/* reserved - for good alignment of the pointers *\/$/;"	m	struct:__anon9	access:public
reserved0	ucnv_cnv.h	/^    UBool reserved0;            \/* reserved - for good alignment of the pointers *\/$/;"	m	struct:__anon9	access:public
reserved1	unicode/utext.h	/^    int32_t       reserved1, \/** @internal *\/ reserved2, \/** @internal *\/ reserved3;$/;"	m	struct:UTextFuncs	access:public
reserved2	unicode/utext.h	/^    int32_t       reserved1, \/** @internal *\/ reserved2, \/** @internal *\/ reserved3;$/;"	m	struct:UTextFuncs	access:public
reserved3	unicode/utext.h	/^    int32_t       reserved1, \/** @internal *\/ reserved2, \/** @internal *\/ reserved3;$/;"	m	struct:UTextFuncs	access:public
reservedB3	unicode/uidna.h	/^    UBool reservedB3;  \/**< Reserved field, do not use. @internal *\/$/;"	m	struct:UIDNAInfo	access:public
reservedByte	unicode/udata.h	/^    uint8_t reservedByte;$/;"	m	struct:__anon114	access:public
reservedField	unicode/uiter.h	/^    int32_t reservedField;$/;"	m	struct:UCharIterator	access:public
reservedFn	unicode/uiter.h	/^    UCharIteratorReserved *reservedFn;$/;"	m	struct:UCharIterator	access:public
reservedI2	unicode/uidna.h	/^    int32_t reservedI2;  \/**< Reserved field, do not use. @internal *\/$/;"	m	struct:UIDNAInfo	access:public
reservedI3	unicode/uidna.h	/^    int32_t reservedI3;  \/**< Reserved field, do not use. @internal *\/$/;"	m	struct:UIDNAInfo	access:public
reservedStart	ucnvscsu.c	/^    reservedStart=0xA8,$/;"	e	enum:__anon153	file:
reservedWord	unicode/udata.h	/^    uint16_t reservedWord;$/;"	m	struct:__anon114	access:public
reset	caniter.cpp	/^void CanonicalIterator::reset() {$/;"	f	class:CanonicalIterator	signature:()
reset	errorcode.cpp	/^UErrorCode ErrorCode::reset() {$/;"	f	class:ErrorCode	signature:()
reset	locid.cpp	/^    virtual void reset(UErrorCode& \/*status*\/) {$/;"	f	class:KeywordEnumeration	access:public	signature:(UErrorCode& )
reset	mutex.cpp	/^void TriStateSingleton::reset() {$/;"	f	class:TriStateSingleton	signature:()
reset	mutex.h	/^    void reset() { fInstance=NULL; }$/;"	f	struct:SimpleSingleton	access:public	signature:()
reset	mutex.h	/^    void reset();$/;"	p	struct:TriStateSingleton	access:public	signature:()
reset	normlzr.cpp	/^void Normalizer::reset() {$/;"	f	class:Normalizer	signature:()
reset	rbbi.cpp	/^RuleBasedBreakIterator::reset()$/;"	f	class:RuleBasedBreakIterator	signature:()
reset	serv.cpp	/^ICUService::reset() $/;"	f	class:ICUService	signature:()
reset	servls.cpp	/^    virtual void reset(UErrorCode& status) {$/;"	f	class:ServiceEnumeration	access:public	signature:(UErrorCode& status)
reset	triedict.cpp	/^    virtual void reset(UErrorCode &status) {$/;"	f	class:CompactTrieEnumeration	access:public	signature:(UErrorCode &status)
reset	triedict.cpp	/^    virtual void reset(UErrorCode &status) {$/;"	f	class:MutableTrieEnumeration	access:public	signature:(UErrorCode &status)
reset	ucnv_cnv.h	/^    UConverterReset reset;$/;"	m	struct:UConverterImpl	access:public
reset	uenumimp.h	/^    UEnumReset *reset;$/;"	m	struct:UEnumeration	access:public
reset	unicode/caniter.h	/^    void reset();$/;"	p	class:CanonicalIterator	access:public	signature:()
reset	unicode/errorcode.h	/^    UErrorCode reset();$/;"	p	class:ErrorCode	access:public	signature:()
reset	unicode/idna.h	/^    void reset() {$/;"	f	class:IDNAInfo	access:private	signature:()
reset	unicode/normlzr.h	/^  void                reset(void);$/;"	p	class:Normalizer	access:public	signature:(void)
reset	unicode/rbbi.h	/^    virtual void reset(void);$/;"	p	class:RuleBasedBreakIterator	access:protected	signature:(void)
reset	unicode/strenum.h	/^    virtual void reset(UErrorCode& status) = 0;$/;"	p	class:StringEnumeration	access:public	signature:(UErrorCode& status)
reset	unicode/usetiter.h	/^    void reset();$/;"	p	class:UnicodeSetIterator	access:public	signature:()
reset	unicode/usetiter.h	/^    void reset(const UnicodeSet& set);$/;"	p	class:UnicodeSetIterator	access:public	signature:(const UnicodeSet& set)
reset	usetiter.cpp	/^void UnicodeSetIterator::reset() {$/;"	f	class:UnicodeSetIterator	signature:()
reset	usetiter.cpp	/^void UnicodeSetIterator::reset(const UnicodeSet& uSet) {$/;"	f	class:UnicodeSetIterator	signature:(const UnicodeSet& uSet)
reset	ustrenum.cpp	/^void UStringEnumeration::reset(UErrorCode& status) {$/;"	f	class:UStringEnumeration	signature:(UErrorCode& status)
reset	ustrenum.h	/^    virtual void reset(UErrorCode& status);$/;"	p	class:UStringEnumeration	access:public	signature:(UErrorCode& status)
resetIterator	resbund.cpp	/^void ResourceBundle::resetIterator(void) {$/;"	f	class:ResourceBundle	signature:(void)
resetIterator	unicode/resbund.h	/^      resetIterator(void);$/;"	p	class:ResourceBundle	access:public	signature:(void)
resetToDefaultToUnicode	ucnvisci.c	/^    UBool resetToDefaultToUnicode;      \/* boolean for reseting to default delta and mask when a newline is encountered*\/$/;"	m	struct:__anon16	file:	access:public
resize	cmemory.h	/^    inline H *resize(int32_t newCapacity, int32_t length=0);$/;"	p	class:MaybeStackHeaderAndArray	access:public	signature:(int32_t newCapacity, int32_t length=0)
resize	cmemory.h	/^    inline T *resize(int32_t newCapacity, int32_t length=0);$/;"	p	class:MaybeStackArray	access:public	signature:(int32_t newCapacity, int32_t length=0)
resize	cmemory.h	/^inline H *MaybeStackHeaderAndArray<H, T, stackCapacity>::resize(int32_t newCapacity,$/;"	f	class:MaybeStackHeaderAndArray	signature:(int32_t newCapacity, int32_t length)
resize	cmemory.h	/^inline T *MaybeStackArray<T, stackCapacity>::resize(int32_t newCapacity, int32_t length) {$/;"	f	class:MaybeStackArray	signature:(int32_t newCapacity, int32_t length)
resize	normalizer2impl.cpp	/^UBool ReorderingBuffer::resize(int32_t appendLength, UErrorCode &errorCode) {$/;"	f	class:ReorderingBuffer	signature:(int32_t appendLength, UErrorCode &errorCode)
resize	normalizer2impl.h	/^    UBool resize(int32_t appendLength, UErrorCode &errorCode);$/;"	p	class:ReorderingBuffer	access:private	signature:(int32_t appendLength, UErrorCode &errorCode)
resolveExplicitLevels	ubidi.c	/^resolveExplicitLevels(UBiDi *pBiDi) {$/;"	f	file:	signature:(UBiDi *pBiDi)
resolveImplicitLevels	ubidi.c	/^resolveImplicitLevels(UBiDi *pBiDi,$/;"	f	file:	signature:(UBiDi *pBiDi, int32_t start, int32_t limit, DirProp sor, DirProp eor)
resort	ucnv_io.c	/^    uint16_t *resort;$/;"	m	struct:TempAliasTable	file:	access:public
resort	uresdata.c	/^    int32_t *resort;$/;"	m	struct:TempTable	file:	access:public
resultLength	ubidiimp.h	/^    int32_t resultLength;$/;"	m	struct:UBiDi	access:public
retain	unicode/uniset.h	/^    UnicodeSet& retain(UChar32 c);$/;"	p	class:UnicodeSet	access:public	signature:(UChar32 c)
retain	unicode/uniset.h	/^    virtual UnicodeSet& retain(UChar32 start, UChar32 end);$/;"	p	class:UnicodeSet	access:public	signature:(UChar32 start, UChar32 end)
retain	unicode/uniset.h	/^    void retain(const UChar32* other, int32_t otherLen, int8_t polarity);$/;"	p	class:UnicodeSet	access:private	signature:(const UChar32* other, int32_t otherLen, int8_t polarity)
retain	uniset.cpp	/^UnicodeSet& UnicodeSet::retain(UChar32 c) {$/;"	f	class:UnicodeSet	signature:(UChar32 c)
retain	uniset.cpp	/^UnicodeSet& UnicodeSet::retain(UChar32 start, UChar32 end) {$/;"	f	class:UnicodeSet	signature:(UChar32 start, UChar32 end)
retain	uniset.cpp	/^void UnicodeSet::retain(const UChar32* other, int32_t otherLen, int8_t polarity) {$/;"	f	class:UnicodeSet	signature:(const UChar32* other, int32_t otherLen, int8_t polarity)
retainAll	unicode/uniset.h	/^    UnicodeSet& retainAll(const UnicodeString& s);$/;"	p	class:UnicodeSet	access:public	signature:(const UnicodeString& s)
retainAll	unicode/uniset.h	/^    virtual UnicodeSet& retainAll(const UnicodeSet& c);$/;"	p	class:UnicodeSet	access:public	signature:(const UnicodeSet& c)
retainAll	uniset.cpp	/^UnicodeSet& UnicodeSet::retainAll(const UnicodeSet& c) {$/;"	f	class:UnicodeSet	signature:(const UnicodeSet& c)
retainAll	uniset.cpp	/^UnicodeSet& UnicodeSet::retainAll(const UnicodeString& s) {$/;"	f	class:UnicodeSet	signature:(const UnicodeString& s)
retainAll	uvector.cpp	/^UBool UVector::retainAll(const UVector& other) {$/;"	f	class:UVector	signature:(const UVector& other)
retainAll	uvector.h	/^    UBool retainAll(const UVector& other);$/;"	p	class:UVector	access:public	signature:(const UVector& other)
retainAll	uvectr32.cpp	/^UBool UVector32::retainAll(const UVector32& other) {$/;"	f	class:UVector32	signature:(const UVector32& other)
retainAll	uvectr32.h	/^    UBool retainAll(const UVector32& other);$/;"	p	class:UVector32	access:public	signature:(const UVector32& other)
retainBetween	unicode/unistr.h	/^  inline UnicodeString &retainBetween(int32_t start, int32_t limit = INT32_MAX);$/;"	p	class:UnicodeString	access:public	signature:(int32_t start, int32_t limit = INT32_MAX)
retainBetween	unicode/unistr.h	/^UnicodeString::retainBetween(int32_t start, int32_t limit) {$/;"	f	class:UnicodeString	signature:(int32_t start, int32_t limit)
reverse	unicode/unistr.h	/^  inline UnicodeString& reverse(int32_t start,$/;"	p	class:UnicodeString	access:public	signature:(int32_t start, int32_t length)
reverse	unicode/unistr.h	/^  inline UnicodeString& reverse(void);$/;"	p	class:UnicodeString	access:public	signature:(void)
reverse	unicode/unistr.h	/^UnicodeString::reverse()$/;"	f	class:UnicodeString	signature:()
reverse	unicode/unistr.h	/^UnicodeString::reverse(int32_t start,$/;"	f	class:UnicodeString	signature:(int32_t start, int32_t _length)
root	triedict.cpp	/^    uint16_t        root;           \/\/ Node number of the root node$/;"	m	struct:CompactTrieHeader	file:	access:public
rootRes	uresdata.h	/^    Resource rootRes;$/;"	m	struct:__anon12	access:public
rows	propsvec.c	/^    int32_t rows;$/;"	m	struct:UPropsVectors	file:	access:public
rows	ucnv_io.c	/^    TempRow *rows;$/;"	m	struct:TempAliasTable	file:	access:public
rows	uresdata.c	/^    Row *rows;$/;"	m	struct:TempTable	file:	access:public
runCount	ubidiimp.h	/^    int32_t runCount;     \/* ==-1: runs not set up yet *\/$/;"	m	struct:UBiDi	access:public
runLevel	ubidi.c	/^    UBiDiLevel runLevel;                \/* run level before implicit solving *\/$/;"	m	struct:__anon18	file:	access:public
runs	ubidiimp.h	/^    Run *runs;$/;"	m	struct:UBiDi	access:public
runsMemory	ubidiimp.h	/^    Run *runsMemory;$/;"	m	struct:UBiDi	access:public
runsMemory	ubidiimp.h	/^    Run *runsMemory;$/;"	m	union:__anon85	access:public
runsSize	ubidiimp.h	/^    int32_t dirPropsSize, levelsSize, parasSize, runsSize;$/;"	m	struct:UBiDi	access:public
s	ubidi.c	1146;"	d	file:
s	ubidi.c	816;"	d	file:
s	ubidi.c	886;"	d	file:
s	ubidi.c	911;"	d	file:
s	unormcmp.cpp	/^    const UChar *start, *s, *limit;$/;"	m	struct:CmpEquivLevel	file:	access:public
s	ustrcase.c	/^    const UChar *start, *s, *limit;$/;"	m	struct:CmpEquivLevel	file:	access:public
s	utext.cpp	/^    UChar s[REP_TEXT_CHUNK_SIZE+1];$/;"	m	struct:ReplExtra	file:	access:public
safeClone	ucnv_cnv.h	/^    UConverterSafeClone safeClone;$/;"	m	struct:UConverterImpl	access:public
sameScript	usc_impl.c	/^sameScript(UScriptCode scriptOne, UScriptCode scriptTwo)$/;"	f	file:	signature:(UScriptCode scriptOne, UScriptCode scriptTwo)
sawBOF	rbbisetb.cpp	/^UBool  RBBISetBuilder::sawBOF() const {$/;"	f	class:RBBISetBuilder	signature:() const
sawBOF	rbbisetb.h	/^    UBool    sawBOF() const;                 \/\/ Indicate whether any references to the {bof} pseudo$/;"	p	class:RBBISetBuilder	access:public	signature:() const
sbcsIndex	ucnvmbcs.h	/^    uint16_t sbcsIndex[SBCS_FAST_LIMIT>>6]; \/* for fast conversion from low BMP to SBCS (utf8Friendly data) *\/$/;"	m	struct:UConverterMBCSTable	access:public
scanSet	rbbiscan.cpp	/^void RBBIRuleScanner::scanSet() {$/;"	f	class:RBBIRuleScanner	signature:()
scanSet	rbbiscan.h	/^    void        scanSet();$/;"	p	class:RBBIRuleScanner	access:private	signature:()
script	putil.c	/^    int32_t script;$/;"	m	struct:__anon42	file:	access:public
script	uloc_tag.c	/^    const char          *script;$/;"	m	struct:ULanguageTag	file:	access:public
script	unicode/locid.h	/^    char script[ULOC_SCRIPT_CAPACITY];$/;"	m	class:Locale	access:private
scriptCode	usc_impl.c	/^    UScriptCode scriptCode;$/;"	m	struct:ParenStackEntry	file:	access:public
scriptCode	usc_impl.c	/^    UScriptCode scriptCode;$/;"	m	struct:UScriptRun	file:	access:public
scriptExtensions	uchar_props_data.c	/^static const uint16_t scriptExtensions[40]={$/;"	v	file:
scriptExtensionsFilter	uniset_props.cpp	/^static UBool scriptExtensionsFilter(UChar32 ch, void* context) {$/;"	f	file:	signature:(UChar32 ch, void* context)
scriptLimit	usc_impl.c	/^    int32_t scriptLimit;$/;"	m	struct:UScriptRun	file:	access:public
scriptStart	usc_impl.c	/^    int32_t scriptStart;$/;"	m	struct:UScriptRun	file:	access:public
search	triedict.cpp	/^MutableTrieDictionary::search( UText *text,$/;"	f	class:MutableTrieDictionary	signature:( UText *text, int32_t maxLength, int32_t *lengths, int &count, int limit, TernaryNode *&parent, UBool &pMatched ) const
search	triedict.h	/^  virtual int32_t search( UText *text,$/;"	p	class:MutableTrieDictionary	access:protected	signature:( UText *text, int32_t maxLength, int32_t *lengths, int &count, int limit, TernaryNode *&parent, UBool &pMatched ) const
search	ustack.cpp	/^int32_t UStack::search(void* obj) const {$/;"	f	class:UStack	signature:(void* obj) const
search	uvector.h	/^    int32_t search(void* obj) const;$/;"	p	class:UStack	access:public	signature:(void* obj) const
searchForLibrary	icuplug.c	/^static int32_t searchForLibrary(void *lib) {$/;"	f	file:	signature:(void *lib)
searchForLibraryName	icuplug.c	/^static int32_t searchForLibraryName(const char *libName) {$/;"	f	file:	signature:(const char *libName)
searchForTZFile	putil.c	/^static char* searchForTZFile(const char* path, DefaultTZInfo* tzInfo) {$/;"	f	file:	signature:(const char* path, DefaultTZInfo* tzInfo)
segmentStarterMapper	normalizer2impl.cpp	/^segmentStarterMapper(const void * \/*context*\/, uint32_t value) {$/;"	f	file:	signature:(const void * , uint32_t value)
sel	ucnvsel.cpp	/^  const UConverterSelector* sel;$/;"	m	struct:Enumerator	file:	access:public
selectForMask	ucnvsel.cpp	/^static UEnumeration *selectForMask(const UConverterSelector* sel,$/;"	f	file:	signature:(const UConverterSelector* sel, uint32_t *mask, UErrorCode *status)
serialize	unicode/uniset.h	/^    int32_t serialize(uint16_t *dest, int32_t destCapacity, UErrorCode& ec) const;$/;"	p	class:UnicodeSet	access:public	signature:(uint16_t *dest, int32_t destCapacity, UErrorCode& ec) const
serialize	uniset.cpp	/^int32_t UnicodeSet::serialize(uint16_t *dest, int32_t destCapacity, UErrorCode& ec) const {$/;"	f	class:UnicodeSet	signature:(uint16_t *dest, int32_t destCapacity, UErrorCode& ec) const
serializeTrie	rbbisetb.cpp	/^void RBBISetBuilder::serializeTrie(uint8_t *where) {$/;"	f	class:RBBISetBuilder	signature:(uint8_t *where)
serializeTrie	rbbisetb.h	/^    void     serializeTrie(uint8_t *where);  \/\/ write out the serialized Trie.$/;"	p	class:RBBISetBuilder	access:public	signature:(uint8_t *where)
service	serv.cpp	/^    UObject* service;$/;"	m	class:CacheEntry	file:	access:public
service_cleanup	locutil.cpp	/^static UBool U_CALLCONV service_cleanup(void) {$/;"	f	file:	signature:(void)
set	stringpiece.cpp	/^void StringPiece::set(const char* str) {$/;"	f	class:StringPiece	signature:(const char* str)
set	unicode/errorcode.h	/^    void set(UErrorCode value) { errorCode=value; }$/;"	f	class:ErrorCode	access:public	signature:(UErrorCode value)
set	unicode/normalizer2.h	/^    const UnicodeSet &set;$/;"	m	class:FilteredNormalizer2	access:private
set	unicode/stringpiece.h	/^  void set(const char* data, int32_t len) { ptr_ = data; length_ = len; }$/;"	f	class:StringPiece	access:public	signature:(const char* data, int32_t len)
set	unicode/stringpiece.h	/^  void set(const char* str);$/;"	p	class:StringPiece	access:public	signature:(const char* str)
set	unicode/uniset.h	/^    UnicodeSet& set(UChar32 start, UChar32 end);$/;"	p	class:UnicodeSet	access:public	signature:(UChar32 start, UChar32 end)
set	unicode/usetiter.h	/^    const UnicodeSet* set;$/;"	m	class:UnicodeSetIterator	access:protected
set	uniset.cpp	/^UnicodeSet& UnicodeSet::set(UChar32 start, UChar32 end) {$/;"	f	class:UnicodeSet	signature:(UChar32 start, UChar32 end)
set	uset_imp.h	/^    USet *set;$/;"	m	struct:USetAdder	access:public
set32	utrie2_builder.c	/^set32(UNewTrie2 *trie,$/;"	f	file:	signature:(UNewTrie2 *trie, UChar32 c, UBool forLSCP, uint32_t value, UErrorCode *pErrorCode)
set32x64Bits	bmpset.cpp	/^static void set32x64Bits(uint32_t table[64], int32_t start, int32_t limit) {$/;"	f	file:	signature:(uint32_t table[64], int32_t start, int32_t limit)
setAdd	rbbitblb.cpp	/^void RBBITableBuilder::setAdd(UVector *dest, UVector *source) {$/;"	f	class:RBBITableBuilder	signature:(UVector *dest, UVector *source)
setAdd	rbbitblb.h	/^    void     setAdd(UVector *dest, UVector *source);$/;"	p	class:RBBITableBuilder	access:private	signature:(UVector *dest, UVector *source)
setArray	unicode/unistr.h	/^  inline void setArray(UChar *array, int32_t len, int32_t capacity); \/\/ does not set fFlags$/;"	p	class:UnicodeString	access:private	signature:(UChar *array, int32_t len, int32_t capacity)
setArray	unicode/unistr.h	/^UnicodeString::setArray(UChar *array, int32_t len, int32_t capacity) {$/;"	f	class:UnicodeString	signature:(UChar *array, int32_t len, int32_t capacity)
setBreakType	rbbi.cpp	/^void RuleBasedBreakIterator::setBreakType(int32_t type) {$/;"	f	class:RuleBasedBreakIterator	signature:(int32_t type)
setBreakType	unicode/rbbi.h	/^    virtual void setBreakType(int32_t type);$/;"	p	class:RuleBasedBreakIterator	access:protected	signature:(int32_t type)
setCharAt	unicode/unistr.h	/^  UnicodeString& setCharAt(int32_t offset,$/;"	p	class:UnicodeString	access:public	signature:(int32_t offset, UChar ch)
setCharAt	unistr.cpp	/^UnicodeString::setCharAt(int32_t offset,$/;"	f	class:UnicodeString	signature:(int32_t offset, UChar c)
setCharacters	dictbe.cpp	/^DictionaryBreakEngine::setCharacters( const UnicodeSet &set ) {$/;"	f	class:DictionaryBreakEngine	signature:( const UnicodeSet &set )
setCharacters	dictbe.h	/^  virtual void setCharacters( const UnicodeSet &set );$/;"	p	class:DictionaryBreakEngine	access:protected	signature:( const UnicodeSet &set )
setChars	unicode/strenum.h	/^    UnicodeString *setChars(const char *s, int32_t length, UErrorCode &status);$/;"	p	class:StringEnumeration	access:protected	signature:(const char *s, int32_t length, UErrorCode &status)
setChars	ustrenum.cpp	/^StringEnumeration::setChars(const char *s, int32_t length, UErrorCode &status) {$/;"	f	class:StringEnumeration	signature:(const char *s, int32_t length, UErrorCode &status)
setCommonICUData	udata.cpp	/^setCommonICUData(UDataMemory *pData,     \/*  The new common data.  Belongs to caller, we copy it. *\/$/;"	f	file:	signature:(UDataMemory *pData, UBool warn, UErrorCode *pErr)
setCommonICUDataPointer	udata.cpp	/^setCommonICUDataPointer(const void *pData, UBool \/*warn*\/, UErrorCode *pErrorCode) {$/;"	f	file:	signature:(const void *pData, UBool , UErrorCode *pErrorCode)
setComparer	uvector.cpp	/^UKeyComparator *UVector::setComparer(UKeyComparator *d) {$/;"	f	class:UVector	signature:(UKeyComparator *d)
setComparer	uvector.h	/^    UKeyComparator *setComparer(UKeyComparator *c);$/;"	p	class:UVector	access:public	signature:(UKeyComparator *c)
setData	unicode/unifilt.h	/^    virtual void setData(const TransliterationRuleData*);$/;"	p	class:UnicodeFilter	access:public	signature:(const TransliterationRuleData*)
setData	unicode/unifunct.h	/^    virtual void setData(const TransliterationRuleData*) = 0;$/;"	p	class:UnicodeFunctor	access:public	signature:(const TransliterationRuleData*)
setData	unifilt.cpp	/^void UnicodeFilter::setData(const TransliterationRuleData*) {}$/;"	f	class:UnicodeFilter	signature:(const TransliterationRuleData*)
setDefault	locid.cpp	/^Locale::setDefault( const   Locale&     newLocale,$/;"	f	class:Locale	signature:( const Locale& newLocale, UErrorCode& status)
setDefault	unicode/locid.h	/^    static void U_EXPORT2 setDefault(const Locale& newLocale,$/;"	p	class:Locale	access:public	signature:(const Locale& newLocale, UErrorCode& success)
setDeleter	uvector.cpp	/^UObjectDeleter *UVector::setDeleter(UObjectDeleter *d) {$/;"	f	class:UVector	signature:(UObjectDeleter *d)
setDeleter	uvector.h	/^    UObjectDeleter *setDeleter(UObjectDeleter *d);$/;"	p	class:UVector	access:public	signature:(UObjectDeleter *d)
setDictionaryFlag	rbbisetb.cpp	/^void RangeDescriptor::setDictionaryFlag() {$/;"	f	class:RangeDescriptor	signature:()
setDictionaryFlag	rbbisetb.h	/^    void setDictionaryFlag();           \/\/ Check whether this range appears as part of$/;"	p	class:RangeDescriptor	access:public	signature:()
setElementAt	uvector.cpp	/^void UVector::setElementAt(int32_t elem, int32_t index) {$/;"	f	class:UVector	signature:(int32_t elem, int32_t index)
setElementAt	uvector.cpp	/^void UVector::setElementAt(void* obj, int32_t index) {$/;"	f	class:UVector	signature:(void* obj, int32_t index)
setElementAt	uvector.h	/^    void setElementAt(int32_t elem, int32_t index);$/;"	p	class:UVector	access:public	signature:(int32_t elem, int32_t index)
setElementAt	uvector.h	/^    void setElementAt(void* obj, int32_t index);$/;"	p	class:UVector	access:public	signature:(void* obj, int32_t index)
setElementAt	uvectr32.cpp	/^void UVector32::setElementAt(int32_t elem, int32_t index) {$/;"	f	class:UVector32	signature:(int32_t elem, int32_t index)
setElementAt	uvectr32.h	/^    void setElementAt(int32_t elem, int32_t index);$/;"	p	class:UVector32	access:public	signature:(int32_t elem, int32_t index)
setElementAt	uvectr64.cpp	/^void UVector64::setElementAt(int64_t elem, int32_t index) {$/;"	f	class:UVector64	signature:(int64_t elem, int32_t index)
setElementAt	uvectr64.h	/^    void setElementAt(int64_t elem, int32_t index);$/;"	p	class:UVector64	access:public	signature:(int64_t elem, int32_t index)
setEntryName	uresbund.c	/^static void setEntryName(UResourceDataEntry *res, char *name, UErrorCode *status) {$/;"	f	file:	signature:(UResourceDataEntry *res, char *name, UErrorCode *status)
setEquals	rbbitblb.cpp	/^UBool RBBITableBuilder::setEquals(UVector *a, UVector *b) {$/;"	f	class:RBBITableBuilder	signature:(UVector *a, UVector *b)
setEquals	rbbitblb.h	/^    UBool    setEquals(UVector *a, UVector *b);$/;"	p	class:RBBITableBuilder	access:private	signature:(UVector *a, UVector *b)
setErrorIndex	unicode/parsepos.h	/^    void setErrorIndex(int32_t ei);$/;"	p	class:ParsePosition	access:public	signature:(int32_t ei)
setErrorIndex	unicode/parsepos.h	/^ParsePosition::setErrorIndex(int32_t ei)$/;"	f	class:ParsePosition	signature:(int32_t ei)
setFCD16FromNorm16	normalizer2impl.cpp	/^void Normalizer2Impl::setFCD16FromNorm16(UChar32 start, UChar32 end, uint16_t norm16,$/;"	f	class:Normalizer2Impl	signature:(UChar32 start, UChar32 end, uint16_t norm16, UTrie2 *newFCDTrie, UErrorCode &errorCode) const
setFCD16FromNorm16	normalizer2impl.h	/^    void setFCD16FromNorm16(UChar32 start, UChar32 end, uint16_t norm16,$/;"	p	class:Normalizer2Impl	access:public	signature:(UChar32 start, UChar32 end, uint16_t norm16, UTrie2 *newFCDTrie, UErrorCode &errorCode) const
setFromPOSIXID	locid.cpp	/^void Locale::setFromPOSIXID(const char *posixID)$/;"	f	class:Locale	signature:(const char *posixID)
setFromPOSIXID	unicode/locid.h	/^    void setFromPOSIXID(const char *posixID);$/;"	p	class:Locale	access:protected	signature:(const char *posixID)
setIndex	uchriter.cpp	/^UCharCharacterIterator::setIndex(int32_t position) {$/;"	f	class:UCharCharacterIterator	signature:(int32_t position)
setIndex	unicode/chariter.h	/^    virtual UChar         setIndex(int32_t position) = 0;$/;"	p	class:CharacterIterator	access:public	signature:(int32_t position)
setIndex	unicode/parsepos.h	/^    void setIndex(int32_t index);$/;"	p	class:ParsePosition	access:public	signature:(int32_t index)
setIndex	unicode/parsepos.h	/^ParsePosition::setIndex(int32_t offset)$/;"	f	class:ParsePosition	signature:(int32_t offset)
setIndex	unicode/uchriter.h	/^  virtual UChar         setIndex(int32_t position);$/;"	p	class:UCharCharacterIterator	access:public	signature:(int32_t position)
setIndex2Entry	utrie2_builder.c	/^setIndex2Entry(UNewTrie2 *trie, int32_t i2, int32_t block) {$/;"	f	file:	signature:(UNewTrie2 *trie, int32_t i2, int32_t block)
setIndex32	uchriter.cpp	/^UCharCharacterIterator::setIndex32(int32_t position) {$/;"	f	class:UCharCharacterIterator	signature:(int32_t position)
setIndex32	unicode/chariter.h	/^    virtual UChar32       setIndex32(int32_t position) = 0;$/;"	p	class:CharacterIterator	access:public	signature:(int32_t position)
setIndex32	unicode/uchriter.h	/^  virtual UChar32       setIndex32(int32_t position);$/;"	p	class:UCharCharacterIterator	access:public	signature:(int32_t position)
setIndexOnly	normlzr.cpp	/^Normalizer::setIndexOnly(int32_t index) {$/;"	f	class:Normalizer	signature:(int32_t index)
setIndexOnly	unicode/normlzr.h	/^  void                 setIndexOnly(int32_t index);$/;"	p	class:Normalizer	access:public	signature:(int32_t index)
setInitialStateFromUnicodeKR	ucnv2022.c	/^setInitialStateFromUnicodeKR(UConverter* converter,UConverterDataISO2022 *myConverterData){$/;"	f	file:	signature:(UConverter* converter,UConverterDataISO2022 *myConverterData)
setInitialStateToUnicodeKR	ucnv2022.c	/^setInitialStateToUnicodeKR(UConverter* converter, UConverterDataISO2022 *myConverterData){$/;"	f	file:	signature:(UConverter* converter, UConverterDataISO2022 *myConverterData)
setIterator	normalizer2impl.h	/^    void setIterator() { codePointStart=limit; }$/;"	f	class:ReorderingBuffer	access:private	signature:()
setKeyComparator	hash.h	/^    UKeyComparator* setKeyComparator(UKeyComparator*keyComp);$/;"	p	class:Hashtable	access:public	signature:(UKeyComparator*keyComp)
setKeyComparator	hash.h	/^inline UKeyComparator* Hashtable::setKeyComparator(UKeyComparator*keyComp){$/;"	f	class:Hashtable	signature:(UKeyComparator*keyComp)
setKeywordValue	locid.cpp	/^Locale::setKeywordValue(const char* keywordName, const char* keywordValue, UErrorCode &status)$/;"	f	class:Locale	signature:(const char* keywordName, const char* keywordValue, UErrorCode &status)
setKeywordValue	unicode/locid.h	/^    void setKeywordValue(const char* keywordName, const char* keywordValue, UErrorCode &status);$/;"	p	class:Locale	access:public	signature:(const char* keywordName, const char* keywordValue, UErrorCode &status)
setLastChar	normalizer2impl.h	/^    void setLastChar(UChar c) {$/;"	f	class:ReorderingBuffer	access:public	signature:(UChar c)
setLength	unicode/unistr.h	/^  inline void setLength(int32_t len);        \/\/ sets only fShortLength and fLength$/;"	p	class:UnicodeString	access:private	signature:(int32_t len)
setLength	unicode/unistr.h	/^UnicodeString::setLength(int32_t len) {$/;"	f	class:UnicodeString	signature:(int32_t len)
setLink	triedict.cpp	/^    void setLink(BuildCompactTrieNode *node) {$/;"	f	class:BuildCompactTrieVerticalNode	access:public	signature:(BuildCompactTrieNode *node)
setLocaleIDs	locbased.cpp	/^void LocaleBased::setLocaleIDs(const char* validID, const char* actualID) {$/;"	f	class:LocaleBased	signature:(const char* validID, const char* actualID)
setLocaleIDs	locbased.h	/^    void setLocaleIDs(const char* valid, const char* actual);$/;"	p	class:LocaleBased	access:public	signature:(const char* valid, const char* actual)
setMaxCapacity	uvectr32.cpp	/^void UVector32::setMaxCapacity(int32_t limit) {$/;"	f	class:UVector32	signature:(int32_t limit)
setMaxCapacity	uvectr32.h	/^    void setMaxCapacity(int32_t limit);$/;"	p	class:UVector32	access:public	signature:(int32_t limit)
setMaxCapacity	uvectr64.cpp	/^void UVector64::setMaxCapacity(int32_t limit) {$/;"	f	class:UVector64	signature:(int32_t limit)
setMaxCapacity	uvectr64.h	/^    void setMaxCapacity(int32_t limit);$/;"	p	class:UVector64	access:public	signature:(int32_t limit)
setMaxLength	unisetspan.cpp	/^    void setMaxLength(int32_t maxLength) {$/;"	f	class:OffsetList	access:public	signature:(int32_t maxLength)
setMode	normlzr.cpp	/^Normalizer::setMode(UNormalizationMode newMode) $/;"	f	class:Normalizer	signature:(UNormalizationMode newMode)
setMode	unicode/normlzr.h	/^  void setMode(UNormalizationMode newMode);$/;"	p	class:Normalizer	access:public	signature:(UNormalizationMode newMode)
setOption	normlzr.cpp	/^Normalizer::setOption(int32_t option, $/;"	f	class:Normalizer	signature:(int32_t option, UBool value)
setOption	unicode/normlzr.h	/^  void setOption(int32_t option,$/;"	p	class:Normalizer	access:public	signature:(int32_t option, UBool value)
setParaRunsOnly	ubidi.c	/^setParaRunsOnly(UBiDi *pBiDi, const UChar *text, int32_t length,$/;"	f	file:	signature:(UBiDi *pBiDi, const UChar *text, int32_t length, UBiDiLevel paraLevel, UErrorCode *pErrorCode)
setPattern	unicode/uniset.h	/^    void setPattern(const UnicodeString& newPat);$/;"	p	class:UnicodeSet	access:private	signature:(const UnicodeString& newPat)
setPattern	uniset.cpp	/^void UnicodeSet::setPattern(const UnicodeString& newPat) {$/;"	f	class:UnicodeSet	signature:(const UnicodeString& newPat)
setPos	ruleiter.cpp	/^void RuleCharacterIterator::setPos(const RuleCharacterIterator::Pos& p) {$/;"	f	class:RuleCharacterIterator	signature:(const RuleCharacterIterator::Pos& p)
setPos	ruleiter.h	/^    void setPos(const Pos& p);$/;"	p	class:RuleCharacterIterator	access:public	signature:(const Pos& p)
setRef	rbbinode.h	/^            setRef,$/;"	e	enum:RBBINode::NodeType
setReorderingLimit	normalizer2impl.h	/^    void setReorderingLimit(UChar *newLimit) {$/;"	f	class:ReorderingBuffer	access:public	signature:(UChar *newLimit)
setSize	uvector.cpp	/^void UVector::setSize(int32_t newSize, UErrorCode &status) {$/;"	f	class:UVector	signature:(int32_t newSize, UErrorCode &status)
setSize	uvector.h	/^    void setSize(int32_t newSize, UErrorCode &status);$/;"	p	class:UVector	access:public	signature:(int32_t newSize, UErrorCode &status)
setSize	uvectr32.cpp	/^void UVector32::setSize(int32_t newSize) {$/;"	f	class:UVector32	signature:(int32_t newSize)
setSize	uvectr32.h	/^    void setSize(int32_t newSize);$/;"	p	class:UVector32	access:public	signature:(int32_t newSize)
setSize	uvectr64.cpp	/^void UVector64::setSize(int32_t newSize) {$/;"	f	class:UVector64	signature:(int32_t newSize)
setSize	uvectr64.h	/^    void setSize(int32_t newSize);$/;"	p	class:UVector64	access:public	signature:(int32_t newSize)
setSource	caniter.cpp	/^void CanonicalIterator::setSource(const UnicodeString &newSource, UErrorCode &status) {$/;"	f	class:CanonicalIterator	signature:(const UnicodeString &newSource, UErrorCode &status)
setSource	unicode/caniter.h	/^    void setSource(const UnicodeString &newSource, UErrorCode &status);$/;"	p	class:CanonicalIterator	access:public	signature:(const UnicodeString &newSource, UErrorCode &status)
setState	unicode/uiter.h	/^    UCharIteratorSetState *setState;$/;"	m	struct:UCharIterator	access:public
setTempCaseMap	ustrcase.c	/^setTempCaseMap(UCaseMap *csm, const char *locale, UErrorCode *pErrorCode) {$/;"	f	file:	signature:(UCaseMap *csm, const char *locale, UErrorCode *pErrorCode)
setTempCaseMapLocale	ustrcase.c	/^setTempCaseMapLocale(UCaseMap *csm, const char *locale, UErrorCode *pErrorCode) {$/;"	f	file:	signature:(UCaseMap *csm, const char *locale, UErrorCode *pErrorCode)
setText	normlzr.cpp	/^Normalizer::setText(const CharacterIterator& newText, $/;"	f	class:Normalizer	signature:(const CharacterIterator& newText, UErrorCode &status)
setText	normlzr.cpp	/^Normalizer::setText(const UChar* newText,$/;"	f	class:Normalizer	signature:(const UChar* newText, int32_t length, UErrorCode &status)
setText	normlzr.cpp	/^Normalizer::setText(const UnicodeString& newText, $/;"	f	class:Normalizer	signature:(const UnicodeString& newText, UErrorCode &status)
setText	rbbi.cpp	/^RuleBasedBreakIterator::setText(const UnicodeString& newText) {$/;"	f	class:RuleBasedBreakIterator	signature:(const UnicodeString& newText)
setText	rbbi.cpp	/^void RuleBasedBreakIterator::setText(UText *ut, UErrorCode &status) {$/;"	f	class:RuleBasedBreakIterator	signature:(UText *ut, UErrorCode &status)
setText	schriter.cpp	/^StringCharacterIterator::setText(const UnicodeString& newText) {$/;"	f	class:StringCharacterIterator	signature:(const UnicodeString& newText)
setText	uchriter.cpp	/^void UCharCharacterIterator::setText(const UChar* newText,$/;"	f	class:UCharCharacterIterator	signature:(const UChar* newText, int32_t newTextLength)
setText	unicode/brkiter.h	/^    virtual void  setText(UText *text, UErrorCode &status) = 0;$/;"	p	class:BreakIterator	access:public	signature:(UText *text, UErrorCode &status)
setText	unicode/brkiter.h	/^    virtual void  setText(const UnicodeString &text) = 0;$/;"	p	class:BreakIterator	access:public	signature:(const UnicodeString &text)
setText	unicode/normlzr.h	/^  void setText(const CharacterIterator& newText,$/;"	p	class:Normalizer	access:public	signature:(const CharacterIterator& newText, UErrorCode &status)
setText	unicode/normlzr.h	/^  void setText(const UChar* newText,$/;"	p	class:Normalizer	access:public	signature:(const UChar* newText, int32_t length, UErrorCode &status)
setText	unicode/normlzr.h	/^  void setText(const UnicodeString& newText,$/;"	p	class:Normalizer	access:public	signature:(const UnicodeString& newText, UErrorCode &status)
setText	unicode/rbbi.h	/^    virtual void  setText(UText *text, UErrorCode &status);$/;"	p	class:RuleBasedBreakIterator	access:public	signature:(UText *text, UErrorCode &status)
setText	unicode/rbbi.h	/^    virtual void setText(const UnicodeString& newText);$/;"	p	class:RuleBasedBreakIterator	access:public	signature:(const UnicodeString& newText)
setText	unicode/schriter.h	/^  void setText(const UChar* newText, int32_t newTextLength);$/;"	p	class:StringCharacterIterator	access:protected	signature:(const UChar* newText, int32_t newTextLength)
setText	unicode/schriter.h	/^  void setText(const UnicodeString& newText);$/;"	p	class:StringCharacterIterator	access:public	signature:(const UnicodeString& newText)
setText	unicode/uchriter.h	/^  void setText(const UChar* newText, int32_t newTextLength);$/;"	p	class:UCharCharacterIterator	access:public	signature:(const UChar* newText, int32_t newTextLength)
setTo	unicode/unistr.h	/^  UnicodeString &setTo(UBool isTerminated,$/;"	p	class:UnicodeString	access:public	signature:(UBool isTerminated, const UChar *text, int32_t textLength)
setTo	unicode/unistr.h	/^  UnicodeString &setTo(UChar *buffer,$/;"	p	class:UnicodeString	access:public	signature:(UChar *buffer, int32_t buffLength, int32_t buffCapacity)
setTo	unicode/unistr.h	/^  UnicodeString& setTo(UChar srcChar);$/;"	p	class:UnicodeString	access:public	signature:(UChar srcChar)
setTo	unicode/unistr.h	/^  UnicodeString& setTo(UChar32 srcChar);$/;"	p	class:UnicodeString	access:public	signature:(UChar32 srcChar)
setTo	unicode/unistr.h	/^  inline UnicodeString& setTo(const UChar *srcChars,$/;"	p	class:UnicodeString	access:public	signature:(const UChar *srcChars, int32_t srcLength)
setTo	unicode/unistr.h	/^  inline UnicodeString& setTo(const UnicodeString& srcText);$/;"	p	class:UnicodeString	access:public	signature:(const UnicodeString& srcText)
setTo	unicode/unistr.h	/^  inline UnicodeString& setTo(const UnicodeString& srcText,$/;"	p	class:UnicodeString	access:public	signature:(const UnicodeString& srcText, int32_t srcStart)
setTo	unicode/unistr.h	/^  inline UnicodeString& setTo(const UnicodeString& srcText,$/;"	p	class:UnicodeString	access:public	signature:(const UnicodeString& srcText, int32_t srcStart, int32_t srcLength)
setTo	unicode/unistr.h	/^UnicodeString::setTo(UChar srcChar)$/;"	f	class:UnicodeString	signature:(UChar srcChar)
setTo	unicode/unistr.h	/^UnicodeString::setTo(UChar32 srcChar)$/;"	f	class:UnicodeString	signature:(UChar32 srcChar)
setTo	unicode/unistr.h	/^UnicodeString::setTo(const UChar *srcChars,$/;"	f	class:UnicodeString	signature:(const UChar *srcChars, int32_t srcLength)
setTo	unicode/unistr.h	/^UnicodeString::setTo(const UnicodeString& srcText)$/;"	f	class:UnicodeString	signature:(const UnicodeString& srcText)
setTo	unicode/unistr.h	/^UnicodeString::setTo(const UnicodeString& srcText,$/;"	f	class:UnicodeString	signature:(const UnicodeString& srcText, int32_t srcStart)
setTo	unicode/unistr.h	/^UnicodeString::setTo(const UnicodeString& srcText,$/;"	f	class:UnicodeString	signature:(const UnicodeString& srcText, int32_t srcStart, int32_t srcLength)
setTo	unistr.cpp	/^UnicodeString::setTo(UBool isTerminated,$/;"	f	class:UnicodeString	signature:(UBool isTerminated, const UChar *text, int32_t textLength)
setTo	unistr.cpp	/^UnicodeString::setTo(UChar *buffer,$/;"	f	class:UnicodeString	signature:(UChar *buffer, int32_t buffLength, int32_t buffCapacity)
setToBogus	locid.cpp	/^Locale::setToBogus() {$/;"	f	class:Locale	signature:()
setToBogus	unicode/locid.h	/^    void setToBogus();$/;"	p	class:Locale	access:public	signature:()
setToBogus	unicode/uniset.h	/^    void setToBogus();$/;"	p	class:UnicodeSet	access:public	signature:()
setToBogus	unicode/unistr.h	/^  void setToBogus();$/;"	p	class:UnicodeString	access:public	signature:()
setToBogus	uniset.cpp	/^void UnicodeSet::setToBogus() {$/;"	f	class:UnicodeSet	signature:()
setToBogus	unistr.cpp	/^UnicodeString::setToBogus()$/;"	f	class:UnicodeString	signature:()
setToEmpty	unicode/unistr.h	/^  inline void setToEmpty();                  \/\/ sets fFlags=kShortString$/;"	p	class:UnicodeString	access:private	signature:()
setToEmpty	unicode/unistr.h	/^UnicodeString::setToEmpty() {$/;"	f	class:UnicodeString	signature:()
setToEnd	unicode/chariter.h	/^    inline int32_t    setToEnd();$/;"	p	class:CharacterIterator	access:public	signature:()
setToEnd	unicode/chariter.h	/^CharacterIterator::setToEnd() {$/;"	f	class:CharacterIterator	signature:()
setToStart	unicode/chariter.h	/^    inline int32_t    setToStart();$/;"	p	class:CharacterIterator	access:public	signature:()
setToStart	unicode/chariter.h	/^CharacterIterator::setToStart() {$/;"	f	class:CharacterIterator	signature:()
setToUTF8	unicode/unistr.h	/^  UnicodeString &setToUTF8(const StringPiece &utf8);$/;"	p	class:UnicodeString	access:private	signature:(const StringPiece &utf8)
setToUTF8	unistr.cpp	/^UnicodeString &UnicodeString::setToUTF8(const StringPiece &utf8) {$/;"	f	class:UnicodeString	signature:(const StringPiece &utf8)
setTrailingWSStart	ubidiln.c	/^setTrailingWSStart(UBiDi *pBiDi) {$/;"	f	file:	signature:(UBiDi *pBiDi)
setValueComparator	hash.h	/^    UValueComparator* setValueComparator(UValueComparator* valueComp);$/;"	p	class:Hashtable	access:public	signature:(UValueComparator* valueComp)
setValueComparator	hash.h	/^inline UValueComparator* Hashtable::setValueComparator(UValueComparator* valueComp){$/;"	f	class:Hashtable	signature:(UValueComparator* valueComp)
setValueDeleter	hash.h	/^    UObjectDeleter *setValueDeleter(UObjectDeleter *fn);$/;"	p	class:Hashtable	access:public	signature:(UObjectDeleter *fn)
setValueDeleter	hash.h	/^inline UObjectDeleter *Hashtable::setValueDeleter(UObjectDeleter *fn) {$/;"	f	class:Hashtable	signature:(UObjectDeleter *fn)
severeErrors	uts46.cpp	/^const uint32_t severeErrors=$/;"	v
shallowTextClone	utext.cpp	/^shallowTextClone(UText * dest, const UText * src, UErrorCode * status) {$/;"	f	file:	signature:(UText * dest, const UText * src, UErrorCode * status)
shapeTable	ushape.c	/^static const uint8_t shapeTable[4][4][4]=$/;"	v	file:
shapeUnicode	ushape.c	/^shapeUnicode(UChar *dest, int32_t sourceLength,$/;"	f	file:	signature:(UChar *dest, int32_t sourceLength, int32_t destSize,uint64_t options, UErrorCode *pErrorCode, int tashkeelFlag)
sharedData	ucnv_bld.h	/^    UConverterSharedData *sharedData;   \/* Pointer to the shared immutable part of the converter object *\/$/;"	m	struct:UConverter	access:public
sharedDataCached	ucnv_bld.h	/^    UBool                sharedDataCached;   \/* TRUE:  shared data is in cache, don't destroy on ucnv_close() if 0 ref.  FALSE: shared data isn't in the cache, do attempt to clean it up if the ref is 0 *\/$/;"	m	struct:UConverterSharedData	access:public
sharedDataIsCached	ucnv_bld.h	/^    UBool sharedDataIsCached;  \/* TRUE:  shared data is in cache, don't destroy on ucnv_close() if 0 ref.  FALSE: shared data isn't in the cache, do attempt to clean it up if the ref is 0 *\/$/;"	m	struct:UConverter	access:public
shift	unisetspan.cpp	/^    void shift(int32_t delta) {$/;"	f	class:OffsetList	access:public	signature:(int32_t delta)
shift	uprops.cpp	/^    int32_t shift;  \/\/ =maxValue if getMaxValueFromShift() is used$/;"	m	struct:IntProperty	file:	access:public
shiftedDataLength	utrie2_impl.h	/^    uint16_t shiftedDataLength;$/;"	m	struct:UTrie2Header	access:public
shiftedHighStart	utrie2_impl.h	/^    uint16_t shiftedHighStart;$/;"	m	struct:UTrie2Header	access:public
signature	utrie.h	/^    uint32_t signature;$/;"	m	struct:UTrieHeader	access:public
signature	utrie2_impl.h	/^    uint32_t signature;$/;"	m	struct:UTrie2Header	access:public
simpleParas	ubidiimp.h	/^    Para simpleParas[1];$/;"	m	struct:UBiDi	access:public
simpleRuns	ubidiimp.h	/^    Run simpleRuns[1];$/;"	m	struct:UBiDi	access:public
singleton	mutex.h	/^    SimpleSingleton &singleton;$/;"	m	class:SimpleSingletonWrapper	access:private
singleton	mutex.h	/^    TriStateSingleton &singleton;$/;"	m	class:TriStateSingletonWrapper	access:private
singleton	normalizer2impl.cpp	/^    SimpleSingleton &singleton;$/;"	m	class:CanonIterDataSingleton	file:	access:private
singleton	utrie2.h	/^    SimpleSingleton &singleton;$/;"	m	class:UTrie2Singleton	access:private
size	triedict.cpp	/^    uint32_t        size;           \/\/ Size of the data in bytes$/;"	m	struct:CompactTrieHeader	file:	access:public
size	triedict.cpp	/^    virtual uint32_t size() {$/;"	f	class:BuildCompactTrieHorizontalNode	access:public	signature:()
size	triedict.cpp	/^    virtual uint32_t size() {$/;"	f	class:BuildCompactTrieNode	access:public	signature:()
size	triedict.cpp	/^    virtual uint32_t size() {$/;"	f	class:BuildCompactTrieVerticalNode	access:public	signature:()
size	ubidiimp.h	/^    int32_t size;           \/* number of points used *\/$/;"	m	struct:InsertPoints	access:public
size	ucnv_cnv.h	/^    int32_t size;               \/* sizeof(UConverterLoadArgs) *\/$/;"	m	struct:__anon9	access:public
size	ulist.c	/^    int32_t size;$/;"	m	struct:UList	file:	access:public
size	unames.c	/^    uint16_t size;$/;"	m	struct:__anon93	file:	access:public
size	unicode/stringpiece.h	/^  int32_t size() const { return length_; }$/;"	f	class:StringPiece	access:public	signature:() const
size	unicode/ucnv_err.h	/^    uint16_t size;              \/**< The size of this struct   @stable ICU 2.0 *\/$/;"	m	struct:__anon106	access:public
size	unicode/ucnv_err.h	/^    uint16_t size;              \/**< The size of this struct. @stable ICU 2.0 *\/$/;"	m	struct:__anon105	access:public
size	unicode/udata.h	/^    uint16_t size;$/;"	m	struct:__anon114	access:public
size	unicode/uidna.h	/^    int16_t size;$/;"	m	struct:UIDNAInfo	access:public
size	unicode/uniset.h	/^    virtual int32_t size(void) const;$/;"	p	class:UnicodeSet	access:public	signature:(void) const
size	uniset.cpp	/^int32_t UnicodeSet::size(void) const {$/;"	f	class:UnicodeSet	signature:(void) const
size	uvector.h	/^    int32_t size(void) const;$/;"	p	class:UVector	access:public	signature:(void) const
size	uvector.h	/^inline int32_t UVector::size(void) const {$/;"	f	class:UVector	signature:(void) const
size	uvectr32.h	/^    int32_t size(void) const;$/;"	p	class:UVector32	access:public	signature:(void) const
size	uvectr32.h	/^inline int32_t UVector32::size(void) const {$/;"	f	class:UVector32	signature:(void) const
size	uvectr64.h	/^    int32_t size(void) const;$/;"	p	class:UVector64	access:public	signature:(void) const
size	uvectr64.h	/^inline int32_t UVector64::size(void) const {$/;"	f	class:UVector64	signature:(void) const
sizeOfStruct	unicode/utext.h	/^    int32_t         sizeOfStruct;$/;"	m	struct:UText	access:public
size_	unicode/bytestream.h	/^  int32_t size_;$/;"	m	class:CheckedArrayByteSink	access:private
sizeofUChar	unicode/udata.h	/^    uint8_t sizeofUChar;$/;"	m	struct:__anon114	access:public
skipIgnored	ruleiter.cpp	/^void RuleCharacterIterator::skipIgnored(int32_t options) {$/;"	f	class:RuleCharacterIterator	signature:(int32_t options)
skipIgnored	ruleiter.h	/^    void skipIgnored(int32_t options);$/;"	p	class:RuleCharacterIterator	access:public	signature:(int32_t options)
skipPrevious	normalizer2impl.cpp	/^void ReorderingBuffer::skipPrevious() {$/;"	f	class:ReorderingBuffer	signature:()
skipPrevious	normalizer2impl.h	/^    void skipPrevious();  \/\/ Requires start<codePointStart.$/;"	p	class:ReorderingBuffer	access:private	signature:()
skipWhitespace	util.cpp	/^int32_t ICU_Utility::skipWhitespace(const UnicodeString& str, int32_t& pos,$/;"	f	class:ICU_Utility	signature:(const UnicodeString& str, int32_t& pos, UBool advance)
skipWhitespace	util.h	/^    static int32_t skipWhitespace(const UnicodeString& str, int32_t& pos,$/;"	p	class:ICU_Utility	access:public	signature:(const UnicodeString& str, int32_t& pos, UBool advance = FALSE)
skipZoneIDPrefix	putil.c	/^static void skipZoneIDPrefix(const char** id) {$/;"	f	file:	signature:(const char** id)
snext	locid.cpp	/^    virtual const UnicodeString* snext(UErrorCode& status) {$/;"	f	class:KeywordEnumeration	access:public	signature:(UErrorCode& status)
snext	servls.cpp	/^    virtual const UnicodeString* snext(UErrorCode& status) {$/;"	f	class:ServiceEnumeration	access:public	signature:(UErrorCode& status)
snext	triedict.cpp	/^    virtual const UnicodeString * snext(UErrorCode &status);$/;"	p	class:CompactTrieEnumeration	file:	access:public	signature:(UErrorCode &status)
snext	triedict.cpp	/^    virtual const UnicodeString *snext(UErrorCode &status) {$/;"	f	class:MutableTrieEnumeration	access:public	signature:(UErrorCode &status)
snext	triedict.cpp	/^CompactTrieEnumeration::snext(UErrorCode &status) {$/;"	f	class:CompactTrieEnumeration	signature:(UErrorCode &status)
snext	unicode/strenum.h	/^    virtual const UnicodeString* snext(UErrorCode& status) = 0;$/;"	p	class:StringEnumeration	access:public	signature:(UErrorCode& status)
snext	ustrenum.cpp	/^const UnicodeString* UStringEnumeration::snext(UErrorCode& status) {$/;"	f	class:UStringEnumeration	signature:(UErrorCode& status)
snext	ustrenum.h	/^    virtual const UnicodeString* snext(UErrorCode& status);$/;"	p	class:UStringEnumeration	access:public	signature:(UErrorCode& status)
sort	uvector.cpp	/^void UVector::sort(USortComparator *compare, UErrorCode &ec) {$/;"	f	class:UVector	signature:(USortComparator *compare, UErrorCode &ec)
sort	uvector.h	/^    void sort(USortComparator *compare, UErrorCode &ec);$/;"	p	class:UVector	access:public	signature:(USortComparator *compare, UErrorCode &ec)
sortComparator	uvector.cpp	/^sortComparator(const void *context, const void *left, const void *right) {$/;"	f	file:	signature:(const void *context, const void *left, const void *right)
sortIndex	ucnv_io.c	/^    uint16_t strIndex, sortIndex;$/;"	m	struct:TempRow	file:	access:public
sortIndex	uresdata.c	/^    int32_t keyIndex, sortIndex;$/;"	m	struct:Row	file:	access:public
sortedAdd	rbbitblb.cpp	/^void RBBITableBuilder::sortedAdd(UVector **vector, int32_t val) {$/;"	f	class:RBBITableBuilder	signature:(UVector **vector, int32_t val)
sortedAdd	rbbitblb.h	/^    void     sortedAdd(UVector **dest, int32_t val);$/;"	p	class:RBBITableBuilder	access:private	signature:(UVector **dest, int32_t val)
sortedInsert	uvector.cpp	/^void UVector::sortedInsert(UHashTok tok, USortComparator *compare, UErrorCode& ec) {$/;"	f	class:UVector	signature:(UHashTok tok, USortComparator *compare, UErrorCode& ec)
sortedInsert	uvector.cpp	/^void UVector::sortedInsert(int32_t obj, USortComparator *compare, UErrorCode& ec) {$/;"	f	class:UVector	signature:(int32_t obj, USortComparator *compare, UErrorCode& ec)
sortedInsert	uvector.cpp	/^void UVector::sortedInsert(void* obj, USortComparator *compare, UErrorCode& ec) {$/;"	f	class:UVector	signature:(void* obj, USortComparator *compare, UErrorCode& ec)
sortedInsert	uvector.h	/^    void sortedInsert(UHashTok tok, USortComparator *compare, UErrorCode& ec);$/;"	p	class:UVector	access:private	signature:(UHashTok tok, USortComparator *compare, UErrorCode& ec)
sortedInsert	uvector.h	/^    void sortedInsert(int32_t obj, USortComparator *compare, UErrorCode& ec);$/;"	p	class:UVector	access:public	signature:(int32_t obj, USortComparator *compare, UErrorCode& ec)
sortedInsert	uvector.h	/^    void sortedInsert(void* obj, USortComparator *compare, UErrorCode& ec);$/;"	p	class:UVector	access:public	signature:(void* obj, USortComparator *compare, UErrorCode& ec)
sortedInsert	uvectr32.cpp	/^void UVector32::sortedInsert(int32_t tok, UErrorCode& ec) {$/;"	f	class:UVector32	signature:(int32_t tok, UErrorCode& ec)
sortedInsert	uvectr32.h	/^    void sortedInsert(int32_t elem, UErrorCode& ec);$/;"	p	class:UVector32	access:public	signature:(int32_t elem, UErrorCode& ec)
sorti	uvector.cpp	/^void UVector::sorti(UErrorCode &ec) {$/;"	f	class:UVector	signature:(UErrorCode &ec)
sorti	uvector.h	/^    void sorti(UErrorCode &ec);$/;"	p	class:UVector	access:public	signature:(UErrorCode &ec)
sortiComparator	uvector.cpp	/^sortiComparator(const void * \/*context *\/, const void *left, const void *right) {$/;"	f	file:	signature:(const void * , const void *left, const void *right)
source	unicode/caniter.h	/^    UnicodeString source;$/;"	m	class:CanonicalIterator	access:private
source	unicode/ucnv_err.h	/^    const UChar *source;        \/**< Pointer to the source source buffer. @stable ICU 2.0    *\/$/;"	m	struct:__anon105	access:public
source	unicode/ucnv_err.h	/^    const char *source;         \/**< Pointer to the source source buffer. @stable ICU 2.0    *\/$/;"	m	struct:__anon106	access:public
sourceIndex	ucnvhz.c	/^    int32_t sourceIndex;$/;"	m	struct:__anon61	file:	access:public
sourceLimit	unicode/ucnv_err.h	/^    const UChar *sourceLimit;   \/**< Pointer to the limit (end + 1) of source buffer. @stable ICU 2.0    *\/$/;"	m	struct:__anon105	access:public
sourceLimit	unicode/ucnv_err.h	/^    const char *sourceLimit;    \/**< Pointer to the limit (end + 1) of source buffer. @stable ICU 2.0    *\/$/;"	m	struct:__anon106	access:public
spacesRelativeToTextBeginEnd	ushape.c	/^static int spacesRelativeToTextBeginEnd = 0;$/;"	v	file:
span	bmpset.cpp	/^BMPSet::span(const UChar *s, const UChar *limit, USetSpanCondition spanCondition) const {$/;"	f	class:BMPSet	signature:(const UChar *s, const UChar *limit, USetSpanCondition spanCondition) const
span	bmpset.h	/^    const UChar *span(const UChar *s, const UChar *limit, USetSpanCondition spanCondition) const;$/;"	p	class:BMPSet	access:public	signature:(const UChar *s, const UChar *limit, USetSpanCondition spanCondition) const
span	unicode/uniset.h	/^    inline int32_t span(const UnicodeString &s, int32_t start, USetSpanCondition spanCondition) const;$/;"	p	class:UnicodeSet	access:public	signature:(const UnicodeString &s, int32_t start, USetSpanCondition spanCondition) const
span	unicode/uniset.h	/^    int32_t span(const UChar *s, int32_t length, USetSpanCondition spanCondition) const;$/;"	p	class:UnicodeSet	access:public	signature:(const UChar *s, int32_t length, USetSpanCondition spanCondition) const
span	unicode/uniset.h	/^inline int32_t UnicodeSet::span(const UnicodeString &s, int32_t start, USetSpanCondition spanCondition) const {$/;"	f	class:UnicodeSet	signature:(const UnicodeString &s, int32_t start, USetSpanCondition spanCondition) const
span	uniset.cpp	/^int32_t UnicodeSet::span(const UChar *s, int32_t length, USetSpanCondition spanCondition) const {$/;"	f	class:UnicodeSet	signature:(const UChar *s, int32_t length, USetSpanCondition spanCondition) const
span	unisetspan.cpp	/^int32_t UnicodeSetStringSpan::span(const UChar *s, int32_t length, USetSpanCondition spanCondition) const {$/;"	f	class:UnicodeSetStringSpan	signature:(const UChar *s, int32_t length, USetSpanCondition spanCondition) const
span	unisetspan.h	/^    int32_t span(const UChar *s, int32_t length, USetSpanCondition spanCondition) const;$/;"	p	class:UnicodeSetStringSpan	access:public	signature:(const UChar *s, int32_t length, USetSpanCondition spanCondition) const
spanBack	bmpset.cpp	/^BMPSet::spanBack(const UChar *s, const UChar *limit, USetSpanCondition spanCondition) const {$/;"	f	class:BMPSet	signature:(const UChar *s, const UChar *limit, USetSpanCondition spanCondition) const
spanBack	bmpset.h	/^    const UChar *spanBack(const UChar *s, const UChar *limit, USetSpanCondition spanCondition) const;$/;"	p	class:BMPSet	access:public	signature:(const UChar *s, const UChar *limit, USetSpanCondition spanCondition) const
spanBack	unicode/uniset.h	/^    inline int32_t spanBack(const UnicodeString &s, int32_t limit, USetSpanCondition spanCondition) const;$/;"	p	class:UnicodeSet	access:public	signature:(const UnicodeString &s, int32_t limit, USetSpanCondition spanCondition) const
spanBack	unicode/uniset.h	/^    int32_t spanBack(const UChar *s, int32_t length, USetSpanCondition spanCondition) const;$/;"	p	class:UnicodeSet	access:public	signature:(const UChar *s, int32_t length, USetSpanCondition spanCondition) const
spanBack	unicode/uniset.h	/^inline int32_t UnicodeSet::spanBack(const UnicodeString &s, int32_t limit, USetSpanCondition spanCondition) const {$/;"	f	class:UnicodeSet	signature:(const UnicodeString &s, int32_t limit, USetSpanCondition spanCondition) const
spanBack	uniset.cpp	/^int32_t UnicodeSet::spanBack(const UChar *s, int32_t length, USetSpanCondition spanCondition) const {$/;"	f	class:UnicodeSet	signature:(const UChar *s, int32_t length, USetSpanCondition spanCondition) const
spanBack	unisetspan.cpp	/^int32_t UnicodeSetStringSpan::spanBack(const UChar *s, int32_t length, USetSpanCondition spanCondition) const {$/;"	f	class:UnicodeSetStringSpan	signature:(const UChar *s, int32_t length, USetSpanCondition spanCondition) const
spanBack	unisetspan.h	/^    int32_t spanBack(const UChar *s, int32_t length, USetSpanCondition spanCondition) const;$/;"	p	class:UnicodeSetStringSpan	access:public	signature:(const UChar *s, int32_t length, USetSpanCondition spanCondition) const
spanBackUTF8	bmpset.cpp	/^BMPSet::spanBackUTF8(const uint8_t *s, int32_t length, USetSpanCondition spanCondition) const {$/;"	f	class:BMPSet	signature:(const uint8_t *s, int32_t length, USetSpanCondition spanCondition) const
spanBackUTF8	bmpset.h	/^    int32_t spanBackUTF8(const uint8_t *s, int32_t length, USetSpanCondition spanCondition) const;$/;"	p	class:BMPSet	access:public	signature:(const uint8_t *s, int32_t length, USetSpanCondition spanCondition) const
spanBackUTF8	unicode/uniset.h	/^    int32_t spanBackUTF8(const char *s, int32_t length, USetSpanCondition spanCondition) const;$/;"	p	class:UnicodeSet	access:public	signature:(const char *s, int32_t length, USetSpanCondition spanCondition) const
spanBackUTF8	uniset.cpp	/^int32_t UnicodeSet::spanBackUTF8(const char *s, int32_t length, USetSpanCondition spanCondition) const {$/;"	f	class:UnicodeSet	signature:(const char *s, int32_t length, USetSpanCondition spanCondition) const
spanBackUTF8	unisetspan.cpp	/^int32_t UnicodeSetStringSpan::spanBackUTF8(const uint8_t *s, int32_t length, USetSpanCondition spanCondition) const {$/;"	f	class:UnicodeSetStringSpan	signature:(const uint8_t *s, int32_t length, USetSpanCondition spanCondition) const
spanBackUTF8	unisetspan.h	/^    int32_t spanBackUTF8(const uint8_t *s, int32_t length, USetSpanCondition spanCondition) const;$/;"	p	class:UnicodeSetStringSpan	access:public	signature:(const uint8_t *s, int32_t length, USetSpanCondition spanCondition) const
spanLengths	unisetspan.h	/^    uint8_t *spanLengths;$/;"	m	class:UnicodeSetStringSpan	access:private
spanNot	unisetspan.cpp	/^int32_t UnicodeSetStringSpan::spanNot(const UChar *s, int32_t length) const {$/;"	f	class:UnicodeSetStringSpan	signature:(const UChar *s, int32_t length) const
spanNot	unisetspan.h	/^    int32_t spanNot(const UChar *s, int32_t length) const;$/;"	p	class:UnicodeSetStringSpan	access:private	signature:(const UChar *s, int32_t length) const
spanNotBack	unisetspan.cpp	/^int32_t UnicodeSetStringSpan::spanNotBack(const UChar *s, int32_t length) const {$/;"	f	class:UnicodeSetStringSpan	signature:(const UChar *s, int32_t length) const
spanNotBack	unisetspan.h	/^    int32_t spanNotBack(const UChar *s, int32_t length) const;$/;"	p	class:UnicodeSetStringSpan	access:private	signature:(const UChar *s, int32_t length) const
spanNotBackUTF8	unisetspan.cpp	/^int32_t UnicodeSetStringSpan::spanNotBackUTF8(const uint8_t *s, int32_t length) const {$/;"	f	class:UnicodeSetStringSpan	signature:(const uint8_t *s, int32_t length) const
spanNotBackUTF8	unisetspan.h	/^    int32_t spanNotBackUTF8(const uint8_t *s, int32_t length) const;$/;"	p	class:UnicodeSetStringSpan	access:private	signature:(const uint8_t *s, int32_t length) const
spanNotUTF8	unisetspan.cpp	/^int32_t UnicodeSetStringSpan::spanNotUTF8(const uint8_t *s, int32_t length) const {$/;"	f	class:UnicodeSetStringSpan	signature:(const uint8_t *s, int32_t length) const
spanNotUTF8	unisetspan.h	/^    int32_t spanNotUTF8(const uint8_t *s, int32_t length) const;$/;"	p	class:UnicodeSetStringSpan	access:private	signature:(const uint8_t *s, int32_t length) const
spanOne	unisetspan.cpp	/^spanOne(const UnicodeSet &set, const UChar *s, int32_t length) {$/;"	f	file:	signature:(const UnicodeSet &set, const UChar *s, int32_t length)
spanOneBack	unisetspan.cpp	/^spanOneBack(const UnicodeSet &set, const UChar *s, int32_t length) {$/;"	f	file:	signature:(const UnicodeSet &set, const UChar *s, int32_t length)
spanOneBackUTF8	unisetspan.cpp	/^spanOneBackUTF8(const UnicodeSet &set, const uint8_t *s, int32_t length) {$/;"	f	file:	signature:(const UnicodeSet &set, const uint8_t *s, int32_t length)
spanOneUTF8	unisetspan.cpp	/^spanOneUTF8(const UnicodeSet &set, const uint8_t *s, int32_t length) {$/;"	f	file:	signature:(const UnicodeSet &set, const uint8_t *s, int32_t length)
spanQuickCheckYes	filterednormalizer2.cpp	/^FilteredNormalizer2::spanQuickCheckYes(const UnicodeString &s, UErrorCode &errorCode) const {$/;"	f	class:FilteredNormalizer2	signature:(const UnicodeString &s, UErrorCode &errorCode) const
spanQuickCheckYes	normalizer2.cpp	/^    spanQuickCheckYes(const UChar *src, const UChar *limit, UErrorCode &) const {$/;"	f	class:ComposeNormalizer2	file:	access:private	signature:(const UChar *src, const UChar *limit, UErrorCode &) const
spanQuickCheckYes	normalizer2.cpp	/^    spanQuickCheckYes(const UChar *src, const UChar *limit, UErrorCode &errorCode) const = 0;$/;"	p	class:Normalizer2WithImpl	file:	access:public	signature:(const UChar *src, const UChar *limit, UErrorCode &errorCode) const
spanQuickCheckYes	normalizer2.cpp	/^    spanQuickCheckYes(const UChar *src, const UChar *limit, UErrorCode &errorCode) const {$/;"	f	class:DecomposeNormalizer2	file:	access:private	signature:(const UChar *src, const UChar *limit, UErrorCode &errorCode) const
spanQuickCheckYes	normalizer2.cpp	/^    spanQuickCheckYes(const UChar *src, const UChar *limit, UErrorCode &errorCode) const {$/;"	f	class:FCDNormalizer2	file:	access:private	signature:(const UChar *src, const UChar *limit, UErrorCode &errorCode) const
spanQuickCheckYes	normalizer2.cpp	/^    spanQuickCheckYes(const UnicodeString &s, UErrorCode &) const {$/;"	f	class:NoopNormalizer2	file:	access:private	signature:(const UnicodeString &s, UErrorCode &) const
spanQuickCheckYes	normalizer2.cpp	/^    spanQuickCheckYes(const UnicodeString &s, UErrorCode &errorCode) const {$/;"	f	class:Normalizer2WithImpl	access:public	signature:(const UnicodeString &s, UErrorCode &errorCode) const
spanQuickCheckYes	unicode/normalizer2.h	/^    spanQuickCheckYes(const UnicodeString &s, UErrorCode &errorCode) const = 0;$/;"	p	class:Normalizer2	access:public	signature:(const UnicodeString &s, UErrorCode &errorCode) const
spanQuickCheckYes	unicode/normalizer2.h	/^    spanQuickCheckYes(const UnicodeString &s, UErrorCode &errorCode) const;$/;"	p	class:FilteredNormalizer2	access:public	signature:(const UnicodeString &s, UErrorCode &errorCode) const
spanSet	unisetspan.h	/^    UnicodeSet spanSet;$/;"	m	class:UnicodeSetStringSpan	access:private
spanUTF8	bmpset.cpp	/^BMPSet::spanUTF8(const uint8_t *s, int32_t length, USetSpanCondition spanCondition) const {$/;"	f	class:BMPSet	signature:(const uint8_t *s, int32_t length, USetSpanCondition spanCondition) const
spanUTF8	bmpset.h	/^    const uint8_t *spanUTF8(const uint8_t *s, int32_t length, USetSpanCondition spanCondition) const;$/;"	p	class:BMPSet	access:public	signature:(const uint8_t *s, int32_t length, USetSpanCondition spanCondition) const
spanUTF8	unicode/uniset.h	/^    int32_t spanUTF8(const char *s, int32_t length, USetSpanCondition spanCondition) const;$/;"	p	class:UnicodeSet	access:public	signature:(const char *s, int32_t length, USetSpanCondition spanCondition) const
spanUTF8	uniset.cpp	/^int32_t UnicodeSet::spanUTF8(const char *s, int32_t length, USetSpanCondition spanCondition) const {$/;"	f	class:UnicodeSet	signature:(const char *s, int32_t length, USetSpanCondition spanCondition) const
spanUTF8	unisetspan.cpp	/^int32_t UnicodeSetStringSpan::spanUTF8(const uint8_t *s, int32_t length, USetSpanCondition spanCondition) const {$/;"	f	class:UnicodeSetStringSpan	signature:(const uint8_t *s, int32_t length, USetSpanCondition spanCondition) const
spanUTF8	unisetspan.h	/^    int32_t spanUTF8(const uint8_t *s, int32_t length, USetSpanCondition spanCondition) const;$/;"	p	class:UnicodeSetStringSpan	access:public	signature:(const uint8_t *s, int32_t length, USetSpanCondition spanCondition) const
spare1	unicode/utext.h	/^    UTextClose  *spare1;$/;"	m	struct:UTextFuncs	access:public
spare2	unicode/utext.h	/^    UTextClose  *spare2;$/;"	m	struct:UTextFuncs	access:public
spare3	unicode/utext.h	/^    UTextClose  *spare3;$/;"	m	struct:UTextFuncs	access:public
split	rbbisetb.cpp	/^void RangeDescriptor::split(UChar32 where, UErrorCode &status) {$/;"	f	class:RangeDescriptor	signature:(UChar32 where, UErrorCode &status)
split	rbbisetb.h	/^    void split(UChar32 where, UErrorCode &status);   \/\/ Spit this range in two at "where", with$/;"	p	class:RangeDescriptor	access:public	signature:(UChar32 where, UErrorCode &status)
sprepData	sprpimpl.h	/^    UDataMemory* sprepData;$/;"	m	struct:UStringPrepProfile	access:public
sprepTrie	sprpimpl.h	/^    UTrie sprepTrie;$/;"	m	struct:UStringPrepProfile	access:public
src_files	Android.mk	/^src_files := \\$/;"	m
stackArray	cmemory.h	/^    T stackArray[stackCapacity];$/;"	m	class:MaybeStackArray	access:private
stackArray	cmemory.h	/^    T stackArray[stackCapacity];$/;"	m	class:MaybeStackHeaderAndArray	access:private
stackHeader	cmemory.h	/^    H stackHeader;$/;"	m	class:MaybeStackHeaderAndArray	access:private
standardBias	wintz.c	/^    int32_t standardBias;$/;"	m	struct:__anon1	file:	access:public
standardDate	wintz.c	/^    SYSTEMTIME standardDate;$/;"	m	struct:__anon1	file:	access:public
start	normalizer2impl.h	/^    UChar *start, *reorderStart, *limit;$/;"	m	class:ReorderingBuffer	access:private
start	ucase.h	/^    int32_t start, index, limit;$/;"	m	struct:UCaseContext	access:public
start	unames.c	/^    uint32_t start, end;$/;"	m	struct:__anon93	file:	access:public
start	unicode/uiter.h	/^    int32_t start;$/;"	m	struct:UCharIterator	access:public
start	unisetspan.cpp	/^    int32_t start;$/;"	m	class:OffsetList	file:	access:private
start	unormcmp.cpp	/^    const UChar *start, *s, *limit;$/;"	m	struct:CmpEquivLevel	file:	access:public
start	ustrcase.c	/^    const UChar *start, *s, *limit;$/;"	m	struct:CmpEquivLevel	file:	access:public
start	utrie2.h	/^    const UChar *start;$/;"	m	class:BackwardUTrie2StringIterator	access:public
startIndex	normlzr.cpp	/^int32_t Normalizer::startIndex() const {$/;"	f	class:Normalizer	signature:() const
startIndex	unicode/chariter.h	/^    inline int32_t       startIndex(void) const;$/;"	p	class:CharacterIterator	access:public	signature:(void) const
startIndex	unicode/chariter.h	/^CharacterIterator::startIndex(void) const {$/;"	f	class:CharacterIterator	signature:(void) const
startIndex	unicode/normlzr.h	/^  int32_t            startIndex(void) const;$/;"	p	class:Normalizer	access:public	signature:(void) const
startL2EN	ubidi.c	/^    int32_t startL2EN;                  \/* start of level 2 sequence    *\/$/;"	m	struct:__anon18	file:	access:public
startON	ubidi.c	/^    int32_t startON;                    \/* start of ON sequence         *\/$/;"	m	struct:__anon18	file:	access:public
startsWith	unicode/unistr.h	/^  inline UBool startsWith(const UChar *srcChars,$/;"	p	class:UnicodeString	access:public	signature:(const UChar *srcChars, int32_t srcLength) const
startsWith	unicode/unistr.h	/^  inline UBool startsWith(const UChar *srcChars,$/;"	p	class:UnicodeString	access:public	signature:(const UChar *srcChars, int32_t srcStart, int32_t srcLength) const
startsWith	unicode/unistr.h	/^  inline UBool startsWith(const UnicodeString& srcText,$/;"	p	class:UnicodeString	access:public	signature:(const UnicodeString& srcText, int32_t srcStart, int32_t srcLength) const
startsWith	unicode/unistr.h	/^  inline UBool startsWith(const UnicodeString& text) const;$/;"	p	class:UnicodeString	access:public	signature:(const UnicodeString& text) const
startsWith	unicode/unistr.h	/^UnicodeString::startsWith(const UChar *srcChars,$/;"	f	class:UnicodeString	signature:(const UChar *srcChars, int32_t srcLength) const
startsWith	unicode/unistr.h	/^UnicodeString::startsWith(const UChar *srcChars,$/;"	f	class:UnicodeString	signature:(const UChar *srcChars, int32_t srcStart, int32_t srcLength) const
startsWith	unicode/unistr.h	/^UnicodeString::startsWith(const UnicodeString& srcText,$/;"	f	class:UnicodeString	signature:(const UnicodeString& srcText, int32_t srcStart, int32_t srcLength) const
startsWith	unicode/unistr.h	/^UnicodeString::startsWith(const UnicodeString& text) const$/;"	f	class:UnicodeString	signature:(const UnicodeString& text) const
startsWithPrefix	uidna.cpp	/^startsWithPrefix(const UChar* src , int32_t srcLength){$/;"	f	file:	signature:(const UChar* src , int32_t srcLength)
state	ubidi.c	/^    int32_t state;                      \/* current state                *\/$/;"	m	struct:__anon18	file:	access:public
state	unorm_it.c	/^    uint32_t state;$/;"	m	struct:UNormIterator	file:	access:public
stateTable	ucnvmbcs.h	/^    const int32_t (*stateTable)\/*[countStates]*\/[256];$/;"	m	struct:UConverterMBCSTable	access:public
stateTableOwned	ucnvmbcs.h	/^    uint8_t countStates, dbcsOnlyState, stateTableOwned;$/;"	m	struct:UConverterMBCSTable	access:public
states	unorm_it.c	/^    uint32_t *states;$/;"	m	struct:UNormIterator	file:	access:public
statesBuffer	unorm_it.c	/^    uint32_t statesBuffer[INITIAL_CAPACITY+1]; \/* one more than charsBuffer[]! *\/$/;"	m	struct:UNormIterator	file:	access:public
staticArray	unicode/uset.h	/^    uint16_t staticArray[USET_SERIALIZED_STATIC_ARRAY_CAPACITY];$/;"	m	struct:USerializedSet	access:public
staticData	ucnv_bld.h	/^    const UConverterStaticData *staticData; \/* pointer to the static (non changing) data. *\/$/;"	m	struct:UConverterSharedData	access:public
staticLengths	unisetspan.h	/^    int32_t staticLengths[32];$/;"	m	class:UnicodeSetStringSpan	access:private
staticLibraryList	icuplug.c	/^static UPlugLibrary   staticLibraryList[UPLUG_LIBRARY_INITIAL_COUNT];$/;"	v	file:
staticList	unisetspan.cpp	/^    UBool staticList[16];$/;"	m	class:OffsetList	file:	access:private
staticOffsets	ucnvscsu.c	/^static const uint32_t staticOffsets[8]={$/;"	v	file:
stdID	putil.c	/^    const char *stdID;$/;"	m	struct:OffsetZoneMapping	file:	access:public
str	normalizer2impl.h	/^    UnicodeString &str;$/;"	m	class:ReorderingBuffer	access:private
strIndex	ucnv_io.c	/^    uint16_t strIndex, sortIndex;$/;"	m	struct:TempRow	file:	access:public
strcmpMax	ucase.c	/^strcmpMax(const UChar *s, int32_t length, const UChar *t, int32_t max) {$/;"	f	file:	signature:(const UChar *s, int32_t length, const UChar *t, int32_t max)
strcpy_returnEnd	umapfile.c	/^    static char *strcpy_returnEnd(char *dest, const char *src)$/;"	f	file:	signature:(char *dest, const char *src)
string	unicode/usetiter.h	/^    const UnicodeString* string;$/;"	m	class:UnicodeSetIterator	access:protected
stringCount	unicode/usetiter.h	/^    int32_t stringCount;$/;"	m	class:UnicodeSetIterator	access:protected
stringIterator	uiter.cpp	/^static const UCharIterator stringIterator={$/;"	v	file:
stringIteratorCurrent	uiter.cpp	/^stringIteratorCurrent(UCharIterator *iter) {$/;"	f	file:	signature:(UCharIterator *iter)
stringIteratorGetIndex	uiter.cpp	/^stringIteratorGetIndex(UCharIterator *iter, UCharIteratorOrigin origin) {$/;"	f	file:	signature:(UCharIterator *iter, UCharIteratorOrigin origin)
stringIteratorGetState	uiter.cpp	/^stringIteratorGetState(const UCharIterator *iter) {$/;"	f	file:	signature:(const UCharIterator *iter)
stringIteratorHasNext	uiter.cpp	/^stringIteratorHasNext(UCharIterator *iter) {$/;"	f	file:	signature:(UCharIterator *iter)
stringIteratorHasPrevious	uiter.cpp	/^stringIteratorHasPrevious(UCharIterator *iter) {$/;"	f	file:	signature:(UCharIterator *iter)
stringIteratorMove	uiter.cpp	/^stringIteratorMove(UCharIterator *iter, int32_t delta, UCharIteratorOrigin origin) {$/;"	f	file:	signature:(UCharIterator *iter, int32_t delta, UCharIteratorOrigin origin)
stringIteratorNext	uiter.cpp	/^stringIteratorNext(UCharIterator *iter) {$/;"	f	file:	signature:(UCharIterator *iter)
stringIteratorPrevious	uiter.cpp	/^stringIteratorPrevious(UCharIterator *iter) {$/;"	f	file:	signature:(UCharIterator *iter)
stringIteratorSetState	uiter.cpp	/^stringIteratorSetState(UCharIterator *iter, uint32_t state, UErrorCode *pErrorCode) {$/;"	f	file:	signature:(UCharIterator *iter, uint32_t state, UErrorCode *pErrorCode)
stringNormalizationType	ucnv_io.h	/^    uint16_t stringNormalizationType;$/;"	m	struct:__anon141	access:public
stringPool_count	propname.h	/^    int16_t stringPool_count; \/*  number of strings (not size in bytes) *\/$/;"	m	class:PropertyAliases	access:private
stringPool_offset	propname.h	/^    Offset stringPool_offset; \/*  offset to start of pool *\/$/;"	m	class:PropertyAliases	access:private
stringSpan	unicode/uniset.h	/^    UnicodeSetStringSpan *stringSpan;$/;"	m	class:UnicodeSet	access:private
stringTable	ucnv_io.h	/^    const uint16_t *stringTable;$/;"	m	struct:UConverterAlias	access:public
stringTableIndex	ucnv_io.c	/^    stringTableIndex=8,$/;"	e	enum:__anon128	file:
stringTableSize	ucnv_io.h	/^    uint32_t stringTableSize;$/;"	m	struct:UConverterAlias	access:public
strings	unicode/uniset.h	/^    UVector* strings; \/\/ maintained in sorted order$/;"	m	class:UnicodeSet	access:private
strings	unisetspan.h	/^    const UVector &strings;$/;"	m	class:UnicodeSetStringSpan	access:private
stripForCompare	ucnv_io.c	/^    StripForCompareFn *stripForCompare;$/;"	m	struct:TempAliasTable	file:	access:public
stripRules	rbbiscan.cpp	/^UnicodeString RBBIRuleScanner::stripRules(const UnicodeString &rules) {$/;"	f	class:RBBIRuleScanner	signature:(const UnicodeString &rules)
stripRules	rbbiscan.h	/^    static UnicodeString stripRules(const UnicodeString &rules);$/;"	p	class:RBBIRuleScanner	access:public	signature:(const UnicodeString &rules)
structSize	icuplug.c	/^  uint32_t structSize;    \/**< initialized to the size of this structure *\/$/;"	m	struct:UPlugData	file:	access:public
structSize	ucnv_bld.h	/^    uint32_t structSize;                \/* +0: 4 Size of this structure *\/$/;"	m	struct:UConverterStaticData	access:public
structSize	ucnv_bld.h	/^    uint32_t structSize;            \/* Size of this structure *\/$/;"	m	struct:UConverterSharedData	access:public
subChar	ucnv_bld.h	/^    uint8_t subChar[UCNV_MAX_SUBCHAR_LEN]; \/* +72: 4  [note:  4 and 8 byte boundary] *\/$/;"	m	struct:UConverterStaticData	access:public
subChar1	ucnv_bld.h	/^    uint8_t subChar1;                                   \/* single-byte substitution character if different from subChar *\/$/;"	m	struct:UConverter	access:public
subChar1	ucnv_bld.h	/^    uint8_t subChar1;               \/* +80: 1  single-byte substitution character for IBM MBCS (0 if none) *\/$/;"	m	struct:UConverterStaticData	access:public
subCharLen	ucnv_bld.h	/^    int8_t subCharLen;                  \/* length of the codepage specific character sequence *\/$/;"	m	struct:UConverter	access:public
subCharLen	ucnv_bld.h	/^    int8_t subCharLen;              \/* +76: 1 *\/$/;"	m	struct:UConverterStaticData	access:public
subChars	ucnv_bld.h	/^    uint8_t *subChars;$/;"	m	struct:UConverter	access:public
subCnv	ucnvhz.c	/^    UConverter subCnv;$/;"	m	struct:cloneHZStruct	file:	access:public
subQuickSort	uarrsort.c	/^subQuickSort(char *array, int32_t start, int32_t limit, int32_t itemSize,$/;"	f	file:	signature:(char *array, int32_t start, int32_t limit, int32_t itemSize, UComparator *cmp, const void *context, void *px, void *pw)
subUChars	ucnv_bld.h	/^    UChar subUChars[UCNV_MAX_SUBCHAR_LEN\/U_SIZEOF_UCHAR]; \/* see subChars documentation *\/$/;"	m	struct:UConverter	access:public
substr	unicode/stringpiece.h	/^  StringPiece substr(int32_t pos, int32_t len = npos) const {$/;"	f	class:StringPiece	access:public	signature:(int32_t pos, int32_t len = npos) const
suffix	udata.cpp	/^    const char *suffix;                            \/* item suffix (can be null) *\/$/;"	m	class:UDataPathIterator	file:	access:private
swap	propname.cpp	/^EnumToOffset::swap(const UDataSwapper *ds,$/;"	f	class:EnumToOffset	signature:(const UDataSwapper *ds, const uint8_t *inBytes, int32_t length, uint8_t *outBytes, uint8_t *temp, int32_t pos, UErrorCode *pErrorCode)
swap	propname.cpp	/^NameToEnum::swap(const UDataSwapper *ds,$/;"	f	class:NameToEnum	signature:(const UDataSwapper *ds, const uint8_t *inBytes, int32_t length, uint8_t *outBytes, uint8_t *temp, int32_t pos, UErrorCode *pErrorCode)
swap	propname.cpp	/^NonContiguousEnumToOffset::swap(const UDataSwapper *ds,$/;"	f	class:NonContiguousEnumToOffset	signature:(const UDataSwapper *ds, const uint8_t *inBytes, int32_t length, uint8_t *outBytes, uint8_t *temp, int32_t pos, UErrorCode *pErrorCode)
swap	propname.cpp	/^PropertyAliases::swap(const UDataSwapper *ds,$/;"	f	class:PropertyAliases	signature:(const UDataSwapper *ds, const uint8_t *inBytes, int32_t length, uint8_t *outBytes, UErrorCode *pErrorCode)
swap	propname.h	/^    swap(const UDataSwapper *ds,$/;"	p	class:EnumToOffset	access:public	signature:(const UDataSwapper *ds, const uint8_t *inBytes, int32_t length, uint8_t *outBytes, uint8_t *temp, int32_t pos, UErrorCode *pErrorCode)
swap	propname.h	/^    swap(const UDataSwapper *ds,$/;"	p	class:NameToEnum	access:public	signature:(const UDataSwapper *ds, const uint8_t *inBytes, int32_t length, uint8_t *outBytes, uint8_t *temp, int32_t pos, UErrorCode *pErrorCode)
swap	propname.h	/^    swap(const UDataSwapper *ds,$/;"	p	class:NonContiguousEnumToOffset	access:public	signature:(const UDataSwapper *ds, const uint8_t *inBytes, int32_t length, uint8_t *outBytes, uint8_t *temp, int32_t pos, UErrorCode *pErrorCode)
swap	propname.h	/^    swap(const UDataSwapper *ds,$/;"	p	class:PropertyAliases	access:public	signature:(const UDataSwapper *ds, const uint8_t *inBytes, int32_t length, uint8_t *outBytes, UErrorCode *pErrorCode)
swapArray16	udataswp.h	/^    UDataSwapFn *swapArray16;$/;"	m	struct:UDataSwapper	access:public
swapArray32	udataswp.h	/^    UDataSwapFn *swapArray32;$/;"	m	struct:UDataSwapper	access:public
swapBuffers	unicode/uniset.h	/^    void swapBuffers(void);$/;"	p	class:UnicodeSet	access:private	signature:(void)
swapBuffers	uniset.cpp	/^void UnicodeSet::swapBuffers(void) {$/;"	f	class:UnicodeSet	signature:(void)
swapInvChars	udataswp.h	/^    UDataSwapFn *swapInvChars;$/;"	m	struct:UDataSwapper	access:public
swapLFNLFromUnicodeBytes	ucnvmbcs.h	/^    uint8_t *swapLFNLFromUnicodeBytes;      \/* for swaplfnl *\/$/;"	m	struct:UConverterMBCSTable	access:public
swapLFNLName	ucnvmbcs.h	/^    char *swapLFNLName;$/;"	m	struct:UConverterMBCSTable	access:public
swapLFNLStateTable	ucnvmbcs.h	/^    int32_t (*swapLFNLStateTable)\/*[countStates]*\/[256]; \/* for swaplfnl *\/$/;"	m	struct:UConverterMBCSTable	access:public
swapped	ucnvsel.cpp	/^  uint8_t* swapped;$/;"	m	struct:UConverterSelector	file:	access:public
sym	icuplug.c	/^  char sym[UPLUG_NAME_MAX];        \/**< plugin symbol, or NULL *\/$/;"	m	struct:UPlugData	file:	access:public
sym	ruleiter.h	/^    const SymbolTable* sym;$/;"	m	class:RuleCharacterIterator	access:private
t1	cmemory.h	/^    long    t1;$/;"	m	union:__anon91	access:public
t2	cmemory.h	/^    double  t2;$/;"	m	union:__anon91	access:public
t3	cmemory.h	/^    void   *t3;$/;"	m	union:__anon91	access:public
table	ucnv_bld.h	/^    void *table;                    \/* Unused. This used to be a UConverterTable - Pointer to conversion data - see mbcs below *\/$/;"	m	struct:UConverterSharedData	access:public
table7FF	bmpset.h	/^    uint32_t table7FF[64];$/;"	m	class:BMPSet	access:private
tableOptionsIndex	ucnv_io.c	/^    tableOptionsIndex=7,$/;"	e	enum:__anon128	file:
tableSize	unicode/utext.h	/^    int32_t       tableSize;$/;"	m	struct:UTextFuncs	access:public
tag	rbbinode.h	/^            tag,$/;"	e	enum:RBBINode::NodeType
tagList	ucnv_io.h	/^    const uint16_t *tagList;$/;"	m	struct:UConverterAlias	access:public
tagListIndex	ucnv_io.c	/^    tagListIndex=2,$/;"	e	enum:__anon128	file:
tagListSize	ucnv_io.h	/^    uint32_t tagListSize;$/;"	m	struct:UConverterAlias	access:public
taggedAliasArray	ucnv_io.h	/^    const uint16_t *taggedAliasArray;$/;"	m	struct:UConverterAlias	access:public
taggedAliasArrayIndex	ucnv_io.c	/^    taggedAliasArrayIndex=5,$/;"	e	enum:__anon128	file:
taggedAliasArraySize	ucnv_io.h	/^    uint32_t taggedAliasArraySize;$/;"	m	struct:UConverterAlias	access:public
taggedAliasLists	ucnv_io.h	/^    const uint16_t *taggedAliasLists;$/;"	m	struct:UConverterAlias	access:public
taggedAliasListsIndex	ucnv_io.c	/^    taggedAliasListsIndex=6,$/;"	e	enum:__anon128	file:
taggedAliasListsSize	ucnv_io.h	/^    uint32_t taggedAliasListsSize;$/;"	m	struct:UConverterAlias	access:public
tail	ulist.c	/^    UListNode *tail;$/;"	m	struct:UList	file:	access:public
tailChar	ushape.c	/^static UChar tailChar = OLD_TAIL_CHAR;$/;"	v	file:
tailFamilyIsolatedFinal	ushape.c	/^static const uint8_t tailFamilyIsolatedFinal[] = {$/;"	v	file:
target	unicode/ucnv_err.h	/^    UChar *target;              \/**< Pointer to the target buffer. @stable ICU 2.0    *\/$/;"	m	struct:__anon106	access:public
target	unicode/ucnv_err.h	/^    char *target;               \/**< Pointer to the target buffer. @stable ICU 2.0    *\/$/;"	m	struct:__anon105	access:public
targetIndex	ucnvhz.c	/^    int32_t targetIndex;$/;"	m	struct:__anon61	file:	access:public
targetLimit	unicode/ucnv_err.h	/^    const UChar *targetLimit;   \/**< Pointer to the limit (end + 1) of target buffer. @stable ICU 2.0     *\/$/;"	m	struct:__anon106	access:public
targetLimit	unicode/ucnv_err.h	/^    const char *targetLimit;    \/**< Pointer to the limit (end + 1) of target buffer. @stable ICU 2.0     *\/$/;"	m	struct:__anon105	access:public
tashkeelMedial	ushape.c	/^static const uint8_t tashkeelMedial[] = {$/;"	v	file:
tempSubString	unicode/unistr.h	/^  UnicodeString tempSubString(int32_t start=0, int32_t length=INT32_MAX) const;$/;"	p	class:UnicodeString	access:public	signature:(int32_t start=0, int32_t length=INT32_MAX) const
tempSubString	unistr.cpp	/^UnicodeString::tempSubString(int32_t start, int32_t len) const {$/;"	f	class:UnicodeString	signature:(int32_t start, int32_t len) const
tempSubStringBetween	unicode/unistr.h	/^  inline UnicodeString tempSubStringBetween(int32_t start, int32_t limit=INT32_MAX) const;$/;"	p	class:UnicodeString	access:public	signature:(int32_t start, int32_t limit=INT32_MAX) const
tempSubStringBetween	unicode/unistr.h	/^UnicodeString::tempSubStringBetween(int32_t start, int32_t limit) const {$/;"	f	class:UnicodeString	signature:(int32_t start, int32_t limit) const
text	ruleiter.h	/^    const UnicodeString& text;$/;"	m	class:RuleCharacterIterator	access:private
text	ubidiimp.h	/^    const UChar *text;$/;"	m	struct:UBiDi	access:public
text	unicode/normlzr.h	/^  CharacterIterator  *text;$/;"	m	class:Normalizer	access:private
text	unicode/schriter.h	/^  UnicodeString            text;$/;"	m	class:StringCharacterIterator	access:protected
text	unicode/uchriter.h	/^  const UChar*            text;$/;"	m	class:UCharCharacterIterator	access:protected
textArray	usc_impl.c	/^    const UChar *textArray;$/;"	m	struct:UScriptRun	file:	access:public
textLength	unicode/chariter.h	/^    int32_t textLength;$/;"	m	class:CharacterIterator	access:protected
textLength	usc_impl.c	/^    int32_t textLength;$/;"	m	struct:UScriptRun	file:	access:public
tmutfmtHashTableValueComparator	unicode/urename.h	215;"	d
toASCIILower	uidna.cpp	/^toASCIILower(UChar ch){$/;"	f	file:	signature:(UChar ch)
toArray	uvector.cpp	/^void** UVector::toArray(void** result) const {$/;"	f	class:UVector	signature:(void** result) const
toArray	uvector.h	/^    void** toArray(void** result) const;$/;"	p	class:UVector	access:public	signature:(void** result) const
toBase64	ucnv_u7.c	/^toBase64[64]={$/;"	v	file:
toDate	unicode/dtintrv.h	/^    UDate toDate;$/;"	m	class:DateInterval	access:private
toLower	unicode/unistr.h	/^  UnicodeString& toLower(const Locale& locale);$/;"	p	class:UnicodeString	access:public	signature:(const Locale& locale)
toLower	unicode/unistr.h	/^  UnicodeString& toLower(void);$/;"	p	class:UnicodeString	access:public	signature:(void)
toLower	unistr_case.cpp	/^UnicodeString::toLower() {$/;"	f	class:UnicodeString	signature:()
toLower	unistr_case.cpp	/^UnicodeString::toLower(const Locale &locale) {$/;"	f	class:UnicodeString	signature:(const Locale &locale)
toMatcher	unicode/unifilt.h	/^    virtual UnicodeMatcher* toMatcher() const;$/;"	p	class:UnicodeFilter	access:public	signature:() const
toMatcher	unicode/unifunct.h	/^    virtual UnicodeMatcher* toMatcher() const;$/;"	p	class:UnicodeFunctor	access:public	signature:() const
toMatcher	unifilt.cpp	/^UnicodeMatcher* UnicodeFilter::toMatcher() const {$/;"	f	class:UnicodeFilter	signature:() const
toMatcher	unifunct.cpp	/^UnicodeMatcher* UnicodeFunctor::toMatcher() const {$/;"	f	class:UnicodeFunctor	signature:() const
toPattern	unicode/unimatch.h	/^    virtual UnicodeString& toPattern(UnicodeString& result,$/;"	p	class:UnicodeMatcher	access:public	signature:(UnicodeString& result, UBool escapeUnprintable = FALSE) const
toPattern	unicode/uniset.h	/^    virtual UnicodeString& toPattern(UnicodeString& result,$/;"	p	class:UnicodeSet	access:public	signature:(UnicodeString& result, UBool escapeUnprintable = FALSE) const
toPattern	uniset.cpp	/^UnicodeString& UnicodeSet::toPattern(UnicodeString& result,$/;"	f	class:UnicodeSet	signature:(UnicodeString& result, UBool escapeUnprintable) const
toReplacer	unicode/unifunct.h	/^    virtual UnicodeReplacer* toReplacer() const;$/;"	p	class:UnicodeFunctor	access:public	signature:() const
toReplacer	unifunct.cpp	/^UnicodeReplacer* UnicodeFunctor::toReplacer() const {$/;"	f	class:UnicodeFunctor	signature:() const
toStringPiece	charstr.h	/^    StringPiece toStringPiece() const { return StringPiece(buffer.getAlias(), len); }$/;"	f	class:CharString	access:public	signature:() const
toTitle	unicode/unistr.h	/^  UnicodeString &toTitle(BreakIterator *titleIter);$/;"	p	class:UnicodeString	access:public	signature:(BreakIterator *titleIter)
toTitle	unicode/unistr.h	/^  UnicodeString &toTitle(BreakIterator *titleIter, const Locale &locale);$/;"	p	class:UnicodeString	access:public	signature:(BreakIterator *titleIter, const Locale &locale)
toTitle	unicode/unistr.h	/^  UnicodeString &toTitle(BreakIterator *titleIter, const Locale &locale, uint32_t options);$/;"	p	class:UnicodeString	access:public	signature:(BreakIterator *titleIter, const Locale &locale, uint32_t options)
toTitle	unistr_case.cpp	/^UnicodeString::toTitle(BreakIterator *titleIter) {$/;"	f	class:UnicodeString	signature:(BreakIterator *titleIter)
toTitle	unistr_case.cpp	/^UnicodeString::toTitle(BreakIterator *titleIter, const Locale &locale) {$/;"	f	class:UnicodeString	signature:(BreakIterator *titleIter, const Locale &locale)
toTitle	unistr_case.cpp	/^UnicodeString::toTitle(BreakIterator *titleIter, const Locale &locale, uint32_t options) {$/;"	f	class:UnicodeString	signature:(BreakIterator *titleIter, const Locale &locale, uint32_t options)
toU2022State	ucnv2022.c	/^    ISO2022State toU2022State, fromU2022State;$/;"	m	struct:__anon68	file:	access:public
toUByteOne	ucnvscsu.c	/^    uint8_t toUByteOne;$/;"	m	struct:SCSUData	file:	access:public
toUBytes	ucnv_bld.h	/^    uint8_t toUBytes[UCNV_MAX_CHAR_LEN-1];\/* more "toU status"; keeps the bytes of the current character *\/$/;"	m	struct:UConverter	access:public
toUCallbackReason	ucnv_bld.h	/^    UConverterCallbackReason toUCallbackReason; \/* (*fromCharErrorBehaviour) reason, set when error is detected *\/$/;"	m	struct:UConverter	access:public
toUCharsMapStart	utext.cpp	/^    int32_t   toUCharsMapStart;                      \/\/ Native index corresponding to$/;"	m	struct:UTF8Buf	file:	access:public
toUContext	ucnv_bld.h	/^    const void *toUContext;$/;"	m	struct:UConverter	access:public
toUDynamicOffsets	ucnvscsu.c	/^    uint32_t toUDynamicOffsets[8];$/;"	m	struct:SCSUData	file:	access:public
toUDynamicWindow	ucnvscsu.c	/^    int8_t toUQuoteWindow, toUDynamicWindow;$/;"	m	struct:SCSUData	file:	access:public
toUFallbacks	ucnvmbcs.h	/^    const _MBCSToUFallback *toUFallbacks;$/;"	m	struct:UConverterMBCSTable	access:public
toUIsSingleByteMode	ucnvscsu.c	/^    UBool toUIsSingleByteMode;$/;"	m	struct:SCSUData	file:	access:public
toULength	ucnv_bld.h	/^    int8_t toULength;                   \/* number of bytes in toUBytes *\/$/;"	m	struct:UConverter	access:public
toUPadding	ucnvscsu.c	/^    uint8_t toUPadding[3];$/;"	m	struct:SCSUData	file:	access:public
toUQuoteWindow	ucnvscsu.c	/^    int8_t toUQuoteWindow, toUDynamicWindow;$/;"	m	struct:SCSUData	file:	access:public
toUSet	unicode/uniset.h	/^    inline USet *toUSet();$/;"	p	class:UnicodeSet	access:public	signature:()
toUSet	unicode/uniset.h	/^    inline const USet * toUSet() const;$/;"	p	class:UnicodeSet	access:public	signature:() const
toUSet	unicode/uniset.h	/^inline USet *UnicodeSet::toUSet() {$/;"	f	class:UnicodeSet	signature:()
toUSet	unicode/uniset.h	/^inline const USet *UnicodeSet::toUSet() const {$/;"	f	class:UnicodeSet	signature:() const
toUState	ucnvscsu.c	/^    uint8_t toUState;$/;"	m	struct:SCSUData	file:	access:public
toUTF32	unicode/unistr.h	/^  int32_t toUTF32(UChar32 *utf32, int32_t capacity, UErrorCode &errorCode) const;$/;"	p	class:UnicodeString	access:public	signature:(UChar32 *utf32, int32_t capacity, UErrorCode &errorCode) const
toUTF32	unistr.cpp	/^UnicodeString::toUTF32(UChar32 *utf32, int32_t capacity, UErrorCode &errorCode) const {$/;"	f	class:UnicodeString	signature:(UChar32 *utf32, int32_t capacity, UErrorCode &errorCode) const
toUTF8	ucnv_cnv.h	/^    UConverterConvert toUTF8;$/;"	m	struct:UConverterImpl	access:public
toUTF8	unicode/unistr.h	/^  toUTF8(int32_t start, int32_t len,$/;"	p	class:UnicodeString	access:private	signature:(int32_t start, int32_t len, char *target, int32_t capacity) const
toUTF8	unicode/unistr.h	/^  void toUTF8(ByteSink &sink) const;$/;"	p	class:UnicodeString	access:public	signature:(ByteSink &sink) const
toUTF8	unistr.cpp	/^UnicodeString::toUTF8(ByteSink &sink) const {$/;"	f	class:UnicodeString	signature:(ByteSink &sink) const
toUTF8	unistr.cpp	/^UnicodeString::toUTF8(int32_t start, int32_t len,$/;"	f	class:UnicodeString	signature:(int32_t start, int32_t len, char *target, int32_t capacity) const
toUTF8String	unicode/unistr.h	/^  StringClass &toUTF8String(StringClass &result) const {$/;"	f	class:UnicodeString	access:public	signature:(StringClass &result) const
toUnicode	ucnv_cnv.h	/^    UConverterToUnicode toUnicode;$/;"	m	struct:UConverterImpl	access:public
toUnicodeCallback	ucnv2022.c	/^toUnicodeCallback(UConverter *cnv,$/;"	f	file:	signature:(UConverter *cnv, const uint32_t sourceChar, const uint32_t targetUniChar, UErrorCode* err)
toUnicodeStatus	ucnv_bld.h	/^    uint32_t toUnicodeStatus;           \/* Used to internalize stream status information *\/$/;"	m	struct:UConverter	access:public
toUnicodeStatus	ucnv_bld.h	/^    uint32_t toUnicodeStatus;$/;"	m	struct:UConverterSharedData	access:public
toUnicodeTable	ucnvisci.c	/^static const uint16_t toUnicodeTable[256]={$/;"	v	file:
toUnicodeWithOffsets	ucnv_cnv.h	/^    UConverterToUnicode toUnicodeWithOffsets;$/;"	m	struct:UConverterImpl	access:public
toUpper	unicode/unistr.h	/^  UnicodeString& toUpper(const Locale& locale);$/;"	p	class:UnicodeString	access:public	signature:(const Locale& locale)
toUpper	unicode/unistr.h	/^  UnicodeString& toUpper(void);$/;"	p	class:UnicodeString	access:public	signature:(void)
toUpper	unistr_case.cpp	/^UnicodeString::toUpper() {$/;"	f	class:UnicodeString	signature:()
toUpper	unistr_case.cpp	/^UnicodeString::toUpper(const Locale &locale) {$/;"	f	class:UnicodeString	signature:(const Locale &locale)
toUpperOrTitle	ucase.c	/^toUpperOrTitle(const UCaseProps *csp, UChar32 c,$/;"	f	file:	signature:(const UCaseProps *csp, UChar32 c, UCaseContextIterator *iter, void *context, const UChar **pString, const char *locale, int32_t *locCache, UBool upperNotTitle)
toc	udatamem.h	/^    const void       *toc;         \/* For common memory, table of contents for        *\/$/;"	m	struct:UDataMemory	access:public
tocLengthIndex	ucnv_io.c	/^    tocLengthIndex=0,$/;"	e	enum:__anon128	file:
token	icuplug.c	/^  uint32_t token;         \/**< must be U_PLUG_TOKEN *\/$/;"	m	struct:UPlugData	file:	access:public
tokenStringOffset	unames.c	/^    uint32_t tokenStringOffset, groupsOffset, groupStringOffset, algNamesOffset;$/;"	m	struct:__anon94	file:	access:public
total_size	propname.h	/^    int16_t total_size; \/*  size in bytes excluding the udata header *\/$/;"	m	class:PropertyAliases	access:private
trCollNames	utrace.c	/^trCollNames[] = {$/;"	v	file:
trConvNames	utrace.c	/^trConvNames[] = {$/;"	v	file:
trFnName	utrace.c	/^trFnName[] = {$/;"	v	file:
trailingWSStart	ubidiimp.h	/^    int32_t trailingWSStart;$/;"	m	struct:UBiDi	access:public
trie	normalizer2impl.cpp	/^    UTrie2 *trie;$/;"	m	struct:CanonIterData	file:	access:public
trie	propsvec.h	/^    UTrie2 *trie;$/;"	m	struct:UPVecToUTrie2Context	access:public
trie	ubidi_props.c	/^    UTrie2 trie;$/;"	m	struct:UBiDiProps	file:	access:public
trie	ucase.c	/^    UTrie2 trie;$/;"	m	struct:UCaseProps	file:	access:public
trie	ucnvsel.cpp	/^  UTrie2 *trie;              \/\/ 16 bit trie containing offsets into pv$/;"	m	struct:UConverterSelector	file:	access:public
trie	utrie2.h	/^    const UTrie2 *trie;$/;"	m	class:UTrie2StringIterator	access:public
trie	utrie2_builder.c	/^    UTrie2 *trie;$/;"	m	struct:NewTrieAndStatus	file:	access:public
triedict_swap	triedict.cpp	/^triedict_swap(const UDataSwapper *ds, const void *inData, int32_t length, void *outData,$/;"	f	signature:(const UDataSwapper *ds, const void *inData, int32_t length, void *outData, UErrorCode *status)
triedict_swap	triedict.h	/^triedict_swap(const UDataSwapper *ds,$/;"	p	signature:(const UDataSwapper *ds, const void *inData, int32_t length, void *outData, UErrorCode *pErrorCode)
triedict_swap	unicode/urename.h	216;"	d
trim	unicode/unistr.h	/^  UnicodeString& trim(void);$/;"	p	class:UnicodeString	access:public	signature:(void)
trim	unistr_props.cpp	/^UnicodeString::trim()$/;"	f	class:UnicodeString	signature:()
truncate	charstr.cpp	/^CharString &CharString::truncate(int32_t newLength) {$/;"	f	class:CharString	signature:(int32_t newLength)
truncate	charstr.h	/^    CharString &truncate(int32_t newLength);$/;"	p	class:CharString	access:public	signature:(int32_t newLength)
truncate	unicode/unistr.h	/^  inline UBool truncate(int32_t targetLength);$/;"	p	class:UnicodeString	access:public	signature:(int32_t targetLength)
truncate	unicode/unistr.h	/^UnicodeString::truncate(int32_t targetLength)$/;"	f	class:UnicodeString	signature:(int32_t targetLength)
type	ucnv_bld.c	/^  const UConverterType type;$/;"	m	struct:__anon43	file:	access:public
type	ucnv_cnv.h	/^    UConverterType type;$/;"	m	struct:UConverterImpl	access:public
type	unames.c	/^    uint8_t type, variant;$/;"	m	struct:__anon93	file:	access:public
u8Index	utrie2.cpp	/^u8Index(const UTrie2 *trie, UChar32 c, int32_t i) {$/;"	f	file:	signature:(const UTrie2 *trie, UChar32 c, int32_t i)
uCharNames	unames.c	/^static UCharNames *uCharNames=NULL;$/;"	v	file:
uCharNamesData	unames.c	/^static UDataMemory *uCharNamesData=NULL;$/;"	v	file:
uNext	uenumimp.h	/^    UEnumUNext *uNext;$/;"	m	struct:UEnumeration	access:public
uShapeLamalefBegin	ushape.c	/^static uint32_t uShapeLamalefBegin = U_SHAPE_LAMALEF_BEGIN;$/;"	v	file:
uShapeLamalefEnd	ushape.c	/^static uint32_t uShapeLamalefEnd    = U_SHAPE_LAMALEF_END;        $/;"	v	file:
uShapeTashkeelBegin	ushape.c	/^static uint32_t uShapeTashkeelBegin = U_SHAPE_TASHKEEL_BEGIN;$/;"	v	file:
uShapeTashkeelEnd	ushape.c	/^static uint32_t uShapeTashkeelEnd = U_SHAPE_TASHKEEL_END;$/;"	v	file:
u_UCharsToChars	uinvchar.c	/^u_UCharsToChars(const UChar *us, char *cs, int32_t length) {$/;"	f	signature:(const UChar *us, char *cs, int32_t length)
u_UCharsToChars	unicode/putil.h	/^u_UCharsToChars(const UChar *us, char *cs, int32_t length);$/;"	p	signature:(const UChar *us, char *cs, int32_t length)
u_UCharsToChars	unicode/urename.h	217;"	d
u_astrnlen	ustr_cnv.c	/^static int32_t u_astrnlen(const char *s1, int32_t n)$/;"	f	file:	signature:(const char *s1, int32_t n)
u_austrcpy	unicode/urename.h	218;"	d
u_austrcpy	unicode/ustring.h	/^U_STABLE char* U_EXPORT2 u_austrcpy(char *dst,$/;"	p	signature:(char *dst, const UChar *src )
u_austrcpy	ustr_cnv.c	/^u_austrcpy(char *s1,$/;"	f	signature:(char *s1, const UChar *ucs2 )
u_austrncpy	unicode/urename.h	219;"	d
u_austrncpy	unicode/ustring.h	/^U_STABLE char* U_EXPORT2 u_austrncpy(char *dst,$/;"	p	signature:(char *dst, const UChar *src, int32_t n )
u_austrncpy	ustr_cnv.c	/^u_austrncpy(char *s1,$/;"	f	signature:(char *s1, const UChar *ucs2, int32_t n)
u_bottomNBytesOfDouble	putil.c	/^u_bottomNBytesOfDouble(double* d, int n)$/;"	f	file:	signature:(double* d, int n)
u_catclose	ucat.c	/^u_catclose(u_nl_catd catd) {$/;"	f	signature:(u_nl_catd catd)
u_catclose	unicode/ucat.h	/^u_catclose(u_nl_catd catd);$/;"	p	signature:(u_nl_catd catd)
u_catclose	unicode/urename.h	220;"	d
u_catgets	ucat.c	/^u_catgets(u_nl_catd catd, int32_t set_num, int32_t msg_num,$/;"	f	signature:(u_nl_catd catd, int32_t set_num, int32_t msg_num, const UChar* s, int32_t* len, UErrorCode* ec)
u_catgets	unicode/ucat.h	/^u_catgets(u_nl_catd catd, int32_t set_num, int32_t msg_num,$/;"	p	signature:(u_nl_catd catd, int32_t set_num, int32_t msg_num, const UChar* s, int32_t* len, UErrorCode* ec)
u_catgets	unicode/urename.h	221;"	d
u_catopen	ucat.c	/^u_catopen(const char* name, const char* locale, UErrorCode* ec) {$/;"	f	signature:(const char* name, const char* locale, UErrorCode* ec)
u_catopen	unicode/ucat.h	/^u_catopen(const char* name, const char* locale, UErrorCode* ec);$/;"	p	signature:(const char* name, const char* locale, UErrorCode* ec)
u_catopen	unicode/urename.h	222;"	d
u_charAge	uchar.c	/^u_charAge(UChar32 c, UVersionInfo versionArray) {$/;"	f	signature:(UChar32 c, UVersionInfo versionArray)
u_charAge	unicode/uchar.h	/^u_charAge(UChar32 c, UVersionInfo versionArray);$/;"	p	signature:(UChar32 c, UVersionInfo versionArray)
u_charAge	unicode/urename.h	223;"	d
u_charDigitValue	uchar.c	/^u_charDigitValue(UChar32 c) {$/;"	f	signature:(UChar32 c)
u_charDigitValue	unicode/uchar.h	/^u_charDigitValue(UChar32 c);$/;"	p	signature:(UChar32 c)
u_charDigitValue	unicode/urename.h	224;"	d
u_charDirection	ubidi_props.c	/^u_charDirection(UChar32 c) {   $/;"	f	signature:(UChar32 c)
u_charDirection	unicode/uchar.h	/^u_charDirection(UChar32 c);$/;"	p	signature:(UChar32 c)
u_charDirection	unicode/urename.h	225;"	d
u_charFromName	unames.c	/^u_charFromName(UCharNameChoice nameChoice,$/;"	f	signature:(UCharNameChoice nameChoice, const char *name, UErrorCode *pErrorCode)
u_charFromName	unicode/uchar.h	/^u_charFromName(UCharNameChoice nameChoice,$/;"	p	signature:(UCharNameChoice nameChoice, const char *name, UErrorCode *pErrorCode)
u_charFromName	unicode/urename.h	226;"	d
u_charMirror	ubidi_props.c	/^u_charMirror(UChar32 c) {$/;"	f	signature:(UChar32 c)
u_charMirror	unicode/uchar.h	/^u_charMirror(UChar32 c);$/;"	p	signature:(UChar32 c)
u_charMirror	unicode/urename.h	227;"	d
u_charName	unames.c	/^u_charName(UChar32 code, UCharNameChoice nameChoice,$/;"	f	signature:(UChar32 code, UCharNameChoice nameChoice, char *buffer, int32_t bufferLength, UErrorCode *pErrorCode)
u_charName	unicode/uchar.h	/^u_charName(UChar32 code, UCharNameChoice nameChoice,$/;"	p	signature:(UChar32 code, UCharNameChoice nameChoice, char *buffer, int32_t bufferLength, UErrorCode *pErrorCode)
u_charName	unicode/urename.h	228;"	d
u_charType	uchar.c	/^u_charType(UChar32 c) {$/;"	f	signature:(UChar32 c)
u_charType	unicode/uchar.h	/^u_charType(UChar32 c);$/;"	p	signature:(UChar32 c)
u_charType	unicode/urename.h	229;"	d
u_charsToUChars	uinvchar.c	/^u_charsToUChars(const char *cs, UChar *us, int32_t length) {$/;"	f	signature:(const char *cs, UChar *us, int32_t length)
u_charsToUChars	unicode/putil.h	/^u_charsToUChars(const char *cs, UChar *us, int32_t length);$/;"	p	signature:(const char *cs, UChar *us, int32_t length)
u_charsToUChars	unicode/urename.h	230;"	d
u_cleanup	uinit.c	/^u_cleanup(void)$/;"	f	signature:(void)
u_cleanup	unicode/uclean.h	/^u_cleanup(void);$/;"	p	signature:(void)
u_cleanup	unicode/urename.h	231;"	d
u_cleanup	unicode/usystem.h	27;"	d
u_cleanup_4_6	unicode/usystem.h	35;"	d
u_countChar32	unicode/urename.h	232;"	d
u_countChar32	unicode/ustring.h	/^u_countChar32(const UChar *s, int32_t length);$/;"	p	signature:(const UChar *s, int32_t length)
u_countChar32	ustring.c	/^u_countChar32(const UChar *s, int32_t length) {$/;"	f	signature:(const UChar *s, int32_t length)
u_digit	uchar.c	/^u_digit(UChar32 ch, int8_t radix) {$/;"	f	signature:(UChar32 ch, int8_t radix)
u_digit	unicode/uchar.h	/^u_digit(UChar32 ch, int8_t radix);$/;"	p	signature:(UChar32 ch, int8_t radix)
u_digit	unicode/urename.h	233;"	d
u_enumCharNames	unames.c	/^u_enumCharNames(UChar32 start, UChar32 limit,$/;"	f	signature:(UChar32 start, UChar32 limit, UEnumCharNamesFn *fn, void *context, UCharNameChoice nameChoice, UErrorCode *pErrorCode)
u_enumCharNames	unicode/uchar.h	/^u_enumCharNames(UChar32 start, UChar32 limit,$/;"	p	signature:(UChar32 start, UChar32 limit, UEnumCharNamesFn *fn, void *context, UCharNameChoice nameChoice, UErrorCode *pErrorCode)
u_enumCharNames	unicode/urename.h	234;"	d
u_enumCharTypes	uchar.c	/^u_enumCharTypes(UCharEnumTypeRange *enumRange, const void *context) {$/;"	f	signature:(UCharEnumTypeRange *enumRange, const void *context)
u_enumCharTypes	unicode/uchar.h	/^u_enumCharTypes(UCharEnumTypeRange *enumRange, const void *context);$/;"	p	signature:(UCharEnumTypeRange *enumRange, const void *context)
u_enumCharTypes	unicode/urename.h	235;"	d
u_errorName	unicode/urename.h	236;"	d
u_errorName	unicode/utypes.h	/^u_errorName(UErrorCode code);$/;"	p	signature:(UErrorCode code)
u_errorName	utypes.c	/^u_errorName(UErrorCode code) {$/;"	f	signature:(UErrorCode code)
u_fadopt	unicode/urename.h	237;"	d
u_fclose	unicode/urename.h	238;"	d
u_feof	unicode/urename.h	239;"	d
u_fflush	unicode/urename.h	240;"	d
u_fgetConverter	unicode/urename.h	241;"	d
u_fgetc	unicode/urename.h	242;"	d
u_fgetcodepage	unicode/urename.h	243;"	d
u_fgetcx	unicode/urename.h	244;"	d
u_fgetfile	unicode/urename.h	245;"	d
u_fgetlocale	unicode/urename.h	246;"	d
u_fgets	unicode/urename.h	247;"	d
u_file_read	unicode/urename.h	248;"	d
u_file_write	unicode/urename.h	249;"	d
u_file_write_flush	unicode/urename.h	250;"	d
u_finit	unicode/urename.h	251;"	d
u_flushDefaultConverter	unicode/urename.h	252;"	d
u_flushDefaultConverter	ustr_cnv.c	/^u_flushDefaultConverter()$/;"	f
u_flushDefaultConverter	ustr_cnv.h	/^u_flushDefaultConverter(void);$/;"	p	signature:(void)
u_foldCase	ucase.c	/^u_foldCase(UChar32 c, uint32_t options) {$/;"	f	signature:(UChar32 c, uint32_t options)
u_foldCase	unicode/uchar.h	/^u_foldCase(UChar32 c, uint32_t options);$/;"	p	signature:(UChar32 c, uint32_t options)
u_foldCase	unicode/urename.h	253;"	d
u_fopen	unicode/urename.h	254;"	d
u_forDigit	uchar.c	/^u_forDigit(int32_t digit, int8_t radix) {$/;"	f	signature:(int32_t digit, int8_t radix)
u_forDigit	unicode/uchar.h	/^u_forDigit(int32_t digit, int8_t radix);$/;"	p	signature:(int32_t digit, int8_t radix)
u_forDigit	unicode/urename.h	255;"	d
u_formatMessage	unicode/urename.h	256;"	d
u_formatMessageWithError	unicode/urename.h	257;"	d
u_fprintf	unicode/urename.h	258;"	d
u_fprintf_u	unicode/urename.h	259;"	d
u_fputc	unicode/urename.h	260;"	d
u_fputs	unicode/urename.h	261;"	d
u_frewind	unicode/urename.h	262;"	d
u_fscanf	unicode/urename.h	263;"	d
u_fscanf_u	unicode/urename.h	264;"	d
u_fsetcodepage	unicode/urename.h	265;"	d
u_fsetlocale	unicode/urename.h	266;"	d
u_fsettransliterator	unicode/urename.h	267;"	d
u_fstropen	unicode/urename.h	268;"	d
u_fungetc	unicode/urename.h	269;"	d
u_getCombiningClass	unicode/uchar.h	/^u_getCombiningClass(UChar32 c);$/;"	p	signature:(UChar32 c)
u_getCombiningClass	unicode/urename.h	270;"	d
u_getCombiningClass	uprops.cpp	/^u_getCombiningClass(UChar32 c) {$/;"	f	signature:(UChar32 c)
u_getDataDirectory	putil.c	/^u_getDataDirectory(void) {$/;"	f	signature:(void)
u_getDataDirectory	unicode/putil.h	/^U_STABLE const char* U_EXPORT2 u_getDataDirectory(void);$/;"	p	signature:(void)
u_getDataDirectory	unicode/urename.h	271;"	d
u_getDataVersion	icudataver.c	/^U_CAPI void U_EXPORT2 u_getDataVersion(UVersionInfo dataVersionFillin, UErrorCode *status) {$/;"	f	signature:(UVersionInfo dataVersionFillin, UErrorCode *status)
u_getDataVersion	unicode/icudataver.h	/^U_INTERNAL void U_EXPORT2 u_getDataVersion(UVersionInfo dataVersionFillin, UErrorCode *status);$/;"	p	signature:(UVersionInfo dataVersionFillin, UErrorCode *status)
u_getDataVersion	unicode/urename.h	272;"	d
u_getDefaultConverter	unicode/urename.h	273;"	d
u_getDefaultConverter	ustr_cnv.c	/^u_getDefaultConverter(UErrorCode *status)$/;"	f	signature:(UErrorCode *status)
u_getDefaultConverter	ustr_cnv.h	/^u_getDefaultConverter(UErrorCode *status);$/;"	p	signature:(UErrorCode *status)
u_getFC_NFKC_Closure	unicode/uchar.h	/^u_getFC_NFKC_Closure(UChar32 c, UChar *dest, int32_t destCapacity, UErrorCode *pErrorCode);$/;"	p	signature:(UChar32 c, UChar *dest, int32_t destCapacity, UErrorCode *pErrorCode)
u_getFC_NFKC_Closure	unicode/urename.h	274;"	d
u_getFC_NFKC_Closure	uprops.cpp	/^u_getFC_NFKC_Closure(UChar32 c, UChar *dest, int32_t destCapacity, UErrorCode *pErrorCode) {$/;"	f	signature:(UChar32 c, UChar *dest, int32_t destCapacity, UErrorCode *pErrorCode)
u_getISOComment	unames.c	/^u_getISOComment(UChar32 c,$/;"	f	signature:(UChar32 c, char *dest, int32_t destCapacity, UErrorCode *pErrorCode)
u_getISOComment	unicode/uchar.h	/^u_getISOComment(UChar32 c,$/;"	p	signature:(UChar32 c, char *dest, int32_t destCapacity, UErrorCode *pErrorCode)
u_getISOComment	unicode/urename.h	275;"	d
u_getIntPropertyMaxValue	unicode/uchar.h	/^u_getIntPropertyMaxValue(UProperty which);$/;"	p	signature:(UProperty which)
u_getIntPropertyMaxValue	unicode/urename.h	276;"	d
u_getIntPropertyMaxValue	uprops.cpp	/^u_getIntPropertyMaxValue(UProperty which) {$/;"	f	signature:(UProperty which)
u_getIntPropertyMinValue	unicode/uchar.h	/^u_getIntPropertyMinValue(UProperty which);$/;"	p	signature:(UProperty which)
u_getIntPropertyMinValue	unicode/urename.h	277;"	d
u_getIntPropertyMinValue	uprops.cpp	/^u_getIntPropertyMinValue(UProperty \/*which*\/) {$/;"	f	signature:(UProperty )
u_getIntPropertyValue	unicode/uchar.h	/^u_getIntPropertyValue(UChar32 c, UProperty which);$/;"	p	signature:(UChar32 c, UProperty which)
u_getIntPropertyValue	unicode/urename.h	278;"	d
u_getIntPropertyValue	uprops.cpp	/^u_getIntPropertyValue(UChar32 c, UProperty which) {$/;"	f	signature:(UChar32 c, UProperty which)
u_getNumericValue	uchar.c	/^u_getNumericValue(UChar32 c) {$/;"	f	signature:(UChar32 c)
u_getNumericValue	unicode/uchar.h	/^u_getNumericValue(UChar32 c);$/;"	p	signature:(UChar32 c)
u_getNumericValue	unicode/urename.h	279;"	d
u_getPropertyEnum	propname.cpp	/^u_getPropertyEnum(const char* alias) {$/;"	f	signature:(const char* alias)
u_getPropertyEnum	unicode/uchar.h	/^u_getPropertyEnum(const char* alias);$/;"	p	signature:(const char* alias)
u_getPropertyEnum	unicode/urename.h	280;"	d
u_getPropertyName	propname.cpp	/^u_getPropertyName(UProperty property,$/;"	f	signature:(UProperty property, UPropertyNameChoice nameChoice)
u_getPropertyName	unicode/uchar.h	/^u_getPropertyName(UProperty property,$/;"	p	signature:(UProperty property, UPropertyNameChoice nameChoice)
u_getPropertyName	unicode/urename.h	281;"	d
u_getPropertyValueEnum	propname.cpp	/^u_getPropertyValueEnum(UProperty property,$/;"	f	signature:(UProperty property, const char* alias)
u_getPropertyValueEnum	unicode/uchar.h	/^u_getPropertyValueEnum(UProperty property,$/;"	p	signature:(UProperty property, const char* alias)
u_getPropertyValueEnum	unicode/urename.h	282;"	d
u_getPropertyValueName	propname.cpp	/^u_getPropertyValueName(UProperty property,$/;"	f	signature:(UProperty property, int32_t value, UPropertyNameChoice nameChoice)
u_getPropertyValueName	unicode/uchar.h	/^u_getPropertyValueName(UProperty property,$/;"	p	signature:(UProperty property, int32_t value, UPropertyNameChoice nameChoice)
u_getPropertyValueName	unicode/urename.h	283;"	d
u_getUnicodeProperties	uchar.c	/^u_getUnicodeProperties(UChar32 c, int32_t column) {$/;"	f	signature:(UChar32 c, int32_t column)
u_getUnicodeProperties	unicode/urename.h	284;"	d
u_getUnicodeProperties	uprops.h	/^u_getUnicodeProperties(UChar32 c, int32_t column);$/;"	p	signature:(UChar32 c, int32_t column)
u_getUnicodeVersion	uchar.c	/^u_getUnicodeVersion(UVersionInfo versionArray) {$/;"	f	signature:(UVersionInfo versionArray)
u_getUnicodeVersion	unicode/uchar.h	/^u_getUnicodeVersion(UVersionInfo versionArray);$/;"	p	signature:(UVersionInfo versionArray)
u_getUnicodeVersion	unicode/urename.h	285;"	d
u_getVersion	putil.c	/^u_getVersion(UVersionInfo versionArray) {$/;"	f	signature:(UVersionInfo versionArray)
u_getVersion	unicode/urename.h	286;"	d
u_getVersion	unicode/uversion.h	/^u_getVersion(UVersionInfo versionArray);$/;"	p	signature:(UVersionInfo versionArray)
u_growAnyBufferFromStatic	ustr_wcs.c	/^u_growAnyBufferFromStatic(void *context,$/;"	f	file:	signature:(void *context, void **pBuffer, int32_t *pCapacity, int32_t reqCapacity, int32_t length, int32_t size)
u_hasBinaryProperty	unicode/uchar.h	/^u_hasBinaryProperty(UChar32 c, UProperty which);$/;"	p	signature:(UChar32 c, UProperty which)
u_hasBinaryProperty	unicode/urename.h	287;"	d
u_hasBinaryProperty	uprops.cpp	/^u_hasBinaryProperty(UChar32 c, UProperty which) {$/;"	f	signature:(UChar32 c, UProperty which)
u_init	uinit.c	/^u_init(UErrorCode *status) {$/;"	f	signature:(UErrorCode *status)
u_init	unicode/uclean.h	/^u_init(UErrorCode *status);$/;"	p	signature:(UErrorCode *status)
u_init	unicode/urename.h	288;"	d
u_isDataOlder	icudataver.c	/^U_CAPI UBool U_EXPORT2 u_isDataOlder(UVersionInfo dataVersionFillin, UBool *isModifiedFillin, UErrorCode *status) {$/;"	f	signature:(UVersionInfo dataVersionFillin, UBool *isModifiedFillin, UErrorCode *status)
u_isDataOlder	unicode/icudataver.h	/^U_INTERNAL UBool U_EXPORT2 u_isDataOlder(UVersionInfo dataVersionFillin, UBool *isModifiedFillin, UErrorCode *status);$/;"	p	signature:(UVersionInfo dataVersionFillin, UBool *isModifiedFillin, UErrorCode *status)
u_isDataOlder	unicode/urename.h	289;"	d
u_isIDIgnorable	uchar.c	/^u_isIDIgnorable(UChar32 c) {$/;"	f	signature:(UChar32 c)
u_isIDIgnorable	unicode/uchar.h	/^u_isIDIgnorable(UChar32 c);$/;"	p	signature:(UChar32 c)
u_isIDIgnorable	unicode/urename.h	290;"	d
u_isIDPart	uchar.c	/^u_isIDPart(UChar32 c) {$/;"	f	signature:(UChar32 c)
u_isIDPart	unicode/uchar.h	/^u_isIDPart(UChar32 c);$/;"	p	signature:(UChar32 c)
u_isIDPart	unicode/urename.h	291;"	d
u_isIDStart	uchar.c	/^u_isIDStart(UChar32 c) {$/;"	f	signature:(UChar32 c)
u_isIDStart	unicode/uchar.h	/^u_isIDStart(UChar32 c);$/;"	p	signature:(UChar32 c)
u_isIDStart	unicode/urename.h	292;"	d
u_isISOControl	uchar.c	/^u_isISOControl(UChar32 c) {$/;"	f	signature:(UChar32 c)
u_isISOControl	unicode/uchar.h	/^u_isISOControl(UChar32 c);$/;"	p	signature:(UChar32 c)
u_isISOControl	unicode/urename.h	293;"	d
u_isJavaIDPart	uchar.c	/^u_isJavaIDPart(UChar32 c) {$/;"	f	signature:(UChar32 c)
u_isJavaIDPart	unicode/uchar.h	/^u_isJavaIDPart(UChar32 c);$/;"	p	signature:(UChar32 c)
u_isJavaIDPart	unicode/urename.h	294;"	d
u_isJavaIDStart	uchar.c	/^u_isJavaIDStart(UChar32 c) {$/;"	f	signature:(UChar32 c)
u_isJavaIDStart	unicode/uchar.h	/^u_isJavaIDStart(UChar32 c);$/;"	p	signature:(UChar32 c)
u_isJavaIDStart	unicode/urename.h	295;"	d
u_isJavaSpaceChar	uchar.c	/^u_isJavaSpaceChar(UChar32 c) {$/;"	f	signature:(UChar32 c)
u_isJavaSpaceChar	unicode/uchar.h	/^u_isJavaSpaceChar(UChar32 c);$/;"	p	signature:(UChar32 c)
u_isJavaSpaceChar	unicode/urename.h	296;"	d
u_isMirrored	ubidi_props.c	/^u_isMirrored(UChar32 c) {$/;"	f	signature:(UChar32 c)
u_isMirrored	unicode/uchar.h	/^u_isMirrored(UChar32 c);$/;"	p	signature:(UChar32 c)
u_isMirrored	unicode/urename.h	297;"	d
u_isUAlphabetic	uchar.c	/^u_isUAlphabetic(UChar32 c) {$/;"	f	signature:(UChar32 c)
u_isUAlphabetic	unicode/uchar.h	/^u_isUAlphabetic(UChar32 c);$/;"	p	signature:(UChar32 c)
u_isUAlphabetic	unicode/urename.h	298;"	d
u_isULowercase	ucase.c	/^u_isULowercase(UChar32 c) {$/;"	f	signature:(UChar32 c)
u_isULowercase	unicode/uchar.h	/^u_isULowercase(UChar32 c);$/;"	p	signature:(UChar32 c)
u_isULowercase	unicode/urename.h	299;"	d
u_isUUppercase	ucase.c	/^u_isUUppercase(UChar32 c) {$/;"	f	signature:(UChar32 c)
u_isUUppercase	unicode/uchar.h	/^u_isUUppercase(UChar32 c);$/;"	p	signature:(UChar32 c)
u_isUUppercase	unicode/urename.h	300;"	d
u_isUWhiteSpace	uchar.c	/^u_isUWhiteSpace(UChar32 c) {$/;"	f	signature:(UChar32 c)
u_isUWhiteSpace	unicode/uchar.h	/^u_isUWhiteSpace(UChar32 c);$/;"	p	signature:(UChar32 c)
u_isUWhiteSpace	unicode/urename.h	301;"	d
u_isWhitespace	uchar.c	/^u_isWhitespace(UChar32 c) {$/;"	f	signature:(UChar32 c)
u_isWhitespace	unicode/uchar.h	/^u_isWhitespace(UChar32 c);$/;"	p	signature:(UChar32 c)
u_isWhitespace	unicode/urename.h	302;"	d
u_isalnum	uchar.c	/^u_isalnum(UChar32 c) {$/;"	f	signature:(UChar32 c)
u_isalnum	unicode/uchar.h	/^u_isalnum(UChar32 c);$/;"	p	signature:(UChar32 c)
u_isalnum	unicode/urename.h	303;"	d
u_isalnumPOSIX	uchar.c	/^u_isalnumPOSIX(UChar32 c) {$/;"	f	signature:(UChar32 c)
u_isalnumPOSIX	unicode/urename.h	304;"	d
u_isalnumPOSIX	uprops.h	/^u_isalnumPOSIX(UChar32 c);$/;"	p	signature:(UChar32 c)
u_isalpha	uchar.c	/^u_isalpha(UChar32 c) {$/;"	f	signature:(UChar32 c)
u_isalpha	unicode/uchar.h	/^u_isalpha(UChar32 c);$/;"	p	signature:(UChar32 c)
u_isalpha	unicode/urename.h	305;"	d
u_isbase	uchar.c	/^u_isbase(UChar32 c) {$/;"	f	signature:(UChar32 c)
u_isbase	unicode/uchar.h	/^u_isbase(UChar32 c);$/;"	p	signature:(UChar32 c)
u_isbase	unicode/urename.h	306;"	d
u_isblank	uchar.c	/^u_isblank(UChar32 c) {$/;"	f	signature:(UChar32 c)
u_isblank	unicode/uchar.h	/^u_isblank(UChar32 c);$/;"	p	signature:(UChar32 c)
u_isblank	unicode/urename.h	307;"	d
u_iscntrl	uchar.c	/^u_iscntrl(UChar32 c) {$/;"	f	signature:(UChar32 c)
u_iscntrl	unicode/uchar.h	/^u_iscntrl(UChar32 c);$/;"	p	signature:(UChar32 c)
u_iscntrl	unicode/urename.h	308;"	d
u_isdefined	uchar.c	/^u_isdefined(UChar32 c) {$/;"	f	signature:(UChar32 c)
u_isdefined	unicode/uchar.h	/^u_isdefined(UChar32 c);$/;"	p	signature:(UChar32 c)
u_isdefined	unicode/urename.h	309;"	d
u_isdigit	uchar.c	/^u_isdigit(UChar32 c) {$/;"	f	signature:(UChar32 c)
u_isdigit	unicode/uchar.h	/^u_isdigit(UChar32 c);$/;"	p	signature:(UChar32 c)
u_isdigit	unicode/urename.h	310;"	d
u_isgraph	uchar.c	/^u_isgraph(UChar32 c) {$/;"	f	signature:(UChar32 c)
u_isgraph	unicode/uchar.h	/^u_isgraph(UChar32 c);$/;"	p	signature:(UChar32 c)
u_isgraph	unicode/urename.h	311;"	d
u_isgraphPOSIX	uchar.c	/^u_isgraphPOSIX(UChar32 c) {$/;"	f	signature:(UChar32 c)
u_isgraphPOSIX	unicode/urename.h	312;"	d
u_isgraphPOSIX	uprops.h	/^u_isgraphPOSIX(UChar32 c);$/;"	p	signature:(UChar32 c)
u_islower	uchar.c	/^u_islower(UChar32 c) {$/;"	f	signature:(UChar32 c)
u_islower	unicode/uchar.h	/^u_islower(UChar32 c);$/;"	p	signature:(UChar32 c)
u_islower	unicode/urename.h	313;"	d
u_isprint	uchar.c	/^u_isprint(UChar32 c) {$/;"	f	signature:(UChar32 c)
u_isprint	unicode/uchar.h	/^u_isprint(UChar32 c);$/;"	p	signature:(UChar32 c)
u_isprint	unicode/urename.h	314;"	d
u_isprintPOSIX	uchar.c	/^u_isprintPOSIX(UChar32 c) {$/;"	f	signature:(UChar32 c)
u_isprintPOSIX	unicode/urename.h	315;"	d
u_isprintPOSIX	uprops.h	/^u_isprintPOSIX(UChar32 c);$/;"	p	signature:(UChar32 c)
u_ispunct	uchar.c	/^u_ispunct(UChar32 c) {$/;"	f	signature:(UChar32 c)
u_ispunct	unicode/uchar.h	/^u_ispunct(UChar32 c);$/;"	p	signature:(UChar32 c)
u_ispunct	unicode/urename.h	316;"	d
u_isspace	uchar.c	/^u_isspace(UChar32 c) {$/;"	f	signature:(UChar32 c)
u_isspace	unicode/uchar.h	/^u_isspace(UChar32 c);$/;"	p	signature:(UChar32 c)
u_isspace	unicode/urename.h	317;"	d
u_istitle	uchar.c	/^u_istitle(UChar32 c) {$/;"	f	signature:(UChar32 c)
u_istitle	unicode/uchar.h	/^u_istitle(UChar32 c);$/;"	p	signature:(UChar32 c)
u_istitle	unicode/urename.h	318;"	d
u_isupper	uchar.c	/^u_isupper(UChar32 c) {$/;"	f	signature:(UChar32 c)
u_isupper	unicode/uchar.h	/^u_isupper(UChar32 c);$/;"	p	signature:(UChar32 c)
u_isupper	unicode/urename.h	319;"	d
u_isxdigit	uchar.c	/^u_isxdigit(UChar32 c) {$/;"	f	signature:(UChar32 c)
u_isxdigit	unicode/uchar.h	/^u_isxdigit(UChar32 c);$/;"	p	signature:(UChar32 c)
u_isxdigit	unicode/urename.h	320;"	d
u_lengthOfIdenticalLevelRun	unicode/urename.h	321;"	d
u_locbund_close	unicode/urename.h	322;"	d
u_locbund_getNumberFormat	unicode/urename.h	323;"	d
u_locbund_init	unicode/urename.h	324;"	d
u_memcasecmp	unicode/urename.h	325;"	d
u_memcasecmp	unicode/ustring.h	/^u_memcasecmp(const UChar *s1, const UChar *s2, int32_t length, uint32_t options);$/;"	p	signature:(const UChar *s1, const UChar *s2, int32_t length, uint32_t options)
u_memcasecmp	ustrcase.c	/^u_memcasecmp(const UChar *s1, const UChar *s2, int32_t length, uint32_t options) {$/;"	f	signature:(const UChar *s1, const UChar *s2, int32_t length, uint32_t options)
u_memchr	unicode/urename.h	326;"	d
u_memchr	unicode/ustring.h	/^u_memchr(const UChar *s, UChar c, int32_t count);$/;"	p	signature:(const UChar *s, UChar c, int32_t count)
u_memchr	ustring.c	/^u_memchr(const UChar *s, UChar c, int32_t count) {$/;"	f	signature:(const UChar *s, UChar c, int32_t count)
u_memchr32	unicode/urename.h	327;"	d
u_memchr32	unicode/ustring.h	/^u_memchr32(const UChar *s, UChar32 c, int32_t count);$/;"	p	signature:(const UChar *s, UChar32 c, int32_t count)
u_memchr32	ustring.c	/^u_memchr32(const UChar *s, UChar32 c, int32_t count) {$/;"	f	signature:(const UChar *s, UChar32 c, int32_t count)
u_memcmp	unicode/urename.h	328;"	d
u_memcmp	unicode/ustring.h	/^u_memcmp(const UChar *buf1, const UChar *buf2, int32_t count);$/;"	p	signature:(const UChar *buf1, const UChar *buf2, int32_t count)
u_memcmp	ustring.c	/^u_memcmp(const UChar *buf1, const UChar *buf2, int32_t count) {$/;"	f	signature:(const UChar *buf1, const UChar *buf2, int32_t count)
u_memcmpCodePointOrder	unicode/urename.h	329;"	d
u_memcmpCodePointOrder	unicode/ustring.h	/^u_memcmpCodePointOrder(const UChar *s1, const UChar *s2, int32_t count);$/;"	p	signature:(const UChar *s1, const UChar *s2, int32_t count)
u_memcmpCodePointOrder	ustring.c	/^u_memcmpCodePointOrder(const UChar *s1, const UChar *s2, int32_t count) {$/;"	f	signature:(const UChar *s1, const UChar *s2, int32_t count)
u_memcpy	unicode/urename.h	330;"	d
u_memcpy	unicode/ustring.h	/^u_memcpy(UChar *dest, const UChar *src, int32_t count);$/;"	p	signature:(UChar *dest, const UChar *src, int32_t count)
u_memcpy	ustring.c	/^u_memcpy(UChar *dest, const UChar *src, int32_t count) {$/;"	f	signature:(UChar *dest, const UChar *src, int32_t count)
u_memmove	unicode/urename.h	331;"	d
u_memmove	unicode/ustring.h	/^u_memmove(UChar *dest, const UChar *src, int32_t count);$/;"	p	signature:(UChar *dest, const UChar *src, int32_t count)
u_memmove	ustring.c	/^u_memmove(UChar *dest, const UChar *src, int32_t count) {$/;"	f	signature:(UChar *dest, const UChar *src, int32_t count)
u_memrchr	unicode/urename.h	332;"	d
u_memrchr	unicode/ustring.h	/^u_memrchr(const UChar *s, UChar c, int32_t count);$/;"	p	signature:(const UChar *s, UChar c, int32_t count)
u_memrchr	ustring.c	/^u_memrchr(const UChar *s, UChar c, int32_t count) {$/;"	f	signature:(const UChar *s, UChar c, int32_t count)
u_memrchr32	unicode/urename.h	333;"	d
u_memrchr32	unicode/ustring.h	/^u_memrchr32(const UChar *s, UChar32 c, int32_t count);$/;"	p	signature:(const UChar *s, UChar32 c, int32_t count)
u_memrchr32	ustring.c	/^u_memrchr32(const UChar *s, UChar32 c, int32_t count) {$/;"	f	signature:(const UChar *s, UChar32 c, int32_t count)
u_memset	unicode/urename.h	334;"	d
u_memset	unicode/ustring.h	/^u_memset(UChar *dest, UChar c, int32_t count);$/;"	p	signature:(UChar *dest, UChar c, int32_t count)
u_memset	ustring.c	/^u_memset(UChar *dest, UChar c, int32_t count) {$/;"	f	signature:(UChar *dest, UChar c, int32_t count)
u_nl_catd	unicode/ucat.h	/^typedef UResourceBundle* u_nl_catd;$/;"	t
u_parseMessage	unicode/urename.h	335;"	d
u_parseMessageWithError	unicode/urename.h	336;"	d
u_printf_parse	unicode/urename.h	337;"	d
u_releaseDefaultConverter	unicode/urename.h	338;"	d
u_releaseDefaultConverter	ustr_cnv.c	/^u_releaseDefaultConverter(UConverter *converter)$/;"	f	signature:(UConverter *converter)
u_releaseDefaultConverter	ustr_cnv.h	/^u_releaseDefaultConverter(UConverter *converter);$/;"	p	signature:(UConverter *converter)
u_scanf_parse	unicode/urename.h	339;"	d
u_setAtomicIncDecFunctions	umutex.c	/^u_setAtomicIncDecFunctions(const void *context, UMtxAtomicFn *ip, UMtxAtomicFn *dp,$/;"	f	signature:(const void *context, UMtxAtomicFn *ip, UMtxAtomicFn *dp, UErrorCode *status)
u_setAtomicIncDecFunctions	unicode/uclean.h	/^u_setAtomicIncDecFunctions(const void *context, UMtxAtomicFn *inc, UMtxAtomicFn *dec,$/;"	p	signature:(const void *context, UMtxAtomicFn *inc, UMtxAtomicFn *dec, UErrorCode *status)
u_setAtomicIncDecFunctions	unicode/urename.h	340;"	d
u_setAtomicIncDecFunctions	unicode/usystem.h	28;"	d
u_setAtomicIncDecFunctions_4_6	unicode/usystem.h	36;"	d
u_setDataDirectory	putil.c	/^u_setDataDirectory(const char *directory) {$/;"	f	signature:(const char *directory)
u_setDataDirectory	unicode/putil.h	/^U_STABLE void U_EXPORT2 u_setDataDirectory(const char *directory);$/;"	p	signature:(const char *directory)
u_setDataDirectory	unicode/urename.h	341;"	d
u_setMemoryFunctions	cmemory.c	/^u_setMemoryFunctions(const void *context, UMemAllocFn *a, UMemReallocFn *r, UMemFreeFn *f,  UErrorCode *status)$/;"	f	signature:(const void *context, UMemAllocFn *a, UMemReallocFn *r, UMemFreeFn *f, UErrorCode *status)
u_setMemoryFunctions	unicode/uclean.h	/^u_setMemoryFunctions(const void *context, UMemAllocFn *a, UMemReallocFn *r, UMemFreeFn *f, $/;"	p	signature:(const void *context, UMemAllocFn *a, UMemReallocFn *r, UMemFreeFn *f, UErrorCode *status)
u_setMemoryFunctions	unicode/urename.h	342;"	d
u_setMemoryFunctions	unicode/usystem.h	29;"	d
u_setMemoryFunctions_4_6	unicode/usystem.h	37;"	d
u_setMutexFunctions	umutex.c	/^u_setMutexFunctions(const void *context, UMtxInitFn *i, UMtxFn *d, UMtxFn *l, UMtxFn *u,$/;"	f	signature:(const void *context, UMtxInitFn *i, UMtxFn *d, UMtxFn *l, UMtxFn *u, UErrorCode *status)
u_setMutexFunctions	unicode/uclean.h	/^u_setMutexFunctions(const void *context, UMtxInitFn *init, UMtxFn *destroy, UMtxFn *lock, UMtxFn *unlock,$/;"	p	signature:(const void *context, UMtxInitFn *init, UMtxFn *destroy, UMtxFn *lock, UMtxFn *unlock, UErrorCode *status)
u_setMutexFunctions	unicode/urename.h	343;"	d
u_setMutexFunctions	unicode/usystem.h	30;"	d
u_setMutexFunctions_4_6	unicode/usystem.h	38;"	d
u_shapeArabic	unicode/urename.h	344;"	d
u_shapeArabic	unicode/ushape.h	/^u_shapeArabic(const UChar *source, int32_t sourceLength,$/;"	p	signature:(const UChar *source, int32_t sourceLength, UChar *dest, int32_t destSize, uint64_t options, UErrorCode *pErrorCode)
u_shapeArabic	ushape.c	/^u_shapeArabic(const UChar *source, int32_t sourceLength,$/;"	f	signature:(const UChar *source, int32_t sourceLength, UChar *dest, int32_t destCapacity, uint64_t options, UErrorCode *pErrorCode)
u_signBit	putil.c	/^u_signBit(double d) {$/;"	f	file:	signature:(double d)
u_snprintf	unicode/urename.h	345;"	d
u_snprintf_u	unicode/urename.h	346;"	d
u_sprintf	unicode/urename.h	347;"	d
u_sprintf_u	unicode/urename.h	348;"	d
u_sscanf	unicode/urename.h	349;"	d
u_sscanf_u	unicode/urename.h	350;"	d
u_strCaseCompare	unicode/urename.h	351;"	d
u_strCaseCompare	unicode/ustring.h	/^u_strCaseCompare(const UChar *s1, int32_t length1,$/;"	p	signature:(const UChar *s1, int32_t length1, const UChar *s2, int32_t length2, uint32_t options, UErrorCode *pErrorCode)
u_strCaseCompare	ustrcase.c	/^u_strCaseCompare(const UChar *s1, int32_t length1,$/;"	f	signature:(const UChar *s1, int32_t length1, const UChar *s2, int32_t length2, uint32_t options, UErrorCode *pErrorCode)
u_strCompare	unicode/urename.h	352;"	d
u_strCompare	unicode/ustring.h	/^u_strCompare(const UChar *s1, int32_t length1,$/;"	p	signature:(const UChar *s1, int32_t length1, const UChar *s2, int32_t length2, UBool codePointOrder)
u_strCompare	ustring.c	/^u_strCompare(const UChar *s1, int32_t length1,$/;"	f	signature:(const UChar *s1, int32_t length1, const UChar *s2, int32_t length2, UBool codePointOrder)
u_strCompareIter	unicode/urename.h	353;"	d
u_strCompareIter	unicode/ustring.h	/^u_strCompareIter(UCharIterator *iter1, UCharIterator *iter2, UBool codePointOrder);$/;"	p	signature:(UCharIterator *iter1, UCharIterator *iter2, UBool codePointOrder)
u_strCompareIter	ustring.c	/^u_strCompareIter(UCharIterator *iter1, UCharIterator *iter2, UBool codePointOrder) {$/;"	f	signature:(UCharIterator *iter1, UCharIterator *iter2, UBool codePointOrder)
u_strFindFirst	unicode/urename.h	354;"	d
u_strFindFirst	unicode/ustring.h	/^u_strFindFirst(const UChar *s, int32_t length, const UChar *substring, int32_t subLength);$/;"	p	signature:(const UChar *s, int32_t length, const UChar *substring, int32_t subLength)
u_strFindFirst	ustring.c	/^u_strFindFirst(const UChar *s, int32_t length,$/;"	f	signature:(const UChar *s, int32_t length, const UChar *sub, int32_t subLength)
u_strFindLast	unicode/urename.h	355;"	d
u_strFindLast	unicode/ustring.h	/^u_strFindLast(const UChar *s, int32_t length, const UChar *substring, int32_t subLength);$/;"	p	signature:(const UChar *s, int32_t length, const UChar *substring, int32_t subLength)
u_strFindLast	ustring.c	/^u_strFindLast(const UChar *s, int32_t length,$/;"	f	signature:(const UChar *s, int32_t length, const UChar *sub, int32_t subLength)
u_strFoldCase	unicode/urename.h	356;"	d
u_strFoldCase	unicode/ustring.h	/^u_strFoldCase(UChar *dest, int32_t destCapacity,$/;"	p	signature:(UChar *dest, int32_t destCapacity, const UChar *src, int32_t srcLength, uint32_t options, UErrorCode *pErrorCode)
u_strFoldCase	ustrcase.c	/^u_strFoldCase(UChar *dest, int32_t destCapacity,$/;"	f	signature:(UChar *dest, int32_t destCapacity, const UChar *src, int32_t srcLength, uint32_t options, UErrorCode *pErrorCode)
u_strFromJavaModifiedUTF8WithSub	unicode/urename.h	357;"	d
u_strFromJavaModifiedUTF8WithSub	unicode/ustring.h	/^u_strFromJavaModifiedUTF8WithSub($/;"	p	signature:( UChar *dest, int32_t destCapacity, int32_t *pDestLength, const char *src, int32_t srcLength, UChar32 subchar, int32_t *pNumSubstitutions, UErrorCode *pErrorCode)
u_strFromJavaModifiedUTF8WithSub	ustrtrns.c	/^u_strFromJavaModifiedUTF8WithSub($/;"	f	signature:( UChar *dest, int32_t destCapacity, int32_t *pDestLength, const char *src, int32_t srcLength, UChar32 subchar, int32_t *pNumSubstitutions, UErrorCode *pErrorCode)
u_strFromPunycode	punycode.c	/^u_strFromPunycode(const UChar *src, int32_t srcLength,$/;"	f	signature:(const UChar *src, int32_t srcLength, UChar *dest, int32_t destCapacity, UBool *caseFlags, UErrorCode *pErrorCode)
u_strFromPunycode	punycode.h	/^u_strFromPunycode(const UChar *src, int32_t srcLength,$/;"	p	signature:(const UChar *src, int32_t srcLength, UChar *dest, int32_t destCapacity, UBool *caseFlags, UErrorCode *pErrorCode)
u_strFromPunycode	unicode/urename.h	358;"	d
u_strFromUTF32	unicode/urename.h	359;"	d
u_strFromUTF32	unicode/ustring.h	/^u_strFromUTF32(UChar   *dest,$/;"	p	signature:(UChar *dest, int32_t destCapacity, int32_t *pDestLength, const UChar32 *src, int32_t srcLength, UErrorCode *pErrorCode)
u_strFromUTF32	ustrtrns.c	/^u_strFromUTF32(UChar *dest,$/;"	f	signature:(UChar *dest, int32_t destCapacity, int32_t *pDestLength, const UChar32 *src, int32_t srcLength, UErrorCode *pErrorCode)
u_strFromUTF32WithSub	unicode/urename.h	360;"	d
u_strFromUTF32WithSub	unicode/ustring.h	/^u_strFromUTF32WithSub(UChar *dest,$/;"	p	signature:(UChar *dest, int32_t destCapacity, int32_t *pDestLength, const UChar32 *src, int32_t srcLength, UChar32 subchar, int32_t *pNumSubstitutions, UErrorCode *pErrorCode)
u_strFromUTF32WithSub	ustrtrns.c	/^u_strFromUTF32WithSub(UChar *dest,$/;"	f	signature:(UChar *dest, int32_t destCapacity, int32_t *pDestLength, const UChar32 *src, int32_t srcLength, UChar32 subchar, int32_t *pNumSubstitutions, UErrorCode *pErrorCode)
u_strFromUTF8	unicode/urename.h	361;"	d
u_strFromUTF8	unicode/ustring.h	/^u_strFromUTF8(UChar *dest,             $/;"	p	signature:(UChar *dest, int32_t destCapacity, int32_t *pDestLength, const char *src, int32_t srcLength, UErrorCode *pErrorCode)
u_strFromUTF8	ustrtrns.c	/^u_strFromUTF8(UChar *dest,$/;"	f	signature:(UChar *dest, int32_t destCapacity, int32_t *pDestLength, const char* src, int32_t srcLength, UErrorCode *pErrorCode)
u_strFromUTF8Lenient	unicode/urename.h	362;"	d
u_strFromUTF8Lenient	unicode/ustring.h	/^u_strFromUTF8Lenient(UChar *dest,$/;"	p	signature:(UChar *dest, int32_t destCapacity, int32_t *pDestLength, const char *src, int32_t srcLength, UErrorCode *pErrorCode)
u_strFromUTF8Lenient	ustrtrns.c	/^u_strFromUTF8Lenient(UChar *dest,$/;"	f	signature:(UChar *dest, int32_t destCapacity, int32_t *pDestLength, const char *src, int32_t srcLength, UErrorCode *pErrorCode)
u_strFromUTF8WithSub	unicode/urename.h	363;"	d
u_strFromUTF8WithSub	unicode/ustring.h	/^u_strFromUTF8WithSub(UChar *dest,$/;"	p	signature:(UChar *dest, int32_t destCapacity, int32_t *pDestLength, const char *src, int32_t srcLength, UChar32 subchar, int32_t *pNumSubstitutions, UErrorCode *pErrorCode)
u_strFromUTF8WithSub	ustrtrns.c	/^u_strFromUTF8WithSub(UChar *dest,$/;"	f	signature:(UChar *dest, int32_t destCapacity, int32_t *pDestLength, const char* src, int32_t srcLength, UChar32 subchar, int32_t *pNumSubstitutions, UErrorCode *pErrorCode)
u_strFromWCS	unicode/urename.h	364;"	d
u_strFromWCS	unicode/ustring.h	/^u_strFromWCS(UChar   *dest,$/;"	p	signature:(UChar *dest, int32_t destCapacity, int32_t *pDestLength, const wchar_t *src, int32_t srcLength, UErrorCode *pErrorCode)
u_strFromWCS	ustr_wcs.c	/^u_strFromWCS(UChar   *dest,$/;"	f	signature:(UChar *dest, int32_t destCapacity, int32_t *pDestLength, const wchar_t *src, int32_t srcLength, UErrorCode *pErrorCode)
u_strHasMoreChar32Than	unicode/urename.h	365;"	d
u_strHasMoreChar32Than	unicode/ustring.h	/^u_strHasMoreChar32Than(const UChar *s, int32_t length, int32_t number);$/;"	p	signature:(const UChar *s, int32_t length, int32_t number)
u_strHasMoreChar32Than	ustring.c	/^u_strHasMoreChar32Than(const UChar *s, int32_t length, int32_t number) {$/;"	f	signature:(const UChar *s, int32_t length, int32_t number)
u_strToJavaModifiedUTF8	unicode/urename.h	366;"	d
u_strToJavaModifiedUTF8	unicode/ustring.h	/^u_strToJavaModifiedUTF8($/;"	p	signature:( char *dest, int32_t destCapacity, int32_t *pDestLength, const UChar *src, int32_t srcLength, UErrorCode *pErrorCode)
u_strToJavaModifiedUTF8	ustrtrns.c	/^u_strToJavaModifiedUTF8($/;"	f	signature:( char *dest, int32_t destCapacity, int32_t *pDestLength, const UChar *src, int32_t srcLength, UErrorCode *pErrorCode)
u_strToLower	unicode/urename.h	367;"	d
u_strToLower	unicode/ustring.h	/^u_strToLower(UChar *dest, int32_t destCapacity,$/;"	p	signature:(UChar *dest, int32_t destCapacity, const UChar *src, int32_t srcLength, const char *locale, UErrorCode *pErrorCode)
u_strToLower	ustrcase.c	/^u_strToLower(UChar *dest, int32_t destCapacity,$/;"	f	signature:(UChar *dest, int32_t destCapacity, const UChar *src, int32_t srcLength, const char *locale, UErrorCode *pErrorCode)
u_strToPunycode	punycode.c	/^u_strToPunycode(const UChar *src, int32_t srcLength,$/;"	f	signature:(const UChar *src, int32_t srcLength, UChar *dest, int32_t destCapacity, const UBool *caseFlags, UErrorCode *pErrorCode)
u_strToPunycode	punycode.h	/^u_strToPunycode(const UChar *src, int32_t srcLength,$/;"	p	signature:(const UChar *src, int32_t srcLength, UChar *dest, int32_t destCapacity, const UBool *caseFlags, UErrorCode *pErrorCode)
u_strToPunycode	unicode/urename.h	368;"	d
u_strToTitle	unicode/urename.h	369;"	d
u_strToTitle	unicode/ustring.h	/^u_strToTitle(UChar *dest, int32_t destCapacity,$/;"	p	signature:(UChar *dest, int32_t destCapacity, const UChar *src, int32_t srcLength, UBreakIterator *titleIter, const char *locale, UErrorCode *pErrorCode)
u_strToTitle	ustrcase.c	/^u_strToTitle(UChar *dest, int32_t destCapacity,$/;"	f	signature:(UChar *dest, int32_t destCapacity, const UChar *src, int32_t srcLength, UBreakIterator *titleIter, const char *locale, UErrorCode *pErrorCode)
u_strToUTF32	unicode/urename.h	370;"	d
u_strToUTF32	unicode/ustring.h	/^u_strToUTF32(UChar32 *dest, $/;"	p	signature:(UChar32 *dest, int32_t destCapacity, int32_t *pDestLength, const UChar *src, int32_t srcLength, UErrorCode *pErrorCode)
u_strToUTF32	ustrtrns.c	/^u_strToUTF32(UChar32 *dest, $/;"	f	signature:(UChar32 *dest, int32_t destCapacity, int32_t *pDestLength, const UChar *src, int32_t srcLength, UErrorCode *pErrorCode)
u_strToUTF32WithSub	unicode/urename.h	371;"	d
u_strToUTF32WithSub	unicode/ustring.h	/^u_strToUTF32WithSub(UChar32 *dest,$/;"	p	signature:(UChar32 *dest, int32_t destCapacity, int32_t *pDestLength, const UChar *src, int32_t srcLength, UChar32 subchar, int32_t *pNumSubstitutions, UErrorCode *pErrorCode)
u_strToUTF32WithSub	ustrtrns.c	/^u_strToUTF32WithSub(UChar32 *dest,$/;"	f	signature:(UChar32 *dest, int32_t destCapacity, int32_t *pDestLength, const UChar *src, int32_t srcLength, UChar32 subchar, int32_t *pNumSubstitutions, UErrorCode *pErrorCode)
u_strToUTF8	unicode/urename.h	372;"	d
u_strToUTF8	unicode/ustring.h	/^u_strToUTF8(char *dest,           $/;"	p	signature:(char *dest, int32_t destCapacity, int32_t *pDestLength, const UChar *src, int32_t srcLength, UErrorCode *pErrorCode)
u_strToUTF8	ustrtrns.c	/^u_strToUTF8(char *dest,$/;"	f	signature:(char *dest, int32_t destCapacity, int32_t *pDestLength, const UChar *pSrc, int32_t srcLength, UErrorCode *pErrorCode)
u_strToUTF8WithSub	unicode/urename.h	373;"	d
u_strToUTF8WithSub	unicode/ustring.h	/^u_strToUTF8WithSub(char *dest,$/;"	p	signature:(char *dest, int32_t destCapacity, int32_t *pDestLength, const UChar *src, int32_t srcLength, UChar32 subchar, int32_t *pNumSubstitutions, UErrorCode *pErrorCode)
u_strToUTF8WithSub	ustrtrns.c	/^u_strToUTF8WithSub(char *dest,$/;"	f	signature:(char *dest, int32_t destCapacity, int32_t *pDestLength, const UChar *pSrc, int32_t srcLength, UChar32 subchar, int32_t *pNumSubstitutions, UErrorCode *pErrorCode)
u_strToUpper	unicode/urename.h	374;"	d
u_strToUpper	unicode/ustring.h	/^u_strToUpper(UChar *dest, int32_t destCapacity,$/;"	p	signature:(UChar *dest, int32_t destCapacity, const UChar *src, int32_t srcLength, const char *locale, UErrorCode *pErrorCode)
u_strToUpper	ustrcase.c	/^u_strToUpper(UChar *dest, int32_t destCapacity,$/;"	f	signature:(UChar *dest, int32_t destCapacity, const UChar *src, int32_t srcLength, const char *locale, UErrorCode *pErrorCode)
u_strToWCS	unicode/urename.h	375;"	d
u_strToWCS	unicode/ustring.h	/^u_strToWCS(wchar_t *dest, $/;"	p	signature:(wchar_t *dest, int32_t destCapacity, int32_t *pDestLength, const UChar *src, int32_t srcLength, UErrorCode *pErrorCode)
u_strToWCS	ustr_wcs.c	/^u_strToWCS(wchar_t *dest, $/;"	f	signature:(wchar_t *dest, int32_t destCapacity, int32_t *pDestLength, const UChar *src, int32_t srcLength, UErrorCode *pErrorCode)
u_strcasecmp	unicode/urename.h	376;"	d
u_strcasecmp	unicode/ustring.h	/^u_strcasecmp(const UChar *s1, const UChar *s2, uint32_t options);$/;"	p	signature:(const UChar *s1, const UChar *s2, uint32_t options)
u_strcasecmp	ustrcase.c	/^u_strcasecmp(const UChar *s1, const UChar *s2, uint32_t options) {$/;"	f	signature:(const UChar *s1, const UChar *s2, uint32_t options)
u_strcat	unicode/urename.h	377;"	d
u_strcat	unicode/ustring.h	/^u_strcat(UChar     *dst, $/;"	p	signature:(UChar *dst, const UChar *src)
u_strcat	ustring.c	/^u_strcat(UChar     *dst, $/;"	f	signature:(UChar *dst, const UChar *src)
u_strchr	unicode/urename.h	378;"	d
u_strchr	unicode/ustring.h	/^u_strchr(const UChar *s, UChar c);$/;"	p	signature:(const UChar *s, UChar c)
u_strchr	ustring.c	/^u_strchr(const UChar *s, UChar c) {$/;"	f	signature:(const UChar *s, UChar c)
u_strchr32	unicode/urename.h	379;"	d
u_strchr32	unicode/ustring.h	/^u_strchr32(const UChar *s, UChar32 c);$/;"	p	signature:(const UChar *s, UChar32 c)
u_strchr32	ustring.c	/^u_strchr32(const UChar *s, UChar32 c) {$/;"	f	signature:(const UChar *s, UChar32 c)
u_strcmp	unicode/urename.h	380;"	d
u_strcmp	unicode/ustring.h	/^u_strcmp(const UChar     *s1, $/;"	p	signature:(const UChar *s1, const UChar *s2)
u_strcmp	ustring.c	/^u_strcmp(const UChar *s1, $/;"	f	signature:(const UChar *s1, const UChar *s2)
u_strcmpCodePointOrder	unicode/urename.h	381;"	d
u_strcmpCodePointOrder	unicode/ustring.h	/^u_strcmpCodePointOrder(const UChar *s1, const UChar *s2);$/;"	p	signature:(const UChar *s1, const UChar *s2)
u_strcmpCodePointOrder	ustring.c	/^u_strcmpCodePointOrder(const UChar *s1, const UChar *s2) {$/;"	f	signature:(const UChar *s1, const UChar *s2)
u_strcmpFold	unicode/urename.h	382;"	d
u_strcmpFold	ustr_imp.h	/^u_strcmpFold(const UChar *s1, int32_t length1,$/;"	p	signature:(const UChar *s1, int32_t length1, const UChar *s2, int32_t length2, uint32_t options, UErrorCode *pErrorCode)
u_strcmpFold	ustrcase.c	/^u_strcmpFold(const UChar *s1, int32_t length1,$/;"	f	signature:(const UChar *s1, int32_t length1, const UChar *s2, int32_t length2, uint32_t options, UErrorCode *pErrorCode)
u_strcpy	unicode/urename.h	383;"	d
u_strcpy	unicode/ustring.h	/^u_strcpy(UChar     *dst, $/;"	p	signature:(UChar *dst, const UChar *src)
u_strcpy	ustring.c	/^u_strcpy(UChar     *dst, $/;"	f	signature:(UChar *dst, const UChar *src)
u_strcspn	unicode/urename.h	384;"	d
u_strcspn	unicode/ustring.h	/^u_strcspn(const UChar *string, const UChar *matchSet);$/;"	p	signature:(const UChar *string, const UChar *matchSet)
u_strcspn	ustring.c	/^u_strcspn(const UChar *string, const UChar *matchSet)$/;"	f	signature:(const UChar *string, const UChar *matchSet)
u_strlen	unicode/unistr.h	/^u_strlen(const UChar *s);$/;"	p	signature:(const UChar *s)
u_strlen	unicode/urename.h	385;"	d
u_strlen	unicode/ustring.h	/^u_strlen(const UChar *s);$/;"	p	signature:(const UChar *s)
u_strlen	ustring.c	/^u_strlen(const UChar *s) $/;"	f	signature:(const UChar *s)
u_strncasecmp	unicode/urename.h	386;"	d
u_strncasecmp	unicode/ustring.h	/^u_strncasecmp(const UChar *s1, const UChar *s2, int32_t n, uint32_t options);$/;"	p	signature:(const UChar *s1, const UChar *s2, int32_t n, uint32_t options)
u_strncasecmp	ustrcase.c	/^u_strncasecmp(const UChar *s1, const UChar *s2, int32_t n, uint32_t options) {$/;"	f	signature:(const UChar *s1, const UChar *s2, int32_t n, uint32_t options)
u_strncat	unicode/urename.h	387;"	d
u_strncat	unicode/ustring.h	/^u_strncat(UChar     *dst, $/;"	p	signature:(UChar *dst, const UChar *src, int32_t n)
u_strncat	ustring.c	/^u_strncat(UChar     *dst, $/;"	f	signature:(UChar *dst, const UChar *src, int32_t n )
u_strncmp	unicode/urename.h	388;"	d
u_strncmp	unicode/ustring.h	/^u_strncmp(const UChar     *ucs1, $/;"	p	signature:(const UChar *ucs1, const UChar *ucs2, int32_t n)
u_strncmp	ustring.c	/^u_strncmp(const UChar     *s1, $/;"	f	signature:(const UChar *s1, const UChar *s2, int32_t n)
u_strncmpCodePointOrder	unicode/urename.h	389;"	d
u_strncmpCodePointOrder	unicode/ustring.h	/^u_strncmpCodePointOrder(const UChar *s1, const UChar *s2, int32_t n);$/;"	p	signature:(const UChar *s1, const UChar *s2, int32_t n)
u_strncmpCodePointOrder	ustring.c	/^u_strncmpCodePointOrder(const UChar *s1, const UChar *s2, int32_t n) {$/;"	f	signature:(const UChar *s1, const UChar *s2, int32_t n)
u_strncpy	unicode/urename.h	390;"	d
u_strncpy	unicode/ustring.h	/^u_strncpy(UChar     *dst, $/;"	p	signature:(UChar *dst, const UChar *src, int32_t n)
u_strncpy	ustring.c	/^u_strncpy(UChar     *dst, $/;"	f	signature:(UChar *dst, const UChar *src, int32_t n)
u_strpbrk	unicode/urename.h	391;"	d
u_strpbrk	unicode/ustring.h	/^u_strpbrk(const UChar *string, const UChar *matchSet);$/;"	p	signature:(const UChar *string, const UChar *matchSet)
u_strpbrk	ustring.c	/^u_strpbrk(const UChar *string, const UChar *matchSet)$/;"	f	signature:(const UChar *string, const UChar *matchSet)
u_strrchr	unicode/urename.h	392;"	d
u_strrchr	unicode/ustring.h	/^u_strrchr(const UChar *s, UChar c);$/;"	p	signature:(const UChar *s, UChar c)
u_strrchr	ustring.c	/^u_strrchr(const UChar *s, UChar c) {$/;"	f	signature:(const UChar *s, UChar c)
u_strrchr32	unicode/urename.h	393;"	d
u_strrchr32	unicode/ustring.h	/^u_strrchr32(const UChar *s, UChar32 c);$/;"	p	signature:(const UChar *s, UChar32 c)
u_strrchr32	ustring.c	/^u_strrchr32(const UChar *s, UChar32 c) {$/;"	f	signature:(const UChar *s, UChar32 c)
u_strrstr	unicode/urename.h	394;"	d
u_strrstr	unicode/ustring.h	/^u_strrstr(const UChar *s, const UChar *substring);$/;"	p	signature:(const UChar *s, const UChar *substring)
u_strrstr	ustring.c	/^u_strrstr(const UChar *s, const UChar *substring) {$/;"	f	signature:(const UChar *s, const UChar *substring)
u_strspn	unicode/urename.h	395;"	d
u_strspn	unicode/ustring.h	/^u_strspn(const UChar *string, const UChar *matchSet);$/;"	p	signature:(const UChar *string, const UChar *matchSet)
u_strspn	ustring.c	/^u_strspn(const UChar *string, const UChar *matchSet)$/;"	f	signature:(const UChar *string, const UChar *matchSet)
u_strstr	unicode/urename.h	396;"	d
u_strstr	unicode/ustring.h	/^u_strstr(const UChar *s, const UChar *substring);$/;"	p	signature:(const UChar *s, const UChar *substring)
u_strstr	ustring.c	/^u_strstr(const UChar *s, const UChar *substring) {$/;"	f	signature:(const UChar *s, const UChar *substring)
u_strtok_r	unicode/urename.h	397;"	d
u_strtok_r	unicode/ustring.h	/^u_strtok_r(UChar    *src, $/;"	p	signature:(UChar *src, const UChar *delim, UChar **saveState)
u_strtok_r	ustring.c	/^u_strtok_r(UChar    *src, $/;"	f	signature:(UChar *src, const UChar *delim, UChar **saveState)
u_terminateChars	unicode/urename.h	398;"	d
u_terminateChars	ustr_imp.h	/^u_terminateChars(char *dest, int32_t destCapacity, int32_t length, UErrorCode *pErrorCode);$/;"	p	signature:(char *dest, int32_t destCapacity, int32_t length, UErrorCode *pErrorCode)
u_terminateChars	ustring.c	/^u_terminateChars(char *dest, int32_t destCapacity, int32_t length, UErrorCode *pErrorCode) {$/;"	f	signature:(char *dest, int32_t destCapacity, int32_t length, UErrorCode *pErrorCode)
u_terminateUChar32s	unicode/urename.h	399;"	d
u_terminateUChar32s	ustr_imp.h	/^u_terminateUChar32s(UChar32 *dest, int32_t destCapacity, int32_t length, UErrorCode *pErrorCode);$/;"	p	signature:(UChar32 *dest, int32_t destCapacity, int32_t length, UErrorCode *pErrorCode)
u_terminateUChar32s	ustring.c	/^u_terminateUChar32s(UChar32 *dest, int32_t destCapacity, int32_t length, UErrorCode *pErrorCode) {$/;"	f	signature:(UChar32 *dest, int32_t destCapacity, int32_t length, UErrorCode *pErrorCode)
u_terminateUChars	unicode/urename.h	400;"	d
u_terminateUChars	ustr_imp.h	/^u_terminateUChars(UChar *dest, int32_t destCapacity, int32_t length, UErrorCode *pErrorCode);$/;"	p	signature:(UChar *dest, int32_t destCapacity, int32_t length, UErrorCode *pErrorCode)
u_terminateUChars	ustring.c	/^u_terminateUChars(UChar *dest, int32_t destCapacity, int32_t length, UErrorCode *pErrorCode) {$/;"	f	signature:(UChar *dest, int32_t destCapacity, int32_t length, UErrorCode *pErrorCode)
u_terminateWChars	unicode/urename.h	401;"	d
u_terminateWChars	ustr_imp.h	/^u_terminateWChars(wchar_t *dest, int32_t destCapacity, int32_t length, UErrorCode *pErrorCode);$/;"	p	signature:(wchar_t *dest, int32_t destCapacity, int32_t length, UErrorCode *pErrorCode)
u_terminateWChars	ustring.c	/^u_terminateWChars(wchar_t *dest, int32_t destCapacity, int32_t length, UErrorCode *pErrorCode) {$/;"	f	signature:(wchar_t *dest, int32_t destCapacity, int32_t length, UErrorCode *pErrorCode)
u_tolower	ucase.c	/^u_tolower(UChar32 c) {$/;"	f	signature:(UChar32 c)
u_tolower	unicode/uchar.h	/^u_tolower(UChar32 c);$/;"	p	signature:(UChar32 c)
u_tolower	unicode/urename.h	402;"	d
u_topNBytesOfDouble	putil.c	/^u_topNBytesOfDouble(double* d, int n)$/;"	f	file:	signature:(double* d, int n)
u_totitle	ucase.c	/^u_totitle(UChar32 c) {$/;"	f	signature:(UChar32 c)
u_totitle	unicode/uchar.h	/^u_totitle(UChar32 c);$/;"	p	signature:(UChar32 c)
u_totitle	unicode/urename.h	403;"	d
u_toupper	ucase.c	/^u_toupper(UChar32 c) {$/;"	f	signature:(UChar32 c)
u_toupper	unicode/uchar.h	/^u_toupper(UChar32 c);$/;"	p	signature:(UChar32 c)
u_toupper	unicode/urename.h	404;"	d
u_uastrcpy	unicode/urename.h	405;"	d
u_uastrcpy	unicode/ustring.h	/^U_STABLE UChar* U_EXPORT2 u_uastrcpy(UChar *dst,$/;"	p	signature:(UChar *dst, const char *src )
u_uastrcpy	ustr_cnv.c	/^u_uastrcpy(UChar *ucs1,$/;"	f	signature:(UChar *ucs1, const char *s2 )
u_uastrncpy	unicode/urename.h	406;"	d
u_uastrncpy	unicode/ustring.h	/^U_STABLE UChar* U_EXPORT2 u_uastrncpy(UChar *dst,$/;"	p	signature:(UChar *dst, const char *src, int32_t n)
u_uastrncpy	ustr_cnv.c	/^u_uastrncpy(UChar *ucs1,$/;"	f	signature:(UChar *ucs1, const char *s2, int32_t n)
u_unescape	unicode/urename.h	407;"	d
u_unescape	unicode/ustring.h	/^u_unescape(const char *src,$/;"	p	signature:(const char *src, UChar *dest, int32_t destCapacity)
u_unescape	ustring.c	/^u_unescape(const char *src, UChar *dest, int32_t destCapacity) {$/;"	f	signature:(const char *src, UChar *dest, int32_t destCapacity)
u_unescapeAt	unicode/urename.h	408;"	d
u_unescapeAt	unicode/ustring.h	/^u_unescapeAt(UNESCAPE_CHAR_AT charAt,$/;"	p	signature:(UNESCAPE_CHAR_AT charAt, int32_t *offset, int32_t length, void *context)
u_unescapeAt	ustring.c	/^u_unescapeAt(UNESCAPE_CHAR_AT charAt,$/;"	f	signature:(UNESCAPE_CHAR_AT charAt, int32_t *offset, int32_t length, void *context)
u_ustrnlen	ustr_cnv.c	/^static int32_t u_ustrnlen(const UChar *ucs1, int32_t n)$/;"	f	file:	signature:(const UChar *ucs1, int32_t n)
u_versionFromString	putil.c	/^u_versionFromString(UVersionInfo versionArray, const char *versionString) {$/;"	f	signature:(UVersionInfo versionArray, const char *versionString)
u_versionFromString	unicode/urename.h	409;"	d
u_versionFromString	unicode/uversion.h	/^u_versionFromString(UVersionInfo versionArray, const char *versionString);$/;"	p	signature:(UVersionInfo versionArray, const char *versionString)
u_versionFromUString	putil.c	/^u_versionFromUString(UVersionInfo versionArray, const UChar *versionString) {$/;"	f	signature:(UVersionInfo versionArray, const UChar *versionString)
u_versionFromUString	unicode/urename.h	410;"	d
u_versionFromUString	unicode/uversion.h	/^u_versionFromUString(UVersionInfo versionArray, const UChar *versionString);$/;"	p	signature:(UVersionInfo versionArray, const UChar *versionString)
u_versionToString	putil.c	/^u_versionToString(UVersionInfo versionArray, char *versionString) {$/;"	f	signature:(UVersionInfo versionArray, char *versionString)
u_versionToString	unicode/urename.h	411;"	d
u_versionToString	unicode/uversion.h	/^u_versionToString(UVersionInfo versionArray, char *versionString);$/;"	p	signature:(UVersionInfo versionArray, char *versionString)
u_vformatMessage	unicode/urename.h	412;"	d
u_vformatMessageWithError	unicode/urename.h	413;"	d
u_vfprintf	unicode/urename.h	414;"	d
u_vfprintf_u	unicode/urename.h	415;"	d
u_vfscanf	unicode/urename.h	416;"	d
u_vfscanf_u	unicode/urename.h	417;"	d
u_vparseMessage	unicode/urename.h	418;"	d
u_vparseMessageWithError	unicode/urename.h	419;"	d
u_vsnprintf	unicode/urename.h	420;"	d
u_vsnprintf_u	unicode/urename.h	421;"	d
u_vsprintf	unicode/urename.h	422;"	d
u_vsprintf_u	unicode/urename.h	423;"	d
u_vsscanf	unicode/urename.h	424;"	d
u_vsscanf_u	unicode/urename.h	425;"	d
u_writeDiff	unicode/urename.h	426;"	d
u_writeIdenticalLevelRun	unicode/urename.h	427;"	d
u_writeIdenticalLevelRunTwoChars	unicode/urename.h	428;"	d
ubidi_addPropertyStarts	ubidi_props.c	/^ubidi_addPropertyStarts(const UBiDiProps *bdp, const USetAdder *sa, UErrorCode *pErrorCode) {$/;"	f	signature:(const UBiDiProps *bdp, const USetAdder *sa, UErrorCode *pErrorCode)
ubidi_addPropertyStarts	ubidi_props.h	/^ubidi_addPropertyStarts(const UBiDiProps *bdp, const USetAdder *sa, UErrorCode *pErrorCode);$/;"	p	signature:(const UBiDiProps *bdp, const USetAdder *sa, UErrorCode *pErrorCode)
ubidi_addPropertyStarts	unicode/urename.h	429;"	d
ubidi_close	ubidi.c	/^ubidi_close(UBiDi *pBiDi) {$/;"	f	signature:(UBiDi *pBiDi)
ubidi_close	unicode/ubidi.h	/^ubidi_close(UBiDi *pBiDi);$/;"	p	signature:(UBiDi *pBiDi)
ubidi_close	unicode/urename.h	430;"	d
ubidi_countParagraphs	ubidi.c	/^ubidi_countParagraphs(UBiDi *pBiDi) {$/;"	f	signature:(UBiDi *pBiDi)
ubidi_countParagraphs	unicode/ubidi.h	/^ubidi_countParagraphs(UBiDi *pBiDi);$/;"	p	signature:(UBiDi *pBiDi)
ubidi_countParagraphs	unicode/urename.h	431;"	d
ubidi_countRuns	ubidiln.c	/^ubidi_countRuns(UBiDi *pBiDi, UErrorCode *pErrorCode) {$/;"	f	signature:(UBiDi *pBiDi, UErrorCode *pErrorCode)
ubidi_countRuns	unicode/ubidi.h	/^ubidi_countRuns(UBiDi *pBiDi, UErrorCode *pErrorCode);$/;"	p	signature:(UBiDi *pBiDi, UErrorCode *pErrorCode)
ubidi_countRuns	unicode/urename.h	432;"	d
ubidi_getBaseDirection	ubidi.c	/^ubidi_getBaseDirection(const UChar *text,$/;"	f	signature:(const UChar *text, int32_t length)
ubidi_getBaseDirection	unicode/ubidi.h	/^ubidi_getBaseDirection(const UChar *text,  int32_t length );$/;"	p	signature:(const UChar *text, int32_t length )
ubidi_getBaseDirection	unicode/udraft.h	27;"	d
ubidi_getBaseDirection	unicode/urename.h	433;"	d
ubidi_getBaseDirection_4_6	unicode/udraft.h	57;"	d
ubidi_getClass	ubidi_props.c	/^ubidi_getClass(const UBiDiProps *bdp, UChar32 c) {$/;"	f	signature:(const UBiDiProps *bdp, UChar32 c)
ubidi_getClass	ubidi_props.h	/^ubidi_getClass(const UBiDiProps *bdp, UChar32 c);$/;"	p	signature:(const UBiDiProps *bdp, UChar32 c)
ubidi_getClass	unicode/urename.h	434;"	d
ubidi_getClassCallback	ubidi.c	/^ubidi_getClassCallback(UBiDi *pBiDi, UBiDiClassCallback **fn, const void **context)$/;"	f	signature:(UBiDi *pBiDi, UBiDiClassCallback **fn, const void **context)
ubidi_getClassCallback	unicode/ubidi.h	/^ubidi_getClassCallback(UBiDi *pBiDi, UBiDiClassCallback **fn, const void **context);$/;"	p	signature:(UBiDi *pBiDi, UBiDiClassCallback **fn, const void **context)
ubidi_getClassCallback	unicode/urename.h	435;"	d
ubidi_getCustomizedClass	ubidi.c	/^ubidi_getCustomizedClass(UBiDi *pBiDi, UChar32 c)$/;"	f	signature:(UBiDi *pBiDi, UChar32 c)
ubidi_getCustomizedClass	unicode/ubidi.h	/^ubidi_getCustomizedClass(UBiDi *pBiDi, UChar32 c);$/;"	p	signature:(UBiDi *pBiDi, UChar32 c)
ubidi_getCustomizedClass	unicode/urename.h	436;"	d
ubidi_getDirection	ubidi.c	/^ubidi_getDirection(const UBiDi *pBiDi) {$/;"	f	signature:(const UBiDi *pBiDi)
ubidi_getDirection	unicode/ubidi.h	/^ubidi_getDirection(const UBiDi *pBiDi);$/;"	p	signature:(const UBiDi *pBiDi)
ubidi_getDirection	unicode/urename.h	437;"	d
ubidi_getJoiningGroup	ubidi_props.c	/^ubidi_getJoiningGroup(const UBiDiProps *bdp, UChar32 c) {$/;"	f	signature:(const UBiDiProps *bdp, UChar32 c)
ubidi_getJoiningGroup	ubidi_props.h	/^ubidi_getJoiningGroup(const UBiDiProps *bdp, UChar32 c);$/;"	p	signature:(const UBiDiProps *bdp, UChar32 c)
ubidi_getJoiningGroup	unicode/urename.h	438;"	d
ubidi_getJoiningType	ubidi_props.c	/^ubidi_getJoiningType(const UBiDiProps *bdp, UChar32 c) {$/;"	f	signature:(const UBiDiProps *bdp, UChar32 c)
ubidi_getJoiningType	ubidi_props.h	/^ubidi_getJoiningType(const UBiDiProps *bdp, UChar32 c);$/;"	p	signature:(const UBiDiProps *bdp, UChar32 c)
ubidi_getJoiningType	unicode/urename.h	439;"	d
ubidi_getLength	ubidi.c	/^ubidi_getLength(const UBiDi *pBiDi) {$/;"	f	signature:(const UBiDi *pBiDi)
ubidi_getLength	unicode/ubidi.h	/^ubidi_getLength(const UBiDi *pBiDi);$/;"	p	signature:(const UBiDi *pBiDi)
ubidi_getLength	unicode/urename.h	440;"	d
ubidi_getLevelAt	ubidiln.c	/^ubidi_getLevelAt(const UBiDi *pBiDi, int32_t charIndex) {$/;"	f	signature:(const UBiDi *pBiDi, int32_t charIndex)
ubidi_getLevelAt	unicode/ubidi.h	/^ubidi_getLevelAt(const UBiDi *pBiDi, int32_t charIndex);$/;"	p	signature:(const UBiDi *pBiDi, int32_t charIndex)
ubidi_getLevelAt	unicode/urename.h	441;"	d
ubidi_getLevels	ubidiln.c	/^ubidi_getLevels(UBiDi *pBiDi, UErrorCode *pErrorCode) {$/;"	f	signature:(UBiDi *pBiDi, UErrorCode *pErrorCode)
ubidi_getLevels	unicode/ubidi.h	/^ubidi_getLevels(UBiDi *pBiDi, UErrorCode *pErrorCode);$/;"	p	signature:(UBiDi *pBiDi, UErrorCode *pErrorCode)
ubidi_getLevels	unicode/urename.h	442;"	d
ubidi_getLogicalIndex	ubidiln.c	/^ubidi_getLogicalIndex(UBiDi *pBiDi, int32_t visualIndex, UErrorCode *pErrorCode) {$/;"	f	signature:(UBiDi *pBiDi, int32_t visualIndex, UErrorCode *pErrorCode)
ubidi_getLogicalIndex	unicode/ubidi.h	/^ubidi_getLogicalIndex(UBiDi *pBiDi, int32_t visualIndex, UErrorCode *pErrorCode);$/;"	p	signature:(UBiDi *pBiDi, int32_t visualIndex, UErrorCode *pErrorCode)
ubidi_getLogicalIndex	unicode/urename.h	443;"	d
ubidi_getLogicalMap	ubidiln.c	/^ubidi_getLogicalMap(UBiDi *pBiDi, int32_t *indexMap, UErrorCode *pErrorCode) {$/;"	f	signature:(UBiDi *pBiDi, int32_t *indexMap, UErrorCode *pErrorCode)
ubidi_getLogicalMap	unicode/ubidi.h	/^ubidi_getLogicalMap(UBiDi *pBiDi, int32_t *indexMap, UErrorCode *pErrorCode);$/;"	p	signature:(UBiDi *pBiDi, int32_t *indexMap, UErrorCode *pErrorCode)
ubidi_getLogicalMap	unicode/urename.h	444;"	d
ubidi_getLogicalRun	ubidiln.c	/^ubidi_getLogicalRun(const UBiDi *pBiDi, int32_t logicalPosition,$/;"	f	signature:(const UBiDi *pBiDi, int32_t logicalPosition, int32_t *pLogicalLimit, UBiDiLevel *pLevel)
ubidi_getLogicalRun	unicode/ubidi.h	/^ubidi_getLogicalRun(const UBiDi *pBiDi, int32_t logicalPosition,$/;"	p	signature:(const UBiDi *pBiDi, int32_t logicalPosition, int32_t *pLogicalLimit, UBiDiLevel *pLevel)
ubidi_getLogicalRun	unicode/urename.h	445;"	d
ubidi_getMaxValue	ubidi_props.c	/^ubidi_getMaxValue(const UBiDiProps *bdp, UProperty which) {$/;"	f	signature:(const UBiDiProps *bdp, UProperty which)
ubidi_getMaxValue	ubidi_props.h	/^ubidi_getMaxValue(const UBiDiProps *bdp, UProperty which);$/;"	p	signature:(const UBiDiProps *bdp, UProperty which)
ubidi_getMaxValue	unicode/urename.h	446;"	d
ubidi_getMemory	ubidi.c	/^ubidi_getMemory(BidiMemoryForAllocation *bidiMem, int32_t *pSize, UBool mayAllocate, int32_t sizeNeeded) {$/;"	f	signature:(BidiMemoryForAllocation *bidiMem, int32_t *pSize, UBool mayAllocate, int32_t sizeNeeded)
ubidi_getMemory	ubidiimp.h	/^ubidi_getMemory(BidiMemoryForAllocation *pMemory, int32_t *pSize, UBool mayAllocate, int32_t sizeNeeded);$/;"	p	signature:(BidiMemoryForAllocation *pMemory, int32_t *pSize, UBool mayAllocate, int32_t sizeNeeded)
ubidi_getMemory	unicode/urename.h	447;"	d
ubidi_getMirror	ubidi_props.c	/^ubidi_getMirror(const UBiDiProps *bdp, UChar32 c) {$/;"	f	signature:(const UBiDiProps *bdp, UChar32 c)
ubidi_getMirror	ubidi_props.h	/^ubidi_getMirror(const UBiDiProps *bdp, UChar32 c);$/;"	p	signature:(const UBiDiProps *bdp, UChar32 c)
ubidi_getMirror	unicode/urename.h	448;"	d
ubidi_getParaLevel	ubidi.c	/^ubidi_getParaLevel(const UBiDi *pBiDi) {$/;"	f	signature:(const UBiDi *pBiDi)
ubidi_getParaLevel	unicode/ubidi.h	/^ubidi_getParaLevel(const UBiDi *pBiDi);$/;"	p	signature:(const UBiDi *pBiDi)
ubidi_getParaLevel	unicode/urename.h	449;"	d
ubidi_getParagraph	ubidi.c	/^ubidi_getParagraph(const UBiDi *pBiDi, int32_t charIndex,$/;"	f	signature:(const UBiDi *pBiDi, int32_t charIndex, int32_t *pParaStart, int32_t *pParaLimit, UBiDiLevel *pParaLevel, UErrorCode *pErrorCode)
ubidi_getParagraph	unicode/ubidi.h	/^ubidi_getParagraph(const UBiDi *pBiDi, int32_t charIndex, int32_t *pParaStart,$/;"	p	signature:(const UBiDi *pBiDi, int32_t charIndex, int32_t *pParaStart, int32_t *pParaLimit, UBiDiLevel *pParaLevel, UErrorCode *pErrorCode)
ubidi_getParagraph	unicode/urename.h	450;"	d
ubidi_getParagraphByIndex	ubidi.c	/^ubidi_getParagraphByIndex(const UBiDi *pBiDi, int32_t paraIndex,$/;"	f	signature:(const UBiDi *pBiDi, int32_t paraIndex, int32_t *pParaStart, int32_t *pParaLimit, UBiDiLevel *pParaLevel, UErrorCode *pErrorCode)
ubidi_getParagraphByIndex	unicode/ubidi.h	/^ubidi_getParagraphByIndex(const UBiDi *pBiDi, int32_t paraIndex,$/;"	p	signature:(const UBiDi *pBiDi, int32_t paraIndex, int32_t *pParaStart, int32_t *pParaLimit, UBiDiLevel *pParaLevel, UErrorCode *pErrorCode)
ubidi_getParagraphByIndex	unicode/urename.h	451;"	d
ubidi_getProcessedLength	ubidi.c	/^ubidi_getProcessedLength(const UBiDi *pBiDi) {$/;"	f	signature:(const UBiDi *pBiDi)
ubidi_getProcessedLength	unicode/ubidi.h	/^ubidi_getProcessedLength(const UBiDi *pBiDi);$/;"	p	signature:(const UBiDi *pBiDi)
ubidi_getProcessedLength	unicode/urename.h	452;"	d
ubidi_getReorderingMode	ubidi.c	/^ubidi_getReorderingMode(UBiDi *pBiDi) {$/;"	f	signature:(UBiDi *pBiDi)
ubidi_getReorderingMode	unicode/ubidi.h	/^ubidi_getReorderingMode(UBiDi *pBiDi);$/;"	p	signature:(UBiDi *pBiDi)
ubidi_getReorderingMode	unicode/urename.h	453;"	d
ubidi_getReorderingOptions	ubidi.c	/^ubidi_getReorderingOptions(UBiDi *pBiDi) {$/;"	f	signature:(UBiDi *pBiDi)
ubidi_getReorderingOptions	unicode/ubidi.h	/^ubidi_getReorderingOptions(UBiDi *pBiDi);$/;"	p	signature:(UBiDi *pBiDi)
ubidi_getReorderingOptions	unicode/urename.h	454;"	d
ubidi_getResultLength	ubidi.c	/^ubidi_getResultLength(const UBiDi *pBiDi) {$/;"	f	signature:(const UBiDi *pBiDi)
ubidi_getResultLength	unicode/ubidi.h	/^ubidi_getResultLength(const UBiDi *pBiDi);$/;"	p	signature:(const UBiDi *pBiDi)
ubidi_getResultLength	unicode/urename.h	455;"	d
ubidi_getRuns	ubidiimp.h	/^ubidi_getRuns(UBiDi *pBiDi, UErrorCode *pErrorCode);$/;"	p	signature:(UBiDi *pBiDi, UErrorCode *pErrorCode)
ubidi_getRuns	ubidiln.c	/^ubidi_getRuns(UBiDi *pBiDi, UErrorCode *pErrorCode) {$/;"	f	signature:(UBiDi *pBiDi, UErrorCode *pErrorCode)
ubidi_getRuns	unicode/urename.h	456;"	d
ubidi_getSingleton	ubidi_props.c	/^ubidi_getSingleton() {$/;"	f
ubidi_getSingleton	ubidi_props.h	/^ubidi_getSingleton(void);$/;"	p	signature:(void)
ubidi_getSingleton	unicode/urename.h	457;"	d
ubidi_getText	ubidi.c	/^ubidi_getText(const UBiDi *pBiDi) {$/;"	f	signature:(const UBiDi *pBiDi)
ubidi_getText	unicode/ubidi.h	/^ubidi_getText(const UBiDi *pBiDi);$/;"	p	signature:(const UBiDi *pBiDi)
ubidi_getText	unicode/urename.h	458;"	d
ubidi_getVisualIndex	ubidiln.c	/^ubidi_getVisualIndex(UBiDi *pBiDi, int32_t logicalIndex, UErrorCode *pErrorCode) {$/;"	f	signature:(UBiDi *pBiDi, int32_t logicalIndex, UErrorCode *pErrorCode)
ubidi_getVisualIndex	unicode/ubidi.h	/^ubidi_getVisualIndex(UBiDi *pBiDi, int32_t logicalIndex, UErrorCode *pErrorCode);$/;"	p	signature:(UBiDi *pBiDi, int32_t logicalIndex, UErrorCode *pErrorCode)
ubidi_getVisualIndex	unicode/urename.h	459;"	d
ubidi_getVisualMap	ubidiln.c	/^ubidi_getVisualMap(UBiDi *pBiDi, int32_t *indexMap, UErrorCode *pErrorCode) {$/;"	f	signature:(UBiDi *pBiDi, int32_t *indexMap, UErrorCode *pErrorCode)
ubidi_getVisualMap	unicode/ubidi.h	/^ubidi_getVisualMap(UBiDi *pBiDi, int32_t *indexMap, UErrorCode *pErrorCode);$/;"	p	signature:(UBiDi *pBiDi, int32_t *indexMap, UErrorCode *pErrorCode)
ubidi_getVisualMap	unicode/urename.h	460;"	d
ubidi_getVisualRun	ubidiln.c	/^ubidi_getVisualRun(UBiDi *pBiDi, int32_t runIndex,$/;"	f	signature:(UBiDi *pBiDi, int32_t runIndex, int32_t *pLogicalStart, int32_t *pLength)
ubidi_getVisualRun	unicode/ubidi.h	/^ubidi_getVisualRun(UBiDi *pBiDi, int32_t runIndex,$/;"	p	signature:(UBiDi *pBiDi, int32_t runIndex, int32_t *pLogicalStart, int32_t *pLength)
ubidi_getVisualRun	unicode/urename.h	461;"	d
ubidi_invertMap	ubidiln.c	/^ubidi_invertMap(const int32_t *srcMap, int32_t *destMap, int32_t length) {$/;"	f	signature:(const int32_t *srcMap, int32_t *destMap, int32_t length)
ubidi_invertMap	unicode/ubidi.h	/^ubidi_invertMap(const int32_t *srcMap, int32_t *destMap, int32_t length);$/;"	p	signature:(const int32_t *srcMap, int32_t *destMap, int32_t length)
ubidi_invertMap	unicode/urename.h	462;"	d
ubidi_isBidiControl	ubidi_props.c	/^ubidi_isBidiControl(const UBiDiProps *bdp, UChar32 c) {$/;"	f	signature:(const UBiDiProps *bdp, UChar32 c)
ubidi_isBidiControl	ubidi_props.h	/^ubidi_isBidiControl(const UBiDiProps *bdp, UChar32 c);$/;"	p	signature:(const UBiDiProps *bdp, UChar32 c)
ubidi_isBidiControl	unicode/urename.h	463;"	d
ubidi_isInverse	ubidi.c	/^ubidi_isInverse(UBiDi *pBiDi) {$/;"	f	signature:(UBiDi *pBiDi)
ubidi_isInverse	unicode/ubidi.h	/^ubidi_isInverse(UBiDi *pBiDi);$/;"	p	signature:(UBiDi *pBiDi)
ubidi_isInverse	unicode/urename.h	464;"	d
ubidi_isJoinControl	ubidi_props.c	/^ubidi_isJoinControl(const UBiDiProps *bdp, UChar32 c) {$/;"	f	signature:(const UBiDiProps *bdp, UChar32 c)
ubidi_isJoinControl	ubidi_props.h	/^ubidi_isJoinControl(const UBiDiProps *bdp, UChar32 c);$/;"	p	signature:(const UBiDiProps *bdp, UChar32 c)
ubidi_isJoinControl	unicode/urename.h	465;"	d
ubidi_isMirrored	ubidi_props.c	/^ubidi_isMirrored(const UBiDiProps *bdp, UChar32 c) {$/;"	f	signature:(const UBiDiProps *bdp, UChar32 c)
ubidi_isMirrored	ubidi_props.h	/^ubidi_isMirrored(const UBiDiProps *bdp, UChar32 c);$/;"	p	signature:(const UBiDiProps *bdp, UChar32 c)
ubidi_isMirrored	unicode/urename.h	466;"	d
ubidi_isOrderParagraphsLTR	ubidi.c	/^ubidi_isOrderParagraphsLTR(UBiDi *pBiDi) {$/;"	f	signature:(UBiDi *pBiDi)
ubidi_isOrderParagraphsLTR	unicode/ubidi.h	/^ubidi_isOrderParagraphsLTR(UBiDi *pBiDi);$/;"	p	signature:(UBiDi *pBiDi)
ubidi_isOrderParagraphsLTR	unicode/urename.h	467;"	d
ubidi_open	ubidi.c	/^ubidi_open(void)$/;"	f	signature:(void)
ubidi_open	unicode/ubidi.h	/^ubidi_open(void);$/;"	p	signature:(void)
ubidi_open	unicode/urename.h	468;"	d
ubidi_openSized	ubidi.c	/^ubidi_openSized(int32_t maxLength, int32_t maxRunCount, UErrorCode *pErrorCode) {$/;"	f	signature:(int32_t maxLength, int32_t maxRunCount, UErrorCode *pErrorCode)
ubidi_openSized	unicode/ubidi.h	/^ubidi_openSized(int32_t maxLength, int32_t maxRunCount, UErrorCode *pErrorCode);$/;"	p	signature:(int32_t maxLength, int32_t maxRunCount, UErrorCode *pErrorCode)
ubidi_openSized	unicode/urename.h	469;"	d
ubidi_orderParagraphsLTR	ubidi.c	/^ubidi_orderParagraphsLTR(UBiDi *pBiDi, UBool orderParagraphsLTR) {$/;"	f	signature:(UBiDi *pBiDi, UBool orderParagraphsLTR)
ubidi_orderParagraphsLTR	unicode/ubidi.h	/^ubidi_orderParagraphsLTR(UBiDi *pBiDi, UBool orderParagraphsLTR);$/;"	p	signature:(UBiDi *pBiDi, UBool orderParagraphsLTR)
ubidi_orderParagraphsLTR	unicode/urename.h	470;"	d
ubidi_props_dataVersion	ubidi_props_data.c	/^static const UVersionInfo ubidi_props_dataVersion={6,0,0,0};$/;"	v	file:
ubidi_props_indexes	ubidi_props_data.c	/^static const int32_t ubidi_props_indexes[UBIDI_IX_TOP]={0x10,0x4fa0,0x4d98,0x1a,0x620,0x780,0,0,0,0,0,0,0,0,0,0x3800b2};$/;"	v	file:
ubidi_props_jgArray	ubidi_props_data.c	/^static const uint8_t ubidi_props_jgArray[352]={$/;"	v	file:
ubidi_props_mirrors	ubidi_props_data.c	/^static const uint32_t ubidi_props_mirrors[26]={$/;"	v	file:
ubidi_props_singleton	ubidi_props_data.c	/^static const UBiDiProps ubidi_props_singleton={$/;"	v	file:
ubidi_props_trieIndex	ubidi_props_data.c	/^static const uint16_t ubidi_props_trieIndex[9924]={$/;"	v	file:
ubidi_reorderLogical	ubidiln.c	/^ubidi_reorderLogical(const UBiDiLevel *levels, int32_t length, int32_t *indexMap) {$/;"	f	signature:(const UBiDiLevel *levels, int32_t length, int32_t *indexMap)
ubidi_reorderLogical	unicode/ubidi.h	/^ubidi_reorderLogical(const UBiDiLevel *levels, int32_t length, int32_t *indexMap);$/;"	p	signature:(const UBiDiLevel *levels, int32_t length, int32_t *indexMap)
ubidi_reorderLogical	unicode/urename.h	471;"	d
ubidi_reorderVisual	ubidiln.c	/^ubidi_reorderVisual(const UBiDiLevel *levels, int32_t length, int32_t *indexMap) {$/;"	f	signature:(const UBiDiLevel *levels, int32_t length, int32_t *indexMap)
ubidi_reorderVisual	unicode/ubidi.h	/^ubidi_reorderVisual(const UBiDiLevel *levels, int32_t length, int32_t *indexMap);$/;"	p	signature:(const UBiDiLevel *levels, int32_t length, int32_t *indexMap)
ubidi_reorderVisual	unicode/urename.h	472;"	d
ubidi_setClassCallback	ubidi.c	/^ubidi_setClassCallback(UBiDi *pBiDi, UBiDiClassCallback *newFn,$/;"	f	signature:(UBiDi *pBiDi, UBiDiClassCallback *newFn, const void *newContext, UBiDiClassCallback **oldFn, const void **oldContext, UErrorCode *pErrorCode)
ubidi_setClassCallback	unicode/ubidi.h	/^ubidi_setClassCallback(UBiDi *pBiDi, UBiDiClassCallback *newFn,$/;"	p	signature:(UBiDi *pBiDi, UBiDiClassCallback *newFn, const void *newContext, UBiDiClassCallback **oldFn, const void **oldContext, UErrorCode *pErrorCode)
ubidi_setClassCallback	unicode/urename.h	473;"	d
ubidi_setInverse	ubidi.c	/^ubidi_setInverse(UBiDi *pBiDi, UBool isInverse) {$/;"	f	signature:(UBiDi *pBiDi, UBool isInverse)
ubidi_setInverse	unicode/ubidi.h	/^ubidi_setInverse(UBiDi *pBiDi, UBool isInverse);$/;"	p	signature:(UBiDi *pBiDi, UBool isInverse)
ubidi_setInverse	unicode/urename.h	474;"	d
ubidi_setLine	ubidiln.c	/^ubidi_setLine(const UBiDi *pParaBiDi,$/;"	f	signature:(const UBiDi *pParaBiDi, int32_t start, int32_t limit, UBiDi *pLineBiDi, UErrorCode *pErrorCode)
ubidi_setLine	unicode/ubidi.h	/^ubidi_setLine(const UBiDi *pParaBiDi,$/;"	p	signature:(const UBiDi *pParaBiDi, int32_t start, int32_t limit, UBiDi *pLineBiDi, UErrorCode *pErrorCode)
ubidi_setLine	unicode/urename.h	475;"	d
ubidi_setPara	ubidi.c	/^ubidi_setPara(UBiDi *pBiDi, const UChar *text, int32_t length,$/;"	f	signature:(UBiDi *pBiDi, const UChar *text, int32_t length, UBiDiLevel paraLevel, UBiDiLevel *embeddingLevels, UErrorCode *pErrorCode)
ubidi_setPara	unicode/ubidi.h	/^ubidi_setPara(UBiDi *pBiDi, const UChar *text, int32_t length,$/;"	p	signature:(UBiDi *pBiDi, const UChar *text, int32_t length, UBiDiLevel paraLevel, UBiDiLevel *embeddingLevels, UErrorCode *pErrorCode)
ubidi_setPara	unicode/urename.h	476;"	d
ubidi_setReorderingMode	ubidi.c	/^ubidi_setReorderingMode(UBiDi *pBiDi, UBiDiReorderingMode reorderingMode) {$/;"	f	signature:(UBiDi *pBiDi, UBiDiReorderingMode reorderingMode)
ubidi_setReorderingMode	unicode/ubidi.h	/^ubidi_setReorderingMode(UBiDi *pBiDi, UBiDiReorderingMode reorderingMode);$/;"	p	signature:(UBiDi *pBiDi, UBiDiReorderingMode reorderingMode)
ubidi_setReorderingMode	unicode/urename.h	477;"	d
ubidi_setReorderingOptions	ubidi.c	/^ubidi_setReorderingOptions(UBiDi *pBiDi, uint32_t reorderingOptions) {$/;"	f	signature:(UBiDi *pBiDi, uint32_t reorderingOptions)
ubidi_setReorderingOptions	unicode/ubidi.h	/^ubidi_setReorderingOptions(UBiDi *pBiDi, uint32_t reorderingOptions);$/;"	p	signature:(UBiDi *pBiDi, uint32_t reorderingOptions)
ubidi_setReorderingOptions	unicode/urename.h	478;"	d
ubidi_swap	ubidi_props.h	/^ubidi_swap(const UDataSwapper *ds,$/;"	p	signature:(const UDataSwapper *ds, const void *inData, int32_t length, void *outData, UErrorCode *pErrorCode)
ubidi_writeReordered	ubidiwrt.c	/^ubidi_writeReordered(UBiDi *pBiDi,$/;"	f	signature:(UBiDi *pBiDi, UChar *dest, int32_t destSize, uint16_t options, UErrorCode *pErrorCode)
ubidi_writeReordered	unicode/ubidi.h	/^ubidi_writeReordered(UBiDi *pBiDi,$/;"	p	signature:(UBiDi *pBiDi, UChar *dest, int32_t destSize, uint16_t options, UErrorCode *pErrorCode)
ubidi_writeReordered	unicode/urename.h	479;"	d
ubidi_writeReverse	ubidiwrt.c	/^ubidi_writeReverse(const UChar *src, int32_t srcLength,$/;"	f	signature:(const UChar *src, int32_t srcLength, UChar *dest, int32_t destSize, uint16_t options, UErrorCode *pErrorCode)
ubidi_writeReverse	unicode/ubidi.h	/^ubidi_writeReverse(const UChar *src, int32_t srcLength,$/;"	p	signature:(const UChar *src, int32_t srcLength, UChar *dest, int32_t destSize, uint16_t options, UErrorCode *pErrorCode)
ubidi_writeReverse	unicode/urename.h	480;"	d
ublock_getCode	uchar.c	/^ublock_getCode(UChar32 c) {$/;"	f	signature:(UChar32 c)
ublock_getCode	unicode/uchar.h	/^ublock_getCode(UChar32 c);$/;"	p	signature:(UChar32 c)
ublock_getCode	unicode/urename.h	481;"	d
ubrk_close	ubrk.cpp	/^ubrk_close(UBreakIterator *bi)$/;"	f	signature:(UBreakIterator *bi)
ubrk_close	unicode/ubrk.h	/^ubrk_close(UBreakIterator *bi);$/;"	p	signature:(UBreakIterator *bi)
ubrk_close	unicode/urename.h	482;"	d
ubrk_countAvailable	ubrk.cpp	/^ubrk_countAvailable()$/;"	f	signature:()
ubrk_countAvailable	unicode/ubrk.h	/^ubrk_countAvailable(void);$/;"	p	signature:(void)
ubrk_countAvailable	unicode/urename.h	483;"	d
ubrk_current	ubrk.cpp	/^ubrk_current(const UBreakIterator *bi)$/;"	f	signature:(const UBreakIterator *bi)
ubrk_current	unicode/ubrk.h	/^ubrk_current(const UBreakIterator *bi);$/;"	p	signature:(const UBreakIterator *bi)
ubrk_current	unicode/urename.h	484;"	d
ubrk_first	ubrk.cpp	/^ubrk_first(UBreakIterator *bi)$/;"	f	signature:(UBreakIterator *bi)
ubrk_first	unicode/ubrk.h	/^ubrk_first(UBreakIterator *bi);$/;"	p	signature:(UBreakIterator *bi)
ubrk_first	unicode/urename.h	485;"	d
ubrk_following	ubrk.cpp	/^ubrk_following(UBreakIterator *bi,$/;"	f	signature:(UBreakIterator *bi, int32_t offset)
ubrk_following	unicode/ubrk.h	/^ubrk_following(UBreakIterator *bi,$/;"	p	signature:(UBreakIterator *bi, int32_t offset)
ubrk_following	unicode/urename.h	486;"	d
ubrk_getAvailable	ubrk.cpp	/^ubrk_getAvailable(int32_t index)$/;"	f	signature:(int32_t index)
ubrk_getAvailable	unicode/ubrk.h	/^ubrk_getAvailable(int32_t index);$/;"	p	signature:(int32_t index)
ubrk_getAvailable	unicode/urename.h	487;"	d
ubrk_getLocaleByType	ubrk.cpp	/^ubrk_getLocaleByType(const UBreakIterator *bi,$/;"	f	signature:(const UBreakIterator *bi, ULocDataLocaleType type, UErrorCode* status)
ubrk_getLocaleByType	unicode/ubrk.h	/^ubrk_getLocaleByType(const UBreakIterator *bi, ULocDataLocaleType type, UErrorCode* status);$/;"	p	signature:(const UBreakIterator *bi, ULocDataLocaleType type, UErrorCode* status)
ubrk_getLocaleByType	unicode/urename.h	488;"	d
ubrk_getRuleStatus	ubrk.cpp	/^ubrk_getRuleStatus(UBreakIterator *bi)$/;"	f	signature:(UBreakIterator *bi)
ubrk_getRuleStatus	unicode/ubrk.h	/^ubrk_getRuleStatus(UBreakIterator *bi);$/;"	p	signature:(UBreakIterator *bi)
ubrk_getRuleStatus	unicode/urename.h	489;"	d
ubrk_getRuleStatusVec	ubrk.cpp	/^ubrk_getRuleStatusVec(UBreakIterator *bi, int32_t *fillInVec, int32_t capacity, UErrorCode *status)$/;"	f	signature:(UBreakIterator *bi, int32_t *fillInVec, int32_t capacity, UErrorCode *status)
ubrk_getRuleStatusVec	unicode/ubrk.h	/^ubrk_getRuleStatusVec(UBreakIterator *bi, int32_t *fillInVec, int32_t capacity, UErrorCode *status);$/;"	p	signature:(UBreakIterator *bi, int32_t *fillInVec, int32_t capacity, UErrorCode *status)
ubrk_getRuleStatusVec	unicode/urename.h	490;"	d
ubrk_isBoundary	ubrk.cpp	/^ubrk_isBoundary(UBreakIterator *bi, int32_t offset)$/;"	f	signature:(UBreakIterator *bi, int32_t offset)
ubrk_isBoundary	unicode/ubrk.h	/^ubrk_isBoundary(UBreakIterator *bi, int32_t offset);$/;"	p	signature:(UBreakIterator *bi, int32_t offset)
ubrk_isBoundary	unicode/urename.h	491;"	d
ubrk_last	ubrk.cpp	/^ubrk_last(UBreakIterator *bi)$/;"	f	signature:(UBreakIterator *bi)
ubrk_last	unicode/ubrk.h	/^ubrk_last(UBreakIterator *bi);$/;"	p	signature:(UBreakIterator *bi)
ubrk_last	unicode/urename.h	492;"	d
ubrk_next	ubrk.cpp	/^ubrk_next(UBreakIterator *bi)$/;"	f	signature:(UBreakIterator *bi)
ubrk_next	unicode/ubrk.h	/^ubrk_next(UBreakIterator *bi);$/;"	p	signature:(UBreakIterator *bi)
ubrk_next	unicode/urename.h	493;"	d
ubrk_open	ubrk.cpp	/^ubrk_open(UBreakIteratorType type,$/;"	f	signature:(UBreakIteratorType type, const char *locale, const UChar *text, int32_t textLength, UErrorCode *status)
ubrk_open	unicode/ubrk.h	/^ubrk_open(UBreakIteratorType type,$/;"	p	signature:(UBreakIteratorType type, const char *locale, const UChar *text, int32_t textLength, UErrorCode *status)
ubrk_open	unicode/urename.h	494;"	d
ubrk_openRules	ubrk.cpp	/^ubrk_openRules(  const UChar        *rules,$/;"	f	signature:( const UChar *rules, int32_t rulesLength, const UChar *text, int32_t textLength, UParseError *parseErr, UErrorCode *status)
ubrk_openRules	unicode/ubrk.h	/^ubrk_openRules(const UChar     *rules,$/;"	p	signature:(const UChar *rules, int32_t rulesLength, const UChar *text, int32_t textLength, UParseError *parseErr, UErrorCode *status)
ubrk_openRules	unicode/urename.h	495;"	d
ubrk_preceding	ubrk.cpp	/^ubrk_preceding(UBreakIterator *bi,$/;"	f	signature:(UBreakIterator *bi, int32_t offset)
ubrk_preceding	unicode/ubrk.h	/^ubrk_preceding(UBreakIterator *bi,$/;"	p	signature:(UBreakIterator *bi, int32_t offset)
ubrk_preceding	unicode/urename.h	496;"	d
ubrk_previous	ubrk.cpp	/^ubrk_previous(UBreakIterator *bi)$/;"	f	signature:(UBreakIterator *bi)
ubrk_previous	unicode/ubrk.h	/^ubrk_previous(UBreakIterator *bi);$/;"	p	signature:(UBreakIterator *bi)
ubrk_previous	unicode/urename.h	497;"	d
ubrk_safeClone	ubrk.cpp	/^ubrk_safeClone($/;"	f	signature:( const UBreakIterator *bi, void *stackBuffer, int32_t *pBufferSize, UErrorCode *status)
ubrk_safeClone	unicode/ubrk.h	/^ubrk_safeClone($/;"	p	signature:( const UBreakIterator *bi, void *stackBuffer, int32_t *pBufferSize, UErrorCode *status)
ubrk_safeClone	unicode/urename.h	498;"	d
ubrk_setText	ubrk.cpp	/^ubrk_setText(UBreakIterator* bi,$/;"	f	signature:(UBreakIterator* bi, const UChar* text, int32_t textLength, UErrorCode* status)
ubrk_setText	unicode/ubrk.h	/^ubrk_setText(UBreakIterator* bi,$/;"	p	signature:(UBreakIterator* bi, const UChar* text, int32_t textLength, UErrorCode* status)
ubrk_setText	unicode/urename.h	499;"	d
ubrk_setUText	ubrk.cpp	/^ubrk_setUText(UBreakIterator *bi,$/;"	f	signature:(UBreakIterator *bi, UText *text, UErrorCode *status)
ubrk_setUText	unicode/ubrk.h	/^ubrk_setUText(UBreakIterator* bi,$/;"	p	signature:(UBreakIterator* bi, UText* text, UErrorCode* status)
ubrk_setUText	unicode/urename.h	500;"	d
ubrk_swap	rbbidata.cpp	/^ubrk_swap(const UDataSwapper *ds, const void *inData, int32_t length, void *outData,$/;"	f	signature:(const UDataSwapper *ds, const void *inData, int32_t length, void *outData, UErrorCode *status)
ubrk_swap	rbbidata.h	/^ubrk_swap(const UDataSwapper *ds,$/;"	p	signature:(const UDataSwapper *ds, const void *inData, int32_t length, void *outData, UErrorCode *pErrorCode)
ubrk_swap	unicode/urename.h	501;"	d
ucal_add	unicode/urename.h	502;"	d
ucal_clear	unicode/urename.h	503;"	d
ucal_clearField	unicode/urename.h	504;"	d
ucal_clone	unicode/urename.h	505;"	d
ucal_close	unicode/urename.h	506;"	d
ucal_countAvailable	unicode/urename.h	507;"	d
ucal_equivalentTo	unicode/urename.h	508;"	d
ucal_get	unicode/urename.h	509;"	d
ucal_getAttribute	unicode/urename.h	510;"	d
ucal_getAvailable	unicode/urename.h	511;"	d
ucal_getCanonicalTimeZoneID	unicode/urename.h	512;"	d
ucal_getDSTSavings	unicode/urename.h	513;"	d
ucal_getDayOfWeekType	unicode/urename.h	514;"	d
ucal_getDefaultTimeZone	unicode/urename.h	515;"	d
ucal_getGregorianChange	unicode/urename.h	516;"	d
ucal_getKeywordValuesForLocale	unicode/urename.h	517;"	d
ucal_getLimit	unicode/urename.h	518;"	d
ucal_getLocaleByType	unicode/urename.h	519;"	d
ucal_getMillis	unicode/urename.h	520;"	d
ucal_getNow	unicode/urename.h	521;"	d
ucal_getTZDataVersion	unicode/urename.h	522;"	d
ucal_getTimeZoneDisplayName	unicode/urename.h	523;"	d
ucal_getType	unicode/urename.h	524;"	d
ucal_getWeekendTransition	unicode/urename.h	525;"	d
ucal_inDaylightTime	unicode/urename.h	526;"	d
ucal_isSet	unicode/urename.h	527;"	d
ucal_isWeekend	unicode/urename.h	528;"	d
ucal_open	unicode/urename.h	529;"	d
ucal_openCountryTimeZones	unicode/urename.h	530;"	d
ucal_openTimeZones	unicode/urename.h	531;"	d
ucal_roll	unicode/urename.h	532;"	d
ucal_set	unicode/urename.h	533;"	d
ucal_setAttribute	unicode/urename.h	534;"	d
ucal_setDate	unicode/urename.h	535;"	d
ucal_setDateTime	unicode/urename.h	536;"	d
ucal_setDefaultTimeZone	unicode/urename.h	537;"	d
ucal_setGregorianChange	unicode/urename.h	538;"	d
ucal_setMillis	unicode/urename.h	539;"	d
ucal_setTimeZone	unicode/urename.h	540;"	d
ucase_addCaseClosure	ucase.c	/^ucase_addCaseClosure(const UCaseProps *csp, UChar32 c, const USetAdder *sa) {$/;"	f	signature:(const UCaseProps *csp, UChar32 c, const USetAdder *sa)
ucase_addCaseClosure	ucase.h	/^ucase_addCaseClosure(const UCaseProps *csp, UChar32 c, const USetAdder *sa);$/;"	p	signature:(const UCaseProps *csp, UChar32 c, const USetAdder *sa)
ucase_addCaseClosure	unicode/urename.h	541;"	d
ucase_addPropertyStarts	ucase.c	/^ucase_addPropertyStarts(const UCaseProps *csp, const USetAdder *sa, UErrorCode *pErrorCode) {$/;"	f	signature:(const UCaseProps *csp, const USetAdder *sa, UErrorCode *pErrorCode)
ucase_addPropertyStarts	ucase.h	/^ucase_addPropertyStarts(const UCaseProps *csp, const USetAdder *sa, UErrorCode *pErrorCode);$/;"	p	signature:(const UCaseProps *csp, const USetAdder *sa, UErrorCode *pErrorCode)
ucase_addPropertyStarts	unicode/urename.h	542;"	d
ucase_addStringCaseClosure	ucase.c	/^ucase_addStringCaseClosure(const UCaseProps *csp, const UChar *s, int32_t length, const USetAdder *sa) {$/;"	f	signature:(const UCaseProps *csp, const UChar *s, int32_t length, const USetAdder *sa)
ucase_addStringCaseClosure	ucase.h	/^ucase_addStringCaseClosure(const UCaseProps *csp, const UChar *s, int32_t length, const USetAdder *sa);$/;"	p	signature:(const UCaseProps *csp, const UChar *s, int32_t length, const USetAdder *sa)
ucase_addStringCaseClosure	unicode/urename.h	543;"	d
ucase_fold	ucase.c	/^ucase_fold(const UCaseProps *csp, UChar32 c, uint32_t options) {$/;"	f	signature:(const UCaseProps *csp, UChar32 c, uint32_t options)
ucase_fold	ucase.h	/^ucase_fold(const UCaseProps *csp, UChar32 c, uint32_t options);$/;"	p	signature:(const UCaseProps *csp, UChar32 c, uint32_t options)
ucase_fold	unicode/urename.h	544;"	d
ucase_getCaseLocale	ucase.c	/^ucase_getCaseLocale(const char *locale, int32_t *locCache) {$/;"	f	signature:(const char *locale, int32_t *locCache)
ucase_getCaseLocale	ucase.h	/^ucase_getCaseLocale(const char *locale, int32_t *locCache);$/;"	p	signature:(const char *locale, int32_t *locCache)
ucase_getCaseLocale	unicode/urename.h	545;"	d
ucase_getSingleton	ucase.c	/^ucase_getSingleton() {$/;"	f
ucase_getSingleton	ucase.h	/^ucase_getSingleton(void);$/;"	p	signature:(void)
ucase_getSingleton	unicode/urename.h	546;"	d
ucase_getType	ucase.c	/^ucase_getType(const UCaseProps *csp, UChar32 c) {$/;"	f	signature:(const UCaseProps *csp, UChar32 c)
ucase_getType	ucase.h	/^ucase_getType(const UCaseProps *csp, UChar32 c);$/;"	p	signature:(const UCaseProps *csp, UChar32 c)
ucase_getType	unicode/urename.h	547;"	d
ucase_getTypeOrIgnorable	ucase.c	/^ucase_getTypeOrIgnorable(const UCaseProps *csp, UChar32 c) {$/;"	f	signature:(const UCaseProps *csp, UChar32 c)
ucase_getTypeOrIgnorable	ucase.h	/^ucase_getTypeOrIgnorable(const UCaseProps *csp, UChar32 c);$/;"	p	signature:(const UCaseProps *csp, UChar32 c)
ucase_getTypeOrIgnorable	unicode/urename.h	548;"	d
ucase_hasBinaryProperty	ucase.c	/^ucase_hasBinaryProperty(UChar32 c, UProperty which) {$/;"	f	signature:(UChar32 c, UProperty which)
ucase_hasBinaryProperty	ucase.h	/^ucase_hasBinaryProperty(UChar32 c, UProperty which);$/;"	p	signature:(UChar32 c, UProperty which)
ucase_hasBinaryProperty	unicode/urename.h	549;"	d
ucase_isCaseSensitive	ucase.c	/^ucase_isCaseSensitive(const UCaseProps *csp, UChar32 c) {$/;"	f	signature:(const UCaseProps *csp, UChar32 c)
ucase_isCaseSensitive	ucase.h	/^ucase_isCaseSensitive(const UCaseProps *csp, UChar32 c);$/;"	p	signature:(const UCaseProps *csp, UChar32 c)
ucase_isCaseSensitive	unicode/urename.h	550;"	d
ucase_isSoftDotted	ucase.c	/^ucase_isSoftDotted(const UCaseProps *csp, UChar32 c) {$/;"	f	signature:(const UCaseProps *csp, UChar32 c)
ucase_isSoftDotted	ucase.h	/^ucase_isSoftDotted(const UCaseProps *csp, UChar32 c);$/;"	p	signature:(const UCaseProps *csp, UChar32 c)
ucase_isSoftDotted	unicode/urename.h	551;"	d
ucase_props_dataVersion	ucase_props_data.c	/^static const UVersionInfo ucase_props_dataVersion={6,0,0,0};$/;"	v	file:
ucase_props_exceptions	ucase_props_data.c	/^static const uint16_t ucase_props_exceptions[1292]={$/;"	v	file:
ucase_props_indexes	ucase_props_data.c	/^static const int32_t ucase_props_indexes[UCASE_IX_TOP]={0x10,0x5654,0x4918,0x50c,0x172,0,0,0,0,0,0,0,0,0,0,3};$/;"	v	file:
ucase_props_singleton	ucase_props_data.c	/^static const UCaseProps ucase_props_singleton={$/;"	v	file:
ucase_props_trieIndex	ucase_props_data.c	/^static const uint16_t ucase_props_trieIndex[9348]={$/;"	v	file:
ucase_props_unfold	ucase_props_data.c	/^static const uint16_t ucase_props_unfold[370]={$/;"	v	file:
ucase_swap	ucase.h	/^ucase_swap(const UDataSwapper *ds,$/;"	p	signature:(const UDataSwapper *ds, const void *inData, int32_t length, void *outData, UErrorCode *pErrorCode)
ucase_toFullFolding	ucase.c	/^ucase_toFullFolding(const UCaseProps *csp, UChar32 c,$/;"	f	signature:(const UCaseProps *csp, UChar32 c, const UChar **pString, uint32_t options)
ucase_toFullFolding	ucase.h	/^ucase_toFullFolding(const UCaseProps *csp, UChar32 c,$/;"	p	signature:(const UCaseProps *csp, UChar32 c, const UChar **pString, uint32_t options)
ucase_toFullFolding	unicode/urename.h	552;"	d
ucase_toFullLower	ucase.c	/^ucase_toFullLower(const UCaseProps *csp, UChar32 c,$/;"	f	signature:(const UCaseProps *csp, UChar32 c, UCaseContextIterator *iter, void *context, const UChar **pString, const char *locale, int32_t *locCache)
ucase_toFullLower	ucase.h	/^ucase_toFullLower(const UCaseProps *csp, UChar32 c,$/;"	p	signature:(const UCaseProps *csp, UChar32 c, UCaseContextIterator *iter, void *context, const UChar **pString, const char *locale, int32_t *locCache)
ucase_toFullLower	unicode/urename.h	553;"	d
ucase_toFullTitle	ucase.c	/^ucase_toFullTitle(const UCaseProps *csp, UChar32 c,$/;"	f	signature:(const UCaseProps *csp, UChar32 c, UCaseContextIterator *iter, void *context, const UChar **pString, const char *locale, int32_t *locCache)
ucase_toFullTitle	ucase.h	/^ucase_toFullTitle(const UCaseProps *csp, UChar32 c,$/;"	p	signature:(const UCaseProps *csp, UChar32 c, UCaseContextIterator *iter, void *context, const UChar **pString, const char *locale, int32_t *locCache)
ucase_toFullTitle	unicode/urename.h	554;"	d
ucase_toFullUpper	ucase.c	/^ucase_toFullUpper(const UCaseProps *csp, UChar32 c,$/;"	f	signature:(const UCaseProps *csp, UChar32 c, UCaseContextIterator *iter, void *context, const UChar **pString, const char *locale, int32_t *locCache)
ucase_toFullUpper	ucase.h	/^ucase_toFullUpper(const UCaseProps *csp, UChar32 c,$/;"	p	signature:(const UCaseProps *csp, UChar32 c, UCaseContextIterator *iter, void *context, const UChar **pString, const char *locale, int32_t *locCache)
ucase_toFullUpper	unicode/urename.h	555;"	d
ucase_tolower	ucase.c	/^ucase_tolower(const UCaseProps *csp, UChar32 c) {$/;"	f	signature:(const UCaseProps *csp, UChar32 c)
ucase_tolower	ucase.h	/^ucase_tolower(const UCaseProps *csp, UChar32 c);$/;"	p	signature:(const UCaseProps *csp, UChar32 c)
ucase_tolower	unicode/urename.h	556;"	d
ucase_totitle	ucase.c	/^ucase_totitle(const UCaseProps *csp, UChar32 c) {$/;"	f	signature:(const UCaseProps *csp, UChar32 c)
ucase_totitle	ucase.h	/^ucase_totitle(const UCaseProps *csp, UChar32 c);$/;"	p	signature:(const UCaseProps *csp, UChar32 c)
ucase_totitle	unicode/urename.h	557;"	d
ucase_toupper	ucase.c	/^ucase_toupper(const UCaseProps *csp, UChar32 c) {$/;"	f	signature:(const UCaseProps *csp, UChar32 c)
ucase_toupper	ucase.h	/^ucase_toupper(const UCaseProps *csp, UChar32 c);$/;"	p	signature:(const UCaseProps *csp, UChar32 c)
ucase_toupper	unicode/urename.h	558;"	d
ucasemap_close	ucasemap.c	/^ucasemap_close(UCaseMap *csm) {$/;"	f	signature:(UCaseMap *csm)
ucasemap_close	unicode/ucasemap.h	/^ucasemap_close(UCaseMap *csm);$/;"	p	signature:(UCaseMap *csm)
ucasemap_close	unicode/urename.h	559;"	d
ucasemap_getBreakIterator	ucasemap.c	/^ucasemap_getBreakIterator(const UCaseMap *csm) {$/;"	f	signature:(const UCaseMap *csm)
ucasemap_getBreakIterator	unicode/ucasemap.h	/^ucasemap_getBreakIterator(const UCaseMap *csm);$/;"	p	signature:(const UCaseMap *csm)
ucasemap_getBreakIterator	unicode/urename.h	560;"	d
ucasemap_getLocale	ucasemap.c	/^ucasemap_getLocale(const UCaseMap *csm) {$/;"	f	signature:(const UCaseMap *csm)
ucasemap_getLocale	unicode/ucasemap.h	/^ucasemap_getLocale(const UCaseMap *csm);$/;"	p	signature:(const UCaseMap *csm)
ucasemap_getLocale	unicode/urename.h	561;"	d
ucasemap_getOptions	ucasemap.c	/^ucasemap_getOptions(const UCaseMap *csm) {$/;"	f	signature:(const UCaseMap *csm)
ucasemap_getOptions	unicode/ucasemap.h	/^ucasemap_getOptions(const UCaseMap *csm);$/;"	p	signature:(const UCaseMap *csm)
ucasemap_getOptions	unicode/urename.h	562;"	d
ucasemap_open	ucasemap.c	/^ucasemap_open(const char *locale, uint32_t options, UErrorCode *pErrorCode) {$/;"	f	signature:(const char *locale, uint32_t options, UErrorCode *pErrorCode)
ucasemap_open	unicode/ucasemap.h	/^ucasemap_open(const char *locale, uint32_t options, UErrorCode *pErrorCode);$/;"	p	signature:(const char *locale, uint32_t options, UErrorCode *pErrorCode)
ucasemap_open	unicode/urename.h	563;"	d
ucasemap_setBreakIterator	ucasemap.c	/^ucasemap_setBreakIterator(UCaseMap *csm, UBreakIterator *iterToAdopt, UErrorCode *pErrorCode) {$/;"	f	signature:(UCaseMap *csm, UBreakIterator *iterToAdopt, UErrorCode *pErrorCode)
ucasemap_setBreakIterator	unicode/ucasemap.h	/^ucasemap_setBreakIterator(UCaseMap *csm, UBreakIterator *iterToAdopt, UErrorCode *pErrorCode);$/;"	p	signature:(UCaseMap *csm, UBreakIterator *iterToAdopt, UErrorCode *pErrorCode)
ucasemap_setBreakIterator	unicode/urename.h	564;"	d
ucasemap_setLocale	ucasemap.c	/^ucasemap_setLocale(UCaseMap *csm, const char *locale, UErrorCode *pErrorCode) {$/;"	f	signature:(UCaseMap *csm, const char *locale, UErrorCode *pErrorCode)
ucasemap_setLocale	unicode/ucasemap.h	/^ucasemap_setLocale(UCaseMap *csm, const char *locale, UErrorCode *pErrorCode);$/;"	p	signature:(UCaseMap *csm, const char *locale, UErrorCode *pErrorCode)
ucasemap_setLocale	unicode/urename.h	565;"	d
ucasemap_setOptions	ucasemap.c	/^ucasemap_setOptions(UCaseMap *csm, uint32_t options, UErrorCode *pErrorCode) {$/;"	f	signature:(UCaseMap *csm, uint32_t options, UErrorCode *pErrorCode)
ucasemap_setOptions	unicode/ucasemap.h	/^ucasemap_setOptions(UCaseMap *csm, uint32_t options, UErrorCode *pErrorCode);$/;"	p	signature:(UCaseMap *csm, uint32_t options, UErrorCode *pErrorCode)
ucasemap_setOptions	unicode/urename.h	566;"	d
ucasemap_toTitle	unicode/ucasemap.h	/^ucasemap_toTitle(UCaseMap *csm,$/;"	p	signature:(UCaseMap *csm, UChar *dest, int32_t destCapacity, const UChar *src, int32_t srcLength, UErrorCode *pErrorCode)
ucasemap_toTitle	unicode/urename.h	567;"	d
ucasemap_toTitle	ustrcase.c	/^ucasemap_toTitle(UCaseMap *csm,$/;"	f	signature:(UCaseMap *csm, UChar *dest, int32_t destCapacity, const UChar *src, int32_t srcLength, UErrorCode *pErrorCode)
ucasemap_utf8FoldCase	ucasemap.c	/^ucasemap_utf8FoldCase(const UCaseMap *csm,$/;"	f	signature:(const UCaseMap *csm, char *dest, int32_t destCapacity, const char *src, int32_t srcLength, UErrorCode *pErrorCode)
ucasemap_utf8FoldCase	unicode/ucasemap.h	/^ucasemap_utf8FoldCase(const UCaseMap *csm,$/;"	p	signature:(const UCaseMap *csm, char *dest, int32_t destCapacity, const char *src, int32_t srcLength, UErrorCode *pErrorCode)
ucasemap_utf8FoldCase	unicode/urename.h	568;"	d
ucasemap_utf8ToLower	ucasemap.c	/^ucasemap_utf8ToLower(const UCaseMap *csm,$/;"	f	signature:(const UCaseMap *csm, char *dest, int32_t destCapacity, const char *src, int32_t srcLength, UErrorCode *pErrorCode)
ucasemap_utf8ToLower	unicode/ucasemap.h	/^ucasemap_utf8ToLower(const UCaseMap *csm,$/;"	p	signature:(const UCaseMap *csm, char *dest, int32_t destCapacity, const char *src, int32_t srcLength, UErrorCode *pErrorCode)
ucasemap_utf8ToLower	unicode/urename.h	569;"	d
ucasemap_utf8ToTitle	ucasemap.c	/^ucasemap_utf8ToTitle(UCaseMap *csm,$/;"	f	signature:(UCaseMap *csm, char *dest, int32_t destCapacity, const char *src, int32_t srcLength, UErrorCode *pErrorCode)
ucasemap_utf8ToTitle	unicode/ucasemap.h	/^ucasemap_utf8ToTitle(UCaseMap *csm,$/;"	p	signature:(UCaseMap *csm, char *dest, int32_t destCapacity, const char *src, int32_t srcLength, UErrorCode *pErrorCode)
ucasemap_utf8ToTitle	unicode/urename.h	570;"	d
ucasemap_utf8ToUpper	ucasemap.c	/^ucasemap_utf8ToUpper(const UCaseMap *csm,$/;"	f	signature:(const UCaseMap *csm, char *dest, int32_t destCapacity, const char *src, int32_t srcLength, UErrorCode *pErrorCode)
ucasemap_utf8ToUpper	unicode/ucasemap.h	/^ucasemap_utf8ToUpper(const UCaseMap *csm,$/;"	p	signature:(const UCaseMap *csm, char *dest, int32_t destCapacity, const char *src, int32_t srcLength, UErrorCode *pErrorCode)
ucasemap_utf8ToUpper	unicode/urename.h	571;"	d
ucd_close	unicode/uintrnal.h	88;"	d
ucd_close	unicode/urename.h	572;"	d
ucd_close_4_6	unicode/uintrnal.h	199;"	d
ucd_flushCache	unicode/uintrnal.h	89;"	d
ucd_flushCache	unicode/urename.h	573;"	d
ucd_flushCache_4_6	unicode/uintrnal.h	200;"	d
ucd_freeCache	unicode/uintrnal.h	90;"	d
ucd_freeCache	unicode/urename.h	574;"	d
ucd_freeCache_4_6	unicode/uintrnal.h	201;"	d
ucd_getCollator	unicode/uintrnal.h	91;"	d
ucd_getCollator	unicode/urename.h	575;"	d
ucd_getCollator_4_6	unicode/uintrnal.h	202;"	d
ucd_open	unicode/uintrnal.h	92;"	d
ucd_open	unicode/urename.h	576;"	d
ucd_open_4_6	unicode/uintrnal.h	203;"	d
uchar_addPropertyStarts	uchar.c	/^uchar_addPropertyStarts(const USetAdder *sa, UErrorCode *pErrorCode) {$/;"	f	signature:(const USetAdder *sa, UErrorCode *pErrorCode)
uchar_addPropertyStarts	unicode/urename.h	577;"	d
uchar_addPropertyStarts	uprops.h	/^uchar_addPropertyStarts(const USetAdder *sa, UErrorCode *pErrorCode);$/;"	p	signature:(const USetAdder *sa, UErrorCode *pErrorCode)
uchar_swapNames	unames.c	/^uchar_swapNames(const UDataSwapper *ds,$/;"	f	signature:(const UDataSwapper *ds, const void *inData, int32_t length, void *outData, UErrorCode *pErrorCode)
uchar_swapNames	unicode/urename.h	578;"	d
uchar_swapNames	uprops.h	/^uchar_swapNames(const UDataSwapper *ds,$/;"	p	signature:(const UDataSwapper *ds, const void *inData, int32_t length, void *outData, UErrorCode *pErrorCode)
ucharstrenum_close	ustrenum.cpp	/^ucharstrenum_close(UEnumeration* en) {$/;"	f	file:	signature:(UEnumeration* en)
ucharstrenum_count	ustrenum.cpp	/^ucharstrenum_count(UEnumeration* en,$/;"	f	file:	signature:(UEnumeration* en, UErrorCode* )
ucharstrenum_next	ustrenum.cpp	/^ucharstrenum_next(UEnumeration* en,$/;"	f	file:	signature:(UEnumeration* en, int32_t* resultLength, UErrorCode* )
ucharstrenum_reset	ustrenum.cpp	/^ucharstrenum_reset(UEnumeration* en,$/;"	f	file:	signature:(UEnumeration* en, UErrorCode* )
ucln_atexit_handler	ucln_imp.h	/^static void ucln_atexit_handler()$/;"	f	signature:()
ucln_cleanupOne	ucln.h	/^U_CAPI void U_EXPORT2 ucln_cleanupOne(ECleanupLibraryType type);$/;"	p	signature:(ECleanupLibraryType type)
ucln_cleanupOne	ucln_cmn.c	/^U_CAPI void U_EXPORT2 ucln_cleanupOne(ECleanupLibraryType libType)$/;"	f	signature:(ECleanupLibraryType libType)
ucln_cleanupOne	unicode/urename.h	579;"	d
ucln_cleanup_internal	ucln_cmn.c	/^static void ucln_cleanup_internal(ECleanupLibraryType libType) $/;"	f	file:	signature:(ECleanupLibraryType libType)
ucln_common_registerCleanup	ucln_cmn.c	/^ucln_common_registerCleanup(ECleanupCommonType type,$/;"	f	signature:(ECleanupCommonType type, cleanupFunc *func)
ucln_common_registerCleanup	ucln_cmn.h	/^U_CFUNC void U_EXPORT2 ucln_common_registerCleanup(ECleanupCommonType type,$/;"	p	signature:(ECleanupCommonType type, cleanupFunc *func)
ucln_common_registerCleanup	unicode/urename.h	580;"	d
ucln_destructor	ucln_imp.h	/^static void ucln_destructor()   __attribute__((destructor)) ;$/;"	p	signature:()
ucln_destructor	ucln_imp.h	/^static void ucln_destructor() $/;"	f	signature:()
ucln_i18n_registerCleanup	unicode/urename.h	581;"	d
ucln_io_registerCleanup	unicode/urename.h	582;"	d
ucln_lib_cleanup	ucln_cmn.c	/^U_CFUNC UBool ucln_lib_cleanup(void) {$/;"	f	signature:(void)
ucln_lib_cleanup	ucln_cmn.h	/^U_CFUNC UBool ucln_lib_cleanup(void);$/;"	p	signature:(void)
ucln_lib_cleanup	unicode/urename.h	583;"	d
ucln_registerAutomaticCleanup	ucln_imp.h	/^static void ucln_registerAutomaticCleanup()$/;"	f	signature:()
ucln_registerCleanup	ucln.h	/^U_CAPI void U_EXPORT2 ucln_registerCleanup(ECleanupLibraryType type,$/;"	p	signature:(ECleanupLibraryType type, cleanupFunc *func)
ucln_registerCleanup	ucln_cmn.c	/^ucln_registerCleanup(ECleanupLibraryType type,$/;"	f	signature:(ECleanupLibraryType type, cleanupFunc *func)
ucln_registerCleanup	unicode/urename.h	584;"	d
ucln_unRegisterAutomaticCleanup	ucln_imp.h	/^static void ucln_unRegisterAutomaticCleanup () {$/;"	f	signature:()
ucnv_ASCIIFromUTF8	ucnvlat1.c	/^ucnv_ASCIIFromUTF8(UConverterFromUnicodeArgs *pFromUArgs,$/;"	f	file:	signature:(UConverterFromUnicodeArgs *pFromUArgs, UConverterToUnicodeArgs *pToUArgs, UErrorCode *pErrorCode)
ucnv_DBCSFromUTF8	ucnvmbcs.c	/^ucnv_DBCSFromUTF8(UConverterFromUnicodeArgs *pFromUArgs,$/;"	f	file:	signature:(UConverterFromUnicodeArgs *pFromUArgs, UConverterToUnicodeArgs *pToUArgs, UErrorCode *pErrorCode)
ucnv_Latin1FromUTF8	ucnvlat1.c	/^ucnv_Latin1FromUTF8(UConverterFromUnicodeArgs *pFromUArgs,$/;"	f	file:	signature:(UConverterFromUnicodeArgs *pFromUArgs, UConverterToUnicodeArgs *pToUArgs, UErrorCode *pErrorCode)
ucnv_MBCSDoubleFromUnicodeWithOffsets	ucnvmbcs.c	/^ucnv_MBCSDoubleFromUnicodeWithOffsets(UConverterFromUnicodeArgs *pArgs,$/;"	f	file:	signature:(UConverterFromUnicodeArgs *pArgs, UErrorCode *pErrorCode)
ucnv_MBCSEnumToUnicode	ucnvmbcs.c	/^ucnv_MBCSEnumToUnicode(UConverterMBCSTable *mbcsTable,$/;"	f	file:	signature:(UConverterMBCSTable *mbcsTable, UConverterEnumToUCallback *callback, const void *context, UErrorCode *pErrorCode)
ucnv_MBCSFromUChar32	ucnvmbcs.c	/^ucnv_MBCSFromUChar32(UConverterSharedData *sharedData,$/;"	f	signature:(UConverterSharedData *sharedData, UChar32 c, uint32_t *pValue, UBool useFallback)
ucnv_MBCSFromUChar32	ucnvmbcs.h	/^ucnv_MBCSFromUChar32(UConverterSharedData *sharedData,$/;"	p	signature:(UConverterSharedData *sharedData, UChar32 c, uint32_t *pValue, UBool useFallback)
ucnv_MBCSFromUChar32	unicode/urename.h	585;"	d
ucnv_MBCSFromUnicodeWithOffsets	ucnvmbcs.c	/^ucnv_MBCSFromUnicodeWithOffsets(UConverterFromUnicodeArgs *pArgs,$/;"	f	signature:(UConverterFromUnicodeArgs *pArgs, UErrorCode *pErrorCode)
ucnv_MBCSFromUnicodeWithOffsets	ucnvmbcs.h	/^ucnv_MBCSFromUnicodeWithOffsets(UConverterFromUnicodeArgs *pArgs,$/;"	p	signature:(UConverterFromUnicodeArgs *pArgs, UErrorCode *pErrorCode)
ucnv_MBCSFromUnicodeWithOffsets	unicode/urename.h	586;"	d
ucnv_MBCSGetFallback	ucnvmbcs.c	/^ucnv_MBCSGetFallback(UConverterMBCSTable *mbcsTable, uint32_t offset) {$/;"	f	file:	signature:(UConverterMBCSTable *mbcsTable, uint32_t offset)
ucnv_MBCSGetFilteredUnicodeSetForUnicode	ucnvmbcs.c	/^ucnv_MBCSGetFilteredUnicodeSetForUnicode(const UConverterSharedData *sharedData,$/;"	f	signature:(const UConverterSharedData *sharedData, const USetAdder *sa, UConverterUnicodeSet which, UConverterSetFilter filter, UErrorCode *pErrorCode)
ucnv_MBCSGetFilteredUnicodeSetForUnicode	ucnvmbcs.h	/^ucnv_MBCSGetFilteredUnicodeSetForUnicode(const UConverterSharedData *sharedData,$/;"	p	signature:(const UConverterSharedData *sharedData, const USetAdder *sa, UConverterUnicodeSet which, UConverterSetFilter filter, UErrorCode *pErrorCode)
ucnv_MBCSGetFilteredUnicodeSetForUnicode	unicode/urename.h	587;"	d
ucnv_MBCSGetName	ucnvmbcs.c	/^ucnv_MBCSGetName(const UConverter *cnv) {$/;"	f	file:	signature:(const UConverter *cnv)
ucnv_MBCSGetNextUChar	ucnvmbcs.c	/^ucnv_MBCSGetNextUChar(UConverterToUnicodeArgs *pArgs,$/;"	f	file:	signature:(UConverterToUnicodeArgs *pArgs, UErrorCode *pErrorCode)
ucnv_MBCSGetStarters	ucnvmbcs.c	/^ucnv_MBCSGetStarters(const UConverter* cnv,$/;"	f	file:	signature:(const UConverter* cnv, UBool starters[256], UErrorCode *pErrorCode)
ucnv_MBCSGetType	ucnvmbcs.c	/^ucnv_MBCSGetType(const UConverter* converter) {$/;"	f	signature:(const UConverter* converter)
ucnv_MBCSGetType	ucnvmbcs.h	/^ucnv_MBCSGetType(const UConverter* converter);$/;"	p	signature:(const UConverter* converter)
ucnv_MBCSGetType	unicode/urename.h	588;"	d
ucnv_MBCSGetUnicodeSet	ucnvmbcs.c	/^ucnv_MBCSGetUnicodeSet(const UConverter *cnv,$/;"	f	file:	signature:(const UConverter *cnv, const USetAdder *sa, UConverterUnicodeSet which, UErrorCode *pErrorCode)
ucnv_MBCSGetUnicodeSetForUnicode	ucnvmbcs.c	/^ucnv_MBCSGetUnicodeSetForUnicode(const UConverterSharedData *sharedData,$/;"	f	signature:(const UConverterSharedData *sharedData, const USetAdder *sa, UConverterUnicodeSet which, UErrorCode *pErrorCode)
ucnv_MBCSGetUnicodeSetForUnicode	ucnvmbcs.h	/^ucnv_MBCSGetUnicodeSetForUnicode(const UConverterSharedData *sharedData,$/;"	p	signature:(const UConverterSharedData *sharedData, const USetAdder *sa, UConverterUnicodeSet which, UErrorCode *pErrorCode)
ucnv_MBCSGetUnicodeSetForUnicode	unicode/urename.h	589;"	d
ucnv_MBCSIsLeadByte	ucnvmbcs.c	/^ucnv_MBCSIsLeadByte(UConverterSharedData *sharedData, char byte) {$/;"	f	signature:(UConverterSharedData *sharedData, char byte)
ucnv_MBCSIsLeadByte	ucnvmbcs.h	/^ucnv_MBCSIsLeadByte(UConverterSharedData *sharedData, char byte);$/;"	p	signature:(UConverterSharedData *sharedData, char byte)
ucnv_MBCSIsLeadByte	unicode/urename.h	590;"	d
ucnv_MBCSLoad	ucnvmbcs.c	/^ucnv_MBCSLoad(UConverterSharedData *sharedData,$/;"	f	file:	signature:(UConverterSharedData *sharedData, UConverterLoadArgs *pArgs, const uint8_t *raw, UErrorCode *pErrorCode)
ucnv_MBCSOpen	ucnvmbcs.c	/^ucnv_MBCSOpen(UConverter *cnv,$/;"	f	file:	signature:(UConverter *cnv, UConverterLoadArgs *pArgs, UErrorCode *pErrorCode)
ucnv_MBCSSimpleGetNextUChar	ucnvmbcs.c	/^ucnv_MBCSSimpleGetNextUChar(UConverterSharedData *sharedData,$/;"	f	signature:(UConverterSharedData *sharedData, const char *source, int32_t length, UBool useFallback)
ucnv_MBCSSimpleGetNextUChar	ucnvmbcs.h	/^ucnv_MBCSSimpleGetNextUChar(UConverterSharedData *sharedData,$/;"	p	signature:(UConverterSharedData *sharedData, const char *source, int32_t length, UBool useFallback)
ucnv_MBCSSimpleGetNextUChar	unicode/urename.h	591;"	d
ucnv_MBCSSingleFromBMPWithOffsets	ucnvmbcs.c	/^ucnv_MBCSSingleFromBMPWithOffsets(UConverterFromUnicodeArgs *pArgs,$/;"	f	file:	signature:(UConverterFromUnicodeArgs *pArgs, UErrorCode *pErrorCode)
ucnv_MBCSSingleFromUChar32	ucnvmbcs.h	/^ucnv_MBCSSingleFromUChar32(UConverterSharedData *sharedData,$/;"	p	signature:(UConverterSharedData *sharedData, UChar32 c, UBool useFallback)
ucnv_MBCSSingleFromUnicodeWithOffsets	ucnvmbcs.c	/^ucnv_MBCSSingleFromUnicodeWithOffsets(UConverterFromUnicodeArgs *pArgs,$/;"	f	file:	signature:(UConverterFromUnicodeArgs *pArgs, UErrorCode *pErrorCode)
ucnv_MBCSSingleGetNextUChar	ucnvmbcs.c	/^ucnv_MBCSSingleGetNextUChar(UConverterToUnicodeArgs *pArgs,$/;"	f	file:	signature:(UConverterToUnicodeArgs *pArgs, UErrorCode *pErrorCode)
ucnv_MBCSSingleSimpleGetNextUChar	ucnvmbcs.h	/^ucnv_MBCSSingleSimpleGetNextUChar(UConverterSharedData *sharedData,$/;"	p	signature:(UConverterSharedData *sharedData, uint8_t b, UBool useFallback)
ucnv_MBCSSingleToBMPWithOffsets	ucnvmbcs.c	/^ucnv_MBCSSingleToBMPWithOffsets(UConverterToUnicodeArgs *pArgs,$/;"	f	file:	signature:(UConverterToUnicodeArgs *pArgs, UErrorCode *pErrorCode)
ucnv_MBCSSingleToUnicodeWithOffsets	ucnvmbcs.c	/^ucnv_MBCSSingleToUnicodeWithOffsets(UConverterToUnicodeArgs *pArgs,$/;"	f	file:	signature:(UConverterToUnicodeArgs *pArgs, UErrorCode *pErrorCode)
ucnv_MBCSToUnicodeWithOffsets	ucnvmbcs.c	/^ucnv_MBCSToUnicodeWithOffsets(UConverterToUnicodeArgs *pArgs,$/;"	f	signature:(UConverterToUnicodeArgs *pArgs, UErrorCode *pErrorCode)
ucnv_MBCSToUnicodeWithOffsets	ucnvmbcs.h	/^ucnv_MBCSToUnicodeWithOffsets(UConverterToUnicodeArgs *pArgs,$/;"	p	signature:(UConverterToUnicodeArgs *pArgs, UErrorCode *pErrorCode)
ucnv_MBCSToUnicodeWithOffsets	unicode/urename.h	592;"	d
ucnv_MBCSUnload	ucnvmbcs.c	/^ucnv_MBCSUnload(UConverterSharedData *sharedData) {$/;"	f	file:	signature:(UConverterSharedData *sharedData)
ucnv_MBCSWriteSub	ucnvmbcs.c	/^ucnv_MBCSWriteSub(UConverterFromUnicodeArgs *pArgs,$/;"	f	file:	signature:(UConverterFromUnicodeArgs *pArgs, int32_t offsetIndex, UErrorCode *pErrorCode)
ucnv_SBCSFromUTF8	ucnvmbcs.c	/^ucnv_SBCSFromUTF8(UConverterFromUnicodeArgs *pFromUArgs,$/;"	f	file:	signature:(UConverterFromUnicodeArgs *pFromUArgs, UConverterToUnicodeArgs *pToUArgs, UErrorCode *pErrorCode)
ucnv_UTF8FromUTF8	ucnv_u8.c	/^ucnv_UTF8FromUTF8(UConverterFromUnicodeArgs *pFromUArgs,$/;"	f	file:	signature:(UConverterFromUnicodeArgs *pFromUArgs, UConverterToUnicodeArgs *pToUArgs, UErrorCode *pErrorCode)
ucnv_bld_countAvailableConverters	ucnv_bld.c	/^ucnv_bld_countAvailableConverters(UErrorCode *pErrorCode) {$/;"	f	signature:(UErrorCode *pErrorCode)
ucnv_bld_countAvailableConverters	ucnv_bld.h	/^ucnv_bld_countAvailableConverters(UErrorCode *pErrorCode);$/;"	p	signature:(UErrorCode *pErrorCode)
ucnv_bld_countAvailableConverters	unicode/urename.h	593;"	d
ucnv_bld_getAvailableConverter	ucnv_bld.c	/^ucnv_bld_getAvailableConverter(uint16_t n, UErrorCode *pErrorCode) {$/;"	f	signature:(uint16_t n, UErrorCode *pErrorCode)
ucnv_bld_getAvailableConverter	ucnv_bld.h	/^ucnv_bld_getAvailableConverter(uint16_t n, UErrorCode *pErrorCode);$/;"	p	signature:(uint16_t n, UErrorCode *pErrorCode)
ucnv_bld_getAvailableConverter	unicode/urename.h	594;"	d
ucnv_canCreateConverter	ucnv_bld.c	/^ucnv_canCreateConverter(const char *converterName, UErrorCode *err) {$/;"	f	signature:(const char *converterName, UErrorCode *err)
ucnv_canCreateConverter	ucnv_imp.h	/^ucnv_canCreateConverter(const char *converterName, UErrorCode *err);$/;"	p	signature:(const char *converterName, UErrorCode *err)
ucnv_canCreateConverter	unicode/urename.h	595;"	d
ucnv_cbFromUWriteBytes	ucnv_cb.c	/^ucnv_cbFromUWriteBytes (UConverterFromUnicodeArgs *args,$/;"	f	signature:(UConverterFromUnicodeArgs *args, const char* source, int32_t length, int32_t offsetIndex, UErrorCode * err)
ucnv_cbFromUWriteBytes	unicode/ucnv_cb.h	/^ucnv_cbFromUWriteBytes (UConverterFromUnicodeArgs *args,$/;"	p	signature:(UConverterFromUnicodeArgs *args, const char* source, int32_t length, int32_t offsetIndex, UErrorCode * err)
ucnv_cbFromUWriteBytes	unicode/urename.h	596;"	d
ucnv_cbFromUWriteSub	ucnv_cb.c	/^ucnv_cbFromUWriteSub (UConverterFromUnicodeArgs *args,$/;"	f	signature:(UConverterFromUnicodeArgs *args, int32_t offsetIndex, UErrorCode * err)
ucnv_cbFromUWriteSub	unicode/ucnv_cb.h	/^ucnv_cbFromUWriteSub (UConverterFromUnicodeArgs *args,$/;"	p	signature:(UConverterFromUnicodeArgs *args, int32_t offsetIndex, UErrorCode * err)
ucnv_cbFromUWriteSub	unicode/urename.h	597;"	d
ucnv_cbFromUWriteUChars	ucnv_cb.c	/^ucnv_cbFromUWriteUChars(UConverterFromUnicodeArgs *args,$/;"	f	signature:(UConverterFromUnicodeArgs *args, const UChar** source, const UChar* sourceLimit, int32_t offsetIndex, UErrorCode * err)
ucnv_cbFromUWriteUChars	unicode/ucnv_cb.h	/^U_STABLE void U_EXPORT2 ucnv_cbFromUWriteUChars(UConverterFromUnicodeArgs *args,$/;"	p	signature:(UConverterFromUnicodeArgs *args, const UChar** source, const UChar* sourceLimit, int32_t offsetIndex, UErrorCode * err)
ucnv_cbFromUWriteUChars	unicode/urename.h	598;"	d
ucnv_cbToUWriteSub	ucnv_cb.c	/^ucnv_cbToUWriteSub (UConverterToUnicodeArgs *args,$/;"	f	signature:(UConverterToUnicodeArgs *args, int32_t offsetIndex, UErrorCode * err)
ucnv_cbToUWriteSub	unicode/ucnv_cb.h	/^U_STABLE void U_EXPORT2 ucnv_cbToUWriteSub (UConverterToUnicodeArgs *args,$/;"	p	signature:(UConverterToUnicodeArgs *args, int32_t offsetIndex, UErrorCode * err)
ucnv_cbToUWriteSub	unicode/urename.h	599;"	d
ucnv_cbToUWriteUChars	ucnv_cb.c	/^ucnv_cbToUWriteUChars (UConverterToUnicodeArgs *args,$/;"	f	signature:(UConverterToUnicodeArgs *args, const UChar* source, int32_t length, int32_t offsetIndex, UErrorCode * err)
ucnv_cbToUWriteUChars	unicode/ucnv_cb.h	/^U_STABLE void U_EXPORT2 ucnv_cbToUWriteUChars (UConverterToUnicodeArgs *args,$/;"	p	signature:(UConverterToUnicodeArgs *args, const UChar* source, int32_t length, int32_t offsetIndex, UErrorCode * err)
ucnv_cbToUWriteUChars	unicode/urename.h	600;"	d
ucnv_cleanup	ucnv_bld.c	/^static UBool U_CALLCONV ucnv_cleanup(void) {$/;"	f	file:	signature:(void)
ucnv_close	ucnv.c	/^ucnv_close (UConverter * converter)$/;"	f	signature:(UConverter * converter)
ucnv_close	unicode/ucnv.h	/^ucnv_close(UConverter * converter);$/;"	p	signature:(UConverter * converter)
ucnv_close	unicode/urename.h	601;"	d
ucnv_compareNames	ucnv_io.c	/^ucnv_compareNames(const char *name1, const char *name2) {$/;"	f	signature:(const char *name1, const char *name2)
ucnv_compareNames	unicode/ucnv.h	/^ucnv_compareNames(const char *name1, const char *name2);$/;"	p	signature:(const char *name1, const char *name2)
ucnv_compareNames	unicode/urename.h	602;"	d
ucnv_convert	ucnv.c	/^ucnv_convert(const char *toConverterName, const char *fromConverterName,$/;"	f	signature:(const char *toConverterName, const char *fromConverterName, char *target, int32_t targetCapacity, const char *source, int32_t sourceLength, UErrorCode *pErrorCode)
ucnv_convert	unicode/ucnv.h	/^ucnv_convert(const char *toConverterName,$/;"	p	signature:(const char *toConverterName, const char *fromConverterName, char *target, int32_t targetCapacity, const char *source, int32_t sourceLength, UErrorCode *pErrorCode)
ucnv_convert	unicode/urename.h	603;"	d
ucnv_convertAlgorithmic	ucnv.c	/^ucnv_convertAlgorithmic(UBool convertToAlgorithmic,$/;"	f	file:	signature:(UBool convertToAlgorithmic, UConverterType algorithmicType, UConverter *cnv, char *target, int32_t targetCapacity, const char *source, int32_t sourceLength, UErrorCode *pErrorCode)
ucnv_convertEx	ucnv.c	/^ucnv_convertEx(UConverter *targetCnv, UConverter *sourceCnv,$/;"	f	signature:(UConverter *targetCnv, UConverter *sourceCnv, char **target, const char *targetLimit, const char **source, const char *sourceLimit, UChar *pivotStart, UChar **pivotSource, UChar **pivotTarget, const UChar *pivotLimit, UBool reset, UBool flush, UErrorCode *pErrorCode)
ucnv_convertEx	unicode/ucnv.h	/^ucnv_convertEx(UConverter *targetCnv, UConverter *sourceCnv,$/;"	p	signature:(UConverter *targetCnv, UConverter *sourceCnv, char **target, const char *targetLimit, const char **source, const char *sourceLimit, UChar *pivotStart, UChar **pivotSource, UChar **pivotTarget, const UChar *pivotLimit, UBool reset, UBool flush, UErrorCode *pErrorCode)
ucnv_convertEx	unicode/urename.h	604;"	d
ucnv_copyPlatformString	ucnv.c	/^ucnv_copyPlatformString(char *platformString, UConverterPlatform pltfrm)$/;"	f	file:	signature:(char *platformString, UConverterPlatform pltfrm)
ucnv_countAliases	ucnv_io.c	/^ucnv_countAliases(const char *alias, UErrorCode *pErrorCode)$/;"	f	signature:(const char *alias, UErrorCode *pErrorCode)
ucnv_countAliases	unicode/ucnv.h	/^ucnv_countAliases(const char *alias, UErrorCode *pErrorCode);$/;"	p	signature:(const char *alias, UErrorCode *pErrorCode)
ucnv_countAliases	unicode/urename.h	605;"	d
ucnv_countAvailable	ucnv.c	/^ucnv_countAvailable ()$/;"	f
ucnv_countAvailable	unicode/ucnv.h	/^ucnv_countAvailable(void);$/;"	p	signature:(void)
ucnv_countAvailable	unicode/urename.h	606;"	d
ucnv_countStandards	ucnv_io.c	/^ucnv_countStandards(void)$/;"	f	signature:(void)
ucnv_countStandards	unicode/ucnv.h	/^ucnv_countStandards(void);$/;"	p	signature:(void)
ucnv_countStandards	unicode/urename.h	607;"	d
ucnv_createAlgorithmicConverter	ucnv_bld.c	/^ucnv_createAlgorithmicConverter(UConverter *myUConverter,$/;"	f	signature:(UConverter *myUConverter, UConverterType type, const char *locale, uint32_t options, UErrorCode *err)
ucnv_createAlgorithmicConverter	ucnv_imp.h	/^ucnv_createAlgorithmicConverter(UConverter *myUConverter,$/;"	p	signature:(UConverter *myUConverter, UConverterType type, const char *locale, uint32_t options, UErrorCode *err)
ucnv_createAlgorithmicConverter	unicode/urename.h	608;"	d
ucnv_createConverter	ucnv_bld.c	/^ucnv_createConverter(UConverter *myUConverter, const char *converterName, UErrorCode * err)$/;"	f	signature:(UConverter *myUConverter, const char *converterName, UErrorCode * err)
ucnv_createConverter	ucnv_imp.h	/^UConverter *ucnv_createConverter (UConverter *myUConverter, const char *converterName, UErrorCode * err);$/;"	p	signature:(UConverter *myUConverter, const char *converterName, UErrorCode * err)
ucnv_createConverter	unicode/urename.h	609;"	d
ucnv_createConverterFromPackage	ucnv_bld.c	/^ucnv_createConverterFromPackage(const char *packageName, const char *converterName, UErrorCode * err)$/;"	f	signature:(const char *packageName, const char *converterName, UErrorCode * err)
ucnv_createConverterFromPackage	ucnv_imp.h	/^UConverter* ucnv_createConverterFromPackage(const char *packageName, const char *converterName,  $/;"	p	signature:(const char *packageName, const char *converterName, UErrorCode *err)
ucnv_createConverterFromPackage	unicode/urename.h	610;"	d
ucnv_createConverterFromSharedData	ucnv_bld.c	/^ucnv_createConverterFromSharedData(UConverter *myUConverter,$/;"	f	signature:(UConverter *myUConverter, UConverterSharedData *mySharedConverterData, UConverterLoadArgs *pArgs, UErrorCode *err)
ucnv_createConverterFromSharedData	ucnv_imp.h	/^ucnv_createConverterFromSharedData(UConverter *myUConverter,$/;"	p	signature:(UConverter *myUConverter, UConverterSharedData *mySharedConverterData, UConverterLoadArgs *pArgs, UErrorCode *err)
ucnv_createConverterFromSharedData	unicode/urename.h	611;"	d
ucnv_data_unFlattenClone	ucnv_bld.c	/^ucnv_data_unFlattenClone(UConverterLoadArgs *pArgs, UDataMemory *pData, UErrorCode *status)$/;"	f	file:	signature:(UConverterLoadArgs *pArgs, UDataMemory *pData, UErrorCode *status)
ucnv_deleteSharedConverterData	ucnv_bld.c	/^ucnv_deleteSharedConverterData(UConverterSharedData * deadSharedData)$/;"	f	file:	signature:(UConverterSharedData * deadSharedData)
ucnv_detectUnicodeSignature	ucnv.c	/^ucnv_detectUnicodeSignature( const char* source,$/;"	f	signature:( const char* source, int32_t sourceLength, int32_t* signatureLength, UErrorCode* pErrorCode)
ucnv_detectUnicodeSignature	unicode/ucnv.h	/^ucnv_detectUnicodeSignature(const char* source,$/;"	p	signature:(const char* source, int32_t sourceLength, int32_t *signatureLength, UErrorCode *pErrorCode)
ucnv_detectUnicodeSignature	unicode/urename.h	612;"	d
ucnv_extContinueMatchFromU	ucnv_ext.c	/^ucnv_extContinueMatchFromU(UConverter *cnv,$/;"	f	signature:(UConverter *cnv, UConverterFromUnicodeArgs *pArgs, int32_t srcIndex, UErrorCode *pErrorCode)
ucnv_extContinueMatchFromU	ucnv_ext.h	/^ucnv_extContinueMatchFromU(UConverter *cnv,$/;"	p	signature:(UConverter *cnv, UConverterFromUnicodeArgs *pArgs, int32_t srcIndex, UErrorCode *pErrorCode)
ucnv_extContinueMatchFromU	unicode/urename.h	613;"	d
ucnv_extContinueMatchToU	ucnv_ext.c	/^ucnv_extContinueMatchToU(UConverter *cnv,$/;"	f	signature:(UConverter *cnv, UConverterToUnicodeArgs *pArgs, int32_t srcIndex, UErrorCode *pErrorCode)
ucnv_extContinueMatchToU	ucnv_ext.h	/^ucnv_extContinueMatchToU(UConverter *cnv,$/;"	p	signature:(UConverter *cnv, UConverterToUnicodeArgs *pArgs, int32_t srcIndex, UErrorCode *pErrorCode)
ucnv_extContinueMatchToU	unicode/urename.h	614;"	d
ucnv_extFindFromU	ucnv_ext.c	/^ucnv_extFindFromU(const UChar *fromUSection, int32_t length, UChar u) {$/;"	f	file:	signature:(const UChar *fromUSection, int32_t length, UChar u)
ucnv_extFindToU	ucnv_ext.c	/^ucnv_extFindToU(const uint32_t *toUSection, int32_t length, uint8_t byte) {$/;"	f	file:	signature:(const uint32_t *toUSection, int32_t length, uint8_t byte)
ucnv_extGetUnicodeSet	ucnv_ext.c	/^ucnv_extGetUnicodeSet(const UConverterSharedData *sharedData,$/;"	f	signature:(const UConverterSharedData *sharedData, const USetAdder *sa, UConverterUnicodeSet which, UConverterSetFilter filter, UErrorCode *pErrorCode)
ucnv_extGetUnicodeSet	ucnv_ext.h	/^ucnv_extGetUnicodeSet(const UConverterSharedData *sharedData,$/;"	p	signature:(const UConverterSharedData *sharedData, const USetAdder *sa, UConverterUnicodeSet which, UConverterSetFilter filter, UErrorCode *pErrorCode)
ucnv_extGetUnicodeSet	unicode/urename.h	615;"	d
ucnv_extGetUnicodeSetString	ucnv_ext.c	/^ucnv_extGetUnicodeSetString(const UConverterSharedData *sharedData,$/;"	f	file:	signature:(const UConverterSharedData *sharedData, const int32_t *cx, const USetAdder *sa, UBool useFallback, int32_t minLength, UChar32 c, UChar s[UCNV_EXT_MAX_UCHARS], int32_t length, int32_t sectionIndex, UErrorCode *pErrorCode)
ucnv_extInitialMatchFromU	ucnv_ext.c	/^ucnv_extInitialMatchFromU(UConverter *cnv, const int32_t *cx,$/;"	f	signature:(UConverter *cnv, const int32_t *cx, UChar32 cp, const UChar **src, const UChar *srcLimit, char **target, const char *targetLimit, int32_t **offsets, int32_t srcIndex, UBool flush, UErrorCode *pErrorCode)
ucnv_extInitialMatchFromU	ucnv_ext.h	/^ucnv_extInitialMatchFromU(UConverter *cnv, const int32_t *cx,$/;"	p	signature:(UConverter *cnv, const int32_t *cx, UChar32 cp, const UChar **src, const UChar *srcLimit, char **target, const char *targetLimit, int32_t **offsets, int32_t srcIndex, UBool flush, UErrorCode *pErrorCode)
ucnv_extInitialMatchFromU	unicode/urename.h	616;"	d
ucnv_extInitialMatchToU	ucnv_ext.c	/^ucnv_extInitialMatchToU(UConverter *cnv, const int32_t *cx,$/;"	f	signature:(UConverter *cnv, const int32_t *cx, int32_t firstLength, const char **src, const char *srcLimit, UChar **target, const UChar *targetLimit, int32_t **offsets, int32_t srcIndex, UBool flush, UErrorCode *pErrorCode)
ucnv_extInitialMatchToU	ucnv_ext.h	/^ucnv_extInitialMatchToU(UConverter *cnv, const int32_t *cx,$/;"	p	signature:(UConverter *cnv, const int32_t *cx, int32_t firstLength, const char **src, const char *srcLimit, UChar **target, const UChar *targetLimit, int32_t **offsets, int32_t srcIndex, UBool flush, UErrorCode *pErrorCode)
ucnv_extInitialMatchToU	unicode/urename.h	617;"	d
ucnv_extMatchFromU	ucnv_ext.c	/^ucnv_extMatchFromU(const int32_t *cx,$/;"	f	file:	signature:(const int32_t *cx, UChar32 firstCP, const UChar *pre, int32_t preLength, const UChar *src, int32_t srcLength, uint32_t *pMatchValue, UBool useFallback, UBool flush)
ucnv_extMatchToU	ucnv_ext.c	/^ucnv_extMatchToU(const int32_t *cx, int8_t sisoState,$/;"	f	file:	signature:(const int32_t *cx, int8_t sisoState, const char *pre, int32_t preLength, const char *src, int32_t srcLength, uint32_t *pMatchValue, UBool useFallback, UBool flush)
ucnv_extSimpleMatchFromU	ucnv_ext.c	/^ucnv_extSimpleMatchFromU(const int32_t *cx,$/;"	f	signature:(const int32_t *cx, UChar32 cp, uint32_t *pValue, UBool useFallback)
ucnv_extSimpleMatchFromU	ucnv_ext.h	/^ucnv_extSimpleMatchFromU(const int32_t *cx,$/;"	p	signature:(const int32_t *cx, UChar32 cp, uint32_t *pValue, UBool useFallback)
ucnv_extSimpleMatchFromU	unicode/urename.h	618;"	d
ucnv_extSimpleMatchToU	ucnv_ext.c	/^ucnv_extSimpleMatchToU(const int32_t *cx,$/;"	f	signature:(const int32_t *cx, const char *source, int32_t length, UBool useFallback)
ucnv_extSimpleMatchToU	ucnv_ext.h	/^ucnv_extSimpleMatchToU(const int32_t *cx,$/;"	p	signature:(const int32_t *cx, const char *source, int32_t length, UBool useFallback)
ucnv_extSimpleMatchToU	unicode/urename.h	619;"	d
ucnv_extWriteFromU	ucnv_ext.c	/^ucnv_extWriteFromU(UConverter *cnv, const int32_t *cx,$/;"	f	file:	signature:(UConverter *cnv, const int32_t *cx, uint32_t value, char **target, const char *targetLimit, int32_t **offsets, int32_t srcIndex, UErrorCode *pErrorCode)
ucnv_extWriteToU	ucnv_ext.c	/^ucnv_extWriteToU(UConverter *cnv, const int32_t *cx,$/;"	f	file:	signature:(UConverter *cnv, const int32_t *cx, uint32_t value, UChar **target, const UChar *targetLimit, int32_t **offsets, int32_t srcIndex, UErrorCode *pErrorCode)
ucnv_fixFileSeparator	ucnv.c	/^ucnv_fixFileSeparator(const UConverter *cnv, $/;"	f	signature:(const UConverter *cnv, UChar* source, int32_t sourceLength)
ucnv_fixFileSeparator	unicode/ucnv.h	/^ucnv_fixFileSeparator(const UConverter *cnv, UChar *source, int32_t sourceLen);$/;"	p	signature:(const UConverter *cnv, UChar *source, int32_t sourceLen)
ucnv_fixFileSeparator	unicode/urename.h	620;"	d
ucnv_flushAvailableConverterCache	ucnv_bld.c	/^ucnv_flushAvailableConverterCache() {$/;"	f	file:
ucnv_flushCache	ucnv_bld.c	/^ucnv_flushCache ()$/;"	f
ucnv_flushCache	unicode/ucnv.h	/^ucnv_flushCache(void);$/;"	p	signature:(void)
ucnv_flushCache	unicode/urename.h	621;"	d
ucnv_fromAlgorithmic	ucnv.c	/^ucnv_fromAlgorithmic(UConverter *cnv,$/;"	f	signature:(UConverter *cnv, UConverterType algorithmicType, char *target, int32_t targetCapacity, const char *source, int32_t sourceLength, UErrorCode *pErrorCode)
ucnv_fromAlgorithmic	unicode/ucnv.h	/^ucnv_fromAlgorithmic(UConverter *cnv,$/;"	p	signature:(UConverter *cnv, UConverterType algorithmicType, char *target, int32_t targetCapacity, const char *source, int32_t sourceLength, UErrorCode *pErrorCode)
ucnv_fromAlgorithmic	unicode/urename.h	622;"	d
ucnv_fromUChars	ucnv.c	/^ucnv_fromUChars(UConverter *cnv,$/;"	f	signature:(UConverter *cnv, char *dest, int32_t destCapacity, const UChar *src, int32_t srcLength, UErrorCode *pErrorCode)
ucnv_fromUChars	unicode/ucnv.h	/^ucnv_fromUChars(UConverter *cnv,$/;"	p	signature:(UConverter *cnv, char *dest, int32_t destCapacity, const UChar *src, int32_t srcLength, UErrorCode *pErrorCode)
ucnv_fromUChars	unicode/urename.h	623;"	d
ucnv_fromUCountPending	ucnv.c	/^ucnv_fromUCountPending(const UConverter* cnv, UErrorCode* status)$/;"	f	signature:(const UConverter* cnv, UErrorCode* status)
ucnv_fromUCountPending	unicode/ucnv.h	/^ucnv_fromUCountPending(const UConverter* cnv, UErrorCode* status);$/;"	p	signature:(const UConverter* cnv, UErrorCode* status)
ucnv_fromUCountPending	unicode/urename.h	624;"	d
ucnv_fromUWriteBytes	ucnv_cnv.c	/^ucnv_fromUWriteBytes(UConverter *cnv,$/;"	f	signature:(UConverter *cnv, const char *bytes, int32_t length, char **target, const char *targetLimit, int32_t **offsets, int32_t sourceIndex, UErrorCode *pErrorCode)
ucnv_fromUWriteBytes	ucnv_cnv.h	/^ucnv_fromUWriteBytes(UConverter *cnv,$/;"	p	signature:(UConverter *cnv, const char *bytes, int32_t length, char **target, const char *targetLimit, int32_t **offsets, int32_t sourceIndex, UErrorCode *pErrorCode)
ucnv_fromUWriteBytes	unicode/urename.h	625;"	d
ucnv_fromUnicode	ucnv.c	/^ucnv_fromUnicode(UConverter *cnv,$/;"	f	signature:(UConverter *cnv, char **target, const char *targetLimit, const UChar **source, const UChar *sourceLimit, int32_t *offsets, UBool flush, UErrorCode *err)
ucnv_fromUnicode	unicode/ucnv.h	/^ucnv_fromUnicode (UConverter * converter,$/;"	p	signature:(UConverter * converter, char **target, const char *targetLimit, const UChar ** source, const UChar * sourceLimit, int32_t* offsets, UBool flush, UErrorCode * err)
ucnv_fromUnicode	unicode/urename.h	626;"	d
ucnv_fromUnicode_UTF8	ucnv2022.c	/^ucnv_fromUnicode_UTF8(UConverterFromUnicodeArgs * args,$/;"	p	file:	signature:(UConverterFromUnicodeArgs * args, UErrorCode * err)
ucnv_fromUnicode_UTF8	ucnv_u8.c	/^U_CFUNC void ucnv_fromUnicode_UTF8 (UConverterFromUnicodeArgs * args,$/;"	f	signature:(UConverterFromUnicodeArgs * args, UErrorCode * err)
ucnv_fromUnicode_UTF8	ucnv_u8.c	/^U_CFUNC void ucnv_fromUnicode_UTF8(UConverterFromUnicodeArgs *args,$/;"	p	file:	signature:(UConverterFromUnicodeArgs *args, UErrorCode *err)
ucnv_fromUnicode_UTF8	unicode/urename.h	627;"	d
ucnv_fromUnicode_UTF8_OFFSETS_LOGIC	ucnv2022.c	/^ucnv_fromUnicode_UTF8_OFFSETS_LOGIC(UConverterFromUnicodeArgs * args,$/;"	p	file:	signature:(UConverterFromUnicodeArgs * args, UErrorCode * err)
ucnv_fromUnicode_UTF8_OFFSETS_LOGIC	ucnv_u8.c	/^U_CFUNC void ucnv_fromUnicode_UTF8_OFFSETS_LOGIC (UConverterFromUnicodeArgs * args,$/;"	f	signature:(UConverterFromUnicodeArgs * args, UErrorCode * err)
ucnv_fromUnicode_UTF8_OFFSETS_LOGIC	ucnv_u8.c	/^U_CFUNC void ucnv_fromUnicode_UTF8_OFFSETS_LOGIC(UConverterFromUnicodeArgs *args,$/;"	p	file:	signature:(UConverterFromUnicodeArgs *args, UErrorCode *err)
ucnv_fromUnicode_UTF8_OFFSETS_LOGIC	unicode/urename.h	628;"	d
ucnv_getAlias	ucnv_io.c	/^ucnv_getAlias(const char *alias, uint16_t n, UErrorCode *pErrorCode)$/;"	f	signature:(const char *alias, uint16_t n, UErrorCode *pErrorCode)
ucnv_getAlias	unicode/ucnv.h	/^ucnv_getAlias(const char *alias, uint16_t n, UErrorCode *pErrorCode);$/;"	p	signature:(const char *alias, uint16_t n, UErrorCode *pErrorCode)
ucnv_getAlias	unicode/urename.h	629;"	d
ucnv_getAliases	ucnv_io.c	/^ucnv_getAliases(const char *alias, const char **aliases, UErrorCode *pErrorCode)$/;"	f	signature:(const char *alias, const char **aliases, UErrorCode *pErrorCode)
ucnv_getAliases	unicode/ucnv.h	/^ucnv_getAliases(const char *alias, const char **aliases, UErrorCode *pErrorCode);$/;"	p	signature:(const char *alias, const char **aliases, UErrorCode *pErrorCode)
ucnv_getAliases	unicode/urename.h	630;"	d
ucnv_getAmbiguous	ucnv.c	/^static const UAmbiguousConverter *ucnv_getAmbiguous(const UConverter *cnv)$/;"	f	file:	signature:(const UConverter *cnv)
ucnv_getAvailableName	ucnv.c	/^ucnv_getAvailableName (int32_t n)$/;"	f	signature:(int32_t n)
ucnv_getAvailableName	unicode/ucnv.h	/^ucnv_getAvailableName(int32_t n);$/;"	p	signature:(int32_t n)
ucnv_getAvailableName	unicode/urename.h	631;"	d
ucnv_getCCSID	ucnv.c	/^ucnv_getCCSID(const UConverter * converter,$/;"	f	signature:(const UConverter * converter, UErrorCode * err)
ucnv_getCCSID	unicode/ucnv.h	/^ucnv_getCCSID(const UConverter *converter,$/;"	p	signature:(const UConverter *converter, UErrorCode *err)
ucnv_getCCSID	unicode/urename.h	632;"	d
ucnv_getCanonicalName	ucnv_io.c	/^ucnv_getCanonicalName(const char *alias, const char *standard, UErrorCode *pErrorCode) {$/;"	f	signature:(const char *alias, const char *standard, UErrorCode *pErrorCode)
ucnv_getCanonicalName	unicode/ucnv.h	/^ucnv_getCanonicalName(const char *alias, const char *standard, UErrorCode *pErrorCode);$/;"	p	signature:(const char *alias, const char *standard, UErrorCode *pErrorCode)
ucnv_getCanonicalName	unicode/urename.h	633;"	d
ucnv_getCompleteUnicodeSet	ucnv_cnv.c	/^ucnv_getCompleteUnicodeSet(const UConverter *cnv,$/;"	f	signature:(const UConverter *cnv, const USetAdder *sa, UConverterUnicodeSet which, UErrorCode *pErrorCode)
ucnv_getCompleteUnicodeSet	ucnv_cnv.h	/^ucnv_getCompleteUnicodeSet(const UConverter *cnv,$/;"	p	signature:(const UConverter *cnv, const USetAdder *sa, UConverterUnicodeSet which, UErrorCode *pErrorCode)
ucnv_getCompleteUnicodeSet	unicode/urename.h	634;"	d
ucnv_getDefaultName	ucnv_bld.c	/^ucnv_getDefaultName() {$/;"	f
ucnv_getDefaultName	unicode/ucnv.h	/^ucnv_getDefaultName(void);$/;"	p	signature:(void)
ucnv_getDefaultName	unicode/urename.h	635;"	d
ucnv_getDisplayName	ucnvdisp.c	/^ucnv_getDisplayName(const UConverter *cnv,$/;"	f	signature:(const UConverter *cnv, const char *displayLocale, UChar *displayName, int32_t displayNameCapacity, UErrorCode *pErrorCode)
ucnv_getDisplayName	unicode/ucnv.h	/^ucnv_getDisplayName(const UConverter *converter,$/;"	p	signature:(const UConverter *converter, const char *displayLocale, UChar *displayName, int32_t displayNameCapacity, UErrorCode *err)
ucnv_getDisplayName	unicode/urename.h	636;"	d
ucnv_getFromUCallBack	ucnv.c	/^    ucnv_getFromUCallBack (const UConverter * converter,$/;"	f	signature:(const UConverter * converter, UConverterFromUCallback *action, const void **context)
ucnv_getFromUCallBack	unicode/ucnv.h	/^ucnv_getFromUCallBack (const UConverter * converter,$/;"	p	signature:(const UConverter * converter, UConverterFromUCallback *action, const void **context)
ucnv_getFromUCallBack	unicode/urename.h	637;"	d
ucnv_getInvalidChars	ucnv.c	/^ucnv_getInvalidChars (const UConverter * converter,$/;"	f	signature:(const UConverter * converter, char *errBytes, int8_t * len, UErrorCode * err)
ucnv_getInvalidChars	unicode/ucnv.h	/^ucnv_getInvalidChars(const UConverter *converter,$/;"	p	signature:(const UConverter *converter, char *errBytes, int8_t *len, UErrorCode *err)
ucnv_getInvalidChars	unicode/urename.h	638;"	d
ucnv_getInvalidUChars	ucnv.c	/^ucnv_getInvalidUChars (const UConverter * converter,$/;"	f	signature:(const UConverter * converter, UChar *errChars, int8_t * len, UErrorCode * err)
ucnv_getInvalidUChars	unicode/ucnv.h	/^ucnv_getInvalidUChars(const UConverter *converter,$/;"	p	signature:(const UConverter *converter, UChar *errUChars, int8_t *len, UErrorCode *err)
ucnv_getInvalidUChars	unicode/urename.h	639;"	d
ucnv_getMaxCharSize	ucnv.c	/^ucnv_getMaxCharSize (const UConverter * converter)$/;"	f	signature:(const UConverter * converter)
ucnv_getMaxCharSize	unicode/ucnv.h	/^ucnv_getMaxCharSize(const UConverter *converter);$/;"	p	signature:(const UConverter *converter)
ucnv_getMaxCharSize	unicode/urename.h	640;"	d
ucnv_getMinCharSize	ucnv.c	/^ucnv_getMinCharSize (const UConverter * converter)$/;"	f	signature:(const UConverter * converter)
ucnv_getMinCharSize	unicode/ucnv.h	/^ucnv_getMinCharSize(const UConverter *converter);$/;"	p	signature:(const UConverter *converter)
ucnv_getMinCharSize	unicode/urename.h	641;"	d
ucnv_getName	ucnv.c	/^ucnv_getName (const UConverter * converter, UErrorCode * err)$/;"	f	signature:(const UConverter * converter, UErrorCode * err)
ucnv_getName	unicode/ucnv.h	/^ucnv_getName(const UConverter *converter, UErrorCode *err);$/;"	p	signature:(const UConverter *converter, UErrorCode *err)
ucnv_getName	unicode/urename.h	642;"	d
ucnv_getNextUChar	ucnv.c	/^ucnv_getNextUChar(UConverter *cnv,$/;"	f	signature:(UConverter *cnv, const char **source, const char *sourceLimit, UErrorCode *err)
ucnv_getNextUChar	unicode/ucnv.h	/^ucnv_getNextUChar(UConverter * converter,$/;"	p	signature:(UConverter * converter, const char **source, const char * sourceLimit, UErrorCode * err)
ucnv_getNextUChar	unicode/urename.h	643;"	d
ucnv_getNextUChar_UTF8	ucnv_u8.c	/^static UChar32 ucnv_getNextUChar_UTF8(UConverterToUnicodeArgs *args,$/;"	f	file:	signature:(UConverterToUnicodeArgs *args, UErrorCode *err)
ucnv_getNonSurrogateUnicodeSet	ucnv_cnv.c	/^ucnv_getNonSurrogateUnicodeSet(const UConverter *cnv,$/;"	f	signature:(const UConverter *cnv, const USetAdder *sa, UConverterUnicodeSet which, UErrorCode *pErrorCode)
ucnv_getNonSurrogateUnicodeSet	ucnv_cnv.h	/^ucnv_getNonSurrogateUnicodeSet(const UConverter *cnv,$/;"	p	signature:(const UConverter *cnv, const USetAdder *sa, UConverterUnicodeSet which, UErrorCode *pErrorCode)
ucnv_getNonSurrogateUnicodeSet	unicode/urename.h	644;"	d
ucnv_getPlatform	ucnv.c	/^ucnv_getPlatform (const UConverter * converter,$/;"	f	signature:(const UConverter * converter, UErrorCode * err)
ucnv_getPlatform	unicode/ucnv.h	/^ucnv_getPlatform(const UConverter *converter,$/;"	p	signature:(const UConverter *converter, UErrorCode *err)
ucnv_getPlatform	unicode/urename.h	645;"	d
ucnv_getSharedConverterData	ucnv_bld.c	/^ucnv_getSharedConverterData(const char *name)$/;"	f	file:	signature:(const char *name)
ucnv_getStandard	ucnv_io.c	/^ucnv_getStandard(uint16_t n, UErrorCode *pErrorCode) {$/;"	f	signature:(uint16_t n, UErrorCode *pErrorCode)
ucnv_getStandard	unicode/ucnv.h	/^ucnv_getStandard(uint16_t n, UErrorCode *pErrorCode);$/;"	p	signature:(uint16_t n, UErrorCode *pErrorCode)
ucnv_getStandard	unicode/urename.h	646;"	d
ucnv_getStandardName	ucnv_io.c	/^ucnv_getStandardName(const char *alias, const char *standard, UErrorCode *pErrorCode) {$/;"	f	signature:(const char *alias, const char *standard, UErrorCode *pErrorCode)
ucnv_getStandardName	unicode/ucnv.h	/^ucnv_getStandardName(const char *name, const char *standard, UErrorCode *pErrorCode);$/;"	p	signature:(const char *name, const char *standard, UErrorCode *pErrorCode)
ucnv_getStandardName	unicode/urename.h	647;"	d
ucnv_getStarters	ucnv.c	/^ucnv_getStarters(const UConverter* converter, $/;"	f	signature:(const UConverter* converter, UBool starters[256], UErrorCode* err)
ucnv_getStarters	unicode/ucnv.h	/^ucnv_getStarters(const UConverter* converter, $/;"	p	signature:(const UConverter* converter, UBool starters[256], UErrorCode* err)
ucnv_getStarters	unicode/urename.h	648;"	d
ucnv_getSubstChars	ucnv.c	/^ucnv_getSubstChars (const UConverter * converter,$/;"	f	signature:(const UConverter * converter, char *mySubChar, int8_t * len, UErrorCode * err)
ucnv_getSubstChars	unicode/ucnv.h	/^ucnv_getSubstChars(const UConverter *converter,$/;"	p	signature:(const UConverter *converter, char *subChars, int8_t *len, UErrorCode *err)
ucnv_getSubstChars	unicode/urename.h	649;"	d
ucnv_getToUCallBack	ucnv.c	/^    ucnv_getToUCallBack (const UConverter * converter,$/;"	f	signature:(const UConverter * converter, UConverterToUCallback *action, const void **context)
ucnv_getToUCallBack	unicode/ucnv.h	/^ucnv_getToUCallBack (const UConverter * converter,$/;"	p	signature:(const UConverter * converter, UConverterToUCallback *action, const void **context)
ucnv_getToUCallBack	unicode/urename.h	650;"	d
ucnv_getType	ucnv.c	/^ucnv_getType(const UConverter* converter)$/;"	f	signature:(const UConverter* converter)
ucnv_getType	unicode/ucnv.h	/^ucnv_getType(const UConverter * converter);$/;"	p	signature:(const UConverter * converter)
ucnv_getType	unicode/urename.h	651;"	d
ucnv_getUnicodeSet	ucnv_set.c	/^ucnv_getUnicodeSet(const UConverter *cnv,$/;"	f	signature:(const UConverter *cnv, USet *setFillIn, UConverterUnicodeSet whichSet, UErrorCode *pErrorCode)
ucnv_getUnicodeSet	unicode/ucnv.h	/^ucnv_getUnicodeSet(const UConverter *cnv,$/;"	p	signature:(const UConverter *cnv, USet *setFillIn, UConverterUnicodeSet whichSet, UErrorCode *pErrorCode)
ucnv_getUnicodeSet	unicode/urename.h	652;"	d
ucnv_incrementRefCount	ucnv_bld.c	/^ucnv_incrementRefCount(UConverterSharedData *sharedData)$/;"	f	signature:(UConverterSharedData *sharedData)
ucnv_incrementRefCount	ucnv_imp.h	/^ucnv_incrementRefCount(UConverterSharedData *sharedData);$/;"	p	signature:(UConverterSharedData *sharedData)
ucnv_incrementRefCount	unicode/urename.h	653;"	d
ucnv_internalConvert	ucnv.c	/^ucnv_internalConvert(UConverter *outConverter, UConverter *inConverter,$/;"	f	file:	signature:(UConverter *outConverter, UConverter *inConverter, char *target, int32_t targetCapacity, const char *source, int32_t sourceLength, UErrorCode *pErrorCode)
ucnv_io_cleanup	ucnv_io.c	/^static UBool U_CALLCONV ucnv_io_cleanup(void)$/;"	f	file:	signature:(void)
ucnv_io_closeUEnumeration	ucnv_io.c	/^ucnv_io_closeUEnumeration(UEnumeration *enumerator) {$/;"	f	file:	signature:(UEnumeration *enumerator)
ucnv_io_countAliases	ucnv_io.c	/^ucnv_io_countAliases(const char *alias, UErrorCode *pErrorCode) {$/;"	f	file:	signature:(const char *alias, UErrorCode *pErrorCode)
ucnv_io_countAllConverters	ucnv_io.c	/^ucnv_io_countAllConverters(UEnumeration *enumerator, UErrorCode *pErrorCode) {$/;"	f	file:	signature:(UEnumeration *enumerator, UErrorCode *pErrorCode)
ucnv_io_countKnownConverters	ucnv_io.c	/^ucnv_io_countKnownConverters(UErrorCode *pErrorCode) {$/;"	f	signature:(UErrorCode *pErrorCode)
ucnv_io_countKnownConverters	ucnv_io.h	/^ucnv_io_countKnownConverters(UErrorCode *pErrorCode);$/;"	p	signature:(UErrorCode *pErrorCode)
ucnv_io_countKnownConverters	unicode/urename.h	654;"	d
ucnv_io_countStandardAliases	ucnv_io.c	/^ucnv_io_countStandardAliases(UEnumeration *enumerator, UErrorCode *pErrorCode) {$/;"	f	file:	signature:(UEnumeration *enumerator, UErrorCode *pErrorCode)
ucnv_io_countStandards	ucnv_io.c	/^ucnv_io_countStandards(UErrorCode *pErrorCode) {$/;"	f	file:	signature:(UErrorCode *pErrorCode)
ucnv_io_getAlias	ucnv_io.c	/^ucnv_io_getAlias(const char *alias, uint16_t n, UErrorCode *pErrorCode) {$/;"	f	file:	signature:(const char *alias, uint16_t n, UErrorCode *pErrorCode)
ucnv_io_getAliases	ucnv_io.c	/^ucnv_io_getAliases(const char *alias, uint16_t start, const char **aliases, UErrorCode *pErrorCode) {$/;"	f	file:	signature:(const char *alias, uint16_t start, const char **aliases, UErrorCode *pErrorCode)
ucnv_io_getConverterName	ucnv_io.c	/^ucnv_io_getConverterName(const char *alias, UBool *containsOption, UErrorCode *pErrorCode) {$/;"	f	signature:(const char *alias, UBool *containsOption, UErrorCode *pErrorCode)
ucnv_io_getConverterName	ucnv_io.h	/^ucnv_io_getConverterName(const char *alias, UBool *containsOption, UErrorCode *pErrorCode);$/;"	p	signature:(const char *alias, UBool *containsOption, UErrorCode *pErrorCode)
ucnv_io_getConverterName	unicode/urename.h	655;"	d
ucnv_io_nextAllConverters	ucnv_io.c	/^ucnv_io_nextAllConverters(UEnumeration *enumerator,$/;"	f	file:	signature:(UEnumeration *enumerator, int32_t* resultLength, UErrorCode *pErrorCode)
ucnv_io_nextStandardAliases	ucnv_io.c	/^ucnv_io_nextStandardAliases(UEnumeration *enumerator,$/;"	f	file:	signature:(UEnumeration *enumerator, int32_t* resultLength, UErrorCode *pErrorCode)
ucnv_io_resetAllConverters	ucnv_io.c	/^ucnv_io_resetAllConverters(UEnumeration *enumerator, UErrorCode *pErrorCode) {$/;"	f	file:	signature:(UEnumeration *enumerator, UErrorCode *pErrorCode)
ucnv_io_resetStandardAliases	ucnv_io.c	/^ucnv_io_resetStandardAliases(UEnumeration *enumerator, UErrorCode *pErrorCode) {$/;"	f	file:	signature:(UEnumeration *enumerator, UErrorCode *pErrorCode)
ucnv_io_stripASCIIForCompare	ucnv_io.c	/^ucnv_io_stripASCIIForCompare(char *dst, const char *name) {$/;"	f	signature:(char *dst, const char *name)
ucnv_io_stripASCIIForCompare	ucnv_io.h	/^ucnv_io_stripASCIIForCompare(char *dst, const char *name);$/;"	p	signature:(char *dst, const char *name)
ucnv_io_stripASCIIForCompare	unicode/urename.h	656;"	d
ucnv_io_stripEBCDICForCompare	ucnv_io.c	/^ucnv_io_stripEBCDICForCompare(char *dst, const char *name) {$/;"	f	signature:(char *dst, const char *name)
ucnv_io_stripEBCDICForCompare	ucnv_io.h	/^ucnv_io_stripEBCDICForCompare(char *dst, const char *name);$/;"	p	signature:(char *dst, const char *name)
ucnv_io_stripEBCDICForCompare	unicode/urename.h	657;"	d
ucnv_io_stripForCompare	ucnv_io.h	71;"	d
ucnv_io_stripForCompare	ucnv_io.h	73;"	d
ucnv_isAmbiguous	ucnv.c	/^ucnv_isAmbiguous(const UConverter *cnv) {$/;"	f	signature:(const UConverter *cnv)
ucnv_isAmbiguous	unicode/ucnv.h	/^ucnv_isAmbiguous(const UConverter *cnv);$/;"	p	signature:(const UConverter *cnv)
ucnv_isAmbiguous	unicode/urename.h	658;"	d
ucnv_load	ucnv_bld.c	/^ucnv_load(UConverterLoadArgs *pArgs, UErrorCode *err) {$/;"	f	signature:(UConverterLoadArgs *pArgs, UErrorCode *err)
ucnv_load	ucnv_bld.h	/^ucnv_load(UConverterLoadArgs *pArgs, UErrorCode *err);$/;"	p	signature:(UConverterLoadArgs *pArgs, UErrorCode *err)
ucnv_load	unicode/urename.h	659;"	d
ucnv_loadSharedData	ucnv_bld.c	/^ucnv_loadSharedData(const char *converterName,$/;"	f	signature:(const char *converterName, UConverterNamePieces *pPieces, UConverterLoadArgs *pArgs, UErrorCode * err)
ucnv_loadSharedData	ucnv_imp.h	/^ucnv_loadSharedData(const char *converterName,$/;"	p	signature:(const char *converterName, UConverterNamePieces *pieces, UConverterLoadArgs *pArgs, UErrorCode * err)
ucnv_loadSharedData	unicode/urename.h	660;"	d
ucnv_open	ucnv.c	/^ucnv_open (const char *name,$/;"	f	signature:(const char *name, UErrorCode * err)
ucnv_open	unicode/ucnv.h	/^ucnv_open(const char *converterName, UErrorCode *err);$/;"	p	signature:(const char *converterName, UErrorCode *err)
ucnv_open	unicode/urename.h	661;"	d
ucnv_openAllNames	ucnv_io.c	/^ucnv_openAllNames(UErrorCode *pErrorCode) {$/;"	f	signature:(UErrorCode *pErrorCode)
ucnv_openAllNames	unicode/ucnv.h	/^ucnv_openAllNames(UErrorCode *pErrorCode);$/;"	p	signature:(UErrorCode *pErrorCode)
ucnv_openAllNames	unicode/urename.h	662;"	d
ucnv_openCCSID	ucnv.c	/^ucnv_openCCSID (int32_t codepage,$/;"	f	signature:(int32_t codepage, UConverterPlatform platform, UErrorCode * err)
ucnv_openCCSID	unicode/ucnv.h	/^ucnv_openCCSID(int32_t codepage,$/;"	p	signature:(int32_t codepage, UConverterPlatform platform, UErrorCode * err)
ucnv_openCCSID	unicode/urename.h	663;"	d
ucnv_openPackage	ucnv.c	/^ucnv_openPackage   (const char *packageName, const char *converterName, UErrorCode * err)$/;"	f	signature:(const char *packageName, const char *converterName, UErrorCode * err)
ucnv_openPackage	unicode/ucnv.h	/^ucnv_openPackage(const char *packageName, const char *converterName, UErrorCode *err);$/;"	p	signature:(const char *packageName, const char *converterName, UErrorCode *err)
ucnv_openPackage	unicode/urename.h	664;"	d
ucnv_openStandardNames	ucnv_io.c	/^ucnv_openStandardNames(const char *convName,$/;"	f	signature:(const char *convName, const char *standard, UErrorCode *pErrorCode)
ucnv_openStandardNames	unicode/ucnv.h	/^ucnv_openStandardNames(const char *convName,$/;"	p	signature:(const char *convName, const char *standard, UErrorCode *pErrorCode)
ucnv_openStandardNames	unicode/urename.h	665;"	d
ucnv_openU	ucnv.c	/^ucnv_openU (const UChar * name,$/;"	f	signature:(const UChar * name, UErrorCode * err)
ucnv_openU	unicode/ucnv.h	/^ucnv_openU(const UChar *name,$/;"	p	signature:(const UChar *name, UErrorCode *err)
ucnv_openU	unicode/urename.h	666;"	d
ucnv_outputOverflowFromUnicode	ucnv.c	/^ucnv_outputOverflowFromUnicode(UConverter *cnv,$/;"	f	file:	signature:(UConverter *cnv, char **target, const char *targetLimit, int32_t **pOffsets, UErrorCode *err)
ucnv_outputOverflowToUnicode	ucnv.c	/^ucnv_outputOverflowToUnicode(UConverter *cnv,$/;"	f	file:	signature:(UConverter *cnv, UChar **target, const UChar *targetLimit, int32_t **pOffsets, UErrorCode *err)
ucnv_reset	ucnv.c	/^ucnv_reset(UConverter *converter)$/;"	f	signature:(UConverter *converter)
ucnv_reset	unicode/ucnv.h	/^ucnv_reset(UConverter *converter);$/;"	p	signature:(UConverter *converter)
ucnv_reset	unicode/urename.h	667;"	d
ucnv_resetFromUnicode	ucnv.c	/^ucnv_resetFromUnicode(UConverter *converter)$/;"	f	signature:(UConverter *converter)
ucnv_resetFromUnicode	unicode/ucnv.h	/^ucnv_resetFromUnicode(UConverter *converter);$/;"	p	signature:(UConverter *converter)
ucnv_resetFromUnicode	unicode/urename.h	668;"	d
ucnv_resetToUnicode	ucnv.c	/^ucnv_resetToUnicode(UConverter *converter)$/;"	f	signature:(UConverter *converter)
ucnv_resetToUnicode	unicode/ucnv.h	/^ucnv_resetToUnicode(UConverter *converter);$/;"	p	signature:(UConverter *converter)
ucnv_resetToUnicode	unicode/urename.h	669;"	d
ucnv_safeClone	ucnv.c	/^ucnv_safeClone(const UConverter* cnv, void *stackBuffer, int32_t *pBufferSize, UErrorCode *status)$/;"	f	signature:(const UConverter* cnv, void *stackBuffer, int32_t *pBufferSize, UErrorCode *status)
ucnv_safeClone	unicode/ucnv.h	/^ucnv_safeClone(const UConverter *cnv, $/;"	p	signature:(const UConverter *cnv, void *stackBuffer, int32_t *pBufferSize, UErrorCode *status)
ucnv_safeClone	unicode/urename.h	670;"	d
ucnv_setDefaultName	ucnv_bld.c	/^ucnv_setDefaultName(const char *converterName) {$/;"	f	signature:(const char *converterName)
ucnv_setDefaultName	unicode/ucnv.h	/^ucnv_setDefaultName(const char *name);$/;"	p	signature:(const char *name)
ucnv_setDefaultName	unicode/urename.h	671;"	d
ucnv_setDefaultName	unicode/usystem.h	31;"	d
ucnv_setDefaultName_4_6	unicode/usystem.h	39;"	d
ucnv_setFallback	ucnv.c	/^ucnv_setFallback(UConverter *cnv, UBool usesFallback)$/;"	f	signature:(UConverter *cnv, UBool usesFallback)
ucnv_setFallback	unicode/ucnv.h	/^ucnv_setFallback(UConverter *cnv, UBool usesFallback);$/;"	p	signature:(UConverter *cnv, UBool usesFallback)
ucnv_setFallback	unicode/urename.h	672;"	d
ucnv_setFromUCallBack	ucnv.c	/^ucnv_setFromUCallBack (UConverter * converter,$/;"	f	signature:(UConverter * converter, UConverterFromUCallback newAction, const void* newContext, UConverterFromUCallback *oldAction, const void** oldContext, UErrorCode * err)
ucnv_setFromUCallBack	unicode/ucnv.h	/^ucnv_setFromUCallBack (UConverter * converter,$/;"	p	signature:(UConverter * converter, UConverterFromUCallback newAction, const void *newContext, UConverterFromUCallback *oldAction, const void **oldContext, UErrorCode * err)
ucnv_setFromUCallBack	unicode/urename.h	673;"	d
ucnv_setSubstChars	ucnv.c	/^ucnv_setSubstChars (UConverter * converter,$/;"	f	signature:(UConverter * converter, const char *mySubChar, int8_t len, UErrorCode * err)
ucnv_setSubstChars	unicode/ucnv.h	/^ucnv_setSubstChars(UConverter *converter,$/;"	p	signature:(UConverter *converter, const char *subChars, int8_t len, UErrorCode *err)
ucnv_setSubstChars	unicode/urename.h	674;"	d
ucnv_setSubstString	ucnv.c	/^ucnv_setSubstString(UConverter *cnv,$/;"	f	signature:(UConverter *cnv, const UChar *s, int32_t length, UErrorCode *err)
ucnv_setSubstString	unicode/ucnv.h	/^ucnv_setSubstString(UConverter *cnv,$/;"	p	signature:(UConverter *cnv, const UChar *s, int32_t length, UErrorCode *err)
ucnv_setSubstString	unicode/urename.h	675;"	d
ucnv_setToUCallBack	ucnv.c	/^ucnv_setToUCallBack (UConverter * converter,$/;"	f	signature:(UConverter * converter, UConverterToUCallback newAction, const void* newContext, UConverterToUCallback *oldAction, const void** oldContext, UErrorCode * err)
ucnv_setToUCallBack	unicode/ucnv.h	/^ucnv_setToUCallBack (UConverter * converter,$/;"	p	signature:(UConverter * converter, UConverterToUCallback newAction, const void* newContext, UConverterToUCallback *oldAction, const void** oldContext, UErrorCode * err)
ucnv_setToUCallBack	unicode/urename.h	676;"	d
ucnv_shareConverterData	ucnv_bld.c	/^ucnv_shareConverterData(UConverterSharedData * data)$/;"	f	file:	signature:(UConverterSharedData * data)
ucnv_swap	ucnv_bld.c	/^ucnv_swap(const UDataSwapper *ds,$/;"	f	signature:(const UDataSwapper *ds, const void *inData, int32_t length, void *outData, UErrorCode *pErrorCode)
ucnv_swap	ucnv_bld.h	/^ucnv_swap(const UDataSwapper *ds,$/;"	p	signature:(const UDataSwapper *ds, const void *inData, int32_t length, void *outData, UErrorCode *pErrorCode)
ucnv_swap	unicode/urename.h	677;"	d
ucnv_swapAliases	ucnv_io.c	/^ucnv_swapAliases(const UDataSwapper *ds,$/;"	f	signature:(const UDataSwapper *ds, const void *inData, int32_t length, void *outData, UErrorCode *pErrorCode)
ucnv_swapAliases	ucnv_io.h	/^ucnv_swapAliases(const UDataSwapper *ds,$/;"	p	signature:(const UDataSwapper *ds, const void *inData, int32_t length, void *outData, UErrorCode *pErrorCode)
ucnv_swapAliases	unicode/urename.h	678;"	d
ucnv_toAlgorithmic	ucnv.c	/^ucnv_toAlgorithmic(UConverterType algorithmicType,$/;"	f	signature:(UConverterType algorithmicType, UConverter *cnv, char *target, int32_t targetCapacity, const char *source, int32_t sourceLength, UErrorCode *pErrorCode)
ucnv_toAlgorithmic	unicode/ucnv.h	/^ucnv_toAlgorithmic(UConverterType algorithmicType,$/;"	p	signature:(UConverterType algorithmicType, UConverter *cnv, char *target, int32_t targetCapacity, const char *source, int32_t sourceLength, UErrorCode *pErrorCode)
ucnv_toAlgorithmic	unicode/urename.h	679;"	d
ucnv_toUChars	ucnv.c	/^ucnv_toUChars(UConverter *cnv,$/;"	f	signature:(UConverter *cnv, UChar *dest, int32_t destCapacity, const char *src, int32_t srcLength, UErrorCode *pErrorCode)
ucnv_toUChars	unicode/ucnv.h	/^ucnv_toUChars(UConverter *cnv,$/;"	p	signature:(UConverter *cnv, UChar *dest, int32_t destCapacity, const char *src, int32_t srcLength, UErrorCode *pErrorCode)
ucnv_toUChars	unicode/urename.h	680;"	d
ucnv_toUCountPending	ucnv.c	/^ucnv_toUCountPending(const UConverter* cnv, UErrorCode* status){$/;"	f	signature:(const UConverter* cnv, UErrorCode* status)
ucnv_toUCountPending	unicode/ucnv.h	/^ucnv_toUCountPending(const UConverter* cnv, UErrorCode* status);$/;"	p	signature:(const UConverter* cnv, UErrorCode* status)
ucnv_toUCountPending	unicode/urename.h	681;"	d
ucnv_toUWriteCodePoint	ucnv_cnv.c	/^ucnv_toUWriteCodePoint(UConverter *cnv,$/;"	f	signature:(UConverter *cnv, UChar32 c, UChar **target, const UChar *targetLimit, int32_t **offsets, int32_t sourceIndex, UErrorCode *pErrorCode)
ucnv_toUWriteCodePoint	ucnv_cnv.h	/^ucnv_toUWriteCodePoint(UConverter *cnv,$/;"	p	signature:(UConverter *cnv, UChar32 c, UChar **target, const UChar *targetLimit, int32_t **offsets, int32_t sourceIndex, UErrorCode *pErrorCode)
ucnv_toUWriteCodePoint	unicode/urename.h	682;"	d
ucnv_toUWriteUChars	ucnv_cnv.c	/^ucnv_toUWriteUChars(UConverter *cnv,$/;"	f	signature:(UConverter *cnv, const UChar *uchars, int32_t length, UChar **target, const UChar *targetLimit, int32_t **offsets, int32_t sourceIndex, UErrorCode *pErrorCode)
ucnv_toUWriteUChars	ucnv_cnv.h	/^ucnv_toUWriteUChars(UConverter *cnv,$/;"	p	signature:(UConverter *cnv, const UChar *uchars, int32_t length, UChar **target, const UChar *targetLimit, int32_t **offsets, int32_t sourceIndex, UErrorCode *pErrorCode)
ucnv_toUWriteUChars	unicode/urename.h	683;"	d
ucnv_toUnicode	ucnv.c	/^ucnv_toUnicode(UConverter *cnv,$/;"	f	signature:(UConverter *cnv, UChar **target, const UChar *targetLimit, const char **source, const char *sourceLimit, int32_t *offsets, UBool flush, UErrorCode *err)
ucnv_toUnicode	unicode/ucnv.h	/^ucnv_toUnicode(UConverter *converter,$/;"	p	signature:(UConverter *converter, UChar **target, const UChar *targetLimit, const char **source, const char *sourceLimit, int32_t *offsets, UBool flush, UErrorCode *err)
ucnv_toUnicode	unicode/urename.h	684;"	d
ucnv_toUnicode_UTF8	ucnv_u8.c	/^static void ucnv_toUnicode_UTF8 (UConverterToUnicodeArgs * args,$/;"	f	file:	signature:(UConverterToUnicodeArgs * args, UErrorCode * err)
ucnv_toUnicode_UTF8_OFFSETS_LOGIC	ucnv_u8.c	/^static void ucnv_toUnicode_UTF8_OFFSETS_LOGIC (UConverterToUnicodeArgs * args,$/;"	f	file:	signature:(UConverterToUnicodeArgs * args, UErrorCode * err)
ucnv_unload	ucnv_bld.c	/^ucnv_unload(UConverterSharedData *sharedData) {$/;"	f	signature:(UConverterSharedData *sharedData)
ucnv_unload	ucnv_bld.h	/^ucnv_unload(UConverterSharedData *sharedData);$/;"	p	signature:(UConverterSharedData *sharedData)
ucnv_unload	unicode/urename.h	685;"	d
ucnv_unloadSharedDataIfReady	ucnv_bld.c	/^ucnv_unloadSharedDataIfReady(UConverterSharedData *sharedData)$/;"	f	signature:(UConverterSharedData *sharedData)
ucnv_unloadSharedDataIfReady	ucnv_imp.h	/^ucnv_unloadSharedDataIfReady(UConverterSharedData *sharedData);$/;"	p	signature:(UConverterSharedData *sharedData)
ucnv_unloadSharedDataIfReady	unicode/urename.h	686;"	d
ucnv_usesFallback	ucnv.c	/^ucnv_usesFallback(const UConverter *cnv)$/;"	f	signature:(const UConverter *cnv)
ucnv_usesFallback	unicode/ucnv.h	/^ucnv_usesFallback(const UConverter *cnv);$/;"	p	signature:(const UConverter *cnv)
ucnv_usesFallback	unicode/urename.h	687;"	d
ucnvsel_close	ucnvsel.cpp	/^ucnvsel_close(UConverterSelector *sel) {$/;"	f	signature:(UConverterSelector *sel)
ucnvsel_close	unicode/ucnvsel.h	/^ucnvsel_close(UConverterSelector *sel);$/;"	p	signature:(UConverterSelector *sel)
ucnvsel_close	unicode/urename.h	688;"	d
ucnvsel_close_selector_iterator	ucnvsel.cpp	/^ucnvsel_close_selector_iterator(UEnumeration *enumerator) {$/;"	f	file:	signature:(UEnumeration *enumerator)
ucnvsel_count_encodings	ucnvsel.cpp	/^ucnvsel_count_encodings(UEnumeration *enumerator, UErrorCode *status) {$/;"	f	file:	signature:(UEnumeration *enumerator, UErrorCode *status)
ucnvsel_next_encoding	ucnvsel.cpp	/^static const char* U_CALLCONV ucnvsel_next_encoding(UEnumeration* enumerator,$/;"	f	file:	signature:(UEnumeration* enumerator, int32_t* resultLength, UErrorCode* status)
ucnvsel_open	ucnvsel.cpp	/^ucnvsel_open(const char* const*  converterList, int32_t converterListSize,$/;"	f	signature:(const char* const* converterList, int32_t converterListSize, const USet* excludedCodePoints, const UConverterUnicodeSet whichSet, UErrorCode* status)
ucnvsel_open	unicode/ucnvsel.h	/^ucnvsel_open(const char* const*  converterList, int32_t converterListSize,$/;"	p	signature:(const char* const* converterList, int32_t converterListSize, const USet* excludedCodePoints, const UConverterUnicodeSet whichSet, UErrorCode* status)
ucnvsel_open	unicode/urename.h	689;"	d
ucnvsel_openFromSerialized	ucnvsel.cpp	/^ucnvsel_openFromSerialized(const void* buffer, int32_t length, UErrorCode* status) {$/;"	f	signature:(const void* buffer, int32_t length, UErrorCode* status)
ucnvsel_openFromSerialized	unicode/ucnvsel.h	/^ucnvsel_openFromSerialized(const void* buffer, int32_t length, UErrorCode* status);$/;"	p	signature:(const void* buffer, int32_t length, UErrorCode* status)
ucnvsel_openFromSerialized	unicode/urename.h	690;"	d
ucnvsel_reset_iterator	ucnvsel.cpp	/^static void U_CALLCONV ucnvsel_reset_iterator(UEnumeration* enumerator,$/;"	f	file:	signature:(UEnumeration* enumerator, UErrorCode* status)
ucnvsel_selectForString	ucnvsel.cpp	/^ucnvsel_selectForString(const UConverterSelector* sel,$/;"	f	signature:(const UConverterSelector* sel, const UChar *s, int32_t length, UErrorCode *status)
ucnvsel_selectForString	unicode/ucnvsel.h	/^ucnvsel_selectForString(const UConverterSelector* sel,$/;"	p	signature:(const UConverterSelector* sel, const UChar *s, int32_t length, UErrorCode *status)
ucnvsel_selectForString	unicode/urename.h	691;"	d
ucnvsel_selectForUTF8	ucnvsel.cpp	/^ucnvsel_selectForUTF8(const UConverterSelector* sel,$/;"	f	signature:(const UConverterSelector* sel, const char *s, int32_t length, UErrorCode *status)
ucnvsel_selectForUTF8	unicode/ucnvsel.h	/^ucnvsel_selectForUTF8(const UConverterSelector* sel,$/;"	p	signature:(const UConverterSelector* sel, const char *s, int32_t length, UErrorCode *status)
ucnvsel_selectForUTF8	unicode/urename.h	692;"	d
ucnvsel_serialize	ucnvsel.cpp	/^ucnvsel_serialize(const UConverterSelector* sel,$/;"	f	signature:(const UConverterSelector* sel, void* buffer, int32_t bufferCapacity, UErrorCode* status)
ucnvsel_serialize	unicode/ucnvsel.h	/^ucnvsel_serialize(const UConverterSelector* sel,$/;"	p	signature:(const UConverterSelector* sel, void* buffer, int32_t bufferCapacity, UErrorCode* status)
ucnvsel_serialize	unicode/urename.h	693;"	d
ucnvsel_swap	ucnvsel.cpp	/^ucnvsel_swap(const UDataSwapper *ds,$/;"	f	file:	signature:(const UDataSwapper *ds, const void *inData, int32_t length, void *outData, UErrorCode *status)
ucol_allocWeights	unicode/urename.h	694;"	d
ucol_assembleTailoringTable	unicode/urename.h	695;"	d
ucol_buildPermutationTable	unicode/urename.h	696;"	d
ucol_calcSortKey	unicode/urename.h	697;"	d
ucol_calcSortKeySimpleTertiary	unicode/urename.h	698;"	d
ucol_cloneBinary	unicode/urename.h	699;"	d
ucol_cloneRuleData	unicode/urename.h	700;"	d
ucol_close	unicode/urename.h	701;"	d
ucol_closeElements	unicode/urename.h	702;"	d
ucol_countAvailable	unicode/urename.h	703;"	d
ucol_createElements	unicode/urename.h	704;"	d
ucol_doCE	unicode/urename.h	705;"	d
ucol_equal	unicode/urename.h	706;"	d
ucol_equals	unicode/uintrnal.h	93;"	d
ucol_equals	unicode/urename.h	707;"	d
ucol_equals_4_6	unicode/uintrnal.h	204;"	d
ucol_findReorderingEntry	unicode/urename.h	708;"	d
ucol_forceHanImplicit	unicode/uintrnal.h	94;"	d
ucol_forceHanImplicit	unicode/urename.h	709;"	d
ucol_forceHanImplicit_4_6	unicode/uintrnal.h	205;"	d
ucol_forgetUCA	unicode/uintrnal.h	95;"	d
ucol_forgetUCA	unicode/urename.h	710;"	d
ucol_forgetUCA_4_6	unicode/uintrnal.h	206;"	d
ucol_freeOffsetBuffer	unicode/urename.h	711;"	d
ucol_getAttribute	unicode/urename.h	712;"	d
ucol_getAttributeOrDefault	unicode/uintrnal.h	96;"	d
ucol_getAttributeOrDefault	unicode/urename.h	713;"	d
ucol_getAttributeOrDefault_4_6	unicode/uintrnal.h	207;"	d
ucol_getAvailable	unicode/urename.h	714;"	d
ucol_getBound	unicode/urename.h	715;"	d
ucol_getCEStrengthDifference	unicode/urename.h	716;"	d
ucol_getContractions	unicode/udeprctd.h	27;"	d
ucol_getContractions	unicode/urename.h	717;"	d
ucol_getContractionsAndExpansions	unicode/urename.h	718;"	d
ucol_getContractions_4_6	unicode/udeprctd.h	37;"	d
ucol_getDisplayName	unicode/urename.h	719;"	d
ucol_getFirstCE	unicode/urename.h	720;"	d
ucol_getFunctionalEquivalent	unicode/urename.h	721;"	d
ucol_getKeywordValues	unicode/urename.h	722;"	d
ucol_getKeywordValuesForLocale	unicode/urename.h	723;"	d
ucol_getKeywords	unicode/urename.h	724;"	d
ucol_getLeadBytesForReorderCode	unicode/urename.h	725;"	d
ucol_getLocale	unicode/udeprctd.h	28;"	d
ucol_getLocale	unicode/urename.h	726;"	d
ucol_getLocaleByType	unicode/urename.h	727;"	d
ucol_getLocale_4_6	unicode/udeprctd.h	38;"	d
ucol_getMaxExpansion	unicode/urename.h	728;"	d
ucol_getNextCE	unicode/urename.h	729;"	d
ucol_getOffset	unicode/urename.h	730;"	d
ucol_getPrevCE	unicode/urename.h	731;"	d
ucol_getReorderCodes	unicode/uintrnal.h	97;"	d
ucol_getReorderCodes	unicode/urename.h	732;"	d
ucol_getReorderCodesForLeadByte	unicode/urename.h	733;"	d
ucol_getReorderCodes_4_6	unicode/uintrnal.h	208;"	d
ucol_getRules	unicode/urename.h	734;"	d
ucol_getRulesEx	unicode/urename.h	735;"	d
ucol_getShortDefinitionString	unicode/urename.h	736;"	d
ucol_getSortKey	unicode/urename.h	737;"	d
ucol_getSortKeySize	unicode/urename.h	738;"	d
ucol_getSortKeyWithAllocation	unicode/urename.h	739;"	d
ucol_getStrength	unicode/urename.h	740;"	d
ucol_getTailoredSet	unicode/urename.h	741;"	d
ucol_getUCAVersion	unicode/urename.h	742;"	d
ucol_getUnsafeSet	unicode/uintrnal.h	98;"	d
ucol_getUnsafeSet	unicode/urename.h	743;"	d
ucol_getUnsafeSet_4_6	unicode/uintrnal.h	209;"	d
ucol_getVariableTop	unicode/urename.h	744;"	d
ucol_getVersion	unicode/urename.h	745;"	d
ucol_greater	unicode/urename.h	746;"	d
ucol_greaterOrEqual	unicode/urename.h	747;"	d
ucol_initBuffers	unicode/urename.h	748;"	d
ucol_initCollator	unicode/urename.h	749;"	d
ucol_initInverseUCA	unicode/urename.h	750;"	d
ucol_initUCA	unicode/urename.h	751;"	d
ucol_inv_getNextCE	unicode/urename.h	752;"	d
ucol_inv_getPrevCE	unicode/urename.h	753;"	d
ucol_isTailored	unicode/urename.h	754;"	d
ucol_keyHashCode	unicode/urename.h	755;"	d
ucol_looksLikeCollationBinary	ucol_swp.cpp	/^ucol_looksLikeCollationBinary(const UDataSwapper *ds,$/;"	f	signature:(const UDataSwapper *ds, const void *inData, int32_t length)
ucol_looksLikeCollationBinary	ucol_swp.h	/^ucol_looksLikeCollationBinary(const UDataSwapper *ds,$/;"	p	signature:(const UDataSwapper *ds, const void *inData, int32_t length)
ucol_looksLikeCollationBinary	unicode/urename.h	756;"	d
ucol_mergeSortkeys	unicode/urename.h	757;"	d
ucol_next	unicode/urename.h	758;"	d
ucol_nextProcessed	unicode/uintrnal.h	99;"	d
ucol_nextProcessed	unicode/urename.h	759;"	d
ucol_nextProcessed_4_6	unicode/uintrnal.h	210;"	d
ucol_nextSortKeyPart	unicode/urename.h	760;"	d
ucol_nextWeight	unicode/urename.h	761;"	d
ucol_normalizeShortDefinitionString	unicode/urename.h	762;"	d
ucol_open	unicode/urename.h	763;"	d
ucol_openAvailableLocales	unicode/urename.h	764;"	d
ucol_openBinary	unicode/urename.h	765;"	d
ucol_openElements	unicode/urename.h	766;"	d
ucol_openFromShortString	unicode/urename.h	767;"	d
ucol_openRules	unicode/urename.h	768;"	d
ucol_openRulesForImport	unicode/urename.h	769;"	d
ucol_open_internal	unicode/urename.h	770;"	d
ucol_prepareShortStringOpen	unicode/uintrnal.h	100;"	d
ucol_prepareShortStringOpen	unicode/urename.h	771;"	d
ucol_prepareShortStringOpen_4_6	unicode/uintrnal.h	211;"	d
ucol_previous	unicode/urename.h	772;"	d
ucol_previousProcessed	unicode/uintrnal.h	101;"	d
ucol_previousProcessed	unicode/urename.h	773;"	d
ucol_previousProcessed_4_6	unicode/uintrnal.h	212;"	d
ucol_primaryOrder	unicode/urename.h	774;"	d
ucol_prv_getSpecialCE	unicode/urename.h	775;"	d
ucol_prv_getSpecialPrevCE	unicode/urename.h	776;"	d
ucol_reset	unicode/urename.h	777;"	d
ucol_restoreVariableTop	unicode/urename.h	778;"	d
ucol_safeClone	unicode/urename.h	779;"	d
ucol_secondaryOrder	unicode/urename.h	780;"	d
ucol_setAttribute	unicode/urename.h	781;"	d
ucol_setOffset	unicode/urename.h	782;"	d
ucol_setOptionsFromHeader	unicode/urename.h	783;"	d
ucol_setReorderCodes	unicode/uintrnal.h	102;"	d
ucol_setReorderCodes	unicode/urename.h	784;"	d
ucol_setReorderCodes_4_6	unicode/uintrnal.h	213;"	d
ucol_setReqValidLocales	unicode/urename.h	785;"	d
ucol_setStrength	unicode/urename.h	786;"	d
ucol_setText	unicode/urename.h	787;"	d
ucol_setVariableTop	unicode/urename.h	788;"	d
ucol_strcoll	unicode/urename.h	789;"	d
ucol_strcollIter	unicode/urename.h	790;"	d
ucol_swap	ucol_swp.cpp	/^ucol_swap(const UDataSwapper *ds,$/;"	f	signature:(const UDataSwapper *ds, const void *inData, int32_t length, void *outData, UErrorCode *pErrorCode)
ucol_swap	ucol_swp.h	/^ucol_swap(const UDataSwapper *ds,$/;"	p	signature:(const UDataSwapper *ds, const void *inData, int32_t length, void *outData, UErrorCode *pErrorCode)
ucol_swap	unicode/urename.h	791;"	d
ucol_swapBinary	ucol_swp.cpp	/^ucol_swapBinary(const UDataSwapper *ds,$/;"	f	signature:(const UDataSwapper *ds, const void *inData, int32_t length, void *outData, UErrorCode *pErrorCode)
ucol_swapBinary	ucol_swp.h	/^ucol_swapBinary(const UDataSwapper *ds,$/;"	p	signature:(const UDataSwapper *ds, const void *inData, int32_t length, void *outData, UErrorCode *pErrorCode)
ucol_swapBinary	unicode/urename.h	792;"	d
ucol_swapInverseUCA	ucol_swp.cpp	/^ucol_swapInverseUCA(const UDataSwapper *ds,$/;"	f	signature:(const UDataSwapper *ds, const void *inData, int32_t length, void *outData, UErrorCode *pErrorCode)
ucol_swapInverseUCA	ucol_swp.h	/^ucol_swapInverseUCA(const UDataSwapper *ds,$/;"	p	signature:(const UDataSwapper *ds, const void *inData, int32_t length, void *outData, UErrorCode *pErrorCode)
ucol_swapInverseUCA	unicode/urename.h	793;"	d
ucol_tertiaryOrder	unicode/urename.h	794;"	d
ucol_tok_assembleTokenList	unicode/urename.h	795;"	d
ucol_tok_closeTokenList	unicode/urename.h	796;"	d
ucol_tok_getNextArgument	unicode/urename.h	797;"	d
ucol_tok_getRulesFromBundle	unicode/urename.h	798;"	d
ucol_tok_initTokenList	unicode/urename.h	799;"	d
ucol_tok_parseNextToken	unicode/urename.h	800;"	d
ucol_updateInternalState	unicode/urename.h	801;"	d
ucsdet_close	unicode/urename.h	802;"	d
ucsdet_detect	unicode/urename.h	803;"	d
ucsdet_detectAll	unicode/urename.h	804;"	d
ucsdet_enableInputFilter	unicode/urename.h	805;"	d
ucsdet_getAllDetectableCharsets	unicode/urename.h	806;"	d
ucsdet_getConfidence	unicode/urename.h	807;"	d
ucsdet_getLanguage	unicode/urename.h	808;"	d
ucsdet_getName	unicode/urename.h	809;"	d
ucsdet_getUChars	unicode/urename.h	810;"	d
ucsdet_isInputFilterEnabled	unicode/urename.h	811;"	d
ucsdet_open	unicode/urename.h	812;"	d
ucsdet_setDeclaredEncoding	unicode/urename.h	813;"	d
ucsdet_setText	unicode/urename.h	814;"	d
ucstrFuncs	utext.cpp	/^static const struct UTextFuncs ucstrFuncs = $/;"	v	typeref:struct:UTextFuncs	file:
ucstrTextAccess	utext.cpp	/^ucstrTextAccess(UText *ut, int64_t index, UBool  forward) {$/;"	f	file:	signature:(UText *ut, int64_t index, UBool forward)
ucstrTextClone	utext.cpp	/^ucstrTextClone(UText *dest, const UText * src, UBool deep, UErrorCode * status) {$/;"	f	file:	signature:(UText *dest, const UText * src, UBool deep, UErrorCode * status)
ucstrTextClose	utext.cpp	/^ucstrTextClose(UText *ut) {$/;"	f	file:	signature:(UText *ut)
ucstrTextExtract	utext.cpp	/^ucstrTextExtract(UText *ut,$/;"	f	file:	signature:(UText *ut, int64_t start, int64_t limit, UChar *dest, int32_t destCapacity, UErrorCode *pErrorCode)
ucstrTextLength	utext.cpp	/^ucstrTextLength(UText *ut) {$/;"	f	file:	signature:(UText *ut)
ucurr_countCurrencies	unicode/urename.h	815;"	d
ucurr_forLocale	unicode/urename.h	816;"	d
ucurr_forLocaleAndDate	unicode/urename.h	817;"	d
ucurr_getDefaultFractionDigits	unicode/urename.h	818;"	d
ucurr_getKeywordValuesForLocale	unicode/urename.h	819;"	d
ucurr_getName	unicode/urename.h	820;"	d
ucurr_getPluralName	unicode/urename.h	821;"	d
ucurr_getRoundingIncrement	unicode/urename.h	822;"	d
ucurr_openISOCurrencies	unicode/urename.h	823;"	d
ucurr_register	unicode/urename.h	824;"	d
ucurr_unregister	unicode/urename.h	825;"	d
udat_applyPattern	unicode/urename.h	826;"	d
udat_applyPatternRelative	unicode/uintrnal.h	103;"	d
udat_applyPatternRelative	unicode/urename.h	827;"	d
udat_applyPatternRelative_4_6	unicode/uintrnal.h	214;"	d
udat_clone	unicode/urename.h	828;"	d
udat_close	unicode/urename.h	829;"	d
udat_countAvailable	unicode/urename.h	830;"	d
udat_countSymbols	unicode/urename.h	831;"	d
udat_format	unicode/urename.h	832;"	d
udat_get2DigitYearStart	unicode/urename.h	833;"	d
udat_getAvailable	unicode/urename.h	834;"	d
udat_getCalendar	unicode/urename.h	835;"	d
udat_getLocaleByType	unicode/urename.h	836;"	d
udat_getNumberFormat	unicode/urename.h	837;"	d
udat_getSymbols	unicode/urename.h	838;"	d
udat_isLenient	unicode/urename.h	839;"	d
udat_open	unicode/urename.h	840;"	d
udat_parse	unicode/urename.h	841;"	d
udat_parseCalendar	unicode/urename.h	842;"	d
udat_set2DigitYearStart	unicode/urename.h	843;"	d
udat_setCalendar	unicode/urename.h	844;"	d
udat_setLenient	unicode/urename.h	845;"	d
udat_setNumberFormat	unicode/urename.h	846;"	d
udat_setSymbols	unicode/urename.h	847;"	d
udat_toCalendarDateField	unicode/urename.h	848;"	d
udat_toPattern	unicode/urename.h	849;"	d
udat_toPatternRelativeDate	unicode/uintrnal.h	104;"	d
udat_toPatternRelativeDate	unicode/urename.h	850;"	d
udat_toPatternRelativeDate_4_6	unicode/uintrnal.h	215;"	d
udat_toPatternRelativeTime	unicode/uintrnal.h	105;"	d
udat_toPatternRelativeTime	unicode/urename.h	851;"	d
udat_toPatternRelativeTime_4_6	unicode/uintrnal.h	216;"	d
udata_cacheDataItem	udata.cpp	/^static UDataMemory *udata_cacheDataItem(const char *path, UDataMemory *item, UErrorCode *pErr) {$/;"	f	file:	signature:(const char *path, UDataMemory *item, UErrorCode *pErr)
udata_checkCommonData	ucmndata.c	/^U_CFUNC void udata_checkCommonData(UDataMemory *udm, UErrorCode *err) {$/;"	f	signature:(UDataMemory *udm, UErrorCode *err)
udata_checkCommonData	ucmndata.h	/^U_CFUNC void udata_checkCommonData(UDataMemory *pData, UErrorCode *pErrorCode);$/;"	p	signature:(UDataMemory *pData, UErrorCode *pErrorCode)
udata_checkCommonData	unicode/urename.h	852;"	d
udata_cleanup	udata.cpp	/^udata_cleanup(void)$/;"	f	file:	signature:(void)
udata_close	udatamem.c	/^udata_close(UDataMemory *pData) {$/;"	f	signature:(UDataMemory *pData)
udata_close	unicode/udata.h	/^udata_close(UDataMemory *pData);$/;"	p	signature:(UDataMemory *pData)
udata_close	unicode/urename.h	853;"	d
udata_closeSwapper	udataswp.c	/^udata_closeSwapper(UDataSwapper *ds) {$/;"	f	signature:(UDataSwapper *ds)
udata_closeSwapper	udataswp.h	/^udata_closeSwapper(UDataSwapper *ds);$/;"	p	signature:(UDataSwapper *ds)
udata_closeSwapper	unicode/urename.h	854;"	d
udata_findCachedData	udata.cpp	/^static UDataMemory *udata_findCachedData(const char *path)$/;"	f	file:	signature:(const char *path)
udata_getHashTable	udata.cpp	/^static UHashtable *udata_getHashTable() {$/;"	f	file:	signature:()
udata_getHeaderSize	ucmndata.c	/^udata_getHeaderSize(const DataHeader *udh) {$/;"	f	signature:(const DataHeader *udh)
udata_getHeaderSize	ucmndata.h	/^udata_getHeaderSize(const DataHeader *udh);$/;"	p	signature:(const DataHeader *udh)
udata_getHeaderSize	unicode/urename.h	855;"	d
udata_getInfo	udata.cpp	/^udata_getInfo(UDataMemory *pData, UDataInfo *pInfo) {$/;"	f	signature:(UDataMemory *pData, UDataInfo *pInfo)
udata_getInfo	unicode/udata.h	/^udata_getInfo(UDataMemory *pData, UDataInfo *pInfo);$/;"	p	signature:(UDataMemory *pData, UDataInfo *pInfo)
udata_getInfo	unicode/urename.h	856;"	d
udata_getInfoSize	ucmndata.c	/^udata_getInfoSize(const UDataInfo *info) {$/;"	f	signature:(const UDataInfo *info)
udata_getInfoSize	ucmndata.h	/^udata_getInfoSize(const UDataInfo *info);$/;"	p	signature:(const UDataInfo *info)
udata_getInfoSize	unicode/urename.h	857;"	d
udata_getLength	udatamem.c	/^udata_getLength(const UDataMemory *pData) {$/;"	f	signature:(const UDataMemory *pData)
udata_getLength	udatamem.h	/^udata_getLength(const UDataMemory *pData);$/;"	p	signature:(const UDataMemory *pData)
udata_getLength	unicode/urename.h	858;"	d
udata_getMemory	udatamem.c	/^udata_getMemory(UDataMemory *pData) {$/;"	f	signature:(UDataMemory *pData)
udata_getMemory	unicode/udata.h	/^udata_getMemory(UDataMemory *pData);$/;"	p	signature:(UDataMemory *pData)
udata_getMemory	unicode/urename.h	859;"	d
udata_getRawMemory	udatamem.c	/^udata_getRawMemory(const UDataMemory *pData) {$/;"	f	signature:(const UDataMemory *pData)
udata_getRawMemory	udatamem.h	/^udata_getRawMemory(const UDataMemory *pData);$/;"	p	signature:(const UDataMemory *pData)
udata_getRawMemory	unicode/urename.h	860;"	d
udata_open	udata.cpp	/^udata_open(const char *path, const char *type, const char *name,$/;"	f	signature:(const char *path, const char *type, const char *name, UErrorCode *pErrorCode)
udata_open	unicode/udata.h	/^udata_open(const char *path, const char *type, const char *name,$/;"	p	signature:(const char *path, const char *type, const char *name, UErrorCode *pErrorCode)
udata_open	unicode/urename.h	861;"	d
udata_openChoice	udata.cpp	/^udata_openChoice(const char *path, const char *type, const char *name,$/;"	f	signature:(const char *path, const char *type, const char *name, UDataMemoryIsAcceptable *isAcceptable, void *context, UErrorCode *pErrorCode)
udata_openChoice	unicode/udata.h	/^udata_openChoice(const char *path, const char *type, const char *name,$/;"	p	signature:(const char *path, const char *type, const char *name, UDataMemoryIsAcceptable *isAcceptable, void *context, UErrorCode *pErrorCode)
udata_openChoice	unicode/urename.h	862;"	d
udata_openSwapper	udataswp.c	/^udata_openSwapper(UBool inIsBigEndian, uint8_t inCharset,$/;"	f	signature:(UBool inIsBigEndian, uint8_t inCharset, UBool outIsBigEndian, uint8_t outCharset, UErrorCode *pErrorCode)
udata_openSwapper	udataswp.h	/^udata_openSwapper(UBool inIsBigEndian, uint8_t inCharset,$/;"	p	signature:(UBool inIsBigEndian, uint8_t inCharset, UBool outIsBigEndian, uint8_t outCharset, UErrorCode *pErrorCode)
udata_openSwapper	unicode/urename.h	863;"	d
udata_openSwapperForInputData	udataswp.c	/^udata_openSwapperForInputData(const void *data, int32_t length,$/;"	f	signature:(const void *data, int32_t length, UBool outIsBigEndian, uint8_t outCharset, UErrorCode *pErrorCode)
udata_openSwapperForInputData	udataswp.h	/^udata_openSwapperForInputData(const void *data, int32_t length,$/;"	p	signature:(const void *data, int32_t length, UBool outIsBigEndian, uint8_t outCharset, UErrorCode *pErrorCode)
udata_openSwapperForInputData	unicode/urename.h	864;"	d
udata_printError	udataswp.c	/^udata_printError(const UDataSwapper *ds,$/;"	f	signature:(const UDataSwapper *ds, const char *fmt, ...)
udata_printError	udataswp.h	/^udata_printError(const UDataSwapper *ds,$/;"	p	signature:(const UDataSwapper *ds, const char *fmt, ...)
udata_printError	unicode/urename.h	865;"	d
udata_readInt16	udataswp.c	/^udata_readInt16(const UDataSwapper *ds, int16_t x) {$/;"	f	signature:(const UDataSwapper *ds, int16_t x)
udata_readInt16	udataswp.h	/^udata_readInt16(const UDataSwapper *ds, int16_t x);$/;"	p	signature:(const UDataSwapper *ds, int16_t x)
udata_readInt16	unicode/urename.h	866;"	d
udata_readInt32	udataswp.c	/^udata_readInt32(const UDataSwapper *ds, int32_t x) {$/;"	f	signature:(const UDataSwapper *ds, int32_t x)
udata_readInt32	udataswp.h	/^udata_readInt32(const UDataSwapper *ds, int32_t x);$/;"	p	signature:(const UDataSwapper *ds, int32_t x)
udata_readInt32	unicode/urename.h	867;"	d
udata_setAppData	udata.cpp	/^udata_setAppData(const char *path, const void *data, UErrorCode *err)$/;"	f	signature:(const char *path, const void *data, UErrorCode *err)
udata_setAppData	unicode/udata.h	/^udata_setAppData(const char *packageName, const void *data, UErrorCode *err);$/;"	p	signature:(const char *packageName, const void *data, UErrorCode *err)
udata_setAppData	unicode/urename.h	868;"	d
udata_setCommonData	udata.cpp	/^udata_setCommonData(const void *data, UErrorCode *pErrorCode) {$/;"	f	signature:(const void *data, UErrorCode *pErrorCode)
udata_setCommonData	unicode/udata.h	/^udata_setCommonData(const void *data, UErrorCode *err);$/;"	p	signature:(const void *data, UErrorCode *err)
udata_setCommonData	unicode/urename.h	869;"	d
udata_setFileAccess	udata.cpp	/^U_CAPI void U_EXPORT2 udata_setFileAccess(UDataFileAccess access, UErrorCode * \/*status*\/)$/;"	f	signature:(UDataFileAccess access, UErrorCode * )
udata_setFileAccess	unicode/udata.h	/^udata_setFileAccess(UDataFileAccess access, UErrorCode *status);$/;"	p	signature:(UDataFileAccess access, UErrorCode *status)
udata_setFileAccess	unicode/urename.h	870;"	d
udata_swapDataHeader	udataswp.c	/^udata_swapDataHeader(const UDataSwapper *ds,$/;"	f	signature:(const UDataSwapper *ds, const void *inData, int32_t length, void *outData, UErrorCode *pErrorCode)
udata_swapDataHeader	udataswp.h	/^udata_swapDataHeader(const UDataSwapper *ds,$/;"	p	signature:(const UDataSwapper *ds, const void *inData, int32_t length, void *outData, UErrorCode *pErrorCode)
udata_swapDataHeader	unicode/urename.h	871;"	d
udata_swapInvStringBlock	udataswp.c	/^udata_swapInvStringBlock(const UDataSwapper *ds,$/;"	f	signature:(const UDataSwapper *ds, const void *inData, int32_t length, void *outData, UErrorCode *pErrorCode)
udata_swapInvStringBlock	udataswp.h	/^udata_swapInvStringBlock(const UDataSwapper *ds,$/;"	p	signature:(const UDataSwapper *ds, const void *inData, int32_t length, void *outData, UErrorCode *pErrorCode)
udata_swapInvStringBlock	unicode/urename.h	872;"	d
udatpg_addPattern	unicode/urename.h	873;"	d
udatpg_clone	unicode/urename.h	874;"	d
udatpg_close	unicode/urename.h	875;"	d
udatpg_getAppendItemFormat	unicode/urename.h	876;"	d
udatpg_getAppendItemName	unicode/urename.h	877;"	d
udatpg_getBaseSkeleton	unicode/urename.h	878;"	d
udatpg_getBestPattern	unicode/urename.h	879;"	d
udatpg_getBestPatternWithOptions	unicode/urename.h	880;"	d
udatpg_getDateTimeFormat	unicode/urename.h	881;"	d
udatpg_getDecimal	unicode/urename.h	882;"	d
udatpg_getPatternForSkeleton	unicode/urename.h	883;"	d
udatpg_getSkeleton	unicode/urename.h	884;"	d
udatpg_open	unicode/urename.h	885;"	d
udatpg_openBaseSkeletons	unicode/urename.h	886;"	d
udatpg_openEmpty	unicode/urename.h	887;"	d
udatpg_openSkeletons	unicode/urename.h	888;"	d
udatpg_replaceFieldTypes	unicode/urename.h	889;"	d
udatpg_replaceFieldTypesWithOptions	unicode/urename.h	890;"	d
udatpg_setAppendItemFormat	unicode/urename.h	891;"	d
udatpg_setAppendItemName	unicode/urename.h	892;"	d
udatpg_setDateTimeFormat	unicode/urename.h	893;"	d
udatpg_setDecimal	unicode/urename.h	894;"	d
uenum	ustrenum.cpp	/^    UEnumeration uenum;$/;"	m	struct:UCharStringEnumeration	file:	access:public
uenum	ustrenum.h	/^    UEnumeration *uenum; \/\/ owned$/;"	m	class:UStringEnumeration	access:private
uenum_close	uenum.c	/^uenum_close(UEnumeration* en)$/;"	f	signature:(UEnumeration* en)
uenum_close	unicode/uenum.h	/^uenum_close(UEnumeration* en);$/;"	p	signature:(UEnumeration* en)
uenum_close	unicode/urename.h	895;"	d
uenum_count	uenum.c	/^uenum_count(UEnumeration* en, UErrorCode* status)$/;"	f	signature:(UEnumeration* en, UErrorCode* status)
uenum_count	unicode/uenum.h	/^uenum_count(UEnumeration* en, UErrorCode* status);$/;"	p	signature:(UEnumeration* en, UErrorCode* status)
uenum_count	unicode/urename.h	896;"	d
uenum_next	uenum.c	/^uenum_next(UEnumeration* en,$/;"	f	signature:(UEnumeration* en, int32_t* resultLength, UErrorCode* status)
uenum_next	unicode/uenum.h	/^uenum_next(UEnumeration* en,$/;"	p	signature:(UEnumeration* en, int32_t* resultLength, UErrorCode* status)
uenum_next	unicode/urename.h	897;"	d
uenum_nextDefault	uenum.c	/^uenum_nextDefault(UEnumeration* en,$/;"	f	signature:(UEnumeration* en, int32_t* resultLength, UErrorCode* status)
uenum_nextDefault	uenumimp.h	/^uenum_nextDefault(UEnumeration* en,$/;"	p	signature:(UEnumeration* en, int32_t* resultLength, UErrorCode* status)
uenum_nextDefault	unicode/urename.h	898;"	d
uenum_openCharStringsEnumeration	unicode/urename.h	899;"	d
uenum_openCharStringsEnumeration	ustrenum.cpp	/^uenum_openCharStringsEnumeration(const char* const* strings, int32_t count,$/;"	f	signature:(const char* const* strings, int32_t count, UErrorCode* ec)
uenum_openCharStringsEnumeration	ustrenum.h	/^uenum_openCharStringsEnumeration(const char* const* strings, int32_t count,$/;"	p	signature:(const char* const* strings, int32_t count, UErrorCode* ec)
uenum_openFromStringEnumeration	unicode/uenum.h	/^uenum_openFromStringEnumeration(U_NAMESPACE_QUALIFIER StringEnumeration* adopted, UErrorCode* ec);$/;"	p	signature:(U_NAMESPACE_QUALIFIER StringEnumeration* adopted, UErrorCode* ec)
uenum_openFromStringEnumeration	unicode/urename.h	900;"	d
uenum_openFromStringEnumeration	ustrenum.cpp	/^uenum_openFromStringEnumeration(U_NAMESPACE_QUALIFIER StringEnumeration* adopted, UErrorCode* ec) { $/;"	f	signature:(U_NAMESPACE_QUALIFIER StringEnumeration* adopted, UErrorCode* ec)
uenum_reset	uenum.c	/^uenum_reset(UEnumeration* en, UErrorCode* status)$/;"	f	signature:(UEnumeration* en, UErrorCode* status)
uenum_reset	unicode/uenum.h	/^uenum_reset(UEnumeration* en, UErrorCode* status);$/;"	p	signature:(UEnumeration* en, UErrorCode* status)
uenum_reset	unicode/urename.h	901;"	d
uenum_unext	uenum.c	/^uenum_unext(UEnumeration* en,$/;"	f	signature:(UEnumeration* en, int32_t* resultLength, UErrorCode* status)
uenum_unext	unicode/uenum.h	/^uenum_unext(UEnumeration* en,$/;"	p	signature:(UEnumeration* en, int32_t* resultLength, UErrorCode* status)
uenum_unext	unicode/urename.h	902;"	d
uenum_unextDefault	uenum.c	/^uenum_unextDefault(UEnumeration* en,$/;"	f	signature:(UEnumeration* en, int32_t* resultLength, UErrorCode* status)
uenum_unextDefault	uenumimp.h	/^uenum_unextDefault(UEnumeration* en,$/;"	p	signature:(UEnumeration* en, int32_t* resultLength, UErrorCode* status)
uenum_unextDefault	unicode/urename.h	903;"	d
ufile_close_translit	unicode/urename.h	904;"	d
ufile_fill_uchar_buffer	unicode/urename.h	905;"	d
ufile_flush_io	unicode/urename.h	906;"	d
ufile_flush_translit	unicode/urename.h	907;"	d
ufile_getch	unicode/urename.h	908;"	d
ufile_getch32	unicode/urename.h	909;"	d
ufmt_64tou	unicode/urename.h	910;"	d
ufmt_defaultCPToUnicode	unicode/urename.h	911;"	d
ufmt_digitvalue	unicode/urename.h	912;"	d
ufmt_isdigit	unicode/urename.h	913;"	d
ufmt_ptou	unicode/urename.h	914;"	d
ufmt_uto64	unicode/urename.h	915;"	d
ufmt_utop	unicode/urename.h	916;"	d
uhash_close	uhash.c	/^uhash_close(UHashtable *hash) {$/;"	f	signature:(UHashtable *hash)
uhash_close	uhash.h	/^uhash_close(UHashtable *hash);$/;"	p	signature:(UHashtable *hash)
uhash_close	unicode/urename.h	917;"	d
uhash_compareCaselessUnicodeString	uhash.h	/^uhash_compareCaselessUnicodeString(const UHashTok key1, const UHashTok key2);$/;"	p	signature:(const UHashTok key1, const UHashTok key2)
uhash_compareCaselessUnicodeString	unicode/urename.h	918;"	d
uhash_compareCaselessUnicodeString	unistr_case.cpp	/^uhash_compareCaselessUnicodeString(const UHashTok key1, const UHashTok key2) {$/;"	f	signature:(const UHashTok key1, const UHashTok key2)
uhash_compareChars	uhash.c	/^uhash_compareChars(const UHashTok key1, const UHashTok key2) {$/;"	f	signature:(const UHashTok key1, const UHashTok key2)
uhash_compareChars	uhash.h	/^uhash_compareChars(const UHashTok key1, const UHashTok key2);$/;"	p	signature:(const UHashTok key1, const UHashTok key2)
uhash_compareChars	unicode/urename.h	919;"	d
uhash_compareIChars	uhash.c	/^uhash_compareIChars(const UHashTok key1, const UHashTok key2) {$/;"	f	signature:(const UHashTok key1, const UHashTok key2)
uhash_compareIChars	uhash.h	/^uhash_compareIChars(const UHashTok key1, const UHashTok key2);$/;"	p	signature:(const UHashTok key1, const UHashTok key2)
uhash_compareIChars	unicode/urename.h	920;"	d
uhash_compareLong	uhash.c	/^uhash_compareLong(const UHashTok key1, const UHashTok key2) {$/;"	f	signature:(const UHashTok key1, const UHashTok key2)
uhash_compareLong	uhash.h	/^uhash_compareLong(const UHashTok key1, const UHashTok key2);$/;"	p	signature:(const UHashTok key1, const UHashTok key2)
uhash_compareLong	unicode/urename.h	921;"	d
uhash_compareUChars	uhash.c	/^uhash_compareUChars(const UHashTok key1, const UHashTok key2) {$/;"	f	signature:(const UHashTok key1, const UHashTok key2)
uhash_compareUChars	uhash.h	/^uhash_compareUChars(const UHashTok key1, const UHashTok key2);$/;"	p	signature:(const UHashTok key1, const UHashTok key2)
uhash_compareUChars	unicode/urename.h	922;"	d
uhash_compareUnicodeString	uhash.h	/^uhash_compareUnicodeString(const UHashTok key1, const UHashTok key2);$/;"	p	signature:(const UHashTok key1, const UHashTok key2)
uhash_compareUnicodeString	uhash_us.cpp	/^uhash_compareUnicodeString(const UHashTok key1, const UHashTok key2) {$/;"	f	signature:(const UHashTok key1, const UHashTok key2)
uhash_compareUnicodeString	unicode/urename.h	923;"	d
uhash_count	uhash.c	/^uhash_count(const UHashtable *hash) {$/;"	f	signature:(const UHashtable *hash)
uhash_count	uhash.h	/^uhash_count(const UHashtable *hash);$/;"	p	signature:(const UHashtable *hash)
uhash_count	unicode/urename.h	924;"	d
uhash_deleteHashtable	uhash.h	/^uhash_deleteHashtable(void *obj);$/;"	p	signature:(void *obj)
uhash_deleteHashtable	uhash_us.cpp	/^uhash_deleteHashtable(void *obj) {$/;"	f	signature:(void *obj)
uhash_deleteHashtable	unicode/urename.h	925;"	d
uhash_deleteUObject	uhash.h	/^uhash_deleteUObject(void *obj);$/;"	p	signature:(void *obj)
uhash_deleteUObject	uhash_us.cpp	/^uhash_deleteUObject(void *obj) {$/;"	f	signature:(void *obj)
uhash_deleteUObject	unicode/urename.h	926;"	d
uhash_deleteUnicodeString	uhash.h	/^uhash_deleteUnicodeString(void *obj);$/;"	p	signature:(void *obj)
uhash_deleteUnicodeString	uhash_us.cpp	/^uhash_deleteUnicodeString(void *obj) {$/;"	f	signature:(void *obj)
uhash_deleteUnicodeString	unicode/urename.h	927;"	d
uhash_equals	uhash.c	/^uhash_equals(const UHashtable* hash1, const UHashtable* hash2){$/;"	f	signature:(const UHashtable* hash1, const UHashtable* hash2)
uhash_equals	uhash.h	/^uhash_equals(const UHashtable* hash1, const UHashtable* hash2);$/;"	p	signature:(const UHashtable* hash1, const UHashtable* hash2)
uhash_equals	unicode/urename.h	928;"	d
uhash_find	uhash.c	/^uhash_find(const UHashtable *hash, const void* key) {$/;"	f	signature:(const UHashtable *hash, const void* key)
uhash_find	uhash.h	/^uhash_find(const UHashtable *hash, const void* key);$/;"	p	signature:(const UHashtable *hash, const void* key)
uhash_find	unicode/urename.h	929;"	d
uhash_freeBlock	uhash.c	/^uhash_freeBlock(void *obj) {$/;"	f	signature:(void *obj)
uhash_freeBlock	uhash.h	/^uhash_freeBlock(void *obj);$/;"	p	signature:(void *obj)
uhash_freeBlock	unicode/urename.h	930;"	d
uhash_get	uhash.c	/^uhash_get(const UHashtable *hash,$/;"	f	signature:(const UHashtable *hash, const void* key)
uhash_get	uhash.h	/^uhash_get(const UHashtable *hash, $/;"	p	signature:(const UHashtable *hash, const void *key)
uhash_get	unicode/urename.h	931;"	d
uhash_geti	uhash.c	/^uhash_geti(const UHashtable *hash,$/;"	f	signature:(const UHashtable *hash, const void* key)
uhash_geti	uhash.h	/^uhash_geti(const UHashtable *hash,$/;"	p	signature:(const UHashtable *hash, const void* key)
uhash_geti	unicode/urename.h	932;"	d
uhash_hashCaselessUnicodeString	uhash.h	/^uhash_hashCaselessUnicodeString(const UHashTok key);$/;"	p	signature:(const UHashTok key)
uhash_hashCaselessUnicodeString	unicode/urename.h	933;"	d
uhash_hashCaselessUnicodeString	unistr_case.cpp	/^uhash_hashCaselessUnicodeString(const UHashTok key) {$/;"	f	signature:(const UHashTok key)
uhash_hashChars	uhash.c	/^uhash_hashChars(const UHashTok key) {$/;"	f	signature:(const UHashTok key)
uhash_hashChars	uhash.h	/^uhash_hashChars(const UHashTok key);$/;"	p	signature:(const UHashTok key)
uhash_hashChars	unicode/urename.h	934;"	d
uhash_hashIChars	uhash.c	/^uhash_hashIChars(const UHashTok key) {$/;"	f	signature:(const UHashTok key)
uhash_hashIChars	uhash.h	/^uhash_hashIChars(const UHashTok key);$/;"	p	signature:(const UHashTok key)
uhash_hashIChars	unicode/urename.h	935;"	d
uhash_hashLong	uhash.c	/^uhash_hashLong(const UHashTok key) {$/;"	f	signature:(const UHashTok key)
uhash_hashLong	uhash.h	/^uhash_hashLong(const UHashTok key);$/;"	p	signature:(const UHashTok key)
uhash_hashLong	unicode/urename.h	936;"	d
uhash_hashUChars	uhash.c	/^uhash_hashUChars(const UHashTok key) {$/;"	f	signature:(const UHashTok key)
uhash_hashUChars	uhash.h	/^uhash_hashUChars(const UHashTok key);$/;"	p	signature:(const UHashTok key)
uhash_hashUChars	unicode/urename.h	937;"	d
uhash_hashUCharsN	uhash.c	/^uhash_hashUCharsN(const UChar *str, int32_t length) {$/;"	f	signature:(const UChar *str, int32_t length)
uhash_hashUCharsN	uhash.h	/^uhash_hashUCharsN(const UChar *key, int32_t length);$/;"	p	signature:(const UChar *key, int32_t length)
uhash_hashUCharsN	unicode/urename.h	938;"	d
uhash_hashUnicodeString	uhash.h	/^uhash_hashUnicodeString(const UHashTok key);$/;"	p	signature:(const UHashTok key)
uhash_hashUnicodeString	uhash_us.cpp	/^uhash_hashUnicodeString(const UHashTok key) {$/;"	f	signature:(const UHashTok key)
uhash_hashUnicodeString	unicode/urename.h	939;"	d
uhash_iget	uhash.c	/^uhash_iget(const UHashtable *hash,$/;"	f	signature:(const UHashtable *hash, int32_t key)
uhash_iget	uhash.h	/^uhash_iget(const UHashtable *hash,$/;"	p	signature:(const UHashtable *hash, int32_t key)
uhash_iget	unicode/urename.h	940;"	d
uhash_igeti	uhash.c	/^uhash_igeti(const UHashtable *hash,$/;"	f	signature:(const UHashtable *hash, int32_t key)
uhash_igeti	uhash.h	/^uhash_igeti(const UHashtable *hash,$/;"	p	signature:(const UHashtable *hash, int32_t key)
uhash_igeti	unicode/urename.h	941;"	d
uhash_init	uhash.c	/^uhash_init(UHashtable *fillinResult,$/;"	f	signature:(UHashtable *fillinResult, UHashFunction *keyHash, UKeyComparator *keyComp, UValueComparator *valueComp, UErrorCode *status)
uhash_init	uhash.h	/^uhash_init(UHashtable *hash,$/;"	p	signature:(UHashtable *hash, UHashFunction *keyHash, UKeyComparator *keyComp, UValueComparator *valueComp, UErrorCode *status)
uhash_init	unicode/urename.h	942;"	d
uhash_iput	uhash.c	/^uhash_iput(UHashtable *hash,$/;"	f	signature:(UHashtable *hash, int32_t key, void* value, UErrorCode *status)
uhash_iput	uhash.h	/^uhash_iput(UHashtable *hash,$/;"	p	signature:(UHashtable *hash, int32_t key, void* value, UErrorCode *status)
uhash_iput	unicode/urename.h	943;"	d
uhash_iputi	uhash.c	/^uhash_iputi(UHashtable *hash,$/;"	f	signature:(UHashtable *hash, int32_t key, int32_t value, UErrorCode *status)
uhash_iputi	uhash.h	/^uhash_iputi(UHashtable *hash,$/;"	p	signature:(UHashtable *hash, int32_t key, int32_t value, UErrorCode *status)
uhash_iputi	unicode/urename.h	944;"	d
uhash_iremove	uhash.c	/^uhash_iremove(UHashtable *hash,$/;"	f	signature:(UHashtable *hash, int32_t key)
uhash_iremove	uhash.h	/^uhash_iremove(UHashtable *hash,$/;"	p	signature:(UHashtable *hash, int32_t key)
uhash_iremove	unicode/urename.h	945;"	d
uhash_iremovei	uhash.c	/^uhash_iremovei(UHashtable *hash,$/;"	f	signature:(UHashtable *hash, int32_t key)
uhash_iremovei	uhash.h	/^uhash_iremovei(UHashtable *hash,$/;"	p	signature:(UHashtable *hash, int32_t key)
uhash_iremovei	unicode/urename.h	946;"	d
uhash_nextElement	uhash.c	/^uhash_nextElement(const UHashtable *hash, int32_t *pos) {$/;"	f	signature:(const UHashtable *hash, int32_t *pos)
uhash_nextElement	uhash.h	/^uhash_nextElement(const UHashtable *hash,$/;"	p	signature:(const UHashtable *hash, int32_t *pos)
uhash_nextElement	unicode/urename.h	947;"	d
uhash_open	uhash.c	/^uhash_open(UHashFunction *keyHash, $/;"	f	signature:(UHashFunction *keyHash, UKeyComparator *keyComp, UValueComparator *valueComp, UErrorCode *status)
uhash_open	uhash.h	/^uhash_open(UHashFunction *keyHash,$/;"	p	signature:(UHashFunction *keyHash, UKeyComparator *keyComp, UValueComparator *valueComp, UErrorCode *status)
uhash_open	unicode/urename.h	948;"	d
uhash_openSize	uhash.c	/^uhash_openSize(UHashFunction *keyHash, $/;"	f	signature:(UHashFunction *keyHash, UKeyComparator *keyComp, UValueComparator *valueComp, int32_t size, UErrorCode *status)
uhash_openSize	uhash.h	/^uhash_openSize(UHashFunction *keyHash,$/;"	p	signature:(UHashFunction *keyHash, UKeyComparator *keyComp, UValueComparator *valueComp, int32_t size, UErrorCode *status)
uhash_openSize	unicode/urename.h	949;"	d
uhash_put	uhash.c	/^uhash_put(UHashtable *hash,$/;"	f	signature:(UHashtable *hash, void* key, void* value, UErrorCode *status)
uhash_put	uhash.h	/^uhash_put(UHashtable *hash,$/;"	p	signature:(UHashtable *hash, void *key, void *value, UErrorCode *status)
uhash_put	unicode/urename.h	950;"	d
uhash_puti	uhash.c	/^uhash_puti(UHashtable *hash,$/;"	f	signature:(UHashtable *hash, void* key, int32_t value, UErrorCode *status)
uhash_puti	uhash.h	/^uhash_puti(UHashtable *hash,$/;"	p	signature:(UHashtable *hash, void* key, int32_t value, UErrorCode *status)
uhash_puti	unicode/urename.h	951;"	d
uhash_remove	uhash.c	/^uhash_remove(UHashtable *hash,$/;"	f	signature:(UHashtable *hash, const void* key)
uhash_remove	uhash.h	/^uhash_remove(UHashtable *hash,$/;"	p	signature:(UHashtable *hash, const void *key)
uhash_remove	unicode/urename.h	952;"	d
uhash_removeAll	uhash.c	/^uhash_removeAll(UHashtable *hash) {$/;"	f	signature:(UHashtable *hash)
uhash_removeAll	uhash.h	/^uhash_removeAll(UHashtable *hash);$/;"	p	signature:(UHashtable *hash)
uhash_removeAll	unicode/urename.h	953;"	d
uhash_removeElement	uhash.c	/^uhash_removeElement(UHashtable *hash, const UHashElement* e) {$/;"	f	signature:(UHashtable *hash, const UHashElement* e)
uhash_removeElement	uhash.h	/^uhash_removeElement(UHashtable *hash, const UHashElement* e);$/;"	p	signature:(UHashtable *hash, const UHashElement* e)
uhash_removeElement	unicode/urename.h	954;"	d
uhash_removei	uhash.c	/^uhash_removei(UHashtable *hash,$/;"	f	signature:(UHashtable *hash, const void* key)
uhash_removei	uhash.h	/^uhash_removei(UHashtable *hash,$/;"	p	signature:(UHashtable *hash, const void* key)
uhash_removei	unicode/urename.h	955;"	d
uhash_setKeyComparator	uhash.c	/^uhash_setKeyComparator(UHashtable *hash, UKeyComparator *fn) {$/;"	f	signature:(UHashtable *hash, UKeyComparator *fn)
uhash_setKeyComparator	uhash.h	/^uhash_setKeyComparator(UHashtable *hash, UKeyComparator *fn);$/;"	p	signature:(UHashtable *hash, UKeyComparator *fn)
uhash_setKeyComparator	unicode/urename.h	956;"	d
uhash_setKeyDeleter	uhash.c	/^uhash_setKeyDeleter(UHashtable *hash, UObjectDeleter *fn) {$/;"	f	signature:(UHashtable *hash, UObjectDeleter *fn)
uhash_setKeyDeleter	uhash.h	/^uhash_setKeyDeleter(UHashtable *hash, UObjectDeleter *fn);$/;"	p	signature:(UHashtable *hash, UObjectDeleter *fn)
uhash_setKeyDeleter	unicode/urename.h	957;"	d
uhash_setKeyHasher	uhash.c	/^uhash_setKeyHasher(UHashtable *hash, UHashFunction *fn) {$/;"	f	signature:(UHashtable *hash, UHashFunction *fn)
uhash_setKeyHasher	uhash.h	/^uhash_setKeyHasher(UHashtable *hash, UHashFunction *fn);$/;"	p	signature:(UHashtable *hash, UHashFunction *fn)
uhash_setKeyHasher	unicode/urename.h	958;"	d
uhash_setResizePolicy	uhash.c	/^uhash_setResizePolicy(UHashtable *hash, enum UHashResizePolicy policy) {$/;"	f	signature:(UHashtable *hash, enum UHashResizePolicy policy)
uhash_setResizePolicy	uhash.h	/^uhash_setResizePolicy(UHashtable *hash, enum UHashResizePolicy policy);$/;"	p	signature:(UHashtable *hash, enum UHashResizePolicy policy)
uhash_setResizePolicy	unicode/urename.h	959;"	d
uhash_setValueComparator	uhash.c	/^uhash_setValueComparator(UHashtable *hash, UValueComparator *fn){$/;"	f	signature:(UHashtable *hash, UValueComparator *fn)
uhash_setValueComparator	uhash.h	/^uhash_setValueComparator(UHashtable *hash, UValueComparator *fn);$/;"	p	signature:(UHashtable *hash, UValueComparator *fn)
uhash_setValueComparator	unicode/urename.h	960;"	d
uhash_setValueDeleter	uhash.c	/^uhash_setValueDeleter(UHashtable *hash, UObjectDeleter *fn) {$/;"	f	signature:(UHashtable *hash, UObjectDeleter *fn)
uhash_setValueDeleter	uhash.h	/^uhash_setValueDeleter(UHashtable *hash, UObjectDeleter *fn);$/;"	p	signature:(UHashtable *hash, UObjectDeleter *fn)
uhash_setValueDeleter	unicode/urename.h	961;"	d
uidna_IDNToASCII	uidna.cpp	/^uidna_IDNToASCII(  const UChar *src, int32_t srcLength,$/;"	f	signature:( const UChar *src, int32_t srcLength, UChar* dest, int32_t destCapacity, int32_t options, UParseError *parseError, UErrorCode *status)
uidna_IDNToASCII	unicode/uidna.h	/^uidna_IDNToASCII(  const UChar* src, int32_t srcLength,$/;"	p	signature:( const UChar* src, int32_t srcLength, UChar* dest, int32_t destCapacity, int32_t options, UParseError* parseError, UErrorCode* status)
uidna_IDNToASCII	unicode/urename.h	962;"	d
uidna_IDNToUnicode	uidna.cpp	/^uidna_IDNToUnicode(  const UChar* src, int32_t srcLength,$/;"	f	signature:( const UChar* src, int32_t srcLength, UChar* dest, int32_t destCapacity, int32_t options, UParseError* parseError, UErrorCode* status)
uidna_IDNToUnicode	unicode/uidna.h	/^uidna_IDNToUnicode(  const UChar* src, int32_t srcLength,$/;"	p	signature:( const UChar* src, int32_t srcLength, UChar* dest, int32_t destCapacity, int32_t options, UParseError* parseError, UErrorCode* status)
uidna_IDNToUnicode	unicode/urename.h	963;"	d
uidna_close	unicode/udraft.h	28;"	d
uidna_close	unicode/uidna.h	/^uidna_close(UIDNA *idna);$/;"	p	signature:(UIDNA *idna)
uidna_close	unicode/urename.h	964;"	d
uidna_close	uts46.cpp	/^uidna_close(UIDNA *idna) {$/;"	f	signature:(UIDNA *idna)
uidna_close_4_6	unicode/udraft.h	58;"	d
uidna_compare	uidna.cpp	/^uidna_compare(  const UChar *s1, int32_t length1,$/;"	f	signature:( const UChar *s1, int32_t length1, const UChar *s2, int32_t length2, int32_t options, UErrorCode* status)
uidna_compare	unicode/uidna.h	/^uidna_compare(  const UChar *s1, int32_t length1,$/;"	p	signature:( const UChar *s1, int32_t length1, const UChar *s2, int32_t length2, int32_t options, UErrorCode* status)
uidna_compare	unicode/urename.h	965;"	d
uidna_labelToASCII	unicode/udraft.h	29;"	d
uidna_labelToASCII	unicode/uidna.h	/^uidna_labelToASCII(const UIDNA *idna,$/;"	p	signature:(const UIDNA *idna, const UChar *label, int32_t length, UChar *dest, int32_t capacity, UIDNAInfo *pInfo, UErrorCode *pErrorCode)
uidna_labelToASCII	unicode/urename.h	966;"	d
uidna_labelToASCII	uts46.cpp	/^uidna_labelToASCII(const UIDNA *idna,$/;"	f	signature:(const UIDNA *idna, const UChar *label, int32_t length, UChar *dest, int32_t capacity, UIDNAInfo *pInfo, UErrorCode *pErrorCode)
uidna_labelToASCII_4_6	unicode/udraft.h	59;"	d
uidna_labelToASCII_UTF8	unicode/udraft.h	30;"	d
uidna_labelToASCII_UTF8	unicode/uidna.h	/^uidna_labelToASCII_UTF8(const UIDNA *idna,$/;"	p	signature:(const UIDNA *idna, const char *label, int32_t length, char *dest, int32_t capacity, UIDNAInfo *pInfo, UErrorCode *pErrorCode)
uidna_labelToASCII_UTF8	unicode/urename.h	967;"	d
uidna_labelToASCII_UTF8	uts46.cpp	/^uidna_labelToASCII_UTF8(const UIDNA *idna,$/;"	f	signature:(const UIDNA *idna, const char *label, int32_t length, char *dest, int32_t capacity, UIDNAInfo *pInfo, UErrorCode *pErrorCode)
uidna_labelToASCII_UTF8_4_6	unicode/udraft.h	60;"	d
uidna_labelToUnicode	unicode/udraft.h	31;"	d
uidna_labelToUnicode	unicode/uidna.h	/^uidna_labelToUnicode(const UIDNA *idna,$/;"	p	signature:(const UIDNA *idna, const UChar *label, int32_t length, UChar *dest, int32_t capacity, UIDNAInfo *pInfo, UErrorCode *pErrorCode)
uidna_labelToUnicode	unicode/urename.h	968;"	d
uidna_labelToUnicode	uts46.cpp	/^uidna_labelToUnicode(const UIDNA *idna,$/;"	f	signature:(const UIDNA *idna, const UChar *label, int32_t length, UChar *dest, int32_t capacity, UIDNAInfo *pInfo, UErrorCode *pErrorCode)
uidna_labelToUnicodeUTF8	unicode/udraft.h	32;"	d
uidna_labelToUnicodeUTF8	unicode/uidna.h	/^uidna_labelToUnicodeUTF8(const UIDNA *idna,$/;"	p	signature:(const UIDNA *idna, const char *label, int32_t length, char *dest, int32_t capacity, UIDNAInfo *pInfo, UErrorCode *pErrorCode)
uidna_labelToUnicodeUTF8	unicode/urename.h	969;"	d
uidna_labelToUnicodeUTF8	uts46.cpp	/^uidna_labelToUnicodeUTF8(const UIDNA *idna,$/;"	f	signature:(const UIDNA *idna, const char *label, int32_t length, char *dest, int32_t capacity, UIDNAInfo *pInfo, UErrorCode *pErrorCode)
uidna_labelToUnicodeUTF8_4_6	unicode/udraft.h	61;"	d
uidna_labelToUnicode_4_6	unicode/udraft.h	62;"	d
uidna_nameToASCII	unicode/udraft.h	33;"	d
uidna_nameToASCII	unicode/uidna.h	/^uidna_nameToASCII(const UIDNA *idna,$/;"	p	signature:(const UIDNA *idna, const UChar *name, int32_t length, UChar *dest, int32_t capacity, UIDNAInfo *pInfo, UErrorCode *pErrorCode)
uidna_nameToASCII	unicode/urename.h	970;"	d
uidna_nameToASCII	uts46.cpp	/^uidna_nameToASCII(const UIDNA *idna,$/;"	f	signature:(const UIDNA *idna, const UChar *name, int32_t length, UChar *dest, int32_t capacity, UIDNAInfo *pInfo, UErrorCode *pErrorCode)
uidna_nameToASCII_4_6	unicode/udraft.h	63;"	d
uidna_nameToASCII_UTF8	unicode/udraft.h	34;"	d
uidna_nameToASCII_UTF8	unicode/uidna.h	/^uidna_nameToASCII_UTF8(const UIDNA *idna,$/;"	p	signature:(const UIDNA *idna, const char *name, int32_t length, char *dest, int32_t capacity, UIDNAInfo *pInfo, UErrorCode *pErrorCode)
uidna_nameToASCII_UTF8	unicode/urename.h	971;"	d
uidna_nameToASCII_UTF8	uts46.cpp	/^uidna_nameToASCII_UTF8(const UIDNA *idna,$/;"	f	signature:(const UIDNA *idna, const char *name, int32_t length, char *dest, int32_t capacity, UIDNAInfo *pInfo, UErrorCode *pErrorCode)
uidna_nameToASCII_UTF8_4_6	unicode/udraft.h	64;"	d
uidna_nameToUnicode	unicode/udraft.h	35;"	d
uidna_nameToUnicode	unicode/uidna.h	/^uidna_nameToUnicode(const UIDNA *idna,$/;"	p	signature:(const UIDNA *idna, const UChar *name, int32_t length, UChar *dest, int32_t capacity, UIDNAInfo *pInfo, UErrorCode *pErrorCode)
uidna_nameToUnicode	unicode/urename.h	972;"	d
uidna_nameToUnicode	uts46.cpp	/^uidna_nameToUnicode(const UIDNA *idna,$/;"	f	signature:(const UIDNA *idna, const UChar *name, int32_t length, UChar *dest, int32_t capacity, UIDNAInfo *pInfo, UErrorCode *pErrorCode)
uidna_nameToUnicodeUTF8	unicode/udraft.h	36;"	d
uidna_nameToUnicodeUTF8	unicode/uidna.h	/^uidna_nameToUnicodeUTF8(const UIDNA *idna,$/;"	p	signature:(const UIDNA *idna, const char *name, int32_t length, char *dest, int32_t capacity, UIDNAInfo *pInfo, UErrorCode *pErrorCode)
uidna_nameToUnicodeUTF8	unicode/urename.h	973;"	d
uidna_nameToUnicodeUTF8	uts46.cpp	/^uidna_nameToUnicodeUTF8(const UIDNA *idna,$/;"	f	signature:(const UIDNA *idna, const char *name, int32_t length, char *dest, int32_t capacity, UIDNAInfo *pInfo, UErrorCode *pErrorCode)
uidna_nameToUnicodeUTF8_4_6	unicode/udraft.h	65;"	d
uidna_nameToUnicode_4_6	unicode/udraft.h	66;"	d
uidna_openUTS46	unicode/udraft.h	37;"	d
uidna_openUTS46	unicode/uidna.h	/^uidna_openUTS46(uint32_t options, UErrorCode *pErrorCode);$/;"	p	signature:(uint32_t options, UErrorCode *pErrorCode)
uidna_openUTS46	unicode/urename.h	974;"	d
uidna_openUTS46	uts46.cpp	/^uidna_openUTS46(uint32_t options, UErrorCode *pErrorCode) {$/;"	f	signature:(uint32_t options, UErrorCode *pErrorCode)
uidna_openUTS46_4_6	unicode/udraft.h	67;"	d
uidna_toASCII	uidna.cpp	/^uidna_toASCII(const UChar* src, int32_t srcLength, $/;"	f	signature:(const UChar* src, int32_t srcLength, UChar* dest, int32_t destCapacity, int32_t options, UParseError* parseError, UErrorCode* status)
uidna_toASCII	unicode/uidna.h	/^uidna_toASCII(const UChar* src, int32_t srcLength, $/;"	p	signature:(const UChar* src, int32_t srcLength, UChar* dest, int32_t destCapacity, int32_t options, UParseError* parseError, UErrorCode* status)
uidna_toASCII	unicode/urename.h	975;"	d
uidna_toUnicode	uidna.cpp	/^uidna_toUnicode(const UChar* src, int32_t srcLength,$/;"	f	signature:(const UChar* src, int32_t srcLength, UChar* dest, int32_t destCapacity, int32_t options, UParseError* parseError, UErrorCode* status)
uidna_toUnicode	unicode/uidna.h	/^uidna_toUnicode(const UChar* src, int32_t srcLength,$/;"	p	signature:(const UChar* src, int32_t srcLength, UChar* dest, int32_t destCapacity, int32_t options, UParseError* parseError, UErrorCode* status)
uidna_toUnicode	unicode/urename.h	976;"	d
uint16_t	unicode/ppalmos.h	/^typedef unsigned short uint16_t;$/;"	t
uint16_t	unicode/ptypes.h	/^typedef unsigned short uint16_t;$/;"	t
uint16_t	unicode/pwin32.h	/^typedef unsigned short uint16_t;$/;"	t
uint32_t	unicode/ppalmos.h	/^typedef unsigned int uint32_t;$/;"	t
uint32_t	unicode/ptypes.h	/^typedef unsigned int uint32_t;$/;"	t
uint32_t	unicode/pwin32.h	/^typedef unsigned int uint32_t;$/;"	t
uint64_t	unicode/ppalmos.h	/^    typedef unsigned __int64 uint64_t;$/;"	t
uint64_t	unicode/ppalmos.h	/^    typedef unsigned long long uint64_t;$/;"	t
uint64_t	unicode/ptypes.h	/^    typedef unsigned long long uint64_t;$/;"	t
uint64_t	unicode/pwin32.h	/^    typedef unsigned __int64 uint64_t;$/;"	t
uint64_t	unicode/pwin32.h	/^    typedef unsigned long long uint64_t;$/;"	t
uint8_t	unicode/ppalmos.h	/^typedef unsigned char uint8_t;$/;"	t
uint8_t	unicode/ptypes.h	/^typedef unsigned char uint8_t;$/;"	t
uint8_t	unicode/pwin32.h	/^typedef unsigned char uint8_t;$/;"	t
uiter_current32	uiter.cpp	/^uiter_current32(UCharIterator *iter) {$/;"	f	signature:(UCharIterator *iter)
uiter_current32	unicode/uiter.h	/^uiter_current32(UCharIterator *iter);$/;"	p	signature:(UCharIterator *iter)
uiter_current32	unicode/urename.h	977;"	d
uiter_getState	uiter.cpp	/^uiter_getState(const UCharIterator *iter) {$/;"	f	signature:(const UCharIterator *iter)
uiter_getState	unicode/uiter.h	/^uiter_getState(const UCharIterator *iter);$/;"	p	signature:(const UCharIterator *iter)
uiter_getState	unicode/urename.h	978;"	d
uiter_next32	uiter.cpp	/^uiter_next32(UCharIterator *iter) {$/;"	f	signature:(UCharIterator *iter)
uiter_next32	unicode/uiter.h	/^uiter_next32(UCharIterator *iter);$/;"	p	signature:(UCharIterator *iter)
uiter_next32	unicode/urename.h	979;"	d
uiter_previous32	uiter.cpp	/^uiter_previous32(UCharIterator *iter) {$/;"	f	signature:(UCharIterator *iter)
uiter_previous32	unicode/uiter.h	/^uiter_previous32(UCharIterator *iter);$/;"	p	signature:(UCharIterator *iter)
uiter_previous32	unicode/urename.h	980;"	d
uiter_setCharacterIterator	uiter.cpp	/^uiter_setCharacterIterator(UCharIterator *iter, CharacterIterator *charIter) {$/;"	f	signature:(UCharIterator *iter, CharacterIterator *charIter)
uiter_setCharacterIterator	unicode/uiter.h	/^uiter_setCharacterIterator(UCharIterator *iter, U_NAMESPACE_QUALIFIER CharacterIterator *charIter);$/;"	p	signature:(UCharIterator *iter, U_NAMESPACE_QUALIFIER CharacterIterator *charIter)
uiter_setCharacterIterator	unicode/urename.h	981;"	d
uiter_setReplaceable	uiter.cpp	/^uiter_setReplaceable(UCharIterator *iter, const Replaceable *rep) {$/;"	f	signature:(UCharIterator *iter, const Replaceable *rep)
uiter_setReplaceable	unicode/uiter.h	/^uiter_setReplaceable(UCharIterator *iter, const U_NAMESPACE_QUALIFIER Replaceable *rep);$/;"	p	signature:(UCharIterator *iter, const U_NAMESPACE_QUALIFIER Replaceable *rep)
uiter_setReplaceable	unicode/urename.h	982;"	d
uiter_setState	uiter.cpp	/^uiter_setState(UCharIterator *iter, uint32_t state, UErrorCode *pErrorCode) {$/;"	f	signature:(UCharIterator *iter, uint32_t state, UErrorCode *pErrorCode)
uiter_setState	unicode/uiter.h	/^uiter_setState(UCharIterator *iter, uint32_t state, UErrorCode *pErrorCode);$/;"	p	signature:(UCharIterator *iter, uint32_t state, UErrorCode *pErrorCode)
uiter_setState	unicode/urename.h	983;"	d
uiter_setString	uiter.cpp	/^uiter_setString(UCharIterator *iter, const UChar *s, int32_t length) {$/;"	f	signature:(UCharIterator *iter, const UChar *s, int32_t length)
uiter_setString	unicode/uiter.h	/^uiter_setString(UCharIterator *iter, const UChar *s, int32_t length);$/;"	p	signature:(UCharIterator *iter, const UChar *s, int32_t length)
uiter_setString	unicode/urename.h	984;"	d
uiter_setUTF16BE	uiter.cpp	/^uiter_setUTF16BE(UCharIterator *iter, const char *s, int32_t length) {$/;"	f	signature:(UCharIterator *iter, const char *s, int32_t length)
uiter_setUTF16BE	unicode/uiter.h	/^uiter_setUTF16BE(UCharIterator *iter, const char *s, int32_t length);$/;"	p	signature:(UCharIterator *iter, const char *s, int32_t length)
uiter_setUTF16BE	unicode/urename.h	985;"	d
uiter_setUTF8	uiter.cpp	/^uiter_setUTF8(UCharIterator *iter, const char *s, int32_t length) {$/;"	f	signature:(UCharIterator *iter, const char *s, int32_t length)
uiter_setUTF8	unicode/uiter.h	/^uiter_setUTF8(UCharIterator *iter, const char *s, int32_t length);$/;"	p	signature:(UCharIterator *iter, const char *s, int32_t length)
uiter_setUTF8	unicode/urename.h	986;"	d
uldn_close	unicode/urename.h	987;"	d
uldn_getDialectHandling	unicode/urename.h	988;"	d
uldn_getLocale	unicode/urename.h	989;"	d
uldn_keyDisplayName	unicode/urename.h	990;"	d
uldn_keyValueDisplayName	unicode/urename.h	991;"	d
uldn_languageDisplayName	unicode/urename.h	992;"	d
uldn_localeDisplayName	unicode/urename.h	993;"	d
uldn_open	unicode/urename.h	994;"	d
uldn_regionDisplayName	unicode/urename.h	995;"	d
uldn_scriptCodeDisplayName	unicode/urename.h	996;"	d
uldn_scriptDisplayName	unicode/urename.h	997;"	d
uldn_variantDisplayName	unicode/urename.h	998;"	d
ulist_addFirstItem	ulist.c	/^static void ulist_addFirstItem(UList *list, UListNode *newItem) {$/;"	f	file:	signature:(UList *list, UListNode *newItem)
ulist_addFirstItem	ulist.c	/^static void ulist_addFirstItem(UList *list, UListNode *newItem);$/;"	p	file:	signature:(UList *list, UListNode *newItem)
ulist_addItemBeginList	ulist.c	/^U_CAPI void U_EXPORT2 ulist_addItemBeginList(UList *list, const void *data, UBool forceDelete, UErrorCode *status) {$/;"	f	signature:(UList *list, const void *data, UBool forceDelete, UErrorCode *status)
ulist_addItemBeginList	ulist.h	/^U_CAPI void U_EXPORT2 ulist_addItemBeginList(UList *list, const void *data, UBool forceDelete, UErrorCode *status);$/;"	p	signature:(UList *list, const void *data, UBool forceDelete, UErrorCode *status)
ulist_addItemBeginList	unicode/urename.h	999;"	d
ulist_addItemEndList	ulist.c	/^U_CAPI void U_EXPORT2 ulist_addItemEndList(UList *list, const void *data, UBool forceDelete, UErrorCode *status) {$/;"	f	signature:(UList *list, const void *data, UBool forceDelete, UErrorCode *status)
ulist_addItemEndList	ulist.h	/^U_CAPI void U_EXPORT2 ulist_addItemEndList(UList *list, const void *data, UBool forceDelete, UErrorCode *status);$/;"	p	signature:(UList *list, const void *data, UBool forceDelete, UErrorCode *status)
ulist_addItemEndList	unicode/urename.h	1000;"	d
ulist_close_keyword_values_iterator	ulist.c	/^U_CAPI void U_EXPORT2 ulist_close_keyword_values_iterator(UEnumeration *en) {$/;"	f	signature:(UEnumeration *en)
ulist_close_keyword_values_iterator	ulist.h	/^U_CAPI void U_EXPORT2 ulist_close_keyword_values_iterator(UEnumeration *en);$/;"	p	signature:(UEnumeration *en)
ulist_close_keyword_values_iterator	unicode/urename.h	1001;"	d
ulist_containsString	ulist.c	/^U_CAPI UBool U_EXPORT2 ulist_containsString(const UList *list, const char *data, int32_t length) {$/;"	f	signature:(const UList *list, const char *data, int32_t length)
ulist_containsString	ulist.h	/^U_CAPI UBool U_EXPORT2 ulist_containsString(const UList *list, const char *data, int32_t length);$/;"	p	signature:(const UList *list, const char *data, int32_t length)
ulist_containsString	unicode/urename.h	1002;"	d
ulist_count_keyword_values	ulist.c	/^U_CAPI int32_t U_EXPORT2 ulist_count_keyword_values(UEnumeration *en, UErrorCode *status) {$/;"	f	signature:(UEnumeration *en, UErrorCode *status)
ulist_count_keyword_values	ulist.h	/^U_CAPI int32_t U_EXPORT2 ulist_count_keyword_values(UEnumeration *en, UErrorCode *status);$/;"	p	signature:(UEnumeration *en, UErrorCode *status)
ulist_count_keyword_values	unicode/urename.h	1003;"	d
ulist_createEmptyList	ulist.c	/^U_CAPI UList *U_EXPORT2 ulist_createEmptyList(UErrorCode *status) {$/;"	f	signature:(UErrorCode *status)
ulist_createEmptyList	ulist.h	/^U_CAPI UList * U_EXPORT2 ulist_createEmptyList(UErrorCode *status);$/;"	p	signature:(UErrorCode *status)
ulist_createEmptyList	unicode/urename.h	1004;"	d
ulist_deleteList	ulist.c	/^U_CAPI void U_EXPORT2 ulist_deleteList(UList *list) {$/;"	f	signature:(UList *list)
ulist_deleteList	ulist.h	/^U_CAPI void U_EXPORT2 ulist_deleteList(UList *list);$/;"	p	signature:(UList *list)
ulist_deleteList	unicode/urename.h	1005;"	d
ulist_getListFromEnum	ulist.c	/^U_CAPI UList * U_EXPORT2 ulist_getListFromEnum(UEnumeration *en) {$/;"	f	signature:(UEnumeration *en)
ulist_getListFromEnum	ulist.h	/^U_CAPI UList * U_EXPORT2 ulist_getListFromEnum(UEnumeration *en);$/;"	p	signature:(UEnumeration *en)
ulist_getListFromEnum	unicode/urename.h	1006;"	d
ulist_getListSize	ulist.c	/^U_CAPI int32_t U_EXPORT2 ulist_getListSize(const UList *list) {$/;"	f	signature:(const UList *list)
ulist_getListSize	ulist.h	/^U_CAPI int32_t U_EXPORT2 ulist_getListSize(const UList *list);$/;"	p	signature:(const UList *list)
ulist_getListSize	unicode/urename.h	1007;"	d
ulist_getNext	ulist.c	/^U_CAPI void *U_EXPORT2 ulist_getNext(UList *list) {$/;"	f	signature:(UList *list)
ulist_getNext	ulist.h	/^U_CAPI void *U_EXPORT2 ulist_getNext(UList *list);$/;"	p	signature:(UList *list)
ulist_getNext	unicode/urename.h	1008;"	d
ulist_next_keyword_value	ulist.c	/^U_CAPI const char * U_EXPORT2 ulist_next_keyword_value(UEnumeration *en, int32_t *resultLength, UErrorCode *status) {$/;"	f	signature:(UEnumeration *en, int32_t *resultLength, UErrorCode *status)
ulist_next_keyword_value	ulist.h	/^U_CAPI const char * U_EXPORT2 ulist_next_keyword_value(UEnumeration* en, int32_t *resultLength, UErrorCode* status);$/;"	p	signature:(UEnumeration* en, int32_t *resultLength, UErrorCode* status)
ulist_next_keyword_value	unicode/urename.h	1009;"	d
ulist_resetList	ulist.c	/^U_CAPI void U_EXPORT2 ulist_resetList(UList *list) {$/;"	f	signature:(UList *list)
ulist_resetList	ulist.h	/^U_CAPI void U_EXPORT2 ulist_resetList(UList *list);$/;"	p	signature:(UList *list)
ulist_resetList	unicode/urename.h	1010;"	d
ulist_reset_keyword_values_iterator	ulist.c	/^U_CAPI void U_EXPORT2 ulist_reset_keyword_values_iterator(UEnumeration *en, UErrorCode *status) {$/;"	f	signature:(UEnumeration *en, UErrorCode *status)
ulist_reset_keyword_values_iterator	ulist.h	/^U_CAPI void U_EXPORT2 ulist_reset_keyword_values_iterator(UEnumeration* en, UErrorCode* status);$/;"	p	signature:(UEnumeration* en, UErrorCode* status)
ulist_reset_keyword_values_iterator	unicode/urename.h	1011;"	d
ulmbcs_byte_t	ucnv_lmb.c	/^typedef uint8_t ulmbcs_byte_t;$/;"	t	file:
uloc_acceptLanguage	uloc.c	/^uloc_acceptLanguage(char *result, int32_t resultAvailable, $/;"	f	signature:(char *result, int32_t resultAvailable, UAcceptResult *outResult, const char **acceptList, int32_t acceptListCount, UEnumeration* availableLocales, UErrorCode *status)
uloc_acceptLanguage	unicode/uloc.h	/^uloc_acceptLanguage(char *result, int32_t resultAvailable, $/;"	p	signature:(char *result, int32_t resultAvailable, UAcceptResult *outResult, const char **acceptList, int32_t acceptListCount, UEnumeration* availableLocales, UErrorCode *status)
uloc_acceptLanguage	unicode/urename.h	1012;"	d
uloc_acceptLanguageCompare	uloc.c	/^uloc_acceptLanguageCompare(const void *context, const void *a, const void *b)$/;"	f	file:	signature:(const void *context, const void *a, const void *b)
uloc_acceptLanguageFromHTTP	uloc.c	/^uloc_acceptLanguageFromHTTP(char *result, int32_t resultAvailable, UAcceptResult *outResult,$/;"	f	signature:(char *result, int32_t resultAvailable, UAcceptResult *outResult, const char *httpAcceptLanguage, UEnumeration* availableLocales, UErrorCode *status)
uloc_acceptLanguageFromHTTP	unicode/uloc.h	/^uloc_acceptLanguageFromHTTP(char *result, int32_t resultAvailable,$/;"	p	signature:(char *result, int32_t resultAvailable, UAcceptResult *outResult, const char *httpAcceptLanguage, UEnumeration* availableLocales, UErrorCode *status)
uloc_acceptLanguageFromHTTP	unicode/urename.h	1013;"	d
uloc_addLikelySubtags	loclikely.cpp	/^uloc_addLikelySubtags(const char*    localeID,$/;"	f	signature:(const char* localeID, char* maximizedLocaleID, int32_t maximizedLocaleIDCapacity, UErrorCode* err)
uloc_addLikelySubtags	unicode/uloc.h	/^uloc_addLikelySubtags(const char*    localeID,$/;"	p	signature:(const char* localeID, char* maximizedLocaleID, int32_t maximizedLocaleIDCapacity, UErrorCode* err)
uloc_addLikelySubtags	unicode/urename.h	1014;"	d
uloc_canonicalize	uloc.c	/^uloc_canonicalize(const char* localeID,$/;"	f	signature:(const char* localeID, char* name, int32_t nameCapacity, UErrorCode* err)
uloc_canonicalize	unicode/uloc.h	/^uloc_canonicalize(const char*    localeID,$/;"	p	signature:(const char* localeID, char* name, int32_t nameCapacity, UErrorCode* err)
uloc_canonicalize	unicode/urename.h	1015;"	d
uloc_cleanup	locavailable.cpp	/^static UBool U_CALLCONV uloc_cleanup(void) {$/;"	f	file:	signature:(void)
uloc_countAvailable	locavailable.cpp	/^uloc_countAvailable()$/;"	f	signature:()
uloc_countAvailable	unicode/uloc.h	/^U_STABLE int32_t U_EXPORT2 uloc_countAvailable(void);$/;"	p	signature:(void)
uloc_countAvailable	unicode/urename.h	1016;"	d
uloc_forLanguageTag	uloc_tag.c	/^uloc_forLanguageTag(const char* langtag,$/;"	f	signature:(const char* langtag, char* localeID, int32_t localeIDCapacity, int32_t* parsedLength, UErrorCode* status)
uloc_forLanguageTag	unicode/udraft.h	38;"	d
uloc_forLanguageTag	unicode/uloc.h	/^uloc_forLanguageTag(const char* langtag,$/;"	p	signature:(const char* langtag, char* localeID, int32_t localeIDCapacity, int32_t* parsedLength, UErrorCode* err)
uloc_forLanguageTag	unicode/urename.h	1017;"	d
uloc_forLanguageTag_4_6	unicode/udraft.h	68;"	d
uloc_getAvailable	locavailable.cpp	/^uloc_getAvailable(int32_t offset) $/;"	f	signature:(int32_t offset)
uloc_getAvailable	unicode/uloc.h	/^uloc_getAvailable(int32_t n);$/;"	p	signature:(int32_t n)
uloc_getAvailable	unicode/urename.h	1018;"	d
uloc_getBaseName	uloc.c	/^uloc_getBaseName(const char* localeID,$/;"	f	signature:(const char* localeID, char* name, int32_t nameCapacity, UErrorCode* err)
uloc_getBaseName	unicode/uloc.h	/^uloc_getBaseName(const char*    localeID,$/;"	p	signature:(const char* localeID, char* name, int32_t nameCapacity, UErrorCode* err)
uloc_getBaseName	unicode/urename.h	1019;"	d
uloc_getCharacterOrientation	locresdata.cpp	/^uloc_getCharacterOrientation(const char* localeId,$/;"	f	signature:(const char* localeId, UErrorCode *status)
uloc_getCharacterOrientation	unicode/uloc.h	/^uloc_getCharacterOrientation(const char* localeId,$/;"	p	signature:(const char* localeId, UErrorCode *status)
uloc_getCharacterOrientation	unicode/urename.h	1020;"	d
uloc_getCountry	uloc.c	/^uloc_getCountry(const char* localeID,$/;"	f	signature:(const char* localeID, char* country, int32_t countryCapacity, UErrorCode* err)
uloc_getCountry	unicode/uloc.h	/^uloc_getCountry(const char*    localeID,$/;"	p	signature:(const char* localeID, char* country, int32_t countryCapacity, UErrorCode* err)
uloc_getCountry	unicode/urename.h	1021;"	d
uloc_getCurrentCountryID	uloc.c	/^uloc_getCurrentCountryID(const char* oldID){$/;"	f	signature:(const char* oldID)
uloc_getCurrentCountryID	ulocimp.h	/^uloc_getCurrentCountryID(const char* oldID);$/;"	p	signature:(const char* oldID)
uloc_getCurrentCountryID	unicode/urename.h	1022;"	d
uloc_getCurrentLanguageID	uloc.c	/^uloc_getCurrentLanguageID(const char* oldID){$/;"	f	signature:(const char* oldID)
uloc_getCurrentLanguageID	ulocimp.h	/^uloc_getCurrentLanguageID(const char* oldID);$/;"	p	signature:(const char* oldID)
uloc_getCurrentLanguageID	unicode/urename.h	1023;"	d
uloc_getDefault	uloc.c	/^uloc_getDefault()$/;"	f
uloc_getDefault	unicode/uloc.h	/^uloc_getDefault(void);$/;"	p	signature:(void)
uloc_getDefault	unicode/urename.h	1024;"	d
uloc_getDefault	unicode/usystem.h	32;"	d
uloc_getDefault_4_6	unicode/usystem.h	40;"	d
uloc_getDisplayCountry	locdispnames.cpp	/^uloc_getDisplayCountry(const char *locale,$/;"	f	signature:(const char *locale, const char *displayLocale, UChar *dest, int32_t destCapacity, UErrorCode *pErrorCode)
uloc_getDisplayCountry	unicode/uloc.h	/^uloc_getDisplayCountry(const char* locale,$/;"	p	signature:(const char* locale, const char* displayLocale, UChar* country, int32_t countryCapacity, UErrorCode* status)
uloc_getDisplayCountry	unicode/urename.h	1025;"	d
uloc_getDisplayKeyword	locdispnames.cpp	/^uloc_getDisplayKeyword(const char* keyword,$/;"	f	signature:(const char* keyword, const char* displayLocale, UChar* dest, int32_t destCapacity, UErrorCode* status)
uloc_getDisplayKeyword	unicode/uloc.h	/^uloc_getDisplayKeyword(const char* keyword,$/;"	p	signature:(const char* keyword, const char* displayLocale, UChar* dest, int32_t destCapacity, UErrorCode* status)
uloc_getDisplayKeyword	unicode/urename.h	1026;"	d
uloc_getDisplayKeywordValue	locdispnames.cpp	/^uloc_getDisplayKeywordValue(   const char* locale,$/;"	f	signature:( const char* locale, const char* keyword, const char* displayLocale, UChar* dest, int32_t destCapacity, UErrorCode* status)
uloc_getDisplayKeywordValue	unicode/uloc.h	/^uloc_getDisplayKeywordValue(   const char* locale,$/;"	p	signature:( const char* locale, const char* keyword, const char* displayLocale, UChar* dest, int32_t destCapacity, UErrorCode* status)
uloc_getDisplayKeywordValue	unicode/urename.h	1027;"	d
uloc_getDisplayLanguage	locdispnames.cpp	/^uloc_getDisplayLanguage(const char *locale,$/;"	f	signature:(const char *locale, const char *displayLocale, UChar *dest, int32_t destCapacity, UErrorCode *pErrorCode)
uloc_getDisplayLanguage	unicode/uloc.h	/^uloc_getDisplayLanguage(const char* locale,$/;"	p	signature:(const char* locale, const char* displayLocale, UChar* language, int32_t languageCapacity, UErrorCode* status)
uloc_getDisplayLanguage	unicode/urename.h	1028;"	d
uloc_getDisplayName	locdispnames.cpp	/^uloc_getDisplayName(const char *locale,$/;"	f	signature:(const char *locale, const char *displayLocale, UChar *dest, int32_t destCapacity, UErrorCode *pErrorCode)
uloc_getDisplayName	unicode/uloc.h	/^uloc_getDisplayName(const char* localeID,$/;"	p	signature:(const char* localeID, const char* inLocaleID, UChar* result, int32_t maxResultSize, UErrorCode* err)
uloc_getDisplayName	unicode/urename.h	1029;"	d
uloc_getDisplayScript	locdispnames.cpp	/^uloc_getDisplayScript(const char* locale,$/;"	f	signature:(const char* locale, const char* displayLocale, UChar *dest, int32_t destCapacity, UErrorCode *pErrorCode)
uloc_getDisplayScript	unicode/uloc.h	/^uloc_getDisplayScript(const char* locale,$/;"	p	signature:(const char* locale, const char* displayLocale, UChar* script, int32_t scriptCapacity, UErrorCode* status)
uloc_getDisplayScript	unicode/urename.h	1030;"	d
uloc_getDisplayVariant	locdispnames.cpp	/^uloc_getDisplayVariant(const char *locale,$/;"	f	signature:(const char *locale, const char *displayLocale, UChar *dest, int32_t destCapacity, UErrorCode *pErrorCode)
uloc_getDisplayVariant	unicode/uloc.h	/^uloc_getDisplayVariant(const char* locale,$/;"	p	signature:(const char* locale, const char* displayLocale, UChar* variant, int32_t variantCapacity, UErrorCode* status)
uloc_getDisplayVariant	unicode/urename.h	1031;"	d
uloc_getISO3Country	uloc.c	/^uloc_getISO3Country(const char* localeID) $/;"	f	signature:(const char* localeID)
uloc_getISO3Country	unicode/uloc.h	/^uloc_getISO3Country(const char* localeID);$/;"	p	signature:(const char* localeID)
uloc_getISO3Country	unicode/urename.h	1032;"	d
uloc_getISO3Language	uloc.c	/^uloc_getISO3Language(const char* localeID) $/;"	f	signature:(const char* localeID)
uloc_getISO3Language	unicode/uloc.h	/^uloc_getISO3Language(const char* localeID);$/;"	p	signature:(const char* localeID)
uloc_getISO3Language	unicode/urename.h	1033;"	d
uloc_getISOCountries	uloc.c	/^uloc_getISOCountries() $/;"	f
uloc_getISOCountries	unicode/uloc.h	/^uloc_getISOCountries(void);$/;"	p	signature:(void)
uloc_getISOCountries	unicode/urename.h	1034;"	d
uloc_getISOLanguages	uloc.c	/^uloc_getISOLanguages() $/;"	f
uloc_getISOLanguages	unicode/uloc.h	/^uloc_getISOLanguages(void);$/;"	p	signature:(void)
uloc_getISOLanguages	unicode/urename.h	1035;"	d
uloc_getKeywordValue	uloc.c	/^uloc_getKeywordValue(const char* localeID,$/;"	f	signature:(const char* localeID, const char* keywordName, char* buffer, int32_t bufferCapacity, UErrorCode* status)
uloc_getKeywordValue	unicode/uloc.h	/^uloc_getKeywordValue(const char* localeID,$/;"	p	signature:(const char* localeID, const char* keywordName, char* buffer, int32_t bufferCapacity, UErrorCode* status)
uloc_getKeywordValue	unicode/urename.h	1036;"	d
uloc_getLCID	uloc.c	/^uloc_getLCID(const char* localeID) $/;"	f	signature:(const char* localeID)
uloc_getLCID	unicode/uloc.h	/^uloc_getLCID(const char* localeID);$/;"	p	signature:(const char* localeID)
uloc_getLCID	unicode/urename.h	1037;"	d
uloc_getLanguage	uloc.c	/^uloc_getLanguage(const char*    localeID,$/;"	f	signature:(const char* localeID, char* language, int32_t languageCapacity, UErrorCode* err)
uloc_getLanguage	unicode/uloc.h	/^uloc_getLanguage(const char*    localeID,$/;"	p	signature:(const char* localeID, char* language, int32_t languageCapacity, UErrorCode* err)
uloc_getLanguage	unicode/urename.h	1038;"	d
uloc_getLineOrientation	locresdata.cpp	/^uloc_getLineOrientation(const char* localeId,$/;"	f	signature:(const char* localeId, UErrorCode *status)
uloc_getLineOrientation	unicode/uloc.h	/^uloc_getLineOrientation(const char* localeId,$/;"	p	signature:(const char* localeId, UErrorCode *status)
uloc_getLineOrientation	unicode/urename.h	1039;"	d
uloc_getLocaleForLCID	uloc.c	/^uloc_getLocaleForLCID(uint32_t hostid, char *locale, int32_t localeCapacity,$/;"	f	signature:(uint32_t hostid, char *locale, int32_t localeCapacity, UErrorCode *status)
uloc_getLocaleForLCID	unicode/uloc.h	/^uloc_getLocaleForLCID(uint32_t hostID, char *locale, int32_t localeCapacity,$/;"	p	signature:(uint32_t hostID, char *locale, int32_t localeCapacity, UErrorCode *status)
uloc_getLocaleForLCID	unicode/urename.h	1040;"	d
uloc_getName	uloc.c	/^uloc_getName(const char* localeID,$/;"	f	signature:(const char* localeID, char* name, int32_t nameCapacity, UErrorCode* err)
uloc_getName	unicode/uloc.h	/^uloc_getName(const char*    localeID,$/;"	p	signature:(const char* localeID, char* name, int32_t nameCapacity, UErrorCode* err)
uloc_getName	unicode/urename.h	1041;"	d
uloc_getParent	uloc.c	/^uloc_getParent(const char*    localeID,$/;"	f	signature:(const char* localeID, char* parent, int32_t parentCapacity, UErrorCode* err)
uloc_getParent	unicode/uloc.h	/^uloc_getParent(const char*    localeID,$/;"	p	signature:(const char* localeID, char* parent, int32_t parentCapacity, UErrorCode* err)
uloc_getParent	unicode/urename.h	1042;"	d
uloc_getScript	uloc.c	/^uloc_getScript(const char*    localeID,$/;"	f	signature:(const char* localeID, char* script, int32_t scriptCapacity, UErrorCode* err)
uloc_getScript	unicode/uloc.h	/^uloc_getScript(const char*    localeID,$/;"	p	signature:(const char* localeID, char* script, int32_t scriptCapacity, UErrorCode* err)
uloc_getScript	unicode/urename.h	1043;"	d
uloc_getTableStringWithFallback	locresdata.cpp	/^uloc_getTableStringWithFallback(const char *path, const char *locale,$/;"	f	signature:(const char *path, const char *locale, const char *tableKey, const char *subTableKey, const char *itemKey, int32_t *pLength, UErrorCode *pErrorCode)
uloc_getTableStringWithFallback	ulocimp.h	/^uloc_getTableStringWithFallback($/;"	p	signature:( const char *path, const char *locale, const char *tableKey, const char *subTableKey, const char *itemKey, int32_t *pLength, UErrorCode *pErrorCode)
uloc_getTableStringWithFallback	unicode/urename.h	1044;"	d
uloc_getVariant	uloc.c	/^uloc_getVariant(const char* localeID,$/;"	f	signature:(const char* localeID, char* variant, int32_t variantCapacity, UErrorCode* err)
uloc_getVariant	unicode/uloc.h	/^uloc_getVariant(const char*    localeID,$/;"	p	signature:(const char* localeID, char* variant, int32_t variantCapacity, UErrorCode* err)
uloc_getVariant	unicode/urename.h	1045;"	d
uloc_kw_closeKeywords	uloc.c	/^uloc_kw_closeKeywords(UEnumeration *enumerator) {$/;"	f	file:	signature:(UEnumeration *enumerator)
uloc_kw_countKeywords	uloc.c	/^uloc_kw_countKeywords(UEnumeration *en, UErrorCode *status) {$/;"	f	file:	signature:(UEnumeration *en, UErrorCode *status)
uloc_kw_nextKeyword	uloc.c	/^uloc_kw_nextKeyword(UEnumeration* en,$/;"	f	file:	signature:(UEnumeration* en, int32_t* resultLength, UErrorCode* status)
uloc_kw_resetKeywords	uloc.c	/^uloc_kw_resetKeywords(UEnumeration* en, $/;"	f	file:	signature:(UEnumeration* en, UErrorCode* status)
uloc_minimizeSubtags	loclikely.cpp	/^uloc_minimizeSubtags(const char*    localeID,$/;"	f	signature:(const char* localeID, char* minimizedLocaleID, int32_t minimizedLocaleIDCapacity, UErrorCode* err)
uloc_minimizeSubtags	unicode/uloc.h	/^uloc_minimizeSubtags(const char*    localeID,$/;"	p	signature:(const char* localeID, char* minimizedLocaleID, int32_t minimizedLocaleIDCapacity, UErrorCode* err)
uloc_minimizeSubtags	unicode/urename.h	1046;"	d
uloc_openKeywordList	uloc.c	/^uloc_openKeywordList(const char *keywordList, int32_t keywordListSize, UErrorCode* status)$/;"	f	signature:(const char *keywordList, int32_t keywordListSize, UErrorCode* status)
uloc_openKeywordList	ulocimp.h	/^uloc_openKeywordList(const char *keywordList, int32_t keywordListSize, UErrorCode* status);$/;"	p	signature:(const char *keywordList, int32_t keywordListSize, UErrorCode* status)
uloc_openKeywordList	unicode/urename.h	1047;"	d
uloc_openKeywords	uloc.c	/^uloc_openKeywords(const char* localeID,$/;"	f	signature:(const char* localeID, UErrorCode* status)
uloc_openKeywords	unicode/uloc.h	/^uloc_openKeywords(const char* localeID,$/;"	p	signature:(const char* localeID, UErrorCode* status)
uloc_openKeywords	unicode/urename.h	1048;"	d
uloc_setDefault	uloc.c	/^uloc_setDefault(const char*   newDefaultLocale,$/;"	f	signature:(const char* newDefaultLocale, UErrorCode* err)
uloc_setDefault	unicode/uloc.h	/^uloc_setDefault(const char* localeID,$/;"	p	signature:(const char* localeID, UErrorCode* status)
uloc_setDefault	unicode/urename.h	1049;"	d
uloc_setDefault	unicode/usystem.h	33;"	d
uloc_setDefault_4_6	unicode/usystem.h	41;"	d
uloc_setKeywordValue	uloc.c	/^uloc_setKeywordValue(const char* keywordName,$/;"	f	signature:(const char* keywordName, const char* keywordValue, char* buffer, int32_t bufferCapacity, UErrorCode* status)
uloc_setKeywordValue	unicode/uloc.h	/^uloc_setKeywordValue(const char* keywordName,$/;"	p	signature:(const char* keywordName, const char* keywordValue, char* buffer, int32_t bufferCapacity, UErrorCode* status)
uloc_setKeywordValue	unicode/urename.h	1050;"	d
uloc_toLanguageTag	uloc_tag.c	/^uloc_toLanguageTag(const char* localeID,$/;"	f	signature:(const char* localeID, char* langtag, int32_t langtagCapacity, UBool strict, UErrorCode* status)
uloc_toLanguageTag	unicode/udraft.h	39;"	d
uloc_toLanguageTag	unicode/uloc.h	/^uloc_toLanguageTag(const char* localeID,$/;"	p	signature:(const char* localeID, char* langtag, int32_t langtagCapacity, UBool strict, UErrorCode* err)
uloc_toLanguageTag	unicode/urename.h	1051;"	d
uloc_toLanguageTag_4_6	unicode/udraft.h	69;"	d
ulocdata_close	unicode/urename.h	1052;"	d
ulocdata_getCLDRVersion	unicode/urename.h	1053;"	d
ulocdata_getDelimiter	unicode/urename.h	1054;"	d
ulocdata_getExemplarSet	unicode/urename.h	1055;"	d
ulocdata_getLocaleDisplayPattern	unicode/urename.h	1056;"	d
ulocdata_getLocaleSeparator	unicode/urename.h	1057;"	d
ulocdata_getMeasurementSystem	unicode/urename.h	1058;"	d
ulocdata_getNoSubstitute	unicode/urename.h	1059;"	d
ulocdata_getPaperSize	unicode/urename.h	1060;"	d
ulocdata_open	unicode/urename.h	1061;"	d
ulocdata_setNoSubstitute	unicode/urename.h	1062;"	d
ulocimp_getCountry	uloc.c	/^ulocimp_getCountry(const char *localeID,$/;"	f	signature:(const char *localeID, char *country, int32_t countryCapacity, const char **pEnd)
ulocimp_getCountry	ulocimp.h	/^ulocimp_getCountry(const char *localeID,$/;"	p	signature:(const char *localeID, char *country, int32_t countryCapacity, const char **pEnd)
ulocimp_getCountry	unicode/urename.h	1063;"	d
ulocimp_getLanguage	uloc.c	/^ulocimp_getLanguage(const char *localeID,$/;"	f	signature:(const char *localeID, char *language, int32_t languageCapacity, const char **pEnd)
ulocimp_getLanguage	ulocimp.h	/^ulocimp_getLanguage(const char *localeID,$/;"	p	signature:(const char *localeID, char *language, int32_t languageCapacity, const char **pEnd)
ulocimp_getLanguage	unicode/urename.h	1064;"	d
ulocimp_getScript	uloc.c	/^ulocimp_getScript(const char *localeID,$/;"	f	signature:(const char *localeID, char *script, int32_t scriptCapacity, const char **pEnd)
ulocimp_getScript	ulocimp.h	/^ulocimp_getScript(const char *localeID,$/;"	p	signature:(const char *localeID, char *script, int32_t scriptCapacity, const char **pEnd)
ulocimp_getScript	unicode/urename.h	1065;"	d
ultag_close	uloc_tag.c	/^ultag_close(ULanguageTag* langtag) {$/;"	f	file:	signature:(ULanguageTag* langtag)
ultag_close	uloc_tag.c	/^ultag_close(ULanguageTag* langtag);$/;"	p	file:	signature:(ULanguageTag* langtag)
ultag_getExtensionKey	uloc_tag.c	/^ultag_getExtensionKey(const ULanguageTag* langtag, int32_t idx) {$/;"	f	file:	signature:(const ULanguageTag* langtag, int32_t idx)
ultag_getExtensionKey	uloc_tag.c	/^ultag_getExtensionKey(const ULanguageTag* langtag, int32_t idx);$/;"	p	file:	signature:(const ULanguageTag* langtag, int32_t idx)
ultag_getExtensionValue	uloc_tag.c	/^ultag_getExtensionValue(const ULanguageTag* langtag, int32_t idx) {$/;"	f	file:	signature:(const ULanguageTag* langtag, int32_t idx)
ultag_getExtensionValue	uloc_tag.c	/^ultag_getExtensionValue(const ULanguageTag* langtag, int32_t idx);$/;"	p	file:	signature:(const ULanguageTag* langtag, int32_t idx)
ultag_getExtensionsSize	uloc_tag.c	/^ultag_getExtensionsSize(const ULanguageTag* langtag) {$/;"	f	file:	signature:(const ULanguageTag* langtag)
ultag_getExtensionsSize	uloc_tag.c	/^ultag_getExtensionsSize(const ULanguageTag* langtag);$/;"	p	file:	signature:(const ULanguageTag* langtag)
ultag_getExtlang	uloc_tag.c	/^ultag_getExtlang(const ULanguageTag* langtag, int32_t idx) {$/;"	f	file:	signature:(const ULanguageTag* langtag, int32_t idx)
ultag_getExtlang	uloc_tag.c	/^ultag_getExtlang(const ULanguageTag* langtag, int32_t idx);$/;"	p	file:	signature:(const ULanguageTag* langtag, int32_t idx)
ultag_getExtlangSize	uloc_tag.c	/^ultag_getExtlangSize(const ULanguageTag* langtag) {$/;"	f	file:	signature:(const ULanguageTag* langtag)
ultag_getExtlangSize	uloc_tag.c	/^ultag_getExtlangSize(const ULanguageTag* langtag);$/;"	p	file:	signature:(const ULanguageTag* langtag)
ultag_getLanguage	uloc_tag.c	/^ultag_getLanguage(const ULanguageTag* langtag) {$/;"	f	file:	signature:(const ULanguageTag* langtag)
ultag_getLanguage	uloc_tag.c	/^ultag_getLanguage(const ULanguageTag* langtag);$/;"	p	file:	signature:(const ULanguageTag* langtag)
ultag_getPrivateUse	uloc_tag.c	/^ultag_getPrivateUse(const ULanguageTag* langtag) {$/;"	f	file:	signature:(const ULanguageTag* langtag)
ultag_getPrivateUse	uloc_tag.c	/^ultag_getPrivateUse(const ULanguageTag* langtag);$/;"	p	file:	signature:(const ULanguageTag* langtag)
ultag_getRegion	uloc_tag.c	/^ultag_getRegion(const ULanguageTag* langtag) {$/;"	f	file:	signature:(const ULanguageTag* langtag)
ultag_getRegion	uloc_tag.c	/^ultag_getRegion(const ULanguageTag* langtag);$/;"	p	file:	signature:(const ULanguageTag* langtag)
ultag_getScript	uloc_tag.c	/^ultag_getScript(const ULanguageTag* langtag) {$/;"	f	file:	signature:(const ULanguageTag* langtag)
ultag_getScript	uloc_tag.c	/^ultag_getScript(const ULanguageTag* langtag);$/;"	p	file:	signature:(const ULanguageTag* langtag)
ultag_getVariant	uloc_tag.c	/^ultag_getVariant(const ULanguageTag* langtag, int32_t idx) {$/;"	f	file:	signature:(const ULanguageTag* langtag, int32_t idx)
ultag_getVariant	uloc_tag.c	/^ultag_getVariant(const ULanguageTag* langtag, int32_t idx);$/;"	p	file:	signature:(const ULanguageTag* langtag, int32_t idx)
ultag_getVariantsSize	uloc_tag.c	/^ultag_getVariantsSize(const ULanguageTag* langtag) {$/;"	f	file:	signature:(const ULanguageTag* langtag)
ultag_getVariantsSize	uloc_tag.c	/^ultag_getVariantsSize(const ULanguageTag* langtag);$/;"	p	file:	signature:(const ULanguageTag* langtag)
ultag_parse	uloc_tag.c	/^ultag_parse(const char* tag, int32_t tagLen, int32_t* parsedLen, UErrorCode* status) {$/;"	f	file:	signature:(const char* tag, int32_t tagLen, int32_t* parsedLen, UErrorCode* status)
ultag_parse	uloc_tag.c	/^ultag_parse(const char* tag, int32_t tagLen, int32_t* parsedLen, UErrorCode* status);$/;"	p	file:	signature:(const char* tag, int32_t tagLen, int32_t* parsedLen, UErrorCode* status)
umap_fsize	umapfile.c	/^    umap_fsize(FILE *f) {$/;"	f	file:	signature:(FILE *f)
umsg_applyPattern	unicode/urename.h	1066;"	d
umsg_autoQuoteApostrophe	unicode/urename.h	1067;"	d
umsg_clone	unicode/urename.h	1068;"	d
umsg_close	unicode/urename.h	1069;"	d
umsg_format	unicode/urename.h	1070;"	d
umsg_getLocale	unicode/urename.h	1071;"	d
umsg_open	unicode/urename.h	1072;"	d
umsg_parse	unicode/urename.h	1073;"	d
umsg_setLocale	unicode/urename.h	1074;"	d
umsg_toPattern	unicode/urename.h	1075;"	d
umsg_vformat	unicode/urename.h	1076;"	d
umsg_vparse	unicode/urename.h	1077;"	d
umtx_atomic_dec	umutex.c	/^umtx_atomic_dec(int32_t *p) {$/;"	f	signature:(int32_t *p)
umtx_atomic_dec	umutex.h	/^U_CAPI int32_t U_EXPORT2 umtx_atomic_dec(int32_t *);$/;"	p	signature:(int32_t *)
umtx_atomic_dec	unicode/urename.h	1078;"	d
umtx_atomic_inc	umutex.c	/^umtx_atomic_inc(int32_t *p)  {$/;"	f	signature:(int32_t *p)
umtx_atomic_inc	umutex.h	/^U_CAPI int32_t U_EXPORT2 umtx_atomic_inc(int32_t *);$/;"	p	signature:(int32_t *)
umtx_atomic_inc	unicode/urename.h	1079;"	d
umtx_cleanup	ucln_cmn.h	/^U_CFUNC UBool umtx_cleanup(void);$/;"	p	signature:(void)
umtx_cleanup	umutex.c	/^U_CFUNC UBool umtx_cleanup(void) {$/;"	f	signature:(void)
umtx_cleanup	unicode/urename.h	1080;"	d
umtx_ct	umutex.c	/^static ICUMutex *umtx_ct(ICUMutex *m) {$/;"	f	file:	signature:(ICUMutex *m)
umtx_destroy	umutex.c	/^umtx_destroy(UMTX *mutex) {$/;"	f	signature:(UMTX *mutex)
umtx_destroy	umutex.h	/^U_CAPI void U_EXPORT2 umtx_destroy( UMTX *mutex );$/;"	p	signature:( UMTX *mutex )
umtx_destroy	unicode/urename.h	1081;"	d
umtx_dt	umutex.c	/^static void umtx_dt(ICUMutex *m) {$/;"	f	file:	signature:(ICUMutex *m)
umtx_init	umutex.c	/^umtx_init(UMTX *mutex) {$/;"	f	signature:(UMTX *mutex)
umtx_init	umutex.h	/^U_CAPI void U_EXPORT2 umtx_init   ( UMTX* mutex );$/;"	p	signature:( UMTX* mutex )
umtx_init	unicode/urename.h	1082;"	d
umtx_lock	umutex.c	/^umtx_lock(UMTX *mutex)$/;"	f	signature:(UMTX *mutex)
umtx_lock	umutex.h	/^U_CAPI void U_EXPORT2 umtx_lock   ( UMTX* mutex ); $/;"	p	signature:( UMTX* mutex )
umtx_lock	unicode/urename.h	1083;"	d
umtx_unlock	umutex.c	/^umtx_unlock(UMTX* mutex)$/;"	f	signature:(UMTX* mutex)
umtx_unlock	umutex.h	/^U_CAPI void U_EXPORT2 umtx_unlock ( UMTX* mutex );$/;"	p	signature:( UMTX* mutex )
umtx_unlock	unicode/urename.h	1084;"	d
unBogus	unicode/unistr.h	/^  void unBogus();$/;"	p	class:UnicodeString	access:private	signature:()
unBogus	unistr.cpp	/^UnicodeString::unBogus() {$/;"	f	class:UnicodeString	signature:()
unames_cleanup	unames.c	/^static UBool U_CALLCONV unames_cleanup(void)$/;"	f	file:	signature:(void)
unescape	unicode/unistr.h	/^  UnicodeString unescape() const;$/;"	p	class:UnicodeString	access:public	signature:() const
unescape	unistr.cpp	/^UnicodeString UnicodeString::unescape() const {$/;"	f	class:UnicodeString	signature:() const
unescapeAt	unicode/unistr.h	/^  UChar32 unescapeAt(int32_t &offset) const;$/;"	p	class:UnicodeString	access:public	signature:(int32_t &offset) const
unescapeAt	unistr.cpp	/^UChar32 UnicodeString::unescapeAt(int32_t &offset) const {$/;"	f	class:UnicodeString	signature:(int32_t &offset) const
unext	unicode/strenum.h	/^    virtual const UChar* unext(int32_t *resultLength, UErrorCode& status);$/;"	p	class:StringEnumeration	access:public	signature:(int32_t *resultLength, UErrorCode& status)
unext	ustrenum.cpp	/^StringEnumeration::unext(int32_t *resultLength, UErrorCode &status) {$/;"	f	class:StringEnumeration	signature:(int32_t *resultLength, UErrorCode &status)
unfold	ucase.c	/^    const UChar *unfold;$/;"	m	struct:UCaseProps	file:	access:public
uni32Singleton	uniset_props.cpp	/^STATIC_SIMPLE_SINGLETON(uni32Singleton);$/;"	v
uniEndRange	ucnv_lmb.c	/^   const UChar uniEndRange;$/;"	m	struct:_UniLMBCSGrpMap	file:	access:public
uniLang	ucnvisci.c	/^    UniLang uniLang;$/;"	m	struct:LookupDataStruct	file:	access:public
uniStartRange	ucnv_lmb.c	/^   const UChar uniStartRange;$/;"	m	struct:_UniLMBCSGrpMap	file:	access:public
unicodeCodeUnits	ucnvmbcs.h	/^    const uint16_t *unicodeCodeUnits\/*[countUnicodeResults]*\/;$/;"	m	struct:UConverterMBCSTable	access:public
unicodeMask	ucnv_bld.h	/^    uint8_t unicodeMask;            \/* +79: 1  bit 0: has supplementary  bit 1: has single surrogates *\/$/;"	m	struct:UConverterStaticData	access:public
unicodeMask	ucnvmbcs.h	/^    uint8_t outputType, unicodeMask;$/;"	m	struct:UConverterMBCSTable	access:public
uniset_getUnicode32Instance	unicode/urename.h	1085;"	d
uniset_getUnicode32Instance	uniset_props.cpp	/^uniset_getUnicode32Instance(UErrorCode &errorCode) {$/;"	f	signature:(UErrorCode &errorCode)
uniset_getUnicode32Instance	uprops.h	/^uniset_getUnicode32Instance(UErrorCode &errorCode);$/;"	p	signature:(UErrorCode &errorCode)
unistr	unicode/strenum.h	/^    UnicodeString unistr;$/;"	m	class:StringEnumeration	access:protected
unistrFuncs	utext.cpp	/^static const struct UTextFuncs unistrFuncs = $/;"	v	typeref:struct:UTextFuncs	file:
unistrTextAccess	utext.cpp	/^unistrTextAccess(UText *ut, int64_t index, UBool  forward) {$/;"	f	file:	signature:(UText *ut, int64_t index, UBool forward)
unistrTextClone	utext.cpp	/^unistrTextClone(UText *dest, const UText *src, UBool deep, UErrorCode *status) {$/;"	f	file:	signature:(UText *dest, const UText *src, UBool deep, UErrorCode *status)
unistrTextClose	utext.cpp	/^unistrTextClose(UText *ut) {$/;"	f	file:	signature:(UText *ut)
unistrTextCopy	utext.cpp	/^unistrTextCopy(UText *ut,$/;"	f	file:	signature:(UText *ut, int64_t start, int64_t limit, int64_t destIndex, UBool move, UErrorCode *pErrorCode)
unistrTextExtract	utext.cpp	/^unistrTextExtract(UText *t,$/;"	f	file:	signature:(UText *t, int64_t start, int64_t limit, UChar *dest, int32_t destCapacity, UErrorCode *pErrorCode)
unistrTextLength	utext.cpp	/^unistrTextLength(UText *t) {$/;"	f	file:	signature:(UText *t)
unistrTextReplace	utext.cpp	/^unistrTextReplace(UText *ut,$/;"	f	file:	signature:(UText *ut, int64_t start, int64_t limit, const UChar *src, int32_t length, UErrorCode *pErrorCode)
unknownLanguage	loclikely.cpp	/^static const char* const unknownLanguage = "und";$/;"	v	file:
unknownRegion	loclikely.cpp	/^static const char* const unknownRegion = "ZZ";$/;"	v	file:
unknownScript	loclikely.cpp	/^static const char* const unknownScript = "Zzzz";$/;"	v	file:
unload	ucnv_cnv.h	/^    UConverterUnload unload;$/;"	m	struct:UConverterImpl	access:public
unorm2_append	normalizer2.cpp	/^unorm2_append(const UNormalizer2 *norm2,$/;"	f	signature:(const UNormalizer2 *norm2, UChar *first, int32_t firstLength, int32_t firstCapacity, const UChar *second, int32_t secondLength, UErrorCode *pErrorCode)
unorm2_append	unicode/unorm2.h	/^unorm2_append(const UNormalizer2 *norm2,$/;"	p	signature:(const UNormalizer2 *norm2, UChar *first, int32_t firstLength, int32_t firstCapacity, const UChar *second, int32_t secondLength, UErrorCode *pErrorCode)
unorm2_append	unicode/urename.h	1086;"	d
unorm2_close	normalizer2.cpp	/^unorm2_close(UNormalizer2 *norm2) {$/;"	f	signature:(UNormalizer2 *norm2)
unorm2_close	unicode/unorm2.h	/^unorm2_close(UNormalizer2 *norm2);$/;"	p	signature:(UNormalizer2 *norm2)
unorm2_close	unicode/urename.h	1087;"	d
unorm2_getDecomposition	normalizer2.cpp	/^unorm2_getDecomposition(const UNormalizer2 *norm2,$/;"	f	signature:(const UNormalizer2 *norm2, UChar32 c, UChar *decomposition, int32_t capacity, UErrorCode *pErrorCode)
unorm2_getDecomposition	unicode/udraft.h	40;"	d
unorm2_getDecomposition	unicode/unorm2.h	/^unorm2_getDecomposition(const UNormalizer2 *norm2,$/;"	p	signature:(const UNormalizer2 *norm2, UChar32 c, UChar *decomposition, int32_t capacity, UErrorCode *pErrorCode)
unorm2_getDecomposition	unicode/urename.h	1088;"	d
unorm2_getDecomposition_4_6	unicode/udraft.h	70;"	d
unorm2_getInstance	normalizer2.cpp	/^unorm2_getInstance(const char *packageName,$/;"	f	signature:(const char *packageName, const char *name, UNormalization2Mode mode, UErrorCode *pErrorCode)
unorm2_getInstance	unicode/unorm2.h	/^unorm2_getInstance(const char *packageName,$/;"	p	signature:(const char *packageName, const char *name, UNormalization2Mode mode, UErrorCode *pErrorCode)
unorm2_getInstance	unicode/urename.h	1089;"	d
unorm2_hasBoundaryAfter	normalizer2.cpp	/^unorm2_hasBoundaryAfter(const UNormalizer2 *norm2, UChar32 c) {$/;"	f	signature:(const UNormalizer2 *norm2, UChar32 c)
unorm2_hasBoundaryAfter	unicode/unorm2.h	/^unorm2_hasBoundaryAfter(const UNormalizer2 *norm2, UChar32 c);$/;"	p	signature:(const UNormalizer2 *norm2, UChar32 c)
unorm2_hasBoundaryAfter	unicode/urename.h	1090;"	d
unorm2_hasBoundaryBefore	normalizer2.cpp	/^unorm2_hasBoundaryBefore(const UNormalizer2 *norm2, UChar32 c) {$/;"	f	signature:(const UNormalizer2 *norm2, UChar32 c)
unorm2_hasBoundaryBefore	unicode/unorm2.h	/^unorm2_hasBoundaryBefore(const UNormalizer2 *norm2, UChar32 c);$/;"	p	signature:(const UNormalizer2 *norm2, UChar32 c)
unorm2_hasBoundaryBefore	unicode/urename.h	1091;"	d
unorm2_isInert	normalizer2.cpp	/^unorm2_isInert(const UNormalizer2 *norm2, UChar32 c) {$/;"	f	signature:(const UNormalizer2 *norm2, UChar32 c)
unorm2_isInert	unicode/unorm2.h	/^unorm2_isInert(const UNormalizer2 *norm2, UChar32 c);$/;"	p	signature:(const UNormalizer2 *norm2, UChar32 c)
unorm2_isInert	unicode/urename.h	1092;"	d
unorm2_isNormalized	normalizer2.cpp	/^unorm2_isNormalized(const UNormalizer2 *norm2,$/;"	f	signature:(const UNormalizer2 *norm2, const UChar *s, int32_t length, UErrorCode *pErrorCode)
unorm2_isNormalized	unicode/unorm2.h	/^unorm2_isNormalized(const UNormalizer2 *norm2,$/;"	p	signature:(const UNormalizer2 *norm2, const UChar *s, int32_t length, UErrorCode *pErrorCode)
unorm2_isNormalized	unicode/urename.h	1093;"	d
unorm2_normalize	normalizer2.cpp	/^unorm2_normalize(const UNormalizer2 *norm2,$/;"	f	signature:(const UNormalizer2 *norm2, const UChar *src, int32_t length, UChar *dest, int32_t capacity, UErrorCode *pErrorCode)
unorm2_normalize	unicode/unorm2.h	/^unorm2_normalize(const UNormalizer2 *norm2,$/;"	p	signature:(const UNormalizer2 *norm2, const UChar *src, int32_t length, UChar *dest, int32_t capacity, UErrorCode *pErrorCode)
unorm2_normalize	unicode/urename.h	1094;"	d
unorm2_normalizeSecondAndAppend	normalizer2.cpp	/^unorm2_normalizeSecondAndAppend(const UNormalizer2 *norm2,$/;"	f	signature:(const UNormalizer2 *norm2, UChar *first, int32_t firstLength, int32_t firstCapacity, const UChar *second, int32_t secondLength, UErrorCode *pErrorCode)
unorm2_normalizeSecondAndAppend	unicode/unorm2.h	/^unorm2_normalizeSecondAndAppend(const UNormalizer2 *norm2,$/;"	p	signature:(const UNormalizer2 *norm2, UChar *first, int32_t firstLength, int32_t firstCapacity, const UChar *second, int32_t secondLength, UErrorCode *pErrorCode)
unorm2_normalizeSecondAndAppend	unicode/urename.h	1095;"	d
unorm2_openFiltered	filterednormalizer2.cpp	/^unorm2_openFiltered(const UNormalizer2 *norm2, const USet *filterSet, UErrorCode *pErrorCode) {$/;"	f	signature:(const UNormalizer2 *norm2, const USet *filterSet, UErrorCode *pErrorCode)
unorm2_openFiltered	unicode/unorm2.h	/^unorm2_openFiltered(const UNormalizer2 *norm2, const USet *filterSet, UErrorCode *pErrorCode);$/;"	p	signature:(const UNormalizer2 *norm2, const USet *filterSet, UErrorCode *pErrorCode)
unorm2_openFiltered	unicode/urename.h	1096;"	d
unorm2_quickCheck	normalizer2.cpp	/^unorm2_quickCheck(const UNormalizer2 *norm2,$/;"	f	signature:(const UNormalizer2 *norm2, const UChar *s, int32_t length, UErrorCode *pErrorCode)
unorm2_quickCheck	unicode/unorm2.h	/^unorm2_quickCheck(const UNormalizer2 *norm2,$/;"	p	signature:(const UNormalizer2 *norm2, const UChar *s, int32_t length, UErrorCode *pErrorCode)
unorm2_quickCheck	unicode/urename.h	1097;"	d
unorm2_spanQuickCheckYes	normalizer2.cpp	/^unorm2_spanQuickCheckYes(const UNormalizer2 *norm2,$/;"	f	signature:(const UNormalizer2 *norm2, const UChar *s, int32_t length, UErrorCode *pErrorCode)
unorm2_spanQuickCheckYes	unicode/unorm2.h	/^unorm2_spanQuickCheckYes(const UNormalizer2 *norm2,$/;"	p	signature:(const UNormalizer2 *norm2, const UChar *s, int32_t length, UErrorCode *pErrorCode)
unorm2_spanQuickCheckYes	unicode/urename.h	1098;"	d
unorm2_swap	normalizer2impl.cpp	/^unorm2_swap(const UDataSwapper *ds,$/;"	f	signature:(const UDataSwapper *ds, const void *inData, int32_t length, void *outData, UErrorCode *pErrorCode)
unorm2_swap	normalizer2impl.h	/^unorm2_swap(const UDataSwapper *ds,$/;"	p	signature:(const UDataSwapper *ds, const void *inData, int32_t length, void *outData, UErrorCode *pErrorCode)
unorm2_swap	unicode/urename.h	1099;"	d
unormIterator	unorm_it.c	/^static const UCharIterator unormIterator={$/;"	v	file:
unormIteratorCurrent	unorm_it.c	/^unormIteratorCurrent(UCharIterator *api) {$/;"	f	file:	signature:(UCharIterator *api)
unormIteratorGetIndex	unorm_it.c	/^unormIteratorGetIndex(UCharIterator *api, UCharIteratorOrigin origin) {$/;"	f	file:	signature:(UCharIterator *api, UCharIteratorOrigin origin)
unormIteratorGetState	unorm_it.c	/^unormIteratorGetState(const UCharIterator *api) {$/;"	f	file:	signature:(const UCharIterator *api)
unormIteratorHasNext	unorm_it.c	/^unormIteratorHasNext(UCharIterator *api) {$/;"	f	file:	signature:(UCharIterator *api)
unormIteratorHasPrevious	unorm_it.c	/^unormIteratorHasPrevious(UCharIterator *api) {$/;"	f	file:	signature:(UCharIterator *api)
unormIteratorMove	unorm_it.c	/^unormIteratorMove(UCharIterator *api, int32_t delta, UCharIteratorOrigin origin) {$/;"	f	file:	signature:(UCharIterator *api, int32_t delta, UCharIteratorOrigin origin)
unormIteratorNext	unorm_it.c	/^unormIteratorNext(UCharIterator *api) {$/;"	f	file:	signature:(UCharIterator *api)
unormIteratorPrevious	unorm_it.c	/^unormIteratorPrevious(UCharIterator *api) {$/;"	f	file:	signature:(UCharIterator *api)
unormIteratorSetState	unorm_it.c	/^unormIteratorSetState(UCharIterator *api, uint32_t state, UErrorCode *pErrorCode) {$/;"	f	file:	signature:(UCharIterator *api, uint32_t state, UErrorCode *pErrorCode)
unorm_closeIter	unicode/urename.h	1100;"	d
unorm_closeIter	unorm_it.c	/^unorm_closeIter(UNormIterator *uni) {$/;"	f	signature:(UNormIterator *uni)
unorm_closeIter	unorm_it.h	/^unorm_closeIter(UNormIterator *uni);$/;"	p	signature:(UNormIterator *uni)
unorm_cmpEquivFold	unormcmp.cpp	/^unorm_cmpEquivFold(const UChar *s1, int32_t length1,$/;"	f	file:	signature:(const UChar *s1, int32_t length1, const UChar *s2, int32_t length2, uint32_t options, UErrorCode *pErrorCode)
unorm_compare	unicode/unorm.h	/^unorm_compare(const UChar *s1, int32_t length1,$/;"	p	signature:(const UChar *s1, int32_t length1, const UChar *s2, int32_t length2, uint32_t options, UErrorCode *pErrorCode)
unorm_compare	unicode/urename.h	1101;"	d
unorm_compare	unormcmp.cpp	/^unorm_compare(const UChar *s1, int32_t length1,$/;"	f	signature:(const UChar *s1, int32_t length1, const UChar *s2, int32_t length2, uint32_t options, UErrorCode *pErrorCode)
unorm_concatenate	unicode/unorm.h	/^unorm_concatenate(const UChar *left, int32_t leftLength,$/;"	p	signature:(const UChar *left, int32_t leftLength, const UChar *right, int32_t rightLength, UChar *dest, int32_t destCapacity, UNormalizationMode mode, int32_t options, UErrorCode *pErrorCode)
unorm_concatenate	unicode/urename.h	1102;"	d
unorm_concatenate	unorm.cpp	/^unorm_concatenate(const UChar *left, int32_t leftLength,$/;"	f	signature:(const UChar *left, int32_t leftLength, const UChar *right, int32_t rightLength, UChar *dest, int32_t destCapacity, UNormalizationMode mode, int32_t options, UErrorCode *pErrorCode)
unorm_getFCD16	normalizer2impl.h	/^unorm_getFCD16(const uint16_t *fcdTrieIndex, UChar c) {$/;"	f	signature:(const uint16_t *fcdTrieIndex, UChar c)
unorm_getFCDTrieIndex	normalizer2.cpp	/^unorm_getFCDTrieIndex(UChar32 &fcdHighStart, UErrorCode *pErrorCode) {$/;"	f	signature:(UChar32 &fcdHighStart, UErrorCode *pErrorCode)
unorm_getFCDTrieIndex	normalizer2impl.h	/^unorm_getFCDTrieIndex(UChar32 &fcdHighStart, UErrorCode *pErrorCode);$/;"	p	signature:(UChar32 &fcdHighStart, UErrorCode *pErrorCode)
unorm_getFCDTrieIndex	unicode/urename.h	1103;"	d
unorm_getQuickCheck	normalizer2.cpp	/^unorm_getQuickCheck(UChar32 c, UNormalizationMode mode) {$/;"	f	signature:(UChar32 c, UNormalizationMode mode)
unorm_getQuickCheck	normalizer2impl.h	/^unorm_getQuickCheck(UChar32 c, UNormalizationMode mode);$/;"	p	signature:(UChar32 c, UNormalizationMode mode)
unorm_getQuickCheck	unicode/urename.h	1104;"	d
unorm_isNormalized	unicode/unorm.h	/^unorm_isNormalized(const UChar *src, int32_t srcLength,$/;"	p	signature:(const UChar *src, int32_t srcLength, UNormalizationMode mode, UErrorCode *pErrorCode)
unorm_isNormalized	unicode/urename.h	1105;"	d
unorm_isNormalized	unorm.cpp	/^unorm_isNormalized(const UChar *src, int32_t srcLength,$/;"	f	signature:(const UChar *src, int32_t srcLength, UNormalizationMode mode, UErrorCode *pErrorCode)
unorm_isNormalizedWithOptions	unicode/unorm.h	/^unorm_isNormalizedWithOptions(const UChar *src, int32_t srcLength,$/;"	p	signature:(const UChar *src, int32_t srcLength, UNormalizationMode mode, int32_t options, UErrorCode *pErrorCode)
unorm_isNormalizedWithOptions	unicode/urename.h	1106;"	d
unorm_isNormalizedWithOptions	unorm.cpp	/^unorm_isNormalizedWithOptions(const UChar *src, int32_t srcLength,$/;"	f	signature:(const UChar *src, int32_t srcLength, UNormalizationMode mode, int32_t options, UErrorCode *pErrorCode)
unorm_iterate	unorm.cpp	/^unorm_iterate(UCharIterator *src, UBool forward,$/;"	f	file:	signature:(UCharIterator *src, UBool forward, UChar *dest, int32_t destCapacity, UNormalizationMode mode, int32_t options, UBool doNormalize, UBool *pNeededToNormalize, UErrorCode *pErrorCode)
unorm_next	unicode/unorm.h	/^unorm_next(UCharIterator *src,$/;"	p	signature:(UCharIterator *src, UChar *dest, int32_t destCapacity, UNormalizationMode mode, int32_t options, UBool doNormalize, UBool *pNeededToNormalize, UErrorCode *pErrorCode)
unorm_next	unicode/urename.h	1107;"	d
unorm_next	unorm.cpp	/^unorm_next(UCharIterator *src,$/;"	f	signature:(UCharIterator *src, UChar *dest, int32_t destCapacity, UNormalizationMode mode, int32_t options, UBool doNormalize, UBool *pNeededToNormalize, UErrorCode *pErrorCode)
unorm_nextFCD16	normalizer2impl.h	/^unorm_nextFCD16(const uint16_t *fcdTrieIndex, UChar32 fcdHighStart,$/;"	f	signature:(const uint16_t *fcdTrieIndex, UChar32 fcdHighStart, const UChar *&s, const UChar *limit)
unorm_normalize	unicode/unorm.h	/^unorm_normalize(const UChar *source, int32_t sourceLength,$/;"	p	signature:(const UChar *source, int32_t sourceLength, UNormalizationMode mode, int32_t options, UChar *result, int32_t resultLength, UErrorCode *status)
unorm_normalize	unicode/urename.h	1108;"	d
unorm_normalize	unorm.cpp	/^unorm_normalize(const UChar *src, int32_t srcLength,$/;"	f	signature:(const UChar *src, int32_t srcLength, UNormalizationMode mode, int32_t options, UChar *dest, int32_t destCapacity, UErrorCode *pErrorCode)
unorm_openIter	unicode/urename.h	1109;"	d
unorm_openIter	unorm_it.c	/^unorm_openIter(void *stackMem, int32_t stackMemSize, UErrorCode *pErrorCode) {$/;"	f	signature:(void *stackMem, int32_t stackMemSize, UErrorCode *pErrorCode)
unorm_openIter	unorm_it.h	/^unorm_openIter(void *stackMem, int32_t stackMemSize, UErrorCode *pErrorCode);$/;"	p	signature:(void *stackMem, int32_t stackMemSize, UErrorCode *pErrorCode)
unorm_prevFCD16	normalizer2impl.h	/^unorm_prevFCD16(const uint16_t *fcdTrieIndex, UChar32 fcdHighStart,$/;"	f	signature:(const uint16_t *fcdTrieIndex, UChar32 fcdHighStart, const UChar *start, const UChar *&s)
unorm_previous	unicode/unorm.h	/^unorm_previous(UCharIterator *src,$/;"	p	signature:(UCharIterator *src, UChar *dest, int32_t destCapacity, UNormalizationMode mode, int32_t options, UBool doNormalize, UBool *pNeededToNormalize, UErrorCode *pErrorCode)
unorm_previous	unicode/urename.h	1110;"	d
unorm_previous	unorm.cpp	/^unorm_previous(UCharIterator *src,$/;"	f	signature:(UCharIterator *src, UChar *dest, int32_t destCapacity, UNormalizationMode mode, int32_t options, UBool doNormalize, UBool *pNeededToNormalize, UErrorCode *pErrorCode)
unorm_quickCheck	unicode/unorm.h	/^unorm_quickCheck(const UChar *source, int32_t sourcelength,$/;"	p	signature:(const UChar *source, int32_t sourcelength, UNormalizationMode mode, UErrorCode *status)
unorm_quickCheck	unicode/urename.h	1111;"	d
unorm_quickCheck	unorm.cpp	/^unorm_quickCheck(const UChar *src,$/;"	f	signature:(const UChar *src, int32_t srcLength, UNormalizationMode mode, UErrorCode *pErrorCode)
unorm_quickCheckWithOptions	unicode/unorm.h	/^unorm_quickCheckWithOptions(const UChar *src, int32_t srcLength, $/;"	p	signature:(const UChar *src, int32_t srcLength, UNormalizationMode mode, int32_t options, UErrorCode *pErrorCode)
unorm_quickCheckWithOptions	unicode/urename.h	1112;"	d
unorm_quickCheckWithOptions	unorm.cpp	/^unorm_quickCheckWithOptions(const UChar *src, int32_t srcLength, $/;"	f	signature:(const UChar *src, int32_t srcLength, UNormalizationMode mode, int32_t options, UErrorCode *pErrorCode)
unorm_setIter	unicode/urename.h	1113;"	d
unorm_setIter	unorm_it.c	/^unorm_setIter(UNormIterator *uni, UCharIterator *iter, UNormalizationMode mode, UErrorCode *pErrorCode) {$/;"	f	signature:(UNormIterator *uni, UCharIterator *iter, UNormalizationMode mode, UErrorCode *pErrorCode)
unorm_setIter	unorm_it.h	/^unorm_setIter(UNormIterator *uni, UCharIterator *iter, UNormalizationMode mode, UErrorCode *pErrorCode);$/;"	p	signature:(UNormIterator *uni, UCharIterator *iter, UNormalizationMode mode, UErrorCode *pErrorCode)
unorm_swap	unormimp.h	/^unorm_swap(const UDataSwapper *ds,$/;"	p	signature:(const UDataSwapper *ds, const void *inData, int32_t length, void *outData, UErrorCode *pErrorCode)
unpackHorizontalArray	triedict.cpp	/^unpackHorizontalArray( const CompactTrieHeader *header, const CompactTrieHorizontalEntry *array,$/;"	f	file:	signature:( const CompactTrieHeader *header, const CompactTrieHorizontalEntry *array, int low, int high, UErrorCode &status )
unpackOneNode	triedict.cpp	/^unpackOneNode( const CompactTrieHeader *header, const CompactTrieNode *node, UErrorCode &status ) {$/;"	f	file:	signature:( const CompactTrieHeader *header, const CompactTrieNode *node, UErrorCode &status )
unpackOneNode	triedict.cpp	/^unpackOneNode( const CompactTrieHeader *header, const CompactTrieNode *node, UErrorCode &status );$/;"	p	file:	signature:( const CompactTrieHeader *header, const CompactTrieNode *node, UErrorCode &status )
unref	serv.cpp	/^    CacheEntry* unref() {$/;"	f	class:CacheEntry	access:public	signature:()
unregister	brkiter.cpp	/^BreakIterator::unregister(URegistryKey key, UErrorCode& status)$/;"	f	class:BreakIterator	signature:(URegistryKey key, UErrorCode& status)
unregister	serv.cpp	/^ICUService::unregister(URegistryKey rkey, UErrorCode& status) $/;"	f	class:ICUService	signature:(URegistryKey rkey, UErrorCode& status)
untaggedConvArray	ucnv_io.h	/^    const uint16_t *untaggedConvArray;$/;"	m	struct:UConverterAlias	access:public
untaggedConvArrayIndex	ucnv_io.c	/^    untaggedConvArrayIndex=4,$/;"	e	enum:__anon128	file:
untaggedConvArraySize	ucnv_io.h	/^    uint32_t untaggedConvArraySize;$/;"	m	struct:UConverterAlias	access:public
unum_applyPattern	unicode/urename.h	1114;"	d
unum_clone	unicode/urename.h	1115;"	d
unum_close	unicode/urename.h	1116;"	d
unum_countAvailable	unicode/urename.h	1117;"	d
unum_format	unicode/urename.h	1118;"	d
unum_formatDecimal	unicode/urename.h	1119;"	d
unum_formatDouble	unicode/urename.h	1120;"	d
unum_formatDoubleCurrency	unicode/urename.h	1121;"	d
unum_formatInt64	unicode/urename.h	1122;"	d
unum_getAttribute	unicode/urename.h	1123;"	d
unum_getAvailable	unicode/urename.h	1124;"	d
unum_getDoubleAttribute	unicode/urename.h	1125;"	d
unum_getLocaleByType	unicode/urename.h	1126;"	d
unum_getSymbol	unicode/urename.h	1127;"	d
unum_getTextAttribute	unicode/urename.h	1128;"	d
unum_open	unicode/urename.h	1129;"	d
unum_parse	unicode/urename.h	1130;"	d
unum_parseDecimal	unicode/urename.h	1131;"	d
unum_parseDouble	unicode/urename.h	1132;"	d
unum_parseDoubleCurrency	unicode/urename.h	1133;"	d
unum_parseInt64	unicode/urename.h	1134;"	d
unum_setAttribute	unicode/urename.h	1135;"	d
unum_setDoubleAttribute	unicode/urename.h	1136;"	d
unum_setSymbol	unicode/urename.h	1137;"	d
unum_setTextAttribute	unicode/urename.h	1138;"	d
unum_toPattern	unicode/urename.h	1139;"	d
upToDate	servls.cpp	/^    UBool upToDate(UErrorCode& status) const {$/;"	f	class:ServiceEnumeration	access:public	signature:(UErrorCode& status) const
updateVisibleIDs	serv.cpp	/^SimpleFactory::updateVisibleIDs(Hashtable& result, UErrorCode& status) const $/;"	f	class:SimpleFactory	signature:(Hashtable& result, UErrorCode& status) const
updateVisibleIDs	servlkf.cpp	/^LocaleKeyFactory::updateVisibleIDs(Hashtable& result, UErrorCode& status) const {$/;"	f	class:LocaleKeyFactory	signature:(Hashtable& result, UErrorCode& status) const
updateVisibleIDs	servslkf.cpp	/^SimpleLocaleKeyFactory::updateVisibleIDs(Hashtable& result, UErrorCode& status) const$/;"	f	class:SimpleLocaleKeyFactory	signature:(Hashtable& result, UErrorCode& status) const
uplug_allocateEmptyPlug	icuplug.c	/^static UPlugData *uplug_allocateEmptyPlug(UErrorCode *status)$/;"	f	file:	signature:(UErrorCode *status)
uplug_allocatePlug	icuplug.c	/^static UPlugData *uplug_allocatePlug(UPlugEntrypoint *entrypoint, const char *config, void *lib, const char *symName,$/;"	f	file:	signature:(UPlugEntrypoint *entrypoint, const char *config, void *lib, const char *symName, UErrorCode *status)
uplug_callPlug	icuplug.c	/^static void uplug_callPlug(UPlugData *plug, UPlugReason reason, UErrorCode *status) {$/;"	f	file:	signature:(UPlugData *plug, UPlugReason reason, UErrorCode *status)
uplug_cleanup	icuplug.c	/^static UBool U_CALLCONV uplug_cleanup(void)$/;"	f	file:	signature:(void)
uplug_closeLibrary	icuplug.c	/^uplug_closeLibrary(void *lib, UErrorCode *status) {$/;"	f	signature:(void *lib, UErrorCode *status)
uplug_closeLibrary	icuplugimp.h	/^uplug_closeLibrary(void *lib, UErrorCode *status);$/;"	p	signature:(void *lib, UErrorCode *status)
uplug_closeLibrary	unicode/urename.h	1140;"	d
uplug_deallocatePlug	icuplug.c	/^static void uplug_deallocatePlug(UPlugData *plug, UErrorCode *status) {$/;"	f	file:	signature:(UPlugData *plug, UErrorCode *status)
uplug_doUnloadPlug	icuplug.c	/^static void uplug_doUnloadPlug(UPlugData *plugToRemove, UErrorCode *status) {$/;"	f	file:	signature:(UPlugData *plugToRemove, UErrorCode *status)
uplug_findLibrary	icuplug.c	/^uplug_findLibrary(void *lib, UErrorCode *status) {$/;"	f	signature:(void *lib, UErrorCode *status)
uplug_findLibrary	icuplugimp.h	/^uplug_findLibrary(void *lib, UErrorCode *status);$/;"	p	signature:(void *lib, UErrorCode *status)
uplug_findLibrary	unicode/urename.h	1141;"	d
uplug_getConfiguration	icuplug.c	/^uplug_getConfiguration(UPlugData *data) {$/;"	f	signature:(UPlugData *data)
uplug_getConfiguration	unicode/icuplug.h	/^uplug_getConfiguration(UPlugData *plug);$/;"	p	signature:(UPlugData *plug)
uplug_getConfiguration	unicode/uintrnal.h	106;"	d
uplug_getConfiguration	unicode/urename.h	1142;"	d
uplug_getConfiguration_4_6	unicode/uintrnal.h	217;"	d
uplug_getContext	icuplug.c	/^uplug_getContext(UPlugData *data) {$/;"	f	signature:(UPlugData *data)
uplug_getContext	unicode/icuplug.h	/^uplug_getContext(UPlugData *plug);$/;"	p	signature:(UPlugData *plug)
uplug_getContext	unicode/uintrnal.h	107;"	d
uplug_getContext	unicode/urename.h	1143;"	d
uplug_getContext_4_6	unicode/uintrnal.h	218;"	d
uplug_getCurrentLevel	icuplug.c	/^U_CAPI UPlugLevel U_EXPORT2 uplug_getCurrentLevel() {$/;"	f
uplug_getCurrentLevel	unicode/icuplug.h	/^uplug_getCurrentLevel(void);$/;"	p	signature:(void)
uplug_getCurrentLevel	unicode/uintrnal.h	108;"	d
uplug_getCurrentLevel	unicode/urename.h	1144;"	d
uplug_getCurrentLevel_4_6	unicode/uintrnal.h	219;"	d
uplug_getLibrary	icuplug.c	/^uplug_getLibrary(UPlugData *data) {$/;"	f	signature:(UPlugData *data)
uplug_getLibrary	unicode/icuplug.h	/^uplug_getLibrary(UPlugData *plug);$/;"	p	signature:(UPlugData *plug)
uplug_getLibrary	unicode/uintrnal.h	109;"	d
uplug_getLibrary	unicode/urename.h	1145;"	d
uplug_getLibraryName	icuplug.c	/^uplug_getLibraryName(UPlugData *data, UErrorCode *status) {$/;"	f	signature:(UPlugData *data, UErrorCode *status)
uplug_getLibraryName	unicode/icuplug.h	/^uplug_getLibraryName(UPlugData *plug, UErrorCode *status);$/;"	p	signature:(UPlugData *plug, UErrorCode *status)
uplug_getLibraryName	unicode/uintrnal.h	110;"	d
uplug_getLibraryName	unicode/urename.h	1146;"	d
uplug_getLibraryName_4_6	unicode/uintrnal.h	221;"	d
uplug_getLibrary_4_6	unicode/uintrnal.h	220;"	d
uplug_getPlugInternal	icuplug.c	/^uplug_getPlugInternal(int32_t n) { $/;"	f	signature:(int32_t n)
uplug_getPlugInternal	icuplugimp.h	/^uplug_getPlugInternal(int32_t n);$/;"	p	signature:(int32_t n)
uplug_getPlugInternal	unicode/urename.h	1147;"	d
uplug_getPlugLevel	icuplug.c	/^uplug_getPlugLevel(UPlugData *data) {$/;"	f	signature:(UPlugData *data)
uplug_getPlugLevel	unicode/icuplug.h	/^uplug_getPlugLevel(UPlugData *plug);$/;"	p	signature:(UPlugData *plug)
uplug_getPlugLevel	unicode/uintrnal.h	111;"	d
uplug_getPlugLevel	unicode/urename.h	1148;"	d
uplug_getPlugLevel_4_6	unicode/uintrnal.h	222;"	d
uplug_getPlugLoadStatus	icuplug.c	/^uplug_getPlugLoadStatus(UPlugData *plug) {$/;"	f	signature:(UPlugData *plug)
uplug_getPlugLoadStatus	unicode/icuplug.h	/^uplug_getPlugLoadStatus(UPlugData *plug); $/;"	p	signature:(UPlugData *plug)
uplug_getPlugLoadStatus	unicode/uintrnal.h	112;"	d
uplug_getPlugLoadStatus	unicode/urename.h	1149;"	d
uplug_getPlugLoadStatus_4_6	unicode/uintrnal.h	223;"	d
uplug_getPlugName	icuplug.c	/^uplug_getPlugName(UPlugData *data) {$/;"	f	signature:(UPlugData *data)
uplug_getPlugName	unicode/icuplug.h	/^uplug_getPlugName(UPlugData *plug);$/;"	p	signature:(UPlugData *plug)
uplug_getPlugName	unicode/uintrnal.h	113;"	d
uplug_getPlugName	unicode/urename.h	1150;"	d
uplug_getPlugName_4_6	unicode/uintrnal.h	224;"	d
uplug_getPluginFile	icuplug.c	/^uplug_getPluginFile() {$/;"	f
uplug_getPluginFile	icuplugimp.h	/^uplug_getPluginFile(void);$/;"	p	signature:(void)
uplug_getPluginFile	unicode/urename.h	1151;"	d
uplug_getSymbolName	icuplug.c	/^uplug_getSymbolName(UPlugData *data) {$/;"	f	signature:(UPlugData *data)
uplug_getSymbolName	unicode/icuplug.h	/^uplug_getSymbolName(UPlugData *plug);$/;"	p	signature:(UPlugData *plug)
uplug_getSymbolName	unicode/uintrnal.h	114;"	d
uplug_getSymbolName	unicode/urename.h	1152;"	d
uplug_getSymbolName_4_6	unicode/uintrnal.h	225;"	d
uplug_init	icuplug.c	/^uplug_init(UErrorCode *status) {$/;"	f	signature:(UErrorCode *status)
uplug_init	icuplugimp.h	/^uplug_init(UErrorCode *status);$/;"	p	signature:(UErrorCode *status)
uplug_init	unicode/urename.h	1153;"	d
uplug_initErrorPlug	icuplug.c	/^uplug_initErrorPlug(const char *libName, const char *sym, const char *config, const char *nameOrError, UErrorCode loadStatus, UErrorCode *status)$/;"	f	file:	signature:(const char *libName, const char *sym, const char *config, const char *nameOrError, UErrorCode loadStatus, UErrorCode *status)
uplug_initPlugFromEntrypointAndLibrary	icuplug.c	/^static UPlugData* uplug_initPlugFromEntrypointAndLibrary(UPlugEntrypoint *entrypoint, const char *config, void *lib, const char *sym,$/;"	f	file:	signature:(UPlugEntrypoint *entrypoint, const char *config, void *lib, const char *sym, UErrorCode *status)
uplug_initPlugFromLibrary	icuplug.c	/^uplug_initPlugFromLibrary(const char *libName, const char *sym, const char *config, UErrorCode *status) {$/;"	f	file:	signature:(const char *libName, const char *sym, const char *config, UErrorCode *status)
uplug_loadPlug	icuplug.c	/^static void uplug_loadPlug(UPlugData *plug, UErrorCode *status) {$/;"	f	file:	signature:(UPlugData *plug, UErrorCode *status)
uplug_loadPlugFromEntrypoint	icuplug.c	/^uplug_loadPlugFromEntrypoint(UPlugEntrypoint *entrypoint, const char *config, UErrorCode *status) {$/;"	f	signature:(UPlugEntrypoint *entrypoint, const char *config, UErrorCode *status)
uplug_loadPlugFromEntrypoint	unicode/icuplug.h	/^uplug_loadPlugFromEntrypoint(UPlugEntrypoint *entrypoint, const char *config, UErrorCode *status);$/;"	p	signature:(UPlugEntrypoint *entrypoint, const char *config, UErrorCode *status)
uplug_loadPlugFromEntrypoint	unicode/uintrnal.h	115;"	d
uplug_loadPlugFromEntrypoint	unicode/urename.h	1154;"	d
uplug_loadPlugFromEntrypoint_4_6	unicode/uintrnal.h	226;"	d
uplug_loadPlugFromLibrary	icuplug.c	/^uplug_loadPlugFromLibrary(const char *libName, const char *sym, const char *config, UErrorCode *status) { $/;"	f	signature:(const char *libName, const char *sym, const char *config, UErrorCode *status)
uplug_loadPlugFromLibrary	unicode/icuplug.h	/^uplug_loadPlugFromLibrary(const char *libName, const char *sym, const char *config, UErrorCode *status);$/;"	p	signature:(const char *libName, const char *sym, const char *config, UErrorCode *status)
uplug_loadPlugFromLibrary	unicode/uintrnal.h	116;"	d
uplug_loadPlugFromLibrary	unicode/urename.h	1155;"	d
uplug_loadPlugFromLibrary_4_6	unicode/uintrnal.h	227;"	d
uplug_loadWaitingPlugs	icuplug.c	/^static void uplug_loadWaitingPlugs(UErrorCode *status) {$/;"	f	file:	signature:(UErrorCode *status)
uplug_nextPlug	icuplug.c	/^uplug_nextPlug(UPlugData *prior) {$/;"	f	signature:(UPlugData *prior)
uplug_nextPlug	unicode/icuplug.h	/^uplug_nextPlug(UPlugData *prior);$/;"	p	signature:(UPlugData *prior)
uplug_nextPlug	unicode/uintrnal.h	117;"	d
uplug_nextPlug	unicode/urename.h	1156;"	d
uplug_nextPlug_4_6	unicode/uintrnal.h	228;"	d
uplug_openLibrary	icuplug.c	/^uplug_openLibrary(const char *libName, UErrorCode *status) {$/;"	f	signature:(const char *libName, UErrorCode *status)
uplug_openLibrary	icuplugimp.h	/^uplug_openLibrary(const char *libName, UErrorCode *status);$/;"	p	signature:(const char *libName, UErrorCode *status)
uplug_openLibrary	unicode/urename.h	1157;"	d
uplug_pluginNumber	icuplug.c	/^static int32_t uplug_pluginNumber(UPlugData* d) {$/;"	f	file:	signature:(UPlugData* d)
uplug_queryPlug	icuplug.c	/^static void uplug_queryPlug(UPlugData *plug, UErrorCode *status) {$/;"	f	file:	signature:(UPlugData *plug, UErrorCode *status)
uplug_removeEntryAt	icuplug.c	/^static int32_t uplug_removeEntryAt(void *list, int32_t listSize, int32_t memberSize, int32_t itemToRemove) {$/;"	f	file:	signature:(void *list, int32_t listSize, int32_t memberSize, int32_t itemToRemove)
uplug_removePlug	icuplug.c	/^uplug_removePlug(UPlugData *plug, UErrorCode *status)  {$/;"	f	signature:(UPlugData *plug, UErrorCode *status)
uplug_removePlug	unicode/icuplug.h	/^uplug_removePlug(UPlugData *plug, UErrorCode *status);$/;"	p	signature:(UPlugData *plug, UErrorCode *status)
uplug_removePlug	unicode/uintrnal.h	118;"	d
uplug_removePlug	unicode/urename.h	1158;"	d
uplug_removePlug_4_6	unicode/uintrnal.h	229;"	d
uplug_setContext	icuplug.c	/^uplug_setContext(UPlugData *data, void *context) {$/;"	f	signature:(UPlugData *data, void *context)
uplug_setContext	unicode/icuplug.h	/^uplug_setContext(UPlugData *plug, void *context);$/;"	p	signature:(UPlugData *plug, void *context)
uplug_setContext	unicode/uintrnal.h	119;"	d
uplug_setContext	unicode/urename.h	1159;"	d
uplug_setContext_4_6	unicode/uintrnal.h	230;"	d
uplug_setPlugLevel	icuplug.c	/^uplug_setPlugLevel(UPlugData *data, UPlugLevel level) {$/;"	f	signature:(UPlugData *data, UPlugLevel level)
uplug_setPlugLevel	unicode/icuplug.h	/^uplug_setPlugLevel(UPlugData *plug, UPlugLevel level);$/;"	p	signature:(UPlugData *plug, UPlugLevel level)
uplug_setPlugLevel	unicode/uintrnal.h	120;"	d
uplug_setPlugLevel	unicode/urename.h	1160;"	d
uplug_setPlugLevel_4_6	unicode/uintrnal.h	231;"	d
uplug_setPlugName	icuplug.c	/^uplug_setPlugName(UPlugData *data, const char *name) {$/;"	f	signature:(UPlugData *data, const char *name)
uplug_setPlugName	unicode/icuplug.h	/^uplug_setPlugName(UPlugData *plug, const char *name);$/;"	p	signature:(UPlugData *plug, const char *name)
uplug_setPlugName	unicode/uintrnal.h	121;"	d
uplug_setPlugName	unicode/urename.h	1161;"	d
uplug_setPlugName_4_6	unicode/uintrnal.h	232;"	d
uplug_setPlugNoUnload	icuplug.c	/^uplug_setPlugNoUnload(UPlugData *data, UBool dontUnload)$/;"	f	signature:(UPlugData *data, UBool dontUnload)
uplug_setPlugNoUnload	unicode/icuplug.h	/^uplug_setPlugNoUnload(UPlugData *plug, UBool dontUnload);$/;"	p	signature:(UPlugData *plug, UBool dontUnload)
uplug_setPlugNoUnload	unicode/uintrnal.h	122;"	d
uplug_setPlugNoUnload	unicode/urename.h	1162;"	d
uplug_setPlugNoUnload_4_6	unicode/uintrnal.h	233;"	d
uplug_unloadPlug	icuplug.c	/^static void uplug_unloadPlug(UPlugData *plug, UErrorCode *status) {$/;"	f	file:	signature:(UPlugData *plug, UErrorCode *status)
upname_compareRows	propname.cpp	/^upname_compareRows(const void *context, const void *left, const void *right) {$/;"	f	file:	signature:(const void *context, const void *left, const void *right)
upname_swap	propname.cpp	/^upname_swap(const UDataSwapper *ds,$/;"	f	signature:(const UDataSwapper *ds, const void *inData, int32_t length, void *outData, UErrorCode *pErrorCode)
upname_swap	propname.h	/^upname_swap(const UDataSwapper *ds,$/;"	p	signature:(const UDataSwapper *ds, const void *inData, int32_t length, void *outData, UErrorCode *pErrorCode)
upname_swap	unicode/urename.h	1163;"	d
uprops_getSource	unicode/urename.h	1164;"	d
uprops_getSource	uprops.cpp	/^uprops_getSource(UProperty which) {$/;"	f	signature:(UProperty which)
uprops_getSource	uprops.h	/^uprops_getSource(UProperty which);$/;"	p	signature:(UProperty which)
uprops_swap	uprops.h	/^uprops_swap(const UDataSwapper *ds,$/;"	p	signature:(const UDataSwapper *ds, const void *inData, int32_t length, void *outData, UErrorCode *pErrorCode)
upropsvec_addPropertyStarts	uchar.c	/^upropsvec_addPropertyStarts(const USetAdder *sa, UErrorCode *pErrorCode) {$/;"	f	signature:(const USetAdder *sa, UErrorCode *pErrorCode)
upropsvec_addPropertyStarts	unicode/urename.h	1165;"	d
upropsvec_addPropertyStarts	uprops.h	/^upropsvec_addPropertyStarts(const USetAdder *sa, UErrorCode *pErrorCode);$/;"	p	signature:(const USetAdder *sa, UErrorCode *pErrorCode)
uprv_UnicodeStringDummy	unistr.cpp	/^static void uprv_UnicodeStringDummy(void) {$/;"	f	file:	signature:(void)
uprv_aestrncpy	uinvchar.c	/^uprv_aestrncpy(uint8_t *dst, const uint8_t *src, int32_t n)$/;"	f	signature:(uint8_t *dst, const uint8_t *src, int32_t n)
uprv_aestrncpy	uinvchar.h	/^uprv_aestrncpy(uint8_t *dst, const uint8_t *src, int32_t n);$/;"	p	signature:(uint8_t *dst, const uint8_t *src, int32_t n)
uprv_aestrncpy	unicode/urename.h	1166;"	d
uprv_arrayCopy	cpputils.h	/^inline void uprv_arrayCopy(const double* src, double* dst, int32_t count)$/;"	f	signature:(const double* src, double* dst, int32_t count)
uprv_arrayCopy	cpputils.h	/^inline void uprv_arrayCopy(const double* src, int32_t srcStart,$/;"	f	signature:(const double* src, int32_t srcStart, double* dst, int32_t dstStart, int32_t count)
uprv_arrayCopy	cpputils.h	/^inline void uprv_arrayCopy(const int16_t* src, int16_t* dst, int32_t count)$/;"	f	signature:(const int16_t* src, int16_t* dst, int32_t count)
uprv_arrayCopy	cpputils.h	/^inline void uprv_arrayCopy(const int16_t* src, int32_t srcStart,$/;"	f	signature:(const int16_t* src, int32_t srcStart, int16_t* dst, int32_t dstStart, int32_t count)
uprv_arrayCopy	cpputils.h	/^inline void uprv_arrayCopy(const int32_t* src, int32_t srcStart,$/;"	f	signature:(const int32_t* src, int32_t srcStart, int32_t* dst, int32_t dstStart, int32_t count)
uprv_arrayCopy	cpputils.h	/^inline void uprv_arrayCopy(const int32_t* src, int32_t* dst, int32_t count)$/;"	f	signature:(const int32_t* src, int32_t* dst, int32_t count)
uprv_arrayCopy	cpputils.h	/^inline void uprv_arrayCopy(const int8_t* src, int32_t srcStart,$/;"	f	signature:(const int8_t* src, int32_t srcStart, int8_t* dst, int32_t dstStart, int32_t count)
uprv_arrayCopy	cpputils.h	/^inline void uprv_arrayCopy(const int8_t* src, int8_t* dst, int32_t count)$/;"	f	signature:(const int8_t* src, int8_t* dst, int32_t count)
uprv_arrayCopy	cpputils.h	/^uprv_arrayCopy(const UChar *src, int32_t srcStart,$/;"	f	signature:(const UChar *src, int32_t srcStart, UChar *dst, int32_t dstStart, int32_t count)
uprv_arrayCopy	cpputils.h	/^uprv_arrayCopy(const U_NAMESPACE_QUALIFIER UnicodeString *src, U_NAMESPACE_QUALIFIER UnicodeString *dst, int32_t count)$/;"	f	signature:(const U_NAMESPACE_QUALIFIER UnicodeString *src, U_NAMESPACE_QUALIFIER UnicodeString *dst, int32_t count)
uprv_arrayCopy	cpputils.h	/^uprv_arrayCopy(const U_NAMESPACE_QUALIFIER UnicodeString *src, int32_t srcStart,$/;"	f	signature:(const U_NAMESPACE_QUALIFIER UnicodeString *src, int32_t srcStart, U_NAMESPACE_QUALIFIER UnicodeString *dst, int32_t dstStart, int32_t count)
uprv_asciiFromEbcdic	udataswp.h	/^uprv_asciiFromEbcdic(const UDataSwapper *ds,$/;"	p	signature:(const UDataSwapper *ds, const void *inData, int32_t length, void *outData, UErrorCode *pErrorCode)
uprv_asciiFromEbcdic	uinvchar.c	/^uprv_asciiFromEbcdic(const UDataSwapper *ds,$/;"	f	signature:(const UDataSwapper *ds, const void *inData, int32_t length, void *outData, UErrorCode *pErrorCode)
uprv_asciiFromEbcdic	unicode/urename.h	1167;"	d
uprv_asciitolower	cstring.c	/^uprv_asciitolower(char c) {$/;"	f	signature:(char c)
uprv_asciitolower	cstring.h	/^uprv_asciitolower(char c);$/;"	p	signature:(char c)
uprv_asciitolower	unicode/urename.h	1168;"	d
uprv_ceil	putil.c	/^uprv_ceil(double x)$/;"	f	signature:(double x)
uprv_ceil	putilimp.h	/^U_INTERNAL double  U_EXPORT2 uprv_ceil(double d);$/;"	p	signature:(double d)
uprv_ceil	unicode/urename.h	1169;"	d
uprv_checkCanGetBuffer	cpputils.h	/^uprv_checkCanGetBuffer(const U_NAMESPACE_QUALIFIER UnicodeString &s, UErrorCode &errorCode) {$/;"	f	signature:(const U_NAMESPACE_QUALIFIER UnicodeString &s, UErrorCode &errorCode)
uprv_cnttab_addContraction	unicode/urename.h	1170;"	d
uprv_cnttab_changeContraction	unicode/urename.h	1171;"	d
uprv_cnttab_changeLastCE	unicode/urename.h	1172;"	d
uprv_cnttab_clone	unicode/urename.h	1173;"	d
uprv_cnttab_close	unicode/urename.h	1174;"	d
uprv_cnttab_constructTable	unicode/urename.h	1175;"	d
uprv_cnttab_findCE	unicode/urename.h	1176;"	d
uprv_cnttab_findCP	unicode/urename.h	1177;"	d
uprv_cnttab_getCE	unicode/urename.h	1178;"	d
uprv_cnttab_insertContraction	unicode/urename.h	1179;"	d
uprv_cnttab_isTailored	unicode/urename.h	1180;"	d
uprv_cnttab_open	unicode/urename.h	1181;"	d
uprv_cnttab_setContraction	unicode/urename.h	1182;"	d
uprv_collIterateAtEnd	unicode/urename.h	1183;"	d
uprv_compareASCIIPropertyNames	propname.cpp	/^uprv_compareASCIIPropertyNames(const char *name1, const char *name2) {$/;"	f	signature:(const char *name1, const char *name2)
uprv_compareASCIIPropertyNames	propname.h	/^uprv_compareASCIIPropertyNames(const char *name1, const char *name2);$/;"	p	signature:(const char *name1, const char *name2)
uprv_compareASCIIPropertyNames	unicode/urename.h	1184;"	d
uprv_compareEBCDICPropertyNames	propname.cpp	/^uprv_compareEBCDICPropertyNames(const char *name1, const char *name2) {$/;"	f	signature:(const char *name1, const char *name2)
uprv_compareEBCDICPropertyNames	propname.h	/^uprv_compareEBCDICPropertyNames(const char *name1, const char *name2);$/;"	p	signature:(const char *name1, const char *name2)
uprv_compareEBCDICPropertyNames	unicode/urename.h	1185;"	d
uprv_compareInvAscii	udataswp.h	/^uprv_compareInvAscii(const UDataSwapper *ds,$/;"	p	signature:(const UDataSwapper *ds, const char *outString, int32_t outLength, const UChar *localString, int32_t localLength)
uprv_compareInvAscii	uinvchar.c	/^uprv_compareInvAscii(const UDataSwapper *ds,$/;"	f	signature:(const UDataSwapper *ds, const char *outString, int32_t outLength, const UChar *localString, int32_t localLength)
uprv_compareInvAscii	unicode/urename.h	1186;"	d
uprv_compareInvCharsAsAscii	uinvchar.h	79;"	d
uprv_compareInvCharsAsAscii	uinvchar.h	81;"	d
uprv_compareInvEbcdic	udataswp.h	/^uprv_compareInvEbcdic(const UDataSwapper *ds,$/;"	p	signature:(const UDataSwapper *ds, const char *outString, int32_t outLength, const UChar *localString, int32_t localLength)
uprv_compareInvEbcdic	uinvchar.c	/^uprv_compareInvEbcdic(const UDataSwapper *ds,$/;"	f	signature:(const UDataSwapper *ds, const char *outString, int32_t outLength, const UChar *localString, int32_t localLength)
uprv_compareInvEbcdic	unicode/urename.h	1187;"	d
uprv_compareInvEbcdicAsAscii	uinvchar.c	/^uprv_compareInvEbcdicAsAscii(const char *s1, const char *s2) {$/;"	f	signature:(const char *s1, const char *s2)
uprv_compareInvEbcdicAsAscii	uinvchar.h	/^uprv_compareInvEbcdicAsAscii(const char *s1, const char *s2);$/;"	p	signature:(const char *s1, const char *s2)
uprv_compareInvEbcdicAsAscii	unicode/urename.h	1188;"	d
uprv_comparePropertyNames	propname.h	56;"	d
uprv_comparePropertyNames	propname.h	58;"	d
uprv_computeDirPath	umapfile.c	/^    static char *uprv_computeDirPath(const char *path, char *pathBuffer)$/;"	f	file:	signature:(const char *path, char *pathBuffer)
uprv_convertToLCID	locmap.c	/^uprv_convertToLCID(const char *langID, const char* posixID, UErrorCode* status)$/;"	f	signature:(const char *langID, const char* posixID, UErrorCode* status)
uprv_convertToLCID	locmap.h	/^U_CAPI uint32_t uprv_convertToLCID(const char *langID, const char* posixID, UErrorCode* status);$/;"	p	signature:(const char *langID, const char* posixID, UErrorCode* status)
uprv_convertToLCID	unicode/urename.h	1189;"	d
uprv_convertToPosix	locmap.c	/^uprv_convertToPosix(uint32_t hostid, UErrorCode* status)$/;"	f	signature:(uint32_t hostid, UErrorCode* status)
uprv_convertToPosix	locmap.h	/^U_CAPI const char *uprv_convertToPosix(uint32_t hostid, UErrorCode* status);$/;"	p	signature:(uint32_t hostid, UErrorCode* status)
uprv_convertToPosix	unicode/urename.h	1190;"	d
uprv_copyArray16	udataswp.c	/^uprv_copyArray16(const UDataSwapper *ds,$/;"	f	file:	signature:(const UDataSwapper *ds, const void *inData, int32_t length, void *outData, UErrorCode *pErrorCode)
uprv_copyArray32	udataswp.c	/^uprv_copyArray32(const UDataSwapper *ds,$/;"	f	file:	signature:(const UDataSwapper *ds, const void *inData, int32_t length, void *outData, UErrorCode *pErrorCode)
uprv_copyAscii	udataswp.h	/^uprv_copyAscii(const UDataSwapper *ds,$/;"	p	signature:(const UDataSwapper *ds, const void *inData, int32_t length, void *outData, UErrorCode *pErrorCode)
uprv_copyAscii	uinvchar.c	/^uprv_copyAscii(const UDataSwapper *ds,$/;"	f	signature:(const UDataSwapper *ds, const void *inData, int32_t length, void *outData, UErrorCode *pErrorCode)
uprv_copyAscii	unicode/urename.h	1191;"	d
uprv_copyEbcdic	udataswp.h	/^uprv_copyEbcdic(const UDataSwapper *ds,$/;"	p	signature:(const UDataSwapper *ds, const void *inData, int32_t length, void *outData, UErrorCode *pErrorCode)
uprv_copyEbcdic	uinvchar.c	/^uprv_copyEbcdic(const UDataSwapper *ds,$/;"	f	signature:(const UDataSwapper *ds, const void *inData, int32_t length, void *outData, UErrorCode *pErrorCode)
uprv_copyEbcdic	unicode/urename.h	1192;"	d
uprv_decContextClearStatus	unicode/urename.h	1193;"	d
uprv_decContextDefault	unicode/urename.h	1194;"	d
uprv_decContextGetRounding	unicode/urename.h	1195;"	d
uprv_decContextGetStatus	unicode/urename.h	1196;"	d
uprv_decContextRestoreStatus	unicode/urename.h	1197;"	d
uprv_decContextSaveStatus	unicode/urename.h	1198;"	d
uprv_decContextSetRounding	unicode/urename.h	1199;"	d
uprv_decContextSetStatus	unicode/urename.h	1200;"	d
uprv_decContextSetStatusFromString	unicode/urename.h	1201;"	d
uprv_decContextSetStatusFromStringQuiet	unicode/urename.h	1202;"	d
uprv_decContextSetStatusQuiet	unicode/urename.h	1203;"	d
uprv_decContextStatusToString	unicode/urename.h	1204;"	d
uprv_decContextTestEndian	unicode/urename.h	1205;"	d
uprv_decContextTestSavedStatus	unicode/urename.h	1206;"	d
uprv_decContextTestStatus	unicode/urename.h	1207;"	d
uprv_decContextZeroStatus	unicode/urename.h	1208;"	d
uprv_decNumberAbs	unicode/urename.h	1209;"	d
uprv_decNumberAdd	unicode/urename.h	1210;"	d
uprv_decNumberAnd	unicode/urename.h	1211;"	d
uprv_decNumberClass	unicode/urename.h	1212;"	d
uprv_decNumberClassToString	unicode/urename.h	1213;"	d
uprv_decNumberCompare	unicode/urename.h	1214;"	d
uprv_decNumberCompareSignal	unicode/urename.h	1215;"	d
uprv_decNumberCompareTotal	unicode/urename.h	1216;"	d
uprv_decNumberCompareTotalMag	unicode/urename.h	1217;"	d
uprv_decNumberCopy	unicode/urename.h	1218;"	d
uprv_decNumberCopyAbs	unicode/urename.h	1219;"	d
uprv_decNumberCopyNegate	unicode/urename.h	1220;"	d
uprv_decNumberCopySign	unicode/urename.h	1221;"	d
uprv_decNumberDivide	unicode/urename.h	1222;"	d
uprv_decNumberDivideInteger	unicode/urename.h	1223;"	d
uprv_decNumberExp	unicode/urename.h	1224;"	d
uprv_decNumberFMA	unicode/urename.h	1225;"	d
uprv_decNumberFromInt32	unicode/urename.h	1226;"	d
uprv_decNumberFromString	unicode/urename.h	1227;"	d
uprv_decNumberFromUInt32	unicode/urename.h	1228;"	d
uprv_decNumberGetBCD	unicode/urename.h	1229;"	d
uprv_decNumberInvert	unicode/urename.h	1230;"	d
uprv_decNumberIsNormal	unicode/urename.h	1231;"	d
uprv_decNumberIsSubnormal	unicode/urename.h	1232;"	d
uprv_decNumberLn	unicode/urename.h	1233;"	d
uprv_decNumberLog10	unicode/urename.h	1234;"	d
uprv_decNumberLogB	unicode/urename.h	1235;"	d
uprv_decNumberMax	unicode/urename.h	1236;"	d
uprv_decNumberMaxMag	unicode/urename.h	1237;"	d
uprv_decNumberMin	unicode/urename.h	1238;"	d
uprv_decNumberMinMag	unicode/urename.h	1239;"	d
uprv_decNumberMinus	unicode/urename.h	1240;"	d
uprv_decNumberMultiply	unicode/urename.h	1241;"	d
uprv_decNumberNextMinus	unicode/urename.h	1242;"	d
uprv_decNumberNextPlus	unicode/urename.h	1243;"	d
uprv_decNumberNextToward	unicode/urename.h	1244;"	d
uprv_decNumberNormalize	unicode/urename.h	1245;"	d
uprv_decNumberOr	unicode/urename.h	1246;"	d
uprv_decNumberPlus	unicode/urename.h	1247;"	d
uprv_decNumberPower	unicode/urename.h	1248;"	d
uprv_decNumberQuantize	unicode/urename.h	1249;"	d
uprv_decNumberReduce	unicode/urename.h	1250;"	d
uprv_decNumberRemainder	unicode/urename.h	1251;"	d
uprv_decNumberRemainderNear	unicode/urename.h	1252;"	d
uprv_decNumberRescale	unicode/urename.h	1253;"	d
uprv_decNumberRotate	unicode/urename.h	1254;"	d
uprv_decNumberSameQuantum	unicode/urename.h	1255;"	d
uprv_decNumberScaleB	unicode/urename.h	1256;"	d
uprv_decNumberSetBCD	unicode/urename.h	1257;"	d
uprv_decNumberShift	unicode/urename.h	1258;"	d
uprv_decNumberSquareRoot	unicode/urename.h	1259;"	d
uprv_decNumberSubtract	unicode/urename.h	1260;"	d
uprv_decNumberToEngString	unicode/urename.h	1261;"	d
uprv_decNumberToInt32	unicode/urename.h	1262;"	d
uprv_decNumberToIntegralExact	unicode/urename.h	1263;"	d
uprv_decNumberToIntegralValue	unicode/urename.h	1264;"	d
uprv_decNumberToString	unicode/urename.h	1265;"	d
uprv_decNumberToUInt32	unicode/urename.h	1266;"	d
uprv_decNumberTrim	unicode/urename.h	1267;"	d
uprv_decNumberVersion	unicode/urename.h	1268;"	d
uprv_decNumberXor	unicode/urename.h	1269;"	d
uprv_decNumberZero	unicode/urename.h	1270;"	d
uprv_delete_collIterate	unicode/urename.h	1271;"	d
uprv_detectWindowsTimeZone	wintz.c	/^uprv_detectWindowsTimeZone() {$/;"	f
uprv_detectWindowsTimeZone	wintz.h	/^uprv_detectWindowsTimeZone();$/;"	p	signature:()
uprv_dl_close	putil.c	/^uprv_dl_close(void *lib, UErrorCode *status) {$/;"	f	signature:(void *lib, UErrorCode *status)
uprv_dl_close	putilimp.h	/^U_INTERNAL void U_EXPORT2 uprv_dl_close( void *lib, UErrorCode *status);$/;"	p	signature:( void *lib, UErrorCode *status)
uprv_dl_close	unicode/urename.h	1272;"	d
uprv_dl_open	putil.c	/^uprv_dl_open(const char *libName, UErrorCode *status) {$/;"	f	signature:(const char *libName, UErrorCode *status)
uprv_dl_open	putilimp.h	/^U_INTERNAL void * U_EXPORT2 uprv_dl_open(const char *libName, UErrorCode *status);$/;"	p	signature:(const char *libName, UErrorCode *status)
uprv_dl_open	unicode/urename.h	1273;"	d
uprv_dl_sym	putil.c	/^uprv_dl_sym(void *lib, const char* sym, UErrorCode *status) {$/;"	f	signature:(void *lib, const char* sym, UErrorCode *status)
uprv_dl_sym	putilimp.h	/^U_INTERNAL void * U_EXPORT2 uprv_dl_sym( void *lib, const char *symbolName, UErrorCode *status);$/;"	p	signature:( void *lib, const char *symbolName, UErrorCode *status)
uprv_dl_sym	unicode/urename.h	1274;"	d
uprv_eastrncpy	uinvchar.c	/^uprv_eastrncpy(uint8_t *dst, const uint8_t *src, int32_t n)$/;"	f	signature:(uint8_t *dst, const uint8_t *src, int32_t n)
uprv_eastrncpy	uinvchar.h	/^uprv_eastrncpy(uint8_t *dst, const uint8_t *src, int32_t n);$/;"	p	signature:(uint8_t *dst, const uint8_t *src, int32_t n)
uprv_eastrncpy	unicode/urename.h	1275;"	d
uprv_ebcdicFromAscii	udataswp.h	/^uprv_ebcdicFromAscii(const UDataSwapper *ds,$/;"	p	signature:(const UDataSwapper *ds, const void *inData, int32_t length, void *outData, UErrorCode *pErrorCode)
uprv_ebcdicFromAscii	uinvchar.c	/^uprv_ebcdicFromAscii(const UDataSwapper *ds,$/;"	f	signature:(const UDataSwapper *ds, const void *inData, int32_t length, void *outData, UErrorCode *pErrorCode)
uprv_ebcdicFromAscii	unicode/urename.h	1276;"	d
uprv_ebcdictolower	cstring.c	/^uprv_ebcdictolower(char c) {$/;"	f	signature:(char c)
uprv_ebcdictolower	cstring.h	/^uprv_ebcdictolower(char c);$/;"	p	signature:(char c)
uprv_ebcdictolower	unicode/urename.h	1277;"	d
uprv_fabs	putil.c	/^uprv_fabs(double x)$/;"	f	signature:(double x)
uprv_fabs	putilimp.h	/^U_INTERNAL double  U_EXPORT2 uprv_fabs(double d);$/;"	p	signature:(double d)
uprv_fabs	unicode/urename.h	1278;"	d
uprv_floor	putil.c	/^uprv_floor(double x)$/;"	f	signature:(double x)
uprv_floor	putilimp.h	/^U_INTERNAL double  U_EXPORT2 uprv_floor(double d);$/;"	p	signature:(double d)
uprv_floor	unicode/urename.h	1279;"	d
uprv_fmax	putil.c	/^uprv_fmax(double x, double y)$/;"	f	signature:(double x, double y)
uprv_fmax	putilimp.h	/^U_INTERNAL double  U_EXPORT2 uprv_fmax(double d, double y);$/;"	p	signature:(double d, double y)
uprv_fmax	unicode/urename.h	1280;"	d
uprv_fmin	putil.c	/^uprv_fmin(double x, double y)$/;"	f	signature:(double x, double y)
uprv_fmin	putilimp.h	/^U_INTERNAL double  U_EXPORT2 uprv_fmin(double d, double y);$/;"	p	signature:(double d, double y)
uprv_fmin	unicode/urename.h	1281;"	d
uprv_fmod	putil.c	/^uprv_fmod(double x, double y)$/;"	f	signature:(double x, double y)
uprv_fmod	putilimp.h	/^U_INTERNAL double  U_EXPORT2 uprv_fmod(double d, double y);$/;"	p	signature:(double d, double y)
uprv_fmod	unicode/urename.h	1282;"	d
uprv_free	cmemory.c	/^uprv_free(void *buffer) {$/;"	f	signature:(void *buffer)
uprv_free	cmemory.h	/^uprv_free(void *mem);$/;"	p	signature:(void *mem)
uprv_free	unicode/urename.h	1283;"	d
uprv_getCharNameCharacters	unames.c	/^uprv_getCharNameCharacters(const USetAdder *sa) {$/;"	f	signature:(const USetAdder *sa)
uprv_getCharNameCharacters	unicode/urename.h	1284;"	d
uprv_getCharNameCharacters	uprops.h	/^uprv_getCharNameCharacters(const USetAdder *sa);$/;"	p	signature:(const USetAdder *sa)
uprv_getDefaultCodepage	putil.c	/^uprv_getDefaultCodepage()$/;"	f
uprv_getDefaultCodepage	unicode/putil.h	/^U_INTERNAL const char*  U_EXPORT2 uprv_getDefaultCodepage(void);$/;"	p	signature:(void)
uprv_getDefaultCodepage	unicode/uintrnal.h	123;"	d
uprv_getDefaultCodepage	unicode/urename.h	1285;"	d
uprv_getDefaultCodepage_4_6	unicode/uintrnal.h	234;"	d
uprv_getDefaultLocaleID	putil.c	/^uprv_getDefaultLocaleID()$/;"	f
uprv_getDefaultLocaleID	unicode/putil.h	/^U_INTERNAL const char*  U_EXPORT2 uprv_getDefaultLocaleID(void);$/;"	p	signature:(void)
uprv_getDefaultLocaleID	unicode/uintrnal.h	124;"	d
uprv_getDefaultLocaleID	unicode/urename.h	1286;"	d
uprv_getDefaultLocaleID_4_6	unicode/uintrnal.h	235;"	d
uprv_getInfinity	putil.c	/^uprv_getInfinity()$/;"	f
uprv_getInfinity	putilimp.h	/^U_INTERNAL double  U_EXPORT2 uprv_getInfinity(void);$/;"	p	signature:(void)
uprv_getInfinity	unicode/urename.h	1287;"	d
uprv_getMaxCharNameLength	unames.c	/^uprv_getMaxCharNameLength() {$/;"	f
uprv_getMaxCharNameLength	unicode/urename.h	1288;"	d
uprv_getMaxCharNameLength	uprops.h	/^uprv_getMaxCharNameLength(void);$/;"	p	signature:(void)
uprv_getMaxValues	uchar.c	/^uprv_getMaxValues(int32_t column) {$/;"	f	signature:(int32_t column)
uprv_getMaxValues	unicode/urename.h	1289;"	d
uprv_getMaxValues	uprops.h	/^uprv_getMaxValues(int32_t column);$/;"	p	signature:(int32_t column)
uprv_getNaN	putil.c	/^uprv_getNaN()$/;"	f
uprv_getNaN	putilimp.h	/^U_INTERNAL double  U_EXPORT2 uprv_getNaN(void);$/;"	p	signature:(void)
uprv_getNaN	unicode/urename.h	1290;"	d
uprv_getPOSIXIDForCategory	putil.c	/^static const char *uprv_getPOSIXIDForCategory(int category)$/;"	f	file:	signature:(int category)
uprv_getPOSIXIDForDefaultCodepage	putil.c	/^static const char *uprv_getPOSIXIDForDefaultCodepage(void)$/;"	f	file:	signature:(void)
uprv_getPOSIXIDForDefaultLocale	putil.c	/^static const char *uprv_getPOSIXIDForDefaultLocale(void)$/;"	f	file:	signature:(void)
uprv_getRawUTCtime	putil.c	/^uprv_getRawUTCtime()$/;"	f
uprv_getRawUTCtime	putilimp.h	/^U_INTERNAL UDate U_EXPORT2 uprv_getRawUTCtime(void);$/;"	p	signature:(void)
uprv_getRawUTCtime	unicode/urename.h	1291;"	d
uprv_getStaticCurrencyName	unicode/urename.h	1292;"	d
uprv_getUTCtime	putil.c	/^uprv_getUTCtime()$/;"	f
uprv_getUTCtime	putilimp.h	/^U_INTERNAL UDate U_EXPORT2 uprv_getUTCtime(void);$/;"	p	signature:(void)
uprv_getUTCtime	unicode/urename.h	1293;"	d
uprv_haveProperties	uchar.c	/^uprv_haveProperties(UErrorCode *pErrorCode) {$/;"	f	signature:(UErrorCode *pErrorCode)
uprv_haveProperties	unicode/urename.h	1294;"	d
uprv_haveProperties	ustr_imp.h	/^uprv_haveProperties(UErrorCode *pErrorCode);$/;"	p	signature:(UErrorCode *pErrorCode)
uprv_init_collIterate	unicode/urename.h	1295;"	d
uprv_init_pce	unicode/urename.h	1296;"	d
uprv_int32Comparator	uarrsort.c	/^uprv_int32Comparator(const void *context, const void *left, const void *right) {$/;"	f	signature:(const void *context, const void *left, const void *right)
uprv_int32Comparator	uarrsort.h	/^uprv_int32Comparator(const void *context, const void *left, const void *right);$/;"	p	signature:(const void *context, const void *left, const void *right)
uprv_int32Comparator	unicode/urename.h	1297;"	d
uprv_isInfinite	putil.c	/^uprv_isInfinite(double number)$/;"	f	signature:(double number)
uprv_isInfinite	putilimp.h	/^U_INTERNAL UBool   U_EXPORT2 uprv_isInfinite(double d);$/;"	p	signature:(double d)
uprv_isInfinite	unicode/urename.h	1298;"	d
uprv_isInvariantString	uinvchar.c	/^uprv_isInvariantString(const char *s, int32_t length) {$/;"	f	signature:(const char *s, int32_t length)
uprv_isInvariantString	uinvchar.h	/^uprv_isInvariantString(const char *s, int32_t length);$/;"	p	signature:(const char *s, int32_t length)
uprv_isInvariantString	unicode/urename.h	1299;"	d
uprv_isInvariantUString	uinvchar.c	/^uprv_isInvariantUString(const UChar *s, int32_t length) {$/;"	f	signature:(const UChar *s, int32_t length)
uprv_isInvariantUString	uinvchar.h	/^uprv_isInvariantUString(const UChar *s, int32_t length);$/;"	p	signature:(const UChar *s, int32_t length)
uprv_isInvariantUString	unicode/urename.h	1300;"	d
uprv_isNaN	putil.c	/^uprv_isNaN(double number)$/;"	f	signature:(double number)
uprv_isNaN	putilimp.h	/^U_INTERNAL UBool   U_EXPORT2 uprv_isNaN(double d);$/;"	p	signature:(double d)
uprv_isNaN	unicode/urename.h	1301;"	d
uprv_isNegative	putilimp.h	125;"	d
uprv_isNegative	putilimp.h	127;"	d
uprv_isNegativeInfinity	putil.c	/^uprv_isNegativeInfinity(double number)$/;"	f	signature:(double number)
uprv_isNegativeInfinity	putilimp.h	/^U_INTERNAL UBool   U_EXPORT2 uprv_isNegativeInfinity(double d);$/;"	p	signature:(double d)
uprv_isNegativeInfinity	unicode/urename.h	1302;"	d
uprv_isPositiveInfinity	putil.c	/^uprv_isPositiveInfinity(double number)$/;"	f	signature:(double number)
uprv_isPositiveInfinity	putilimp.h	/^U_INTERNAL UBool   U_EXPORT2 uprv_isPositiveInfinity(double d);$/;"	p	signature:(double d)
uprv_isPositiveInfinity	unicode/urename.h	1303;"	d
uprv_isRuleWhiteSpace	unicode/urename.h	1304;"	d
uprv_isRuleWhiteSpace	util.cpp	/^uprv_isRuleWhiteSpace(UChar32 c) {$/;"	f	signature:(UChar32 c)
uprv_isRuleWhiteSpace	util.h	/^uprv_isRuleWhiteSpace(UChar32 c);$/;"	p	signature:(UChar32 c)
uprv_itou	unicode/urename.h	1305;"	d
uprv_itou	ustrfmt.c	/^uprv_itou (UChar * buffer, int32_t capacity,$/;"	f	signature:(UChar * buffer, int32_t capacity, uint32_t i, uint32_t radix, int32_t minwidth)
uprv_itou	ustrfmt.h	/^uprv_itou (UChar * buffer, int32_t capacity, uint32_t i, uint32_t radix, int32_t minwidth);$/;"	p	signature:(UChar * buffer, int32_t capacity, uint32_t i, uint32_t radix, int32_t minwidth)
uprv_log	putil.c	/^uprv_log(double d)$/;"	f	signature:(double d)
uprv_log	putilimp.h	/^U_INTERNAL double  U_EXPORT2 uprv_log(double d);$/;"	p	signature:(double d)
uprv_log	unicode/urename.h	1306;"	d
uprv_malloc	cmemory.c	/^uprv_malloc(size_t s) {$/;"	f	signature:(size_t s)
uprv_malloc	cmemory.h	/^uprv_malloc(size_t s);$/;"	p	signature:(size_t s)
uprv_malloc	unicode/urename.h	1307;"	d
uprv_mapFile	umapfile.c	/^    U_CFUNC UBool uprv_mapFile(UDataMemory *pData, const char *path) {$/;"	f	signature:(UDataMemory *pData, const char *path)
uprv_mapFile	umapfile.c	/^    uprv_mapFile($/;"	f	signature:( UDataMemory *pData, const char *path )
uprv_mapFile	umapfile.c	/^    uprv_mapFile(UDataMemory *pData, const char *path) {$/;"	f	signature:(UDataMemory *pData, const char *path)
uprv_mapFile	umapfile.h	/^U_CFUNC UBool uprv_mapFile(UDataMemory *pdm, const char *path);$/;"	p	signature:(UDataMemory *pdm, const char *path)
uprv_mapFile	unicode/urename.h	1308;"	d
uprv_max	putilimp.h	/^U_INTERNAL int32_t U_EXPORT2 uprv_max(int32_t d, int32_t y);$/;"	p	signature:(int32_t d, int32_t y)
uprv_max	umath.c	/^uprv_max(int32_t x, int32_t y)$/;"	f	signature:(int32_t x, int32_t y)
uprv_max	unicode/urename.h	1309;"	d
uprv_maxMantissa	putil.c	/^uprv_maxMantissa(void)$/;"	f	signature:(void)
uprv_maxMantissa	putilimp.h	/^U_INTERNAL double  U_EXPORT2 uprv_maxMantissa(void);$/;"	p	signature:(void)
uprv_maxMantissa	unicode/urename.h	1310;"	d
uprv_maximumPtr	putil.c	/^uprv_maximumPtr(void * base)$/;"	f	signature:(void * base)
uprv_maximumPtr	putilimp.h	/^U_INTERNAL void * U_EXPORT2 uprv_maximumPtr(void *base);$/;"	p	signature:(void *base)
uprv_maximumPtr	unicode/urename.h	1311;"	d
uprv_mbstowcs	cwchar.h	53;"	d
uprv_memcmp	cmemory.h	35;"	d
uprv_memcpy	cmemory.h	32;"	d
uprv_memmove	cmemory.h	33;"	d
uprv_memset	cmemory.h	34;"	d
uprv_min	putilimp.h	/^U_INTERNAL int32_t U_EXPORT2 uprv_min(int32_t d, int32_t y);$/;"	p	signature:(int32_t d, int32_t y)
uprv_min	umath.c	/^uprv_min(int32_t x, int32_t y)$/;"	f	signature:(int32_t x, int32_t y)
uprv_min	unicode/urename.h	1312;"	d
uprv_modf	putil.c	/^uprv_modf(double x, double* y)$/;"	f	signature:(double x, double* y)
uprv_modf	putilimp.h	/^U_INTERNAL double  U_EXPORT2 uprv_modf(double d, double* pinteger);$/;"	p	signature:(double d, double* pinteger)
uprv_modf	unicode/urename.h	1313;"	d
uprv_new_collIterate	unicode/urename.h	1314;"	d
uprv_normalizer2_cleanup	normalizer2.cpp	/^static UBool U_CALLCONV uprv_normalizer2_cleanup() {$/;"	f	file:	signature:()
uprv_normalizer2_cleanup	normalizer2.cpp	/^static UBool U_CALLCONV uprv_normalizer2_cleanup();$/;"	p	file:	signature:()
uprv_openRuleWhiteSpaceSet	unicode/urename.h	1315;"	d
uprv_openRuleWhiteSpaceSet	util.cpp	/^uprv_openRuleWhiteSpaceSet(UErrorCode* ec) {$/;"	f	signature:(UErrorCode* ec)
uprv_openRuleWhiteSpaceSet	util.h	/^uprv_openRuleWhiteSpaceSet(UErrorCode* ec);$/;"	p	signature:(UErrorCode* ec)
uprv_parseCurrency	unicode/urename.h	1316;"	d
uprv_pathIsAbsolute	putil.c	/^uprv_pathIsAbsolute(const char *path)$/;"	f	signature:(const char *path)
uprv_pathIsAbsolute	putilimp.h	/^U_INTERNAL UBool U_EXPORT2 uprv_pathIsAbsolute(const char *path);$/;"	p	signature:(const char *path)
uprv_pathIsAbsolute	unicode/urename.h	1317;"	d
uprv_pow	putil.c	/^uprv_pow(double x, double y)$/;"	f	signature:(double x, double y)
uprv_pow	putilimp.h	/^U_INTERNAL double  U_EXPORT2 uprv_pow(double d, double exponent);$/;"	p	signature:(double d, double exponent)
uprv_pow	unicode/urename.h	1318;"	d
uprv_pow10	putil.c	/^uprv_pow10(int32_t x)$/;"	f	signature:(int32_t x)
uprv_pow10	putilimp.h	/^U_INTERNAL double  U_EXPORT2 uprv_pow10(int32_t exponent);$/;"	p	signature:(int32_t exponent)
uprv_pow10	unicode/urename.h	1319;"	d
uprv_readDirectUInt16	udataswp.c	/^uprv_readDirectUInt16(uint16_t x) {$/;"	f	file:	signature:(uint16_t x)
uprv_readDirectUInt32	udataswp.c	/^uprv_readDirectUInt32(uint32_t x) {$/;"	f	file:	signature:(uint32_t x)
uprv_readSwapUInt16	udataswp.c	/^uprv_readSwapUInt16(uint16_t x) {$/;"	f	file:	signature:(uint16_t x)
uprv_readSwapUInt32	udataswp.c	/^uprv_readSwapUInt32(uint32_t x) {$/;"	f	file:	signature:(uint32_t x)
uprv_realloc	cmemory.c	/^uprv_realloc(void * buffer, size_t size) {$/;"	f	signature:(void * buffer, size_t size)
uprv_realloc	cmemory.h	/^uprv_realloc(void *mem, size_t size);$/;"	p	signature:(void *mem, size_t size)
uprv_realloc	unicode/urename.h	1320;"	d
uprv_round	putil.c	/^uprv_round(double x)$/;"	f	signature:(double x)
uprv_round	putilimp.h	/^U_INTERNAL double  U_EXPORT2 uprv_round(double x);$/;"	p	signature:(double x)
uprv_round	unicode/urename.h	1321;"	d
uprv_sortArray	uarrsort.c	/^uprv_sortArray(void *array, int32_t length, int32_t itemSize,$/;"	f	signature:(void *array, int32_t length, int32_t itemSize, UComparator *cmp, const void *context, UBool sortStable, UErrorCode *pErrorCode)
uprv_sortArray	uarrsort.h	/^uprv_sortArray(void *array, int32_t length, int32_t itemSize,$/;"	p	signature:(void *array, int32_t length, int32_t itemSize, UComparator *cmp, const void *context, UBool sortStable, UErrorCode *pErrorCode)
uprv_sortArray	unicode/urename.h	1322;"	d
uprv_strCompare	unicode/urename.h	1323;"	d
uprv_strCompare	ustr_imp.h	/^uprv_strCompare(const UChar *s1, int32_t length1,$/;"	p	signature:(const UChar *s1, int32_t length1, const UChar *s2, int32_t length2, UBool strncmpStyle, UBool codePointOrder)
uprv_strCompare	ustring.c	/^uprv_strCompare(const UChar *s1, int32_t length1,$/;"	f	signature:(const UChar *s1, int32_t length1, const UChar *s2, int32_t length2, UBool strncmpStyle, UBool codePointOrder)
uprv_strcat	cstring.h	38;"	d
uprv_strchr	cstring.h	40;"	d
uprv_strcmp	cstring.h	36;"	d
uprv_strcpy	cstring.h	33;"	d
uprv_strdup	cstring.c	/^uprv_strdup(const char *src) {$/;"	f	signature:(const char *src)
uprv_strdup	cstring.h	/^uprv_strdup(const char *src);$/;"	p	signature:(const char *src)
uprv_strdup	unicode/urename.h	1324;"	d
uprv_stricmp	cstring.h	67;"	d
uprv_stricmp	cstring.h	70;"	d
uprv_stricmp	cstring.h	74;"	d
uprv_stricmp	cstring.h	77;"	d
uprv_strlen	cstring.h	35;"	d
uprv_strncat	cstring.h	39;"	d
uprv_strncmp	cstring.h	37;"	d
uprv_strncpy	cstring.h	34;"	d
uprv_strndup	cstring.c	/^uprv_strndup(const char *src, int32_t n) {$/;"	f	signature:(const char *src, int32_t n)
uprv_strndup	cstring.h	/^uprv_strndup(const char *src, int32_t n);$/;"	p	signature:(const char *src, int32_t n)
uprv_strndup	unicode/urename.h	1325;"	d
uprv_strnicmp	cstring.h	68;"	d
uprv_strnicmp	cstring.h	71;"	d
uprv_strnicmp	cstring.h	75;"	d
uprv_strnicmp	cstring.h	78;"	d
uprv_strrchr	cstring.h	42;"	d
uprv_strstr	cstring.h	41;"	d
uprv_strtod	cstring.h	62;"	d
uprv_strtol	cstring.h	64;"	d
uprv_strtoul	cstring.h	63;"	d
uprv_svc_hook	localsvc.h	/^U_CAPI void* uprv_svc_hook(const char *what, UErrorCode *status);$/;"	p	signature:(const char *what, UErrorCode *status)
uprv_swapArray16	udataswp.c	/^uprv_swapArray16(const UDataSwapper *ds,$/;"	f	file:	signature:(const UDataSwapper *ds, const void *inData, int32_t length, void *outData, UErrorCode *pErrorCode)
uprv_swapArray32	udataswp.c	/^uprv_swapArray32(const UDataSwapper *ds,$/;"	f	file:	signature:(const UDataSwapper *ds, const void *inData, int32_t length, void *outData, UErrorCode *pErrorCode)
uprv_syntaxError	sprpimpl.h	/^uprv_syntaxError(const UChar* rules, $/;"	p	signature:(const UChar* rules, int32_t pos, int32_t rulesLen, UParseError* parseError)
uprv_syntaxError	unicode/urename.h	1326;"	d
uprv_syntaxError	usprep.cpp	/^uprv_syntaxError(const UChar* rules, $/;"	f	signature:(const UChar* rules, int32_t pos, int32_t rulesLen, UParseError* parseError)
uprv_timezone	putil.c	/^uprv_timezone()$/;"	f
uprv_timezone	putilimp.h	/^U_INTERNAL int32_t  U_EXPORT2 uprv_timezone(void);$/;"	p	signature:(void)
uprv_timezone	unicode/urename.h	1327;"	d
uprv_tolower	cstring.h	55;"	d
uprv_tolower	cstring.h	57;"	d
uprv_toupper	cstring.c	/^uprv_toupper(char c) {$/;"	f	signature:(char c)
uprv_toupper	cstring.h	/^uprv_toupper(char c);$/;"	p	signature:(char c)
uprv_toupper	unicode/urename.h	1328;"	d
uprv_trunc	putil.c	/^uprv_trunc(double d)$/;"	f	signature:(double d)
uprv_trunc	putilimp.h	/^U_INTERNAL double  U_EXPORT2 uprv_trunc(double d);$/;"	p	signature:(double d)
uprv_trunc	unicode/urename.h	1329;"	d
uprv_tzname	putil.c	/^uprv_tzname(int n)$/;"	f	signature:(int n)
uprv_tzname	putilimp.h	/^U_INTERNAL const char* U_EXPORT2 uprv_tzname(int n);$/;"	p	signature:(int n)
uprv_tzname	unicode/urename.h	1330;"	d
uprv_tzset	putil.c	/^uprv_tzset()$/;"	f
uprv_tzset	putilimp.h	/^U_INTERNAL void     U_EXPORT2 uprv_tzset(void);$/;"	p	signature:(void)
uprv_tzset	unicode/urename.h	1331;"	d
uprv_uca_addAnElement	unicode/urename.h	1332;"	d
uprv_uca_assembleTable	unicode/urename.h	1333;"	d
uprv_uca_canonicalClosure	unicode/urename.h	1334;"	d
uprv_uca_closeTempTable	unicode/urename.h	1335;"	d
uprv_uca_getCodePointFromRaw	unicode/urename.h	1336;"	d
uprv_uca_getImplicitFromRaw	unicode/urename.h	1337;"	d
uprv_uca_getRawFromCodePoint	unicode/urename.h	1338;"	d
uprv_uca_getRawFromImplicit	unicode/urename.h	1339;"	d
uprv_uca_initImplicitConstants	unicode/urename.h	1340;"	d
uprv_uca_initTempTable	unicode/urename.h	1341;"	d
uprv_uint16Comparator	uarrsort.c	/^uprv_uint16Comparator(const void *context, const void *left, const void *right) {$/;"	f	signature:(const void *context, const void *left, const void *right)
uprv_uint16Comparator	uarrsort.h	/^uprv_uint16Comparator(const void *context, const void *left, const void *right);$/;"	p	signature:(const void *context, const void *left, const void *right)
uprv_uint16Comparator	unicode/urename.h	1342;"	d
uprv_uint32Comparator	uarrsort.c	/^uprv_uint32Comparator(const void *context, const void *left, const void *right) {$/;"	f	signature:(const void *context, const void *left, const void *right)
uprv_uint32Comparator	uarrsort.h	/^uprv_uint32Comparator(const void *context, const void *left, const void *right);$/;"	p	signature:(const void *context, const void *left, const void *right)
uprv_uint32Comparator	unicode/urename.h	1343;"	d
uprv_unmapFile	umapfile.c	/^    U_CFUNC void uprv_unmapFile(UDataMemory *pData) {$/;"	f	signature:(UDataMemory *pData)
uprv_unmapFile	umapfile.c	/^    uprv_unmapFile(UDataMemory *pData) {$/;"	f	signature:(UDataMemory *pData)
uprv_unmapFile	umapfile.h	/^U_CFUNC void  uprv_unmapFile(UDataMemory *pData);$/;"	p	signature:(UDataMemory *pData)
uprv_unmapFile	unicode/urename.h	1344;"	d
uprv_wcscat	cwchar.c	/^U_CAPI wchar_t *uprv_wcscat(wchar_t *dst, const wchar_t *src) {$/;"	f	signature:(wchar_t *dst, const wchar_t *src)
uprv_wcscat	cwchar.h	/^uprv_wcscat(wchar_t *dst, const wchar_t *src);$/;"	p	signature:(wchar_t *dst, const wchar_t *src)
uprv_wcscat	cwchar.h	40;"	d
uprv_wcscpy	cwchar.c	/^U_CAPI wchar_t *uprv_wcscpy(wchar_t *dst, const wchar_t *src) {$/;"	f	signature:(wchar_t *dst, const wchar_t *src)
uprv_wcscpy	cwchar.h	/^uprv_wcscpy(wchar_t *dst, const wchar_t *src);$/;"	p	signature:(wchar_t *dst, const wchar_t *src)
uprv_wcscpy	cwchar.h	39;"	d
uprv_wcslen	cwchar.c	/^U_CAPI size_t uprv_wcslen(const wchar_t *src) {$/;"	f	signature:(const wchar_t *src)
uprv_wcslen	cwchar.h	/^uprv_wcslen(const wchar_t *src);$/;"	p	signature:(const wchar_t *src)
uprv_wcslen	cwchar.h	41;"	d
uprv_wcstombs	cwchar.h	52;"	d
uprv_writeDirectUInt16	udataswp.c	/^uprv_writeDirectUInt16(uint16_t *p, uint16_t x) {$/;"	f	file:	signature:(uint16_t *p, uint16_t x)
uprv_writeDirectUInt32	udataswp.c	/^uprv_writeDirectUInt32(uint32_t *p, uint32_t x) {$/;"	f	file:	signature:(uint32_t *p, uint32_t x)
uprv_writeSwapUInt16	udataswp.c	/^uprv_writeSwapUInt16(uint16_t *p, uint16_t x) {$/;"	f	file:	signature:(uint16_t *p, uint16_t x)
uprv_writeSwapUInt32	udataswp.c	/^uprv_writeSwapUInt32(uint32_t *p, uint32_t x) {$/;"	f	file:	signature:(uint32_t *p, uint32_t x)
upvec_cloneArray	propsvec.c	/^upvec_cloneArray(const UPropsVectors *pv,$/;"	f	signature:(const UPropsVectors *pv, int32_t *pRows, int32_t *pColumns, UErrorCode *pErrorCode)
upvec_cloneArray	propsvec.h	/^upvec_cloneArray(const UPropsVectors *pv,$/;"	p	signature:(const UPropsVectors *pv, int32_t *pRows, int32_t *pColumns, UErrorCode *pErrorCode)
upvec_cloneArray	unicode/urename.h	1345;"	d
upvec_close	propsvec.c	/^upvec_close(UPropsVectors *pv) {$/;"	f	signature:(UPropsVectors *pv)
upvec_close	propsvec.h	/^upvec_close(UPropsVectors *pv);$/;"	p	signature:(UPropsVectors *pv)
upvec_close	unicode/urename.h	1346;"	d
upvec_compact	propsvec.c	/^upvec_compact(UPropsVectors *pv, UPVecCompactHandler *handler, void *context, UErrorCode *pErrorCode) {$/;"	f	signature:(UPropsVectors *pv, UPVecCompactHandler *handler, void *context, UErrorCode *pErrorCode)
upvec_compact	propsvec.h	/^upvec_compact(UPropsVectors *pv, UPVecCompactHandler *handler, void *context, UErrorCode *pErrorCode);$/;"	p	signature:(UPropsVectors *pv, UPVecCompactHandler *handler, void *context, UErrorCode *pErrorCode)
upvec_compact	unicode/urename.h	1347;"	d
upvec_compactToUTrie2Handler	propsvec.c	/^upvec_compactToUTrie2Handler(void *context,$/;"	f	signature:(void *context, UChar32 start, UChar32 end, int32_t rowIndex, uint32_t *row, int32_t columns, UErrorCode *pErrorCode)
upvec_compactToUTrie2Handler	propsvec.h	/^upvec_compactToUTrie2Handler(void *context,$/;"	p	signature:(void *context, UChar32 start, UChar32 end, int32_t rowIndex, uint32_t *row, int32_t columns, UErrorCode *pErrorCode)
upvec_compactToUTrie2Handler	unicode/urename.h	1348;"	d
upvec_compactToUTrie2WithRowIndexes	propsvec.c	/^upvec_compactToUTrie2WithRowIndexes(UPropsVectors *pv, UErrorCode *pErrorCode) {$/;"	f	signature:(UPropsVectors *pv, UErrorCode *pErrorCode)
upvec_compactToUTrie2WithRowIndexes	propsvec.h	/^upvec_compactToUTrie2WithRowIndexes(UPropsVectors *pv, UErrorCode *pErrorCode);$/;"	p	signature:(UPropsVectors *pv, UErrorCode *pErrorCode)
upvec_compactToUTrie2WithRowIndexes	unicode/urename.h	1349;"	d
upvec_compareRows	propsvec.c	/^upvec_compareRows(const void *context, const void *l, const void *r) {$/;"	f	file:	signature:(const void *context, const void *l, const void *r)
upvec_getArray	propsvec.c	/^upvec_getArray(const UPropsVectors *pv, int32_t *pRows, int32_t *pColumns) {$/;"	f	signature:(const UPropsVectors *pv, int32_t *pRows, int32_t *pColumns)
upvec_getArray	propsvec.h	/^upvec_getArray(const UPropsVectors *pv, int32_t *pRows, int32_t *pColumns);$/;"	p	signature:(const UPropsVectors *pv, int32_t *pRows, int32_t *pColumns)
upvec_getArray	unicode/urename.h	1350;"	d
upvec_getRow	propsvec.c	/^upvec_getRow(const UPropsVectors *pv, int32_t rowIndex,$/;"	f	signature:(const UPropsVectors *pv, int32_t rowIndex, UChar32 *pRangeStart, UChar32 *pRangeEnd)
upvec_getRow	propsvec.h	/^upvec_getRow(const UPropsVectors *pv, int32_t rowIndex,$/;"	p	signature:(const UPropsVectors *pv, int32_t rowIndex, UChar32 *pRangeStart, UChar32 *pRangeEnd)
upvec_getRow	unicode/urename.h	1351;"	d
upvec_getValue	propsvec.c	/^upvec_getValue(const UPropsVectors *pv, UChar32 c, int32_t column) {$/;"	f	signature:(const UPropsVectors *pv, UChar32 c, int32_t column)
upvec_getValue	propsvec.h	/^upvec_getValue(const UPropsVectors *pv, UChar32 c, int32_t column);$/;"	p	signature:(const UPropsVectors *pv, UChar32 c, int32_t column)
upvec_getValue	unicode/urename.h	1352;"	d
upvec_open	propsvec.c	/^upvec_open(int32_t columns, UErrorCode *pErrorCode) {$/;"	f	signature:(int32_t columns, UErrorCode *pErrorCode)
upvec_open	propsvec.h	/^upvec_open(int32_t columns, UErrorCode *pErrorCode);$/;"	p	signature:(int32_t columns, UErrorCode *pErrorCode)
upvec_open	unicode/urename.h	1353;"	d
upvec_setValue	propsvec.c	/^upvec_setValue(UPropsVectors *pv,$/;"	f	signature:(UPropsVectors *pv, UChar32 start, UChar32 end, int32_t column, uint32_t value, uint32_t mask, UErrorCode *pErrorCode)
upvec_setValue	propsvec.h	/^upvec_setValue(UPropsVectors *pv,$/;"	p	signature:(UPropsVectors *pv, UChar32 start, UChar32 end, int32_t column, uint32_t value, uint32_t mask, UErrorCode *pErrorCode)
upvec_setValue	unicode/urename.h	1354;"	d
uregex_appendReplacement	unicode/urename.h	1355;"	d
uregex_appendReplacementUText	unicode/urename.h	1356;"	d
uregex_appendTail	unicode/urename.h	1357;"	d
uregex_appendTailUText	unicode/urename.h	1358;"	d
uregex_clone	unicode/urename.h	1359;"	d
uregex_close	unicode/urename.h	1360;"	d
uregex_end	unicode/urename.h	1361;"	d
uregex_end64	unicode/udraft.h	41;"	d
uregex_end64	unicode/urename.h	1362;"	d
uregex_end64_4_6	unicode/udraft.h	71;"	d
uregex_find	unicode/urename.h	1363;"	d
uregex_find64	unicode/udraft.h	42;"	d
uregex_find64	unicode/urename.h	1364;"	d
uregex_find64_4_6	unicode/udraft.h	72;"	d
uregex_findNext	unicode/urename.h	1365;"	d
uregex_flags	unicode/urename.h	1366;"	d
uregex_getFindProgressCallback	unicode/udraft.h	43;"	d
uregex_getFindProgressCallback	unicode/urename.h	1367;"	d
uregex_getFindProgressCallback_4_6	unicode/udraft.h	73;"	d
uregex_getMatchCallback	unicode/urename.h	1368;"	d
uregex_getStackLimit	unicode/urename.h	1369;"	d
uregex_getText	unicode/urename.h	1370;"	d
uregex_getTimeLimit	unicode/urename.h	1371;"	d
uregex_getUText	unicode/urename.h	1372;"	d
uregex_group	unicode/urename.h	1373;"	d
uregex_groupCount	unicode/urename.h	1374;"	d
uregex_groupUText	unicode/urename.h	1375;"	d
uregex_groupUTextDeep	unicode/urename.h	1376;"	d
uregex_hasAnchoringBounds	unicode/urename.h	1377;"	d
uregex_hasTransparentBounds	unicode/urename.h	1378;"	d
uregex_hitEnd	unicode/urename.h	1379;"	d
uregex_lookingAt	unicode/urename.h	1380;"	d
uregex_lookingAt64	unicode/udraft.h	44;"	d
uregex_lookingAt64	unicode/urename.h	1381;"	d
uregex_lookingAt64_4_6	unicode/udraft.h	74;"	d
uregex_matches	unicode/urename.h	1382;"	d
uregex_matches64	unicode/udraft.h	45;"	d
uregex_matches64	unicode/urename.h	1383;"	d
uregex_matches64_4_6	unicode/udraft.h	75;"	d
uregex_open	unicode/urename.h	1384;"	d
uregex_openC	unicode/urename.h	1385;"	d
uregex_openUText	unicode/urename.h	1386;"	d
uregex_pattern	unicode/urename.h	1387;"	d
uregex_patternUText	unicode/udraft.h	46;"	d
uregex_patternUText	unicode/urename.h	1388;"	d
uregex_patternUText_4_6	unicode/udraft.h	76;"	d
uregex_regionEnd	unicode/urename.h	1389;"	d
uregex_regionEnd64	unicode/udraft.h	47;"	d
uregex_regionEnd64	unicode/urename.h	1390;"	d
uregex_regionEnd64_4_6	unicode/udraft.h	77;"	d
uregex_regionStart	unicode/urename.h	1391;"	d
uregex_regionStart64	unicode/udraft.h	48;"	d
uregex_regionStart64	unicode/urename.h	1392;"	d
uregex_regionStart64_4_6	unicode/udraft.h	78;"	d
uregex_replaceAll	unicode/urename.h	1393;"	d
uregex_replaceAllUText	unicode/urename.h	1394;"	d
uregex_replaceFirst	unicode/urename.h	1395;"	d
uregex_replaceFirstUText	unicode/urename.h	1396;"	d
uregex_requireEnd	unicode/urename.h	1397;"	d
uregex_reset	unicode/urename.h	1398;"	d
uregex_reset64	unicode/udraft.h	49;"	d
uregex_reset64	unicode/urename.h	1399;"	d
uregex_reset64_4_6	unicode/udraft.h	79;"	d
uregex_setFindProgressCallback	unicode/udraft.h	50;"	d
uregex_setFindProgressCallback	unicode/urename.h	1400;"	d
uregex_setFindProgressCallback_4_6	unicode/udraft.h	80;"	d
uregex_setMatchCallback	unicode/urename.h	1401;"	d
uregex_setRegion	unicode/urename.h	1402;"	d
uregex_setRegion64	unicode/udraft.h	51;"	d
uregex_setRegion64	unicode/urename.h	1403;"	d
uregex_setRegion64_4_6	unicode/udraft.h	81;"	d
uregex_setRegionAndStart	unicode/udraft.h	52;"	d
uregex_setRegionAndStart	unicode/urename.h	1404;"	d
uregex_setRegionAndStart_4_6	unicode/udraft.h	82;"	d
uregex_setStackLimit	unicode/urename.h	1405;"	d
uregex_setText	unicode/urename.h	1406;"	d
uregex_setTimeLimit	unicode/urename.h	1407;"	d
uregex_setUText	unicode/urename.h	1408;"	d
uregex_split	unicode/urename.h	1409;"	d
uregex_splitUText	unicode/urename.h	1410;"	d
uregex_start	unicode/urename.h	1411;"	d
uregex_start64	unicode/udraft.h	53;"	d
uregex_start64	unicode/urename.h	1412;"	d
uregex_start64_4_6	unicode/udraft.h	83;"	d
uregex_ucstr_unescape_charAt	unicode/urename.h	1413;"	d
uregex_useAnchoringBounds	unicode/urename.h	1414;"	d
uregex_useTransparentBounds	unicode/urename.h	1415;"	d
uregex_utext_unescape_charAt	unicode/urename.h	1416;"	d
ures_appendResPath	uresbund.c	/^static void ures_appendResPath(UResourceBundle *resB, const char* toAdd, int32_t lenToAdd, UErrorCode *status) {$/;"	f	file:	signature:(UResourceBundle *resB, const char* toAdd, int32_t lenToAdd, UErrorCode *status)
ures_cleanup	uresbund.c	/^static UBool U_CALLCONV ures_cleanup(void)$/;"	f	file:	signature:(void)
ures_close	unicode/urename.h	1417;"	d
ures_close	unicode/ures.h	/^ures_close(UResourceBundle* resourceBundle);$/;"	p	signature:(UResourceBundle* resourceBundle)
ures_close	uresbund.c	/^ures_close(UResourceBundle* resB)$/;"	f	signature:(UResourceBundle* resB)
ures_closeBundle	uresbund.c	/^ures_closeBundle(UResourceBundle* resB, UBool freeBundleObj)$/;"	f	file:	signature:(UResourceBundle* resB, UBool freeBundleObj)
ures_compareRows	uresdata.c	/^ures_compareRows(const void *context, const void *left, const void *right) {$/;"	f	file:	signature:(const void *context, const void *left, const void *right)
ures_copyResb	unicode/urename.h	1418;"	d
ures_copyResb	uresbund.c	/^UResourceBundle *ures_copyResb(UResourceBundle *r, const UResourceBundle *original, UErrorCode *status) {$/;"	f	signature:(UResourceBundle *r, const UResourceBundle *original, UErrorCode *status)
ures_copyResb	uresimp.h	/^U_CFUNC UResourceBundle *ures_copyResb(UResourceBundle *r, const UResourceBundle *original, UErrorCode *status);$/;"	p	signature:(UResourceBundle *r, const UResourceBundle *original, UErrorCode *status)
ures_countArrayItems	unicode/udeprctd.h	29;"	d
ures_countArrayItems	unicode/urename.h	1419;"	d
ures_countArrayItems	unicode/ures.h	/^ures_countArrayItems(const UResourceBundle* resourceBundle,$/;"	p	signature:(const UResourceBundle* resourceBundle, const char* resourceKey, UErrorCode* err)
ures_countArrayItems	uresbund.c	/^ures_countArrayItems(const UResourceBundle* resourceBundle,$/;"	f	signature:(const UResourceBundle* resourceBundle, const char* resourceKey, UErrorCode* status)
ures_countArrayItems_4_6	unicode/udeprctd.h	39;"	d
ures_dumpCacheContents	uresbund.c	/^U_CAPI UBool U_EXPORT2 ures_dumpCacheContents(void) {$/;"	f	signature:(void)
ures_dumpCacheContents	uresimp.h	/^U_CAPI UBool U_EXPORT2 ures_dumpCacheContents(void);$/;"	p	signature:(void)
ures_findResource	unicode/urename.h	1420;"	d
ures_findResource	uresbund.c	/^ures_findResource(const char* path, UResourceBundle *fillIn, UErrorCode *status) $/;"	f	signature:(const char* path, UResourceBundle *fillIn, UErrorCode *status)
ures_findResource	uresimp.h	/^ures_findResource(const char* pathToResource, $/;"	p	signature:(const char* pathToResource, UResourceBundle *fillIn, UErrorCode *status)
ures_findSubResource	unicode/urename.h	1421;"	d
ures_findSubResource	uresbund.c	/^ures_findSubResource(const UResourceBundle *resB, char* path, UResourceBundle *fillIn, UErrorCode *status) $/;"	f	signature:(const UResourceBundle *resB, char* path, UResourceBundle *fillIn, UErrorCode *status)
ures_findSubResource	uresimp.h	/^ures_findSubResource(const UResourceBundle *resB, $/;"	p	signature:(const UResourceBundle *resB, char* pathToResource, UResourceBundle *fillIn, UErrorCode *status)
ures_flushCache	uresbund.c	/^static int32_t ures_flushCache()$/;"	f	file:
ures_freeResPath	uresbund.c	/^static void ures_freeResPath(UResourceBundle *resB) {$/;"	f	file:	signature:(UResourceBundle *resB)
ures_getBinary	unicode/urename.h	1422;"	d
ures_getBinary	unicode/ures.h	/^ures_getBinary(const UResourceBundle* resourceBundle, $/;"	p	signature:(const UResourceBundle* resourceBundle, int32_t* len, UErrorCode* status)
ures_getBinary	uresbund.c	/^U_CAPI const uint8_t* U_EXPORT2 ures_getBinary(const UResourceBundle* resB, int32_t* len, $/;"	f	signature:(const UResourceBundle* resB, int32_t* len, UErrorCode* status)
ures_getByIndex	unicode/urename.h	1423;"	d
ures_getByIndex	unicode/ures.h	/^ures_getByIndex(const UResourceBundle *resourceBundle, $/;"	p	signature:(const UResourceBundle *resourceBundle, int32_t indexR, UResourceBundle *fillIn, UErrorCode *status)
ures_getByIndex	uresbund.c	/^U_CAPI UResourceBundle* U_EXPORT2 ures_getByIndex(const UResourceBundle *resB, int32_t indexR, UResourceBundle *fillIn, UErrorCode *status) {$/;"	f	signature:(const UResourceBundle *resB, int32_t indexR, UResourceBundle *fillIn, UErrorCode *status)
ures_getByKey	unicode/urename.h	1424;"	d
ures_getByKey	unicode/ures.h	/^ures_getByKey(const UResourceBundle *resourceBundle, $/;"	p	signature:(const UResourceBundle *resourceBundle, const char* key, UResourceBundle *fillIn, UErrorCode *status)
ures_getByKey	uresbund.c	/^U_CAPI UResourceBundle* U_EXPORT2 ures_getByKey(const UResourceBundle *resB, const char* inKey, UResourceBundle *fillIn, UErrorCode *status) {$/;"	f	signature:(const UResourceBundle *resB, const char* inKey, UResourceBundle *fillIn, UErrorCode *status)
ures_getByKeyWithFallback	unicode/urename.h	1425;"	d
ures_getByKeyWithFallback	uresbund.c	/^ures_getByKeyWithFallback(const UResourceBundle *resB, $/;"	f	signature:(const UResourceBundle *resB, const char* inKey, UResourceBundle *fillIn, UErrorCode *status)
ures_getByKeyWithFallback	uresimp.h	/^ures_getByKeyWithFallback(const UResourceBundle *resB, $/;"	p	signature:(const UResourceBundle *resB, const char* inKey, UResourceBundle *fillIn, UErrorCode *status)
ures_getFunctionalEquivalent	unicode/urename.h	1426;"	d
ures_getFunctionalEquivalent	uresbund.c	/^ures_getFunctionalEquivalent(char *result, int32_t resultCapacity,$/;"	f	signature:(char *result, int32_t resultCapacity, const char *path, const char *resName, const char *keyword, const char *locid, UBool *isAvailable, UBool omitDefault, UErrorCode *status)
ures_getFunctionalEquivalent	uresimp.h	/^ures_getFunctionalEquivalent(char *result, int32_t resultCapacity, $/;"	p	signature:(char *result, int32_t resultCapacity, const char *path, const char *resName, const char *keyword, const char *locid, UBool *isAvailable, UBool omitDefault, UErrorCode *status)
ures_getInt	unicode/urename.h	1427;"	d
ures_getInt	unicode/ures.h	/^ures_getInt(const UResourceBundle* resourceBundle, $/;"	p	signature:(const UResourceBundle* resourceBundle, UErrorCode *status)
ures_getInt	uresbund.c	/^U_CAPI int32_t U_EXPORT2 ures_getInt(const UResourceBundle* resB, UErrorCode *status) {$/;"	f	signature:(const UResourceBundle* resB, UErrorCode *status)
ures_getIntVector	unicode/urename.h	1428;"	d
ures_getIntVector	unicode/ures.h	/^ures_getIntVector(const UResourceBundle* resourceBundle, $/;"	p	signature:(const UResourceBundle* resourceBundle, int32_t* len, UErrorCode* status)
ures_getIntVector	uresbund.c	/^U_CAPI const int32_t* U_EXPORT2 ures_getIntVector(const UResourceBundle* resB, int32_t* len, $/;"	f	signature:(const UResourceBundle* resB, int32_t* len, UErrorCode* status)
ures_getKey	unicode/urename.h	1429;"	d
ures_getKey	unicode/ures.h	/^ures_getKey(const UResourceBundle *resourceBundle);$/;"	p	signature:(const UResourceBundle *resourceBundle)
ures_getKey	uresbund.c	/^U_CAPI const char * U_EXPORT2 ures_getKey(const UResourceBundle *resB) {$/;"	f	signature:(const UResourceBundle *resB)
ures_getKeywordValues	unicode/urename.h	1430;"	d
ures_getKeywordValues	uresbund.c	/^ures_getKeywordValues(const char *path, const char *keyword, UErrorCode *status)$/;"	f	signature:(const char *path, const char *keyword, UErrorCode *status)
ures_getKeywordValues	uresimp.h	/^ures_getKeywordValues(const char *path, const char *keyword, UErrorCode *status);$/;"	p	signature:(const char *path, const char *keyword, UErrorCode *status)
ures_getLocale	unicode/udeprctd.h	30;"	d
ures_getLocale	unicode/urename.h	1431;"	d
ures_getLocale	unicode/ures.h	/^ures_getLocale(const UResourceBundle* resourceBundle, $/;"	p	signature:(const UResourceBundle* resourceBundle, UErrorCode* status)
ures_getLocale	uresbund.c	/^ures_getLocale(const UResourceBundle* resourceBundle, $/;"	f	signature:(const UResourceBundle* resourceBundle, UErrorCode* status)
ures_getLocaleByType	unicode/urename.h	1432;"	d
ures_getLocaleByType	unicode/ures.h	/^ures_getLocaleByType(const UResourceBundle* resourceBundle, $/;"	p	signature:(const UResourceBundle* resourceBundle, ULocDataLocaleType type, UErrorCode* status)
ures_getLocaleByType	uresbund.c	/^ures_getLocaleByType(const UResourceBundle* resourceBundle, $/;"	f	signature:(const UResourceBundle* resourceBundle, ULocDataLocaleType type, UErrorCode* status)
ures_getLocaleInternal	unicode/urename.h	1433;"	d
ures_getLocaleInternal	uresbund.c	/^ures_getLocaleInternal(const UResourceBundle* resourceBundle, UErrorCode* status)$/;"	f	signature:(const UResourceBundle* resourceBundle, UErrorCode* status)
ures_getLocaleInternal	uresimp.h	/^ures_getLocaleInternal(const UResourceBundle* resourceBundle, $/;"	p	signature:(const UResourceBundle* resourceBundle, UErrorCode* status)
ures_getLocale_4_6	unicode/udeprctd.h	40;"	d
ures_getName	unicode/urename.h	1434;"	d
ures_getName	uresbund.c	/^U_CFUNC const char* ures_getName(const UResourceBundle* resB) {$/;"	f	signature:(const UResourceBundle* resB)
ures_getName	uresimp.h	/^U_CFUNC const char* ures_getName(const UResourceBundle* resB);$/;"	p	signature:(const UResourceBundle* resB)
ures_getNextResource	unicode/urename.h	1435;"	d
ures_getNextResource	unicode/ures.h	/^ures_getNextResource(UResourceBundle *resourceBundle, $/;"	p	signature:(UResourceBundle *resourceBundle, UResourceBundle *fillIn, UErrorCode *status)
ures_getNextResource	uresbund.c	/^U_CAPI UResourceBundle* U_EXPORT2 ures_getNextResource(UResourceBundle *resB, UResourceBundle *fillIn, UErrorCode *status) {$/;"	f	signature:(UResourceBundle *resB, UResourceBundle *fillIn, UErrorCode *status)
ures_getNextString	unicode/urename.h	1436;"	d
ures_getNextString	unicode/ures.h	/^ures_getNextString(UResourceBundle *resourceBundle, $/;"	p	signature:(UResourceBundle *resourceBundle, int32_t* len, const char ** key, UErrorCode *status)
ures_getNextString	uresbund.c	/^U_CAPI const UChar* U_EXPORT2 ures_getNextString(UResourceBundle *resB, int32_t* len, const char ** key, UErrorCode *status) {$/;"	f	signature:(UResourceBundle *resB, int32_t* len, const char ** key, UErrorCode *status)
ures_getNextUnicodeString	unicode/ures.h	/^ures_getNextUnicodeString(UResourceBundle *resB, $/;"	f	signature:(UResourceBundle *resB, const char ** key, UErrorCode* status)
ures_getPath	uresbund.c	/^U_CFUNC const char* ures_getPath(const UResourceBundle* resB) {$/;"	f	signature:(const UResourceBundle* resB)
ures_getPath	uresimp.h	/^U_CFUNC const char* ures_getPath(const UResourceBundle* resB);$/;"	p	signature:(const UResourceBundle* resB)
ures_getSize	unicode/urename.h	1437;"	d
ures_getSize	unicode/ures.h	/^ures_getSize(const UResourceBundle *resourceBundle);$/;"	p	signature:(const UResourceBundle *resourceBundle)
ures_getSize	uresbund.c	/^U_CAPI int32_t U_EXPORT2 ures_getSize(const UResourceBundle *resB) {$/;"	f	signature:(const UResourceBundle *resB)
ures_getString	unicode/urename.h	1438;"	d
ures_getString	unicode/ures.h	/^ures_getString(const UResourceBundle* resourceBundle, $/;"	p	signature:(const UResourceBundle* resourceBundle, int32_t* len, UErrorCode* status)
ures_getString	uresbund.c	/^U_CAPI const UChar* U_EXPORT2 ures_getString(const UResourceBundle* resB, int32_t* len, UErrorCode* status) {$/;"	f	signature:(const UResourceBundle* resB, int32_t* len, UErrorCode* status)
ures_getStringByIndex	unicode/urename.h	1439;"	d
ures_getStringByIndex	unicode/ures.h	/^ures_getStringByIndex(const UResourceBundle *resourceBundle, $/;"	p	signature:(const UResourceBundle *resourceBundle, int32_t indexS, int32_t* len, UErrorCode *status)
ures_getStringByIndex	uresbund.c	/^U_CAPI const UChar* U_EXPORT2 ures_getStringByIndex(const UResourceBundle *resB, int32_t indexS, int32_t* len, UErrorCode *status) {$/;"	f	signature:(const UResourceBundle *resB, int32_t indexS, int32_t* len, UErrorCode *status)
ures_getStringByKey	unicode/urename.h	1440;"	d
ures_getStringByKey	unicode/ures.h	/^ures_getStringByKey(const UResourceBundle *resB, $/;"	p	signature:(const UResourceBundle *resB, const char* key, int32_t* len, UErrorCode *status)
ures_getStringByKey	uresbund.c	/^U_CAPI const UChar* U_EXPORT2 ures_getStringByKey(const UResourceBundle *resB, const char* inKey, int32_t* len, UErrorCode *status) {$/;"	f	signature:(const UResourceBundle *resB, const char* inKey, int32_t* len, UErrorCode *status)
ures_getStringByKeyWithFallback	unicode/urename.h	1441;"	d
ures_getStringByKeyWithFallback	uresbund.c	/^ures_getStringByKeyWithFallback(const UResourceBundle *resB, $/;"	f	signature:(const UResourceBundle *resB, const char* inKey, int32_t* len, UErrorCode *status)
ures_getStringByKeyWithFallback	uresimp.h	/^ures_getStringByKeyWithFallback(const UResourceBundle *resB, $/;"	p	signature:(const UResourceBundle *resB, const char* inKey, int32_t* len, UErrorCode *status)
ures_getStringWithAlias	uresbund.c	/^static const UChar* ures_getStringWithAlias(const UResourceBundle *resB, Resource r, int32_t sIndex, int32_t *len, UErrorCode *status) {$/;"	f	file:	signature:(const UResourceBundle *resB, Resource r, int32_t sIndex, int32_t *len, UErrorCode *status)
ures_getType	unicode/urename.h	1442;"	d
ures_getType	unicode/ures.h	/^ures_getType(const UResourceBundle *resourceBundle);$/;"	p	signature:(const UResourceBundle *resourceBundle)
ures_getType	uresbund.c	/^U_CAPI UResType U_EXPORT2 ures_getType(const UResourceBundle *resB) {$/;"	f	signature:(const UResourceBundle *resB)
ures_getUInt	unicode/urename.h	1443;"	d
ures_getUInt	unicode/ures.h	/^ures_getUInt(const UResourceBundle* resourceBundle, $/;"	p	signature:(const UResourceBundle* resourceBundle, UErrorCode *status)
ures_getUInt	uresbund.c	/^U_CAPI uint32_t U_EXPORT2 ures_getUInt(const UResourceBundle* resB, UErrorCode *status) {$/;"	f	signature:(const UResourceBundle* resB, UErrorCode *status)
ures_getUTF8String	unicode/urename.h	1444;"	d
ures_getUTF8String	unicode/ures.h	/^ures_getUTF8String(const UResourceBundle *resB,$/;"	p	signature:(const UResourceBundle *resB, char *dest, int32_t *length, UBool forceCopy, UErrorCode *status)
ures_getUTF8String	uresbund.c	/^ures_getUTF8String(const UResourceBundle *resB,$/;"	f	signature:(const UResourceBundle *resB, char *dest, int32_t *pLength, UBool forceCopy, UErrorCode *status)
ures_getUTF8StringByIndex	unicode/urename.h	1445;"	d
ures_getUTF8StringByIndex	unicode/ures.h	/^ures_getUTF8StringByIndex(const UResourceBundle *resB,$/;"	p	signature:(const UResourceBundle *resB, int32_t stringIndex, char *dest, int32_t *pLength, UBool forceCopy, UErrorCode *status)
ures_getUTF8StringByIndex	uresbund.c	/^ures_getUTF8StringByIndex(const UResourceBundle *resB,$/;"	f	signature:(const UResourceBundle *resB, int32_t idx, char *dest, int32_t *pLength, UBool forceCopy, UErrorCode *status)
ures_getUTF8StringByKey	unicode/urename.h	1446;"	d
ures_getUTF8StringByKey	unicode/ures.h	/^ures_getUTF8StringByKey(const UResourceBundle *resB,$/;"	p	signature:(const UResourceBundle *resB, const char *key, char *dest, int32_t *pLength, UBool forceCopy, UErrorCode *status)
ures_getUTF8StringByKey	uresbund.c	/^ures_getUTF8StringByKey(const UResourceBundle *resB,$/;"	f	signature:(const UResourceBundle *resB, const char *key, char *dest, int32_t *pLength, UBool forceCopy, UErrorCode *status)
ures_getUnicodeString	unicode/ures.h	/^ures_getUnicodeString(const UResourceBundle *resB, $/;"	f	signature:(const UResourceBundle *resB, UErrorCode* status)
ures_getUnicodeStringByIndex	unicode/ures.h	/^ures_getUnicodeStringByIndex(const UResourceBundle *resB, $/;"	f	signature:(const UResourceBundle *resB, int32_t indexS, UErrorCode* status)
ures_getUnicodeStringByKey	unicode/ures.h	/^ures_getUnicodeStringByKey(const UResourceBundle *resB, $/;"	f	signature:(const UResourceBundle *resB, const char* key, UErrorCode* status)
ures_getVersion	unicode/urename.h	1447;"	d
ures_getVersion	unicode/ures.h	/^ures_getVersion(const UResourceBundle* resB, $/;"	p	signature:(const UResourceBundle* resB, UVersionInfo versionInfo)
ures_getVersion	uresbund.c	/^U_CAPI void U_EXPORT2 ures_getVersion(const UResourceBundle* resB, UVersionInfo versionInfo) {$/;"	f	signature:(const UResourceBundle* resB, UVersionInfo versionInfo)
ures_getVersionByKey	unicode/urename.h	1448;"	d
ures_getVersionByKey	uresbund.c	/^ures_getVersionByKey(const UResourceBundle* res, const char *key, UVersionInfo ver, UErrorCode *status) {$/;"	f	signature:(const UResourceBundle* res, const char *key, UVersionInfo ver, UErrorCode *status)
ures_getVersionByKey	uresimp.h	/^ures_getVersionByKey(const UResourceBundle *resB,$/;"	p	signature:(const UResourceBundle *resB, const char *key, UVersionInfo ver, UErrorCode *status)
ures_getVersionNumber	unicode/udeprctd.h	31;"	d
ures_getVersionNumber	unicode/urename.h	1449;"	d
ures_getVersionNumber	unicode/ures.h	/^ures_getVersionNumber(const UResourceBundle*   resourceBundle);$/;"	p	signature:(const UResourceBundle* resourceBundle)
ures_getVersionNumber	uresbund.c	/^ures_getVersionNumber(const UResourceBundle*   resourceBundle)$/;"	f	signature:(const UResourceBundle* resourceBundle)
ures_getVersionNumberInternal	unicode/urename.h	1450;"	d
ures_getVersionNumberInternal	uresbund.c	/^ures_getVersionNumberInternal(const UResourceBundle *resourceBundle)$/;"	f	signature:(const UResourceBundle *resourceBundle)
ures_getVersionNumberInternal	uresimp.h	/^ures_getVersionNumberInternal(const UResourceBundle *resourceBundle);$/;"	p	signature:(const UResourceBundle *resourceBundle)
ures_getVersionNumber_4_6	unicode/udeprctd.h	41;"	d
ures_hasNext	unicode/urename.h	1451;"	d
ures_hasNext	unicode/ures.h	/^ures_hasNext(const UResourceBundle *resourceBundle);$/;"	p	signature:(const UResourceBundle *resourceBundle)
ures_hasNext	uresbund.c	/^U_CAPI UBool U_EXPORT2 ures_hasNext(const UResourceBundle *resB) {$/;"	f	signature:(const UResourceBundle *resB)
ures_initStackObject	unicode/urename.h	1452;"	d
ures_initStackObject	uresbund.c	/^U_CFUNC void ures_initStackObject(UResourceBundle* resB) {$/;"	f	signature:(UResourceBundle* resB)
ures_initStackObject	uresimp.h	/^U_CAPI void U_EXPORT2 ures_initStackObject(UResourceBundle* resB);$/;"	p	signature:(UResourceBundle* resB)
ures_isStackObject	uresbund.c	/^static UBool ures_isStackObject(const UResourceBundle* resB) {$/;"	f	file:	signature:(const UResourceBundle* resB)
ures_loc_closeLocales	uresbund.c	/^ures_loc_closeLocales(UEnumeration *enumerator) {$/;"	f	file:	signature:(UEnumeration *enumerator)
ures_loc_countLocales	uresbund.c	/^ures_loc_countLocales(UEnumeration *en, UErrorCode *status) {$/;"	f	file:	signature:(UEnumeration *en, UErrorCode *status)
ures_loc_nextLocale	uresbund.c	/^ures_loc_nextLocale(UEnumeration* en,$/;"	f	file:	signature:(UEnumeration* en, int32_t* resultLength, UErrorCode* status)
ures_loc_resetLocales	uresbund.c	/^ures_loc_resetLocales(UEnumeration* en, $/;"	f	file:	signature:(UEnumeration* en, UErrorCode* status)
ures_open	unicode/urename.h	1453;"	d
ures_open	unicode/ures.h	/^ures_open(const char*    packageName,$/;"	p	signature:(const char* packageName, const char* locale, UErrorCode* status)
ures_open	uresbund.c	/^ures_open(const char* path,$/;"	f	signature:(const char* path, const char* localeID, UErrorCode* status)
ures_openAvailableLocales	unicode/urename.h	1454;"	d
ures_openAvailableLocales	unicode/ures.h	/^ures_openAvailableLocales(const char *packageName, UErrorCode *status);$/;"	p	signature:(const char *packageName, UErrorCode *status)
ures_openAvailableLocales	uresbund.c	/^ures_openAvailableLocales(const char *path, UErrorCode *status)$/;"	f	signature:(const char *path, UErrorCode *status)
ures_openDirect	unicode/urename.h	1455;"	d
ures_openDirect	unicode/ures.h	/^ures_openDirect(const char* packageName, $/;"	p	signature:(const char* packageName, const char* locale, UErrorCode* status)
ures_openDirect	uresbund.c	/^ures_openDirect(const char* path, const char* localeID, UErrorCode* status) {$/;"	f	signature:(const char* path, const char* localeID, UErrorCode* status)
ures_openFillIn	unicode/uintrnal.h	125;"	d
ures_openFillIn	unicode/urename.h	1456;"	d
ures_openFillIn	unicode/ures.h	/^ures_openFillIn(UResourceBundle *r, $/;"	p	signature:(UResourceBundle *r, const char* packageName, const char* localeID, UErrorCode* status)
ures_openFillIn	uresbund.c	/^ures_openFillIn(UResourceBundle *r, const char* path,$/;"	f	signature:(UResourceBundle *r, const char* path, const char* localeID, UErrorCode* status)
ures_openFillIn_4_6	unicode/uintrnal.h	236;"	d
ures_openU	unicode/urename.h	1457;"	d
ures_openU	unicode/ures.h	/^ures_openU(const UChar* packageName, $/;"	p	signature:(const UChar* packageName, const char* locale, UErrorCode* status)
ures_openU	ures_cnv.c	/^ures_openU(const UChar *myPath, $/;"	f	signature:(const UChar *myPath, const char *localeID, UErrorCode *status)
ures_resetIterator	unicode/urename.h	1458;"	d
ures_resetIterator	unicode/ures.h	/^ures_resetIterator(UResourceBundle *resourceBundle);$/;"	p	signature:(UResourceBundle *resourceBundle)
ures_resetIterator	uresbund.c	/^U_CAPI void U_EXPORT2 ures_resetIterator(UResourceBundle *resB){$/;"	f	signature:(UResourceBundle *resB)
ures_setIsStackObject	uresbund.c	/^static void ures_setIsStackObject( UResourceBundle* resB, UBool state) {$/;"	f	file:	signature:( UResourceBundle* resB, UBool state)
ures_swap	unicode/urename.h	1459;"	d
ures_swap	uresdata.c	/^ures_swap(const UDataSwapper *ds,$/;"	f	signature:(const UDataSwapper *ds, const void *inData, int32_t length, void *outData, UErrorCode *pErrorCode)
ures_swap	uresdata.h	/^ures_swap(const UDataSwapper *ds,$/;"	p	signature:(const UDataSwapper *ds, const void *inData, int32_t length, void *outData, UErrorCode *pErrorCode)
ures_swapResource	uresdata.c	/^ures_swapResource(const UDataSwapper *ds,$/;"	f	file:	signature:(const UDataSwapper *ds, const Resource *inBundle, Resource *outBundle, Resource res, const char *key, TempTable *pTempTable, UErrorCode *pErrorCode)
ures_toUTF8String	uresbund.c	/^ures_toUTF8String(const UChar *s16, int32_t length16,$/;"	f	file:	signature:(const UChar *s16, int32_t length16, char *dest, int32_t *pLength, UBool forceCopy, UErrorCode *status)
us_arrayCopy	unistr.cpp	/^us_arrayCopy(const UChar *src, int32_t srcStart,$/;"	f	file:	signature:(const UChar *src, int32_t srcStart, UChar *dst, int32_t dstStart, int32_t count)
uscript_closeRun	unicode/urename.h	1460;"	d
uscript_closeRun	usc_impl.c	/^uscript_closeRun(UScriptRun *scriptRun)$/;"	f	signature:(UScriptRun *scriptRun)
uscript_closeRun	usc_impl.h	/^uscript_closeRun(UScriptRun *scriptRun);$/;"	p	signature:(UScriptRun *scriptRun)
uscript_getCode	unicode/urename.h	1461;"	d
uscript_getCode	unicode/uscript.h	/^uscript_getCode(const char* nameOrAbbrOrLocale,UScriptCode* fillIn,int32_t capacity,UErrorCode *err);$/;"	p	signature:(const char* nameOrAbbrOrLocale,UScriptCode* fillIn,int32_t capacity,UErrorCode *err)
uscript_getCode	uscript.c	/^uscript_getCode(const char* nameOrAbbrOrLocale,$/;"	f	signature:(const char* nameOrAbbrOrLocale, UScriptCode* fillIn, int32_t capacity, UErrorCode* err)
uscript_getName	unicode/urename.h	1462;"	d
uscript_getName	unicode/uscript.h	/^uscript_getName(UScriptCode scriptCode);$/;"	p	signature:(UScriptCode scriptCode)
uscript_getName	uscript.c	/^uscript_getName(UScriptCode scriptCode){$/;"	f	signature:(UScriptCode scriptCode)
uscript_getScript	uchar.c	/^uscript_getScript(UChar32 c, UErrorCode *pErrorCode) {$/;"	f	signature:(UChar32 c, UErrorCode *pErrorCode)
uscript_getScript	unicode/urename.h	1463;"	d
uscript_getScript	unicode/uscript.h	/^uscript_getScript(UChar32 codepoint, UErrorCode *err);$/;"	p	signature:(UChar32 codepoint, UErrorCode *err)
uscript_getScriptExtensions	uchar.c	/^uscript_getScriptExtensions(UChar32 c,$/;"	f	signature:(UChar32 c, UScriptCode *scripts, int32_t capacity, UErrorCode *pErrorCode)
uscript_getScriptExtensions	unicode/udraft.h	54;"	d
uscript_getScriptExtensions	unicode/urename.h	1464;"	d
uscript_getScriptExtensions	unicode/uscript.h	/^uscript_getScriptExtensions(UChar32 c,$/;"	p	signature:(UChar32 c, UScriptCode *scripts, int32_t capacity, UErrorCode *pErrorCode)
uscript_getScriptExtensions_4_6	unicode/udraft.h	84;"	d
uscript_getShortName	unicode/urename.h	1465;"	d
uscript_getShortName	unicode/uscript.h	/^uscript_getShortName(UScriptCode scriptCode);$/;"	p	signature:(UScriptCode scriptCode)
uscript_getShortName	uscript.c	/^uscript_getShortName(UScriptCode scriptCode){$/;"	f	signature:(UScriptCode scriptCode)
uscript_hasScript	uchar.c	/^uscript_hasScript(UChar32 c, UScriptCode sc) {$/;"	f	signature:(UChar32 c, UScriptCode sc)
uscript_hasScript	unicode/udraft.h	55;"	d
uscript_hasScript	unicode/urename.h	1466;"	d
uscript_hasScript	unicode/uscript.h	/^uscript_hasScript(UChar32 c, UScriptCode sc);$/;"	p	signature:(UChar32 c, UScriptCode sc)
uscript_hasScript_4_6	unicode/udraft.h	85;"	d
uscript_nextRun	unicode/urename.h	1467;"	d
uscript_nextRun	usc_impl.c	/^uscript_nextRun(UScriptRun *scriptRun, int32_t *pRunStart, int32_t *pRunLimit, UScriptCode *pRunScript)$/;"	f	signature:(UScriptRun *scriptRun, int32_t *pRunStart, int32_t *pRunLimit, UScriptCode *pRunScript)
uscript_nextRun	usc_impl.h	/^uscript_nextRun(UScriptRun *scriptRun, int32_t *pRunStart, int32_t *pRunLimit, UScriptCode *pRunScript);$/;"	p	signature:(UScriptRun *scriptRun, int32_t *pRunStart, int32_t *pRunLimit, UScriptCode *pRunScript)
uscript_openRun	unicode/urename.h	1468;"	d
uscript_openRun	usc_impl.c	/^uscript_openRun(const UChar *src, int32_t length, UErrorCode *pErrorCode)$/;"	f	signature:(const UChar *src, int32_t length, UErrorCode *pErrorCode)
uscript_openRun	usc_impl.h	/^uscript_openRun(const UChar *src, int32_t length, UErrorCode *pErrorCode);$/;"	p	signature:(const UChar *src, int32_t length, UErrorCode *pErrorCode)
uscript_resetRun	unicode/urename.h	1469;"	d
uscript_resetRun	usc_impl.c	/^uscript_resetRun(UScriptRun *scriptRun)$/;"	f	signature:(UScriptRun *scriptRun)
uscript_resetRun	usc_impl.h	/^uscript_resetRun(UScriptRun *scriptRun);$/;"	p	signature:(UScriptRun *scriptRun)
uscript_setRunText	unicode/urename.h	1470;"	d
uscript_setRunText	usc_impl.c	/^uscript_setRunText(UScriptRun *scriptRun, const UChar *src, int32_t length, UErrorCode *pErrorCode)$/;"	f	signature:(UScriptRun *scriptRun, const UChar *src, int32_t length, UErrorCode *pErrorCode)
uscript_setRunText	usc_impl.h	/^uscript_setRunText(UScriptRun *scriptRun, const UChar *src, int32_t length, UErrorCode *pErrorCode);$/;"	p	signature:(UScriptRun *scriptRun, const UChar *src, int32_t length, UErrorCode *pErrorCode)
useDynamicWindow	ucnvscsu.c	/^useDynamicWindow(SCSUData *scsu, int8_t window) {$/;"	f	file:	signature:(SCSUData *scsu, int8_t window)
useFallback	ucnv_bld.h	/^    UBool  useFallback;$/;"	m	struct:UConverter	access:public
useNativeStrcmp	uresdata.h	/^    UBool useNativeStrcmp;$/;"	m	struct:__anon12	access:public
useSubChar1	ucnv_bld.h	/^    UBool useSubChar1;$/;"	m	struct:UConverter	access:public
usearch_close	unicode/urename.h	1471;"	d
usearch_first	unicode/urename.h	1472;"	d
usearch_following	unicode/urename.h	1473;"	d
usearch_getAttribute	unicode/urename.h	1474;"	d
usearch_getBreakIterator	unicode/urename.h	1475;"	d
usearch_getCollator	unicode/urename.h	1476;"	d
usearch_getMatchedLength	unicode/urename.h	1477;"	d
usearch_getMatchedStart	unicode/urename.h	1478;"	d
usearch_getMatchedText	unicode/urename.h	1479;"	d
usearch_getOffset	unicode/urename.h	1480;"	d
usearch_getPattern	unicode/urename.h	1481;"	d
usearch_getText	unicode/urename.h	1482;"	d
usearch_handleNextCanonical	unicode/urename.h	1483;"	d
usearch_handleNextExact	unicode/urename.h	1484;"	d
usearch_handlePreviousCanonical	unicode/urename.h	1485;"	d
usearch_handlePreviousExact	unicode/urename.h	1486;"	d
usearch_last	unicode/urename.h	1487;"	d
usearch_next	unicode/urename.h	1488;"	d
usearch_open	unicode/urename.h	1489;"	d
usearch_openFromCollator	unicode/urename.h	1490;"	d
usearch_preceding	unicode/urename.h	1491;"	d
usearch_previous	unicode/urename.h	1492;"	d
usearch_reset	unicode/urename.h	1493;"	d
usearch_search	unicode/uintrnal.h	126;"	d
usearch_search	unicode/urename.h	1494;"	d
usearch_searchBackwards	unicode/uintrnal.h	127;"	d
usearch_searchBackwards	unicode/urename.h	1495;"	d
usearch_searchBackwards_4_6	unicode/uintrnal.h	238;"	d
usearch_search_4_6	unicode/uintrnal.h	237;"	d
usearch_setAttribute	unicode/urename.h	1496;"	d
usearch_setBreakIterator	unicode/urename.h	1497;"	d
usearch_setCollator	unicode/urename.h	1498;"	d
usearch_setOffset	unicode/urename.h	1499;"	d
usearch_setPattern	unicode/urename.h	1500;"	d
usearch_setText	unicode/urename.h	1501;"	d
userMutex	umutex.c	/^    UMTX         userMutex;         \/* For use with u_setMutexFunctions operations,    *\/$/;"	m	struct:ICUMutex	file:	access:public
userv_deleteStringPair	serv.cpp	/^userv_deleteStringPair(void *obj) {$/;"	f	file:	signature:(void *obj)
usesPoolBundle	uresdata.h	/^    UBool usesPoolBundle;$/;"	m	struct:__anon12	access:public
uset	rbbinode.h	/^            uset,$/;"	e	enum:RBBINode::NodeType
uset_add	unicode/urename.h	1502;"	d
uset_add	unicode/uset.h	/^uset_add(USet* set, UChar32 c);$/;"	p	signature:(USet* set, UChar32 c)
uset_add	uset.cpp	/^uset_add(USet* set, UChar32 c) {$/;"	f	signature:(USet* set, UChar32 c)
uset_addAll	unicode/urename.h	1503;"	d
uset_addAll	unicode/uset.h	/^uset_addAll(USet* set, const USet *additionalSet);$/;"	p	signature:(USet* set, const USet *additionalSet)
uset_addAll	uset.cpp	/^uset_addAll(USet* set, const USet *additionalSet) {$/;"	f	signature:(USet* set, const USet *additionalSet)
uset_addAllCodePoints	unicode/urename.h	1504;"	d
uset_addAllCodePoints	unicode/uset.h	/^uset_addAllCodePoints(USet* set, const UChar *str, int32_t strLen);$/;"	p	signature:(USet* set, const UChar *str, int32_t strLen)
uset_addAllCodePoints	uset.cpp	/^uset_addAllCodePoints(USet* set, const UChar *str, int32_t strLen) {$/;"	f	signature:(USet* set, const UChar *str, int32_t strLen)
uset_addRange	unicode/urename.h	1505;"	d
uset_addRange	unicode/uset.h	/^uset_addRange(USet* set, UChar32 start, UChar32 end);$/;"	p	signature:(USet* set, UChar32 start, UChar32 end)
uset_addRange	uset.cpp	/^uset_addRange(USet* set, UChar32 start, UChar32 end) {$/;"	f	signature:(USet* set, UChar32 start, UChar32 end)
uset_addString	unicode/urename.h	1506;"	d
uset_addString	unicode/uset.h	/^uset_addString(USet* set, const UChar* str, int32_t strLen);$/;"	p	signature:(USet* set, const UChar* str, int32_t strLen)
uset_addString	uset.cpp	/^uset_addString(USet* set, const UChar* str, int32_t strLen) {$/;"	f	signature:(USet* set, const UChar* str, int32_t strLen)
uset_applyIntPropertyValue	unicode/urename.h	1507;"	d
uset_applyIntPropertyValue	unicode/uset.h	/^uset_applyIntPropertyValue(USet* set,$/;"	p	signature:(USet* set, UProperty prop, int32_t value, UErrorCode* ec)
uset_applyIntPropertyValue	uset_props.cpp	/^uset_applyIntPropertyValue(USet* set,$/;"	f	signature:(USet* set, UProperty prop, int32_t value, UErrorCode* ec)
uset_applyPattern	unicode/urename.h	1508;"	d
uset_applyPattern	unicode/uset.h	/^uset_applyPattern(USet *set,$/;"	p	signature:(USet *set, const UChar *pattern, int32_t patternLength, uint32_t options, UErrorCode *status)
uset_applyPattern	uset_props.cpp	/^uset_applyPattern(USet *set,$/;"	f	signature:(USet *set, const UChar *pattern, int32_t patternLength, uint32_t options, UErrorCode *status)
uset_applyPropertyAlias	unicode/urename.h	1509;"	d
uset_applyPropertyAlias	unicode/uset.h	/^uset_applyPropertyAlias(USet* set,$/;"	p	signature:(USet* set, const UChar *prop, int32_t propLength, const UChar *value, int32_t valueLength, UErrorCode* ec)
uset_applyPropertyAlias	uset_props.cpp	/^uset_applyPropertyAlias(USet* set,$/;"	f	signature:(USet* set, const UChar *prop, int32_t propLength, const UChar *value, int32_t valueLength, UErrorCode* ec)
uset_charAt	unicode/urename.h	1510;"	d
uset_charAt	unicode/uset.h	/^uset_charAt(const USet* set, int32_t charIndex);$/;"	p	signature:(const USet* set, int32_t charIndex)
uset_charAt	uset.cpp	/^uset_charAt(const USet* set, int32_t index) {$/;"	f	signature:(const USet* set, int32_t index)
uset_cleanup	uniset_props.cpp	/^static UBool U_CALLCONV uset_cleanup();$/;"	p	file:	signature:()
uset_cleanup	uniset_props.cpp	/^static UBool U_CALLCONV uset_cleanup(void) {$/;"	f	file:	signature:(void)
uset_clear	unicode/urename.h	1511;"	d
uset_clear	unicode/uset.h	/^uset_clear(USet* set);$/;"	p	signature:(USet* set)
uset_clear	uset.cpp	/^uset_clear(USet* set) {$/;"	f	signature:(USet* set)
uset_clone	unicode/urename.h	1512;"	d
uset_clone	unicode/uset.h	/^uset_clone(const USet *set);$/;"	p	signature:(const USet *set)
uset_clone	uset.cpp	/^uset_clone(const USet *set) {$/;"	f	signature:(const USet *set)
uset_cloneAsThawed	unicode/urename.h	1513;"	d
uset_cloneAsThawed	unicode/uset.h	/^uset_cloneAsThawed(const USet *set);$/;"	p	signature:(const USet *set)
uset_cloneAsThawed	uset.cpp	/^uset_cloneAsThawed(const USet *set) {$/;"	f	signature:(const USet *set)
uset_close	unicode/urename.h	1514;"	d
uset_close	unicode/uset.h	/^uset_close(USet* set);$/;"	p	signature:(USet* set)
uset_close	uset.cpp	/^uset_close(USet* set) {$/;"	f	signature:(USet* set)
uset_closeOver	unicode/urename.h	1515;"	d
uset_closeOver	unicode/uset.h	/^uset_closeOver(USet* set, int32_t attributes);$/;"	p	signature:(USet* set, int32_t attributes)
uset_closeOver	uset.cpp	/^uset_closeOver(USet* set, int32_t attributes) {$/;"	f	signature:(USet* set, int32_t attributes)
uset_compact	unicode/urename.h	1516;"	d
uset_compact	unicode/uset.h	/^uset_compact(USet* set);$/;"	p	signature:(USet* set)
uset_compact	uset.cpp	/^uset_compact(USet* set) {$/;"	f	signature:(USet* set)
uset_complement	unicode/urename.h	1517;"	d
uset_complement	unicode/uset.h	/^uset_complement(USet* set);$/;"	p	signature:(USet* set)
uset_complement	uset.cpp	/^uset_complement(USet* set) {$/;"	f	signature:(USet* set)
uset_complementAll	unicode/urename.h	1518;"	d
uset_complementAll	unicode/uset.h	/^uset_complementAll(USet* set, const USet* complement);$/;"	p	signature:(USet* set, const USet* complement)
uset_complementAll	uset.cpp	/^uset_complementAll(USet* set, const USet* complement) {$/;"	f	signature:(USet* set, const USet* complement)
uset_contains	unicode/urename.h	1519;"	d
uset_contains	unicode/uset.h	/^uset_contains(const USet* set, UChar32 c);$/;"	p	signature:(const USet* set, UChar32 c)
uset_contains	uset.cpp	/^uset_contains(const USet* set, UChar32 c) {$/;"	f	signature:(const USet* set, UChar32 c)
uset_containsAll	unicode/urename.h	1520;"	d
uset_containsAll	unicode/uset.h	/^uset_containsAll(const USet* set1, const USet* set2);$/;"	p	signature:(const USet* set1, const USet* set2)
uset_containsAll	uset.cpp	/^uset_containsAll(const USet* set1, const USet* set2) {$/;"	f	signature:(const USet* set1, const USet* set2)
uset_containsAllCodePoints	unicode/urename.h	1521;"	d
uset_containsAllCodePoints	unicode/uset.h	/^uset_containsAllCodePoints(const USet* set, const UChar *str, int32_t strLen);$/;"	p	signature:(const USet* set, const UChar *str, int32_t strLen)
uset_containsAllCodePoints	uset.cpp	/^uset_containsAllCodePoints(const USet* set, const UChar *str, int32_t strLen) {$/;"	f	signature:(const USet* set, const UChar *str, int32_t strLen)
uset_containsNone	unicode/urename.h	1522;"	d
uset_containsNone	unicode/uset.h	/^uset_containsNone(const USet* set1, const USet* set2);$/;"	p	signature:(const USet* set1, const USet* set2)
uset_containsNone	uset.cpp	/^uset_containsNone(const USet* set1, const USet* set2) {$/;"	f	signature:(const USet* set1, const USet* set2)
uset_containsRange	unicode/urename.h	1523;"	d
uset_containsRange	unicode/uset.h	/^uset_containsRange(const USet* set, UChar32 start, UChar32 end);$/;"	p	signature:(const USet* set, UChar32 start, UChar32 end)
uset_containsRange	uset.cpp	/^uset_containsRange(const USet* set, UChar32 start, UChar32 end) {$/;"	f	signature:(const USet* set, UChar32 start, UChar32 end)
uset_containsSome	unicode/urename.h	1524;"	d
uset_containsSome	unicode/uset.h	/^uset_containsSome(const USet* set1, const USet* set2);$/;"	p	signature:(const USet* set1, const USet* set2)
uset_containsSome	uset.cpp	/^uset_containsSome(const USet* set1, const USet* set2) {$/;"	f	signature:(const USet* set1, const USet* set2)
uset_containsString	unicode/urename.h	1525;"	d
uset_containsString	unicode/uset.h	/^uset_containsString(const USet* set, const UChar* str, int32_t strLen);$/;"	p	signature:(const USet* set, const UChar* str, int32_t strLen)
uset_containsString	uset.cpp	/^uset_containsString(const USet* set, const UChar* str, int32_t strLen) {$/;"	f	signature:(const USet* set, const UChar* str, int32_t strLen)
uset_equals	unicode/urename.h	1526;"	d
uset_equals	unicode/uset.h	/^uset_equals(const USet* set1, const USet* set2);$/;"	p	signature:(const USet* set1, const USet* set2)
uset_equals	uset.cpp	/^uset_equals(const USet* set1, const USet* set2) {$/;"	f	signature:(const USet* set1, const USet* set2)
uset_freeze	unicode/urename.h	1527;"	d
uset_freeze	unicode/uset.h	/^uset_freeze(USet *set);$/;"	p	signature:(USet *set)
uset_freeze	uset.cpp	/^uset_freeze(USet *set) {$/;"	f	signature:(USet *set)
uset_getItem	unicode/urename.h	1528;"	d
uset_getItem	unicode/uset.h	/^uset_getItem(const USet* set, int32_t itemIndex,$/;"	p	signature:(const USet* set, int32_t itemIndex, UChar32* start, UChar32* end, UChar* str, int32_t strCapacity, UErrorCode* ec)
uset_getItem	uset.cpp	/^uset_getItem(const USet* uset, int32_t itemIndex,$/;"	f	signature:(const USet* uset, int32_t itemIndex, UChar32* start, UChar32* end, UChar* str, int32_t strCapacity, UErrorCode* ec)
uset_getItemCount	unicode/urename.h	1529;"	d
uset_getItemCount	unicode/uset.h	/^uset_getItemCount(const USet* set);$/;"	p	signature:(const USet* set)
uset_getItemCount	uset.cpp	/^uset_getItemCount(const USet* uset) {$/;"	f	signature:(const USet* uset)
uset_getSerializedRange	unicode/urename.h	1530;"	d
uset_getSerializedRange	unicode/uset.h	/^uset_getSerializedRange(const USerializedSet* set, int32_t rangeIndex,$/;"	p	signature:(const USerializedSet* set, int32_t rangeIndex, UChar32* pStart, UChar32* pEnd)
uset_getSerializedRange	uset.cpp	/^uset_getSerializedRange(const USerializedSet* set, int32_t rangeIndex,$/;"	f	signature:(const USerializedSet* set, int32_t rangeIndex, UChar32* pStart, UChar32* pEnd)
uset_getSerializedRangeCount	unicode/urename.h	1531;"	d
uset_getSerializedRangeCount	unicode/uset.h	/^uset_getSerializedRangeCount(const USerializedSet* set);$/;"	p	signature:(const USerializedSet* set)
uset_getSerializedRangeCount	uset.cpp	/^uset_getSerializedRangeCount(const USerializedSet* set) {$/;"	f	signature:(const USerializedSet* set)
uset_getSerializedSet	unicode/urename.h	1532;"	d
uset_getSerializedSet	unicode/uset.h	/^uset_getSerializedSet(USerializedSet* fillSet, const uint16_t* src, int32_t srcLength);$/;"	p	signature:(USerializedSet* fillSet, const uint16_t* src, int32_t srcLength)
uset_getSerializedSet	uset.cpp	/^uset_getSerializedSet(USerializedSet* fillSet, const uint16_t* src, int32_t srcLength) {$/;"	f	signature:(USerializedSet* fillSet, const uint16_t* src, int32_t srcLength)
uset_indexOf	unicode/urename.h	1533;"	d
uset_indexOf	unicode/uset.h	/^uset_indexOf(const USet* set, UChar32 c);$/;"	p	signature:(const USet* set, UChar32 c)
uset_indexOf	uset.cpp	/^uset_indexOf(const USet* set, UChar32 c) {$/;"	f	signature:(const USet* set, UChar32 c)
uset_isEmpty	unicode/urename.h	1534;"	d
uset_isEmpty	unicode/uset.h	/^uset_isEmpty(const USet* set);$/;"	p	signature:(const USet* set)
uset_isEmpty	uset.cpp	/^uset_isEmpty(const USet* set) {$/;"	f	signature:(const USet* set)
uset_isFrozen	unicode/urename.h	1535;"	d
uset_isFrozen	unicode/uset.h	/^uset_isFrozen(const USet *set);$/;"	p	signature:(const USet *set)
uset_isFrozen	uset.cpp	/^uset_isFrozen(const USet *set) {$/;"	f	signature:(const USet *set)
uset_open	unicode/urename.h	1536;"	d
uset_open	unicode/uset.h	/^uset_open(UChar32 start, UChar32 end);$/;"	p	signature:(UChar32 start, UChar32 end)
uset_open	uset.cpp	/^uset_open(UChar32 start, UChar32 end) {$/;"	f	signature:(UChar32 start, UChar32 end)
uset_openEmpty	unicode/urename.h	1537;"	d
uset_openEmpty	unicode/uset.h	/^uset_openEmpty();$/;"	p	signature:()
uset_openEmpty	uset.cpp	/^uset_openEmpty() {$/;"	f	signature:()
uset_openPattern	unicode/urename.h	1538;"	d
uset_openPattern	unicode/uset.h	/^uset_openPattern(const UChar* pattern, int32_t patternLength,$/;"	p	signature:(const UChar* pattern, int32_t patternLength, UErrorCode* ec)
uset_openPattern	uset_props.cpp	/^uset_openPattern(const UChar* pattern, int32_t patternLength,$/;"	f	signature:(const UChar* pattern, int32_t patternLength, UErrorCode* ec)
uset_openPatternOptions	unicode/urename.h	1539;"	d
uset_openPatternOptions	unicode/uset.h	/^uset_openPatternOptions(const UChar* pattern, int32_t patternLength,$/;"	p	signature:(const UChar* pattern, int32_t patternLength, uint32_t options, UErrorCode* ec)
uset_openPatternOptions	uset_props.cpp	/^uset_openPatternOptions(const UChar* pattern, int32_t patternLength,$/;"	f	signature:(const UChar* pattern, int32_t patternLength, uint32_t options, UErrorCode* ec)
uset_remove	unicode/urename.h	1540;"	d
uset_remove	unicode/uset.h	/^uset_remove(USet* set, UChar32 c);$/;"	p	signature:(USet* set, UChar32 c)
uset_remove	uset.cpp	/^uset_remove(USet* set, UChar32 c) {$/;"	f	signature:(USet* set, UChar32 c)
uset_removeAll	unicode/urename.h	1541;"	d
uset_removeAll	unicode/uset.h	/^uset_removeAll(USet* set, const USet* removeSet);$/;"	p	signature:(USet* set, const USet* removeSet)
uset_removeAll	uset.cpp	/^uset_removeAll(USet* set, const USet* remove) {$/;"	f	signature:(USet* set, const USet* remove)
uset_removeAllStrings	unicode/urename.h	1542;"	d
uset_removeAllStrings	unicode/uset.h	/^uset_removeAllStrings(USet* set);$/;"	p	signature:(USet* set)
uset_removeAllStrings	uset.cpp	/^uset_removeAllStrings(USet* set) {$/;"	f	signature:(USet* set)
uset_removeRange	unicode/urename.h	1543;"	d
uset_removeRange	unicode/uset.h	/^uset_removeRange(USet* set, UChar32 start, UChar32 end);$/;"	p	signature:(USet* set, UChar32 start, UChar32 end)
uset_removeRange	uset.cpp	/^uset_removeRange(USet* set, UChar32 start, UChar32 end) {$/;"	f	signature:(USet* set, UChar32 start, UChar32 end)
uset_removeString	unicode/urename.h	1544;"	d
uset_removeString	unicode/uset.h	/^uset_removeString(USet* set, const UChar* str, int32_t strLen);$/;"	p	signature:(USet* set, const UChar* str, int32_t strLen)
uset_removeString	uset.cpp	/^uset_removeString(USet* set, const UChar* str, int32_t strLen) {$/;"	f	signature:(USet* set, const UChar* str, int32_t strLen)
uset_resemblesPattern	unicode/urename.h	1545;"	d
uset_resemblesPattern	unicode/uset.h	/^uset_resemblesPattern(const UChar *pattern, int32_t patternLength,$/;"	p	signature:(const UChar *pattern, int32_t patternLength, int32_t pos)
uset_resemblesPattern	uset_props.cpp	/^uset_resemblesPattern(const UChar *pattern, int32_t patternLength,$/;"	f	signature:(const UChar *pattern, int32_t patternLength, int32_t pos)
uset_retain	unicode/urename.h	1546;"	d
uset_retain	unicode/uset.h	/^uset_retain(USet* set, UChar32 start, UChar32 end);$/;"	p	signature:(USet* set, UChar32 start, UChar32 end)
uset_retain	uset.cpp	/^uset_retain(USet* set, UChar32 start, UChar32 end) {$/;"	f	signature:(USet* set, UChar32 start, UChar32 end)
uset_retainAll	unicode/urename.h	1547;"	d
uset_retainAll	unicode/uset.h	/^uset_retainAll(USet* set, const USet* retain);$/;"	p	signature:(USet* set, const USet* retain)
uset_retainAll	uset.cpp	/^uset_retainAll(USet* set, const USet* retain) {$/;"	f	signature:(USet* set, const USet* retain)
uset_serialize	unicode/urename.h	1548;"	d
uset_serialize	unicode/uset.h	/^uset_serialize(const USet* set, uint16_t* dest, int32_t destCapacity, UErrorCode* pErrorCode);$/;"	p	signature:(const USet* set, uint16_t* dest, int32_t destCapacity, UErrorCode* pErrorCode)
uset_serialize	uset.cpp	/^uset_serialize(const USet* set, uint16_t* dest, int32_t destCapacity, UErrorCode* ec) {$/;"	f	signature:(const USet* set, uint16_t* dest, int32_t destCapacity, UErrorCode* ec)
uset_serializedContains	unicode/urename.h	1549;"	d
uset_serializedContains	unicode/uset.h	/^uset_serializedContains(const USerializedSet* set, UChar32 c);$/;"	p	signature:(const USerializedSet* set, UChar32 c)
uset_serializedContains	uset.cpp	/^uset_serializedContains(const USerializedSet* set, UChar32 c) {$/;"	f	signature:(const USerializedSet* set, UChar32 c)
uset_set	unicode/urename.h	1550;"	d
uset_set	unicode/uset.h	/^uset_set(USet* set,$/;"	p	signature:(USet* set, UChar32 start, UChar32 end)
uset_set	uset.cpp	/^uset_set(USet* set,$/;"	f	signature:(USet* set, UChar32 start, UChar32 end)
uset_setSerializedToOne	unicode/urename.h	1551;"	d
uset_setSerializedToOne	unicode/uset.h	/^uset_setSerializedToOne(USerializedSet* fillSet, UChar32 c);$/;"	p	signature:(USerializedSet* fillSet, UChar32 c)
uset_setSerializedToOne	uset.cpp	/^uset_setSerializedToOne(USerializedSet* fillSet, UChar32 c) {$/;"	f	signature:(USerializedSet* fillSet, UChar32 c)
uset_size	unicode/urename.h	1552;"	d
uset_size	unicode/uset.h	/^uset_size(const USet* set);$/;"	p	signature:(const USet* set)
uset_size	uset.cpp	/^uset_size(const USet* set) {$/;"	f	signature:(const USet* set)
uset_span	unicode/urename.h	1553;"	d
uset_span	unicode/uset.h	/^uset_span(const USet *set, const UChar *s, int32_t length, USetSpanCondition spanCondition);$/;"	p	signature:(const USet *set, const UChar *s, int32_t length, USetSpanCondition spanCondition)
uset_span	uset.cpp	/^uset_span(const USet *set, const UChar *s, int32_t length, USetSpanCondition spanCondition) {$/;"	f	signature:(const USet *set, const UChar *s, int32_t length, USetSpanCondition spanCondition)
uset_spanBack	unicode/urename.h	1554;"	d
uset_spanBack	unicode/uset.h	/^uset_spanBack(const USet *set, const UChar *s, int32_t length, USetSpanCondition spanCondition);$/;"	p	signature:(const USet *set, const UChar *s, int32_t length, USetSpanCondition spanCondition)
uset_spanBack	uset.cpp	/^uset_spanBack(const USet *set, const UChar *s, int32_t length, USetSpanCondition spanCondition) {$/;"	f	signature:(const USet *set, const UChar *s, int32_t length, USetSpanCondition spanCondition)
uset_spanBackUTF8	unicode/urename.h	1555;"	d
uset_spanBackUTF8	unicode/uset.h	/^uset_spanBackUTF8(const USet *set, const char *s, int32_t length, USetSpanCondition spanCondition);$/;"	p	signature:(const USet *set, const char *s, int32_t length, USetSpanCondition spanCondition)
uset_spanBackUTF8	uset.cpp	/^uset_spanBackUTF8(const USet *set, const char *s, int32_t length, USetSpanCondition spanCondition) {$/;"	f	signature:(const USet *set, const char *s, int32_t length, USetSpanCondition spanCondition)
uset_spanUTF8	unicode/urename.h	1556;"	d
uset_spanUTF8	unicode/uset.h	/^uset_spanUTF8(const USet *set, const char *s, int32_t length, USetSpanCondition spanCondition);$/;"	p	signature:(const USet *set, const char *s, int32_t length, USetSpanCondition spanCondition)
uset_spanUTF8	uset.cpp	/^uset_spanUTF8(const USet *set, const char *s, int32_t length, USetSpanCondition spanCondition) {$/;"	f	signature:(const USet *set, const char *s, int32_t length, USetSpanCondition spanCondition)
uset_toPattern	unicode/urename.h	1557;"	d
uset_toPattern	unicode/uset.h	/^uset_toPattern(const USet* set,$/;"	p	signature:(const USet* set, UChar* result, int32_t resultCapacity, UBool escapeUnprintable, UErrorCode* ec)
uset_toPattern	uset_props.cpp	/^uset_toPattern(const USet* set,$/;"	f	signature:(const USet* set, UChar* result, int32_t resultCapacity, UBool escapeUnprintable, UErrorCode* ec)
uspoof_areConfusable	unicode/urename.h	1558;"	d
uspoof_areConfusableUTF8	unicode/urename.h	1559;"	d
uspoof_areConfusableUnicodeString	unicode/urename.h	1560;"	d
uspoof_check	unicode/urename.h	1561;"	d
uspoof_checkUTF8	unicode/urename.h	1562;"	d
uspoof_checkUnicodeString	unicode/urename.h	1563;"	d
uspoof_clone	unicode/urename.h	1564;"	d
uspoof_close	unicode/urename.h	1565;"	d
uspoof_getAllowedChars	unicode/urename.h	1566;"	d
uspoof_getAllowedLocales	unicode/urename.h	1567;"	d
uspoof_getAllowedUnicodeSet	unicode/urename.h	1568;"	d
uspoof_getChecks	unicode/urename.h	1569;"	d
uspoof_getSkeleton	unicode/urename.h	1570;"	d
uspoof_getSkeletonUTF8	unicode/urename.h	1571;"	d
uspoof_getSkeletonUnicodeString	unicode/urename.h	1572;"	d
uspoof_open	unicode/urename.h	1573;"	d
uspoof_openFromSerialized	unicode/urename.h	1574;"	d
uspoof_openFromSource	unicode/urename.h	1575;"	d
uspoof_serialize	unicode/urename.h	1576;"	d
uspoof_setAllowedChars	unicode/urename.h	1577;"	d
uspoof_setAllowedLocales	unicode/urename.h	1578;"	d
uspoof_setAllowedUnicodeSet	unicode/urename.h	1579;"	d
uspoof_setChecks	unicode/urename.h	1580;"	d
uspoof_swap	unicode/urename.h	1581;"	d
usprepMutex	usprep.cpp	/^static UMTX usprepMutex = NULL;$/;"	v	file:
usprepTypeNames	sprpimpl.h	/^static const char* usprepTypeNames[] ={$/;"	v
usprep_cleanup	usprep.cpp	/^static UBool U_CALLCONV usprep_cleanup(void){$/;"	f	file:	signature:(void)
usprep_close	unicode/urename.h	1582;"	d
usprep_close	unicode/usprep.h	/^usprep_close(UStringPrepProfile* profile);$/;"	p	signature:(UStringPrepProfile* profile)
usprep_close	usprep.cpp	/^usprep_close(UStringPrepProfile* profile){$/;"	f	signature:(UStringPrepProfile* profile)
usprep_getProfile	usprep.cpp	/^usprep_getProfile(const char* path, $/;"	f	file:	signature:(const char* path, const char* name, UErrorCode *status)
usprep_internal_flushCache	usprep.cpp	/^usprep_internal_flushCache(UBool noRefCount){$/;"	f	file:	signature:(UBool noRefCount)
usprep_map	usprep.cpp	/^usprep_map(  const UStringPrepProfile* profile, $/;"	f	file:	signature:( const UStringPrepProfile* profile, const UChar* src, int32_t srcLength, UChar* dest, int32_t destCapacity, int32_t options, UParseError* parseError, UErrorCode* status )
usprep_normalize	usprep.cpp	/^usprep_normalize(   const UChar* src, int32_t srcLength, $/;"	f	file:	signature:( const UChar* src, int32_t srcLength, UChar* dest, int32_t destCapacity, UErrorCode* status )
usprep_open	unicode/urename.h	1583;"	d
usprep_open	unicode/usprep.h	/^usprep_open(const char* path, $/;"	p	signature:(const char* path, const char* fileName, UErrorCode* status)
usprep_open	usprep.cpp	/^usprep_open(const char* path, $/;"	f	signature:(const char* path, const char* name, UErrorCode* status)
usprep_openByType	unicode/urename.h	1584;"	d
usprep_openByType	unicode/usprep.h	/^usprep_openByType(UStringPrepProfileType type,$/;"	p	signature:(UStringPrepProfileType type, UErrorCode* status)
usprep_openByType	usprep.cpp	/^usprep_openByType(UStringPrepProfileType type,$/;"	f	signature:(UStringPrepProfileType type, UErrorCode* status)
usprep_prepare	unicode/urename.h	1585;"	d
usprep_prepare	unicode/usprep.h	/^usprep_prepare(   const UStringPrepProfile* prep,$/;"	p	signature:( const UStringPrepProfile* prep, const UChar* src, int32_t srcLength, UChar* dest, int32_t destCapacity, int32_t options, UParseError* parseError, UErrorCode* status )
usprep_prepare	usprep.cpp	/^usprep_prepare(   const UStringPrepProfile* profile,$/;"	f	signature:( const UStringPrepProfile* profile, const UChar* src, int32_t srcLength, UChar* dest, int32_t destCapacity, int32_t options, UParseError* parseError, UErrorCode* status )
usprep_swap	sprpimpl.h	/^usprep_swap(const UDataSwapper *ds,$/;"	p	signature:(const UDataSwapper *ds, const void *inData, int32_t length, void *outData, UErrorCode *pErrorCode)
usprep_swap	unicode/urename.h	1586;"	d
usprep_swap	usprep.cpp	/^usprep_swap(const UDataSwapper *ds,$/;"	f	signature:(const UDataSwapper *ds, const void *inData, int32_t length, void *outData, UErrorCode *pErrorCode)
usprep_unload	usprep.cpp	/^usprep_unload(UStringPrepProfile* data){$/;"	f	file:	signature:(UStringPrepProfile* data)
ustr_foldCase	unicode/urename.h	1587;"	d
ustr_foldCase	ustr_imp.h	/^ustr_foldCase(const UCaseProps *csp,$/;"	p	signature:(const UCaseProps *csp, UChar *dest, int32_t destCapacity, const UChar *src, int32_t srcLength, uint32_t options, UErrorCode *pErrorCode)
ustr_foldCase	ustrcase.c	/^ustr_foldCase(const UCaseProps *csp,$/;"	f	signature:(const UCaseProps *csp, UChar *dest, int32_t destCapacity, const UChar *src, int32_t srcLength, uint32_t options, UErrorCode *pErrorCode)
ustr_toLower	unicode/urename.h	1588;"	d
ustr_toLower	ustr_imp.h	/^ustr_toLower(const UCaseProps *csp,$/;"	p	signature:(const UCaseProps *csp, UChar *dest, int32_t destCapacity, const UChar *src, int32_t srcLength, const char *locale, UErrorCode *pErrorCode)
ustr_toLower	ustrcase.c	/^ustr_toLower(const UCaseProps *csp,$/;"	f	signature:(const UCaseProps *csp, UChar *dest, int32_t destCapacity, const UChar *src, int32_t srcLength, const char *locale, UErrorCode *pErrorCode)
ustr_toTitle	unicode/urename.h	1589;"	d
ustr_toTitle	ustr_imp.h	/^ustr_toTitle(const UCaseProps *csp,$/;"	p	signature:(const UCaseProps *csp, UChar *dest, int32_t destCapacity, const UChar *src, int32_t srcLength, UBreakIterator *titleIter, const char *locale, uint32_t options, UErrorCode *pErrorCode)
ustr_toTitle	ustrcase.c	/^ustr_toTitle(const UCaseProps *csp,$/;"	f	signature:(const UCaseProps *csp, UChar *dest, int32_t destCapacity, const UChar *src, int32_t srcLength, UBreakIterator *titleIter, const char *locale, uint32_t options, UErrorCode *pErrorCode)
ustr_toUpper	unicode/urename.h	1590;"	d
ustr_toUpper	ustr_imp.h	/^ustr_toUpper(const UCaseProps *csp,$/;"	p	signature:(const UCaseProps *csp, UChar *dest, int32_t destCapacity, const UChar *src, int32_t srcLength, const char *locale, UErrorCode *pErrorCode)
ustr_toUpper	ustrcase.c	/^ustr_toUpper(const UCaseProps *csp,$/;"	f	signature:(const UCaseProps *csp, UChar *dest, int32_t destCapacity, const UChar *src, int32_t srcLength, const char *locale, UErrorCode *pErrorCode)
ustrenum_close	ustrenum.cpp	/^ustrenum_close(UEnumeration* en) {$/;"	f	file:	signature:(UEnumeration* en)
ustrenum_count	ustrenum.cpp	/^ustrenum_count(UEnumeration* en,$/;"	f	file:	signature:(UEnumeration* en, UErrorCode* ec)
ustrenum_next	ustrenum.cpp	/^ustrenum_next(UEnumeration* en,$/;"	f	file:	signature:(UEnumeration* en, int32_t* resultLength, UErrorCode* ec)
ustrenum_reset	ustrenum.cpp	/^ustrenum_reset(UEnumeration* en,$/;"	f	file:	signature:(UEnumeration* en, UErrorCode* ec)
ustrenum_unext	ustrenum.cpp	/^ustrenum_unext(UEnumeration* en,$/;"	f	file:	signature:(UEnumeration* en, int32_t* resultLength, UErrorCode* ec)
ut	utext.cpp	/^    UText          ut;$/;"	m	struct:ExtendedUText	file:	access:public
utext_access	utext.cpp	/^utext_access(UText *ut, int64_t index, UBool forward) {$/;"	f	file:	signature:(UText *ut, int64_t index, UBool forward)
utext_caseCompare	unicode/uintrnal.h	128;"	d
utext_caseCompare	unicode/urename.h	1591;"	d
utext_caseCompare	unicode/utext.h	/^utext_caseCompare(UText *s1, int32_t length1,$/;"	p	signature:(UText *s1, int32_t length1, UText *s2, int32_t length2, uint32_t options, UErrorCode *pErrorCode)
utext_caseCompare	utext.cpp	/^utext_caseCompare(UText *s1, int32_t length1,$/;"	f	signature:(UText *s1, int32_t length1, UText *s2, int32_t length2, uint32_t options, UErrorCode *pErrorCode)
utext_caseCompareNativeLimit	unicode/uintrnal.h	129;"	d
utext_caseCompareNativeLimit	unicode/urename.h	1592;"	d
utext_caseCompareNativeLimit	unicode/utext.h	/^utext_caseCompareNativeLimit(UText *s1, int64_t limit1,$/;"	p	signature:(UText *s1, int64_t limit1, UText *s2, int64_t limit2, uint32_t options, UErrorCode *pErrorCode)
utext_caseCompareNativeLimit	utext.cpp	/^utext_caseCompareNativeLimit(UText *s1, int64_t limit1,$/;"	f	signature:(UText *s1, int64_t limit1, UText *s2, int64_t limit2, uint32_t options, UErrorCode *pErrorCode)
utext_caseCompareNativeLimit_4_6	unicode/uintrnal.h	239;"	d
utext_caseCompare_4_6	unicode/uintrnal.h	240;"	d
utext_char32At	unicode/urename.h	1593;"	d
utext_char32At	unicode/utext.h	/^utext_char32At(UText *ut, int64_t nativeIndex);$/;"	p	signature:(UText *ut, int64_t nativeIndex)
utext_char32At	utext.cpp	/^utext_char32At(UText *ut, int64_t nativeIndex) {$/;"	f	signature:(UText *ut, int64_t nativeIndex)
utext_clone	unicode/urename.h	1594;"	d
utext_clone	unicode/utext.h	/^utext_clone(UText *dest, const UText *src, UBool deep, UBool readOnly, UErrorCode *status);$/;"	p	signature:(UText *dest, const UText *src, UBool deep, UBool readOnly, UErrorCode *status)
utext_clone	utext.cpp	/^utext_clone(UText *dest, const UText *src, UBool deep, UBool readOnly, UErrorCode *status) {$/;"	f	signature:(UText *dest, const UText *src, UBool deep, UBool readOnly, UErrorCode *status)
utext_close	unicode/urename.h	1595;"	d
utext_close	unicode/utext.h	/^utext_close(UText *ut);$/;"	p	signature:(UText *ut)
utext_close	utext.cpp	/^utext_close(UText *ut) {$/;"	f	signature:(UText *ut)
utext_compare	unicode/uintrnal.h	130;"	d
utext_compare	unicode/urename.h	1596;"	d
utext_compare	unicode/utext.h	/^utext_compare(UText *s1, int32_t length1,$/;"	p	signature:(UText *s1, int32_t length1, UText *s2, int32_t length2)
utext_compare	utext.cpp	/^utext_compare(UText *s1, int32_t length1,$/;"	f	signature:(UText *s1, int32_t length1, UText *s2, int32_t length2)
utext_compareNativeLimit	unicode/uintrnal.h	131;"	d
utext_compareNativeLimit	unicode/urename.h	1597;"	d
utext_compareNativeLimit	unicode/utext.h	/^utext_compareNativeLimit(UText *s1, int64_t limit1,$/;"	p	signature:(UText *s1, int64_t limit1, UText *s2, int64_t limit2)
utext_compareNativeLimit	utext.cpp	/^utext_compareNativeLimit(UText *s1, int64_t limit1,$/;"	f	signature:(UText *s1, int64_t limit1, UText *s2, int64_t limit2)
utext_compareNativeLimit_4_6	unicode/uintrnal.h	241;"	d
utext_compare_4_6	unicode/uintrnal.h	242;"	d
utext_copy	unicode/urename.h	1598;"	d
utext_copy	unicode/utext.h	/^utext_copy(UText *ut,$/;"	p	signature:(UText *ut, int64_t nativeStart, int64_t nativeLimit, int64_t destIndex, UBool move, UErrorCode *status)
utext_copy	utext.cpp	/^utext_copy(UText *ut,$/;"	f	signature:(UText *ut, int64_t nativeStart, int64_t nativeLimit, int64_t destIndex, UBool move, UErrorCode *status)
utext_current32	unicode/urename.h	1599;"	d
utext_current32	unicode/utext.h	/^utext_current32(UText *ut);$/;"	p	signature:(UText *ut)
utext_current32	utext.cpp	/^utext_current32(UText *ut) {$/;"	f	signature:(UText *ut)
utext_equals	unicode/urename.h	1600;"	d
utext_equals	unicode/utext.h	/^utext_equals(const UText *a, const UText *b);$/;"	p	signature:(const UText *a, const UText *b)
utext_equals	utext.cpp	/^utext_equals(const UText *a, const UText *b) {$/;"	f	signature:(const UText *a, const UText *b)
utext_extract	unicode/urename.h	1601;"	d
utext_extract	unicode/utext.h	/^utext_extract(UText *ut,$/;"	p	signature:(UText *ut, int64_t nativeStart, int64_t nativeLimit, UChar *dest, int32_t destCapacity, UErrorCode *status)
utext_extract	utext.cpp	/^utext_extract(UText *ut,$/;"	f	signature:(UText *ut, int64_t start, int64_t limit, UChar *dest, int32_t destCapacity, UErrorCode *status)
utext_freeze	unicode/urename.h	1602;"	d
utext_freeze	unicode/utext.h	/^utext_freeze(UText *ut);$/;"	p	signature:(UText *ut)
utext_freeze	utext.cpp	/^utext_freeze(UText *ut) {$/;"	f	signature:(UText *ut)
utext_getNativeIndex	unicode/urename.h	1603;"	d
utext_getNativeIndex	unicode/utext.h	/^utext_getNativeIndex(const UText *ut);$/;"	p	signature:(const UText *ut)
utext_getNativeIndex	utext.cpp	/^utext_getNativeIndex(const UText *ut) {$/;"	f	signature:(const UText *ut)
utext_getPreviousNativeIndex	unicode/urename.h	1604;"	d
utext_getPreviousNativeIndex	unicode/utext.h	/^utext_getPreviousNativeIndex(UText *ut); $/;"	p	signature:(UText *ut)
utext_getPreviousNativeIndex	utext.cpp	/^utext_getPreviousNativeIndex(UText *ut) {$/;"	f	signature:(UText *ut)
utext_hasMetaData	unicode/urename.h	1605;"	d
utext_hasMetaData	unicode/utext.h	/^utext_hasMetaData(const UText *ut);$/;"	p	signature:(const UText *ut)
utext_hasMetaData	utext.cpp	/^utext_hasMetaData(const UText *ut)$/;"	f	signature:(const UText *ut)
utext_isLengthExpensive	unicode/urename.h	1606;"	d
utext_isLengthExpensive	unicode/utext.h	/^utext_isLengthExpensive(const UText *ut);$/;"	p	signature:(const UText *ut)
utext_isLengthExpensive	utext.cpp	/^utext_isLengthExpensive(const UText *ut) {$/;"	f	signature:(const UText *ut)
utext_isWritable	unicode/urename.h	1607;"	d
utext_isWritable	unicode/utext.h	/^utext_isWritable(const UText *ut);$/;"	p	signature:(const UText *ut)
utext_isWritable	utext.cpp	/^utext_isWritable(const UText *ut)$/;"	f	signature:(const UText *ut)
utext_moveIndex32	unicode/urename.h	1608;"	d
utext_moveIndex32	unicode/utext.h	/^utext_moveIndex32(UText *ut, int32_t delta);$/;"	p	signature:(UText *ut, int32_t delta)
utext_moveIndex32	utext.cpp	/^utext_moveIndex32(UText *ut, int32_t delta) {$/;"	f	signature:(UText *ut, int32_t delta)
utext_nativeLength	unicode/urename.h	1609;"	d
utext_nativeLength	unicode/utext.h	/^utext_nativeLength(UText *ut);$/;"	p	signature:(UText *ut)
utext_nativeLength	utext.cpp	/^utext_nativeLength(UText *ut) {$/;"	f	signature:(UText *ut)
utext_next32	unicode/urename.h	1610;"	d
utext_next32	unicode/utext.h	/^utext_next32(UText *ut);$/;"	p	signature:(UText *ut)
utext_next32	utext.cpp	/^utext_next32(UText *ut) {$/;"	f	signature:(UText *ut)
utext_next32From	unicode/urename.h	1611;"	d
utext_next32From	unicode/utext.h	/^utext_next32From(UText *ut, int64_t nativeIndex);$/;"	p	signature:(UText *ut, int64_t nativeIndex)
utext_next32From	utext.cpp	/^utext_next32From(UText *ut, int64_t index) {$/;"	f	signature:(UText *ut, int64_t index)
utext_openCharacterIterator	unicode/urename.h	1612;"	d
utext_openCharacterIterator	unicode/utext.h	/^utext_openCharacterIterator(UText *ut, U_NAMESPACE_QUALIFIER CharacterIterator *ic, UErrorCode *status);$/;"	p	signature:(UText *ut, U_NAMESPACE_QUALIFIER CharacterIterator *ic, UErrorCode *status)
utext_openCharacterIterator	utext.cpp	/^utext_openCharacterIterator(UText *ut, CharacterIterator *ci, UErrorCode *status) {$/;"	f	signature:(UText *ut, CharacterIterator *ci, UErrorCode *status)
utext_openConstUnicodeString	unicode/urename.h	1613;"	d
utext_openConstUnicodeString	unicode/utext.h	/^utext_openConstUnicodeString(UText *ut, const U_NAMESPACE_QUALIFIER UnicodeString *s, UErrorCode *status);$/;"	p	signature:(UText *ut, const U_NAMESPACE_QUALIFIER UnicodeString *s, UErrorCode *status)
utext_openConstUnicodeString	utext.cpp	/^utext_openConstUnicodeString(UText *ut, const UnicodeString *s, UErrorCode *status) {$/;"	f	signature:(UText *ut, const UnicodeString *s, UErrorCode *status)
utext_openReplaceable	unicode/urename.h	1614;"	d
utext_openReplaceable	unicode/utext.h	/^utext_openReplaceable(UText *ut, U_NAMESPACE_QUALIFIER Replaceable *rep, UErrorCode *status);$/;"	p	signature:(UText *ut, U_NAMESPACE_QUALIFIER Replaceable *rep, UErrorCode *status)
utext_openReplaceable	utext.cpp	/^utext_openReplaceable(UText *ut, Replaceable *rep, UErrorCode *status)$/;"	f	signature:(UText *ut, Replaceable *rep, UErrorCode *status)
utext_openUChars	unicode/urename.h	1615;"	d
utext_openUChars	unicode/utext.h	/^utext_openUChars(UText *ut, const UChar *s, int64_t length, UErrorCode *status);$/;"	p	signature:(UText *ut, const UChar *s, int64_t length, UErrorCode *status)
utext_openUChars	utext.cpp	/^utext_openUChars(UText *ut, const UChar *s, int64_t length, UErrorCode *status) {$/;"	f	signature:(UText *ut, const UChar *s, int64_t length, UErrorCode *status)
utext_openUTF8	unicode/urename.h	1616;"	d
utext_openUTF8	unicode/utext.h	/^utext_openUTF8(UText *ut, const char *s, int64_t length, UErrorCode *status);$/;"	p	signature:(UText *ut, const char *s, int64_t length, UErrorCode *status)
utext_openUTF8	utext.cpp	/^utext_openUTF8(UText *ut, const char *s, int64_t length, UErrorCode *status) {$/;"	f	signature:(UText *ut, const char *s, int64_t length, UErrorCode *status)
utext_openUnicodeString	unicode/urename.h	1617;"	d
utext_openUnicodeString	unicode/utext.h	/^utext_openUnicodeString(UText *ut, U_NAMESPACE_QUALIFIER UnicodeString *s, UErrorCode *status);$/;"	p	signature:(UText *ut, U_NAMESPACE_QUALIFIER UnicodeString *s, UErrorCode *status)
utext_openUnicodeString	utext.cpp	/^utext_openUnicodeString(UText *ut, UnicodeString *s, UErrorCode *status) {$/;"	f	signature:(UText *ut, UnicodeString *s, UErrorCode *status)
utext_previous32	unicode/urename.h	1618;"	d
utext_previous32	unicode/utext.h	/^utext_previous32(UText *ut);$/;"	p	signature:(UText *ut)
utext_previous32	utext.cpp	/^utext_previous32(UText *ut) {$/;"	f	signature:(UText *ut)
utext_previous32From	unicode/urename.h	1619;"	d
utext_previous32From	unicode/utext.h	/^utext_previous32From(UText *ut, int64_t nativeIndex);$/;"	p	signature:(UText *ut, int64_t nativeIndex)
utext_previous32From	utext.cpp	/^utext_previous32From(UText *ut, int64_t index) {$/;"	f	signature:(UText *ut, int64_t index)
utext_replace	unicode/urename.h	1620;"	d
utext_replace	unicode/utext.h	/^utext_replace(UText *ut,$/;"	p	signature:(UText *ut, int64_t nativeStart, int64_t nativeLimit, const UChar *replacementText, int32_t replacementLength, UErrorCode *status)
utext_replace	utext.cpp	/^utext_replace(UText *ut,$/;"	f	signature:(UText *ut, int64_t nativeStart, int64_t nativeLimit, const UChar *replacementText, int32_t replacementLength, UErrorCode *status)
utext_setNativeIndex	unicode/urename.h	1621;"	d
utext_setNativeIndex	unicode/utext.h	/^utext_setNativeIndex(UText *ut, int64_t nativeIndex);$/;"	p	signature:(UText *ut, int64_t nativeIndex)
utext_setNativeIndex	utext.cpp	/^utext_setNativeIndex(UText *ut, int64_t index) {$/;"	f	signature:(UText *ut, int64_t index)
utext_setup	unicode/urename.h	1622;"	d
utext_setup	unicode/utext.h	/^utext_setup(UText *ut, int32_t extraSpace, UErrorCode *status);$/;"	p	signature:(UText *ut, int32_t extraSpace, UErrorCode *status)
utext_setup	utext.cpp	/^utext_setup(UText *ut, int32_t extraSpace, UErrorCode *status) {$/;"	f	signature:(UText *ut, int32_t extraSpace, UErrorCode *status)
utext_strFromUTF8	utext.cpp	/^utext_strFromUTF8(UChar *dest,$/;"	f	file:	signature:(UChar *dest, int32_t destCapacity, int32_t *pDestLength, const char* src, int32_t srcLength, UErrorCode *pErrorCode )
utf16BEIterator	uiter.cpp	/^static const UCharIterator utf16BEIterator={$/;"	v	file:
utf16BEIteratorCurrent	uiter.cpp	/^utf16BEIteratorCurrent(UCharIterator *iter) {$/;"	f	file:	signature:(UCharIterator *iter)
utf16BEIteratorGet	uiter.cpp	/^utf16BEIteratorGet(UCharIterator *iter, int32_t index) {$/;"	f	file:	signature:(UCharIterator *iter, int32_t index)
utf16BEIteratorNext	uiter.cpp	/^utf16BEIteratorNext(UCharIterator *iter) {$/;"	f	file:	signature:(UCharIterator *iter)
utf16BEIteratorPrevious	uiter.cpp	/^utf16BEIteratorPrevious(UCharIterator *iter) {$/;"	f	file:	signature:(UCharIterator *iter)
utf16BE_strlen	uiter.cpp	/^utf16BE_strlen(const char *s) {$/;"	f	file:	signature:(const char *s)
utf16_caseContextIterator	ustrcase.c	/^utf16_caseContextIterator(void *context, int8_t dir) {$/;"	f	file:	signature:(void *context, int8_t dir)
utf32BOM	ucnv_u32.c	/^static const char utf32BOM[8]={ 0, 0, (char)0xfe, (char)0xff,    (char)0xff, (char)0xfe, 0, 0 };$/;"	v	file:
utf8	unisetspan.h	/^    uint8_t *utf8;$/;"	m	class:UnicodeSetStringSpan	access:private
utf8Friendly	ucnvmbcs.h	/^    UBool utf8Friendly;                     \/* for utf8Friendly data *\/$/;"	m	struct:UConverterMBCSTable	access:public
utf8Funcs	utext.cpp	/^static const struct UTextFuncs utf8Funcs = $/;"	v	typeref:struct:UTextFuncs	file:
utf8Iterator	uiter.cpp	/^static const UCharIterator utf8Iterator={$/;"	v	file:
utf8IteratorCurrent	uiter.cpp	/^utf8IteratorCurrent(UCharIterator *iter) {$/;"	f	file:	signature:(UCharIterator *iter)
utf8IteratorGetIndex	uiter.cpp	/^utf8IteratorGetIndex(UCharIterator *iter, UCharIteratorOrigin origin) {$/;"	f	file:	signature:(UCharIterator *iter, UCharIteratorOrigin origin)
utf8IteratorGetState	uiter.cpp	/^utf8IteratorGetState(const UCharIterator *iter) {$/;"	f	file:	signature:(const UCharIterator *iter)
utf8IteratorHasNext	uiter.cpp	/^utf8IteratorHasNext(UCharIterator *iter) {$/;"	f	file:	signature:(UCharIterator *iter)
utf8IteratorHasPrevious	uiter.cpp	/^utf8IteratorHasPrevious(UCharIterator *iter) {$/;"	f	file:	signature:(UCharIterator *iter)
utf8IteratorMove	uiter.cpp	/^utf8IteratorMove(UCharIterator *iter, int32_t delta, UCharIteratorOrigin origin) {$/;"	f	file:	signature:(UCharIterator *iter, int32_t delta, UCharIteratorOrigin origin)
utf8IteratorNext	uiter.cpp	/^utf8IteratorNext(UCharIterator *iter) {$/;"	f	file:	signature:(UCharIterator *iter)
utf8IteratorPrevious	uiter.cpp	/^utf8IteratorPrevious(UCharIterator *iter) {$/;"	f	file:	signature:(UCharIterator *iter)
utf8IteratorSetState	uiter.cpp	/^utf8IteratorSetState(UCharIterator *iter,$/;"	f	file:	signature:(UCharIterator *iter, uint32_t state, UErrorCode *pErrorCode)
utf8Length	unisetspan.h	/^    int32_t utf8Length;$/;"	m	class:UnicodeSetStringSpan	access:private
utf8Lengths	unisetspan.h	/^    int32_t *utf8Lengths;$/;"	m	class:UnicodeSetStringSpan	access:private
utf8TextAccess	utext.cpp	/^utf8TextAccess(UText *ut, int64_t index, UBool forward) {$/;"	f	file:	signature:(UText *ut, int64_t index, UBool forward)
utf8TextClone	utext.cpp	/^utf8TextClone(UText *dest, const UText *src, UBool deep, UErrorCode *status)$/;"	f	file:	signature:(UText *dest, const UText *src, UBool deep, UErrorCode *status)
utf8TextClose	utext.cpp	/^utf8TextClose(UText *ut) {$/;"	f	file:	signature:(UText *ut)
utf8TextExtract	utext.cpp	/^utf8TextExtract(UText *ut,$/;"	f	file:	signature:(UText *ut, int64_t start, int64_t limit, UChar *dest, int32_t destCapacity, UErrorCode *pErrorCode)
utf8TextLength	utext.cpp	/^utf8TextLength(UText *ut) {$/;"	f	file:	signature:(UText *ut)
utf8TextMapIndexToUTF16	utext.cpp	/^utf8TextMapIndexToUTF16(const UText *ut, int64_t index64) {$/;"	f	file:	signature:(const UText *ut, int64_t index64)
utf8TextMapOffsetToNative	utext.cpp	/^utf8TextMapOffsetToNative(const UText *ut) {$/;"	f	file:	signature:(const UText *ut)
utf8_appendCharSafeBody	unicode/uintrnal.h	132;"	d
utf8_appendCharSafeBody	unicode/urename.h	1623;"	d
utf8_appendCharSafeBody	unicode/utf8.h	/^utf8_appendCharSafeBody(uint8_t *s, int32_t i, int32_t length, UChar32 c, UBool *pIsError);$/;"	p	signature:(uint8_t *s, int32_t i, int32_t length, UChar32 c, UBool *pIsError)
utf8_appendCharSafeBody	utf_impl.c	/^utf8_appendCharSafeBody(uint8_t *s, int32_t i, int32_t length, UChar32 c, UBool *pIsError) {$/;"	f	signature:(uint8_t *s, int32_t i, int32_t length, UChar32 c, UBool *pIsError)
utf8_appendCharSafeBody_4_6	unicode/uintrnal.h	243;"	d
utf8_back1SafeBody	unicode/uintrnal.h	133;"	d
utf8_back1SafeBody	unicode/urename.h	1624;"	d
utf8_back1SafeBody	unicode/utf8.h	/^utf8_back1SafeBody(const uint8_t *s, int32_t start, int32_t i);$/;"	p	signature:(const uint8_t *s, int32_t start, int32_t i)
utf8_back1SafeBody	utf_impl.c	/^utf8_back1SafeBody(const uint8_t *s, int32_t start, int32_t i) {$/;"	f	signature:(const uint8_t *s, int32_t start, int32_t i)
utf8_back1SafeBody_4_6	unicode/uintrnal.h	244;"	d
utf8_caseContextIterator	ucasemap.c	/^utf8_caseContextIterator(void *context, int8_t dir) {$/;"	f	file:	signature:(void *context, int8_t dir)
utf8_countTrailBytes	unicode/uintrnal.h	134;"	d
utf8_countTrailBytes	unicode/urename.h	1625;"	d
utf8_countTrailBytes	unicode/utf8.h	/^utf8_countTrailBytes[256];$/;"	v
utf8_countTrailBytes	utf_impl.c	/^utf8_countTrailBytes[256]={$/;"	v
utf8_countTrailBytes_4_6	unicode/uintrnal.h	245;"	d
utf8_errorValue	utf_impl.c	/^utf8_errorValue[6]={$/;"	v	file:
utf8_foldCase	ucasemap.c	/^utf8_foldCase(const UCaseProps *csp,$/;"	f	file:	signature:(const UCaseProps *csp, uint8_t *dest, int32_t destCapacity, const uint8_t *src, int32_t srcLength, uint32_t options, UErrorCode *pErrorCode)
utf8_minChar32	ucnv_u8.c	/^utf8_minChar32[7]={ 0, 0, 0x80, 0x800, 0x10000, 0xffffffff, 0xffffffff };$/;"	v	file:
utf8_minLegal	ucnv_u8.c	/^utf8_minLegal[5]={ 0, 0, 0x80, 0x800, 0x10000 };$/;"	v	file:
utf8_minLegal	ucnvmbcs.c	/^utf8_minLegal[5]={ 0, 0, 0x80, 0x800, 0x10000 };$/;"	v	file:
utf8_minLegal	ustrtrns.c	/^utf8_minLegal[4]={ 0, 0x80, 0x800, 0x10000 };$/;"	v	file:
utf8_minLegal	utf_impl.c	/^utf8_minLegal[4]={ 0, 0x80, 0x800, 0x10000 };$/;"	v	file:
utf8_nextCharSafeBody	unicode/uintrnal.h	135;"	d
utf8_nextCharSafeBody	unicode/urename.h	1626;"	d
utf8_nextCharSafeBody	unicode/utf8.h	/^utf8_nextCharSafeBody(const uint8_t *s, int32_t *pi, int32_t length, UChar32 c, UBool strict);$/;"	p	signature:(const uint8_t *s, int32_t *pi, int32_t length, UChar32 c, UBool strict)
utf8_nextCharSafeBody	utf_impl.c	/^utf8_nextCharSafeBody(const uint8_t *s, int32_t *pi, int32_t length, UChar32 c, UBool strict) {$/;"	f	signature:(const uint8_t *s, int32_t *pi, int32_t length, UChar32 c, UBool strict)
utf8_nextCharSafeBodyPointer	ustrtrns.c	/^utf8_nextCharSafeBodyPointer(const uint8_t **ps, const uint8_t *limit, UChar32 c) {$/;"	f	file:	signature:(const uint8_t **ps, const uint8_t *limit, UChar32 c)
utf8_nextCharSafeBodyTerminated	ustrtrns.c	/^utf8_nextCharSafeBodyTerminated(const uint8_t **ps, UChar32 c) {$/;"	f	file:	signature:(const uint8_t **ps, UChar32 c)
utf8_nextCharSafeBody_4_6	unicode/uintrnal.h	246;"	d
utf8_offsets	ucnv_u8.c	/^utf8_offsets[7]={ 0, 0, 0x3080, 0xE2080, 0x3C82080 };$/;"	v	file:
utf8_offsets	ucnvmbcs.c	/^utf8_offsets[7]={ 0, 0, 0x3080, 0xE2080, 0x3C82080 };$/;"	v	file:
utf8_prevCharSafeBody	unicode/uintrnal.h	136;"	d
utf8_prevCharSafeBody	unicode/urename.h	1627;"	d
utf8_prevCharSafeBody	unicode/utf8.h	/^utf8_prevCharSafeBody(const uint8_t *s, int32_t start, int32_t *pi, UChar32 c, UBool strict);$/;"	p	signature:(const uint8_t *s, int32_t start, int32_t *pi, UChar32 c, UBool strict)
utf8_prevCharSafeBody	utf_impl.c	/^utf8_prevCharSafeBody(const uint8_t *s, int32_t start, int32_t *pi, UChar32 c, UBool strict) {$/;"	f	signature:(const uint8_t *s, int32_t start, int32_t *pi, UChar32 c, UBool strict)
utf8_prevCharSafeBody_4_6	unicode/uintrnal.h	247;"	d
util64_fromDouble	unicode/urename.h	2232;"	d
util64_pow	unicode/urename.h	2233;"	d
util64_tou	unicode/urename.h	2234;"	d
utmscale_fromInt64	unicode/urename.h	1628;"	d
utmscale_getTimeScaleValue	unicode/urename.h	1629;"	d
utmscale_toInt64	unicode/urename.h	1630;"	d
utrace_cleanup	ucln_cmn.h	/^U_CFUNC UBool utrace_cleanup(void);$/;"	p	signature:(void)
utrace_cleanup	unicode/urename.h	1631;"	d
utrace_cleanup	utrace.c	/^utrace_cleanup() {$/;"	f
utrace_data	unicode/urename.h	1632;"	d
utrace_data	utrace.c	/^utrace_data(int32_t fnNumber, int32_t level, const char *fmt, ...) {$/;"	f	signature:(int32_t fnNumber, int32_t level, const char *fmt, ...)
utrace_data	utracimp.h	/^utrace_data(int32_t utraceFnNumber, int32_t level, const char *fmt, ...);$/;"	p	signature:(int32_t utraceFnNumber, int32_t level, const char *fmt, ...)
utrace_entry	unicode/urename.h	1633;"	d
utrace_entry	utrace.c	/^utrace_entry(int32_t fnNumber) {$/;"	f	signature:(int32_t fnNumber)
utrace_entry	utracimp.h	/^utrace_entry(int32_t fnNumber);$/;"	p	signature:(int32_t fnNumber)
utrace_exit	unicode/urename.h	1634;"	d
utrace_exit	utrace.c	/^utrace_exit(int32_t fnNumber, int32_t returnType, ...) {$/;"	f	signature:(int32_t fnNumber, int32_t returnType, ...)
utrace_exit	utracimp.h	/^utrace_exit(int32_t fnNumber, int32_t returnType, ...);$/;"	p	signature:(int32_t fnNumber, int32_t returnType, ...)
utrace_format	unicode/urename.h	1635;"	d
utrace_format	unicode/utrace.h	/^utrace_format(char *outBuf, int32_t capacity,$/;"	p	signature:(char *outBuf, int32_t capacity, int32_t indent, const char *fmt, ...)
utrace_format	utrace.c	/^utrace_format(char *outBuf, int32_t capacity,$/;"	f	signature:(char *outBuf, int32_t capacity, int32_t indent, const char *fmt, ...)
utrace_functionName	unicode/urename.h	1636;"	d
utrace_functionName	unicode/utrace.h	/^utrace_functionName(int32_t fnNumber);$/;"	p	signature:(int32_t fnNumber)
utrace_functionName	utrace.c	/^utrace_functionName(int32_t fnNumber) {$/;"	f	signature:(int32_t fnNumber)
utrace_getFunctions	unicode/urename.h	1637;"	d
utrace_getFunctions	unicode/utrace.h	/^utrace_getFunctions(const void **context,$/;"	p	signature:(const void **context, UTraceEntry **e, UTraceExit **x, UTraceData **d)
utrace_getFunctions	utrace.c	/^utrace_getFunctions(const void **context,$/;"	f	signature:(const void **context, UTraceEntry **e, UTraceExit **x, UTraceData **d)
utrace_getLevel	unicode/urename.h	1638;"	d
utrace_getLevel	unicode/utrace.h	/^utrace_getLevel(void);$/;"	p	signature:(void)
utrace_getLevel	utrace.c	/^utrace_getLevel() {$/;"	f
utrace_level	unicode/urename.h	1639;"	d
utrace_level	utrace.c	/^utrace_level = UTRACE_ERROR;$/;"	v
utrace_level	utracimp.h	/^utrace_level;$/;"	v
utrace_setFunctions	unicode/urename.h	1640;"	d
utrace_setFunctions	unicode/utrace.h	/^utrace_setFunctions(const void *context,$/;"	p	signature:(const void *context, UTraceEntry *e, UTraceExit *x, UTraceData *d)
utrace_setFunctions	utrace.c	/^utrace_setFunctions(const void *context,$/;"	f	signature:(const void *context, UTraceEntry *e, UTraceExit *x, UTraceData *d)
utrace_setLevel	unicode/urename.h	1641;"	d
utrace_setLevel	unicode/utrace.h	/^utrace_setLevel(int32_t traceLevel);$/;"	p	signature:(int32_t traceLevel)
utrace_setLevel	utrace.c	/^utrace_setLevel(int32_t level) {$/;"	f	signature:(int32_t level)
utrace_vformat	unicode/urename.h	1642;"	d
utrace_vformat	unicode/utrace.h	/^utrace_vformat(char *outBuf, int32_t capacity,$/;"	p	signature:(char *outBuf, int32_t capacity, int32_t indent, const char *fmt, va_list args)
utrace_vformat	utrace.c	/^utrace_vformat(char *outBuf, int32_t capacity, int32_t indent, const char *fmt, va_list args) {$/;"	f	signature:(char *outBuf, int32_t capacity, int32_t indent, const char *fmt, va_list args)
utrans_clone	unicode/urename.h	1643;"	d
utrans_close	unicode/urename.h	1644;"	d
utrans_countAvailableIDs	unicode/urename.h	1645;"	d
utrans_getAvailableID	unicode/udeprctd.h	32;"	d
utrans_getAvailableID	unicode/urename.h	1646;"	d
utrans_getAvailableID_4_6	unicode/udeprctd.h	42;"	d
utrans_getID	unicode/udeprctd.h	33;"	d
utrans_getID	unicode/urename.h	1647;"	d
utrans_getID_4_6	unicode/udeprctd.h	43;"	d
utrans_getUnicodeID	unicode/urename.h	1648;"	d
utrans_open	unicode/udeprctd.h	34;"	d
utrans_open	unicode/urename.h	1649;"	d
utrans_openIDs	unicode/urename.h	1650;"	d
utrans_openInverse	unicode/urename.h	1651;"	d
utrans_openU	unicode/urename.h	1652;"	d
utrans_open_4_6	unicode/udeprctd.h	44;"	d
utrans_register	unicode/urename.h	1653;"	d
utrans_rep_caseContextIterator	unicode/urename.h	1654;"	d
utrans_setFilter	unicode/urename.h	1655;"	d
utrans_stripRules	unicode/urename.h	1656;"	d
utrans_trans	unicode/urename.h	1657;"	d
utrans_transIncremental	unicode/urename.h	1658;"	d
utrans_transIncrementalUChars	unicode/urename.h	1659;"	d
utrans_transUChars	unicode/urename.h	1660;"	d
utrans_transliterator_cleanup	unicode/urename.h	1661;"	d
utrans_unregister	unicode/udeprctd.h	35;"	d
utrans_unregister	unicode/urename.h	1662;"	d
utrans_unregisterID	unicode/urename.h	1663;"	d
utrans_unregister_4_6	unicode/udeprctd.h	45;"	d
utrie2_clone	unicode/urename.h	1664;"	d
utrie2_clone	utrie2.h	/^utrie2_clone(const UTrie2 *other, UErrorCode *pErrorCode);$/;"	p	signature:(const UTrie2 *other, UErrorCode *pErrorCode)
utrie2_clone	utrie2_builder.c	/^utrie2_clone(const UTrie2 *other, UErrorCode *pErrorCode) {$/;"	f	signature:(const UTrie2 *other, UErrorCode *pErrorCode)
utrie2_cloneAsThawed	unicode/urename.h	1665;"	d
utrie2_cloneAsThawed	utrie2.h	/^utrie2_cloneAsThawed(const UTrie2 *other, UErrorCode *pErrorCode);$/;"	p	signature:(const UTrie2 *other, UErrorCode *pErrorCode)
utrie2_cloneAsThawed	utrie2_builder.c	/^utrie2_cloneAsThawed(const UTrie2 *other, UErrorCode *pErrorCode) {$/;"	f	signature:(const UTrie2 *other, UErrorCode *pErrorCode)
utrie2_close	unicode/urename.h	1666;"	d
utrie2_close	utrie2.cpp	/^utrie2_close(UTrie2 *trie) {$/;"	f	signature:(UTrie2 *trie)
utrie2_close	utrie2.h	/^utrie2_close(UTrie2 *trie);$/;"	p	signature:(UTrie2 *trie)
utrie2_enum	unicode/urename.h	1667;"	d
utrie2_enum	utrie2.cpp	/^utrie2_enum(const UTrie2 *trie,$/;"	f	signature:(const UTrie2 *trie, UTrie2EnumValue *enumValue, UTrie2EnumRange *enumRange, const void *context)
utrie2_enum	utrie2.h	/^utrie2_enum(const UTrie2 *trie,$/;"	p	signature:(const UTrie2 *trie, UTrie2EnumValue *enumValue, UTrie2EnumRange *enumRange, const void *context)
utrie2_enumForLeadSurrogate	unicode/urename.h	1668;"	d
utrie2_enumForLeadSurrogate	utrie2.cpp	/^utrie2_enumForLeadSurrogate(const UTrie2 *trie, UChar32 lead,$/;"	f	signature:(const UTrie2 *trie, UChar32 lead, UTrie2EnumValue *enumValue, UTrie2EnumRange *enumRange, const void *context)
utrie2_enumForLeadSurrogate	utrie2.h	/^utrie2_enumForLeadSurrogate(const UTrie2 *trie, UChar32 lead,$/;"	p	signature:(const UTrie2 *trie, UChar32 lead, UTrie2EnumValue *enumValue, UTrie2EnumRange *enumRange, const void *context)
utrie2_freeze	unicode/urename.h	1669;"	d
utrie2_freeze	utrie2.h	/^utrie2_freeze(UTrie2 *trie, UTrie2ValueBits valueBits, UErrorCode *pErrorCode);$/;"	p	signature:(UTrie2 *trie, UTrie2ValueBits valueBits, UErrorCode *pErrorCode)
utrie2_freeze	utrie2_builder.c	/^utrie2_freeze(UTrie2 *trie, UTrie2ValueBits valueBits, UErrorCode *pErrorCode) {$/;"	f	signature:(UTrie2 *trie, UTrie2ValueBits valueBits, UErrorCode *pErrorCode)
utrie2_fromUTrie	unicode/urename.h	1670;"	d
utrie2_fromUTrie	utrie2.h	/^utrie2_fromUTrie(const UTrie *trie1, uint32_t errorValue, UErrorCode *pErrorCode);$/;"	p	signature:(const UTrie *trie1, uint32_t errorValue, UErrorCode *pErrorCode)
utrie2_fromUTrie	utrie2_builder.c	/^utrie2_fromUTrie(const UTrie *trie1, uint32_t errorValue, UErrorCode *pErrorCode) {$/;"	f	signature:(const UTrie *trie1, uint32_t errorValue, UErrorCode *pErrorCode)
utrie2_get32	unicode/urename.h	1671;"	d
utrie2_get32	utrie2.cpp	/^utrie2_get32(const UTrie2 *trie, UChar32 c) {$/;"	f	signature:(const UTrie2 *trie, UChar32 c)
utrie2_get32	utrie2.h	/^utrie2_get32(const UTrie2 *trie, UChar32 c);$/;"	p	signature:(const UTrie2 *trie, UChar32 c)
utrie2_get32FromLeadSurrogateCodeUnit	unicode/urename.h	1672;"	d
utrie2_get32FromLeadSurrogateCodeUnit	utrie2.cpp	/^utrie2_get32FromLeadSurrogateCodeUnit(const UTrie2 *trie, UChar32 c) {$/;"	f	signature:(const UTrie2 *trie, UChar32 c)
utrie2_get32FromLeadSurrogateCodeUnit	utrie2.h	/^utrie2_get32FromLeadSurrogateCodeUnit(const UTrie2 *trie, UChar32 c);$/;"	p	signature:(const UTrie2 *trie, UChar32 c)
utrie2_getVersion	unicode/urename.h	1673;"	d
utrie2_getVersion	utrie2.cpp	/^utrie2_getVersion(const void *data, int32_t length, UBool anyEndianOk) {$/;"	f	signature:(const void *data, int32_t length, UBool anyEndianOk)
utrie2_getVersion	utrie2.h	/^utrie2_getVersion(const void *data, int32_t length, UBool anyEndianOk);$/;"	p	signature:(const void *data, int32_t length, UBool anyEndianOk)
utrie2_internalU8NextIndex	unicode/urename.h	1674;"	d
utrie2_internalU8NextIndex	utrie2.cpp	/^utrie2_internalU8NextIndex(const UTrie2 *trie, UChar32 c,$/;"	f	signature:(const UTrie2 *trie, UChar32 c, const uint8_t *src, const uint8_t *limit)
utrie2_internalU8NextIndex	utrie2.h	/^utrie2_internalU8NextIndex(const UTrie2 *trie, UChar32 c,$/;"	p	signature:(const UTrie2 *trie, UChar32 c, const uint8_t *src, const uint8_t *limit)
utrie2_internalU8PrevIndex	unicode/urename.h	1675;"	d
utrie2_internalU8PrevIndex	utrie2.cpp	/^utrie2_internalU8PrevIndex(const UTrie2 *trie, UChar32 c,$/;"	f	signature:(const UTrie2 *trie, UChar32 c, const uint8_t *start, const uint8_t *src)
utrie2_internalU8PrevIndex	utrie2.h	/^utrie2_internalU8PrevIndex(const UTrie2 *trie, UChar32 c,$/;"	p	signature:(const UTrie2 *trie, UChar32 c, const uint8_t *start, const uint8_t *src)
utrie2_isFrozen	unicode/urename.h	1676;"	d
utrie2_isFrozen	utrie2.h	/^utrie2_isFrozen(const UTrie2 *trie);$/;"	p	signature:(const UTrie2 *trie)
utrie2_isFrozen	utrie2_builder.c	/^utrie2_isFrozen(const UTrie2 *trie) {$/;"	f	signature:(const UTrie2 *trie)
utrie2_open	unicode/urename.h	1677;"	d
utrie2_open	utrie2.h	/^utrie2_open(uint32_t initialValue, uint32_t errorValue, UErrorCode *pErrorCode);$/;"	p	signature:(uint32_t initialValue, uint32_t errorValue, UErrorCode *pErrorCode)
utrie2_open	utrie2_builder.c	/^utrie2_open(uint32_t initialValue, uint32_t errorValue, UErrorCode *pErrorCode) {$/;"	f	signature:(uint32_t initialValue, uint32_t errorValue, UErrorCode *pErrorCode)
utrie2_openDummy	unicode/urename.h	1678;"	d
utrie2_openDummy	utrie2.cpp	/^utrie2_openDummy(UTrie2ValueBits valueBits,$/;"	f	signature:(UTrie2ValueBits valueBits, uint32_t initialValue, uint32_t errorValue, UErrorCode *pErrorCode)
utrie2_openDummy	utrie2.h	/^utrie2_openDummy(UTrie2ValueBits valueBits,$/;"	p	signature:(UTrie2ValueBits valueBits, uint32_t initialValue, uint32_t errorValue, UErrorCode *pErrorCode)
utrie2_openFromSerialized	unicode/urename.h	1679;"	d
utrie2_openFromSerialized	utrie2.cpp	/^utrie2_openFromSerialized(UTrie2ValueBits valueBits,$/;"	f	signature:(UTrie2ValueBits valueBits, const void *data, int32_t length, int32_t *pActualLength, UErrorCode *pErrorCode)
utrie2_openFromSerialized	utrie2.h	/^utrie2_openFromSerialized(UTrie2ValueBits valueBits,$/;"	p	signature:(UTrie2ValueBits valueBits, const void *data, int32_t length, int32_t *pActualLength, UErrorCode *pErrorCode)
utrie2_printLengths	utrie2_builder.c	/^utrie2_printLengths(const UTrie2 *trie, const char *which) {$/;"	f	file:	signature:(const UTrie2 *trie, const char *which)
utrie2_serialize	unicode/urename.h	1680;"	d
utrie2_serialize	utrie2.h	/^utrie2_serialize(UTrie2 *trie,$/;"	p	signature:(UTrie2 *trie, void *data, int32_t capacity, UErrorCode *pErrorCode)
utrie2_serialize	utrie2_builder.c	/^utrie2_serialize(UTrie2 *trie,$/;"	f	signature:(UTrie2 *trie, void *data, int32_t capacity, UErrorCode *pErrorCode)
utrie2_set32	unicode/urename.h	1681;"	d
utrie2_set32	utrie2.h	/^utrie2_set32(UTrie2 *trie, UChar32 c, uint32_t value, UErrorCode *pErrorCode);$/;"	p	signature:(UTrie2 *trie, UChar32 c, uint32_t value, UErrorCode *pErrorCode)
utrie2_set32	utrie2_builder.c	/^utrie2_set32(UTrie2 *trie, UChar32 c, uint32_t value, UErrorCode *pErrorCode) {$/;"	f	signature:(UTrie2 *trie, UChar32 c, uint32_t value, UErrorCode *pErrorCode)
utrie2_set32ForLeadSurrogateCodeUnit	unicode/urename.h	1682;"	d
utrie2_set32ForLeadSurrogateCodeUnit	utrie2.h	/^utrie2_set32ForLeadSurrogateCodeUnit(UTrie2 *trie,$/;"	p	signature:(UTrie2 *trie, UChar32 lead, uint32_t value, UErrorCode *pErrorCode)
utrie2_set32ForLeadSurrogateCodeUnit	utrie2_builder.c	/^utrie2_set32ForLeadSurrogateCodeUnit(UTrie2 *trie,$/;"	f	signature:(UTrie2 *trie, UChar32 c, uint32_t value, UErrorCode *pErrorCode)
utrie2_setRange32	unicode/urename.h	1683;"	d
utrie2_setRange32	utrie2.h	/^utrie2_setRange32(UTrie2 *trie,$/;"	p	signature:(UTrie2 *trie, UChar32 start, UChar32 end, uint32_t value, UBool overwrite, UErrorCode *pErrorCode)
utrie2_setRange32	utrie2_builder.c	/^utrie2_setRange32(UTrie2 *trie,$/;"	f	signature:(UTrie2 *trie, UChar32 start, UChar32 end, uint32_t value, UBool overwrite, UErrorCode *pErrorCode)
utrie2_swap	unicode/urename.h	1684;"	d
utrie2_swap	utrie2.cpp	/^utrie2_swap(const UDataSwapper *ds,$/;"	f	signature:(const UDataSwapper *ds, const void *inData, int32_t length, void *outData, UErrorCode *pErrorCode)
utrie2_swap	utrie2.h	/^utrie2_swap(const UDataSwapper *ds,$/;"	p	signature:(const UDataSwapper *ds, const void *inData, int32_t length, void *outData, UErrorCode *pErrorCode)
utrie2_swapAnyVersion	unicode/urename.h	1685;"	d
utrie2_swapAnyVersion	utrie2.h	/^utrie2_swapAnyVersion(const UDataSwapper *ds,$/;"	p	signature:(const UDataSwapper *ds, const void *inData, int32_t length, void *outData, UErrorCode *pErrorCode)
utrie2_swapAnyVersion	utrie2_builder.c	/^utrie2_swapAnyVersion(const UDataSwapper *ds,$/;"	f	signature:(const UDataSwapper *ds, const void *inData, int32_t length, void *outData, UErrorCode *pErrorCode)
utrie_allocDataBlock	utrie.c	/^utrie_allocDataBlock(UNewTrie *trie) {$/;"	f	file:	signature:(UNewTrie *trie)
utrie_clone	unicode/urename.h	1686;"	d
utrie_clone	utrie.c	/^utrie_clone(UNewTrie *fillIn, const UNewTrie *other, uint32_t *aliasData, int32_t aliasDataCapacity) {$/;"	f	signature:(UNewTrie *fillIn, const UNewTrie *other, uint32_t *aliasData, int32_t aliasDataCapacity)
utrie_clone	utrie.h	/^utrie_clone(UNewTrie *fillIn, const UNewTrie *other, uint32_t *aliasData, int32_t aliasDataLength);$/;"	p	signature:(UNewTrie *fillIn, const UNewTrie *other, uint32_t *aliasData, int32_t aliasDataLength)
utrie_close	unicode/urename.h	1687;"	d
utrie_close	utrie.c	/^utrie_close(UNewTrie *trie) {$/;"	f	signature:(UNewTrie *trie)
utrie_close	utrie.h	/^utrie_close(UNewTrie *trie);$/;"	p	signature:(UNewTrie *trie)
utrie_compact	utrie.c	/^utrie_compact(UNewTrie *trie, UBool overlap, UErrorCode *pErrorCode) {$/;"	f	file:	signature:(UNewTrie *trie, UBool overlap, UErrorCode *pErrorCode)
utrie_defaultGetFoldingOffset	unicode/urename.h	1688;"	d
utrie_defaultGetFoldingOffset	utrie.c	/^utrie_defaultGetFoldingOffset(uint32_t data) {$/;"	f	signature:(uint32_t data)
utrie_defaultGetFoldingOffset	utrie.h	/^utrie_defaultGetFoldingOffset(uint32_t data);$/;"	p	signature:(uint32_t data)
utrie_enum	unicode/urename.h	1689;"	d
utrie_enum	utrie.c	/^utrie_enum(const UTrie *trie,$/;"	f	signature:(const UTrie *trie, UTrieEnumValue *enumValue, UTrieEnumRange *enumRange, const void *context)
utrie_enum	utrie.h	/^utrie_enum(const UTrie *trie,$/;"	p	signature:(const UTrie *trie, UTrieEnumValue *enumValue, UTrieEnumRange *enumRange, const void *context)
utrie_fillBlock	utrie.c	/^utrie_fillBlock(uint32_t *block, UChar32 start, UChar32 limit,$/;"	f	file:	signature:(uint32_t *block, UChar32 start, UChar32 limit, uint32_t value, uint32_t initialValue, UBool overwrite)
utrie_fold	utrie.c	/^utrie_fold(UNewTrie *trie, UNewTrieGetFoldedValue *getFoldedValue, UErrorCode *pErrorCode) {$/;"	f	file:	signature:(UNewTrie *trie, UNewTrieGetFoldedValue *getFoldedValue, UErrorCode *pErrorCode)
utrie_get32	unicode/urename.h	1690;"	d
utrie_get32	utrie.c	/^utrie_get32(UNewTrie *trie, UChar32 c, UBool *pInBlockZero) {$/;"	f	signature:(UNewTrie *trie, UChar32 c, UBool *pInBlockZero)
utrie_get32	utrie.h	/^utrie_get32(UNewTrie *trie, UChar32 c, UBool *pInBlockZero);$/;"	p	signature:(UNewTrie *trie, UChar32 c, UBool *pInBlockZero)
utrie_getData	unicode/urename.h	1691;"	d
utrie_getData	utrie.c	/^utrie_getData(UNewTrie *trie, int32_t *pLength) {$/;"	f	signature:(UNewTrie *trie, int32_t *pLength)
utrie_getData	utrie.h	/^utrie_getData(UNewTrie *trie, int32_t *pLength);$/;"	p	signature:(UNewTrie *trie, int32_t *pLength)
utrie_getDataBlock	utrie.c	/^utrie_getDataBlock(UNewTrie *trie, UChar32 c) {$/;"	f	file:	signature:(UNewTrie *trie, UChar32 c)
utrie_open	unicode/urename.h	1692;"	d
utrie_open	utrie.c	/^utrie_open(UNewTrie *fillIn,$/;"	f	signature:(UNewTrie *fillIn, uint32_t *aliasData, int32_t maxDataLength, uint32_t initialValue, uint32_t leadUnitValue, UBool latin1Linear)
utrie_open	utrie.h	/^utrie_open(UNewTrie *fillIn,$/;"	p	signature:(UNewTrie *fillIn, uint32_t *aliasData, int32_t maxDataLength, uint32_t initialValue, uint32_t leadUnitValue, UBool latin1Linear)
utrie_printLengths	utrie2_builder.c	/^utrie_printLengths(const UTrie *trie) {$/;"	f	file:	signature:(const UTrie *trie)
utrie_serialize	unicode/urename.h	1693;"	d
utrie_serialize	utrie.c	/^utrie_serialize(UNewTrie *trie, void *dt, int32_t capacity,$/;"	f	signature:(UNewTrie *trie, void *dt, int32_t capacity, UNewTrieGetFoldedValue *getFoldedValue, UBool reduceTo16Bits, UErrorCode *pErrorCode)
utrie_serialize	utrie.h	/^utrie_serialize(UNewTrie *trie, void *data, int32_t capacity,$/;"	p	signature:(UNewTrie *trie, void *data, int32_t capacity, UNewTrieGetFoldedValue *getFoldedValue, UBool reduceTo16Bits, UErrorCode *pErrorCode)
utrie_set32	unicode/urename.h	1694;"	d
utrie_set32	utrie.c	/^utrie_set32(UNewTrie *trie, UChar32 c, uint32_t value) {$/;"	f	signature:(UNewTrie *trie, UChar32 c, uint32_t value)
utrie_set32	utrie.h	/^utrie_set32(UNewTrie *trie, UChar32 c, uint32_t value);$/;"	p	signature:(UNewTrie *trie, UChar32 c, uint32_t value)
utrie_setRange32	unicode/urename.h	1695;"	d
utrie_setRange32	utrie.c	/^utrie_setRange32(UNewTrie *trie, UChar32 start, UChar32 limit, uint32_t value, UBool overwrite) {$/;"	f	signature:(UNewTrie *trie, UChar32 start, UChar32 limit, uint32_t value, UBool overwrite)
utrie_setRange32	utrie.h	/^utrie_setRange32(UNewTrie *trie, UChar32 start, UChar32 limit, uint32_t value, UBool overwrite);$/;"	p	signature:(UNewTrie *trie, UChar32 start, UChar32 limit, uint32_t value, UBool overwrite)
utrie_swap	ucol_swp.cpp	/^utrie_swap(const UDataSwapper *ds,$/;"	f	signature:(const UDataSwapper *ds, const void *inData, int32_t length, void *outData, UErrorCode *pErrorCode)
utrie_swap	unicode/urename.h	1696;"	d
utrie_swap	utrie.h	/^utrie_swap(const UDataSwapper *ds,$/;"	p	signature:(const UDataSwapper *ds, const void *inData, int32_t length, void *outData, UErrorCode *pErrorCode)
utrie_unserialize	unicode/urename.h	1697;"	d
utrie_unserialize	utrie.c	/^utrie_unserialize(UTrie *trie, const void *data, int32_t length, UErrorCode *pErrorCode) {$/;"	f	signature:(UTrie *trie, const void *data, int32_t length, UErrorCode *pErrorCode)
utrie_unserialize	utrie.h	/^utrie_unserialize(UTrie *trie, const void *data, int32_t length, UErrorCode *pErrorCode);$/;"	p	signature:(UTrie *trie, const void *data, int32_t length, UErrorCode *pErrorCode)
utrie_unserializeDummy	unicode/urename.h	1698;"	d
utrie_unserializeDummy	utrie.c	/^utrie_unserializeDummy(UTrie *trie,$/;"	f	signature:(UTrie *trie, void *data, int32_t length, uint32_t initialValue, uint32_t leadUnitValue, UBool make16BitTrie, UErrorCode *pErrorCode)
utrie_unserializeDummy	utrie.h	/^utrie_unserializeDummy(UTrie *trie,$/;"	p	signature:(UTrie *trie, void *data, int32_t length, uint32_t initialValue, uint32_t leadUnitValue, UBool make16BitTrie, UErrorCode *pErrorCode)
uts46Norm2	uts46.cpp	/^    const Normalizer2 &uts46Norm2;  \/\/ uts46.nrm$/;"	m	class:UTS46	file:	access:private
v	propsvec.c	/^    uint32_t *v;$/;"	m	struct:UPropsVectors	file:	access:public
vFuncs	udatamem.h	/^    const commonDataFuncs  *vFuncs;      \/* Function Pointers for accessing TOC             *\/$/;"	m	struct:UDataMemory	access:public
val	rbbirb.h	/^    RBBINode               *val;$/;"	m	class:RBBISymbolTableEntry	access:public
val	rbbirb.h	/^    RBBINode      *val;$/;"	m	struct:RBBISetTableEl	access:public
valid	locbased.h	/^    char* valid;$/;"	m	class:LocaleBased	access:private
validateFallbackLocale	servls.cpp	/^ICULocaleService::validateFallbackLocale() const$/;"	f	class:ICULocaleService	signature:() const
validityTable	ucnvisci.c	/^static const uint8_t validityTable[128] = {$/;"	v	file:
value	uhash.h	/^    UHashTok value;$/;"	m	struct:UHashElement	access:public
value	uloc.c	/^    const char *value;       \/* keyword value, or NULL if kw==NULL *\/$/;"	m	struct:CanonicalizationMap	file:	access:public
value	uloc.c	/^    const char *value;       \/* keyword value, or NULL if kw==NULL *\/$/;"	m	struct:VariantMap	file:	access:public
value	uloc_tag.c	/^    const char                  *value;$/;"	m	struct:ExtensionListEntry	file:	access:public
value	uniset_props.cpp	/^    int32_t value;$/;"	m	struct:__anon39	file:	access:public
valueComparator	uhash.h	/^    UValueComparator *valueComparator; \/* Compares the values for equality *\/$/;"	m	struct:UHashtable	access:public
valueDeleter	uhash.h	/^    UObjectDeleter *valueDeleter;  \/* Deletes values when required.$/;"	m	struct:UHashtable	access:public
valueLen	uloc.c	/^    int32_t valueLen;$/;"	m	struct:__anon71	file:	access:public
valueMap_count	propname.h	/^    int16_t valueMap_count; \/*  number of entries *\/$/;"	m	class:PropertyAliases	access:private
valueMap_offset	propname.h	/^    Offset valueMap_offset; \/*  offset to start of array *\/$/;"	m	class:PropertyAliases	access:private
valueStart	uloc.c	/^    const char *valueStart;$/;"	m	struct:__anon71	file:	access:public
varRef	rbbinode.h	/^            varRef,$/;"	e	enum:RBBINode::NodeType
variant	uloc.c	/^    const char *variant;          \/* input ID *\/$/;"	m	struct:VariantMap	file:	access:public
variant	uloc_tag.c	/^    const char              *variant;$/;"	m	struct:VariantListEntry	file:	access:public
variant	unames.c	/^    uint8_t type, variant;$/;"	m	struct:__anon93	file:	access:public
variant5c	ucnv.c	/^    const UChar variant5c;$/;"	m	struct:UAmbiguousConverter	file:	access:public
variantBegin	unicode/locid.h	/^    int32_t variantBegin;$/;"	m	class:Locale	access:private
variants	uloc_tag.c	/^    VariantListEntry    *variants;$/;"	m	struct:ULanguageTag	file:	access:public
version	ucnv2022.c	/^    uint32_t version;$/;"	m	struct:__anon68	file:	access:public
version	ucnvmbcs.h	/^    UVersionInfo version;$/;"	m	struct:__anon81	access:public
versionFilter	uniset_props.cpp	/^static UBool versionFilter(UChar32 ch, void* context) {$/;"	f	file:	signature:(UChar32 ch, void* context)
visualLimit	ubidiimp.h	/^            visualLimit,    \/* last visual position of the run +1 *\/$/;"	m	struct:Run	access:public
vowelSignESpecialCases	ucnvisci.c	/^static const uint16_t vowelSignESpecialCases[][2]={$/;"	v	file:
vzone_clone	unicode/urename.h	1699;"	d
vzone_close	unicode/urename.h	1700;"	d
vzone_countTransitionRules	unicode/urename.h	1701;"	d
vzone_equals	unicode/urename.h	1702;"	d
vzone_getDynamicClassID	unicode/urename.h	1703;"	d
vzone_getLastModified	unicode/urename.h	1704;"	d
vzone_getNextTransition	unicode/urename.h	1705;"	d
vzone_getOffset	unicode/urename.h	1706;"	d
vzone_getOffset2	unicode/urename.h	1707;"	d
vzone_getOffset3	unicode/urename.h	1708;"	d
vzone_getPreviousTransition	unicode/urename.h	1709;"	d
vzone_getRawOffset	unicode/urename.h	1710;"	d
vzone_getStaticClassID	unicode/urename.h	1711;"	d
vzone_getTZURL	unicode/urename.h	1712;"	d
vzone_hasSameRules	unicode/urename.h	1713;"	d
vzone_inDaylightTime	unicode/urename.h	1714;"	d
vzone_openData	unicode/urename.h	1715;"	d
vzone_openID	unicode/urename.h	1716;"	d
vzone_setLastModified	unicode/urename.h	1717;"	d
vzone_setRawOffset	unicode/urename.h	1718;"	d
vzone_setTZURL	unicode/urename.h	1719;"	d
vzone_useDaylightTime	unicode/urename.h	1720;"	d
vzone_write	unicode/urename.h	1721;"	d
vzone_writeFromStart	unicode/urename.h	1722;"	d
vzone_writeSimple	unicode/urename.h	1723;"	d
walkHorizontal	triedict.cpp	/^static void walkHorizontal(const TernaryNode *node,$/;"	f	file:	signature:(const TernaryNode *node, BuildCompactTrieHorizontalNode *building, UStack &nodes, UErrorCode &status)
walkHorizontal	triedict.cpp	/^static void walkHorizontal(const TernaryNode *node,$/;"	p	file:	signature:(const TernaryNode *node, BuildCompactTrieHorizontalNode *building, UStack &nodes, UErrorCode &status)
windowUse	ucnvscsu.c	/^    int8_t windowUse[8];$/;"	m	struct:SCSUData	file:	access:public
write	triedict.cpp	/^    virtual void write(uint8_t *bytes, uint32_t &offset, const UVector32 &\/*translate*\/) {$/;"	f	class:BuildCompactTrieNode	access:public	signature:(uint8_t *bytes, uint32_t &offset, const UVector32 & )
write	triedict.cpp	/^    virtual void write(uint8_t *bytes, uint32_t &offset, const UVector32 &translate) {$/;"	f	class:BuildCompactTrieHorizontalNode	access:public	signature:(uint8_t *bytes, uint32_t &offset, const UVector32 &translate)
write	triedict.cpp	/^    virtual void write(uint8_t *bytes, uint32_t &offset, const UVector32 &translate) {$/;"	f	class:BuildCompactTrieVerticalNode	access:public	signature:(uint8_t *bytes, uint32_t &offset, const UVector32 &translate)
writeBlock	utrie2_builder.c	/^writeBlock(uint32_t *block, uint32_t value) {$/;"	f	file:	signature:(uint32_t *block, uint32_t value)
writeCodePoint	normalizer2impl.h	/^    static void writeCodePoint(UChar *p, UChar32 c) {$/;"	f	class:ReorderingBuffer	access:private	signature:(UChar *p, UChar32 c)
writeFactorSuffix	unames.c	/^writeFactorSuffix(const uint16_t *factors, uint16_t count,$/;"	f	file:	signature:(const uint16_t *factors, uint16_t count, const char *s, uint32_t code, uint16_t indexes[8], const char *elementBases[8], const char *elements[8], char *buffer, uint16_t bufferLength)
writeStage3Roundtrip	ucnvmbcs.c	/^writeStage3Roundtrip(const void *context, uint32_t value, UChar32 codePoints[32]) {$/;"	f	file:	signature:(const void *context, uint32_t value, UChar32 codePoints[32])
writeSub	ucnv_cnv.h	/^    UConverterWriteSub writeSub;$/;"	m	struct:UConverterImpl	access:public
writeUInt16	udataswp.h	/^    UDataWriteUInt16 *writeUInt16;$/;"	m	struct:UDataSwapper	access:public
writeUInt32	udataswp.h	/^    UDataWriteUInt32 *writeUInt32;$/;"	m	struct:UDataSwapper	access:public
yehHamzaToYeh	ushape.c	/^static const UChar yehHamzaToYeh[] =$/;"	v	file:
zeroMem	cmemory.c	/^static const int32_t zeroMem[] = {0, 0, 0, 0, 0, 0};$/;"	v	file:
zrule_close	unicode/urename.h	1724;"	d
zrule_equals	unicode/urename.h	1725;"	d
zrule_getDSTSavings	unicode/urename.h	1726;"	d
zrule_getName	unicode/urename.h	1727;"	d
zrule_getRawOffset	unicode/urename.h	1728;"	d
zrule_isEquivalentTo	unicode/urename.h	1729;"	d
ztrans_adoptFrom	unicode/urename.h	1730;"	d
ztrans_adoptTo	unicode/urename.h	1731;"	d
ztrans_clone	unicode/urename.h	1732;"	d
ztrans_close	unicode/urename.h	1733;"	d
ztrans_equals	unicode/urename.h	1734;"	d
ztrans_getDynamicClassID	unicode/urename.h	1735;"	d
ztrans_getFrom	unicode/urename.h	1736;"	d
ztrans_getStaticClassID	unicode/urename.h	1737;"	d
ztrans_getTime	unicode/urename.h	1738;"	d
ztrans_getTo	unicode/urename.h	1739;"	d
ztrans_open	unicode/urename.h	1740;"	d
ztrans_openEmpty	unicode/urename.h	1741;"	d
ztrans_setFrom	unicode/urename.h	1742;"	d
ztrans_setTime	unicode/urename.h	1743;"	d
ztrans_setTo	unicode/urename.h	1744;"	d
~BMPSet	bmpset.cpp	/^BMPSet::~BMPSet() {$/;"	f	class:BMPSet	signature:()
~BMPSet	bmpset.h	/^    virtual ~BMPSet();$/;"	p	class:BMPSet	access:public	signature:()
~BreakIterator	brkiter.cpp	/^BreakIterator::~BreakIterator()$/;"	f	class:BreakIterator	signature:()
~BreakIterator	unicode/brkiter.h	/^    virtual ~BreakIterator();$/;"	p	class:BreakIterator	access:public	signature:()
~BuildCompactTrieHorizontalNode	triedict.cpp	/^    virtual ~BuildCompactTrieHorizontalNode() {$/;"	f	class:BuildCompactTrieHorizontalNode	access:public	signature:()
~BuildCompactTrieNode	triedict.cpp	/^    virtual ~BuildCompactTrieNode() {$/;"	f	class:BuildCompactTrieNode	access:public	signature:()
~BuildCompactTrieVerticalNode	triedict.cpp	/^    virtual ~BuildCompactTrieVerticalNode() {$/;"	f	class:BuildCompactTrieVerticalNode	access:public	signature:()
~ByteSink	unicode/bytestream.h	/^  virtual ~ByteSink() { }$/;"	f	class:ByteSink	access:public	signature:()
~CacheEntry	serv.cpp	/^    ~CacheEntry() {$/;"	f	class:CacheEntry	access:public	signature:()
~CanonIterData	normalizer2impl.cpp	/^    ~CanonIterData();$/;"	p	struct:CanonIterData	file:	access:public	signature:()
~CanonIterData	normalizer2impl.cpp	/^CanonIterData::~CanonIterData() {$/;"	f	class:CanonIterData	signature:()
~CanonicalIterator	caniter.cpp	/^CanonicalIterator::~CanonicalIterator() {$/;"	f	class:CanonicalIterator	signature:()
~CanonicalIterator	unicode/caniter.h	/^    virtual ~CanonicalIterator();$/;"	p	class:CanonicalIterator	access:public	signature:()
~CharString	charstr.h	/^    ~CharString() {}$/;"	f	class:CharString	access:public	signature:()
~CompactTrieDictionary	triedict.cpp	/^CompactTrieDictionary::~CompactTrieDictionary() {$/;"	f	class:CompactTrieDictionary	signature:()
~CompactTrieDictionary	triedict.h	/^  virtual ~CompactTrieDictionary();$/;"	p	class:CompactTrieDictionary	access:public	signature:()
~CompactTrieEnumeration	triedict.cpp	/^    virtual ~CompactTrieEnumeration() {$/;"	f	class:CompactTrieEnumeration	access:public	signature:()
~DateInterval	dtintrv.cpp	/^DateInterval::~DateInterval(){}$/;"	f	class:DateInterval	signature:()
~DateInterval	unicode/dtintrv.h	/^    virtual ~DateInterval();$/;"	p	class:DateInterval	access:public	signature:()
~DictionaryBreakEngine	dictbe.cpp	/^DictionaryBreakEngine::~DictionaryBreakEngine() {$/;"	f	class:DictionaryBreakEngine	signature:()
~DictionaryBreakEngine	dictbe.h	/^  virtual ~DictionaryBreakEngine();$/;"	p	class:DictionaryBreakEngine	access:public	signature:()
~ErrorCode	unicode/errorcode.h	/^    virtual ~ErrorCode() {}$/;"	f	class:ErrorCode	access:public	signature:()
~EventListener	servnotf.cpp	/^EventListener::~EventListener() {}$/;"	f	class:EventListener	signature:()
~EventListener	servnotf.h	/^    virtual ~EventListener();$/;"	p	class:EventListener	access:public	signature:()
~ForwardCharacterIterator	chariter.cpp	/^ForwardCharacterIterator::~ForwardCharacterIterator() {}$/;"	f	class:ForwardCharacterIterator	signature:()
~ForwardCharacterIterator	unicode/chariter.h	/^    virtual ~ForwardCharacterIterator();$/;"	p	class:ForwardCharacterIterator	access:public	signature:()
~Hashtable	hash.h	/^    ~Hashtable();$/;"	p	class:Hashtable	access:public	signature:()
~Hashtable	hash.h	/^inline Hashtable::~Hashtable() {$/;"	f	class:Hashtable	signature:()
~ICULanguageBreakFactory	brkeng.cpp	/^ICULanguageBreakFactory::~ICULanguageBreakFactory() {$/;"	f	class:ICULanguageBreakFactory	signature:()
~ICULanguageBreakFactory	brkeng.h	/^  virtual ~ICULanguageBreakFactory();$/;"	p	class:ICULanguageBreakFactory	access:public	signature:()
~ICULocaleService	servls.cpp	/^ICULocaleService::~ICULocaleService()$/;"	f	class:ICULocaleService	signature:()
~ICUNotifier	servnotf.cpp	/^ICUNotifier::~ICUNotifier(void) {$/;"	f	class:ICUNotifier	signature:(void)
~ICUResourceBundleFactory	servrbf.cpp	/^ICUResourceBundleFactory::~ICUResourceBundleFactory() {}$/;"	f	class:ICUResourceBundleFactory	signature:()
~ICUService	serv.cpp	/^ICUService::~ICUService()$/;"	f	class:ICUService	signature:()
~ICUServiceKey	serv.cpp	/^ICUServiceKey::~ICUServiceKey() $/;"	f	class:ICUServiceKey	signature:()
~ICUServiceKey	serv.h	/^  virtual ~ICUServiceKey();$/;"	p	class:ICUServiceKey	access:public	signature:()
~KeywordEnumeration	locid.cpp	/^    virtual ~KeywordEnumeration() {$/;"	f	class:KeywordEnumeration	access:public	signature:()
~LanguageBreakEngine	brkeng.cpp	/^LanguageBreakEngine::~LanguageBreakEngine() {$/;"	f	class:LanguageBreakEngine	signature:()
~LanguageBreakEngine	brkeng.h	/^  virtual ~LanguageBreakEngine();$/;"	p	class:LanguageBreakEngine	access:public	signature:()
~LanguageBreakFactory	brkeng.cpp	/^LanguageBreakFactory::~LanguageBreakFactory() {$/;"	f	class:LanguageBreakFactory	signature:()
~LanguageBreakFactory	brkeng.h	/^  virtual ~LanguageBreakFactory();$/;"	p	class:LanguageBreakFactory	access:public	signature:()
~LocalArray	unicode/localpointer.h	/^    ~LocalArray() {$/;"	f	class:LocalArray	access:public	signature:()
~LocalMemory	cmemory.h	/^    ~LocalMemory() {$/;"	f	class:LocalMemory	access:public	signature:()
~LocalPointer	unicode/localpointer.h	/^    ~LocalPointer() {$/;"	f	class:LocalPointer	access:public	signature:()
~LocalPointerBase	unicode/localpointer.h	/^    ~LocalPointerBase() { \/* delete ptr; *\/ }$/;"	f	class:LocalPointerBase	access:public	signature:()
~Locale	locid.cpp	/^Locale::~Locale()$/;"	f	class:Locale	signature:()
~Locale	unicode/locid.h	/^    virtual ~Locale() ;$/;"	p	class:Locale	access:public	signature:()
~LocaleKey	servlk.cpp	/^LocaleKey::~LocaleKey() {}$/;"	f	class:LocaleKey	signature:()
~LocaleKey	servloc.h	/^    virtual ~LocaleKey();$/;"	p	class:LocaleKey	access:public	signature:()
~LocaleKeyFactory	servlkf.cpp	/^LocaleKeyFactory::~LocaleKeyFactory() {$/;"	f	class:LocaleKeyFactory	signature:()
~MaybeStackArray	cmemory.h	/^    ~MaybeStackArray() { releaseArray(); }$/;"	f	class:MaybeStackArray	access:public	signature:()
~MaybeStackHeaderAndArray	cmemory.h	/^    ~MaybeStackHeaderAndArray() { releaseMemory(); }$/;"	f	class:MaybeStackHeaderAndArray	access:public	signature:()
~MutableTrieDictionary	triedict.cpp	/^MutableTrieDictionary::~MutableTrieDictionary() {$/;"	f	class:MutableTrieDictionary	signature:()
~MutableTrieDictionary	triedict.h	/^  virtual ~MutableTrieDictionary();$/;"	p	class:MutableTrieDictionary	access:public	signature:()
~MutableTrieEnumeration	triedict.cpp	/^    virtual ~MutableTrieEnumeration() {$/;"	f	class:MutableTrieEnumeration	access:public	signature:()
~Mutex	mutex.h	/^  inline ~Mutex();$/;"	p	class:Mutex	access:public	signature:()
~Mutex	mutex.h	/^inline Mutex::~Mutex()$/;"	f	class:Mutex	signature:()
~Normalizer	normlzr.cpp	/^Normalizer::~Normalizer()$/;"	f	class:Normalizer	signature:()
~Normalizer	unicode/normlzr.h	/^  virtual ~Normalizer();$/;"	p	class:Normalizer	access:public	signature:()
~Normalizer2Impl	normalizer2impl.cpp	/^Normalizer2Impl::~Normalizer2Impl() {$/;"	f	class:Normalizer2Impl	signature:()
~Normalizer2Impl	normalizer2impl.h	/^    ~Normalizer2Impl();$/;"	p	class:Normalizer2Impl	access:public	signature:()
~OffsetList	unisetspan.cpp	/^    ~OffsetList() {$/;"	f	class:OffsetList	access:public	signature:()
~ParsePosition	parsepos.cpp	/^ParsePosition::~ParsePosition() {}$/;"	f	class:ParsePosition	signature:()
~ParsePosition	unicode/parsepos.h	/^    virtual ~ParsePosition();$/;"	p	class:ParsePosition	access:public	signature:()
~PossibleWord	dictbe.cpp	/^  ~PossibleWord();$/;"	p	class:PossibleWord	file:	access:public	signature:()
~PossibleWord	dictbe.cpp	/^PossibleWord::~PossibleWord() {$/;"	f	class:PossibleWord	signature:()
~RBBIDataWrapper	rbbidata.cpp	/^RBBIDataWrapper::~RBBIDataWrapper() {$/;"	f	class:RBBIDataWrapper	signature:()
~RBBIDataWrapper	rbbidata.h	/^    ~RBBIDataWrapper();$/;"	p	class:RBBIDataWrapper	access:public	signature:()
~RBBINode	rbbinode.cpp	/^RBBINode::~RBBINode() {$/;"	f	class:RBBINode	signature:()
~RBBINode	rbbinode.h	/^        ~RBBINode();$/;"	p	class:RBBINode	access:public	signature:()
~RBBIRuleBuilder	rbbirb.cpp	/^RBBIRuleBuilder::~RBBIRuleBuilder() {$/;"	f	class:RBBIRuleBuilder	signature:()
~RBBIRuleBuilder	rbbirb.h	/^    virtual    ~RBBIRuleBuilder();$/;"	p	class:RBBIRuleBuilder	access:public	signature:()
~RBBIRuleScanner	rbbiscan.cpp	/^RBBIRuleScanner::~RBBIRuleScanner() {$/;"	f	class:RBBIRuleScanner	signature:()
~RBBIRuleScanner	rbbiscan.h	/^    virtual    ~RBBIRuleScanner();$/;"	p	class:RBBIRuleScanner	access:public	signature:()
~RBBISetBuilder	rbbisetb.cpp	/^RBBISetBuilder::~RBBISetBuilder()$/;"	f	class:RBBISetBuilder	signature:()
~RBBISetBuilder	rbbisetb.h	/^    ~RBBISetBuilder();$/;"	p	class:RBBISetBuilder	access:public	signature:()
~RBBIStateDescriptor	rbbitblb.cpp	/^RBBIStateDescriptor::~RBBIStateDescriptor() {$/;"	f	class:RBBIStateDescriptor	signature:()
~RBBIStateDescriptor	rbbitblb.h	/^    ~RBBIStateDescriptor();$/;"	p	class:RBBIStateDescriptor	access:public	signature:()
~RBBISymbolTable	rbbirb.h	/^    virtual ~RBBISymbolTable();$/;"	p	class:RBBISymbolTable	access:public	signature:()
~RBBISymbolTable	rbbistbl.cpp	/^RBBISymbolTable::~RBBISymbolTable()$/;"	f	class:RBBISymbolTable	signature:()
~RBBISymbolTableEntry	rbbirb.h	/^    ~RBBISymbolTableEntry();$/;"	p	class:RBBISymbolTableEntry	access:public	signature:()
~RBBISymbolTableEntry	rbbistbl.cpp	/^RBBISymbolTableEntry::~RBBISymbolTableEntry() {$/;"	f	class:RBBISymbolTableEntry	signature:()
~RBBITableBuilder	rbbitblb.cpp	/^RBBITableBuilder::~RBBITableBuilder() {$/;"	f	class:RBBITableBuilder	signature:()
~RBBITableBuilder	rbbitblb.h	/^    ~RBBITableBuilder();$/;"	p	class:RBBITableBuilder	access:public	signature:()
~RangeDescriptor	rbbisetb.cpp	/^RangeDescriptor::~RangeDescriptor() {$/;"	f	class:RangeDescriptor	signature:()
~RangeDescriptor	rbbisetb.h	/^    ~RangeDescriptor();$/;"	p	class:RangeDescriptor	access:public	signature:()
~ReorderingBuffer	normalizer2impl.h	/^    ~ReorderingBuffer() {$/;"	f	class:ReorderingBuffer	access:public	signature:()
~Replaceable	unicode/rep.h	/^    virtual ~Replaceable();$/;"	p	class:Replaceable	access:public	signature:()
~Replaceable	unistr.cpp	/^Replaceable::~Replaceable() {}$/;"	f	class:Replaceable	signature:()
~ResourceBundle	resbund.cpp	/^ResourceBundle::~ResourceBundle()$/;"	f	class:ResourceBundle	signature:()
~ResourceBundle	unicode/resbund.h	/^    virtual ~ResourceBundle();$/;"	p	class:ResourceBundle	access:public	signature:()
~RuleBasedBreakIterator	rbbi.cpp	/^RuleBasedBreakIterator::~RuleBasedBreakIterator() {$/;"	f	class:RuleBasedBreakIterator	signature:()
~RuleBasedBreakIterator	unicode/rbbi.h	/^    virtual ~RuleBasedBreakIterator();$/;"	p	class:RuleBasedBreakIterator	access:public	signature:()
~ServiceEnumeration	servls.cpp	/^    virtual ~ServiceEnumeration() {}$/;"	f	class:ServiceEnumeration	access:public	signature:()
~SimpleFactory	serv.cpp	/^SimpleFactory::~SimpleFactory() $/;"	f	class:SimpleFactory	signature:()
~SimpleLocaleKeyFactory	servslkf.cpp	/^SimpleLocaleKeyFactory::~SimpleLocaleKeyFactory()$/;"	f	class:SimpleLocaleKeyFactory	signature:()
~StringCharacterIterator	schriter.cpp	/^StringCharacterIterator::~StringCharacterIterator() {$/;"	f	class:StringCharacterIterator	signature:()
~StringCharacterIterator	unicode/schriter.h	/^  virtual ~StringCharacterIterator();$/;"	p	class:StringCharacterIterator	access:public	signature:()
~StringEnumeration	unicode/strenum.h	/^    virtual ~StringEnumeration();$/;"	p	class:StringEnumeration	access:public	signature:()
~StringEnumeration	ustrenum.cpp	/^StringEnumeration::~StringEnumeration() {$/;"	f	class:StringEnumeration	signature:()
~SymbolTable	unicode/symtable.h	/^    virtual ~SymbolTable();$/;"	p	class:SymbolTable	access:public	signature:()
~SymbolTable	uniset.cpp	/^SymbolTable::~SymbolTable() {}$/;"	f	class:SymbolTable	signature:()
~TernaryNode	triedict.cpp	/^    ~TernaryNode();$/;"	p	struct:TernaryNode	file:	access:public	signature:()
~TernaryNode	triedict.cpp	/^TernaryNode::~TernaryNode() {$/;"	f	class:TernaryNode	signature:()
~ThaiBreakEngine	dictbe.cpp	/^ThaiBreakEngine::~ThaiBreakEngine() {$/;"	f	class:ThaiBreakEngine	signature:()
~ThaiBreakEngine	dictbe.h	/^  virtual ~ThaiBreakEngine();$/;"	p	class:ThaiBreakEngine	access:public	signature:()
~TrieWordDictionary	triedict.cpp	/^TrieWordDictionary::~TrieWordDictionary() {$/;"	f	class:TrieWordDictionary	signature:()
~TrieWordDictionary	triedict.h	/^  virtual ~TrieWordDictionary();$/;"	p	class:TrieWordDictionary	access:public	signature:()
~UCharCharacterIterator	uchriter.cpp	/^UCharCharacterIterator::~UCharCharacterIterator() {$/;"	f	class:UCharCharacterIterator	signature:()
~UCharCharacterIterator	unicode/uchriter.h	/^  virtual ~UCharCharacterIterator();$/;"	p	class:UCharCharacterIterator	access:public	signature:()
~UObject	unicode/uobject.h	/^    virtual ~UObject();$/;"	p	class:UObject	access:public	signature:()
~UObject	uobject.cpp	/^UObject::~UObject() {}$/;"	f	class:UObject	signature:()
~UStack	ustack.cpp	/^UStack::~UStack() {}$/;"	f	class:UStack	signature:()
~UStack	uvector.h	/^    virtual ~UStack();$/;"	p	class:UStack	access:public	signature:()
~UStringEnumeration	ustrenum.cpp	/^UStringEnumeration::~UStringEnumeration() {$/;"	f	class:UStringEnumeration	signature:()
~UStringEnumeration	ustrenum.h	/^    virtual ~UStringEnumeration();$/;"	p	class:UStringEnumeration	access:public	signature:()
~UTS46	uts46.cpp	/^    virtual ~UTS46();$/;"	p	class:UTS46	file:	access:public	signature:()
~UTS46	uts46.cpp	/^UTS46::~UTS46() {}$/;"	f	class:UTS46	signature:()
~UVector	uvector.cpp	/^UVector::~UVector() {$/;"	f	class:UVector	signature:()
~UVector	uvector.h	/^    virtual ~UVector();$/;"	p	class:UVector	access:public	signature:()
~UVector32	uvectr32.cpp	/^UVector32::~UVector32() {$/;"	f	class:UVector32	signature:()
~UVector32	uvectr32.h	/^    virtual ~UVector32();$/;"	p	class:UVector32	access:public	signature:()
~UVector64	uvectr64.cpp	/^UVector64::~UVector64() {$/;"	f	class:UVector64	signature:()
~UVector64	uvectr64.h	/^    virtual ~UVector64();$/;"	p	class:UVector64	access:public	signature:()
~UVectorDeleter	serv.cpp	/^    ~UVectorDeleter() { delete _obj; }$/;"	f	struct:UVectorDeleter	access:public	signature:()
~UnhandledEngine	brkeng.cpp	/^UnhandledEngine::~UnhandledEngine() {$/;"	f	class:UnhandledEngine	signature:()
~UnhandledEngine	brkeng.h	/^  virtual ~UnhandledEngine();$/;"	p	class:UnhandledEngine	access:public	signature:()
~UnicodeFilter	unicode/unifilt.h	/^    virtual ~UnicodeFilter();$/;"	p	class:UnicodeFilter	access:public	signature:()
~UnicodeFilter	unifilt.cpp	/^UnicodeFilter::~UnicodeFilter() {}$/;"	f	class:UnicodeFilter	signature:()
~UnicodeFunctor	unicode/unifunct.h	/^    virtual ~UnicodeFunctor();$/;"	p	class:UnicodeFunctor	access:public	signature:()
~UnicodeFunctor	unifunct.cpp	/^UnicodeFunctor::~UnicodeFunctor() {}$/;"	f	class:UnicodeFunctor	signature:()
~UnicodeMatcher	unicode/unimatch.h	/^    virtual ~UnicodeMatcher();$/;"	p	class:UnicodeMatcher	access:public	signature:()
~UnicodeMatcher	unifilt.cpp	/^UnicodeMatcher::~UnicodeMatcher() {}$/;"	f	class:UnicodeMatcher	signature:()
~UnicodeSet	unicode/uniset.h	/^    virtual ~UnicodeSet();$/;"	p	class:UnicodeSet	access:public	signature:()
~UnicodeSet	uniset.cpp	/^UnicodeSet::~UnicodeSet() {$/;"	f	class:UnicodeSet	signature:()
~UnicodeSetIterator	unicode/usetiter.h	/^    virtual ~UnicodeSetIterator();$/;"	p	class:UnicodeSetIterator	access:public	signature:()
~UnicodeSetIterator	usetiter.cpp	/^UnicodeSetIterator::~UnicodeSetIterator() {$/;"	f	class:UnicodeSetIterator	signature:()
~UnicodeSetPointer	uniset_props.cpp	/^    inline ~UnicodeSetPointer() { delete p; }$/;"	f	class:UnicodeSetPointer	access:public	signature:()
~UnicodeSetStringSpan	unisetspan.cpp	/^UnicodeSetStringSpan::~UnicodeSetStringSpan() {$/;"	f	class:UnicodeSetStringSpan	signature:()
~UnicodeSetStringSpan	unisetspan.h	/^    ~UnicodeSetStringSpan();$/;"	p	class:UnicodeSetStringSpan	access:public	signature:()
~UnicodeString	unicode/unistr.h	/^  virtual ~UnicodeString();$/;"	p	class:UnicodeString	access:public	signature:()
~UnicodeString	unistr.cpp	/^UnicodeString::~UnicodeString()$/;"	f	class:UnicodeString	signature:()
~XMutex	serv.cpp	/^    inline ~XMutex() {$/;"	f	class:XMutex	access:public	signature:()
